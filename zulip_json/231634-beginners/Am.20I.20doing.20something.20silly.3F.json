[
    {
        "content": "<p>Happy to make an issue for this, but I just want a sanity check - does this make sense to anyone?</p>",
        "id": 267153164,
        "sender_full_name": "jan kili",
        "timestamp": 1641533471
    },
    {
        "content": "<p>Module A:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    _ &lt;- await (line &quot;&quot;)\n    double = \\x -&gt; x * 2\n    doubleBind = \\x -&gt; (\\_ -&gt; double x)\n    six = (doubleBind 3) {}\n    line (Num.toStr six)\n</code></pre></div>\n<p>Output A:</p>\n<div class=\"codehilite\"><pre><span></span><code>6\n</code></pre></div>",
        "id": 267153187,
        "sender_full_name": "jan kili",
        "timestamp": 1641533513
    },
    {
        "content": "<p>Module B:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    _ &lt;- await (line &quot;&quot;)\n    double = \\x -&gt; x * 2\n    doubleBind = \\x -&gt; (\\_ -&gt; double x)\n    doubleThree = doubleBind 3\n    six = doubleThree {}\n    line (Num.toStr six)\n</code></pre></div>\n<p>Output B:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;internal error: entered unreachable code: symbol/layout `8.IdentId(8)` ProcLayout { arguments: [Struct([]), LambdaSet(LambdaSet { set: [(`8.IdentId(8)`, [Builtin(Int(I64))])], representation: Struct([Builtin(Int(I64))]) })], result: Builtin(Int(I64)) } combo must be in DeclarationToIndex&#39;, compiler/mono/src/borrow.rs:227:9\n</code></pre></div>",
        "id": 267153247,
        "sender_full_name": "jan kili",
        "timestamp": 1641533550
    },
    {
        "content": "<p>Changed lines:</p>\n<div class=\"codehilite\"><pre><span></span><code>six = (doubleBind 3) {}\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\"><pre><span></span><code>doubleThree = doubleBind 3\nsix = doubleThree {}\n</code></pre></div>\n<p>(I've removed <code>roc/examples/cli/platform</code> boilerplate for succinctness)</p>",
        "id": 267153286,
        "sender_full_name": "jan kili",
        "timestamp": 1641533596
    },
    {
        "content": "<p>Is there an obvious reason that defining <code>doubleThree</code> causes a panic? <code>roc check</code> is clean on both, btw.</p>",
        "id": 267153363,
        "sender_full_name": "jan kili",
        "timestamp": 1641533664
    },
    {
        "content": "<p>That looks like a compiler bug. The panic is in a file related to refcount insertion. That phase comes after type checking, so wouldn't show up in roc check.</p>",
        "id": 267156854,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1641538326
    },
    {
        "content": "<p>Thanks! I'll report it and temporarily modify my code to use an anonymous binding/closure :)</p>",
        "id": 267156877,
        "sender_full_name": "jan kili",
        "timestamp": 1641538368
    },
    {
        "content": "<p>Great!</p>",
        "id": 267156896,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1641538394
    },
    {
        "content": "<p>That's a relief - I was worried that I'd messed up some great-grandchild binding in my confusing code... but by the time I boiled it down to the minimal reproduction above I was half-sure that something fishy was going on.</p>",
        "id": 267156967,
        "sender_full_name": "jan kili",
        "timestamp": 1641538488
    },
    {
        "content": "<p><a href=\"https://github.com/rtfeldman/roc/issues/2322\">https://github.com/rtfeldman/roc/issues/2322</a></p>",
        "id": 267157142,
        "sender_full_name": "jan kili",
        "timestamp": 1641538686
    },
    {
        "content": "<p>HI all, I am trying to set up my m1 mac for development with nix (using rosetta. i.e. platform is still x86_64). I am getting the following error</p>\n<p>CMake Error at /nix/store/gxqi9sjvvwmf86qx075alg376x32s0zc-llvm-7.1.0-dev/lib/cmake/llvm/TableGen.cmake:14 (message):<br>\n  LLVM_TABLEGEN_EXE not set<br>\nCall Stack (most recent call first):<br>\n  include/clang/Driver/CMakeLists.txt:2 (tablegen)</p>\n<p>Also tried with UTM and nix-shell also fails on aarch64 (different error), next week I will try another VM on x86 which would be slower but perhaps easier to set up.</p>\n<p>I wonder if anyone has experience to share on M1 macs with nix (macos) or nixos.</p>",
        "id": 267388890,
        "sender_full_name": "David Rojas Camaggi",
        "timestamp": 1641779576
    },
    {
        "content": "<p>I use an m1 mac with nix. No rosetta</p>",
        "id": 267392073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641784630
    },
    {
        "content": "<p>Tends to just work</p>",
        "id": 267392076,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641784637
    },
    {
        "content": "<p>Though has some limitations were we don't fully support arm. Not a problem for the main llvm backend.</p>",
        "id": 267392084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641784671
    },
    {
        "content": "<p>something must be off on my setup, this is what I get with system = aarch64-darwin -&gt; \"       &gt;...libredirect.dylib' (mach-o file, but is an incompatible architecture (have 'arm64', need 'arm64e'))\"</p>",
        "id": 267393169,
        "sender_full_name": "David Rojas Camaggi",
        "timestamp": 1641786478
    },
    {
        "content": "<p>I have never seen that, when does it come up?</p>",
        "id": 267394847,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641788945
    },
    {
        "content": "<p>Also, my setup may be leaky (i.e, I also have rust outside of nix and maybe zig), which may fix potential nix issues</p>",
        "id": 267394858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641788980
    },
    {
        "content": "<p>found it was OpenAL (audio fw specific to macos), not sure why yet but commenting it out allows me to run a shell</p>",
        "id": 267397765,
        "sender_full_name": "David Rojas Camaggi",
        "timestamp": 1641793125
    },
    {
        "content": "<p>doing that on x86 system, but that arm64 thing is from when I was trying aarch64-darwin</p>",
        "id": 267397862,
        "sender_full_name": "David Rojas Camaggi",
        "timestamp": 1641793272
    },
    {
        "content": "<p>I use the M1 Max and no nix</p>",
        "id": 267607941,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1641918881
    },
    {
        "content": "<p>How can I write a function that accepts a tag argument that could be either an <code>A</code> tag or a <code>B</code> tag? I tried this, but it doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code>» a : [ A Str ]\n… a = A &quot;A&quot;\n… f : [ A Str, B Str ] -&gt; Str\n… f = \\x -&gt;\n…     when x is\n…         A y -&gt; y\n…         B y -&gt; y\n… f a\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nThe 1st argument to f is not what I expect:\n\n11│      f a\n           ^\n\nThis a value is a:\n\n    [ A Str ]\n\nBut f needs the 1st argument to be:\n\n    [ A Str, B Str ]\n\nTip: Looks like a closed tag union does not have the B tag.\n\nTip: Closed tag unions can&#39;t grow, because that might change the size\nin memory. Can you use an open tag union?\n</code></pre></div>",
        "id": 267830076,
        "sender_full_name": "jan kili",
        "timestamp": 1642056504
    },
    {
        "content": "<p>Yeah I've run into this kind of thing as well. It's because of the language supporting open tag unions. So in theory <code>A Str</code> could be part of any other union besides this one. Longer term I imagine we'll be able to figure it out, I'm not sure. But we don't right now.<br>\nI have found a type annotation works in this kind of situation. If you give a name to your union like <code>AorB : [A Str, B Str]</code> and then give <code>a</code> a type annotation like <code>a : AorB</code></p>",
        "id": 267830566,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642056984
    },
    {
        "content": "<p>Or I suppose you could probably type it out again rather than naming it! But you'll probably want to name it anyway.</p>",
        "id": 267830669,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642057090
    },
    {
        "content": "<p>Interesting, so now I notice that the inferred type for <code>a = A \"A\"</code> is <code>[ A Str ]*</code></p>",
        "id": 267830715,
        "sender_full_name": "jan kili",
        "timestamp": 1642057148
    },
    {
        "content": "<p>This is confusing to me, because how could <code>a</code> ever accumulate additional tags in its union? It will only ever be that <code>A</code> tag.</p>",
        "id": 267830740,
        "sender_full_name": "jan kili",
        "timestamp": 1642057194
    },
    {
        "content": "<p>Yeah I agree and I suspect that it's more of a bug than a feature. But I don't work on that part of the compiler so I'm not 100% sure!</p>",
        "id": 267831340,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642057790
    },
    {
        "content": "<p>Is the real meaning more like \"<code>a</code> can be used anywhere a tag union matches this pattern: <code>[ A Str ]*</code>\"?</p>",
        "id": 267831348,
        "sender_full_name": "jan kili",
        "timestamp": 1642057801
    },
    {
        "content": "<p>I was initially interpreting its inferred type as saying \"<code>a</code> is a tag could be <code>A Str</code> or something else\"</p>",
        "id": 267831498,
        "sender_full_name": "jan kili",
        "timestamp": 1642057924
    },
    {
        "content": "<p>That's what I gathered from this part of the tutorial:</p>\n<blockquote>\n<p>If you have a closed union, that means it has all the tags it ever will, and can't accumulate more.<br>\nIf you have an open union, that means it can accumulate more tags through conditional branches.</p>\n</blockquote>",
        "id": 267831528,
        "sender_full_name": "jan kili",
        "timestamp": 1642057963
    },
    {
        "content": "<p>Hold on, that's not the type of <code>a</code>! There's no <code>*</code></p>",
        "id": 267831540,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642057979
    },
    {
        "content": "<p>In your example code</p>",
        "id": 267831550,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642057990
    },
    {
        "content": "<p>True, but in the REPL if I drop my manual annotation, I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  The rockin’ roc repl\n────────────────────────\n\nEnter an expression, or :help, or :exit/:q.\n\n» a = A &quot;A&quot;\n… a\n\nA &quot;A&quot; : [ A Str ]*\n\n»\n</code></pre></div>",
        "id": 267831567,
        "sender_full_name": "jan kili",
        "timestamp": 1642058016
    },
    {
        "content": "<p>So it's a closed union that says <code>a</code> can only be <code>A Str</code> and never any other tag. So that's a different type.</p>",
        "id": 267831569,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058017
    },
    {
        "content": "<p>The \"inferred\" type</p>",
        "id": 267831581,
        "sender_full_name": "jan kili",
        "timestamp": 1642058034
    },
    {
        "content": "<p>yes but your two examples have different types for the same expression</p>",
        "id": 267831584,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058036
    },
    {
        "content": "<p>The inferred type will have a <code>*</code> but if you annotate it without one you are telling the compiler you explicitly do not want any other tag to be a valid part of the type of <code>a</code>.</p>",
        "id": 267831685,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058110
    },
    {
        "content": "<p>I see, so basically if a function can handle multiple tags, it's illegal to call it with an input that can't be all of those tags.</p>",
        "id": 267831690,
        "sender_full_name": "jan kili",
        "timestamp": 1642058118
    },
    {
        "content": "<p>i.e. if I have an HTTP response that is somehow guaranteed to be a <code>404</code>, I can't pass that to a function that processes both <code>200</code> and <code>404</code> responses?</p>",
        "id": 267831810,
        "sender_full_name": "jan kili",
        "timestamp": 1642058220
    },
    {
        "content": "<p>That very much depends on the types they have!</p>",
        "id": 267831861,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058276
    },
    {
        "content": "<p>There are lots of ways to represent HTTP responses in the type system</p>",
        "id": 267831910,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058291
    },
    {
        "content": "<p>Do you still get this error in the repl case with the inferred type?</p>",
        "id": 267831955,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058376
    },
    {
        "content": "<p>No, I actually get a panic <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 267831967,
        "sender_full_name": "jan kili",
        "timestamp": 1642058389
    },
    {
        "content": "<p>But that's probably irrelevant <a href=\"https://github.com/rtfeldman/roc/issues/2344\">https://github.com/rtfeldman/roc/issues/2344</a></p>",
        "id": 267832014,
        "sender_full_name": "jan kili",
        "timestamp": 1642058403
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 267832021,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058407
    },
    {
        "content": "<p>Could you please give me an example of a situation where I would want to manually annotate a def as being a closed tag union instead of an open one?</p>",
        "id": 267832039,
        "sender_full_name": "jan kili",
        "timestamp": 1642058433
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>a : [ A Str ]\na = A &quot;A&quot;\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\"><pre><span></span><code>a : [ A Str ]*\na = A &quot;A&quot;\n</code></pre></div>",
        "id": 267832060,
        "sender_full_name": "jan kili",
        "timestamp": 1642058459
    },
    {
        "content": "<p>The bottom one seems objectively better, if the top one can't be passed to functions that accept other tags.</p>",
        "id": 267832085,
        "sender_full_name": "jan kili",
        "timestamp": 1642058487
    },
    {
        "content": "<p>I ask because I'm still confused what the distinction is. I get why functions would accept closed vs. open, but I don't get how a def can BE closed or open.</p>",
        "id": 267832166,
        "sender_full_name": "jan kili",
        "timestamp": 1642058538
    },
    {
        "content": "<p>I don't know, I didn't design this feature, I was just trying to help with your specific error but you probably want to talk to someone who was involved in designing it</p>",
        "id": 267832178,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642058551
    },
    {
        "content": "<p>:) Makes sense, thanks!</p>",
        "id": 267832192,
        "sender_full_name": "jan kili",
        "timestamp": 1642058564
    },
    {
        "content": "<p>I'll open a new topic for this, since you helped me figure out the silly thing.</p>",
        "id": 267832202,
        "sender_full_name": "jan kili",
        "timestamp": 1642058580
    },
    {
        "content": "<p>I modified the example CLI platform to use Rust's <code>print</code> instead of <code>println</code>, and now I'm successfully writing a lot of Rust-based <code>print</code>s to <code>stdout</code> (with a <code>\\r</code> between each, so that the line overwrites itself)! However, after ~47,000 consecutive (very fast) writes to stdout, I'm getting a <code>Segmentation fault: 11</code>. Since these writes are generated by recursive <code>_ &lt;- await ...</code> calls, is this an expected \"stack overflow\"-type problem with having too many callbacks? Is there a better way to do a lot of I/O tasks without causing such a segfault? My instinct is to replace the recursion with a <code>while</code> loop, but that doesn't exist in Roc.</p>",
        "id": 268172162,
        "sender_full_name": "jan kili",
        "timestamp": 1642321033
    },
    {
        "content": "<p>The only way I can think to get more writes out of this program would be to wrap the Roc <code>main</code> function in a Rust <code>while</code> loop at the platform level (and make the Roc <code>main</code> function responsible for only one write), but I don't know enough about platforms to know if that would somehow break the platform/application contract.</p>",
        "id": 268172471,
        "sender_full_name": "jan kili",
        "timestamp": 1642321527
    },
    {
        "content": "<p>The context for this I/O use case is that I'm experimenting with how one might use Roc to do ASCII animation for things like CLI loading spinners or simple CLI games (Snake? Space Invaders?) <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268172671,
        "sender_full_name": "jan kili",
        "timestamp": 1642321862
    },
    {
        "content": "<p>I can help with one piece of this: Getting the compiler to generate <code>while</code> loops.<br>\nAny function that is tail-recursive will be automatically transformed into a <code>while</code> loop. If you're not familiar with that concept, here's an article that explains it: <a href=\"https://www.geeksforgeeks.org/tail-recursion/\">https://www.geeksforgeeks.org/tail-recursion/</a>. Normally you need to refactor your code so that any value that's preserved from one iteration to the next becomes an <em>argument</em> of the recursive call. Those extra arguments usually make the function ugly to use from the outside world, so you end up wrapping it in another function to make it nicer.</p>",
        "id": 268179188,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642332306
    },
    {
        "content": "<p>Ah, that's super useful! Does that only apply to functions <code>provide</code>d to the platform, or all of them?</p>",
        "id": 268182385,
        "sender_full_name": "jan kili",
        "timestamp": 1642337067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> Would this module get the <code>while</code> loop optimization? It seems like it might, as it is still running and hasn't crashed yet <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>#!/usr/bin/env roc\n\napp &quot;example&quot;\n    packages { pf: &quot;./roc/examples/cli/platform&quot; }\n    imports [ pf.Stdout.{ line }, pf.Task.{ await } ]\n    provides [ main ] to pf\n\nmain =\n    _ &lt;- await (line &quot;&quot;)\n    tick 1000000000000\n\ntick = \\count -&gt;\n    if count == 0 then\n        line &quot;Done!&quot;\n    else\n        # _ &lt;- await (line (Num.toStr count))\n        tick (count - 1)\n</code></pre></div>",
        "id": 268184599,
        "sender_full_name": "jan kili",
        "timestamp": 1642340001
    },
    {
        "content": "<p>Nope, it's any function that calls itself and immediately returns the result. This is an optimisation that is implemented in pretty much every functional language. It's the standard trick for doing loops without mutation. I think it was figured out in the 70s, like everything else! It's called tail-call optimisation or tail-call elimination.</p>",
        "id": 268185015,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642340551
    },
    {
        "content": "<p>I had lots of fun learning to use this when I discovered it!</p>",
        "id": 268185042,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642340606
    },
    {
        "content": "<p>eh, in the above case <code>tick</code> will be TCO'd</p>",
        "id": 268185447,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642341133
    },
    {
        "content": "<p>Would uncommenting the <code>await</code> change that?</p>",
        "id": 268187322,
        "sender_full_name": "jan kili",
        "timestamp": 1642342543
    },
    {
        "content": "<p>today, probably yes</p>",
        "id": 268187520,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642342708
    },
    {
        "content": "<p>but LLVM may be able to turn the recursion back into a loop after some inlining</p>",
        "id": 268187528,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642342738
    },
    {
        "content": "<p>I see! Thanks. So then... is it impossible today to avoid a stack overflow when infinitely-repeating an I/O cycle?</p>",
        "id": 268189426,
        "sender_full_name": "jan kili",
        "timestamp": 1642344619
    },
    {
        "content": "<p>(I'm glad there's a path to clean TCO for I/O, though!)</p>",
        "id": 268189721,
        "sender_full_name": "jan kili",
        "timestamp": 1642345079
    },
    {
        "content": "<p>This is actually an interesting question. So say we start with something of this form</p>\n<div class=\"codehilite\"><pre><span></span><code>tick = \\count -&gt;\n    if count == 0 then\n        Effect.putLine &quot;done&quot;\n\n    else\n        Effect.await (Effect.putLine &quot;step&quot;) \\{} -&gt; tick (count - 1)\n</code></pre></div>\n\n<p>Where <code>Effect a : [ @Effect (World -&gt; { a, world: World } ) ]</code> and</p>\n<div class=\"codehilite\"><pre><span></span><code>Effect.await : Effect a, (a -&gt; Effect b) -&gt; Effect b \nEffect.await = \\@Effect thunk, toEffect -&gt; \n    @Effect \\world1 -&gt;\n        { a, world: world2 } = thunk world1\n\n        @Effect thunk2 = toEffect a\n\n        thunk2 world2\n</code></pre></div>\n\n<p>Inlining gives</p>\n<div class=\"codehilite\"><pre><span></span><code>tick = \\count -&gt;\n    if count == 0 then\n        Effect.putLine &quot;done&quot;\n\n    else\n        @Effect thunk = Effect.putLine &quot;step&quot; \n        toEffect = \\{} -&gt; tick (count - 1)\n\n        @Effect \\world1 -&gt;\n            { a, world: world2 } = thunk world1\n\n            @Effect thunk2 = toEffect a\n\n            thunk2 world2\n</code></pre></div>\n\n<p>The <code>@Effect</code> wrapper melts away</p>\n<div class=\"codehilite\"><pre><span></span><code>tick = \\count -&gt;\n    if count == 0 then\n        Effect.putLine &quot;done&quot;\n\n    else\n        thunk = Effect.putLine &quot;step&quot; \n        toEffect = \\{} -&gt; tick (count - 1)\n\n        \\world1 -&gt;\n            { a, world: world2 } = thunk world1\n\n            thunk2 = toEffect a\n\n            thunk2 world2\n</code></pre></div>\n\n<p>We can clean this up slightly</p>\n<div class=\"codehilite\"><pre><span></span><code>tick = \\count -&gt;\n    if count == 0 then\n        Effect.putLine &quot;done&quot;\n\n    else\n        thunk = Effect.putLine &quot;step&quot; \n        toEffect = \\{} -&gt; tick (count - 1)\n\n        \\world1 -&gt;\n            { a, world: world2 } = thunk world1\n\n            (toEffect a) world2\n</code></pre></div>\n\n<p>In this case we can inline <code>toEffect</code>, because the data dependency on <code>world2</code> ensures correct evaluation order <br>\nAlso we can move thunk into the closure and inline it (this does not happen today, but it's semantically valid)</p>\n<div class=\"codehilite\"><pre><span></span><code>tick : I64 -&gt; (World -&gt; { a: {}, world : World })\ntick = \\count -&gt;\n    if count == 0 then\n        Effect.putLine &quot;done&quot;\n\n    else\n        \\world1 -&gt;\n            { a: _, world: world2 } = (Effect.putLine &quot;step&quot;) world1\n\n            (tick (count - 1)) world2\n</code></pre></div>\n\n<p>now we lift functions to the toplevel, and run into issues with closures</p>\n<div class=\"codehilite\"><pre><span></span><code>helper \\world1, { count } -&gt;\n    { a: _, world: world2 } = (Effect.putLine &quot;step&quot;) world1\n\n    (tick (count - 1)) world2\n\ntick : I64 -&gt; (World -&gt; { a: {}, world : World })\ntick = \\count -&gt;\n    if count == 0 then\n        Effect.putLine &quot;done&quot;\n\n    else\n        helper ??? { count }\n</code></pre></div>\n\n<p>we need to complete the closure conversion</p>\n<div class=\"codehilite\"><pre><span></span><code>helper : World, { count : I64 } -&gt; { a: {}, world : World }\nhelper \\world1, { count } -&gt;\n    { a: _, world: world2 } = (Effect.putLine &quot;step&quot;) world1\n\n    when tick (count - 1) is    \n        C1 { msg } -&gt; (Effect.putLine msg) world2\n        C2 { count } -&gt; helper world2 { count }\n\ntick : I64 -&gt; [ C1 Effect.putLine { msg: Str }, C2 helper { count: I64 } ]\ntick = \\count -&gt;\n    if count == 0 then\n        C1 { msg: &quot;done&quot; }\n\n    else\n        C2 { count }\n</code></pre></div>\n\n<p>and now <code>helper</code> can be TCO'd.</p>",
        "id": 268205149,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642365020
    },
    {
        "content": "<p>given that we can do this with some simple rewriting, it seems plausible that LLVM could already figure this out today</p>",
        "id": 268205201,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642365101
    },
    {
        "content": "<p>indeed, for this example the LLVM gets there</p>\n<div class=\"codehilite\"><pre><span></span><code>  %call1.i.i = tail call fastcc %str.RocStr @&quot;#UserApp_tick_6cc39a125db7a4f2ba7ee17ffefa9ff1fe97baed9c849631614587aef96caa15&quot;(i64 %operation_result.i.i.i)\n  ret %str.RocStr %call1.i.i\n</code></pre></div>",
        "id": 268205336,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642365259
    },
    {
        "content": "<p>🤯</p>",
        "id": 268207401,
        "sender_full_name": "jan kili",
        "timestamp": 1642367918
    },
    {
        "content": "<p><span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 268207431,
        "sender_full_name": "jan kili",
        "timestamp": 1642367994
    },
    {
        "content": "<p>How does <code>tick</code> not need to call <code>helper</code>?<br>\nHow is its annotation (<code>tick : I64 -&gt; [ C1 Effect.putLine { msg: Str }, C2 helper { count: I64 } ]</code>) legal if <code>Effect.putLine</code> and <code>helper</code> are functions?<br>\nAre the functions called implicitly or something?</p>",
        "id": 268207908,
        "sender_full_name": "jan kili",
        "timestamp": 1642368531
    },
    {
        "content": "<p>trying to figure out how to explain this, but that's kind of the idea yes</p>",
        "id": 268208355,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369105
    },
    {
        "content": "<p>We're missing main here </p>\n<div class=\"codehilite\"><pre><span></span><code>main : Effect {}\nmain = tick 5\n</code></pre></div>\n\n<p>Based on the return type for <code>tick</code>, this should be</p>\n<div class=\"codehilite\"><pre><span></span><code>main : [ C1 Effect.putLine { msg: Str }, C2 helper { count: I64 } ]\nmain = tick 5\n</code></pre></div>\n\n<p>This is the main function we expose. What it returns is really a suspended computation, or a recipe for a computation. We also expose an evaluator for this recipe. Intuitively </p>\n<div class=\"codehilite\"><pre><span></span><code>cheatyActualMain : Effect a -&gt; a \ncheatyActualMain = \\effect -&gt; \n    @Effect thunk = effect\n\n    thunk world\n</code></pre></div>\n\n<p>The closure transform turns that into (we're pretending here that <code>cheatyActualMain main</code> is called:</p>\n<div class=\"codehilite\"><pre><span></span><code>cheatyActualMain : [ C1 Effect.putLine { msg: Str }, C2 helper { count: I64 } ] -&gt; {}\ncheatyActualMain = \\closure -&gt; \n    when closure is\n        C1 { msg } -&gt; (Effect.putLine msg) world\n        C2 { count } -&gt; helper world { count }\n</code></pre></div>",
        "id": 268208674,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369509
    },
    {
        "content": "<p>Where is <code>World</code> defined? (I've never heard of \"worlds\" in Roc before.)</p>",
        "id": 268208771,
        "sender_full_name": "jan kili",
        "timestamp": 1642369673
    },
    {
        "content": "<p>it's something I stole from haskell real quick to make sure the ordering of operations is fixed</p>",
        "id": 268208843,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369762
    },
    {
        "content": "<p>you could say <code>World : {}</code></p>",
        "id": 268208850,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369775
    },
    {
        "content": "<p>haskell's IO monad is defined in this way</p>",
        "id": 268208859,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369799
    },
    {
        "content": "<p>How does <code>Effect a</code> unify with <code>[ C1 Effect.putLine { msg: Str }, C2 helper { count: I64 } ]</code>? (I may be using the world \"unify\" incorrectly here, but I don't see how <code>cheatyActualMain</code> can accept <code>main</code> as its argument.</p>",
        "id": 268208861,
        "sender_full_name": "jan kili",
        "timestamp": 1642369802
    },
    {
        "content": "<p>where <code>IO a : (RealWorld -&gt; (a, RealWorld)</code></p>",
        "id": 268208903,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369816
    },
    {
        "content": "<p>right, so they don't unify but they are related in this case</p>",
        "id": 268208927,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369869
    },
    {
        "content": "<p>in e.g. elm we think of function types as just <code>a -&gt; b</code></p>",
        "id": 268208938,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369887
    },
    {
        "content": "<p>but, we extend that with an extra piece of information: what values (and with which types) are captured by the function</p>",
        "id": 268208957,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369922
    },
    {
        "content": "<p>So given</p>\n<div class=\"codehilite\"><pre><span></span><code>identity = \\x -&gt; x\n</code></pre></div>\n\n<p>where elm would say </p>\n<div class=\"codehilite\"><pre><span></span><code>identity : a -&gt; a\n</code></pre></div>\n\n<p>we under the hood say</p>\n<div class=\"codehilite\"><pre><span></span><code>identity : a [ C identity {} ] -&gt; a\n</code></pre></div>",
        "id": 268209043,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642369994
    },
    {
        "content": "<p>Whoa! So is <code>[ C1 Effect.putLine { msg: Str }, C2 helper { count: I64 } ]</code> an annotation for only under-the-hood or is it also legal above-the-hood?</p>",
        "id": 268209103,
        "sender_full_name": "jan kili",
        "timestamp": 1642370059
    },
    {
        "content": "<p>and more interestingly</p>\n<div class=\"codehilite\"><pre><span></span><code>f = \\x -&gt; Str.concat x y\n</code></pre></div>\n\n<p>(note, y is not bound within f, it is a free variable, and captured by this closure)</p>\n<div class=\"codehilite\"><pre><span></span><code>f : Str [ C f { y : Str } ] -&gt; Str\n</code></pre></div>",
        "id": 268209107,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642370082
    },
    {
        "content": "<p>the closure part is under-the-hood entirely</p>",
        "id": 268209115,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642370092
    },
    {
        "content": "<p>I'm wondering whether I can stitch these code snippets into a module and run it on <code>./roc/examples/cli/platform</code></p>",
        "id": 268209118,
        "sender_full_name": "jan kili",
        "timestamp": 1642370094
    },
    {
        "content": "<p>in any case, to bring this together, we eliminate function values, and replace them by their captured environment. So <code>main : Effect a</code> really has a function type <code>main : World [ some things ] -&gt; { a, World }</code>, and that function value we represent by the closure tag union</p>",
        "id": 268209202,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642370218
    },
    {
        "content": "<p>and then by doing some bookkeeping we can later know how to evaluate a closure value: simply match on all possible functions that it could be and pass along the arguments</p>",
        "id": 268209270,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642370312
    },
    {
        "content": "<p>Are these tricks possible in a simple application outside of its platform? Above the platform/application boundary?</p>",
        "id": 268209802,
        "sender_full_name": "jan kili",
        "timestamp": 1642370988
    },
    {
        "content": "<p>For example, using the <code>examples/cli/platform</code> as-is?</p>",
        "id": 268209848,
        "sender_full_name": "jan kili",
        "timestamp": 1642371014
    },
    {
        "content": "<p>not in user code, because <code>Effect</code> is made with a private tag</p>",
        "id": 268209861,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371036
    },
    {
        "content": "<p>so you cannot unpack it or manually make an <code>Effect</code> from a function</p>",
        "id": 268209866,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371056
    },
    {
        "content": "<p>Ah, I see. Does that mean that today there's no <em>platform-agnostic</em> way to avoid a stack overflow when infinitely-repeating an I/O cycle?</p>",
        "id": 268210073,
        "sender_full_name": "jan kili",
        "timestamp": 1642371361
    },
    {
        "content": "<p>there is no guaranteed way</p>",
        "id": 268210148,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371457
    },
    {
        "content": "<p>Platforms have to explicitly support any infinite loops required for servers / games / long-running processes?</p>",
        "id": 268210157,
        "sender_full_name": "jan kili",
        "timestamp": 1642371475
    },
    {
        "content": "<p>but with <code>--optimize</code> tail optimization already happens</p>",
        "id": 268210162,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371479
    },
    {
        "content": "<p>in these cases</p>",
        "id": 268210204,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371485
    },
    {
        "content": "<p>I'd like to add <code>Effect.forever : Effect a -&gt; Effect b</code> for that</p>",
        "id": 268210228,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371544
    },
    {
        "content": "<p>Thank you for all this info!</p>",
        "id": 268210372,
        "sender_full_name": "jan kili",
        "timestamp": 1642371736
    },
    {
        "content": "<p>I'm disappointed that my pure-Roc CLI-based ASCII game hopes must be put on hold, but I'm hopeful it'll get support in the future :)</p>",
        "id": 268210413,
        "sender_full_name": "jan kili",
        "timestamp": 1642371795
    },
    {
        "content": "<p>did you run into stack issues?</p>",
        "id": 268210414,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371808
    },
    {
        "content": "<p>Yeah, I got a segfault after 47k frames</p>",
        "id": 268210418,
        "sender_full_name": "jan kili",
        "timestamp": 1642371826
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 268210425,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371833
    },
    {
        "content": "<p>you did use <code>--optimize</code>?</p>",
        "id": 268210428,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371839
    },
    {
        "content": "<p>I didn't! What command is that a flag for?</p>",
        "id": 268210476,
        "sender_full_name": "jan kili",
        "timestamp": 1642371859
    },
    {
        "content": "<p>you can do <code>cargo run -- --optimize foo/bar/Baz.roc</code></p>",
        "id": 268210483,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371882
    },
    {
        "content": "<p>Ooh, I'll try</p>",
        "id": 268210491,
        "sender_full_name": "jan kili",
        "timestamp": 1642371894
    },
    {
        "content": "<p>And that might work with a mid-<code>tick</code> <code>_ &lt;- await</code>?</p>",
        "id": 268210504,
        "sender_full_name": "jan kili",
        "timestamp": 1642371921
    },
    {
        "content": "<p>certainly worth a try</p>",
        "id": 268210513,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642371945
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/EOlK4aYKs6e_yjWLcMFmAINZ/gogogo.gif\">gogogo.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/EOlK4aYKs6e_yjWLcMFmAINZ/gogogo.gif\" title=\"gogogo.gif\"><img src=\"/user_uploads/22008/EOlK4aYKs6e_yjWLcMFmAINZ/gogogo.gif\"></a></div>",
        "id": 268211393,
        "sender_full_name": "jan kili",
        "timestamp": 1642373306
    },
    {
        "content": "<p>nice!</p>",
        "id": 268211402,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642373346
    },
    {
        "content": "<p>so yeah we should figure out how to also make this work in non-optimized modes</p>",
        "id": 268211412,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642373368
    },
    {
        "content": "<p><code>Am I doing something silly?</code> Yes, I'm running unoptimized code!</p>",
        "id": 268211467,
        "sender_full_name": "jan kili",
        "timestamp": 1642373426
    },
    {
        "content": "<p>Space Invaders, here I come.</p>",
        "id": 268211488,
        "sender_full_name": "jan kili",
        "timestamp": 1642373455
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 268211712,
        "sender_full_name": "jan kili",
        "timestamp": 1642373785
    },
    {
        "content": "<p>(Side note, my mac went to sleep twice during the one minute I was running that infinite sleepless loop <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>)</p>",
        "id": 268211796,
        "sender_full_name": "jan kili",
        "timestamp": 1642373915
    },
    {
        "content": "<p>(I think I might need to add a <code>sleep</code> function to the platform's API)</p>",
        "id": 268211822,
        "sender_full_name": "jan kili",
        "timestamp": 1642373969
    },
    {
        "content": "<p>really, it can go to sleep during busy-waiting loops?</p>",
        "id": 268211890,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642374015
    },
    {
        "content": "<p>Thank you both for this really interesting discussion <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268235182,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1642403835
    },
    {
        "content": "<p>Yeah, interesting stuff!</p>",
        "id": 268252047,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642415068
    },
    {
        "content": "<p>Great we can do this as well. Having a main loop with I/O inside it will be useful in all sorts of places!</p>",
        "id": 268252178,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1642415149
    },
    {
        "content": "<p>I wonder if <a href=\"https://github.com/rtfeldman/roc/issues/1778\">https://github.com/rtfeldman/roc/issues/1778</a> would still be reproducible with <code>--optimize</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 268297264,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1642440508
    },
    {
        "content": "<p>I think the inliner is not able to make the same thing happen there. We definitely tried it with <code>--optimize</code></p>",
        "id": 268300651,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642442736
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>define internal fastcc {} @Effect_forever_inner_fb5e512425fc9449316ec95969ebe71e2d576dbab833d61e2a5b9330fd70ee2({} %&quot;5&quot;, { { %str.RocStr } } %&quot;#arg_closure&quot;) {\nentry:\n  br label %tailrecurse\n\ntailrecurse:                                      ; preds = %tailrecurse, %entry\n  %&quot;5.tr&quot; = phi {} [ %&quot;5&quot;, %entry ], [ zeroinitializer, %tailrecurse ]\n  %&quot;#arg_closure.tr&quot; = phi { { %str.RocStr } } [ %&quot;#arg_closure&quot;, %entry ], [ %call1, %tailrecurse ]\n  %struct_field_access_record_0 = extractvalue { { %str.RocStr } } %&quot;#arg_closure.tr&quot;, 0\n  tail call fastcc void @&quot;#Attr_#inc_2&quot;({ %str.RocStr } %struct_field_access_record_0, i64 1)\n  tail call fastcc void @&quot;#Attr_#dec_3&quot;({ { %str.RocStr } } %&quot;#arg_closure.tr&quot;)\n  tail call fastcc void @&quot;#Attr_#inc_2&quot;({ %str.RocStr } %struct_field_access_record_0, i64 1)\n  %call = tail call fastcc {} @Effect_effect_closure_putLine_9d9f29527a6be626a8f5985b26e19b237b44872b03631811df4416fc1713178({} zeroinitializer, { %str.RocStr } %struct_field_access_record_0)\n  %call1 = tail call fastcc { { %str.RocStr } } @Effect_forever_67abdd721024f0ff4eb3f4c2fc13bc5bad42db7851d456d88d203d15aaa450({ %str.RocStr } %struct_field_access_record_0)\n  br label %tailrecurse\n}\n</code></pre></div>\n<p>it's beautiful</p>",
        "id": 268564550,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642609419
    },
    {
        "content": "<p>This is an <code>Effect.forever</code> (used as e.g. <code>Effect.forever (Effect.putLine \"hello world\")</code> to print that line forever) and llvm turns it into a loop</p>",
        "id": 268564708,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642609473
    },
    {
        "content": "<p>still needs some cleanup, and then maybe some variations that could iterate while some condition is true</p>",
        "id": 268564964,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642609575
    },
    {
        "content": "<p>Nice! Is this for use in appcode or platformcode?</p>",
        "id": 268565271,
        "sender_full_name": "jan kili",
        "timestamp": 1642609693
    },
    {
        "content": "<p>a platform author could now expose <code>Task.forever</code> building upon this function</p>",
        "id": 268565628,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642609830
    },
    {
        "content": "<p>so, both kinda</p>",
        "id": 268565633,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642609835
    },
    {
        "content": "<p>That's super useful.</p>",
        "id": 268565719,
        "sender_full_name": "jan kili",
        "timestamp": 1642609877
    },
    {
        "content": "<p>wow, fantastic!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>\n<p>this may end up becoming one of the most commonly used functions among all Roc programs!</p>",
        "id": 268574795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1642613323
    },
    {
        "content": "<p>omg! I wanted this for an event loop when I was trying to wrap SDL in a platform</p>",
        "id": 268594278,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1642622021
    },
    {
        "content": "<p>this is very cool!</p>",
        "id": 268594292,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1642622029
    },
    {
        "content": "<p>This now also works</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">main : </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">Task</span> <span class=\"p\">{}</span> <span class=\"p\">[]</span>\n<span class=\"nv\">main =</span>\n    <span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">loop</span> <span class=\"mi\">0</span> <span class=\"nx\">looper</span>\n\n<span class=\"nv\">looper = </span><span class=\"err\">\\</span><span class=\"nx\">n</span> <span class=\"nf\">-&gt;</span>\n    <span class=\"k\">if</span> <span class=\"nx\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n        <span class=\"nv\">s = </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toStr</span> <span class=\"nx\">n</span>\n\n        <span class=\"p\">{}</span> <span class=\"o\">&lt;-</span> <span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">after</span> <span class=\"p\">(</span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">putLine</span> <span class=\"s\">\"Iteration: \\(s)\"</span><span class=\"p\">)</span>\n\n        <span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span> <span class=\"p\">(</span><span class=\"nx\">Step</span> <span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"k\">else</span>\n        <span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span> <span class=\"p\">(</span><span class=\"nx\">Done</span> <span class=\"p\">{})</span>\n</code></pre></div>",
        "id": 268608470,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642629062
    },
    {
        "content": "<p>plus we get</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">forever : </span><span class=\"nx\">Task</span> <span class=\"nx\">val</span> <span class=\"nx\">err</span> <span class=\"nf\">-&gt;</span> <span class=\"nx\">Task</span> <span class=\"o\">*</span> <span class=\"nx\">err</span>\n<span class=\"nv\">forever = </span><span class=\"err\">\\</span><span class=\"nx\">task</span> <span class=\"nf\">-&gt;</span>\n    <span class=\"nv\">helper = </span><span class=\"err\">\\</span><span class=\"p\">{}</span> <span class=\"nf\">-&gt;</span>\n        <span class=\"nx\">task</span>\n            <span class=\"o\">|&gt;</span> <span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">map</span> <span class=\"err\">\\</span><span class=\"nx\">res</span> <span class=\"nf\">-&gt;</span>\n                <span class=\"k\">when</span> <span class=\"nx\">res</span> <span class=\"o\">is</span>\n                    <span class=\"nx\">Ok</span> <span class=\"nx\">_</span> <span class=\"nf\">-&gt;</span> <span class=\"nx\">Step</span> <span class=\"p\">{}</span>\n                    <span class=\"nx\">Err</span> <span class=\"nx\">e</span> <span class=\"nf\">-&gt;</span> <span class=\"nx\">Done</span> <span class=\"p\">(</span><span class=\"nx\">Err</span> <span class=\"nx\">e</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">loop</span> <span class=\"p\">{}</span> <span class=\"nx\">helper</span>\n</code></pre></div>\n<p>i.e. a <code>forever</code> on tasks that terminates when a task fails</p>",
        "id": 268609746,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642629640
    },
    {
        "content": "<p>Yesss</p>",
        "id": 268614180,
        "sender_full_name": "jan kili",
        "timestamp": 1642632082
    },
    {
        "content": "<p>Are you planning to add any of these examples to <code>examples/</code>?</p>",
        "id": 268614268,
        "sender_full_name": "jan kili",
        "timestamp": 1642632126
    },
    {
        "content": "<p>This feature is invaluable to web servers, games, etc! Thank you :D</p>",
        "id": 268614377,
        "sender_full_name": "jan kili",
        "timestamp": 1642632209
    },
    {
        "content": "<p>the <code>loop</code> and <code>forever</code> task functions are added to the benchmarks and cli platforms in my PRs</p>",
        "id": 268614423,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642632239
    },
    {
        "content": "<p>no usage examples yet though</p>",
        "id": 268614474,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1642632248
    },
    {
        "content": "<p>I might add some usage examples (unless you want to)</p>",
        "id": 268614591,
        "sender_full_name": "jan kili",
        "timestamp": 1642632327
    },
    {
        "content": "<p>to give <code>examples/cli/Echo.roc</code> some friends</p>",
        "id": 268614739,
        "sender_full_name": "jan kili",
        "timestamp": 1642632410
    },
    {
        "content": "<p>this does make building a REPL in roc possible now</p>",
        "id": 268620556,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1642635873
    },
    {
        "content": "<p>well I should say easier*</p>",
        "id": 268620571,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1642635886
    },
    {
        "content": "<p>Should this cause an Eldritch horror to be unleashed on my REPL? <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>x : F32\nx = 1.5\nx * Num.toFloat 4\n</code></pre></div>",
        "id": 271731301,
        "sender_full_name": "jan kili",
        "timestamp": 1644734779
    },
    {
        "content": "<p>I'm thinking no: <a href=\"https://github.com/rtfeldman/roc/issues/2476\">https://github.com/rtfeldman/roc/issues/2476</a> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 271731590,
        "sender_full_name": "jan kili",
        "timestamp": 1644735291
    },
    {
        "content": "<p>I'm back with more tag union panics! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>» x : [ Y U8 ]*\n… x = Y 3\n… x\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;invalid content in tag union variable: (114, RigidVar(SubsIndex&lt;roc_module::ident::Lowercase&gt;(0)))&#39;, compiler/mono/src/layout.rs:2002:23\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n^C\n</code></pre></div>\n<p>Am I doing something silly?</p>",
        "id": 275091719,
        "sender_full_name": "jan kili",
        "timestamp": 1647084242
    },
    {
        "content": "<p>(a closed tag union works fine here)</p>\n<div class=\"codehilite\"><pre><span></span><code>» x : [ Y U8 ]\n… x = Y 3\n… x\n\nY 3 : [ Y U8 ]\n</code></pre></div>",
        "id": 275091733,
        "sender_full_name": "jan kili",
        "timestamp": 1647084276
    },
    {
        "content": "<p>I've got a second one! The silliness continues?</p>\n<div class=\"codehilite\"><pre><span></span><code>» wrap = \\value -&gt; Tag value\n… wrap\n\n&lt;function&gt; : a -&gt; [ Tag a ]*\n\n» wrap = \\value -&gt; Tag value\n… wrapIt = wrap\n… wrapIt\n\n&lt;function&gt; : a -&gt; [ Tag a ]*\n\n» wrap = \\value -&gt; Tag value\n… wrap 42\n\nTag 42 : [ Tag (Num *) ]*\n\n» wrap = \\value -&gt; Tag value\n… wrapIt = wrap\n… wrapIt 42\nthread &#39;main&#39; panicked at &#39;Roc failed with message: &quot;UnresolvedTypeVar compiler/mono/src/ir.rs line 6842&quot;&#39;, repl_cli/src/lib.rs:137:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 275092883,
        "sender_full_name": "jan kili",
        "timestamp": 1647086076
    },
    {
        "content": "<p>Could you file bugs for these? The second one is known I think but would be good to have a record of both!</p>",
        "id": 275097561,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1647092430
    },
    {
        "content": "<p>Silliness detected? <a href=\"https://github.com/rtfeldman/roc/issues/3377\">https://github.com/rtfeldman/roc/issues/3377</a></p>",
        "id": 288307335,
        "sender_full_name": "jan kili",
        "timestamp": 1656823422
    },
    {
        "content": "<p>(I'm causing a segfault by substituting <code>[0, 1, 2]</code> with <code>List.range 0 3</code>)</p>",
        "id": 288307736,
        "sender_full_name": "jan kili",
        "timestamp": 1656824017
    },
    {
        "content": "<p>I've encountered a second problem! Am I missing something about this syntax, because this seems like a reasonable recursion pattern to me:</p>\n<div class=\"codehilite\"><pre><span></span><code>» a = \\b -&gt;\n…     c = \\d -&gt;\n…         if d &gt;= 10 then d else c (d+b)\n…     c 0\n… a 6\nthread &#39;main&#39; panicked at &#39;internal error: entered unreachable code: symbol/layout `#UserApp.c` ProcLayout { arguments: [Builtin(Int(I64))], result: Builtin(Int(I64)) } combo must be in DeclarationToIndex&#39;, crates/compiler/mono/src/borrow.rs:165:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[jan@framey roc]$\n</code></pre></div>",
        "id": 288309036,
        "sender_full_name": "jan kili",
        "timestamp": 1656825737
    },
    {
        "content": "<p>(btw, that inner function is fine by itself)</p>\n<div class=\"codehilite\"><pre><span></span><code>» c = \\d -&gt;\n…     if d &gt;= 10 then d else c (d+3)\n… c 0\n\n12 : Num *\n\n»\n</code></pre></div>",
        "id": 288309056,
        "sender_full_name": "jan kili",
        "timestamp": 1656825820
    },
    {
        "content": "<p>I'll go ahead and report that second \"internal error\" problem as an issue, too.</p>",
        "id": 288309132,
        "sender_full_name": "jan kili",
        "timestamp": 1656825950
    },
    {
        "content": "<p>I expect that I'm exhibiting minimal silliness here today. Sorry for being boring!</p>",
        "id": 288309179,
        "sender_full_name": "jan kili",
        "timestamp": 1656825989
    },
    {
        "content": "<p><a href=\"https://github.com/rtfeldman/roc/issues/3378\">https://github.com/rtfeldman/roc/issues/3378</a></p>",
        "id": 288309324,
        "sender_full_name": "jan kili",
        "timestamp": 1656826272
    },
    {
        "content": "<p>Ummm what am I missing here?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">deck</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">myDeck</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nx\">card</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">dealMe</span><span class=\"w\"> </span><span class=\"nx\">deck</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">rank</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">card</span><span class=\"p\">.</span><span class=\"nx\">rank</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Ace</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Ace\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">King</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"King\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Queen</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Queen\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Jack</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Jack\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">suit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">card</span><span class=\"p\">.</span><span class=\"nx\">suit</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Club</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Clubs\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Diamond</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Diamonds\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Heart</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Hearts\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Spade</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Spades\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"My card is the \\(card.rank) of \\(card.suit)!\\n\"</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── MISSING EXPRESSION ─ ..._roc/domain-modeling-in-roc/step_2__card_game_A.roc ─\n\nI am partway through parsing a definition, but I got stuck here:\n\n 4│      provides [main] to pf\n...\n23│  main =\n24│      deck = myDeck\n25│      {card} = dealMe deck\n26│      rank =\n27│          when card.rank is\n                              ^\n\nI was expecting to see an expression like 42 or &quot;hello&quot;.\n</code></pre></div>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 289218204,
        "sender_full_name": "jan kili",
        "timestamp": 1657557684
    },
    {
        "content": "<p>Whitespace bug? That is definitely what it looks like to me.</p>",
        "id": 289218617,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657557880
    },
    {
        "content": "<p>Ooh, I'll check for that</p>",
        "id": 289218762,
        "sender_full_name": "jan kili",
        "timestamp": 1657557940
    },
    {
        "content": "<p>Might be worth running roc format and seeing the diff? might fix it?</p>",
        "id": 289218889,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657557988
    },
    {
        "content": "<p>Success!</p>",
        "id": 289218991,
        "sender_full_name": "jan kili",
        "timestamp": 1657558039
    },
    {
        "content": "<p>I didn't try the formatter, but I think it was a funky newline.</p>",
        "id": 289219030,
        "sender_full_name": "jan kili",
        "timestamp": 1657558062
    },
    {
        "content": "<p>Thank you :)</p>",
        "id": 289219036,
        "sender_full_name": "jan kili",
        "timestamp": 1657558065
    },
    {
        "content": "<p>If it seems worth tracking/filing an issue, maybe we can make a better error message or fix the parsing around this.</p>",
        "id": 289219129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657558096
    },
    {
        "content": "<p>While I have you here, any tips for this?</p>\n<div class=\"codehilite\"><pre><span></span><code>[jan@framey roc]$ export RUST_BACKTRACE=full\n[jan@framey roc]$ cargo run ../domain-modeling-in-roc/step_2__card_game_A.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.44s\n     Running `target/debug/roc ../domain-modeling-in-roc/step_2__card_game_A.roc`\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;not yet implemented&#39;, crates/compiler/mono/src/ir.rs:2382:23\nstack backtrace:\n   0:     0x5635ba31fb9d - std::backtrace_rs::backtrace::libunwind::trace::hee598835bc88d35b\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x5635ba31fb9d - std::backtrace_rs::backtrace::trace_unsynchronized::h9cdc730ba5cf5d72\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x5635ba31fb9d - std::sys_common::backtrace::_print_fmt::h75aeaf7ed30e43fa\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/sys_common/backtrace.rs:66:5\n   3:     0x5635ba31fb9d - &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt::h606862f787600875\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/sys_common/backtrace.rs:45:22\n   4:     0x5635ba34aadc - core::fmt::write::he803f0f418caf762\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/fmt/mod.rs:1190:17\n   5:     0x5635ba319d28 - std::io::Write::write_fmt::h70bc45872f37e7bb\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/io/mod.rs:1657:15\n   6:     0x5635ba321dd7 - std::sys_common::backtrace::_print::h64d038cf8ac3e13e\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/sys_common/backtrace.rs:48:5\n   7:     0x5635ba321dd7 - std::sys_common::backtrace::print::h359300b4a7fccf65\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/sys_common/backtrace.rs:35:9\n   8:     0x5635ba321dd7 - std::panicking::default_hook::{{closure}}::hf51be35e2f510149\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:295:22\n   9:     0x5635ba321aa0 - std::panicking::default_hook::h03ca0f22e1d2d25e\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:314:9\n  10:     0x5635ba322529 - std::panicking::rust_panic_with_hook::h3b7380e99b825b63\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:698:17\n  11:     0x5635ba3221d9 - std::panicking::begin_panic_handler::{{closure}}::h8e849d0710154ce0\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:586:13\n  12:     0x5635ba320064 - std::sys_common::backtrace::__rust_end_short_backtrace::hedcdaddbd4c46cc5\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/sys_common/backtrace.rs:138:18\n  13:     0x5635ba321f29 - rust_begin_unwind\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:584:5\n  14:     0x5635b5b4ae83 - core::panicking::panic_fmt::he1bbc7336d49a357\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panicking.rs:143:14\n  15:     0x5635b5b4ad4d - core::panicking::panic::h4241c5ccea17faca\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panicking.rs:48:5\n  16:     0x5635b99cc490 - roc_mono::ir::from_can_let::he631a1fd2e7f1db7\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:2382:23\n  17:     0x5635b9a09970 - roc_mono::ir::from_can::h6c53f19073fb59f4\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:5932:33\n  18:     0x5635b996e417 - roc_mono::ir::from_can_let::{{closure}}::hb169aff3d0732e09\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:2206:25\n  19:     0x5635b99769d7 - roc_mono::ir::handle_variable_aliasing::h457631afa9a49d05\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:7025:16\n  20:     0x5635b99d0e75 - roc_mono::ir::from_can_let::he631a1fd2e7f1db7\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:2209:24\n  21:     0x5635b9a09970 - roc_mono::ir::from_can::h6c53f19073fb59f4\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:5932:33\n  22:     0x5635b99d6413 - roc_mono::ir::specialize_external::h014c8ba65786d364\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:2988:32\n  23:     0x5635b996ebf8 - roc_mono::ir::specialize_variable_help::hc0e86a21717b3946\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:3465:23\n  24:     0x5635b99dbbf3 - roc_mono::ir::specialize_variable::h0634205863a1b1ec\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:3414:5\n  25:     0x5635b99d4cb4 - roc_mono::ir::specialize_external_help::he85ecfa478515205\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:2767:33\n  26:     0x5635b99d4aa2 - roc_mono::ir::specialize_external_specializations::h03afe44495a518a6\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:2740:13\n  27:     0x5635b99d400e - roc_mono::ir::specialize_all::h38efe702f28bba33\n                               at /home/jan/_code/_roc/roc/crates/compiler/mono/src/ir.rs:2673:9\n  28:     0x5635b7436e4e - roc_load_internal::file::make_specializations::h624990574ec76565\n                               at /home/jan/_code/_roc/roc/crates/compiler/load_internal/src/file.rs:4519:13\n  29:     0x5635b743c47b - roc_load_internal::file::run_task::h6036f07fd619b017\n                               at /home/jan/_code/_roc/roc/crates/compiler/load_internal/src/file.rs:4996:17\n  30:     0x5635b741559a - roc_load_internal::file::worker_task::hebe41c651db0920e\n                               at /home/jan/_code/_roc/roc/crates/compiler/load_internal/src/file.rs:1817:34\n  31:     0x5635b7440e1a - roc_load_internal::file::load_multi_threaded::{{closure}}::{{closure}}::h16d5eba0a83616fc\n                               at /home/jan/_code/_roc/roc/crates/compiler/load_internal/src/file.rs:1659:25\n  32:     0x5635b744caf7 - crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}}::ha411c1ac2e878ff5\n                               at /home/jan/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-utils-0.8.10/src/thread.rs:438:31\n  33:     0x5635b73d3fef - core::ops::function::FnOnce::call_once{{vtable.shim}}::h182bc693cee28e90\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/ops/function.rs:227:5\n  34:     0x5635b740505d - &lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once::hee34075471a3830c\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/alloc/src/boxed.rs:1853:9\n  35:     0x5635b74eed84 - std::sys_common::backtrace::__rust_begin_short_backtrace::h74784c32857fa8b7\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/sys_common/backtrace.rs:122:18\n  36:     0x5635b74dd8d4 - std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}::h54bd13ac090e0e91\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/thread/mod.rs:498:17\n  37:     0x5635b74efaa4 - &lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once::he1cf1df6def34f88\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panic/unwind_safe.rs:271:9\n  38:     0x5635b74ef26d - std::panicking::try::do_call::h48b63b9234108830\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:492:40\n  39:     0x5635b74ef49b - __rust_try\n  40:     0x5635b74ef1bd - std::panicking::try::hb3ba778589fab460\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:456:19\n  41:     0x5635b74ec7d4 - std::panic::catch_unwind::h7c5138398b54d137\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panic.rs:137:14\n  42:     0x5635b74dd6f3 - std::thread::Builder::spawn_unchecked_::{{closure}}::hd3349d142c8673c4\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/thread/mod.rs:497:30\n  43:     0x5635b73d3f0f - core::ops::function::FnOnce::call_once{{vtable.shim}}::h14f5d8c93db30fba\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/ops/function.rs:227:5\n  44:     0x5635ba329d03 - &lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once::hf70ac038171e3e1a\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/alloc/src/boxed.rs:1853:9\n  45:     0x5635ba329d03 - &lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once::he6690128792365ad\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/alloc/src/boxed.rs:1853:9\n  46:     0x5635ba329d03 - std::sys::unix::thread::Thread::new::thread_start::ha07928d93d5a5ec9\n                               at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/sys/unix/thread.rs:108:17\n  47:     0x7f8513f29d40 - start_thread\n  48:     0x7f8513a8703f - __GI___clone\n  49:                0x0 - &lt;unknown&gt;\n^C\n[jan@framey roc]$\n</code></pre></div>",
        "id": 289219418,
        "sender_full_name": "jan kili",
        "timestamp": 1657558248
    },
    {
        "content": "<p>does it pass <code>roc check</code>?</p>",
        "id": 289219479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657558282
    },
    {
        "content": "<p>That catches a lot that might crash the compiler.</p>",
        "id": 289219513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657558299
    },
    {
        "content": "<p>GAH I always forget to go back to checking</p>",
        "id": 289219518,
        "sender_full_name": "jan kili",
        "timestamp": 1657558302
    },
    {
        "content": "<p>I do check check check check, then the first time it passes I go straight to run run run run while editing :facepalm:</p>",
        "id": 289219596,
        "sender_full_name": "jan kili",
        "timestamp": 1657558325
    },
    {
        "content": "<p>Thanks again, check has my answers :)</p>",
        "id": 289219624,
        "sender_full_name": "jan kili",
        "timestamp": 1657558338
    },
    {
        "content": "<p>that's surprising actually - <code>cargo run</code> should do the \"<code>check</code> and then only run if there are no errors reported\" flow <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 289219753,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657558397
    },
    {
        "content": "<p>so I'm surprised that <code>cargo run ../domain-modeling-in-roc/step_2__card_game_A.roc</code> would report no compile-time errors but <code>cargo run check</code> would!</p>",
        "id": 289219830,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657558436
    },
    {
        "content": "<p>really? I thought <code>cargo run &lt;script&gt;</code> and <code>roc &lt;script&gt;</code> did not run check. That would definitely be useful.</p>",
        "id": 289220468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657558747
    },
    {
        "content": "<p>so <code>roc foo.roc</code> does this, but <code>roc run foo.roc</code> just runs and doesn't check</p>",
        "id": 289220505,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657558771
    },
    {
        "content": "<p>hmm. Yeah, I don't think that is working</p>",
        "id": 289220532,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657558786
    },
    {
        "content": "<p>so it's the difference between <code>cargo run run</code> and <code>cargo run</code> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 289220538,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657558788
    },
    {
        "content": "<p>Or maybe it does part of the check but not all of it...not sure</p>",
        "id": 289220633,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657558812
    },
    {
        "content": "<p>I definitely need to use <code>check</code> still.</p>",
        "id": 289220644,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657558819
    },
    {
        "content": "<p>hm, if you can reproduce an example of it not working right, maybe it's an easy fix!</p>",
        "id": 289220685,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657558839
    },
    {
        "content": "<p>Hello, it's me again, <strong><em>Dr. Help I. M. Crashing</em></strong> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 290709825,
        "sender_full_name": "jan kili",
        "timestamp": 1658712269
    },
    {
        "content": "<p>This behavior seems like it shouldn't be possible, unless there's a bug in the release build process:</p>\n<div class=\"codehilite\"><pre><span></span><code>[jan@framey ~]$ cd ~/_code/_roc/roc\n[jan@framey roc]$\n[jan@framey roc]$ nix develop\n[jan@framey roc]$\n[jan@framey roc]$ cargo run ../project-euler-in-roc/2.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.46s\n     Running `target/debug/roc ../project-euler-in-roc/2.roc`\n🔨 Rebuilding host...\n4613732\n[jan@framey roc]$\n[jan@framey roc]$ cargo build --release\n    Finished release [optimized] target(s) in 0.48s\n[jan@framey roc]$\n[jan@framey roc]$ exit\nexit\n[jan@framey roc]$\n[jan@framey roc]$ cd ~/_code/_roc/project-euler-in-roc/\n[jan@framey project-euler-in-roc]$\n[jan@framey project-euler-in-roc]$ ../roc/target/release/roc 2.roc\n🔨 Rebuilding host...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }&#39;, crates/compiler/build/src/link.rs:360:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread &#39;main&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Any { .. }&#39;, crates/cli/src/build.rs:283:46\n[jan@framey project-euler-in-roc]$\n[jan@framey project-euler-in-roc]$ ../roc/target/release/roc check 2.roc\n0 errors and 0 warnings found in 20 ms.\n[jan@framey project-euler-in-roc]$\n[jan@framey project-euler-in-roc]$ ???\n</code></pre></div>",
        "id": 290709837,
        "sender_full_name": "jan kili",
        "timestamp": 1658712294
    },
    {
        "content": "<p>It seems to not matter which app I run, the same \"yes inside <code>nix develop</code>, no outside it\" happens</p>",
        "id": 290709862,
        "sender_full_name": "jan kili",
        "timestamp": 1658712352
    },
    {
        "content": "<p>Did I miss a step? (I remembered to <code>check</code> this time! haha)</p>",
        "id": 290709917,
        "sender_full_name": "jan kili",
        "timestamp": 1658712385
    },
    {
        "content": "<p>(on Linux, Fedora 36)</p>",
        "id": 290709989,
        "sender_full_name": "jan kili",
        "timestamp": 1658712493
    },
    {
        "content": "<p>Oh, and I guess this is additional info + a more concise repro:</p>\n<div class=\"codehilite\"><pre><span></span><code>[jan@framey roc]$ ./target/release/roc ../project-euler-in-roc/2.roc\n🔨 Rebuilding host...\n4613732\n[jan@framey roc]$\n[jan@framey roc]$ exit\nexit\n[jan@framey roc]$\n[jan@framey roc]$ cd ../project-euler-in-roc/\n[jan@framey project-euler-in-roc]$\n[jan@framey project-euler-in-roc]$ ../roc/target/release/roc 2.roc\n🔨 Rebuilding host...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }&#39;, crates/compiler/build/src/link.rs:360:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread &#39;main&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Any { .. }&#39;, crates/cli/src/build.rs:283:46\n[jan@framey project-euler-in-roc]$\n</code></pre></div>",
        "id": 290711351,
        "sender_full_name": "jan kili",
        "timestamp": 1658714219
    },
    {
        "content": "<p>Summary:</p>\n<ul>\n<li><code>cargo run myApp.roc</code> works inside <code>nix develop</code></li>\n<li><code>cargo build --release</code> works inside <code>nix develop</code></li>\n<li><code>target/release/roc myApp.roc</code> works inside <code>nix develop</code></li>\n<li><code>target/release/roc myApp.roc</code> panics outside <code>nix develop</code></li>\n</ul>",
        "id": 290711425,
        "sender_full_name": "jan kili",
        "timestamp": 1658714286
    },
    {
        "content": "<p>I thought builds were self-contained, but are they not?</p>",
        "id": 290711448,
        "sender_full_name": "jan kili",
        "timestamp": 1658714358
    },
    {
        "content": "<p>Your missing zig on your machine?</p>",
        "id": 290713905,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658717114
    },
    {
        "content": "<p>*line 360 not 310, so clang</p>",
        "id": 290713920,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658717133
    },
    {
        "content": "<p>You can't build the platform</p>",
        "id": 290713936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658717149
    },
    {
        "content": "<p>If you were to build in nix and then build outside of nix with <code>--precompiled-host=true</code>, it should work.</p>",
        "id": 290713984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658717186
    },
    {
        "content": "<p>We should improve those error messages</p>",
        "id": 290714086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658717327
    },
    {
        "content": "<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Wow, that was fast.</p>\n<div class=\"codehilite\"><pre><span></span><code>[jan@framey project-euler-in-roc]$ ../roc/target/release/roc 2.roc --precompiled-host=true\n4613732\n[jan@framey project-euler-in-roc]$\n</code></pre></div>",
        "id": 290714139,
        "sender_full_name": "jan kili",
        "timestamp": 1658717402
    },
    {
        "content": "<p>I didn't know about that flag, and I assumed a Roc build could compile platforms/hosts without any system dependencies!</p>",
        "id": 290714186,
        "sender_full_name": "jan kili",
        "timestamp": 1658717468
    },
    {
        "content": "<p>The host is still in another language, so that has all the dependencies that other language brings in. Long term, you should be able to just download the package as a precompiled host. Once that is the norm, all the host building shouldn't matter to anyone except platform authors.</p>",
        "id": 290714286,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658717578
    },
    {
        "content": "<p>Nice! So right now, the <code>--precompiled-host=true</code> tells the Roc executable to look in the platform dir for a platform executable?</p>",
        "id": 290714404,
        "sender_full_name": "jan kili",
        "timestamp": 1658717727
    },
    {
        "content": "<p>Should the word \"host\" be replaced with \"platform\" in all app-developer-facing messaging?</p>",
        "id": 290714489,
        "sender_full_name": "jan kili",
        "timestamp": 1658717810
    },
    {
        "content": "<p>It basically says, trust me, the platform was already compiled and has not changed. Don't spawn the thread that compiles the platform. We will use the existing executable file.</p>",
        "id": 290714508,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658717849
    },
    {
        "content": "<p>And probably to the <code>host</code> vs <code>platform</code> question. It is a terminology thing that has turned into them essentially being used interchangeably (though there is technically a difference). Platform is definitely the term I would expect an app author to see and use.</p>",
        "id": 290714629,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658718000
    },
    {
        "content": "<p>Great! Thank you very much for these great explanations :)</p>",
        "id": 290714714,
        "sender_full_name": "jan kili",
        "timestamp": 1658718041
    },
    {
        "content": "<p>This will definitely become part of my workflow:</p>\n<div class=\"codehilite\"><pre><span></span><code>[jan@framey project-euler-in-roc]$ alias roc=&#39;../roc/target/release/roc --precompiled-ho\nst=true&#39;\n[jan@framey project-euler-in-roc]$ roc 2.roc\n4613732\n[jan@framey project-euler-in-roc]$\n</code></pre></div>",
        "id": 290714810,
        "sender_full_name": "jan kili",
        "timestamp": 1658718146
    },
    {
        "content": "<p>Regarding <code>host</code> vs. <code>platform</code>: <a href=\"https://github.com/rtfeldman/roc/issues/3630\">https://github.com/rtfeldman/roc/issues/3630</a></p>",
        "id": 290715041,
        "sender_full_name": "jan kili",
        "timestamp": 1658718487
    },
    {
        "content": "<p>Regarding panic/error messaging: <a href=\"https://github.com/rtfeldman/roc/issues/3631\">https://github.com/rtfeldman/roc/issues/3631</a></p>",
        "id": 290715200,
        "sender_full_name": "jan kili",
        "timestamp": 1658718759
    },
    {
        "content": "<p>On terminology: The platform consists of a non-Roc \"host\" and a Roc API to interface to it.</p>",
        "id": 290717289,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1658721672
    },
    {
        "content": "<p>So the message is referring to technically the right thing, but using a term that isn't explained anywhere in the docs yet.</p>",
        "id": 290717495,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1658721958
    },
    {
        "content": "<p>Sure, but to a roc app author, they will only ever interact with platforms as a unit, never the host directly. So flags and error messages should generally be catered to that?</p>",
        "id": 290717674,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658722225
    },
    {
        "content": "<p>At least that is my thought</p>",
        "id": 290717678,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658722236
    },
    {
        "content": "<p>I wasn't disagreeing, just explaining to anyone following who didn't know.</p>",
        "id": 290717775,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1658722400
    },
    {
        "content": "<p>Nice, does that API include only <code>.roc</code> files?</p>",
        "id": 290717831,
        "sender_full_name": "jan kili",
        "timestamp": 1658722493
    },
    {
        "content": "<p>Yes</p>",
        "id": 290718001,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1658722769
    },
    {
        "content": "<p>How do I bool?</p>\n<div class=\"codehilite\"><pre><span></span><code>        |&gt; List.map (\\sum -&gt;\n            when sum * 2 &gt; rowCount is\n                Bool.true -&gt; 1\n                _ -&gt; 0)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── SYNTAX PROBLEM ──────────────────────────────────────── day_3_solutions.roc ─\n\nThis pattern is malformed:\n\n37│                  Bool.true -&gt; 1\n                     ^^^^^^^^^\n</code></pre></div>",
        "id": 302379431,
        "sender_full_name": "jan kili",
        "timestamp": 1664938748
    },
    {
        "content": "<p>It works as an <code>if ... then ... else ...</code> expression but not a <code>when ... is ...</code> expression</p>",
        "id": 302379861,
        "sender_full_name": "jan kili",
        "timestamp": 1664939192
    },
    {
        "content": "<p>I'll just switch it to if/else</p>",
        "id": 302379868,
        "sender_full_name": "jan kili",
        "timestamp": 1664939207
    },
    {
        "content": "<p>Dang functional programming... making me forget about good old-fashioned <code>if</code>/<code>else</code>... <span aria-label=\"angry cat\" class=\"emoji emoji-1f63e\" role=\"img\" title=\"angry cat\">:angry_cat:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 302379892,
        "sender_full_name": "jan kili",
        "timestamp": 1664939252
    },
    {
        "content": "<p>oh yeah, this is supposed to work exactly the way you tried to write it - it just hasn't been implemened yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 302380478,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664939835
    },
    {
        "content": "<p><code>Foo.bar -&gt; ...</code> should desugar to essentially <code>x if x == Foo.bar -&gt; ...</code></p>",
        "id": 302380580,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664939914
    },
    {
        "content": "<p>which you can always write by hand, but yes - in the case of booleans specifically, might as well use <code>if</code>! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 302380603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664939946
    },
    {
        "content": "<p>Any hope for <code>[a, b, c] -&gt; ...</code>? <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> <span aria-label=\"present\" class=\"emoji emoji-1f381\" role=\"img\" title=\"present\">:present:</span> <span aria-label=\"santa\" class=\"emoji emoji-1f385\" role=\"img\" title=\"santa\">:santa:</span></p>",
        "id": 302380614,
        "sender_full_name": "jan kili",
        "timestamp": 1664939961
    },
    {
        "content": "<p>Maybe tuples will alleviate that need</p>",
        "id": 302380730,
        "sender_full_name": "jan kili",
        "timestamp": 1664940052
    },
    {
        "content": "<p>yeah there was some discussion on Zulip about that awhile back</p>",
        "id": 302380903,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664940219
    },
    {
        "content": "<p>I think some form of it will turn out to be a good idea!</p>",
        "id": 302380965,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664940257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span>: In <a href=\"#narrow/stream/347488-roctoberfest/topic/Day.201/near/303093990\">this topic</a>, they show how to pattern match in the way you were looking for.</p>",
        "id": 303173153,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665350838
    }
]