[
    {
        "content": "<p>Roc does not support pattern matching on lists. This was probably a conscious choice. What is the reason behind it?</p>",
        "id": 289291577,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657613748
    },
    {
        "content": "<p>I think it was for performance but I don't remember the details.</p>",
        "id": 289292591,
        "sender_full_name": "Anton",
        "timestamp": 1657614450
    },
    {
        "content": "<p>This would also be a good question to add to our FAQ</p>",
        "id": 289292867,
        "sender_full_name": "Anton",
        "timestamp": 1657614606
    },
    {
        "content": "<p>It's already there <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <a href=\"https://github.com/rtfeldman/roc/blob/trunk/FAQ.md\">https://github.com/rtfeldman/roc/blob/trunk/FAQ.md</a></p>\n<blockquote>\n<p>No :: operator, or :: pattern matching for lists. Both of these are for the same reason: an Elm List is a linked list, so both prepending to it and removing an element from the front are very cheap operations. In contrast, a Roc List is a flat array, so both prepending to it and removing an element from the front are among the most expensive operations you can possibly do with it! To get good performance, this usage pattern should be encouraged in Elm and discouraged in Roc. Since having special syntax would encourage it, it would not be good for Roc to have that syntax!</p>\n</blockquote>",
        "id": 289294212,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1657615474
    },
    {
        "content": "<p>exact matches like <code>[ a, b, c ] -&gt; foo</code> are efficient though, and can skip bounds checks versus the manual <code>List.get</code>s</p>",
        "id": 289294685,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657615777
    },
    {
        "content": "<p>so we should maybe revisit this at some point</p>",
        "id": 289294695,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657615791
    },
    {
        "content": "<p>What makes :: pattern matching slow is that Roc has to create a new list with one fewer items right? Maybe there could be something like <code>a :: _ -&gt; foo</code> so long as the user never gets to use the <code>_</code> part? Maybe the syntax could be changed to <code>[ a, ... ] -&gt; foo</code> or something to make it more clear that you can't get the rest of the list. This syntax would also let you write <code>[ ..., a ] -&gt; foo</code> since I believe that is also efficient (and isn't something you can do in Elm as it is very inefficient there!).</p>",
        "id": 289297237,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1657617525
    },
    {
        "content": "<p>right, that is just equivalent to a <code>List.get</code></p>",
        "id": 289298176,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657618144
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> what would be the advantage of that syntax over calling <code>List.get</code> directly?</p>",
        "id": 289307957,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657624442
    },
    {
        "content": "<p>well you can do <code>[ a, b, c, ... ]</code></p>",
        "id": 289308090,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657624515
    },
    {
        "content": "<p>That and no bounds check on the List.get</p>",
        "id": 289308316,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1657624647
    },
    {
        "content": "<p>Maybe you could even do fancy things like <code>[ a, ..., b ]</code></p>",
        "id": 289308362,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1657624678
    },
    {
        "content": "<p>well <code>[ a, ... ]</code> would do a bounds check to check that there is one element there</p>",
        "id": 289308414,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657624696
    },
    {
        "content": "<p>but for <code>[ a, b, c, ... ]</code> you do only one bounds check instead of 3</p>",
        "id": 289308439,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657624710
    },
    {
        "content": "<p>Ah, true</p>",
        "id": 289308452,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1657624717
    },
    {
        "content": "<p>This feature would be similar to <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#list-patterns\">C# list patterns</a>. An advantage over <code>List.get</code> directly without using the <code>...</code> is that you can do the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>printStringList = \\list -&gt;\n    when list is\n        [item] -&gt; item\n        oth -&gt; Num.toStr (List.len oth)\n</code></pre></div>\n<p>otherwise you have to do something like this</p>\n<div class=\"codehilite\"><pre><span></span><code>printStringList = \\list -&gt;\n    when List.get list 0 is\n        Err OutOfBounds -&gt; Num.toStr 0\n        Ok item -&gt;\n            when List.get list 1 is\n                Err OutOfBounds -&gt; item\n                Ok _ -&gt; Num.toStr (List.len list)\n</code></pre></div>\n<p>to avoid double invalid paths (perhaps could be written better, let me know).</p>",
        "id": 298537485,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1663058467
    },
    {
        "content": "<p>You can make it more compact in this case:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">printStringList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">T</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">len</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">T</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">item</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">T</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nx\">len</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toStr</span><span class=\"w\"> </span><span class=\"nx\">len</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 298601040,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663080338
    }
]