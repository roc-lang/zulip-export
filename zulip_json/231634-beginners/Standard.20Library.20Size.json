[
    {
        "content": "<p>Is there a discussion already in Zulip as to why the standard library is as lean as it is?</p>\n<p>There's not much detail in the GH issue on <a href=\"https://github.com/roc-lang/roc/issues/5373\">why JSON was removed</a>. There are some features that are common to most apps, like URLs, UUIDs, JSON, etc. that would normally go in either the standard library or in a package. However, (as I understand it) URLs are in basic-cli so that the code is colocated with its published platform. But we seem to lose portability, meaning basic-webserver and basic-cli both have a URL module. Is there a plan for if/how we will maintain modularity of this code that isn't platform-specific? I know we have module params for libs, but that doesn't seem to be what we're planning for the official platforms.</p>",
        "id": 438102839,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715426817
    },
    {
        "content": "<blockquote>\n<p>Is there a plan for if/how we will maintain modularity of this code that isn't platform-specific?</p>\n</blockquote>\n<p>Once module params are in and fully funcitional, we should be able to share a lot more. I think this is more an early ecosystem issue that has designs to fix.</p>",
        "id": 438102926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715426890
    },
    {
        "content": "<blockquote>\n<p>I know we have module params for libs, but that doesn't seem to be what we're planning for the official platforms.</p>\n</blockquote>\n<p>Official platforms are likely to become thinner (with simpler primitives in some cases) and then use libs with module params to expand functionality and share code with other platforms.</p>",
        "id": 438102952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715426967
    },
    {
        "content": "<p>Yes, that would make sense to me. I am not pushing against the current approach to moving Weaver's code into basic-cli, as it seems to give the best usability for users at the moment, but this approach of centralizing non-specific modules probably won't be sustainable long-term.</p>",
        "id": 438103044,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715427096
    },
    {
        "content": "<p>But yes, in a year or so I'm sure things will look much different <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 438103051,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715427115
    },
    {
        "content": "<blockquote>\n<p>URLs, UUIDs, JSON</p>\n</blockquote>\n<p>I think we lean for most of these types of things to be in packages. They really aren't standard. Many have plenty of valid designs. On top of that, they are not things that make sense in a lot of platforms. So the standard library leans more data structure heavy (especially for datastructures that need support from zig to be performant).</p>",
        "id": 438103106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715427151
    },
    {
        "content": "<p>Also, a number of these things are likely to have more churn and we wouldn't want them to require us releasing a new version of roc every time they change.</p>",
        "id": 438103125,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715427186
    },
    {
        "content": "<p>I know that Rust has also taken a leaner approach to its standard library because it wants to make stability guarantees, and as long as the ecosystem shifts around on implementing libraries for these features (URLs, UUIDs, JSON), then it's not a stable addition to std</p>",
        "id": 438103191,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715427268
    },
    {
        "content": "<p>This is at least what I have gather from the many discussions over the years.</p>",
        "id": 438103197,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715427280
    },
    {
        "content": "<p>yeah we could totally have Url be in its own package - I think that makes sense!</p>",
        "id": 438103696,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715427950
    },
    {
        "content": "<p>normally URLs are just represented as <code>Str</code>, so there's no need for an opaque type there, which means platforms wouldn't need to depend on that package</p>",
        "id": 438103783,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715428003
    },
    {
        "content": "<p>but if you want to do things like splitting up URL strings into protocol/paths/etc, having a package which does all that would be nice</p>",
        "id": 438103800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715428040
    },
    {
        "content": "<p>I'm already working on a UUID package, and the URL code is all there, it wouldn't be too much work! Just a potential issue if we try to split out a library that's needed inside a platform. E.g. URL is in a package, and then the user wants to use the library, but the platform needs types from the URL library as well. Now you have to both import and use the same library version (at least for now).</p>",
        "id": 438104236,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715428471
    },
    {
        "content": "<p>Still worth the effort IMO, but not free, per se</p>",
        "id": 438104246,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715428486
    },
    {
        "content": "<p>yeah there's a design for package versioning which addresses that: <a href=\"https://docs.google.com/document/d/1rklo1p2jETKVxhkAtClcMH8N4sHIgePm2JgJ3ciBR60/edit?usp=drivesdk\">https://docs.google.com/document/d/1rklo1p2jETKVxhkAtClcMH8N4sHIgePm2JgJ3ciBR60/edit?usp=drivesdk</a></p>",
        "id": 438105991,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715430263
    }
]