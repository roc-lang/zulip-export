[
    {
        "content": "<p><strong>Questions</strong></p>\n<p>I've been experimenting with Roc for the last several days, searching Zulip &amp; GitHub, but I haven't found the answer to the following related questions:</p>\n<ol>\n<li>Is it possible to access a Tag's payload without knowing the non-payload portion of the tag?</li>\n<li>Is it possible to constrain a type such that is only accepts tags with a particular payload shape?</li>\n</ol>\n<p><strong>Motivating use case</strong></p>\n<p>I'm working on some generic functions that help model state machines and generate diagrams from them (similar to <a href=\"https://stately.ai/viz\">XState</a> from the TypeScript world).  I'd like the input that defines the state machine to be a list of tags, representing every possible state transition.  For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>matterStateMachine = stateMachine [\n    Melt Solid Liquid,\n    Evaporate Liquid Gas,\n    Condense Gas Liquid,\n    Freeze Liquid Solid,\n]\n</code></pre></div>\n<p>This is a really concise way to simultaneously infer the desired types _and_ list every possible transition, a common technique in TypeScript.  I can do a lot with this information alone:</p>\n<ol>\n<li>With every possible transition, I can infer every possible state</li>\n<li>With every possible transition, I can render a state diagram (e.g., as mermaid or even XState)</li>\n<li>With the inferred types, I can enforce that every state &amp; transition is accounted for when rendering the diagram (converting state &amp; transition tags to strings)</li>\n<li>With the inferred types, I can enforce that every state transition has an implementation</li>\n</ol>\n<p>The problem is that I currently have no way to enforce the shape of the tag payloads.  And even if I knew how to do that, I don't know how I could access these tag payloads without knowing the specific tags ahead of time (which won't work for a generic <code>stateMachine</code> function).</p>\n<p>Any thoughts or advice on this issue?</p>",
        "id": 317228037,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671649097
    },
    {
        "content": "<p>so if you want to enforce a shape, I'd use a record instead:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"nx\">matterStateMachine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">stateMachine</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Melt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">from</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Evaporate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">from</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Gas</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Condense</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">from</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Gas</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Freeze</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">from</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>here the type of <code>stateMachine</code> would be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">stateMachine</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">StateMachine</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317230315,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671649837
    },
    {
        "content": "<p>we don't have this fully implemented yet, but in the future you could more concisely do it with a tuple:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"nx\">matterStateMachine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">stateMachine</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nx\">Melt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Solid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Liquid</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nx\">Evaporate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Gas</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nx\">Condense</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Gas</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Liquid</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nx\">Freeze</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Solid</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>here the type of <code>stateMachine</code> would be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">stateMachine</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">StateMachine</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317230489,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671649900
    },
    {
        "content": "<p>however, currently you'd have a tough time drawing diagrams from this because there's currently no way to convert a tag to a string</p>",
        "id": 317230934,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671650043
    },
    {
        "content": "<p>we have a planned <code>Str.inspect : * -&gt; Str</code> that would convert (for eaxmple) <code>Foo</code> to the string <code>\"Foo\"</code>, which sounds like a reasonable fit for this use case</p>",
        "id": 317231026,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671650075
    },
    {
        "content": "<p>Thanks for the fast reply <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> !  Unfortunately I don't think this would infer the types that I need.  Using the example with records, the inferred type would be</p>\n<div class=\"codehilite\"><pre><span></span><code>List {\n    name : [Condense, Evaporate, Freeze, Melt],\n    from : [Gas, Liquid, Solid],\n    to : [Gas, Liquid, Solid],\n}\n</code></pre></div>\n<p>This would allow for things like <code>{name: Condense, from: Solid, to: Liquid}</code>, which isn't desired.</p>",
        "id": 317231201,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671650129
    },
    {
        "content": "<p>gotcha, maybe it would help to see what the TypeScript version looks like</p>",
        "id": 317231384,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671650176
    },
    {
        "content": "<p>to see what constraints you're going for <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 317231422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671650186
    },
    {
        "content": "<p>This is why I wanted to use a tag union as input, because the type that is inferred is very strict:</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    Melt [Solid] [Liquid],\n    Evaporate [Liquid] [Solid],\n    Condense [Gas] [Liquid],\n    Freeze [Liquid] [Solid],\n]\n</code></pre></div>",
        "id": 317231562,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671650232
    },
    {
        "content": "<p>I can whip up something in TypeScript if that would help!  Just doesn't map perfectly because tagged unions have to be emulated in TypeScript via untagged unions</p>",
        "id": 317231788,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671650313
    },
    {
        "content": "<p>I am also aware of the Tag to Str issue <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  For now I plan on just requiring the user to provide a function that maps the tags to strings, which might be helpful anyway if the diagram needs to use different text than just the tag name</p>",
        "id": 317232047,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671650408
    },
    {
        "content": "<p>Here's a TypeScript translation (<a href=\"https://www.typescriptlang.org/play#code/C4TwDgpgBAKghgcwDwDk4FtoQB7AgOwBMBnKY4AJwEt8EAaKABThABsB7OQqHPI0gK74A1vnYB3fAD4oAXgCwAKCgqoAbTSYGzNp0IBdANxKloSLApx8xKsCrt8qDFlwESZSjXpQAYhXboPK78HtS0DDDsQXzu5GEIMgrKqvDImhAMan4BEez6UsaKSgBmQgDGdg5QlFY2lY7p0W6kcV4M2YG8zaFtsFFdIa20UgAUSqpQ+M4AXFDpdOOqxf7oAPqzHQvJKsDss5FbAJT7lta29g3O7Su5MgDeiyoUEMACFPjqU1rqywGrDLt9EYlABfEyKUr4CoXDxwPAAWTgZQAFjQIEgYKc6hdSAN3ABBCiWEAYrHnBxIIbeKkMKlSeljbbVMn1YgnWrk6xbCbPIgQCizEY1M71dkinFqfACdAAI35+kOchkNKUioeTIA9BqoAA6PWg8FlBzkKDoOF4CgAZWAcIgiJRaLksIRSNR+AgjImakeE2ZHPqIwA5PCIKxgIGGIHLexWFRCBGoIGADJUACOAjjgcO3N9OxZFyDAFEAG5wMDsSx4BPJtMZ+ORgDicGIWZzueF2IcQYAwg5CARiBBq02W5GU+nM9mfRMO5yg34IBAAF5Dse1zOR6Ox+NTpn6Nt+8VVWT3aeqLVQKjFKAgdgCKAVCisDVldDcZHsYv8qCf78AA1neo-1pTwKmqcAIFIOBnkvfBin5Z5CDPFQLzgVgOHELweC-CgQAfZtoF2KA5SgJEjSEPBuGKCtkKgZ5XneQ9O3wNQAAZgSZEEjkKIA\">Playground link</a>):</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nx\">Tag</span><span class=\"p\">&lt;</span><span class=\"nt\">Name</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">Payload</span> <span class=\"na\">extends</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"nx\">Name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Payload</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nx\">Transition</span><span class=\"p\">&lt;</span><span class=\"nt\">Name</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">From</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">To</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">Tag</span><span class=\"p\">&lt;</span><span class=\"nt\">Name</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">From</span><span class=\"err\">,</span> <span class=\"na\">To</span><span class=\"err\">]</span><span class=\"p\">&gt;;</span><span class=\"w\"></span>\n\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">transition</span><span class=\"p\">&lt;</span><span class=\"nt\">Name</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">From</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">To</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">from_</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">From</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">to</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">To</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Transition</span><span class=\"p\">&lt;</span><span class=\"nt\">Name</span><span class=\"err\">,</span> <span class=\"na\">From</span><span class=\"err\">,</span> <span class=\"na\">To</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">from_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"p\">]];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">stateMachine</span><span class=\"p\">&lt;</span><span class=\"nt\">Transitions</span> <span class=\"na\">extends</span> <span class=\"na\">Array</span><span class=\"err\">&lt;</span><span class=\"na\">Transition</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">transitions</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Transitions</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">render</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">transition</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Transitions</span><span class=\"p\">[</span><span class=\"kt\">number</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">matterStateMachine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">stateMachine</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">transition</span><span class=\"p\">(</span><span class=\"s1\">'Melt'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Solid'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Liquid'</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">transition</span><span class=\"p\">(</span><span class=\"s1\">'Evaporate'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Liquid'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Gas'</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">transition</span><span class=\"p\">(</span><span class=\"s1\">'Condense'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Gas'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Liquid'</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">transition</span><span class=\"p\">(</span><span class=\"s1\">'Freeze'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Liquid'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Solid'</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">transition</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// if you ctrl/cmd hover over `transition`, strict types are inferred</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// allowing every case to be accounted for</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">transition</span><span class=\"p\">[</span><span class=\"mf\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317233565,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671650980
    },
    {
        "content": "<p>thanks! Does this TypeScript version capture all the constraints you're looking for? Or are there more constraints on top of that?</p>",
        "id": 317235084,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671651509
    },
    {
        "content": "<p>It does! Specifically it infers the strict types and only allows <code>Transition</code> objects as input</p>",
        "id": 317235425,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671651652
    },
    {
        "content": "<p>I could still give it <code>transition('Condense', 'Solid', 'Liquid')</code> though, right?</p>",
        "id": 317235632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671651730
    },
    {
        "content": "<p>You could if that's what the state machine was allowed to do, but that first input is essentially the definition of what's possible in the state machine.  The render function (in the TypeScript example) would infer no such combination from the input shown above.</p>",
        "id": 317235900,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671651857
    },
    {
        "content": "<p>hm, ok I'm missing a part of the motivation</p>",
        "id": 317236276,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671651987
    },
    {
        "content": "<p>so you have your <code>matterStateMachine</code> which is defined by this array of transitions</p>",
        "id": 317236415,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652039
    },
    {
        "content": "<p><code>matterStateMachine</code> is a constant which holds onto the data it was given and then can output a diagram</p>",
        "id": 317236482,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652065
    },
    {
        "content": "<p>what else can <code>matterStateMachine</code> do?</p>",
        "id": 317236508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652074
    },
    {
        "content": "<p>I think the part I'm missing is why it matters to be able to constrain that type</p>",
        "id": 317236602,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652102
    },
    {
        "content": "<p>like in this example the array is created once, given a function that turns it into a string, and then never used again - so I'm wondering how else it might be used where the constraint might actually come up <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 317236671,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652130
    },
    {
        "content": "<p>The render function is an example where the type inferred from the array of transitions is used to ensure that every case is covered (without needing to cover cases that aren't actually possible).  The same could be done for implementing the actual transition function.  I think I might be muddying the waters with an overly complex example...  I'll try to boil it down better in a moment (thank you for your patience)</p>",
        "id": 317237251,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671652334
    },
    {
        "content": "<p>no worries! It's something that hasn't come up yet, so I'm eager to understand <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 317237659,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652480
    },
    {
        "content": "<p>would this constrain the render function enough?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">stateMachine</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">StateMachine</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(this is syntax sugar for the following)</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">stateMachine</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"nf\">:</span><span class=\"w\">  </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">StateMachine</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317238156,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652670
    },
    {
        "content": "<p>my guess is that the answer is no, because render would have to account for certain possible combinations that should never come up</p>",
        "id": 317238295,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652705
    },
    {
        "content": "<p>Exactly.  The above would still allow combinations I wouldn't want to account for</p>",
        "id": 317238766,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671652884
    },
    {
        "content": "<p>so is the goal here just to render? Or are there other things that would be done with the state machine</p>",
        "id": 317238805,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652901
    },
    {
        "content": "<p>like would it be used in application code too, for example</p>",
        "id": 317238844,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671652914
    },
    {
        "content": "<p>Right, the goal is also to have an associated implementation, which would also leverage the inferred types.</p>",
        "id": 317238977,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671652967
    },
    {
        "content": "<p>Here's a smaller TypeScript example which might get us closer to the essence of what I'm after:</p>",
        "id": 317239032,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671652995
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">makeUnion</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;(</span><span class=\"nx\">...options</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">options</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Inferred type of `states` is `Array&lt;'Solid' | 'Liquid' | 'Gas'&gt;`.</span><span class=\"w\"></span>\n<span class=\"c1\">// The important thing here is that I'm able to infer a very strict type</span><span class=\"w\"></span>\n<span class=\"c1\">// but still constrain the input (e.g., I can't pass numbers or anything else).</span><span class=\"w\"></span>\n<span class=\"c1\">// I can accomplish similar inference super powers in Roc, but I can't ALSO</span><span class=\"w\"></span>\n<span class=\"c1\">// constrain the input.</span><span class=\"w\"></span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">states</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">makeUnion</span><span class=\"p\">(</span><span class=\"s1\">'Solid'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Liquid'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'Gas'</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317239081,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671653015
    },
    {
        "content": "<p>The pattern here allows me to concisely define all the possibilities so they can be iterated over at runtime AND infer the strictest possible typing.</p>",
        "id": 317239433,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671653144
    },
    {
        "content": "<p>Also, I'm sort of treating string literal types in TypeScript as roughly equivalent to tags (without a payload) in Roc here</p>",
        "id": 317239693,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671653230
    },
    {
        "content": "<p>cool, so one idea (that has other downsides) is:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">matterStateMachine</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">stateMachine</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Melt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Evaporate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Condense</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Freeze</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">transition</span><span class=\"w\"> </span><span class=\"nv\">render</span><span class=\"w\"></span>\n\n<span class=\"nv\">transition</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Melt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Evaporate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Condense</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Freeze</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Solid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Gas</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Solid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Gas</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"nv\">render</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Melt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Evaporate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Condense</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Freeze</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Solid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Gas</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317240782,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653593
    },
    {
        "content": "<p>so this is less concise, but I think satisfies all the constraints (unless I'm missing some!)</p>",
        "id": 317240859,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653620
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">stateMachine</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">payload</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">payload</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">payload</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">StateMachine</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317240993,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653656
    },
    {
        "content": "<p>oh I guess <code>render</code> would also need to be passed either the <code>transition</code> function or else its return value - either would work</p>",
        "id": 317241139,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653710
    },
    {
        "content": "<p>The conciseness could be solved with aliases, but indeed there is a constraint missing.  I'm imagining what the <code>transition</code> implementation would look like:</p>",
        "id": 317241185,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671653733
    },
    {
        "content": "<p>ah I see</p>",
        "id": 317241314,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653766
    },
    {
        "content": "<p>it has to handle combinations that you wouldn't want to support</p>",
        "id": 317241340,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653772
    },
    {
        "content": "<p>Exactly.  Thanks for saving me the typing, haha</p>",
        "id": 317241398,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671653797
    },
    {
        "content": "<p>ok, what if the tag was inferred from the transition? e.g.</p>",
        "id": 317241452,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653821
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">transition</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Solid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Gas</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Solid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Liquid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Gas</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Melt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Evaporate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Condense</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Freeze</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I guess that has the problem of having to specify e.g. how <code>Solid, Solid</code> should be labeled</p>",
        "id": 317241578,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671653876
    },
    {
        "content": "<p>I'm not sure I'm following which tag is being inferred here</p>",
        "id": 317242154,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671654078
    },
    {
        "content": "<p>never mind, it's not a good design <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 317242309,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671654129
    },
    {
        "content": "<p>I should clarify that I would be perfectly happy to lose inferring the tag union type from a list of possibilities if I had a way to constrain the input</p>",
        "id": 317242694,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671654264
    },
    {
        "content": "<p>For example:</p>",
        "id": 317242710,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671654276
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">stateMachine</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"nv\">transition</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">transition</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"kt\">Tag</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">from</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 317242869,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671654341
    },
    {
        "content": "<p>Hmm, maybe that doesn't make any sense.  Let me think about that</p>",
        "id": 317243915,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671654752
    },
    {
        "content": "<p>I hope I'm not derailing things. This exchange is quite intriguing. <span class=\"user-mention\" data-user-id=\"572105\">@Tanner Nielsen</span>, would you mind sharing the output of the TypeScript example you gave above? I'm guessing it's a visual graph?</p>",
        "id": 317261472,
        "sender_full_name": "Johannes Maas",
        "timestamp": 1671662528
    },
    {
        "content": "<p>Thanks for the curiosity <span class=\"user-mention\" data-user-id=\"455781\">@Johannes Maas</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> The TypeScript code I shared above was just to demonstrate the type inference I'm looking for, so it doesn't actually do anything... but yes -- the idea is that there would be another function that takes one of these state machines and produces a diagram, probably in mermaid and/or xstate format, for example: <a href=\"/user_uploads/22008/yRqYVFwYAvDfEAS6j2AcHt9q/states-of-matter.png\">states-of-matter.png</a>  Not sure that's what you were looking for</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/yRqYVFwYAvDfEAS6j2AcHt9q/states-of-matter.png\" title=\"states-of-matter.png\"><img src=\"/user_uploads/22008/yRqYVFwYAvDfEAS6j2AcHt9q/states-of-matter.png\"></a></div>",
        "id": 317264201,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671663852
    },
    {
        "content": "<p>That said, I've since come up with a better Roc implementation for what I want to.  I'll share the prototype code later this evening.  If it works well for what I want to use it for, I may make it a public library as well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 317264419,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1671663983
    },
    {
        "content": "<p>Thanks for the graphic! That helped me understand what you're trying to achieve.</p>",
        "id": 317265437,
        "sender_full_name": "Johannes Maas",
        "timestamp": 1671664550
    },
    {
        "content": "<p>I'm getting the feeling that there is a \"conflict\" between type land and value land. It really is tricky to define what transitions are valid as values (that you can put into a function) and have that reflected in types (which ensure that other functions don't use invalid transitions). I hope this makes sense. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 317265650,
        "sender_full_name": "Johannes Maas",
        "timestamp": 1671664663
    }
]