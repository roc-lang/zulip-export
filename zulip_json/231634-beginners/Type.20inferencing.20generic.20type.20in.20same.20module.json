[
    {
        "content": "<p>So I came across a strange type inferencing issue today:</p>\n<p>If I define a function which uses type variables, and then I write an expect statement which applies that function to multiple types, I get errors in the earlier applications of the function, complaining that they do not match the later applications.</p>\n<p>However if I split my expects into a separate Test.roc module, I have no problem applying the function using multiple types.</p>\n<p>So for example: </p>\n<div class=\"codehilite\"><pre><span></span><code>reduceListRight : List a, (a, a -&gt; a) -&gt; Result a [ListWasEmpty]\n\nexpect reduceListRight [] Num.add == Err ListWasEmpty\nexpect reduceListRight [5] Num.add == Ok 5\nexpect reduceListRight [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;] Str.concat == Ok &quot;321&quot;\n</code></pre></div>\n<p>Produces the following errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in Reduce.roc ─────────────────────────────────────────────────\nThis 1st argument to reduceListRight has an unexpected type:\n24│  expect reduceListRight [5] Num.add == Ok 5\n                            ^^^\nThe argument is a list of type:\n    List (Num *)\n\nBut reduceListRight needs its 1st argument to be:\n    List Str\n\n── TYPE MISMATCH in Reduce.roc ─────────────────────────────────────────────────\nThis 2nd argument to reduceListRight has an unexpected type:\n24│  expect reduceListRight [5] Num.add == Ok 5\n                                ^^^^^^^\nThis add value is a:\n    Num a, Num a -&gt; Num a\n\nBut reduceListRight needs its 2nd argument to be:\n    Str, Str -&gt; Str\n\n── TYPE MISMATCH in Reduce.roc ─────────────────────────────────────────────────\nThis 2nd argument to == has an unexpected type:\n24│  expect reduceListRight [5] Num.add == Ok 5\n                                           ^^^^\nThis Ok tag application has the type:\n    [Ok (Num *), …]\n\nBut == needs its 2nd argument to be:\n    [Ok Str, …]\n</code></pre></div>",
        "id": 444930705,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718504953
    },
    {
        "content": "<p>I think your missing part of the module here. The <code>listReduceRight</code> is not the same as <code>reduceListRight</code>.</p>",
        "id": 444934505,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718509055
    },
    {
        "content": "<p>Oh... haha! Partial copy/pasta, partial re-typing my code lol.</p>",
        "id": 444936461,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718509964
    },
    {
        "content": "<p>(I fixed the mis-type)</p>",
        "id": 444936690,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718510173
    },
    {
        "content": "<p>And this is specific to expect? Doesn't happen with regular use?</p>",
        "id": 444942221,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718514606
    },
    {
        "content": "<p>Thats a great question. I'm haven't actually tried calling the function from within the module except inside expect. Its a module in a package, not a application, but I can see if it passes <code>roc check</code>.</p>",
        "id": 444944033,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718516360
    },
    {
        "content": "<p>Or maybe better yet, write a function which calls reduceListRight with a couple different types, and do an expect on <em>that</em> function...</p>",
        "id": 444944138,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718516453
    }
]