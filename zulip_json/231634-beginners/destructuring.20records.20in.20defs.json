[
    {
        "content": "<p>Hey, I am struggling to understand this from the tutorial.</p>\n<div class=\"codehilite\"><pre><span></span><code>Finally, destructuring can be used in defs too:\n\n{ x, y } = { x: 5, y: 10 }\n</code></pre></div>\n<p>What is the use-case for this? How can <code>{x, y}</code> be used afterward?</p>",
        "id": 273249288,
        "sender_full_name": "Loric Brevet",
        "timestamp": 1645806047
    },
    {
        "content": "<p>This is equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">record = </span><span class=\"p\">{</span> <span class=\"nv\">x: </span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nv\">y: </span><span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"nv\">x = </span><span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">x</span>\n<span class=\"nv\">y = </span><span class=\"nx\">record</span><span class=\"p\">.</span><span class=\"nx\">y</span>\n</code></pre></div>\n<p>So <code>x</code> is just an int containing 5 and <code>y</code> an int containing 10</p>",
        "id": 273249979,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645806390
    },
    {
        "content": "<p>disclaimer:  i'm inexperienced with roc, so i'm explaining this as it works in other languages, unaware of nuance that Roc might have</p>\n<p>the statement you posted is equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><code>some_rec = { x: 5, y: 10}\nx = some_rec.x\ny = some_rec.y\n</code></pre></div>\n<p>normally you wouldn't use it with a record you just created, because you already know what the values of all the fields are, but you might use it with, for example, an argument from a function.  for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>Person : { first_name : Str, last_name : Str, honorific : Str }\n\ngreet : Person -&gt; Str\ngreet = \\person -&gt;\n    let {first_name, last_name, honorific} = person\n    &quot;Hello \\(honorific) \\(last_name)&quot;\n</code></pre></div>",
        "id": 273250227,
        "sender_full_name": "Emi",
        "timestamp": 1645806508
    },
    {
        "content": "<p>Oh that means it brings <code>x</code> and <code>y</code> in scope? Or maybe the root scope is a record behind the scenes, and this adds <code>x</code> and <code>y</code> to this \"root\" record?</p>",
        "id": 273250240,
        "sender_full_name": "Loric Brevet",
        "timestamp": 1645806516
    },
    {
        "content": "<p>im pretty sure i brutalized the roc syntax there, but hopefully you get what i mean</p>",
        "id": 273250251,
        "sender_full_name": "Emi",
        "timestamp": 1645806524
    },
    {
        "content": "<p>oh Brendan beat me to it</p>",
        "id": 273250276,
        "sender_full_name": "Emi",
        "timestamp": 1645806534
    },
    {
        "content": "<p>Can even take the person example a step further. This should work:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Person : </span><span class=\"p\">{</span> <span class=\"nv\">first_name : </span><span class=\"nx\">Str</span><span class=\"p\">,</span> <span class=\"nv\">last_name : </span><span class=\"nx\">Str</span><span class=\"p\">,</span> <span class=\"nv\">honorific : </span><span class=\"nx\">Str</span> <span class=\"p\">}</span>\n\n<span class=\"nv\">greet : </span><span class=\"nx\">Person</span> <span class=\"nf\">-&gt;</span> <span class=\"nx\">Str</span>\n<span class=\"nv\">greet = </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"nx\">first_name</span><span class=\"p\">,</span> <span class=\"nx\">last_name</span><span class=\"p\">,</span> <span class=\"nx\">honorific</span><span class=\"p\">}</span> <span class=\"nf\">-&gt;</span>\n    <span class=\"s\">\"Hello \\(honorific) \\(last_name)\"</span>\n</code></pre></div>",
        "id": 273250465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645806627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479004\">Loric Brevet</span> <a href=\"#narrow/stream/231634-beginners/topic/destructuring.20records.20in.20defs/near/273250240\">said</a>:</p>\n<blockquote>\n<p>Oh that means it brings <code>x</code> and <code>y</code> in scope? Or maybe the root scope is a record behind the scenes, and this adds <code>x</code> and <code>y</code> to this \"root\" record?</p>\n</blockquote>\n<p>if i understand what you're saying, i think it's much simpler than that.  it declares a completely new <code>x</code> and <code>y</code> variables in the local scope and copies the values from the struct into them.</p>",
        "id": 273250501,
        "sender_full_name": "Emi",
        "timestamp": 1645806645
    },
    {
        "content": "<p>Ok, what bothered me was the syntax being similar to a record. It is weird in this example that something that looks like a record: <code>{x , y}</code> end up in two local variables <code>x</code> and <code>y</code>. At least it is not really intuitive! Thanks for the explanation. I think this would be a great addon to the tutorial.</p>",
        "id": 273250767,
        "sender_full_name": "Loric Brevet",
        "timestamp": 1645806778
    },
    {
        "content": "<p>If I rephrase what it does: it extracts fields from a record into dedicated variables</p>",
        "id": 273250952,
        "sender_full_name": "Loric Brevet",
        "timestamp": 1645806865
    },
    {
        "content": "<p>Yeah, definitely can look weird when directly used. I think it looks a lot more natural in function arguments or pattern matching</p>",
        "id": 273251157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645806967
    },
    {
        "content": "<p>Yes, at the first glance, your latest example with <code>greet</code> seems more common effectively!</p>",
        "id": 273251451,
        "sender_full_name": "Loric Brevet",
        "timestamp": 1645807097
    },
    {
        "content": "<p>And so in that function example, does it mean that behind the scenes, the compiler also extracts from a record to local variables and brings them into scope for the function?</p>",
        "id": 273251700,
        "sender_full_name": "Loric Brevet",
        "timestamp": 1645807212
    },
    {
        "content": "<p>Yep</p>",
        "id": 273251873,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645807294
    },
    {
        "content": "<p>This makes more sense in response to my initial question then, thanks a lot</p>",
        "id": 273252160,
        "sender_full_name": "Loric Brevet",
        "timestamp": 1645807404
    },
    {
        "content": "<p>Hey I just came across this, and it would be nice if the tutorial included that destructuring and dbg do not work when implementet top-level, they need to be put into functions.</p>",
        "id": 418738113,
        "sender_full_name": "Oliver",
        "timestamp": 1706570129
    },
    {
        "content": "<p>Probably we should just have a good error message for it. Then when it is inevitably tried, users will get an explanation of why it can't compile: <code>I see you tried to use \"dbg\" at the top level. dbg needs to be ...</code></p>",
        "id": 418738993,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706570633
    },
    {
        "content": "<p>That also avoids bloating the tutorial with unnecessary detail/things that can't be done.</p>",
        "id": 418739065,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706570656
    },
    {
        "content": "<p>also in the future <code>dbg</code> can work at the top level, just not until we get compile-time evaluation of constants working <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 418742878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706572864
    },
    {
        "content": "<p>hmm. How would it work though? When would it actually run? Print at compile time?</p>",
        "id": 418743053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706572944
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 418745862,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706574419
    },
    {
        "content": "<p>that's when any <code>crash</code>es would print too, if they come up</p>",
        "id": 418745904,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706574438
    },
    {
        "content": "<p>Hey thanks for the feedback. The errors are fairly descriptive for dbg but the destructing returns a rust kernel panic.</p>",
        "id": 418785477,
        "sender_full_name": "Oliver",
        "timestamp": 1706602294
    },
    {
        "content": "<p>It also crashes the code so you have to Ctrl+c out of the process.</p>",
        "id": 418785786,
        "sender_full_name": "Oliver",
        "timestamp": 1706602436
    },
    {
        "content": "<p>could you file an issue with a small repro. That would be great to have tracked in the repo</p>",
        "id": 418871871,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706630967
    },
    {
        "content": "<p>Hello, would gladly do so, but should I do it on zulip or Github or where is most appropriate for you?</p>",
        "id": 418873274,
        "sender_full_name": "Oliver",
        "timestamp": 1706631380
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/new\">https://github.com/roc-lang/roc/issues/new</a></p>",
        "id": 418873395,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706631419
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6472\">https://github.com/roc-lang/roc/issues/6472</a></p>",
        "id": 418902028,
        "sender_full_name": "Oliver",
        "timestamp": 1706641327
    }
]