[
    {
        "content": "<p>Is there an idiomatic way to generate random numbers in Roc? Is the recommendation to thread the state of the random number generator through all the function calls that require it?</p>",
        "id": 342110125,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678898150
    },
    {
        "content": "<p>yes</p>",
        "id": 342110305,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678898187
    },
    {
        "content": "<p>that can be wrapped up in a nicer way with something like <a href=\"https://package.elm-lang.org/packages/elm/random\">https://package.elm-lang.org/packages/elm/random</a> but we don't have a fully working package of that type yet</p>",
        "id": 342111417,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678898456
    },
    {
        "content": "<p>there's some relevant discussion in <a href=\"#narrow/stream/316715-contributing/topic/Random.20number.20generator\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/Random.20number.20generator</a></p>",
        "id": 342111610,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678898502
    },
    {
        "content": "<p>Thanks! I have found that high-performance Discrete Event Simulation is a degenerate case for Functional Programming. I love FP style, but it's impossible to make F# go fast using FP, which is why Roc is so enticing. I find I write C-style F# at this point for performance.</p>",
        "id": 342112573,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678898738
    },
    {
        "content": "<p>Roc can definitely be made to go fast, but definitely has some sharp edges. Hopefully those will be reduced over time/tools made to identify them.</p>",
        "id": 342112944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678898820
    }
]