[
    {
        "content": "<p>Not sure if it is too early to ask about \"idiomatic\" ways of writing Roc code, but here we go... :D</p>\n<p>I'm playing with a small \"End2End Tests\" package in Roc that is using the WebDriver (selenium) underneath.<br>\nBut the raw web client needs the sessionId as a parameter with every request:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">runTest</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">sessionId</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">WebDriver</span><span class=\"nf\">.</span><span class=\"nv\">startSession</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">WebDriver</span><span class=\"nf\">.</span><span class=\"nv\">navigateTo</span><span class=\"w\"> </span><span class=\"nv\">sessionId</span><span class=\"w\"> </span><span class=\"s\">\"https://google.pl\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n\n<span class=\"w\">    </span><span class=\"nv\">button1</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">WebDriver</span><span class=\"nf\">.</span><span class=\"nv\">findElement</span><span class=\"w\"> </span><span class=\"nv\">sessionId</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Css</span><span class=\"w\"> </span><span class=\"s\">\"#submit-button\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">WebDriver</span><span class=\"nf\">.</span><span class=\"nv\">clickElement</span><span class=\"w\"> </span><span class=\"nv\">sessionId</span><span class=\"w\"> </span><span class=\"nv\">button1</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n</code></pre></div>\n<p>Would it be acceptable in Roc to return a record with functions that have the <code>sessionId</code> in <strong>closure</strong>?  like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">runTest</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">r2E</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Roc2End</span><span class=\"nf\">.</span><span class=\"nv\">startSession</span><span class=\"w\"> </span><span class=\"s\">\"https://google.pl\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n\n<span class=\"w\">    </span><span class=\"nv\">button1</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">r2E</span><span class=\"nf\">.</span><span class=\"nv\">findElement</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Css</span><span class=\"w\"> </span><span class=\"s\">\"#submit-button\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">r2E</span><span class=\"nf\">.</span><span class=\"nv\">clickElement</span><span class=\"w\"> </span><span class=\"nv\">button1</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n</code></pre></div>\n<p>The second snippet is easier to use and easier to read, but it seems like \"cheating\" and artificially creating \"class objects\"...</p>\n<p>Would this be considered an anti-pattern? Or is it ok?</p>\n<p><em>// btw. I think that in haskell you would use a monad to hide the sessionId</em></p>",
        "id": 381853902,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1691156708
    },
    {
        "content": "<p>I think you can also do something monadic in roc if you want. I think roc random has a similar API to avoid needing to pipe the state around everywhere</p>",
        "id": 381900120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1691164241
    },
    {
        "content": "<p>That said, I think the closures are pretty reasonable as long as the session won't need to get updated.</p>",
        "id": 381900414,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1691164298
    },
    {
        "content": "<p>a relevant question here is: do you ever need to run a <code>Task</code> in between any of these? Or can it be just \"run all the webdriver steps one after the other, with no <code>Task</code>s ever being run in between any step\" and that's sufficient?</p>",
        "id": 381932979,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691171042
    },
    {
        "content": "<p>in most use cases when using a webdriver you probably want to wait for the result before continuing.<br>\ne.g. you need to get the id of the button before you can use it to send a \"click\":</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">button1</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">WebDriver</span><span class=\"nf\">.</span><span class=\"nv\">findElement</span><span class=\"w\"> </span><span class=\"nv\">sessionId</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Css</span><span class=\"w\"> </span><span class=\"s\">\"#submit-button\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">await</span>\n\n<span class=\"kt\">WebDriver</span><span class=\"nf\">.</span><span class=\"nv\">clickElement</span><span class=\"w\"> </span><span class=\"nv\">sessionId</span><span class=\"w\"> </span><span class=\"nv\">button1</span>\n</code></pre></div>\n<p>or get the value of an input and then decide what to do next.</p>\n<p>But to be fair - this is not a great problem to be solved using a pure functional language.<br>\nEverything you do with a webdriver is just side effects <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>I'm just using the Http api from the basic-cli platform for this...<br>\nBut I think that you could create a nice api and a great user experience even for end-to-end tests, by creating a dedicated e2e platform.</p>\n<p>Can't wait to see what amazing platforms people will create in the future <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 381939493,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1691172623
    },
    {
        "content": "<p>oh I think this is a fine use case!</p>\n<p>I'm specifically asking about <code>Task</code> because it has implications for what your options are for handling the session</p>",
        "id": 381948499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691174631
    },
    {
        "content": "<p>waiting for the result before continuing is totally fine, but it matters whether after you get that result you might want to run an arbitrary <code>Task</code> (like writing to a file or something) before doing the next webdriver action</p>",
        "id": 381949434,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691174817
    },
    {
        "content": "<p>personally the way I've written tests like this in the past, I've never needed that, but I'm not sure if the use cases you have in mind are different!</p>",
        "id": 381949804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691174886
    },
    {
        "content": "<p>(e.g. maybe a particularly customizable scraper might want to do this, I could imagine, but if it's just for e2e tests, maybe not)</p>",
        "id": 381949995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691174929
    },
    {
        "content": "<p>you're right! <br>\nwhen writing e2e test I don't need to run any tasks between the steps.</p>\n<p>not sure if this is what you had on your mind, but I could create pure functions and a pure data structure to write the tests, and then a function e.g. \"runTest\" would take the data structure and interpret it to make the http calls and run the tasks.<br>\nAlmost like pushing out the impure code to the edges of my program.<br>\nidk, will try to experiment with that.</p>",
        "id": 382074722,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1691226099
    },
    {
        "content": "<p>yeah exactly!</p>",
        "id": 382106828,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691233267
    },
    {
        "content": "<p>there are a couple of ways to do that, and they have different tradeoffs in terms of how the API feels to use and how the under-the-hood data structure looks</p>",
        "id": 382108831,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691233734
    },
    {
        "content": "<p>for example, there's a way to make the API look and feel like <code>Task</code>, while having an interpretable structure under the hood, but it looks strange under the hood and I don't think I ever would have guessed how to do it if someone hadn't explained the technique to me, so let me know if that's of interest! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 382109200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691233810
    }
]