[
    {
        "content": "<p>I've heard Richard talk about effects on the podcast, and the most recent EYG episode goes in some depth with the EYG approach.  My background is mostly in Ruby but maybe more of a fan of Elixir.  I write mostly in a functional style, very comfortable with immutability, and understand pure functions and side effects.  But this is really my first encounter with a language or approach that has a formal sense of Effects.  What's a good starting point to learn more about Roc Effects?</p>",
        "id": 482899499,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731880292
    },
    {
        "content": "<p>A lot is in flux with purity inference about to land. Maybe the purity inference talk would be the best bet currently....I guess how are you trying to understand about them (implementation, relation to platforms, just what they are, how they appear in roc code, other)?</p>",
        "id": 482901452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731882099
    },
    {
        "content": "<p><a href=\"https://youtu.be/42TUAKhzlRI?si=D7pD6dGJyr_TY9BW\">https://youtu.be/42TUAKhzlRI?si=D7pD6dGJyr_TY9BW</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"42TUAKhzlRI\" href=\"https://youtu.be/42TUAKhzlRI?si=D7pD6dGJyr_TY9BW\"><img src=\"https://uploads.zulipusercontent.net/8c33b5cd1c8227ab0b3ead322bc76a00c437f7ff/68747470733a2f2f692e7974696d672e636f6d2f76692f34325455414b687a6c52492f64656661756c742e6a7067\"></a></div>",
        "id": 482901466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731882118
    },
    {
        "content": "<p>I understand platforms are responsible for handling effects, and that seems like a nice property.  perhaps related, it's a neat quirk that the platform calls into the application, like a library, which gives Roc itself the purity guarantees, but in my head while I was learning, I was assuming Roc was calling out to the platform.  Mainly I'm thinking about how to reason about programs with an explicit notion of effects.  my approach for the last 10 years or so, in Ruby, is to minimize side effects, minimize state (object ivars, mostly), and adhere to mostly functional paradigms.  This has meant more easily testable code and easy transitions to concurrency and parallelism.</p>",
        "id": 482901686,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731882353
    },
    {
        "content": "<p>So now, I'm wondering what amazing benefits will fall out of an explicit notion of effects, and how to harness the feature.</p>",
        "id": 482901757,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731882420
    },
    {
        "content": "<p>I have a bunch of minimal gems / libs, and I'll probably try to port one to Roc soon as an exercise</p>",
        "id": 482901856,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731882526
    },
    {
        "content": "<p>Watching now, thanks</p>",
        "id": 482901986,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731882648
    },
    {
        "content": "<p>7 minutes in, Richard is describing everything I just typed <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 482902356,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731883068
    },
    {
        "content": "<p>side note: I've been silently hating the backslash until I heard Richard say it represents lambda.  makes much more sense now</p>",
        "id": 482902914,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731883625
    },
    {
        "content": "<p>If you want to see purity inference in action, <a href=\"https://github.com/lukewilliamboswell/roc-ray\">roc-ray graphics platform</a> we've been using it there.</p>",
        "id": 482906176,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731886815
    },
    {
        "content": "<p>I may have gotten confused by earlier podcasts and the EYG one.  Is it fair to say, that in the current version of Roc, before purity inference, that effects were mostly encapsulated by Tasks and not a first class citizen?</p>",
        "id": 482919102,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731897711
    },
    {
        "content": "<p>There was a version of roc where Task was a thing the platform library would export, another version of roc where Task was a language builtin used by exported platform functions, and the current version of roc, where you have platform functions that end in <code>!</code> (like ruby), use <code>=&gt;</code> instead of <code>-&gt;</code> in their type signature, and return a normal <code>Result</code> instead of a <code>Task</code>. If you're writing a platform you could still export a task-like thing yourself, but it would just be your own unique thing instead of a language thing.</p>",
        "id": 482919438,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1731897972
    },
    {
        "content": "<p>side note: my main technical task for today was to take down a 3-node proxmox cluster (currently doing nothing) and rebuild it with Incus.  I'm pretty sure I'm going to install Arch, but I've got a ton of experience with Debian and been playing with NixOS lately.  Once I've got Incus going, I want to define my containers in text (Infrastructure as code) and start running local services inside the LAN (torrent, weather, music, etc) and possibly some web stuff on the public net.</p>",
        "id": 482919598,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898107
    },
    {
        "content": "<p>Instead I got nerdsniped by the EYG podcast <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 482919656,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898193
    },
    {
        "content": "<p>Dan: ok, so purity inference has landed?  I just watched the video linked above</p>",
        "id": 482919810,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898303
    },
    {
        "content": "<p>Yes - purity inference has landed. But theres only one (published?) platform that uses it currently.</p>",
        "id": 482919948,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731898408
    },
    {
        "content": "<p>so, one of my gems is a Nostr relay, with Schnorr signatures and everything.  I think that might be too big of a spike for my first Roc port.  But hypothetically speaking, could/should I write a platform that e.g. does the schnorr signatures?</p>",
        "id": 482919981,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898437
    },
    {
        "content": "<p>The upgrade for basic-cli is done on a branch, but we have a bug with <code>try</code> / <code>return</code> that makes it a less than ideal experience at the moment.</p>",
        "id": 482920030,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731898453
    },
    {
        "content": "<p>my plan is to use basic-cli heavily.  that's my wheelhouse</p>",
        "id": 482920042,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898473
    },
    {
        "content": "<p>We have a plan for crypto primitives to be builtins, as for security reasons you really need to control the implementation. I'm not familiar with Schnorr, would that need to be secure?</p>",
        "id": 482920094,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731898530
    },
    {
        "content": "<p>schnorr sigs use <code>secp256k1</code> elliptic curve crypto.  it's used mostly for bitcoin, but now Nostr etc</p>",
        "id": 482920176,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898586
    },
    {
        "content": "<p>The first we implemented is <code>sha256</code> <a href=\"https://github.com/roc-lang/roc/pull/6977\">in this PR</a> but it's currently stuck on an LLVM bug</p>",
        "id": 482920210,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731898618
    },
    {
        "content": "<p>I've got a mostly-pure-ruby impl, but also one that leans on <code>libsecp256k1</code></p>",
        "id": 482920223,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898628
    },
    {
        "content": "<p>sha256 is used heavily by schnorr</p>",
        "id": 482920244,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898656
    },
    {
        "content": "<p>to answer your question, yes, as I understand ;)</p>",
        "id": 482920338,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731898729
    },
    {
        "content": "<p>Back in June <span class=\"user-mention\" data-user-id=\"479073\">@Matthieu Pizenberg</span> gave a talk about implementing some crypto stuff in roc for fun. <a href=\"#narrow/channel/303057-gatherings/topic/Roc.20Online.20Meetup.20June.202024/near/444439410\">Heres the online meetup</a>, you can see the recording and also see his talk notes.</p>",
        "id": 482920588,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731898919
    },
    {
        "content": "<p>I've implemented 3DES, HMAC, and more.  but not for production -- for QA use to verify and tickle prod.  this was a long time ago.  I would not have implemented schnorr sigs unless I had to (for Nostr), but I have some nice ruby code that closely matches the spec.  long story short, not a crypto guy, and I'll probably want to use <code>libsecp256k1</code> for any real work</p>",
        "id": 482920792,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731899044
    },
    {
        "content": "<p><a href=\"https://github.com/rickhull/schnorr_sig\">https://github.com/rickhull/schnorr_sig</a></p>",
        "id": 482920936,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731899172
    },
    {
        "content": "<p>Luke: the google drive link?  still waiting for the page to load...</p>",
        "id": 482921736,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731899856
    },
    {
        "content": "<p>looking at roc-ray ...  I have <a href=\"https://github.com/rickhull/driving_physics\">https://github.com/rickhull/driving_physics</a>, which is entirely numerical / text, with no graphics.  I really want to add graphics, and I was looking at DragonRuby game engine, but it's proprietary and actually requires mruby (embedded ruby), which is actually a completely different beast than the Ruby I used</p>",
        "id": 482922109,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731900165
    },
    {
        "content": "<p>I think DragonRuby is mostly based on SDL.  haven't looked at Raylib yet</p>",
        "id": 482922146,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731900211
    },
    {
        "content": "<p>for my driving_physics lib, it is a first principles approach.  for example, I have a Disk class, which is used to model wheel+tire, gears, flywheel, etc.  a disk has mass, radius, width, and can calculate torque, moment, etc</p>",
        "id": 482922453,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731900469
    },
    {
        "content": "<p>In case you missed it <a href=\"https://lukewilliamboswell.github.io/roc-ray-ball-physics/\">https://lukewilliamboswell.github.io/roc-ray-ball-physics/</a></p>",
        "id": 482925244,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731902768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"780900\">Rick Hull</span> <a href=\"#narrow/channel/231634-beginners/topic/Effects/near/482921736\">said</a>:</p>\n<blockquote>\n<p>Luke: the google drive link?  still waiting for the page to load...</p>\n</blockquote>\n<p>Is google docs not working?</p>",
        "id": 482925330,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731902802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479073\">Matthieu Pizenberg</span> <a href=\"#narrow/channel/303057-gatherings/topic/Roc.20Online.20Meetup.20June.202024/near/446311261\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/22008/2vL8XWcqUOvTVv3-L723XyYK/roc-crypto-meetup-2024-06.pdf\">roc-crypto-meetup-2024-06.pdf</a></p>\n</blockquote>",
        "id": 482925362,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731902823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/303057-gatherings/topic/Roc.20Online.20Meetup.20June.202024/near/446329966\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://drive.google.com/file/d/1zVD0N_fjcXz6GF-uikBhF2TwFphYF7T-/view?usp=sharing\">Here is the video link</a> for anyone who couldn't make it today. Some awesome talks, thanks again <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n</blockquote>",
        "id": 482925386,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731902841
    },
    {
        "content": "<blockquote>\n<p>I really want to add graphics, and I was looking at DragonRuby game engine, but it's proprietary and actually requires mruby (embedded ruby), which is actually a completely different beast than the Ruby I used</p>\n</blockquote>\n<p>If you port you simulator over to roc you can use roc-ray <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>We haven't added 3D yet, but that (should be <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) easy to implement from here if you wanted that.</p>",
        "id": 482925965,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731903283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"430894\">@Dan G Knutson</span> and I have mostly been messing around with real-time multiplayer networking stuff, and support for Windows, Linux, Macos, and Web</p>",
        "id": 482925999,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731903305
    },
    {
        "content": "<p>As Luke said, these are \"crypto for fun\" and learning implementations that I did while following a course on fundamentals of cryptography. The github with the code <a href=\"https://github.com/mpizenberg/crypto-0-to-hero\">https://github.com/mpizenberg/crypto-0-to-hero</a><br>\nIt hasn’t been updated to the current Roc syntax, so these will not compile. I also agree with you <span class=\"user-mention\" data-user-id=\"780900\">@Rick Hull</span> that any serious cryptography usage must be done with vetted implementations.</p>",
        "id": 483012363,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1731933962
    },
    {
        "content": "<p>Thanks for direct vid link, I'll check it out</p>",
        "id": 483014976,
        "sender_full_name": "Rick Hull",
        "timestamp": 1731934640
    }
]