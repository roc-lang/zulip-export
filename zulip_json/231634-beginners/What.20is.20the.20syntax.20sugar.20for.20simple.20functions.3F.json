[
    {
        "content": "<p>I am pretty sure I saw that this exists, but I can't find it. A syntax sugar for simple functions so instead of List.map(\\x -&gt; x + 1), it's List.map(\\. + 1) or something along those lines.</p>",
        "id": 378273875,
        "sender_full_name": "Jacob",
        "timestamp": 1690231879
    },
    {
        "content": "<p>Nothing of that nature exists.</p>",
        "id": 378279703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690234097
    },
    {
        "content": "<p>I think I've seen something like that in other languages though - I think Closure has a <code>%</code> variable that can be used inside lambdas for this, if memory serves?</p>",
        "id": 378287293,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690237172
    },
    {
        "content": "<p>scala does this with _ <a href=\"https://docs.scala-lang.org/scala3/book/fun-anonymous-functions.html\">https://docs.scala-lang.org/scala3/book/fun-anonymous-functions.html</a></p>",
        "id": 378287983,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690237441
    },
    {
        "content": "<p>oh, guess i was imagining things <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 378297094,
        "sender_full_name": "Jacob",
        "timestamp": 1690242193
    },
    {
        "content": "<p>Looked up to see if it was common:<br>\nSwift has <code>$</code></p>\n<div class=\"codehilite\" data-code-language=\"Swift\"><pre><span></span><code><span class=\"n\">numbers</span><span class=\"p\">.</span><span class=\"bp\">map</span><span class=\"p\">({</span> <span class=\"nv\">$0</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"p\">})</span>\n</code></pre></div>\n<p>Kotlin has <code>it</code></p>\n<div class=\"codehilite\" data-code-language=\"Kotlin\"><pre><span></span><code><span class=\"n\">numbers</span><span class=\"p\">.</span><span class=\"na\">map</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">it</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 378298210,
        "sender_full_name": "Jacob",
        "timestamp": 1690242901
    },
    {
        "content": "<p>Ruby and Elixir have something similar too. Personally, I think Roc's regular lambda syntax looks more lightweight than regular lambdas in any of those other languages, since parentheses aren't required in the common case: <code>List.map l \\x -&gt; x + 1</code>. (That's one my favorite things about Roc's syntax!) So I think a shorthand for that wouldn't be as helpful for Roc as it is for other languages.</p>",
        "id": 378336423,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1690260845
    },
    {
        "content": "<p>Unlike Ajai, I get very confused when a lambda doesn't have brackets, so I always add them <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> however, I still agree that Roc's lambda syntax is light enough that I don't find myself wanting a lighter way to write it.</p>",
        "id": 378340647,
        "sender_full_name": "Hannes",
        "timestamp": 1690262453
    },
    {
        "content": "<p>That's interesting, it's always good to be reminded how subjective our syntax opinions often are. Being a native Schemer myself, you'd think I would prefer the parentheses haha</p>",
        "id": 378360579,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1690269065
    },
    {
        "content": "<p>I'm not familiar with Kotlin, but that <code>it</code> example immediately reminded me of javascript's <code>this</code> and we can all agree <code>this</code> is not good <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 378368579,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1690271107
    },
    {
        "content": "<p>Ah, what I was thinking of is something that does \\x -&gt; \\x.foo from just .foo in addition to \\x -&gt; \\x + 1, Lean allows that but uses a placeholder for the single argument of a lambda. But if it isn't already in the language, it is a good idea to not support it (it just makes things way more complicated and confusing). Especially because the lambda syntax is so light as mentioned.</p>",
        "id": 378489791,
        "sender_full_name": "Jacob",
        "timestamp": 1690294196
    }
]