[
    {
        "content": "<p>I'm trying to add hosted functionality to clear the terminal (using the CLI example as a base). I'm able to get it working by modifying <code>Effect.roc</code> and <code>lib.rs</code>, but I'm having trouble when trying to implement it in a new \"Terminal\" module instead. Here's my <code>Terminal.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>hosted Terminal\n    exposes [ clear ]\n    imports [ pf.Effect, Task.{ Task } ]\n    generates Terminal with []\n\nclearTerminal : {} -&gt; Effect.Effect {}\n\nclear : {} -&gt; Task {} *\nclear = \\{} -&gt; Effect.map (clearTerminal {}) (\\_ -&gt; Ok {})\n</code></pre></div>\n<p>and here's the error I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span><code>[nix-shell:~/roc]$ roc check /mnt/d/Home/roctest/test.roc\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nSomething is off with the body of the clearTerminal definition:\n\n1│  hosted Terminal\n\n\nThis Terminal private tag application has the type:\n\n    [ Terminal ({}a -&gt; b) ]d\n\nBut the type annotation on clearTerminal says it should be:\n\n    [ Effect.Effect ({} -&gt; {}) ]\n\nTip: Seems like a tag typo. Maybe Terminal should be Effect.Effect?\n\nTip: Can more type annotations be added? Type annotations always help\nme give more specific messages, and I think they could help a lot in\nthis case\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>",
        "id": 274031306,
        "sender_full_name": "Jared Cone",
        "timestamp": 1646337869
    },
    {
        "content": "<p>Hosted is new to me (and roc in general?), but I would guess the issue is that hosted is just for effects. Instead, you probably want terminal to be more akin to the Stdout module. It wraps an effect.</p>",
        "id": 274068355,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646358886
    },
    {
        "content": "<p>There aren't currently any effects for clearing the terminal, setting the cursor position in the terminal, etc. I need to add those, which requires adding some functionality in rust that can be called from roc. I can do this by modifying Effect, but I was hoping there might be a way to add another hosted module.</p>",
        "id": 274270336,
        "sender_full_name": "Jared Cone",
        "timestamp": 1646521196
    },
    {
        "content": "<p>I am pretty sure that all effects must be exposed through the effect module. They then can be imported and wrapped in other modules. So you would add an effect for clearing the terminal, but give it a nicer exposed wrapper in the terminal module.</p>",
        "id": 274271678,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646522845
    },
    {
        "content": "<p>Effect is essentially the cffi specification</p>",
        "id": 274271694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646522863
    },
    {
        "content": "<p>You probably want to do</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Terminal\n    exposes [ clear ]\n    imports [ pf.Effect, Task.{ Task } ]\n\nclearTerminal : {} -&gt; Effect.Effect {}\n\nclear : {} -&gt; Task {} *\nclear = \\{} -&gt; Effect.map (clearTerminal {}) (\\_ -&gt; Ok {})\n</code></pre></div>",
        "id": 274271755,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1646522927
    },
    {
        "content": "<p><code>hosted</code> generates a new <code>Effect</code> implementation</p>",
        "id": 274271764,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1646522940
    },
    {
        "content": "<p>Is that going to allow me to implement clearTerminal in rust?</p>",
        "id": 274275247,
        "sender_full_name": "Jared Cone",
        "timestamp": 1646528086
    },
    {
        "content": "<p>I see, sorry, I misunderstood. Indeed it won't.</p>\n<p>You could create a new hosted module that has <code>Terminal</code> as the effect name, but the problem is that it won't work with <code>Task</code> as <code>Task</code> is defined currently. That's because <code>Task</code> in the CLI platform wants the <code>Effect</code> type alias from the <code>Effect</code> module, but effects produced in the new hosted <code>Terminal</code> module would have to produce <code>Terminal</code> effects. So something like</p>\n<div class=\"codehilite\"><pre><span></span><code>hosted Terminal\n    exposes [ clear ]\n    imports [ pf.Effect, Task.{ Task } ]\n    generates Terminal with [map]\n\nclearTerminal : {} -&gt; Terminal {}\n\nclear : {} -&gt; Terminal (Result {} *)\nclear = \\{} -&gt; Terminal.map (clearTerminal {}) (\\_ -&gt; Ok {})\n</code></pre></div>\n<p>should work</p>",
        "id": 274275496,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1646528408
    },
    {
        "content": "<p>Why not write all the rust wrapper functions in the effect module? That is what it is made for.</p>",
        "id": 274277928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646531918
    },
    {
        "content": "<p>So Effect is the ffi module. Then Stdin, Stdout, Terminal, File, etc are the exposed modules with nice interfaces for the app to use.</p>",
        "id": 274278130,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646532047
    },
    {
        "content": "<p>They just end up delegating to an effect.</p>",
        "id": 274278143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646532071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481285\">@Jared Cone</span> might be easier to pair on it - dm me if you'd like to!</p>",
        "id": 274282872,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646538916
    },
    {
        "content": "<p>Will do. Yea could definitely just define everything in Effect, I was just thinking that might grow quite large if it's going to house all the functionality for terminal, filesystem, networking, etc</p>",
        "id": 274284189,
        "sender_full_name": "Jared Cone",
        "timestamp": 1646540889
    },
    {
        "content": "<p>if the terminal supports <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences\">ANSI escape codes</a> you can use <code>Stdout.line</code> to move cursor, scroll, erase, etc... Not quite a console api, but something that can be useful in the meantime :)</p>",
        "id": 274337411,
        "sender_full_name": "Yorye Nathan",
        "timestamp": 1646613017
    }
]