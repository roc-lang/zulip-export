[
    {
        "content": "<p>So far in AoC I've relied on type inference which has been going quite well (awesome job!) but running into some issues with integers. Some functions expect certain integer types. I have a few questions.</p>\n<ol>\n<li>I've seen a shorthand version (<code>Nat</code>) and a longhand version (<code>Int Natural</code>), are these considered the same? Why have both?</li>\n<li>Does Roc ever do type casting behind the scenes? If a function expects I64 and I give it I32, does it cast it?</li>\n<li>I noticed if I type <code>123</code> in the console it outputs <code>Num *</code> type. Is this a wildcard type that is casted as needed?</li>\n</ol>",
        "id": 406597090,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701973128
    },
    {
        "content": "<p>great questions!</p>",
        "id": 406599298,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701973940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667613\">Ryan Bates</span> <a href=\"#narrow/stream/231634-beginners/topic/Confusion.20about.20Int.20Types/near/406597090\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Does Roc ever do type casting behind the scenes? If a function expects I64 and I give it I32, does it cast it?</li>\n</ol>\n</blockquote>\n<p>no, the conversions always have to be explicit</p>",
        "id": 406599367,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701973975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667613\">Ryan Bates</span> <a href=\"#narrow/stream/231634-beginners/topic/Confusion.20about.20Int.20Types/near/406597090\">said</a>:</p>\n<blockquote>\n<ol>\n<li>\n<p>I've seen a shorthand version (<code>Nat</code>) and a longhand version (<code>Int Natural</code>), are these considered the same? Why have both?<br>\n[...]</p>\n</li>\n<li>\n<p>I noticed if I type <code>123</code> in the console it outputs <code>Num *</code> type. Is this a wildcard type that is casted as needed?</p>\n</li>\n</ol>\n</blockquote>\n<p>The answers to these are related: this is how Roc represents the nesting relationship between different classifications of numbers. </p>\n<p>the way it works is:</p>\n<ul>\n<li><code>Num a</code>is an opaque type.</li>\n<li><code>Num (Fraction Decimal)</code> is the full type of Roc's decimal number</li>\n<li><code>Dec</code> is a type alias for <code>Num (Fraction Decimal)</code></li>\n<li><code>Frac a</code> is a type alias for <code>Num (Fraction a)</code></li>\n</ul>\n<p>so this is why when you have a function that expects a <code>Frac *</code>, you can give it a <code>Dec</code> and it Just Works - it's because <code>Frac a</code> is a type alias for <code>Num (Fraction a)</code>, and <code>Dec</code> is a type alias for <code>Num (Fraction Decimal)</code> (which is compatible with <code>Num (Fraction a)</code>)</p>",
        "id": 406599965,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701974223
    },
    {
        "content": "<p>when you put a plain number into the repl, it gets the most general type possible. For example:</p>\n<ul>\n<li><code>42</code> gets the type <code>Num *</code> because the number 42 is compatible with all integers and all fractions</li>\n<li><code>0x42</code> gets the type <code>Int *</code> because it's an integer literal</li>\n<li><code>0.42</code> gets the type <code>Frac *</code> because it's a fractional literal</li>\n</ul>\n<p>this is why you can do things like <code>someFraction + 1</code></p>",
        "id": 406600235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701974311
    },
    {
        "content": "<p>because <code>1</code> is a <code>Num *</code> and <code>someFraction</code> is some sort of <code>Frac</code> (which is a type alias for some <code>Num (Fraction ...)</code>)</p>",
        "id": 406600292,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701974341
    },
    {
        "content": "<p>so they'll be compatible</p>",
        "id": 406600308,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701974347
    },
    {
        "content": "<p>btw I used <code>Fraction Decimal</code> instead of <code>Integer Natural</code> above because <code>Nat</code> is going to be removed from the language (replaced by just <code>U64</code>)</p>",
        "id": 406600401,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701974382
    },
    {
        "content": "<p>but the same ideas apply!</p>",
        "id": 406600422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701974389
    },
    {
        "content": "<p>happy to answer any follow-up questions about that, or rephrase if anything was unclear <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 406600492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701974403
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>, that helps a lot. A couple more questions.</p>\n<ol>\n<li>Do you have any recommendations when working with these types in code if you aren't concerned about performance? For example, is it better to use <code>Num *</code> everywhere in type definitions so it stays flexible? Or is it better to be explicit?</li>\n<li>Is it possible to cast an explicit type back into a generic type? For example, if I do <code>List.len</code> it is <code>Nat</code> type which is unsigned. If I need it signed I can do<code>Num.toI64</code> but it might be nicer to cast to <code>Num *</code> so the result can be used more flexibly.</li>\n</ol>",
        "id": 406603046,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701975384
    },
    {
        "content": "<p>in data structures (e.g. record types) I generally default to the concrete type, e.g. <code>Dec</code> or <code>U64</code>, unless there's some specific demand for it to be more flexible than that, which has been rare in my experience</p>",
        "id": 406603504,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701975590
    },
    {
        "content": "<p>in function types, I default to whatever is most flexible because it's usually more about the logic than the data type</p>",
        "id": 406603634,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701975627
    },
    {
        "content": "<p>in general I don't like type variables propagating all over the place unless they're actually being used in a significantly valuable way for multiple different types</p>",
        "id": 406603864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701975704
    },
    {
        "content": "<p>and putting concrete number types in data structure type aliases means those type aliases don't need type variables</p>",
        "id": 406604018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701975742
    },
    {
        "content": "<p>whereas in function signatures they don't have to propagate; if you use a more flexible type there, callers can give them types that are more concrete and it's fine <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 406604146,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701975793
    },
    {
        "content": "<p>Just so I'm understanding, let's say I have a Dict with keys of <code>U8</code>. Is it a good practice to add a wrapper function around <code>Dict.get</code> that accepts <code>Num *</code> and internally does <code>Num.toU8</code> before passing to the dict? This way the function is generic but the data type is explicit.</p>",
        "id": 406604983,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701976139
    },
    {
        "content": "<p>It depends. Casting from a <code>Num *</code> to a <code>U8</code> means that you need to decide what happens when the number is not an integer between 0 and 255. You could</p>\n<ul>\n<li>crash</li>\n<li>truncate/round decimals to ints</li>\n<li>wrap values to fit in the range</li>\n<li>return <code>Err OutOfBounds</code> or something similar</li>\n</ul>\n<p>If you do that with a wrapping function then you're asserting that you want to handle the number conversion the same way in all cases. You'll also have to give the function a name/docs that clearly explain the behavior.</p>\n<p>The alternative is to be explicit that you're working with a <code>DIct U8 Foo</code> and require the caller to convert numbers to <code>U8</code> as appropriate.</p>",
        "id": 406614444,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701980260
    },
    {
        "content": "<p>Is there a particular AoC problem you're working on? I'd consider giving your types alias that describe your domain. When a function is about manipulating your problem domain then use that concrete type alias. When a function is just a general helper unrelated to your problem domain then use generic types.</p>",
        "id": 406615358,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701980655
    },
    {
        "content": "<p>If you have a <code>Dict U8 Something</code>, I definitely wouldn't wrap it. You fundamentally have a concrete type.</p>\n<p>I would only write a generic function if you might have support types.</p>\n<p>For example you might write something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">someFn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Num</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">SomeVal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">SomeOutput</span>\n</code></pre></div>\n<p>This works with any integer type if that makes sense for the function. No need for any casts</p>",
        "id": 406615956,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701981001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"586417\">@Elias Mulhall</span> I am doing Day 7 part 1 and using Parser <code>chompUntil ' '</code> to grab the cards which converts to <code>List U8</code>. I'm also doing <code>Str.toScalars \"AJKQT\"</code> elsewhere that generates <code>U32</code>. I've decided to convert everything to <code>U64</code> so I have consistent types.</p>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> that makes sense about using <code>Num a</code> to match types instead of having a wrapper function with type casting. I like the approach.</p>",
        "id": 406618193,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701982075
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <br>\nI'd consider doing</p>\n<div class=\"codehilite\"><pre><span></span><code>Card : U8\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>Card : U64\n</code></pre></div>\n<p>or whatever, depending on which representation you want to \"be\" a card. Then in your function signatures you can have like</p>\n<div class=\"codehilite\"><pre><span></span><code>parseInput : Str -&gt; List Card\nparseInput = \\input -&gt;\n</code></pre></div>\n<p>No need to make it generic, you're decided on what a card is and that's all you have to solve for.</p>",
        "id": 406619154,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701982510
    },
    {
        "content": "<p>That said I haven't done day 7 or even really looked at it</p>",
        "id": 406619197,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701982534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"586417\">@Elias Mulhall</span> thanks for the suggestion. Making a <code>Card</code> type is a good idea. I'm still new to types so nice to see some examples.</p>",
        "id": 406627079,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701986083
    }
]