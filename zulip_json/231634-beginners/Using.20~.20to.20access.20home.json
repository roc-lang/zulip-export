[
    {
        "content": "<p>Am I being stupid or does ~ not work to refer to the home directory in path specifiers on linux?</p>\n<p>I've tried in import statements when trying to load text files (I could somewhat understand it not working there since from what I've understood it's compile time, even then it should probably work though) and with things like <code>File.readUtf8</code> and with both I get file not found errors even though I know the file is there.</p>",
        "id": 482883150,
        "sender_full_name": "Scally",
        "timestamp": 1731866605
    },
    {
        "content": "<p><code>File.readUtf8</code> would be up to basic cli. It should work with <code>~</code> I think. If it doesn't, that is a bug</p>",
        "id": 482883391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731866765
    },
    {
        "content": "<p>For import statements, they definitely should not work with <code>~</code>. That would be a huge security risk of downloaded scripts. They should only work with relative paths and probably shouldn't allow using <code>..</code> to escape the directory the script is in (though I'm not fully sure on that one).  We probably actually need to double check the security around this and add explicit errors.</p>",
        "id": 482883488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731866860
    },
    {
        "content": "<p>Good point in terms of security risk, haven't even considered that. I guess in terms of the basic-cli platform it doesn't matter too much since it could still work with file read but with the safe cli platform and other platforms in mind it's probably still good to secure imports against random file access.</p>",
        "id": 482883730,
        "sender_full_name": "Scally",
        "timestamp": 1731867082
    },
    {
        "content": "<p>yeah, exactly that</p>",
        "id": 482883747,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731867104
    },
    {
        "content": "<p>Yeah, I just tested it, both escaping with <code>..</code> as well as providing absolute paths (i.e. <code>/home/user</code>) works in imports.<br>\nGiven that it's really strange <code>~</code> does not.</p>",
        "id": 482883908,
        "sender_full_name": "Scally",
        "timestamp": 1731867236
    },
    {
        "content": "<p>Okay, looking at the source code it seems like the the basic cli platform completely defers file and path operations to Rust which doesn't seem to do <code>~</code> expansion to home directory by default (there are crates that do that <a href=\"https://blog.liw.fi/posts/2021/10/12/tilde-expansion-crates/\">https://blog.liw.fi/posts/2021/10/12/tilde-expansion-crates/</a> ).<br>\nI haven't fully understood everything yet but it seems that is what's happening. Still for Linux users this expansion not happening is pretty unexpected.</p>",
        "id": 482889695,
        "sender_full_name": "Scally",
        "timestamp": 1731871959
    },
    {
        "content": "<p>For now I guess this does the trick but it seems a bit ugly and I'd consider it a workaround due to non-functional expected behavior.</p>\n<div class=\"codehilite\"><pre><span></span><code>home = Env.var! &quot;HOME&quot;\nfilepath = Str.joinWith [home, &quot;file.txt&quot;] &quot;/&quot;\n</code></pre></div>",
        "id": 482890489,
        "sender_full_name": "Scally",
        "timestamp": 1731872718
    },
    {
        "content": "<p>One of the design goals is that roc code should run the same on Linux, Mac, Windows. Working with paths nicely is a deep rabbit hole to make a nice API. We have the WIP roc-lang/path package which aims to do this. But I don't know if we've discussed <code>~</code> before.</p>",
        "id": 482891722,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731873700
    },
    {
        "content": "<p>Do you have any recommendations on how to handle typically platform dependent things then?<br>\nIn my case for instance I'd like to have a config file outside the project ecosystem. <br>\nA typical pattern on Linux is to have dotfiles (usually either in <code>~</code> or <code>~/.config</code>). As far as I know there is no similar pattern for Windows (maybe <code>%AppData%</code>).<br>\nMaybe provide a path to the config file through an environment variable but that seems kind of cumbersome.</p>",
        "id": 482892346,
        "sender_full_name": "Scally",
        "timestamp": 1731874177
    },
    {
        "content": "<p>I'm not sure. This feels like the kind of thing we are exploring with the design of roc. I would research it and do some experiments to explore the space a little. </p>\n<p>Would a config file in the same directory as the executable work for your use case?</p>",
        "id": 482894322,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731875806
    },
    {
        "content": "<p>I'd like to avoid it. In my case I'm streaming my development on Twitch and I'd like to avoid my IDE accidentally picking up on and showing things contained in my config file.</p>\n<p>I'm aware the use-case is somewhat niche but I'd assume there could be other reasons for wanting to do something similar (i.e. doing deployments on a server and having the config be in the user's home folder instead of connected to the application.</p>",
        "id": 482894821,
        "sender_full_name": "Scally",
        "timestamp": 1731876206
    },
    {
        "content": "<p>Maybe we should add some effects that wrap something like this? <a href=\"https://crates.io/crates/directories\">https://crates.io/crates/directories</a></p>",
        "id": 482895074,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731876438
    },
    {
        "content": "<p>Maybe starting with just home and cache dirs</p>",
        "id": 482895197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731876546
    }
]