[
    {
        "content": "<p>I've known since first reading the tutorial that backpassing is very useful in sugaring (simplifying the syntax of) asynchronous callbacks (specifically reducing indentation). However, I just saw <a href=\"#narrow/stream/316715-contributing/topic/Random.20number.20generator/near/290357990\">an example of backpassing being used to chain synchronous contexts together</a>. When else is backpassing useful?</p>",
        "id": 290365480,
        "sender_full_name": "jan kili",
        "timestamp": 1658404396
    },
    {
        "content": "<p>It seems like a much more powerful (or FP fundamental) feature than I'd originally thought!</p>",
        "id": 290365599,
        "sender_full_name": "jan kili",
        "timestamp": 1658404466
    },
    {
        "content": "<p>it is, but that also makes it tricky to talk about in a clear way</p>",
        "id": 290365637,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658404497
    },
    {
        "content": "<p>a decent intuition is that it is about the ordering of operations. first do this, then that, then that</p>",
        "id": 290365693,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658404527
    },
    {
        "content": "<p>this is achieved with a data dependency: the <code>x &lt;-</code> part of the backpassing relies on the value of the <code>&lt;- ....</code> part being available</p>",
        "id": 290365732,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658404561
    },
    {
        "content": "<p>so now think about \"ordered\" things: threading a state through a computation, updating a random seed, printing lines to the console in order</p>",
        "id": 290365814,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658404607
    },
    {
        "content": "<p>here the output of the computation relies on the order. it doesn't in most parts of a functional program: <code>1 + 2 + 3</code> can be evaluated in arbitrary order</p>",
        "id": 290365864,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658404651
    },
    {
        "content": "<p>but I guess the elm way of understanding this is: is there a function <code>andThen : m a -&gt;  (a -&gt; m b) -&gt; m b</code> for this type</p>",
        "id": 290365989,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658404719
    },
    {
        "content": "<p>(it must behave in a certain way, too, not any implementation will do)</p>",
        "id": 290366010,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658404737
    },
    {
        "content": "<p>... is <code>-&gt;</code> just monadic <code>=</code>?!</p>",
        "id": 290367957,
        "sender_full_name": "jan kili",
        "timestamp": 1658406055
    },
    {
        "content": "<p>I'm finally grasping monads and it looks like <code>-&gt;</code> is more of their chaining operator than <code>|&gt;</code>...</p>",
        "id": 290368142,
        "sender_full_name": "jan kili",
        "timestamp": 1658406188
    },
    {
        "content": "<p>Maybe more of a \"raw\" chaining operator?</p>",
        "id": 290368171,
        "sender_full_name": "jan kili",
        "timestamp": 1658406208
    },
    {
        "content": "<p>Your explanation makes sense, but that one part about \"relies on the value of the <code>&lt;- ....</code> part being available\" confuses me - wouldn't that just be <code>=</code>?</p>",
        "id": 290369846,
        "sender_full_name": "jan kili",
        "timestamp": 1658407145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/stream/231634-beginners/topic/Backpassing.20use.20cases/near/290367957\">said</a>:</p>\n<blockquote>\n<p>... is <code>-&gt;</code> just monadic <code>=</code>?!</p>\n</blockquote>\n<p>Yes! Although it can be used in a slightly more flexible way because the monadic bind operator (known as <code>&gt;&gt;=</code> or <code>andThen</code> or <code>bind</code> or <code>chain</code> in different languages) has the exact type signature <code>m a -&gt; (a -&gt; m b) -&gt; m b</code> while IIRC in Roc you can use backpassing also with functions of the format <code>m a -&gt; (a -&gt; x b) -&gt; x b</code></p>",
        "id": 290369884,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407177
    },
    {
        "content": "<p>(continued) It seems like we're waiting on a variable nested INSIDE the right-hand side's context to become available, rather than the evaluation itself.</p>",
        "id": 290369985,
        "sender_full_name": "jan kili",
        "timestamp": 1658407209
    },
    {
        "content": "<p>It might be intuitive to think of all of these situations as callbacks. You can only ever evaluate a callback if the parameter to the callback was evaluated first.</p>\n<p>How exactly you go from 'the thing you have before' to 'the precise parameter that is passed into the callback' (and how often the callback is executed exactly) depends on the function you are using. <code>List.joinMap</code>, <code>Task.after</code>, <code>Result.try</code>are three examples</p>",
        "id": 290370263,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407388
    },
    {
        "content": "<ul>\n<li><code>List.joinMap</code>: Run the callback once for each element in the input list, and concatenate the results</li>\n<li><code>Task.after</code>: Run the input task to completion, and once it is finished (without error) run the callback with the outcome.</li>\n<li><code>Result.try</code>: Run the callback only if the input is <code>Ok val</code>, otherwise short-circuit with the error value immediately.</li>\n</ul>",
        "id": 290370436,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407473
    },
    {
        "content": "<p>Right, but the variable passed as the parameter isn't the right-hand evaluation itself, it's a variable within that evaluation's context.</p>",
        "id": 290370480,
        "sender_full_name": "jan kili",
        "timestamp": 1658407505
    },
    {
        "content": "<p>Correct</p>",
        "id": 290370505,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407526
    },
    {
        "content": "<p>ex. <code>Result.try</code> internally contains logic that turns a <code>Result a err</code> into a variable of the type <code>a</code> that the callback expects as input parameter type.</p>",
        "id": 290370653,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407612
    },
    {
        "content": "<p>:D somehow that helps me!</p>",
        "id": 290370670,
        "sender_full_name": "jan kili",
        "timestamp": 1658407627
    },
    {
        "content": "<p><span aria-label=\"green heart\" class=\"emoji emoji-1f49a\" role=\"img\" title=\"green heart\">:green_heart:</span></p>",
        "id": 290370861,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407736
    },
    {
        "content": "<p>Is it only useful in synchronous situations when the internal state is intended to be hidden from the outside?</p>",
        "id": 290370921,
        "sender_full_name": "jan kili",
        "timestamp": 1658407780
    },
    {
        "content": "<p>Hooray! ðŸ¥³</p>",
        "id": 290370932,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407788
    },
    {
        "content": "<p>Otherwise we could just use <code>=</code> and pass that internal state around in a more complex return value.</p>",
        "id": 290371014,
        "sender_full_name": "jan kili",
        "timestamp": 1658407815
    },
    {
        "content": "<p>It is useful in any situation where it makes sense to keep track of something extra 'to the side' of plain sequencing.</p>",
        "id": 290371038,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407827
    },
    {
        "content": "<p>...without that side thing being visible/accessible in the calling context?</p>",
        "id": 290371112,
        "sender_full_name": "jan kili",
        "timestamp": 1658407869
    },
    {
        "content": "<p>There is a trivial implementation that does nothing extra which indeed simply uses <code>=</code> internally. It is not often useful in practical situations though; more a theoretical curio.</p>",
        "id": 290371119,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658407871
    },
    {
        "content": "<p>There are many situations in which it is already helpful just to hide the following alternative:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">myfun</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nv\">defaultState</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">val2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">val3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">baz</span><span class=\"w\"> </span><span class=\"nv\">state2</span><span class=\"w\"> </span><span class=\"nv\">val2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">qux</span><span class=\"w\"> </span><span class=\"nv\">state3</span><span class=\"w\"> </span><span class=\"nv\">val3</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290371490,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658408076
    },
    {
        "content": "<p><span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span> this is actually what is going on behind the scenes in the RNG example</p>",
        "id": 290371566,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658408123
    },
    {
        "content": "<p>But besides that: There are indeed many situations where it is extra useful because you can prevent the internals from being accessible from the outside. <code>Effect</code> and <code>Task</code> are good examples of this.</p>",
        "id": 290371761,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658408226
    },
    {
        "content": "<p>Yes! This reminds me of my RNG example - jinx! You beat me to it haha</p>",
        "id": 290371764,
        "sender_full_name": "jan kili",
        "timestamp": 1658408228
    },
    {
        "content": "<p>If a calling context ever wanted to return the internals, does using any backpassing preclude/prevent that? Or can it just remove the last backpassing call to extract the final internals?</p>",
        "id": 290372047,
        "sender_full_name": "jan kili",
        "timestamp": 1658408394
    },
    {
        "content": "<p>For example, in the above snippet, if we switched to using backpassing for any of those <code>foo</code>/<code>bar</code> calls, can <code>myfun</code> return any <code>state</code>s at all or just <code>val</code>s?</p>",
        "id": 290372262,
        "sender_full_name": "jan kili",
        "timestamp": 1658408507
    },
    {
        "content": "<p>It could only access <code>val</code>s</p>",
        "id": 290372538,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658408657
    },
    {
        "content": "<p>Okay, thank you. That answers a question I couldn't formulate until now.</p>",
        "id": 290372757,
        "sender_full_name": "jan kili",
        "timestamp": 1658408780
    },
    {
        "content": "<p>So backpassing/monadic composition alone hides the internal state, and for some datastructures this might be important. (Such as <code>Effect</code>).<br>\nOthers expose other functions or data constructors with which you _can_ access the internal state if you want to. (Like <code>Ok</code> and <code>Err</code> in <code>Result</code>, or many of the functions in the <code>List</code> module)</p>",
        "id": 290372761,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658408782
    },
    {
        "content": "<p>But you can only really call those from outside the callback chain, not from the inside</p>",
        "id": 290372856,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658408856
    },
    {
        "content": "<p>i.e. you cannot call them on the thing you are working on in the callback chain, because there you don't have a <code>Result a err</code> or a <code>List a</code>, you only have an <code>a</code>.</p>",
        "id": 290372945,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658408893
    },
    {
        "content": "<p>Yes! That makes sense.</p>",
        "id": 290384580,
        "sender_full_name": "jan kili",
        "timestamp": 1658414541
    },
    {
        "content": "<p>Thank you for this 101 course :D I needed it</p>",
        "id": 290384604,
        "sender_full_name": "jan kili",
        "timestamp": 1658414553
    },
    {
        "content": "<p>You're very welcome! <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 290386054,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658415213
    },
    {
        "content": "<p>here's an interesting progression of moving from non-backpassing to backpassing style: all 4 of these compile to exactly the same thing</p>",
        "id": 290621396,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658593304
    },
    {
        "content": "<p><strong>indented</strong></p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">result</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"|\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">exclaim</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toU16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">year</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">year</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"s\">\",\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290621437,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658593327
    },
    {
        "content": "<p><strong>outdented</strong></p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">result</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"|\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">exclaim</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toU16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">year</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">year</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"s\">\",\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290621440,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658593337
    },
    {
        "content": "<p><strong>backpassing</strong></p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">result</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"|\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">exclaim</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">year</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toU16</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">year</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"s\">\",\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290621450,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658593349
    },
    {
        "content": "<p><strong>backpassing with |&gt;</strong></p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">result</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"|\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">exclaim</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">year</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toU16</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">year</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"s\">\",\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290621708,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658593718
    },
    {
        "content": "<p>I donâ€™t think this is a particularly good benchmark, but it is interesting to see how on my small phone only the last version is understandable without scrolling! <a href=\"/user_uploads/22008/gsY-8Mof15bGMwZXxTbMt4GR/C8C09E23-67E7-44B0-8EFD-EF3416673916.png\">C8C09E23-67E7-44B0-8EFD-EF3416673916.png</a> <a href=\"/user_uploads/22008/YNwv8G5IQOGz-SF-yf_0P_cT/DDEC1422-FC58-41E1-A2FF-D1AB097F1BF1.png\">DDEC1422-FC58-41E1-A2FF-D1AB097F1BF1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/gsY-8Mof15bGMwZXxTbMt4GR/C8C09E23-67E7-44B0-8EFD-EF3416673916.png\" title=\"C8C09E23-67E7-44B0-8EFD-EF3416673916.png\"><img src=\"/user_uploads/22008/gsY-8Mof15bGMwZXxTbMt4GR/C8C09E23-67E7-44B0-8EFD-EF3416673916.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/YNwv8G5IQOGz-SF-yf_0P_cT/DDEC1422-FC58-41E1-A2FF-D1AB097F1BF1.png\" title=\"DDEC1422-FC58-41E1-A2FF-D1AB097F1BF1.png\"><img src=\"/user_uploads/22008/YNwv8G5IQOGz-SF-yf_0P_cT/DDEC1422-FC58-41E1-A2FF-D1AB097F1BF1.png\"></a></div>",
        "id": 290621910,
        "sender_full_name": "Tommy Graves",
        "timestamp": 1658594009
    },
    {
        "content": "<p>It isn't a good benchmark, but I think it does point out the truth of readability. I switched some code over to the last version recently because I find it way less noisy and easier to follow.</p>\n<p>Of course if some of them were using different functions instead of <code>Result.try</code> and that was an important detail, it may not be the best for readability anymore.</p>",
        "id": 290622967,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658595388
    }
]