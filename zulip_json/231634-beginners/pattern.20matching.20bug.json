[
    {
        "content": "<p>Shouldn't this work?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">scanFinal</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Integer</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Float</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Ident</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Slash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Comment</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Not</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Eq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Lt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Gt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Start</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nb\">Number</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Ident</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Slash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Comment</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Not</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Eq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Lt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Gt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Start</span><span class=\"p\">]</span>\n<span class=\"nv\">scanFinal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">state</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Start</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Newline</span>\n<span class=\"w\">        </span><span class=\"nx\">Integer</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Float</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Number</span><span class=\"w\"> </span><span class=\"nx\">n</span>\n<span class=\"w\">        </span><span class=\"nx\">Ident</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ident</span><span class=\"w\"> </span><span class=\"nx\">a</span>\n<span class=\"w\">        </span><span class=\"nx\">Slash</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Slash</span>\n<span class=\"w\">        </span><span class=\"nx\">Comment</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Comment</span><span class=\"w\"> </span><span class=\"nx\">c</span>\n<span class=\"w\">        </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"nx\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"nx\">s</span>\n<span class=\"w\">        </span><span class=\"nx\">Not</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Not</span>\n<span class=\"w\">        </span><span class=\"nx\">Eq</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Eq</span>\n<span class=\"w\">        </span><span class=\"nx\">Lt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Lt</span>\n<span class=\"w\">        </span><span class=\"nx\">other</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">other</span>\n</code></pre></div>\n<p>If I simply change <code>other -&gt; other</code> to <code>Gt -&gt; Gt</code> then it works. The error I'm getting is:</p>\n<div class=\"codehilite\"><pre><span></span><code>This other value is a:\n\n    [Comment Str, Eq, Float Str, Gt, Ident Str, Integer Str, Lt, Not,\n    Slash, Start, String Str]\n\nBut the type annotation on scanFinal says it should be:\n\n    [Comment Str, Eq, Ident Str, Lt, Newline, Not, Number Str, Slash,\n    String Str]\n</code></pre></div>",
        "id": 341519724,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678726829
    },
    {
        "content": "<p>if you look at the types, then no, it should not work</p>",
        "id": 341520258,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678726952
    },
    {
        "content": "<p>Can you help me understand then? It seems like changing <code>other -&gt; other</code> to <code>Gt -&gt; Gt</code> should be equivalent here, no?</p>",
        "id": 341520430,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678726998
    },
    {
        "content": "<p>because of how tag unions are represented, it is very likely that the memory representation changes by this function</p>",
        "id": 341520451,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678727003
    },
    {
        "content": "<p>I'm just trying to avoid having to have all the ones that are the same on the left and right side of the <code>-&gt;</code> and it seems like <code>other -&gt; other</code> should cover all those</p>",
        "id": 341520805,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678727087
    },
    {
        "content": "<p>intuitively, yes. </p>\n<p>But the <code>Gt</code> tag can look very differently on either side of the arrow, in practice. Consider</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : [ Gt, Lit Str ] -&gt; [ Gt, Lit U8 ]\nfoo = \\input -&gt;\n    when input is\n        Lit str -&gt; Lit (Num.intCast (Str.countBytes str))\n        Gt -&gt; Gt\n</code></pre></div>\n\n<p>The <code>[ Gt, Lit Str ]</code> value requires <code>24 + 1 = 25</code> bytes of storage (which is rounded up to 32 because of alignment. In contrast <code>[ Gt, Lit U8 ]</code> requires just 2 bytes of storage. That means the value from the left-hand side cannot just be copied to be used on the right-hand side.</p>",
        "id": 341521466,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678727273
    },
    {
        "content": "<p>That's only if <code>other -&gt; other</code> means to blindly copy the value from left side to right side. It seems like <code>other</code> should be equivalent to \"whatever tags in the union we haven't matched yet\". I can see how this wouldn't work if the input was an open tag union, but for a closed tag union it seems like this could be made to work</p>",
        "id": 341522683,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678727619
    },
    {
        "content": "<p>It definitely is an interesting question which should be the default. currently <code>other -&gt; other</code> links the input and output type. Which make sense given it is an identity function. I think we need to add some sort of helper to allow explicit conversion in cases like this.</p>",
        "id": 341535802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678730077
    },
    {
        "content": "<p>If we make it implicit, it means that we could have tons of data movement and copying for something that should be free. Would be a very odd performance bug to nail down for end users.</p>",
        "id": 341536041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678730158
    },
    {
        "content": "<p>I think zig's <code>inline switch</code> does something like this</p>",
        "id": 341536197,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678730205
    },
    {
        "content": "<p>where you can do <code>x -&gt; x</code> but really what it does is inline all of the actual things that <code>x</code> could be</p>",
        "id": 341536298,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678730236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> has an issue (I can't find it at the moment) discussing how we could make <code>other -&gt; other</code> Just Work - and yeah it would have an unavoidable runtime performance cost because it would have to create a new one from scratch based on the old one</p>",
        "id": 341538507,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678730821
    },
    {
        "content": "<p>I think that would be a reasonable default</p>",
        "id": 341538565,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678730836
    },
    {
        "content": "<p>it seems like it would be an extremely extremely rare performance case where not only was changing this significant, but there was actually room for performance improvement in practice!</p>",
        "id": 341538825,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678730895
    },
    {
        "content": "<p>like the number of scenarios where you write <code>other -&gt; other</code> and there's a significantly more performant way to have your code do what it needs to do seems extremely small <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 341538938,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678730922
    },
    {
        "content": "<p>and if you can't meaningfully improve it anyway, it may not be all that beneficial knowing what it's doing from a perf perspective to begin with</p>",
        "id": 341539051,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678730965
    },
    {
        "content": "<p>Tags live on the stack by default, right?</p>",
        "id": 341539875,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678731200
    },
    {
        "content": "<p>yeah</p>",
        "id": 341540088,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678731260
    },
    {
        "content": "<p>i don’t know if i have an issue for it, but i do have a blog post about how to do this and the trade offs: <a href=\"https://ayazhafiz.com/articles/22/simple-flow-refinement-of-anonymous-sum-types\">https://ayazhafiz.com/articles/22/simple-flow-refinement-of-anonymous-sum-types</a></p>",
        "id": 341541355,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1678731653
    }
]