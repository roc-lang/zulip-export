[
    {
        "content": "<p>Sorry, I need some assistance again. The compiler won't recognise the List U8 being piped into List.walk in the below code. I'm sensing it may be an indentation issue, but I've tried different indentation arrangements and still can't make it compile.</p>\n<div class=\"codehilite\"><pre><span></span><code>module [count_words]\n\ncount_words : Str -&gt; Dict Str U64\ncount_words = |sentence|\n    sentence\n    |&gt; Str.with_ascii_lowercased\n    |&gt; Str.to_utf8\n    |&gt; List.append(&#39; &#39;)\n    |&gt; List.walk(\n        (Dict.empty({}), []),\n        |(words, buffer), char|\n            if is_separator(char) and to_word_no_quotes(buffer) != &quot;&quot; then\n                (Dict.update(words, to_word_no_quotes(buffer), increment), [])\n            else if is_separator(char) then\n                (words, buffer)\n            else\n                (words, List.append(buffer, char)),\n    ).0\n\nis_separator : U8 -&gt; Bool\nis_separator = |char|\n    ((char &gt;= &#39;a&#39; and char &lt;= &#39;z&#39;) or (char &gt;= &#39;0&#39; and char &lt;= &#39;9&#39;) or char == &#39;\\&#39;&#39;)\n    |&gt; Bool.not\n\nincrement : Result U64 [Missing] -&gt; Result U64 [Missing]\nincrement = |current_count|\n    when current_count is\n        Ok count -&gt; Ok (count + 1)\n        Err Missing -&gt; Ok 1\n\nto_word_no_quotes : List U8 -&gt; Str\nto_word_no_quotes = |chars|\n    when chars is\n        [first, .. as word, last] if first == &#39;\\&#39;&#39; and last == &#39;\\&#39;&#39; -&gt; Str.from_utf8_lossy(word)\n        [first, .. as word] if first == &#39;\\&#39;&#39; -&gt; Str.from_utf8_lossy(word)\n        [.. as word, last] if last == &#39;\\&#39;&#39; -&gt; Str.from_utf8_lossy(word)\n        word -&gt; Str.from_utf8_lossy(word)\n</code></pre></div>\n<p>If however, I declare the List U8 as a variable and pass it as an argument to List.walk then there is no issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>all_chars =\n        sentence\n        |&gt; Str.with_ascii_lowercased\n        |&gt; Str.to_utf8\n        |&gt; List.append(&#39; &#39;)\n\n    List.walk(\n        all_chars,\n        (Dict.empty({}), []),\n        |(words, buffer), char|\n            if is_separator(char) and to_word_no_quotes(buffer) != &quot;&quot; then\n                (Dict.update(words, to_word_no_quotes(buffer), increment), [])\n            else if is_separator(char) then\n                (words, buffer)\n            else\n                (words, List.append(buffer, char)),\n    ).0\n</code></pre></div>",
        "id": 516990236,
        "sender_full_name": "Tom Hill",
        "timestamp": 1746743088
    },
    {
        "content": "<p>I believe the problem is the <code>.0</code> after the <code>List.walk</code>. Roc expects everything in a pipeline to be either a function or a function call missing its first argument.</p>\n<p><code>... |&gt; List.walk(x, y)</code> is a function call missing its first argument<br>\n<code>... |&gt; |x| x + 1</code> is a function<br>\n<code>... |&gt; List.walk(x, y).0</code> is not (just) a function call, so we need to evaluate it to get the function to pipe into</p>\n<p>You can fix it by moving the <code>.0</code> to another pipe</p>\n<div class=\"codehilite\"><pre><span></span><code>... |&gt; List.walk(x, y) |&gt; .0\n</code></pre></div>",
        "id": 517002317,
        "sender_full_name": "Hannes",
        "timestamp": 1746750945
    },
    {
        "content": "<p>thank you</p>",
        "id": 517137205,
        "sender_full_name": "Tom Hill",
        "timestamp": 1746804380
    }
]