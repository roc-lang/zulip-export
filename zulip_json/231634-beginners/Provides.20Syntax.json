[
    {
        "content": "<p>I am trying to understand what is this doing: </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span> <span class=\"s\">\"main\"</span> <span class=\"n\">imports</span> <span class=\"p\">[</span> <span class=\"kt\">Effect</span> <span class=\"p\">]</span> <span class=\"n\">provides</span> <span class=\"p\">[</span> <span class=\"n\">rocMain</span> <span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"s\">\"./platform\"</span>\n</code></pre></div>\n<p>I mean this <code>provides ...  to .....</code> syntax, not sure what changes in platfrom</p>",
        "id": 236010424,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1619301031
    },
    {
        "content": "<p>the compiler needs to know what the main function is, and what the platform is that you want to compile</p>",
        "id": 236010483,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1619301107
    },
    {
        "content": "<p>Ah, so no <code>main</code> as default?</p>",
        "id": 236010554,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1619301150
    },
    {
        "content": "<p>Oh interesting, and its a list? So could it be <code>[ mainA, mainB ]</code>?</p>",
        "id": 236010620,
        "sender_full_name": "Chad Stearns",
        "timestamp": 1619301224
    },
    {
        "content": "<p>right. This might be something to reconsider now. Originally, the idea was that you could hand multiple things to the platform (e.g. provide a <code>update</code>, a <code>view</code>, ect as separate functions)</p>",
        "id": 236010623,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1619301229
    },
    {
        "content": "<p>but we've confirmed that bundling all those functions in a record has no overhead; LLVM completely optimizes the struct/record away</p>",
        "id": 236010693,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1619301278
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"err\">‚ùØ</span> <span class=\"n\">cat</span> <span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">balance</span><span class=\"o\">/</span><span class=\"kt\">Main</span><span class=\"o\">.</span><span class=\"n\">roc</span>\n<span class=\"nf\">app</span> <span class=\"s\">\"main\"</span> <span class=\"n\">imports</span> <span class=\"p\">[</span> <span class=\"kt\">Effect</span> <span class=\"p\">]</span> <span class=\"n\">provides</span> <span class=\"p\">[</span> <span class=\"n\">rocMain</span><span class=\"p\">,</span> <span class=\"n\">roKMain</span> <span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"s\">\"./platform\"</span>\n\n\n<span class=\"nf\">rocMain</span> <span class=\"kt\">:</span> <span class=\"kt\">Effect</span><span class=\"o\">.</span><span class=\"kt\">Effect</span> <span class=\"p\">{}</span> <span class=\"n\">as</span> <span class=\"kt\">Fx</span>\n<span class=\"nf\">rocMain</span> <span class=\"ow\">=</span> <span class=\"o\">..</span>\n\n<span class=\"nf\">roKMain</span> <span class=\"kt\">:</span> <span class=\"kt\">Effect</span><span class=\"o\">.</span><span class=\"kt\">Effect</span> <span class=\"p\">{}</span> <span class=\"n\">as</span> <span class=\"kt\">Fx</span>\n<span class=\"nf\">roKMain</span> <span class=\"ow\">=</span> <span class=\"o\">..</span>\n</code></pre></div>\n<p>THis is invalid syntax right?</p>\n<p>There can be only one?! <br>\n:D</p>",
        "id": 236010694,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1619301281
    },
    {
        "content": "<p>well no, a platform could decide to allow this</p>",
        "id": 236010719,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1619301305
    },
    {
        "content": "<p>e.g. <code>provides [ serverMain, clientMain ]</code></p>",
        "id": 236010741,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1619301326
    },
    {
        "content": "<p>So, in theory, there could be a Roc mono repo, with the frontend and backend code base, like:</p>\n<div class=\"codehilite\"><pre><span></span><code>provides [ view, update, dbConnection, http ]\n</code></pre></div>\n<p>?</p>",
        "id": 236010746,
        "sender_full_name": "Chad Stearns",
        "timestamp": 1619301334
    },
    {
        "content": "<p>that should be a record then?</p>",
        "id": 236010771,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1619301353
    },
    {
        "content": "<p>yea I think that is generally preferable</p>",
        "id": 236010812,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1619301368
    },
    {
        "content": "<p>because then you have better docs for what the platform needs</p>",
        "id": 236010845,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1619301388
    },
    {
        "content": "<p><code>provides { view, update: mainUpdateFix2 } to \"xy\"</code></p>",
        "id": 236010847,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1619301393
    },
    {
        "content": "<p>but that is would be then equal to defaulting to only one <code>main</code>, where platform provides a spec what kind of data type it should be?</p>",
        "id": 236010996,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1619301525
    }
]