[
    {
        "content": "<p>Hi,<br>\nI am trying to implement a function that takes a number (eg 12345), and creates a list of [1,2,3,4,5]<br>\nI am not finding the tool for the job and hoping this is the right place to ask.</p>\n<p>In Perl for example I could do <code>the_list = split \"\", \"12345\"</code> (assuming I treat the number as a string)<br>\nReading the roc docs, split \"\" \"12345\" would not work.</p>\n<p>If someone could point me in the direction of the right idea I'd appreciate it.</p>",
        "id": 428409486,
        "sender_full_name": "Lance Wicks",
        "timestamp": 1711141570
    },
    {
        "content": "<p>If you want to split it into characters, you could do something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"mi\">12345</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">49</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">51</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">53</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 428411685,
        "sender_full_name": "Hristo",
        "timestamp": 1711142758
    },
    {
        "content": "<p>Surprisingly difficult. Perhaps there is a better way?</p>\n<div class=\"codehilite\"><pre><span></span><code>separate = \\str -&gt;\n    Str.walkUtf8\n        str\n        []\n        (\\state, element -&gt;\n            [element]\n            |&gt; Str.fromUtf8\n            |&gt; Result.withDefault &quot;&quot;\n            |&gt; Str.toU64\n            |&gt; (\\maybeNum -&gt; List.appendIfOk state maybeNum)\n        )\n\nexpect\n    separate &quot;123456&quot; == [1, 2, 3, 4, 5, 6]\n</code></pre></div>",
        "id": 428412153,
        "sender_full_name": "Jonas Schell",
        "timestamp": 1711142981
    },
    {
        "content": "<p>Thanks... trying both now.</p>",
        "id": 428412742,
        "sender_full_name": "Lance Wicks",
        "timestamp": 1711143290
    },
    {
        "content": "<p>Yes, just as <span class=\"user-mention\" data-user-id=\"452323\">@Jonas Schell</span> has pointed out, if you want for your output to be unsigned integers, you'd have to go even a bit further, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"mi\">12345</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">chunks</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Btw, my understanding has been that the input is supposed to be an integer itself.</p>",
        "id": 428412826,
        "sender_full_name": "Hristo",
        "timestamp": 1711143350
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/unicode\">https://github.com/roc-lang/unicode</a> will make this sort of thing easier, but it's still WIP at the moment <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 428414436,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711144251
    },
    {
        "content": "<p>The <code>Grapheme.split</code> works well for this use case. Though we dont have a release you can use easily from URL</p>",
        "id": 428415428,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711144809
    },
    {
        "content": "<p>For a number specfically, I would do one of these two:</p>\n<p>Input already a string:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"s\">\"12345\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span>\n</code></pre></div>\n<p>If you need validation, use wrapping subtraction and check all outputs are less than 10.</p>\n<p>Input is an actual int:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"nv\">list</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">list</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">rem</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">//</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nv\">num</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span>\n</code></pre></div>",
        "id": 428421940,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711148937
    },
    {
        "content": "<p>Or you could go with an adventurous solution like this one <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">toDigits</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">div</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">divTrunc</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"nv\">mod</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">rem</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">compare</span><span class=\"w\"> </span><span class=\"nv\">div</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">LT</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">mod</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">toDigits</span><span class=\"w\"> </span><span class=\"nv\">div</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">mod</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">toDigits</span><span class=\"w\"> </span><span class=\"mi\">1234567890</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 429108681,
        "sender_full_name": "Hristo",
        "timestamp": 1711222633
    },
    {
        "content": "<p>Personally I wouldn't use less than due to negative numbers, but none of these methods deal with the sign if it has one</p>",
        "id": 429112136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711225211
    },
    {
        "content": "<p>Yeah, that's a good point!</p>\n<p>My implicit assumption has been that the input would only be from the set of natural numbers, as the sign cannot be meaningfully interpreted as a digit.</p>\n<p>Btw, I've just realised that my solution looks a lot like yours, Brendan <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> I thought I was being original, as it was something I came up with whilst listening to a podcast earlier today, as they were discussing something remotely related (I did read yours yesterday but I completely forgot about it <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> I should've properly re-read the thread before posting <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>).</p>",
        "id": 429113257,
        "sender_full_name": "Hristo",
        "timestamp": 1711226070
    },
    {
        "content": "<p>I mean yours trades off stack space to avoid the reverse call. Both have merits</p>",
        "id": 429116894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711228871
    },
    {
        "content": "<p>I think in your solution, <code>append</code> could be replaced with <code>prepend</code> to avoid the <code>reverse</code> call. I've just learned about <code>prepend</code> by checking the standard library (I was looking for <code>insert</code>/<code>insertAt</code> which aren't there; I think I was getting confused, in terms of available function names, with <code>Dict.insert</code>).</p>",
        "id": 429117481,
        "sender_full_name": "Hristo",
        "timestamp": 1711229319
    },
    {
        "content": "<p>The one with reverse seems better, because Roc uses array-backed lists, not linked-lists. Appending to the end is 1 operation, but prepending requires shifting the rest of the array 1 place to the right. It's probably implemented as a single operation, moving a block of memory in 1 swoop and not 1 by 1 coppying the elements, but it is still probably better performance wise. Then again, your input size is so small, it doesn't matter. But a good thing to remember when dealing with bigger datasets.</p>",
        "id": 429118196,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1711229819
    },
    {
        "content": "<p>Was about to say the same thing. Append and reverse should be faster</p>",
        "id": 429118240,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711229857
    },
    {
        "content": "<p>Right, thank you both - understood and much appreciated! I admit I wasn't familiar with the internals to an extent that would allow me to reason properly about efficiency.<br>\nI confirm that the array vs linked-list trade-offs do make perfect sense, yes!</p>",
        "id": 429118485,
        "sender_full_name": "Hristo",
        "timestamp": 1711230055
    },
    {
        "content": "<p>I've learnt these things thanks to Roc being performance-aware as well. Pretty cool that a high lvl language (and the community) can teach you these things in my opinion.</p>",
        "id": 429118656,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1711230217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703166\">Lance Wicks</span> has marked this topic as resolved.</p>",
        "id": 430180148,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711670255
    }
]