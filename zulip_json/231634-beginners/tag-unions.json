[
    {
        "content": "<p>I just rewrote the whole <code>roc-for-elm-programmer.md</code> section on tags based on some design ideas we've been discussing - love to hear any feedback anyone has about it!</p>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/7ce0e4418225602d5b4123635a757dc46089868c/roc-for-elm-programmers.md#custom-types\">https://github.com/rtfeldman/roc/blob/7ce0e4418225602d5b4123635a757dc46089868c/roc-for-elm-programmers.md#custom-types</a></p>",
        "id": 214657472,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1603768576
    },
    {
        "content": "<p>Ooh, <code>&lt; Type &gt;</code> is a new notation?</p>",
        "id": 214670397,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1603786421
    },
    {
        "content": "<p>Ok, coffee made me too reactive, just saw other sentence. :) <br>\n<code>By the way, inside a tag union annotation, the &lt; and &gt; angle brackets around each tag are syntactically optional because they don't add any information.</code></p>\n<p>Is there a reason to keep <code>&lt; &gt;</code> notation if above holds true?</p>",
        "id": 214670608,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1603786592
    },
    {
        "content": "<p>As always maybe there is a pedagogical use of it to not mix lists and tag unions</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; y = Foo [ 1.1 ] &quot;hi&quot;\nFoo [ 1.1 ] &quot;hi&quot; : &lt;Foo (List Float) Str&gt;\n\n&gt; z = Foo &quot;hi&quot; True\nFoo &quot;hi&quot; True : &lt;Foo Str &lt;True&gt;&gt;\n</code></pre></div>",
        "id": 214670743,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1603786694
    },
    {
        "content": "<blockquote>\n<p>Is there a reason to keep <code>&lt;</code> <code>&gt;</code> notation if above holds true?</p>\n</blockquote>\n<p>yes! There are two reasons:</p>\n<ol>\n<li>Hopefully making it easier to learn how tags and tag unions work. (Maybe this doesn't help though - I'm not sure!) An alternative design would be to have the type of a <code>Foo</code> value on its own be <code>[ Foo ]*</code> like it is today (whereas in this draft it'd be <code>&lt;Foo&gt;</code> instead).</li>\n<li>It's arguably nicer in some type signatures, for example:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>List.first : List a -&gt; Result a &lt;ListWasEmpty&gt;\n</code></pre></div>\n\n\n<p>instead of</p>\n<div class=\"codehilite\"><pre><span></span><code>List.first : List a -&gt; Result a [ ListWasEmpty ]*\n</code></pre></div>",
        "id": 214775787,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1603839911
    },
    {
        "content": "<p>but I'm honestly not sure overall if this is an improvement, or if we should stick to <code>[ ]*</code> over <code>&lt; &gt;</code></p>",
        "id": 214775887,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1603839971
    },
    {
        "content": "<p>My only issue with <code>&lt; &gt;</code> is that you are forced to deal with both <code>[ Bar, Baz ]*</code> and <code>&lt;Baz&gt;</code> vs <code>[ Bar, Baz ]*</code> and <code>[Baz]*</code></p>",
        "id": 214778452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1603841917
    },
    {
        "content": "<p>So like you have to learn 2 pieces of syntax instead of just one.</p>",
        "id": 214778595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1603842042
    },
    {
        "content": "<p>fair point!</p>",
        "id": 214778631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1603842079
    },
    {
        "content": "<p>would it be weird if values of <code>[ Foo ]*</code> could be passed to things that wanted functions? e.g. if <code>[ Foo ]*</code> could be passed to a function that wanted <code>[ Foo ]*</code> or <code>a -&gt; [ Foo a ]*</code> or <code>a, b -&gt; [ Foo a b ]*</code> or <code>a, b, c -&gt; [ Foo a b c ]*</code> etc?</p>",
        "id": 214779122,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1603842474
    },
    {
        "content": "<p>(I thought it might be less weird with the <code>&lt;Foo&gt;</code> syntax, but maybe that's not helping?)</p>",
        "id": 214779184,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1603842498
    },
    {
        "content": "<p>Ah, i see. Hmmm. That's a really valid point for separate syntax.</p>",
        "id": 214780950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1603843741
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I wonder if it might be more straightforward if the rule were \"<code>&lt;Foo&gt;</code> is syntax sugar for <code>[ Foo ]*</code>\"</p>",
        "id": 214789820,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1603851832
    },
    {
        "content": "<p>I kind of like <code>[ Foo ]*</code> over <code>&lt;Foo&gt;</code> too. Not because its more or less confusing, but because I like there being just one way to convey that (they would be co-existing alternatives? If <code>&lt;Foo&gt;</code> was a thing, then <code>[ Foo ]*</code> would still be valid right?</p>",
        "id": 214889597,
        "sender_full_name": "Chad Stearns",
        "timestamp": 1603915102
    },
    {
        "content": "<p>What would be the natural way of reading <code>[ Foo ]*</code>? \"At least <code>Foo</code>\"?  What about <code>&lt;Foo&gt;</code>? If its the same thing, I guess it should read the same way in natural language, but it kind of feels different to me. Like its meant to convey that it is <em>just</em> <code>Foo</code> and <em>nothing</em> else.</p>",
        "id": 214890036,
        "sender_full_name": "Chad Stearns",
        "timestamp": 1603915283
    },
    {
        "content": "<p>Not sure! Just sharing my impressions. I guess the wild card ultimately means \"and nothing else\" in the same way that <code>List *</code> is necessarily empty, but can be joined with something non-empty, so <code>[ Foo ]*</code> is \"a group containing <code>Foo</code> and also nothing else\"</p>",
        "id": 214890342,
        "sender_full_name": "Chad Stearns",
        "timestamp": 1603915390
    },
    {
        "content": "<p>Maybe, if we kick out parenthesis from tag unions?</p>\n<p><code>Song : \n  Fun , \n  Sad Int,\n  Sexy (Result Str (Male, Female, Alien,|*)), \n  |*\n</code> </p>\n<p>and we can even have functions <code>xx:  Foo |* -&gt; Foo, Bar </code> or <code>extendFoo : Foo -&gt; Foo, Bar, Faux |* </code></p>",
        "id": 215096963,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1604066079
    },
    {
        "content": "<p>Where <code>|*</code> would serve as <code>]*</code> as currently is it can easy only be just <code>*</code></p>",
        "id": 215097025,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1604066117
    }
]