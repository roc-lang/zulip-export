[
    {
        "content": "<p>I'm trying to figure out how to use roc as a plugin language in a game engine or similar app. Consider, I have a main app body in rust, and it is currently scripted with Python via PyO3. I'm not very happy with performance of the python scripts, so I am considering enabling scripting via roc.</p>\n<p>I am currently at a loss, however, as to how exactly this is supposed to be done. All examples assume that main is in roc, not in any other language. Or maybe I am unable to find them. Either way, some help on getting this going would be nice.  Rewriting the app to have roc doing main does not sound compelling as it would involve a massive amount of changes, and I still want to keep legacy python scripting support as well.</p>\n<p>For reference, an example of what I'm looking to achieve is here (in rust/python) <a href=\"https://github.com/PyO3/pyo3/tree/main/examples/plugin\">https://github.com/PyO3/pyo3/tree/main/examples/plugin</a> One very important consideration is that the plugin needs to be able to create opaque types that are provided by the host application (so as to have the ability to use data structures defined by the host app).</p>",
        "id": 408137148,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702628309
    },
    {
        "content": "<p>I think someone else is better qualified to answer this, but I can add one piece of the puzzle which is that none of the examples actually have the \"true\" main function in Roc.</p>\n<p>A Roc application compiles down to something like a C library which has no entrypoint, that compiled library then gets linked with the platform which is the one in charge of calling the Roc functions. It just happens that example platforms like basic-cli call a function called \"main\" immediately. For you, the platform would be your existing Rust codebase and you could choose to call any Roc function at any time.</p>",
        "id": 408159554,
        "sender_full_name": "Hannes",
        "timestamp": 1702636536
    },
    {
        "content": "<p>Like I said, someone else will expand/correct my answer <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> hopefully that's a good start though</p>",
        "id": 408159865,
        "sender_full_name": "Hannes",
        "timestamp": 1702636622
    },
    {
        "content": "<p>I would second what <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> said. Also we have a python embedding example that may be helpful <a href=\"https://github.com/roc-lang/roc/tree/main/examples/python-interop\">https://github.com/roc-lang/roc/tree/main/examples/python-interop</a></p>",
        "id": 408160525,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702636855
    },
    {
        "content": "<p>Thanks, I have been suspecting that it should not be a huge leap. However, the key stumbling block in this case is that the way the whole thing is linked  together. Particularly, I am not sure how to make the \"engine\" part link against the roc library at runtime, rather than at build time. <br>\nPS the python example is helpful, yes, but it does not expose any python objects to roc code...</p>",
        "id": 408171329,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702641047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408171329\">said</a>:</p>\n<blockquote>\n<p>Thanks, I have been suspecting that it should not be a huge leap. However, the key stumbling block in this case is that the way the whole thing is linked  together. Particularly, I am not sure how to make the \"engine\" part link against the roc library at runtime, rather than at build time. </p>\n</blockquote>\n<p>just to double-check, this means you want the .roc file to compile to a shared (dynamic) library, right? Rather than one big executable?</p>",
        "id": 408171977,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702641309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408137148\">said</a>:</p>\n<blockquote>\n<p>One very important consideration is that the plugin needs to be able to create opaque types that are provided by the host application (so as to have the ability to use data structures defined by the host app).</p>\n</blockquote>\n<p>I'm curious about the opaque part here - what would be an example of how this would be used? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 408172146,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702641371
    },
    {
        "content": "<p>as an aside, I'm excited to talk about this because this is always one of the use cases I've had in mind for Roc, and as far as I know you're the first person to actually take steps to try it out! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 408173053,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702641711
    },
    {
        "content": "<p>Yes, the idea is to compile to .so or equivalent format. Let me give a concrete example. A game engine consumes a certain \"scenario\" for every level/map to be played. The scenario contains assets such as 3d models, but also scripts needed to drive logic such as AI for characters in the game. For a commercial game with no modding community all this logic can be built into a .so. However, in order to support modding, it would be nicer to have the scenario scripts that are written in roc, so they can be \"safe\" in a sense that they will not destroy your files when you load a map for your game. </p>\n<p>Hot reloading is also a highly relevant feature, as it enables scenario developer to iterate quickly without reloading the entire engine.</p>\n<p>Currently people use lua or python for this sort of tasks, but lua is very obnoxious to use, python is not sandboxed, and both are fairly slow compared to native code.</p>",
        "id": 408173365,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702641791
    },
    {
        "content": "<p>ok cool! So what would be some examples of data that would be sent from the host to the roc app?</p>",
        "id": 408176975,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702643158
    },
    {
        "content": "<p>The example I have seen is that the host app would want to pass into roc a readonly view of the world state (or slices of world state), which would include positions and types of entities in the world. On top of that, the host app would need to provide an api to construct new entities in the game world. Naturally, the entities can be expected to include reaources such as raw pointers into various parts of the world state, so they should be partially opaque to the plugin. Same is true if the host defines some sort of custom datastructure that the plugin may be able to use, one would not want to serialize it to make it visible to roc. Instead one would nearly always prefer to expose some api to mutate it via effects.</p>",
        "id": 408178082,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702643607
    },
    {
        "content": "<p>I think the best way to get good intuition about it would be to check what bevy game engine is doing. In an ideal world, one would have a bevy system that calls a roc plugin that is loaded together with game scenario. Naturally, when you load another scenario, a new implementation for the same system might get loaded.</p>",
        "id": 408178283,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702643696
    },
    {
        "content": "<p>ah! Are you using bevy specifically for your game? Or a different engine?</p>",
        "id": 408186622,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702646818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  Interesting. Actually I originally approached Roc with an intent of embedding it in Bevy. Ideally I'd write Systems (as in Entity-Component-System) in Roc and a lot of things I coded were basically game state reducers that didn't really need to be mutating and mutation could be hidden behind the embedding glue code. Also I get easily distracted waiting for Rust to compile, with is unbearable after working with react/vite ecosystem and getting used to snappy hot reloading.<br>\nBut now I'm leaning towards writing a pure Roc-driven backend with a Bevy frontend. Bevy heavily relies on compile-time magic for dependency injection of world queries and embedding Roc would mean I have to abandon all of that goodness and best case write a Roc-based DI.<br>\nIf you know someone exploring this already (as in a game engine using Roc in any capacity), I'd be interested to learn how they do it.</p>",
        "id": 408203841,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1702652910
    },
    {
        "content": "<p>Probably a lot of the data from the host would be exposed as a <code>Box {}</code> (essentially an opaque pointer). Then Roc would be required to send that back to the host to make calls on it. So roc would be glue code calling a pronanly rather large API exposed by the host.</p>",
        "id": 408212553,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702655942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408186622\">said</a>:</p>\n<blockquote>\n<p>ah! Are you using bevy specifically for your game? Or a different engine?</p>\n</blockquote>\n<p>Bevy is just an example, in my current usecase I am not relying on bevy (as it is not really a game, just very similar). However, if we can get roc adopted by bevy community, it would drive adoption pretty hard =)</p>",
        "id": 408367804,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702752922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408203841\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>  Interesting. Actually I originally approached Roc with an intent of embedding it in Bevy. Ideally I'd write Systems (as in Entity-Component-System) in Roc and a lot of things I coded were basically game state reducers that didn't really need to be mutating and mutation could be hidden behind the embedding glue code. Also I get easily distracted waiting for Rust to compile, with is unbearable after working with react/vite ecosystem and getting used to snappy hot reloading.<br>\nBut now I'm leaning towards writing a pure Roc-driven backend with a Bevy frontend. Bevy heavily relies on compile-time magic for dependency injection of world queries and embedding Roc would mean I have to abandon all of that goodness and best case write a Roc-based DI.<br>\nIf you know someone exploring this already (as in a game engine using Roc in any capacity), I'd be interested to learn how they do it.</p>\n</blockquote>\n<p>Did you get to a point where some of that works and can be a starting point to make decent examples? I'd be happy to make some that would be properly polished, but I just do not want to bash my head against the wall of figuring out the overall architecture of how this stuff is even supposed to function without running against the grain of roc.</p>",
        "id": 408367946,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702753046
    },
    {
        "content": "<p>I have an experiment using a Zig platform which does graphics using WebGPU. Its over at <a href=\"https://github.com/lukewilliamboswell/roc-graphics-mach/tree/main\">lukewilliamboswell/roc-graphics-mach</a>. </p>\n<p>I haven't updated it for a couple of months, but it shouldn't be too hard to revive if you would like me to. Its not suitable as a platform to share with most people right now, becuase both Zig and the <a href=\"https://github.com/hexops/mach-core\">hexops/mach-core</a> library are changing frequently enough, so you need to be able to track the zig nightly and if you aren't comfortable manually upgrading zig package dependencies then it's tricky. (I'm still terrible at this, just silly enough to try and stumble through it blind anyway)</p>\n<p>At the time I was using <code>mainForHost : List U8 -&gt; List U8</code> so passing list of bytes between Roc and Zig to do Model View Update, which worked well enough for a simple proof of concept. </p>\n<p>Since then I've made progress on how to write an Effect manually for Zig (without Roc glue) and we have a working example over at <a href=\"https://github.com/ostcar/roc-wasi-platform/blob/a5a15e4dd4d682dc93bcde32ec4d903bf83e8fc6/src/host.zig#L85\">ostcar/roc-wasi-platform</a>. This is how we give Roc the ability to interact with the outside world with more than just passing something into main.</p>\n<p>Here is a demo of what that experiment looked like <a href=\"/user_uploads/22008/m-biPM8dU7HNNR15_EyUMc4R/roc-graphics-2.gif\">roc-graphics-2.gif</a> moving a coloured bird around using the keyboard.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/m-biPM8dU7HNNR15_EyUMc4R/roc-graphics-2.gif\" title=\"roc-graphics-2.gif\"><img src=\"/user_uploads/22008/m-biPM8dU7HNNR15_EyUMc4R/roc-graphics-2.gif\"></a></div><p>I used TinyVG to interface because it looked simple with a zig implementation, and I was focussed on how to wire everything up. </p>\n<p>I think there is a lot of potential here to do more useful things graphics wise.</p>\n<p>One of the ideas I was thinking about researching further was if it is possible or ergonomic to use Roc <code>Task</code>s to set up and drive the WebGPU shader pipelines. The idea is to basically wrap Zig's webgpu, and give Roc the ability to pass through shader logic and set up buffers for processing. This would be a more generic interface, provide higher performance, and standardised low-level primitives for roc package authors to build upon.</p>",
        "id": 408376197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702761443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"674610\">@Alexander Pyattaev</span> if you have anything you would like assistance with, I'm happy to help out where I can. I could maybe help wire something minimal up for you?</p>",
        "id": 408380117,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702765708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408380117\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> if you have anything you would like assistance with, I'm happy to help out where I can. I could maybe help wire something minimal up for you?</p>\n</blockquote>\n<p>That would be absolutely amazing! I am totally stuck trying to sort out how the linking between rust binary and roc library module should work when main is not in roc, and critically which tools would i even want to use to do said linking. I think once I comprehend how the linking should work out, I should be able to make a compelling bevy example for the community. </p>\n<p>I've set up a separate repo with more specific description and some code i used to investigate this on github, can you share your ideas if you find the time <a href=\"https://github.com/alexpyattaev/roc-plugin-example\">https://github.com/alexpyattaev/roc-plugin-example</a>.  The intent is to merge it into roc examples once it takes shape, obviously.</p>",
        "id": 408414635,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1702794875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408414635\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408380117\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> if you have anything you would like assistance with, I'm happy to help out where I can. I could maybe help wire something minimal up for you?</p>\n</blockquote>\n<p>That would be absolutely amazing! I am totally stuck trying to sort out how the linking between rust binary and roc library module should work when main is not in roc, and critically which tools would i even want to use to do said linking. I think once I comprehend how the linking should work out, I should be able to make a compelling bevy example for the community. </p>\n<p>I've set up a separate repo with more specific description and some code i used to investigate this on github, can you share your ideas if you find the time <a href=\"https://github.com/alexpyattaev/roc-plugin-example\">https://github.com/alexpyattaev/roc-plugin-example</a>.  The intent is to merge it into roc examples once it takes shape, obviously.</p>\n</blockquote>\n<p>So funny Alexander that you mentioned TA Spring, for which this weekend I was looking into using ChatGPT to generate a new widget in Lua.</p>",
        "id": 408950795,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1702997827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  <span class=\"user-mention\" data-user-id=\"674610\">@Alexander Pyattaev</span> I could explain/demo (voice chat) the basics of Bevy architecture and how I used it in my pet project, if you want. Maybe it could give you a better understanding of the depth of integration needed on Roc's behalf.<br>\nThere is also an experimental integration of Typescript in Bevy (I believe the person actually made it work, but there hasn't been any recent updates) <a href=\"https://github.com/jakobhellermann/bevy_mod_js_scripting\">https://github.com/jakobhellermann/bevy_mod_js_scripting</a></p>",
        "id": 408952962,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1702998426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408952962\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>  <span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> I could explain/demo (voice chat) the basics of Bevy architecture and how I used it in my pet project, if you want. Maybe it could give you a better understanding of the depth of integration needed on Roc's behalf.<br>\nThere is also an experimental integration of Typescript in Bevy (I believe the person actually made it work, but there hasn't been any recent updates) <a href=\"https://github.com/jakobhellermann/bevy_mod_js_scripting\">https://github.com/jakobhellermann/bevy_mod_js_scripting</a></p>\n</blockquote>\n<p>No need yet, once we figure out the basics the fun stuff like integration with asset manager would become relevant. For now we are dealing with basics, so we'll be in touch once we're done. Having clean integration with bevy would be next level, naturally.</p>",
        "id": 409266968,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703109563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409266968\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408952962\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>  <span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> I could explain/demo (voice chat) the basics of Bevy architecture and how I used it in my pet project, if you want. Maybe it could give you a better understanding of the depth of integration needed on Roc's behalf.<br>\nThere is also an experimental integration of Typescript in Bevy (I believe the person actually made it work, but there hasn't been any recent updates) <a href=\"https://github.com/jakobhellermann/bevy_mod_js_scripting\">https://github.com/jakobhellermann/bevy_mod_js_scripting</a></p>\n</blockquote>\n<p>No need yet, once we figure out the basics the fun stuff like integration with asset manager would become relevant. For now we are dealing with basics, so we'll be in touch once we're done. Having clean integration with bevy would be next level, naturally.</p>\n</blockquote>\n<p>I'm very interested to see how this goes, as a Bevy developer myself. </p>\n<p><span class=\"user-mention\" data-user-id=\"625587\">@Vladimir Zotov</span> I'd like to hear/read this explanation you speak of. I just discovered Roc and have no idea how it works on any level, but I'd like to know if Roc will be worth my time before I go deep into it.</p>",
        "id": 409288173,
        "sender_full_name": "peeps",
        "timestamp": 1703122976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408952962\">said</a>:</p>\n<blockquote>\n<p>I could explain/demo (voice chat) the basics of Bevy architecture and how I used it in my pet project, if you want. </p>\n</blockquote>\n<p>I would love this. I'm reasonably comfortable with the basics of building Roc platforms but don't have any experience with Bevy. </p>\n<p>I just skimmed through the bevy book as a reference to find the most basic plugin type thing I could think of to glue/integrate Roc with Bevy. The breakout example looked simple enough, so the idea was build a plugin so that end users could \"mod\" the game by changing the colors using Roc.</p>\n<p>I've added a minimal Roc part to <span class=\"user-mention\" data-user-id=\"674610\">@Alexander Pyattaev</span>'s roc-plugin-example above. It currently builds Roc as either a standalone executable (for testing) or as a dynamic library for loading into rust as bevy plugin. </p>\n<p>Hopefully we can flesh that out and get the basics working end to end, and then I imagine as Alexander mentioned the next steps will be to add more capabilities like commands to spawn entities or adding systems etc.</p>",
        "id": 409305299,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703131490
    },
    {
        "content": "<p>Also, that typescript integration looks like a really great starting point for our experiment. We can lean on some of this work to do similar things for Roc.</p>",
        "id": 409305606,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703131649
    },
    {
        "content": "<p>In regards to the roc bevy plugin example: I noticed that under \"goals\" it says \"the Roc 'plugin' or 'script' would get loaded into the game on level startup\". Does this mean that I could change the script, recompile the script, and then see the changes take effect if I restart the level (not the whole game)? It would be nice if mod developers didn't have to restart their game every time they make a change. I don't want to expand the scope to include hot reloading at the moment, but if we can create an example that can at least support what I'm talking about with some manual steps, it will allow for possible hot reloading in the future, which would be awesome.</p>",
        "id": 409307492,
        "sender_full_name": "peeps",
        "timestamp": 1703132755
    },
    {
        "content": "<p>So something like:<br>\n1) change the script<br>\n2) recompile script<br>\n3) press a button in the game that triggers a reload of the new script</p>",
        "id": 409307775,
        "sender_full_name": "peeps",
        "timestamp": 1703132921
    },
    {
        "content": "<p>Yeah, so from my limited understanding I hope that something like that will be possible. I imagine a bevy plugin that \"manages\" the roc plugin and can reload it at runtime. I feel like this should be possible because it is a dynamic library... but this is definitely beyond my level of expertise or knowledge.</p>",
        "id": 409307815,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703132943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409307815\">said</a>:</p>\n<blockquote>\n<p>Yeah, so from my limited understanding I hope that something like that will be possible. I imagine a bevy plugin that \"manages\" the roc plugin and can reload it at runtime. I feel like this should be possible because it is a dynamic library... but this is definitely beyond my level of expertise or knowledge.</p>\n</blockquote>\n<p>Yeah I'm in the same boat there. I'd love to help but I can only observe and learn for now.</p>",
        "id": 409308014,
        "sender_full_name": "peeps",
        "timestamp": 1703133099
    },
    {
        "content": "<p>I do thinks it's important to note that the Roc plugin will only have access to the API that the game developer exposes to it. So it's only going to be able to change things in the world that have been implemented by the game developer</p>",
        "id": 409308092,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703133133
    },
    {
        "content": "<p>I'm currently just trying to get the bevy example running on its own... I've copied the source from the Bevy repository but trying to make sense of the dependencies so it compiles</p>",
        "id": 409308360,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703133334
    },
    {
        "content": "<p>I thought this would be the easy part... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 409308450,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703133379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409308092\">said</a>:</p>\n<blockquote>\n<p>I do thinks it's important to note that the Roc plugin will only have access to the API that the game developer exposes to it. So it's only going to be able to change things in the world that have been implemented by the game developer</p>\n</blockquote>\n<p>Actually, this is a reasonable and often desired limitation. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409308360\">said</a>:</p>\n<blockquote>\n<p>I'm currently just trying to get the bevy example running on its own... I've copied the source from the Bevy repository but trying to make sense of the dependencies so it compiles</p>\n</blockquote>\n<p>What kind of errors/issues are you getting? (also, should we move this to a different chat?)</p>",
        "id": 409308584,
        "sender_full_name": "peeps",
        "timestamp": 1703133485
    },
    {
        "content": "<p>Would be really interesting to see what the list of primitives would be needed from bevy to make a good generic roc platform that can use it (hopefully able to generate or be part of arbitrary systems in the ecs).</p>\n<p>Cause I think a significant portion of the complexity will be figuring out an API. Like forget about roc for a second, imagine you were loading a rust or c or Lua shared library. What primitives would they need to access to make a nice Becky plugin.</p>",
        "id": 409310861,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703134930
    },
    {
        "content": "<p>Totally agree. I think the best way to explore that is just to starting building something. It looks like we have the Roc part and the Bevy part done for our plugin-example above. Now we can wire them together, next up is to add more capabilities and see how that works in practice.</p>",
        "id": 409311129,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703135074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409305299\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/408952962\">said</a>:</p>\n<blockquote>\n<p>I could explain/demo (voice chat) the basics of Bevy architecture and how I used it in my pet project, if you want. </p>\n</blockquote>\n<p>I would love this. I'm reasonably comfortable with the basics of building Roc platforms but don't have any experience with Bevy. </p>\n<p>I just skimmed through the bevy book as a reference to find the most basic plugin type thing I could think of to glue/integrate Roc with Bevy. The breakout example looked simple enough, so the idea was build a plugin so that end users could \"mod\" the game by changing the colors using Roc.</p>\n<p>I've added a minimal Roc part to <span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span>'s roc-plugin-example above. It currently builds Roc as either a standalone executable (for testing) or as a dynamic library for loading into rust as bevy plugin. </p>\n<p>Hopefully we can flesh that out and get the basics working end to end, and then I imagine as Alexander mentioned the next steps will be to add more capabilities like commands to spawn entities or adding systems etc.</p>\n</blockquote>\n<p>We could have a zoom/hangouts/whatever chat. We just need to pick a time. I'm in UTC+1.</p>",
        "id": 409348869,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1703151605
    },
    {
        "content": "<p>Sounds good. Christmas isn't a great time for me with travel interstate to see family etc. <a href=\"https://www.when2meet.com/?22841902-VjG5D\">Here is  a WhenToMeet</a> with some date i think could work. We can put in our availability and see if there is a good time to talk.</p>",
        "id": 409349807,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703151887
    },
    {
        "content": "<p>I am stuck with a stupid problem. When I have a binary in rust that wants to create an instance of RocStr, I need to link against roc standard library and define functions like roc_alloc. When I make a platform, I also need to define such functions. So what happens when I load a dll that defines roc_alloc into a host app that also defines it? Which version is called when? All of this is very sketchy. Somehow i feel like allocation should only be done by the game and not the plugin, but i am not sure how to handle linking in this case...</p>",
        "id": 409394094,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703167030
    },
    {
        "content": "<p>I guess that DLL needs to call the roc_alloc defined in the main program, treating it as an <code>extern</code>.</p>",
        "id": 409395927,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1703167562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409349807\">said</a>:</p>\n<blockquote>\n<p>Sounds good. Christmas isn't a great time for me with travel interstate to see family etc. <a href=\"https://www.when2meet.com/?22841902-VjG5D\">Here is  a WhenToMeet</a> with some date i think could work. We can put in our availability and see if there is a good time to talk.</p>\n</blockquote>\n<p>That's an interesting website, i shall bookmark it. I would like to be part of this call as well so I have provided my availability.</p>",
        "id": 409406778,
        "sender_full_name": "peeps",
        "timestamp": 1703170937
    },
    {
        "content": "<p>Okay so there is an MVP in <a href=\"https://github.com/alexpyattaev/roc-plugin-example\">https://github.com/alexpyattaev/roc-plugin-example</a> that seems to be able to load a .so made by roc and call stuff from there. It is a MASSIVE hack though, and I am still unable to actually provide more than one function from platform to the host. When I add multiple provides entries roc compiler just panics which is kinda sad. The message is :<br>\nthread 'main' panicked at 'There were still outstanding Arc references to module_ids', crates/compiler/load_internal/src/file.rs:1560:37<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>",
        "id": 409419862,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703175058
    },
    {
        "content": "<p>Yeah you can only call one Roc function from the platform. That should be fixed at some point, not sure if there are specific plans.</p>",
        "id": 409429886,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1703178218
    },
    {
        "content": "<p>As a hack workaround, you can use a record of functions (though not sure if glue will generate that correctly or if it needs to be done manually)</p>",
        "id": 409431178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703178659
    },
    {
        "content": "<p>Yeah, multiple works correctly with glue generation.</p>",
        "id": 409435674,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703180370
    },
    {
        "content": "<p>Ok this is super strange but I suppose this will get fixed eventually =)</p>",
        "id": 409448751,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703185696
    },
    {
        "content": "<p>Yeah, I suspect this is one of those things where the implementation is going to change soon to enable effect interpreters, and so it hasnt been a priority to fix this and then have to change it.</p>",
        "id": 409453741,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703187546
    },
    {
        "content": "<p>Incidentally, I am trying to figure out this - how can I declare a function with no inputs? I know its sort of silly but my FP journey literally started with roc ...</p>",
        "id": 409454535,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703187939
    },
    {
        "content": "<p>Most people use an empty record as the argument to the function.</p>",
        "id": 409459287,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703190168
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn = \\{} -&gt; ...\n\nfn {}\n</code></pre></div>",
        "id": 409459337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703190202
    },
    {
        "content": "<p>But then I still need to provide that as argument when I call it. How do I define a pure \"constructor\" function?</p>",
        "id": 409459487,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703190276
    },
    {
        "content": "<p>That would just be a constant.</p>",
        "id": 409459548,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703190310
    },
    {
        "content": "<p>But probably if you are thinking of a constructor for a data structure, the answer is to use an empty record.</p>\n<p>For example <code>Dict.empty {}</code></p>",
        "id": 409459659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703190372
    },
    {
        "content": "<p>Mmmm... that is really strange limitation. I'm so used to having \"make me a thing\" functions... I suppose still have some residual OO trauma</p>",
        "id": 409459781,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703190448
    },
    {
        "content": "<p>If you give some concrete examples, I can try to give idiomatic answers, but I think my comment above is the general case in roc.</p>",
        "id": 409459958,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703190537
    },
    {
        "content": "<p>Yes I understand. I was just trying to define a function like this<br>\ninit_plugin: \\ {} -&gt; {<br>\nget_colors: \\ Str -&gt; RGBA,<br>\nget_object_size: \\ Str -&gt; Int,<br>\n}</p>",
        "id": 409460231,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703190674
    },
    {
        "content": "<p>Ah, as the function exposed to the platform, yeah, probably need the empty record.</p>",
        "id": 409464876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703193030
    },
    {
        "content": "<p>Actually, you should be able to expose a constant to the platform</p>",
        "id": 409464922,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703193058
    },
    {
        "content": "<p>So not a function at all</p>",
        "id": 409464933,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703193067
    },
    {
        "content": "<p>I am dum dum... How do I define a struct that holds several functions?<br>\nThis gets compiler very unhappy and all crashy...</p>\n<div class=\"codehilite\"><pre><span></span><code>EngineCallins:{\n    init: U64 -&gt; U64,\n    fetch_color: ColoredThings -&gt; RGBA,\n    get_bounce_angle: {vx:F32,vy:F32}-&gt; {vx:F32,vy:F32}\n    }\n</code></pre></div>",
        "id": 409468443,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703195043
    },
    {
        "content": "<p>{x:U64, y:U64} is ok<br>\nbut <br>\n{x: U64-&gt;U64, y: U64-&gt;U64} is not ok...</p>",
        "id": 409468627,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703195158
    },
    {
        "content": "<p>Here is an example <a href=\"https://github.com/lukewilliamboswell/roc-gui/blob/main/platform/main.roc#L8\">https://github.com/lukewilliamboswell/roc-gui/blob/main/platform/main.roc#L8</a></p>",
        "id": 409470745,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703196158
    },
    {
        "content": "<p>I only just updated this last night, theres a segfault I haven't had a chance to look into so it's not generally usable. But the platform and glue gen work ok which may help with your question here.</p>",
        "id": 409470916,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703196220
    },
    {
        "content": "<p>FP DSL in a game engine (good fit for Roc)! Isn't that what Simon Peyton Jones does at Epic games <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 409472872,
        "sender_full_name": "Steven Chen",
        "timestamp": 1703197085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409349807\">said</a>:</p>\n<blockquote>\n<p>Sounds good. Christmas isn't a great time for me with travel interstate to see family etc. <a href=\"https://www.when2meet.com/?22841902-VjG5D\">Here is  a WhenToMeet</a> with some date i think could work. We can put in our availability and see if there is a good time to talk.</p>\n</blockquote>\n<p>I added my most probable availability on those days.</p>",
        "id": 409474160,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1703197682
    },
    {
        "content": "<p>Ok, <span class=\"user-mention\" data-user-id=\"674610\">@Alexander Pyattaev</span> <span class=\"user-mention\" data-user-id=\"675776\">@peeps</span> <span class=\"user-mention\" data-user-id=\"625587\">@Vladimir Zotov</span>  let's have a chat at (SEE NEW TIME BELOW). <a href=\"https://meet.google.com/ihh-ihbf-xwc\">Here is a link for a google meet</a> we can use. I'm keen to talk Roc plugin ideas for Bevy games. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 409549394,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703236821
    },
    {
        "content": "<p>That is 10 PM in Finland... Suggest 1 hour earlier.</p>",
        "id": 409560151,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703241508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409549394\">said</a>:</p>\n<blockquote>\n<p>Ok, <span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span>  let's have a chat at <time datetime=\"2024-01-04T20:00:00Z\">2024-01-05T07:00:00+11:00</time>. <a href=\"https://meet.google.com/ihh-ihbf-xwc\">Here is a link for a google meet</a> we can use. I'm keen to talk Roc plugin ideas for Bevy games. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>I can start 1 hour earlier for Alexander <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 409596066,
        "sender_full_name": "peeps",
        "timestamp": 1703257106
    },
    {
        "content": "<p>Ok so I have a plugin that returns a bunch of functions from its main that can then be called by engine. However, it turns out that the way roc represents functions is \"interesting\". I get this sort of generated code in roc glue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"cp\">#[derive(Debug)]</span>\n<span class=\"w\">  </span><span class=\"cp\">#[repr(C)]</span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RocFunction_93</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">closure_data</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Problem is,  Vec is incompatible with repr(C), and rustc gives me scary warnings about FFI stability. This all looks very suspicious and \"wrong\" in some sense. Am I missing something obvious?</p>",
        "id": 409634709,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703274626
    },
    {
        "content": "<p>And using the resulting struct results in segfault, naturally. So FFI warning was 100% justified...</p>",
        "id": 409634971,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703274808
    },
    {
        "content": "<p>yeah, it's wrong. Glue doesn't know how to generate a record of functions</p>",
        "id": 409636247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275427
    },
    {
        "content": "<p>Was chatting with luke about it this morning</p>",
        "id": 409636328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275445
    },
    {
        "content": "<p>From what I sent Luke earlier:</p>",
        "id": 409636431,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275506
    },
    {
        "content": "<p>This generation is totally wrong;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ForHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">init</span>: <span class=\"nc\">RocFunction_81</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">render</span>: <span class=\"nc\">RocFunction_83</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">update</span>: <span class=\"nc\">RocFunction_82</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mainForHost</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ForHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ForHost</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 409636443,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275510
    },
    {
        "content": "<p>This is roughly correct, but I hate that it requires allocating 4 vectors:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mainForHost</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ForHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_exposed_size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_0_size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_2_size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_exposed_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">captures</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">captures</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">init_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_0_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">render_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">update_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_2_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ForHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">init</span>: <span class=\"nc\">RocFunction_81</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">closure_data</span>: <span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">init_size</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">render</span>: <span class=\"nc\">RocFunction_83</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">closure_data</span>: <span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">render_size</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">update</span>: <span class=\"nc\">RocFunction_82</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">closure_data</span>: <span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">update_size</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">init_size</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">data_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"n\">init_size</span><span class=\"o\">..</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">render_size</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">data_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"n\">render_size</span><span class=\"o\">..</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">update_size</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">ret</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 409636483,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275528
    },
    {
        "content": "<p>This is what is needed if the functions have closure captures.</p>",
        "id": 409636631,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275615
    },
    {
        "content": "<p>Technically, if you avoid captures, each of those functions could just be called by giving them a null closure data.</p>",
        "id": 409636665,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275638
    },
    {
        "content": "<p>In my case the functions do not have any captures, so I'm unsure why glue insists on having Vec's there at all. The code is here, if it helps: <a href=\"https://github.com/alexpyattaev/roc-plugin-example/blob/master/plugin_logic.roc\">https://github.com/alexpyattaev/roc-plugin-example/blob/master/plugin_logic.roc</a></p>",
        "id": 409636856,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703275744
    },
    {
        "content": "<p>Interesting that the EngineCallins struct as returned contains some data in the Vec's, even though it probably should not.</p>\n<div class=\"codehilite\"><pre><span></span><code>src/main.rs:31] ret = EngineCallins {\n    bounce: RocFunction_92 {\n        closure_data: [\n            224,\n        ],\n    },\n    colors: RocFunction_91 {\n        closure_data: [\n[1]    16968 segmentation fault (core dumped)  cargo run ./plugin_logic.so\n</code></pre></div>",
        "id": 409637169,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703275940
    },
    {
        "content": "<p>There is no guarantee they don't have captures. So glue will always generate in a way that could support captures for a closure.</p>",
        "id": 409637194,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275958
    },
    {
        "content": "<p>Glue builds off of the type, not the final implementation</p>",
        "id": 409637207,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703275970
    },
    {
        "content": "<p>ok fair. but then why are vecs not empty? They really really have no captures, as per the code i linked...</p>",
        "id": 409637536,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703276187
    },
    {
        "content": "<p>If you look at the second code example I sent, it just that closures have to be initialized in a special way. Roc does not return a vec at all.</p>",
        "id": 409638162,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703276602
    },
    {
        "content": "<p>In your case the size functions would all return 0</p>",
        "id": 409638178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703276612
    },
    {
        "content": "<p>Probably the simplest way to use things currently would be to skip calling mainForHost at all. Just assume no captures.</p>",
        "id": 409638477,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703276817
    },
    {
        "content": "<p>So generate the underlying function with an empty vec and call it.</p>",
        "id": 409638528,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703276852
    },
    {
        "content": "<p>Also, I think you can name each underlying function as well with another <code>as</code> statement</p>",
        "id": 409638625,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703276894
    },
    {
        "content": "<p>Hm.... but the whole point of a plugin is that we call a function (mainforhost in my case) that returns a bunch of function pointers that engine can use. And it kinda sorta works as well,  just I'm really surprised there is some non-empty vecs attached to them.</p>",
        "id": 409638690,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703276960
    },
    {
        "content": "<p>The vecs are all empty if you have no closure captures. If you use what glue generates currently, it is just totally wrong generation.</p>",
        "id": 409639505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703277539
    },
    {
        "content": "<p>em... so how do I get that fixed then? I'm lost...</p>",
        "id": 409642639,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703279414
    },
    {
        "content": "<p>sorry, the fix for this is in progress <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 409645974,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703281645
    },
    {
        "content": "<p>Folkert is aiming to land it in early January, but it's a surprisingly difficult implementation</p>",
        "id": 409646062,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703281703
    },
    {
        "content": "<p>Currently, the best options are to either:</p>\n<ol>\n<li>Modify your glue code to correctly handle the closure captures (that is what I did in the second code example above)</li>\n<li>Ignore closure captures and just directly call the functions with empty closures (will break if there is ever a closure capture)</li>\n</ol>",
        "id": 409650055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703284293
    },
    {
        "content": "<p>Ok let's start 1 hours earlier, <span class=\"user-mention\" data-user-id=\"674610\">@Alexander Pyattaev</span> <span class=\"user-mention\" data-user-id=\"675776\">@peeps</span> <span class=\"user-mention\" data-user-id=\"625587\">@Vladimir Zotov</span>  updated time <time datetime=\"2024-01-04T19:00:00Z\">2024-01-05T06:00:00+11:00</time>. <a href=\"https://meet.google.com/ihh-ihbf-xwc\">Here is the link for a google meet</a> we can use (it's the same one)</p>",
        "id": 409682049,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703305258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409650055\">said</a>:</p>\n<blockquote>\n<p>Currently, the best options are to either:</p>\n<ol>\n<li>Modify your glue code to correctly handle the closure captures (that is what I did in the second code example above)</li>\n<li>Ignore closure captures and just directly call the functions with empty closures (will break if there is ever a closure capture)</li>\n</ol>\n</blockquote>\n<p>I think we are talking about slightly different cases here. Your code example works in case of static (or semi-static) linking, i.e. when linker runs before the host does. In case of a plugin, the linker runs when the plugin is loaded, so your example would not be able to compile. Given what I know about functions and closures in general, I think the glue code is indeed wrong, but in a much more fundamental way. It essentially assumes that this is a correct representation for a function returned from a function is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RocFunction_93</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">closure_data</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and this can not possibly be correct (since I could be returning a different function depending on some runtime condition, so the correct (or, at least, plausible) representation for returned function should be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RocFunction_93</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">entrypoint</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">arg1</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure_data</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">PluginState</span><span class=\"p\">),</span>\n<span class=\"w\">     </span><span class=\"n\">closure_data</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In this case I'd be able to actually call entrypoint(...) and have that work while doing runtime linking. Where can I find how roc represents the function pointers in runtime? If I had this info, I should be able to make relevant glue code to at least test if I'm completely wrong or not.</p>",
        "id": 409740046,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703356884
    },
    {
        "content": "<p>Just having data and no function pointer is correct for roc. Roc turns the n potential runtime functions into a single call site. The dispatch information would actually also be captured in the closure data.</p>",
        "id": 409742099,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703358773
    },
    {
        "content": "<p>This avoids the need for virtual function tables in certain closure cases and makes it always static (which llvm is able to optimize much better)</p>",
        "id": 409742140,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703358812
    },
    {
        "content": "<p>I guess for ffi boundary it is a stranger choice, but for all the closures within roc, it leads to a lot more inlining and branches being optimized away. So leads to high performance with llvm optimizations</p>",
        "id": 409742249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703358889
    },
    {
        "content": "<p>Also, within roc, we avoid the vectors and always use static size chunks of memory (I believe in the stack) cause we know that info at compile time. Only over ffi does we have to deal with dynamism (cause the platform doesn't know which app will be compiling for it)</p>",
        "id": 409742350,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703358982
    },
    {
        "content": "<p>Ok I get it. However, this means there is no way to actually make a viable plugin in roc at the moment. There can not be more than one function listed in \"provides\" and trying to return function pointers is also impossible. Sure there are symbols available in the produced elf file for all the functions, but their names have nothing to do with function names defined in the code. For example, I get \"roc__mainForHost_1_exposed_generic\" even though actual function name is \"reset\". Or am I missing an opportunity somewhere?</p>",
        "id": 409746083,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703362529
    },
    {
        "content": "<p>Also I've checked and calling the function that should return the struct with vec data does literally nothing (i.e. it does not even touch that memory, so whatever junk it had is the junk it ends up with). So it seems that the closure_data is indeed unused.</p>",
        "id": 409746164,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703362599
    },
    {
        "content": "<p>Is there a way to force Roc to produce legit function pointers? Maybe Box?</p>",
        "id": 409746305,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703362714
    },
    {
        "content": "<p>With this code, the reset function should be a pointer, FFI or not (as you can not know in advance which version would be in the returned record). Or am I missing something?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>main: U64-&gt;EngineCallins\nmain = \\arg -&gt;\n    when arg is\n        0 -&gt; {reset : reset, colors : selectColor, bounce : bounceAngle}\n        _ -&gt; {reset : reset2, colors : selectColor, bounce : bounceAngle}\n</code></pre></div>",
        "id": 409748251,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703364631
    },
    {
        "content": "<p>Everything functions correctly. It just functions differently in Roc than most other systems.</p>\n<p>I am going to use the gui platform for my example, but the same would apply to your plugin.<br>\nBase main function (just a record of functions):</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">update</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">render</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>This has no captures and nothing potentially dynamic. The <code>roc__mainForHost_1_exposed_generic</code> function literally does nothing. The <code>roc__mainForHost_1_exposed_size</code> is <code>0</code>. All captures are of zero size. The <code>roc__mainForHost_0/1/2_caller</code> functions just directly call the underlying init/update/render function directly.</p>\n<p>With a capture:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">program</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">capture</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2.0f</span><span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">init</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"nx\">height</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">width</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">init</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">height</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">height</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">capture</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">width</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nx\">update</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">render</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>The <code>roc__mainForHost_1_exposed_generic</code> function stores a float into the captures for the init function. The update and render function still have no data. <code>roc__mainForHost_1_exposed_size</code> now has a size of <code>4</code> for the float being returned. The <code>roc__mainForHost_0_caller</code> which maps to the init function now requires closure data, other wise it will attempt to read invalid memory.</p>\n<p>With conditional functions:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">program</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">update</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">render</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">init</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"nx\">height</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">width</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">init</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">height</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">height</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">width</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nx\">update</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">render</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>The list has memory effects and does not get optimized away. As such, we have to conditionally pick which init function to run. <code>roc__mainForHost_1_exposed_generic</code> runs the condtional and based on the result, stores a 0 or 1 in memory. <code>roc__mainForHost_1_exposed_size</code> now has a size of <code>1</code>. It is simply store a tag to know which version of the function to actually run. That value needs to be passed to <code>roc__mainForHost_0_caller</code> for the right version of the init function to execute.</p>\n<p>Roc completely avoids function pointers. The platform is just making static calls with various closure data that roc knows how to interpret. So the plugin case works just fine.</p>\n<p>Roc does this to all closures in the entire codebase. It enables a llvm to do a lot more compile time optimization of calls to closures instead of just giving up because it sees a call to a function pointer. Over FFI, this protocol is a bit strange, but within an llvm optmization context, it is a huge performance boon. That said, even over FFI, it enables the branch predictor to guess which closure is being called instead of just being blocked by a pointer.</p>\n<p>Final note, naming. If glue just works, naming really doesn't matter and the platform author will only ever see the record field name. Since glue doesn't just work, a lot of these strange names leak out. <del>All that said, we have a way to enable nicer names here. Though the syntax only works when written in line with the function exposed to the platform.</del> I can't seem to get the naming syntax working. It may not be functional anymore.</p>",
        "id": 409755075,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703371213
    },
    {
        "content": "<p>hopefully that helps with understanding overall</p>",
        "id": 409755084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703371221
    },
    {
        "content": "<p>Ok I see, beating imperative with functional requires some sacrifices to the optimizer gods =).  Given this, it seems that getting roc to generate \"normal\" function pointers would be extremely painful. With these limitations, it appears that what we really should aim to have as a \"proper fix\" is multiple \"provides\" entries (at least for platforms that are ultimately built as shared libraries). With that, a roc library could expose several callable functions that would all have distinct names, which would make some sense &amp; be compatible with what other languages expect on the FFI boundary. </p>\n<p>Currently, the way I see this, roc is just not really set up to build standalone libraries (or maybe there are some magical flags we are not aware of).  Specifically, for some reason the compiler insists I put an actual platform into the build, despite the fact that the platform itself will not be used for anything whatsoever in the final library. Further, the platform does not allow me to expose multiple unmangled functions for other people to be able to call. I'd say that anything labeled as \"package\"  should be buildable into a shared library, there is really no reason not to support that as far as I can see. But that is not something fixable short term.</p>\n<p>I suppose there are a couple of workarounds we can use for now to get plugin example off the ground:</p>\n<p>1. \"one function = 1 .so file\". This is somewhat wasteful in terms of disk space, but should not be a major showstopper for game plugins (as those tend to be fairly small). This has the downside of getting cumbersome (especially for plugins with more complex life cycles which may benefit from init-work-teardown function bundles). <br>\n 2. dispatching functions inside roc code. Only one function is exposed by the platform, but it has internal switching based on some sort of enum that is provided by the caller. This would be far more readable/maintainable in the short term, but would introduce runtime branching on every call (which might also get really bad branch prediction).  </p>\n<p>I'll try to follow with workaround 2 and see how ugly it gets. I imagine that a mispredicted branch is nowhere near as painful as python.</p>",
        "id": 409835776,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703444936
    },
    {
        "content": "<p>Yeah, I agree, it needs cleanup and some extra features added</p>",
        "id": 409838496,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703447984
    },
    {
        "content": "<p>Multiple provides being the first big piece</p>",
        "id": 409838504,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703447995
    },
    {
        "content": "<p>Having platforms control their build/link is the second.</p>",
        "id": 409838559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/409838559\">said</a>:</p>\n<blockquote>\n<p>Having platforms control their build/link is the second.</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 409838593,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703448035
    },
    {
        "content": "<p>For your use case, you probably want to just always use <code>--lib</code> when building with roc</p>",
        "id": 409838621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448054
    },
    {
        "content": "<p>I mean that roc currently requires the platform to build to a <code>.o</code> or <code>.a</code> file and then deals with the final linking itself when calling <code>roc build ...</code> on most platforms.</p>",
        "id": 409838806,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448163
    },
    {
        "content": "<p>So roc is the final linker of the binary and just attempts to hack things together.</p>",
        "id": 409838828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448180
    },
    {
        "content": "<p>The platform should be in charge of its own final linking.</p>",
        "id": 409838858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448200
    },
    {
        "content": "<p>The platform should link against a static or dynamic library generated by roc</p>",
        "id": 409838960,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448247
    },
    {
        "content": "<p>Yes, in this sense its true. I'd take it one step further and just allow building packages as standalone .so, no platform whatsoever. It would make for a really good start in the dynamic library story I think. There will be a limitation that it would be very hard to define platform-specific data types in this case.</p>",
        "id": 409839022,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703448334
    },
    {
        "content": "<p>Just use <code>--lib</code></p>",
        "id": 409839034,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448360
    },
    {
        "content": "<p>It requires a platform file, but only cause that specifies the exposed api</p>",
        "id": 409839086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448377
    },
    {
        "content": "<p>But there doesn't need to be any concrete platform or code in another language for that to work.</p>",
        "id": 409839104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448396
    },
    {
        "content": "<p>--lib requires a platform. Even though it does not use any of it right now. And it is not documented at all.</p>",
        "id": 409839109,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703448405
    },
    {
        "content": "<p>Should generate a <code>.so</code></p>",
        "id": 409839111,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448405
    },
    {
        "content": "<p>When you say it requires a platform, what files are you talking about?</p>",
        "id": 409839212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448495
    },
    {
        "content": "<p>to run roc build --lib you need a platform file, which does absolutely nothing that a package or interface file would not achieve.</p>",
        "id": 409839255,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703448554
    },
    {
        "content": "<p>I think it is super counterintuitive</p>",
        "id": 409839266,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703448575
    },
    {
        "content": "<p>The platform file is required. It specifies the effects and the API that roc needs to expose to the host. So you need a <code>platform/main.roc</code> file with associate task and effect files.</p>",
        "id": 409839324,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703448623
    },
    {
        "content": "<p>is there any example of a --lib build that uses effects/Tasks?</p>",
        "id": 409839383,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703448720
    },
    {
        "content": "<p>Glue essentially uses a plugin and uses <code>--lib</code>, but it is built into the compiler, so not a self contained example.</p>",
        "id": 409842853,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703452526
    },
    {
        "content": "<p>ok i'll check how it works</p>",
        "id": 409843720,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703453366
    },
    {
        "content": "<p>A few notes:</p>\n<ol>\n<li>I think the main driver file is called <a href=\"http://load.rs\">load.rs</a> in, I think crates/glue/src</li>\n<li>Glue has a simpler API, would need to be more complex to deal with the multifunction capture case.</li>\n<li>It uses the equivalent of <code>--lib</code>, but I think it does so by calling the compiler internally instead of shelling out to the CLI.</li>\n</ol>",
        "id": 409843918,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703453529
    },
    {
        "content": "<p>Platform should also be something like crates/glue/platform</p>",
        "id": 409843931,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703453547
    },
    {
        "content": "<p>I think I have a plan how to get plugins working. The platform's main file can define static function pointers. And normal functions for library. I am surprised i did not see this earlier. We may not need to fix glue quite yet</p>",
        "id": 409911367,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703510596
    },
    {
        "content": "<p>Okay... it seems I have been too optimistic. Here is what I wanted to do: </p>\n<ol>\n<li>build a library with roc which exposes wonky half-baked API that roc currently exposes.</li>\n<li>build a rust library that links against the roc library and turns that into some nice juicy symbols usable by libloading or other hot-reload option in rust</li>\n<li>fill in the symbols for roc_panic roc_alloc etc by the final game engine binary and not by the wrapper library</li>\n</ol>\n<p>Overall, this basically works, and I could use code from <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> to replace the generated glue with something that does not just outright panic. </p>\n<p>However, I've faced several issues while doing this:</p>\n<ol>\n<li>Glue needs to be handrolled which is sad (this is because roc glue is not able to make correct glue for closures)</li>\n<li>The wrapper library is yet another SEPARATE .so that needs to be shipped. So instead of one .so with plugin code, now you get two. This will 100% confuse hot reloading logic. Maybe they can be merged though... Need to dig into rustc linking flags. Or maybe roc can produce .a files somehow?</li>\n</ol>",
        "id": 410578385,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703976575
    },
    {
        "content": "<p>Roc can produce a <code>.o</code> as well.</p>",
        "id": 410578890,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703977143
    },
    {
        "content": "<p>So that should be able to statically link to the other <code>.so</code> you are generating</p>",
        "id": 410578897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703977165
    },
    {
        "content": "<p>Ok yes it can... but I can not explain how to link with that to rustc... what is the flag to link against .o?</p>",
        "id": 410579439,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703977563
    },
    {
        "content": "<p>You can convert it to a <code>.a</code> if you want. Just use <code>ar</code>, but yeah roc probably should emit a <code>.a</code> directly instead of a <code>.o</code>. a <code>.a</code> is more flexible and probably what we want long term.  Also, you probably can tell rust to link the <code>.o</code> the same way as a <code>.a</code> or just rename the file. Generally that just work.</p>",
        "id": 410579696,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703977903
    },
    {
        "content": "<p>hm... ar rc app.a libapp.o seems to do the converting trick... but i am stuck trying to explain this to rustc... <br>\nI have app.a in the project directory, and this in <a href=\"http://build.rs\">build.rs</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"cargo:rustc-link-lib=static=app.a\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>but it just says fatal: library not found: app.a</p>",
        "id": 410579856,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1703978062
    },
    {
        "content": "<p>I think it should just be <code>app</code> for a file named <code>libapp.a</code></p>",
        "id": 410580750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703979148
    },
    {
        "content": "<p>And you may need to tell it what folder to search as well</p>",
        "id": 410580773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703979191
    },
    {
        "content": "<p>Thanks! It works!<br>\nRant follows:<br>\nI hate the silly name mangling with libraries. why can i not just say -L <a href=\"http://thing.so\">thing.so</a> when i want to link a dynamic lib, or -L thing.a when i want a static? instead we do the libthing.a but specify -l thing in the flags... what a horrible abomination we have built...</p>",
        "id": 410658140,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1704054364
    },
    {
        "content": "<p>Yeah, I have always hated that as well.</p>",
        "id": 410658654,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704055025
    },
    {
        "content": "<p>ok so overall I think we are set for success. the wrapper library idea seems to work, so we can use it to isolate the roc compiler internals related to how roc represents closures from whoever will be calling the code from rust (or C for that matter).</p>",
        "id": 410658894,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1704055283
    },
    {
        "content": "<p>happy new year!</p>",
        "id": 410658909,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1704055309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"674610\">@Alexander Pyattaev</span> <span class=\"user-mention\" data-user-id=\"675776\">@peeps</span> <span class=\"user-mention\" data-user-id=\"625587\">@Vladimir Zotov</span> are you still good for <time datetime=\"2024-01-04T19:00:00Z\">2024-01-05T06:00:00+11:00</time> to talk plugins? <a href=\"https://meet.google.com/ihh-ihbf-xwc\">Here is the link for the google meet again</a>. </p>\n<p>I'm excited to see the progress Alexander has been making with the above, and to discuss ideas/experiments for Roc plugins.</p>",
        "id": 410824185,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704190740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/410824185\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> are you still good for <time datetime=\"2024-01-04T19:00:00Z\">2024-01-05T06:00:00+11:00</time> to talk plugins? <a href=\"https://meet.google.com/ihh-ihbf-xwc\">Here is the link for the google meet again</a>. </p>\n<p>I'm excited to see the progress Alexander has been making with the above, and to discuss ideas/experiments for Roc plugins.</p>\n</blockquote>\n<p>I'm still good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 410869338,
        "sender_full_name": "peeps",
        "timestamp": 1704212170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/410824185\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> are you still good for <time datetime=\"2024-01-04T19:00:00Z\">2024-01-05T06:00:00+11:00</time> to talk plugins? <a href=\"https://meet.google.com/ihh-ihbf-xwc\">Here is the link for the google meet again</a>. </p>\n<p>I'm excited to see the progress Alexander has been making with the above, and to discuss ideas/experiments for Roc plugins.</p>\n</blockquote>\n<p>Still good, Luke!</p>",
        "id": 410973183,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1704269443
    },
    {
        "content": "<p>Current roadmap is here<br>\n<a href=\"https://github.com/alexpyattaev/roc-plugin-example/issues/3\">https://github.com/alexpyattaev/roc-plugin-example/issues/3</a></p>",
        "id": 411256844,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1704400216
    },
    {
        "content": "<p>Bevy 0.13 just dropped with Dynamic Queries! Been looking forward to this for the scripting use case. Might be useful to our endeavors with the roc-plugin stuff.</p>",
        "id": 422040165,
        "sender_full_name": "peeps",
        "timestamp": 1708201441
    },
    {
        "content": "<p>Awesome. I've been thinking about this experiment lately. I wish I had a little more time to work on it. It will be super cool to show how to use roc as a plugin.</p>",
        "id": 422041426,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1708202735
    },
    {
        "content": "<p>Yeah i been dealing with a seemingly never ending queue of personal BS, so I have not been able to work on anything for like a month <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 422042362,
        "sender_full_name": "peeps",
        "timestamp": 1708203710
    },
    {
        "content": "<p>Same here, too much other work to do. Did some experiments with stabby <br>\ncrate that would enable to make the plugin ABI less shit, but nothing <br>\nbeyond that.</p>",
        "id": 422396018,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1708427881
    },
    {
        "content": "<p>Oh I ran into stabby last year trying to use it with Bevy. Never managed to make it work lol. My fault tho.</p>",
        "id": 422412451,
        "sender_full_name": "peeps",
        "timestamp": 1708434115
    },
    {
        "content": "<p>Yeah, stabby has some sharp corners=)</p>",
        "id": 422419415,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1708436416
    },
    {
        "content": "<p>Hi! I'm back at it... what did I miss? glue generation seems to be just as broken as before (or maybe more so)... If anyone can point me at a bunch of examples that work with relevant version of glue I'd appreciate it=)</p>",
        "id": 442595523,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717525209
    },
    {
        "content": "<p>I did have another look at it and yes, it didn't get better yet, so I'm just practising roc in hopes the glue topic gets more love <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> later this year <span aria-label=\"cowboy\" class=\"emoji emoji-1f920\" role=\"img\" title=\"cowboy\">:cowboy:</span></p>",
        "id": 442602584,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1717527381
    },
    {
        "content": "<p>It is rather unfortunate that glue code is all in roc... I am basically unable to grasp it on the scale necessary to fix what needs to be fixed (and it is not actually a huge amount)</p>",
        "id": 442602853,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717527478
    },
    {
        "content": "<p>Why does dbg command not work when I put it in roc glue code?  It is as if some cruel person deliberately made it hard to debug that code</p>",
        "id": 442606931,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717528724
    },
    {
        "content": "<blockquote>\n<p>as if some cruel person deliberately made it hard to debug</p>\n</blockquote>\n<p>Sorry?</p>\n<p>Probably just that no one ever made it work. Debug was changed to make it work better, but that probably never got wired into the glue platform.</p>",
        "id": 442608735,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717529212
    },
    {
        "content": "<p>Sorry I got far too much annoyed by it, should stay cool. its just that  dbg command is supposed to print into stderr, but from inside roc glue impl it seems to not work, which makes figuring out what it does very tricky. No side-effects is nice but I see no mechanism to extract data from inside glue generation other than just spamming into the generated code</p>",
        "id": 442609202,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717529364
    },
    {
        "content": "<p>I think adding an impl of roc_dbg here should fix it: <a href=\"https://github.com/roc-lang/roc/blob/main/crates/glue/src/lib.rs\">https://github.com/roc-lang/roc/blob/main/crates/glue/src/lib.rs</a></p>",
        "id": 442609974,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717529601
    },
    {
        "content": "<p>But might take more playing around/wiring</p>",
        "id": 442610003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717529612
    },
    {
        "content": "<p>Should be fine to copy the impl from here: <a href=\"https://github.com/roc-lang/roc/blob/main/examples/platform-switching/rust-platform/src/lib.rs\">https://github.com/roc-lang/roc/blob/main/examples/platform-switching/rust-platform/src/lib.rs</a></p>",
        "id": 442610182,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717529659
    },
    {
        "content": "<p>yeah but for that I need to set up the build thing for the roc compiler, right? Last time I tried it it was not fun at all...</p>",
        "id": 442610441,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717529750
    },
    {
        "content": "<p>I can try and do that tonight. Then it should be pulled into the following nightly.</p>",
        "id": 442610575,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717529787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/442610575\">said</a>:</p>\n<blockquote>\n<p>I can try and do that tonight. Then it should be pulled into the following nightly.</p>\n</blockquote>\n<p>you'd be my hero! no need to rush it though, if it turns out to be a mess, it will not be very helpful.</p>",
        "id": 442610635,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717529810
    },
    {
        "content": "<p>Ah....I know the problem here. It is bigger than I originally though, but doable if someone wants to attempt it.</p>\n<p>Fundamentally, dbg is tied to expect in the roc compiler currently. Expect only works via direct execution with <code>roc dev</code> or <code>roc run</code>. It has to use one of the total roc internal execution methods. It does not work if we emit an executable file. (we want to change that so it simply calls <code>roc_expect</code> in the platform and can be run independent from roc).</p>\n<p>That said, to make this work, the full <code>roc_expect</code> change is not required. For this, we simply have to allow for generating <code>dbg</code> statements in an executable. We already have <code>roc_dbg</code> in platforms. The compiler currently generates expect and dbg together. So those would need to be separated. I would assume this is mostly funneling a conditional through the compiler to allow for dbg without expect.</p>",
        "id": 442818363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717601261
    },
    {
        "content": "<p>Oh well. dbg is the least of the problems in that glue logic. I've dived a bit into it all, and the main problems, as I see them now, are as follows:</p>\n<ol>\n<li>if a struct that is returned by a roc function A contains roc functions, the struct needs to be properly initialized before A is called.</li>\n<li>similarly, the actual function's stack needs to be initialized</li>\n<li>all of the above depends on runtime calls to things like something_something_exposed_size(...), and it is unclear what are the exact preconditions for when that becomes necessary</li>\n<li>all of the above also needs to be done recursively for nested structs and/or functions returning structs that hold functions returning structs</li>\n<li>none of this fares particularly well with the ideas currently in use in the RustGlue code, i.e. the assumption there is that you can just instantiate the structs generated by glue from inside rust, and that is simply not always true. effectively, we need to change the API of the generated code such that a constructor method like new() is generated that takes care of all the necessary allocations.</li>\n<li>i am uncertain if the stuff returned by  something_something_exposed_size(...) is actually const in practice, if it is we could save on a whole bunch of runtime allocations, which would be much appreciated by realtime code calling into roc plugin</li>\n</ol>",
        "id": 442861020,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717611912
    },
    {
        "content": "<p>Yeah, the fact we still have to return a struct of functions is really annoying. We should just let the user expose multiple functions and be done with it. Solves many problems by reducing complexity due to lambdas (which can capture arbitrary data).</p>",
        "id": 442869662,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717614765
    },
    {
        "content": "<p>yeah definitely want to, it's just a matter of implementing it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 442869731,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717614790
    },
    {
        "content": "<p>Also can someone explain what does HasClosure mean in context of glue code? I am asking cuz structs that clearly hold closures are marked as HasNoClosure...</p>",
        "id": 442869934,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717614850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/442869662\">said</a>:</p>\n<blockquote>\n<p>We should just let the user expose multiple functions and be done with it. </p>\n</blockquote>\n<p>well it helps defining callins, yes, but the moment some enterprising user wants to return a struct with a callback we are back to square one. we might just as well get glue to work properly if possible.</p>",
        "id": 442870884,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717615151
    },
    {
        "content": "<p>For sure</p>",
        "id": 442872553,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717615609
    },
    {
        "content": "<p>But some problems are easier than others</p>",
        "id": 442872594,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717615621
    },
    {
        "content": "<p>That said I thought glue worked for closures already via RocFn</p>",
        "id": 442872686,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717615645
    },
    {
        "content": "<p>Do you know maybe what HasClosure is supposed to mean?</p>",
        "id": 442872728,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717615656
    },
    {
        "content": "<p>It sorta works but when you are returning a struct with roc functions (not even actual closures) it will generate garbage and segfault</p>",
        "id": 442873075,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717615744
    },
    {
        "content": "<p>Roughly speaking, this is what it generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Debug, )]</span>\n<span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Callins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">colors</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocFunction_88</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">reset</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocFunction_89</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">mainForHost</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Callins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Callins</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">MaybeUninit</span><span class=\"p\">::</span><span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And this is roughly what is necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">mainForHost</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">EngineCallins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_1_exposed_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_1_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_2_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"c1\">//figure out size of captures</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_exposed_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">captures</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">captures</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">colors_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reset_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_2_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EngineCallins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">colors</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocFunction_colors</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">closure_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">colors_size</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">reset</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocFunction_reset</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">closure_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">reset_size</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"c1\">//let mut ret = core::mem::MaybeUninit::uninit();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">bounce</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">bounce_size</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">data_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"n\">colors_size</span><span class=\"o\">..</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">reset</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data_slice</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">reset_size</span><span class=\"p\">]);</span>\n\n<span class=\"w\">   </span><span class=\"n\">ret</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 442873713,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717615908
    },
    {
        "content": "<p>As you can see in generated version the boilerplate to prepare the memory for roc code to be called is not generated, this results in troubles when calling this stuff (essentially UB)</p>",
        "id": 442874103,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616013
    },
    {
        "content": "<p>All of this is fairly straightforward once you know what's needed to be there, I'm just trying to wire it all into the current RustGlue.roc which sorta assumes none of this bs would be necessary for \"normal functions\"</p>",
        "id": 442874341,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616073
    },
    {
        "content": "<p>Ah. This makes sense.</p>",
        "id": 442875150,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616290
    },
    {
        "content": "<p>With a struct of closures, we return one giant capture for everything.</p>",
        "id": 442875209,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616312
    },
    {
        "content": "<p>So it has to be split (maybe should change what we generate)</p>",
        "id": 442875256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616327
    },
    {
        "content": "<p>Glue doesn't have any sense of this at all. So it passes I. The struct of closures and simply hopes for the best</p>",
        "id": 442875328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616354
    },
    {
        "content": "<p>well what gets generated by roc is not really a problem imo. what is a problem is that we get enough info exposed to glue code to generate the necessary stuff. if that is handled, noone will ever need to look at that code ever again. it needs not be pretty.</p>",
        "id": 442875592,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616429
    },
    {
        "content": "<p>Sure, but splitting the closures like this requires extra allocations and isn't really efficient anyway. Plus, sometimes simplifying generation may simplify the glue code and make it easier to write</p>",
        "id": 442876019,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616554
    },
    {
        "content": "<p>But yeah, for this case, if a struct contains closures you have to generate it totally different. And a closure really mains anything that contains a rocfn</p>",
        "id": 442876118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616585
    },
    {
        "content": "<p>Can you clarify exactly why rocFn needs a Vec to be called? Is it for the stack?</p>",
        "id": 442876192,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616611
    },
    {
        "content": "<p>More specifically, does it have to be a Vec, or can it be just a memory slice that is \"large enough\"?</p>",
        "id": 442876353,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616653
    },
    {
        "content": "<p>I was under impression that roc functions only do allocations via roc_alloc, is it different for the stack memory?</p>",
        "id": 442876468,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616689
    },
    {
        "content": "<p>Closure captures</p>",
        "id": 442876823,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616785
    },
    {
        "content": "<p>A roc function can capture any amount of data</p>",
        "id": 442876868,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616798
    },
    {
        "content": "<p>I see, so technically an actual pure function (not a closure) would never actually touch that vec, right?</p>",
        "id": 442876973,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616832
    },
    {
        "content": "<p>This can be stored anyway. In most cases, it probably should actually be stored on the stack ....but that doesn't play nice with the simplicity of glue gen.</p>",
        "id": 442876976,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616834
    },
    {
        "content": "<p>Yeah, if it has no captures, that vec is empty</p>",
        "id": 442877026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717616855
    },
    {
        "content": "<p>Is it not known at compile time how much memory the closures take?</p>",
        "id": 442877402,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717616978
    },
    {
        "content": "<p>It is known at roc compile time, but not at glue gen or platform compile time</p>",
        "id": 442877987,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717617139
    },
    {
        "content": "<p>right... so functions like something_something_size() are basically const, right? as in, the values they return for a given roc library build are never going to change, correct?</p>",
        "id": 442878158,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617190
    },
    {
        "content": "<p>Cuz if that is the case, I could conceivably cache the necessary allocations such that future calls into roc do not allocate memory for the captures</p>",
        "id": 442878321,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617234
    },
    {
        "content": "<p>and this is pretty much good enough for most (if not all) relevant usecases</p>",
        "id": 442878444,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617257
    },
    {
        "content": "<p>Yeah. They are const</p>",
        "id": 442878526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717617282
    },
    {
        "content": "<p>Though you do have to be careful of refcounts. If you pass a closure capture to a function, anything refcounted might be freed.</p>",
        "id": 442878721,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717617338
    },
    {
        "content": "<p>this simplifies the problem substantially, as in this case I can just make a factory for the structs that contain closures. And that factory could have a pool of those structs handy with preallocated memory</p>",
        "id": 442878816,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/442878721\">said</a>:</p>\n<blockquote>\n<p>Though you do have to be careful of refcounts. If you pass a closure capture to a function, anything refcounted might be freed.</p>\n</blockquote>\n<p>Can you elaborate?</p>",
        "id": 442878867,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617374
    },
    {
        "content": "<p>Just when you run a <code>RocFn</code>, it consumes the capture (will free refcounted things in the capture).</p>",
        "id": 442879332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717617505
    },
    {
        "content": "<p>So you can reuse the underlying memory, but you can't call the same <code>RocFn</code> repeated forever without regenerating it due to recounting.</p>",
        "id": 442879513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717617553
    },
    {
        "content": "<p>Ok I see, so whenever someone gives me a closure with that vec, the size of that vec might be different (and content, depending on what got captured by the returned closure). So I need to have a unique Vec of appropriate size ready to be filled in for every case where a RocFn might get returned. Now once I call that RocFn and have its result (and therefore am not going to call it again) I can reuse that Vec to receive another instance of that same RocFn with different closure, reusing the allocated buffer (but its contents will now be different)</p>",
        "id": 442880299,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617744
    },
    {
        "content": "<p>As a result, the safest mechanism is to just allocate a fresh Vec for every closure return from roc, as that guarantees owned memory (even though that technically is slower)</p>",
        "id": 442880528,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617815
    },
    {
        "content": "<p>Is that correct?</p>",
        "id": 442880567,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717617828
    },
    {
        "content": "<p>Yes</p>",
        "id": 442881805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717618207
    },
    {
        "content": "<p>ok... now only need to generate the stuff... wish me luck...</p>",
        "id": 442882291,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1717618353
    },
    {
        "content": "<p>Thanks for tackling this</p>",
        "id": 442882702,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717618459
    },
    {
        "content": "<p>Hello! Its been awhile since checked in on this. I wanted to ask what the story looks like today for trying to use Roc as a plugin system, such as within a game? Last time i was here it looked really rough (i think the issue was with the glue generation).</p>",
        "id": 475478651,
        "sender_full_name": "peeps",
        "timestamp": 1728368080
    },
    {
        "content": "<p>Here's a minimal demo I built a few weeks ago <a href=\"https://github.com/lukewilliamboswell/roc-plugin-experiment-rust\">https://github.com/lukewilliamboswell/roc-plugin-experiment-rust</a></p>",
        "id": 475484687,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728369687
    },
    {
        "content": "<p>I'd say it's still similar to when we last talked about it. There's a lot of breaking changes planned. But for building a proof of concept and exploring the ideas it's great fun! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 475484891,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728369729
    },
    {
        "content": "<p>Oh cool :) thanks for that</p>",
        "id": 475484980,
        "sender_full_name": "peeps",
        "timestamp": 1728369766
    },
    {
        "content": "<p>I have been unable to find much time to move this forward. The glue code is a bit of a mess, and my roc skills are insufficient to improve it substantially. If you want, I can give you guidance as to where the stumbling blocks are.</p>",
        "id": 475487207,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728370342
    },
    {
        "content": "<p>For the glue code, <span class=\"user-mention\" data-user-id=\"625912\">@Sven van Caem</span>  is working on that as we speak. It's super cool to see the progress he has already made finding issues.</p>",
        "id": 475487374,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728370388
    },
    {
        "content": "<p>Oh I suppose I need to get in touch with him then. Is there a zulip thread on that work?</p>",
        "id": 475487523,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728370431
    },
    {
        "content": "<p>Not really. If you have specific things you've discovered, I think it would be helpful to start a thread about it. Sven would be best placed to decide if it's in scope for the things he's working on. I know he has a bit of a plan he's tracking, but maybe he's looking for ideas too.</p>",
        "id": 475487955,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728370531
    },
    {
        "content": "<p>Ok I'll ping Sven directly</p>",
        "id": 475496447,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728372637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/411256844\">said</a>:</p>\n<blockquote>\n<p>Current roadmap is here<br>\n<a href=\"https://github.com/alexpyattaev/roc-plugin-example/issues/3\">https://github.com/alexpyattaev/roc-plugin-example/issues/3</a></p>\n</blockquote>\n<p>fyi we’d be happy to talk you through plugin setup for Bones, a Bevy-derived engine that’s made specifically to be scripting-friendly, currently supporting Lua (piccolo).</p>",
        "id": 475616761,
        "sender_full_name": "Erlend Sogge Heggen",
        "timestamp": 1728406174
    },
    {
        "content": "<p><a href=\"https://github.com/fishfolk/bones\">https://github.com/fishfolk/bones</a></p>",
        "id": 475616771,
        "sender_full_name": "Erlend Sogge Heggen",
        "timestamp": 1728406177
    },
    {
        "content": "<p>Oh hi, i think i saw a video of someone talking about Bones in a Bevy talk/meetup a few days ago. Small world lol.</p>",
        "id": 475618289,
        "sender_full_name": "peeps",
        "timestamp": 1728406665
    },
    {
        "content": "<p>I specifically do not want to use lua for scripting:) consider that a religious opposition to 1-indexed arrays.</p>",
        "id": 475634584,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728411184
    },
    {
        "content": "<p>Yeah I’m talking about using Roc instead of Lua, e.g. on an engine like Bones. Bones isn’t Lua-specific and it’s more scripting-lang friendly than Bevy, so it could be a good testing ground for roc plugins, if anyone gets the itch, heh.</p>",
        "id": 476605265,
        "sender_full_name": "Erlend Sogge Heggen",
        "timestamp": 1728825019
    },
    {
        "content": "<p>How can an engine be scripting-unfriendly? Or scripting-friendly, for that matter?</p>",
        "id": 476605651,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728825364
    },
    {
        "content": "<p>Bevh has a neat DI setup, and it's the idiomatic way. But using a raw imperative machinery sitting behind the DI facade may be not so nice, especially with Roc. At least this is my naive vision right now.</p>",
        "id": 476610196,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1728829532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"524817\">@Erlend Sogge Heggen</span> any quick link to what your plugin api currently looks like? I assume you specify and speak c abi somewhere?</p>",
        "id": 476623263,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728840906
    },
    {
        "content": "<p>The idea is to have ABI via hot reload crate or dextrous developer crate for bevy. So essentially the roc platform is a rust shim that on one hand has a api for the game engine, and on the other provides the needed machinery to call into roc. The reason it needs to happen this way is due to how roc linking works. Basically you either compile roc into a basic .so with C abi (which is unsafe), or you make a platform and link against that, and that can in turn provide a nice API for rust.<br>\nCurrent wip here <a href=\"https://github.com/alexpyattaev/roc-plugin-example\">https://github.com/alexpyattaev/roc-plugin-example</a></p>",
        "id": 476624144,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728841797
    },
    {
        "content": "<p>I meant specific for bones, just was kinda curious what api lua is consuming</p>",
        "id": 476624342,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728841965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476623263\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"524817\">Erlend Sogge Heggen</span> any quick link to what your plugin api currently looks like? I assume you specify and speak c abi somewhere?</p>\n</blockquote>\n<p>&lt; <a href=\"https://github.com/fishfolk/bones?tab=readme-ov-file#bones-scripting\">https://github.com/fishfolk/bones?tab=readme-ov-file#bones-scripting</a> &gt;<br>\n<a href=\"https://fishfolk.org/blog/introducing-lua-scripting-in-jumpy/\">https://fishfolk.org/blog/introducing-lua-scripting-in-jumpy/</a><br>\n<a href=\"https://fishfolk.github.io/bones/rustdoc/bones_schema/index.html\">https://fishfolk.github.io/bones/rustdoc/bones_schema/index.html</a></p>",
        "id": 476626759,
        "sender_full_name": "Erlend Sogge Heggen",
        "timestamp": 1728844203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> made this one recently which looks interesting: <a href=\"https://github.com/lukewilliamboswell/roc-plugin-experiment-rust\">https://github.com/lukewilliamboswell/roc-plugin-experiment-rust</a></p>",
        "id": 476627293,
        "sender_full_name": "Erlend Sogge Heggen",
        "timestamp": 1728844664
    },
    {
        "content": "<p>This will necessarily require the plugin to have no internal state, and expose exactly one pure function. But yes, that works, and youbcan even have the platform in rust if you want. But if you want to have multiple callins it does not work.</p>",
        "id": 476627687,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728845020
    },
    {
        "content": "<p>Hey folks. <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm the lead dev for Bones.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476605651\">said</a>:</p>\n<blockquote>\n<p>How can an engine be scripting-unfriendly? Or scripting-friendly, for that matter?</p>\n</blockquote>\n<p>Bevy, when I was last involved in it was unfriendly to scripting because it made heavy use of the Rust type system and things like compile-time generated queries over it's ECS. It's also very complicated internally, which meant trying to make some of the normally static, compile-time-checked things, and convert them into runtime-only things, was pretty tricky.</p>\n<p>It's something that Bevy is getting better at, and is probably much further along than it was when I last used it.</p>\n<p>Bones, on the other hand, is really simple, and has a much smaller API surface. Also, everything in bones is designed to be able to be manipulated at runtime, so in Bones it is <em>way</em> easier to give a scripting language nearly 100% power over the engine.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476624342\">said</a>:</p>\n<blockquote>\n<p>I meant specific for bones, just was kinda curious what api lua is consuming</p>\n</blockquote>\n<p>Our Lua implementation is also written in Rust so integration was pretty easy. We didn't need to make an external C API, we  just had to use the Rust Lua library to add Lua integrations with our engine's Rust functions.</p>\n<p>We did make try to make Bones with the hope that we could make a C API for it in the future, just in case it was necessary to integrate with other scripting languages, but we haven't done it yet.</p>\n<p>Scriptable components in the ECS are also stored with a C memory layout, so as long as you know the schema of the component you can soundly cast pointers to components to C structs if you wanted to write plugins in C. The idea was hopefully to avoid any unnecessary barriers to high-performance scripting solutions. In particular, we hope this might be better than Bevy's reflection system for certain scripting languages, because you can get direct access to the component data through pointers instead of having to make calls through the Bevy Reflection system's vtable for every field access.</p>\n<hr>\n<p>I'm hardly familiar with Roc at all yet, but I'm very interested in it! I've wanted to get into some functional programming at some point after I discovered it, but hadn't had the chance to yet.</p>\n<p>If this is how Roc can work, I think the ideal way to integrate with Bones would be to make a Bones plugin so that you can compile bones as a Roc platform, hopefully making easier to call into engine functionality since Roc and Bones are both written in Rust.</p>\n<p>But it's also possible that we could make a C API for Bones, and then Roc could consume that.</p>\n<hr>\n<p>There are little rough edges here and there, but things are mostly in place to allow experimentation with this kind of stuff in Bones already.</p>",
        "id": 476638167,
        "sender_full_name": "Zicklag",
        "timestamp": 1728854171
    },
    {
        "content": "<p>Oh, like, for one thing, UI in bones is done with Egui, and I'm not sure if there's an easy way to bind Egui into Roc. That doesn't stop us from making a Roc-specific/compatible UI integration, though.</p>\n<p>Egui's epaint library is really easy to use, and we could basically make a scriptable Egui component that just ignores all of the egui helpers and does everything manually, without having to change anything about UI rendering on Bones.</p>",
        "id": 476638269,
        "sender_full_name": "Zicklag",
        "timestamp": 1728854296
    },
    {
        "content": "<p>Thanks for all the info <span class=\"user-mention\" data-user-id=\"766979\">@Zicklag</span>. Roc is still in it's early stages, but we definitely hope that in the long term it can be great as a plugin language. I think that today it definitely has a few interfacing pains, but it could be used. One thing I have noticed that is hard with at least the godot api is that it is very codegen heavy. To make that play nice with roc probably means we need to do a lot of code gen on the interface and platform side to map from the low level primitives godot expects to roc. While doable, it makes the project a lot more tedious.</p>\n<p>On the other hand, something like raylib is really easy to integrate with roc (just takes time to wrap all the functions). Fundamentally, it is all static C calls with no codegen or overly dynamic interfacing to deal with.</p>\n<p>I think for a lot of the plugin use cases, the amount of dynamism in the api will be a big decider in how complex it is to integrate with roc.</p>",
        "id": 476642112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728858553
    },
    {
        "content": "<p>Ok I understand. Yes, bevy does have these features, but in the end your script would never have access to the entire world state in any multiplayer game (for netsync reasons if nothing else). So I am not sure if that is indeed a problem. Also if you are so inclined you can run a system in bevy that locks the entire ecs and gets exclusive access to everything.</p>",
        "id": 476642477,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728858910
    },
    {
        "content": "<p>If Bones gives direct pointers, does that mean that your Bones scripting component could be something like an opaque RocArena, so that you could edit Roc scripts without recompiling the rust project at all?</p>",
        "id": 476651769,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728868837
    },
    {
        "content": "<p>Like you could have global roc heap in the equivalent of a Bevy Resource, and a bunch of entity-specific roc heaps so that you actually get (some of) the benefit of the ECS. I'm thinking you'd have some kind of standard default script system that would have an already-compiled-in way for roc to touch the rapier components.</p>",
        "id": 476652203,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728869232
    },
    {
        "content": "<p>I'm not very familiar with how Roc code is executed but roughly it <em>sounds</em> like that would work.</p>",
        "id": 476666615,
        "sender_full_name": "Zicklag",
        "timestamp": 1728876364
    },
    {
        "content": "<p>The way we do Lua code is we load it as an asset.</p>",
        "id": 476666665,
        "sender_full_name": "Zicklag",
        "timestamp": 1728876388
    },
    {
        "content": "<p>Then we we have systems that will go and run the lua code at certain times, such as update, pre-update, etc.</p>",
        "id": 476666756,
        "sender_full_name": "Zicklag",
        "timestamp": 1728876433
    },
    {
        "content": "<p>Yeah, you would just be loading a shared library and calling into it most likely</p>",
        "id": 476668714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877306
    },
    {
        "content": "<p>That is exactly how most such systrns work. Except you generally have a whole buch of things you may want to call in the plugin. And you generally want to allow the plugin to somehow generate effects in the engine and call helper functions there to perform compute work that may be specific to your app.</p>",
        "id": 476676605,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728881200
    },
    {
        "content": "<blockquote>\n<p>whole buch of things you may want to call in the plugin</p>\n</blockquote>\n<p>That should be doable now in roc. You can expose as many functions as you like</p>\n<blockquote>\n<p>somehow generate effects in the engine</p>\n</blockquote>\n<p>Yeah, platform apis can be complex for plugins cause they may be overly dynamic. In roc, that may turn into talking via some sort of tagged type that can represent any data. Cause that would be needed for type safety. That or you have to expand glue to generate part of the platform based on the api that the roc plugin requests ( this is what I think will end up working best for godot)</p>",
        "id": 476677479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728881812
    },
    {
        "content": "<p>Coming from some minimal hobby experience with bevy, the thing I was wanting to avoid is generating/writing rust structs that have to be compiled when making changes roc-side (or giving up type safety). Which might be completely unreasonable. Roc can't do the \"it's just an asset\" thing really, but maybe you can make it feel like that if the stuff you usually want to do is all in the glue, and you don't have to like, run code gen or macros on a per-query-type basis.</p>",
        "id": 476679851,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728883476
    },
    {
        "content": "<p>Yeah, I understand that sentiment. Due to being strongly typed (and not the most friendly api), I only can see 2 ways to really handle this in roc:</p>\n<ol>\n<li>Have glue generate some rust to deal with mapping</li>\n<li>make everything run through a super flexible interface and then map to the correct roc functions. For example, function calls could take an int or string name to specify which function. Then the args and return type would both just be a list of a generic tag union that could hold any data the engine cares about. That or if the engine doesn't need to know exactly what the data is in some cases, just box everything.</li>\n</ol>\n<p>I guess 3 would be to manually deal with mapping, but then writing roc also means writing rust wrappers or whatever platform language for the plugin</p>",
        "id": 476680908,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728884238
    },
    {
        "content": "<p>There is another option. You can slap a proc-macro on all the structs you need, which would produce roc signatures during compilation of the engine. Then a small build script to glue the whole thing into a coherent platform code. Finally, import all of that into roc plugin code and you are in business. Strict typing and full compatibility. The only issue will be that some rust datastructures may be mutable in a way that is not roc-friendly (such as hashmaps) so you would have to somehow work around that if you want mutable access.</p>",
        "id": 476685871,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1728886625
    },
    {
        "content": "<p>In bones we already have a runtime reflection / schema system that is meant to let the scripting system bind to almost any structs stored in the ECS. You could use those runtime schemas to generate all of the Roc glue code that you need for each type.</p>",
        "id": 476797622,
        "sender_full_name": "Zicklag",
        "timestamp": 1728915083
    },
    {
        "content": "<p>In my recent Bevy meetup talk I gave an overview of how the schema system works:</p>\n<p><a href=\"https://youtu.be/7tvAg4gntmE?si=4HuZb4wQeraahY5Z&amp;t=767\">https://youtu.be/7tvAg4gntmE?si=4HuZb4wQeraahY5Z&amp;t=767</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"7tvAg4gntmE\" href=\"https://youtu.be/7tvAg4gntmE?si=4HuZb4wQeraahY5Z&amp;t=767\"><img src=\"https://uploads.zulipusercontent.net/f2e455009d78d6345b2aa9657294cd1fc1dbb6bf/68747470733a2f2f692e7974696d672e636f6d2f76692f377476416734676e746d452f64656661756c742e6a7067\"></a></div>",
        "id": 476797778,
        "sender_full_name": "Zicklag",
        "timestamp": 1728915127
    },
    {
        "content": "<p>Does bones have a way to dynamically generate ECS queries? And is it possible to have the same component type go in different ECS storage based on some runtime thing? Like monsters with aggressive: true get moved to AggressiveMonsters to get packed together?</p>",
        "id": 476807376,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728918327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430894\">Dan G Knutson</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476807376\">said</a>:</p>\n<blockquote>\n<p>Does bones have a way to dynamically generate ECS queries? And is it possible to have the same component type go in different ECS storage based on some runtime thing? Like monsters with aggressive: true get moved to AggressiveMonsters to get packed together?</p>\n</blockquote>\n<p>There is a way to generate ECS queries at runtime, but Bones is a rather simplistic ECS and doesn't have different kind of storages right now.</p>\n<p>I think we will migrate to a sparse-set based storage later, but right now each component type has it's own storage which is ( sort of ) a sparse <code>Vec&lt;MaybeUninit&lt;Component&gt;&gt;&gt;</code> and a bitmap that has a bit set for every entity ID that has that component.</p>\n<p>Queries such as \"all entities that have component <code>A</code> and not component <code>B</code>\" can be created just by doing bitset <code>and</code> and <code>not</code> operations on the bitsets for the global <code>Entities</code> resource, the <code>A</code> component bitset and the <code>B</code> component bitset.</p>",
        "id": 476809749,
        "sender_full_name": "Zicklag",
        "timestamp": 1728919195
    },
    {
        "content": "<p>Sweet! I'm thinking of how possible it is to get an ECS-focused Roc scripting API that could be the main home of a game (rather than just modding). Dynamic queries sounds like it means you could define new query types in Roc without a codegen step. Storage-wise, you could do what I said earlier, and have like a GlobalRocArena resourcey thing and an EntityRocArena component, and then query for everything with an EntityRocArena. The ECS storage based on flags was because I was thinking that an EntityRocArena could expose something like a set of roc type ids to bones for querying (so you wouldn't have to ask for all scriptable objects).</p>",
        "id": 476812137,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728920016
    },
    {
        "content": "<p>Thanks for showing up and answering questions! I'm excited about Bones because it seems like a nice fit for the kind of games I want to make.</p>",
        "id": 476812317,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728920074
    },
    {
        "content": "<p>No problem! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 476812382,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920094
    },
    {
        "content": "<p>I've also been quite interested in the possibility of using Bones as an engine for games written completely using the scripting system.</p>",
        "id": 476812473,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920121
    },
    {
        "content": "<p>The ECS and schema system is also designed so that you can create runtime defined components.</p>",
        "id": 476812957,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920286
    },
    {
        "content": "<p>well that's just way better <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 476813160,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728920397
    },
    {
        "content": "<p>I'm not sure exactly how Roc types / structs work, but the idea is that you could have a struct, and you create a description of it, like it's called <code>Pos</code> and has two <code>f32</code> fields named <code>x</code> and <code>y</code>, and you register that Schema with the system and get back a unique-for-the-process <code>SchemaId</code>.</p>",
        "id": 476813209,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920403
    },
    {
        "content": "<p>You are then allowed to add/read/write <code>Pos</code> components for any entities in the ECS.</p>",
        "id": 476813290,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920435
    },
    {
        "content": "<p>The schema gives the ECS all the info necessary.</p>",
        "id": 476813313,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920446
    },
    {
        "content": "<p>This allows you to even combine multiple scripting languages in the same game.</p>",
        "id": 476813350,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920464
    },
    {
        "content": "<p>So if you created a component in Roc, and added it to an entity, a Lua script could import that Roc component by name, and then access it's fields using it's knowledge of the schema to automatically resolve field names like <code>x</code> and <code>y</code>.</p>",
        "id": 476813529,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920531
    },
    {
        "content": "<p>And that's how we expose the core types and assets that are written in Rust to scripts, too. Each Rust struct derive's the <code>HasSchema</code> trait, which allows it to be stored in the ECS, and if you additionally have the <code>#[repr(C)]</code> annotation on the Rust struct, then it includes the memory layout info so that scripts can access it's fields.</p>",
        "id": 476813679,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920590
    },
    {
        "content": "<p>Bones seems very attractive but I just dont see myself not using Bevy at this point. :/</p>",
        "id": 476814164,
        "sender_full_name": "peeps",
        "timestamp": 1728920772
    },
    {
        "content": "<p>I think exposing the fields from Roc structs/records to bones would be tricky, but you could make a lot of game without that.</p>",
        "id": 476814203,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728920792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430894\">Dan G Knutson</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476814203\">said</a>:</p>\n<blockquote>\n<p>I think exposing the fields from Roc structs/records to bones would be tricky, but you could make a lot of game without that.</p>\n</blockquote>\n<p>You can also just create \"Opaque\" schemas.</p>",
        "id": 476814285,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920828
    },
    {
        "content": "<p>That means, you say, \"here's the size and alignment of the data I need to store in the ECS, and that's all I'm telling you about it\".</p>",
        "id": 476814329,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920854
    },
    {
        "content": "<p>This means that only Roc would be able to access the data, because only it knows what it is, but that can be perfectly fine for many use-cases.</p>",
        "id": 476814447,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920895
    },
    {
        "content": "<p>You still get to take advantage of the ECS's component storage and queries.</p>",
        "id": 476814473,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920908
    },
    {
        "content": "<p>This allows <strong>any</strong> Rust struct to implement <code>HasSchema</code>, because by default it can just be opaque, and the schema system just makes sure that you never cast it to anything other than it's correct Rust type. ( Assuming you don't use any <code>unsafe</code> APIs. )</p>",
        "id": 476814598,
        "sender_full_name": "Zicklag",
        "timestamp": 1728920980
    },
    {
        "content": "<p>So, without understanding Roc hardly at all, if I were to structure it kind of similar to how I did the Lua integration, I would think it'd be something like this:</p>\n<ul>\n<li>Roc \"scripts\" are stored in your game's asset directory as <code>.roc.so</code> files</li>\n<li>We create a custom asset loader for <code>.roc.so</code> files that does whatever DLL loading necessary, and produces, let's say a <code>RocScript</code> asset.</li>\n<li>We create a YAML asset type ( bones has a built-in YAML asset hierarchy loader thing ), that you can use to specify which <code>.roc.so</code> script you want to run in which stage of the game, such as <code>pre-update</code>, <code>update</code>, <code>post-update</code>, etc.</li>\n<li>Then we have a game system in each stage and run like some sort of \"main\" function in each script that is listed in the YAML asset for this stage.</li>\n</ul>",
        "id": 476815346,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921289
    },
    {
        "content": "<p>You could come up with any other way that you wanted to control when the Roc scripts are run, though.</p>",
        "id": 476815435,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476814164\">said</a>:</p>\n<blockquote>\n<p>Bones seems very attractive but I just dont see myself not using Bevy at this point. :/</p>\n</blockquote>\n<p>Bevy is really cool! But the two kinds of games I'm interested in are 2D single-player strategy stuff, and the kinds of rollback-based 2D multiplayer that Bones is made for. If I want 2-player Celeste physics, then the bevy scheduler stuff feels like a net negative vs \"write the steps in order\". Very different than a AAAish thing where you'd have background tasks and GPU state or whatever to worry about. Like, bevy is giving up determinism to get parallelism, but I want the opposite.</p>",
        "id": 476815464,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728921327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476814164\">said</a>:</p>\n<blockquote>\n<p>Bones seems very attractive but I just dont see myself not using Bevy at this point. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>\n</blockquote>\n<p>Yeah, Bevy is much more advanced, which can be useful for some games. And Bones is a little rough around the edges. </p>\n<p>Bones's super power is probably being relatively simple. We're also hoping to make it nicer to use as we find time, so that other people can get the most out of it without as much learning curve, too.</p>",
        "id": 476815880,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921475
    },
    {
        "content": "<p>We recently had the first person outside of our core team start seriously making a game with it, and they've had some great ideas and input.</p>",
        "id": 476816068,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921545
    },
    {
        "content": "<p>It looks like it's feasible for us to really zero in on the easy small-ish network-multiplayer enabled game niche.</p>",
        "id": 476816146,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430894\">Dan G Knutson</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476815464\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476814164\">said</a>:</p>\n<blockquote>\n<p>Bones seems very attractive but I just dont see myself not using Bevy at this point. :/</p>\n</blockquote>\n<p>Bevy is really cool! But the two kinds of games I'm interested in are 2D single-player strategy stuff, and the kinds of rollback-based 2D multiplayer that Bones is made for. If I want 2-player Celeste physics, then the bevy scheduler stuff feels like a net negative vs \"write the steps in order\". Very different than a AAAish thing where you'd have background tasks and GPU state or whatever to worry about.</p>\n</blockquote>\n<p>Yeah  i can definitely see its potential. im just a big fan boy and my current serious game is already significantly completed in Bevy so porting it to Bones for the scripting is just not gonna happen. I have no idea what kind of hurdles il face with Bones (especially since its a very new engine) so theres a chance id have to retreat back to Bevy anyway. But its definitely on my radar now and one day I will revisit it. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 476816504,
        "sender_full_name": "peeps",
        "timestamp": 1728921690
    },
    {
        "content": "<p>Oh, yeah, if you've already got any significant amount of stuff in Bevy, you most likely want to stay there.</p>\n<p>There are things that we've left out of Bones for simplicity that we haven't found we've needed, but when you are already using them, might be difficult to get away from.</p>",
        "id": 476816807,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921793
    },
    {
        "content": "<p>Like, we don't have transform hierarchies.</p>",
        "id": 476816854,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921813
    },
    {
        "content": "<p>We don't have events either.</p>",
        "id": 476816863,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"766979\">Zicklag</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476816068\">said</a>:</p>\n<blockquote>\n<p>We recently had the first person outside of our core team start seriously making a game with it, and they've had some great ideas and input.</p>\n</blockquote>\n<p>I think its really interesting and i look forward to seeing how it evolves! I have to admit tho, a part of me wished u had used ur energy to like fork Bevy or something so its still Bevy but with the same scripting powers, lol. Please dont take that the wrong way. Im not trying to imply u made a bad decision. Just would have been nice for me specifically :)</p>",
        "id": 476816923,
        "sender_full_name": "peeps",
        "timestamp": 1728921839
    },
    {
        "content": "<p>The lack of events was due to trying to avoid re-allocating event queues on snapshot / restore. We might find a way to do this efficiently later, events can be handy.</p>",
        "id": 476817046,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"766979\">Zicklag</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476816863\">said</a>:</p>\n<blockquote>\n<p>We don't have events either.</p>\n</blockquote>\n<p>Maybe for the best lol. I prefer using hooks/observers, they're really awesome.</p>",
        "id": 476817060,
        "sender_full_name": "peeps",
        "timestamp": 1728921887
    },
    {
        "content": "<p>bevy_mod_scripting is a thing!</p>",
        "id": 476817063,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728921889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476816923\">said</a>:</p>\n<blockquote>\n<p>Please dont take that the wrong way.</p>\n</blockquote>\n<p>Hehe, yeah, I get it. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 476817132,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921915
    },
    {
        "content": "<p>Bevy's actually pretty close already on scripting!</p>",
        "id": 476817157,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921926
    },
    {
        "content": "<p>I use <code>bevy_mod_js_scripting</code> before I made Bones.</p>",
        "id": 476817177,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921937
    },
    {
        "content": "<p>In fact I added the support for the web platform to it and did some other contribution, too.</p>",
        "id": 476817215,
        "sender_full_name": "Zicklag",
        "timestamp": 1728921956
    },
    {
        "content": "<p>The internals were pretty complicated and I didn't understand them all, and I'm not sure if it works with latest Bevy anymore, though.</p>",
        "id": 476817346,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922011
    },
    {
        "content": "<p>But I think Bevy will definitely have the abilities necessary for scripting in the future, if it's not already there and just waiting for an update to a scripting integration.</p>",
        "id": 476817376,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430894\">Dan G Knutson</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476817063\">said</a>:</p>\n<blockquote>\n<p>bevy_mod_scripting is a thing!</p>\n</blockquote>\n<p>Yeaaaah i dont want to get into it but there were some pain points for me specifically that dissuaded me. Im also interested in no-perf-compromise solutions which i dont think that crate provides (but correct me if im wrong). I have imagined a game that has no \"core vs mods\" structure. Everything is a mod, including the base code, but the modding needs to be near-native performance to achieve that for every game, not just the small ones. I just find a fully modular game like that interesting and I want to try it for a future game I have in mind.</p>",
        "id": 476818098,
        "sender_full_name": "peeps",
        "timestamp": 1728922348
    },
    {
        "content": "<p>Fair enough; I haven't really used it. I had a maybe-similar disappointment where I got excited about the johan helsing bevy rollback / matchbox tutorials, and then it seemed like his own project descended into a debugging-non-determinism hell.</p>",
        "id": 476818487,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1728922532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476818098\">said</a>:</p>\n<blockquote>\n<p>Im also interested in no-perf-compromise solutions which i dont think that crate provides (but correct me if im wrong).</p>\n</blockquote>\n<p>I'm trying to think back to it. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I think that for native ( non-web ) it was pretty close to being as performant as you could get with Bevy's reflection system. The thing that seemed to me that might be a performance limitation was having to make an indirect function call for every field read or write.</p>\n<p>But like, as far as using JS for a scripting language at all, I don't know that that's really that bad. JS might be more of your problem than anything else there.</p>",
        "id": 476818808,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922653
    },
    {
        "content": "<p>For web it was really bad performance-wise.</p>",
        "id": 476818825,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922662
    },
    {
        "content": "<p>Calling out of WASM into the Browser's JS engine was really slow and you had to do it constantly.</p>",
        "id": 476818950,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476818098\">said</a>:</p>\n<blockquote>\n<p>but the modding needs to be near-native performance to achieve that for every game, not just the small ones.</p>\n</blockquote>\n<p>yeah, that was part of the motivation for making schemas instead of <code>Box&lt;dyn Reflect&gt;</code> objects like in Bevy.</p>",
        "id": 476819028,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922746
    },
    {
        "content": "<p>If you needed maximum performance it seemed like the best way to do it would be to cast a raw pointer to a matching type in your script so that you could operate on it directly without calling functions.</p>",
        "id": 476819134,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922799
    },
    {
        "content": "<p>But I'm not actually sure if that's <em>truly</em> going to be able to unlock the perf advantages I may have imagined. I just wanted to make sure I didn't build a bottleneck into the system that would hurt me later.</p>",
        "id": 476819294,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922851
    },
    {
        "content": "<p>Scripting has been a big goal of mine since I got into making games after modding the old Star Wars Battlefront games.</p>",
        "id": 476819349,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922880
    },
    {
        "content": "<p>And I couldn't stand that there was often a division between the \"game\" and the \"mods\", so that the mods could only work on the small pieces of the game that the game exposed to them.</p>",
        "id": 476819412,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"766979\">Zicklag</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476818808\">said</a>:</p>\n<blockquote>\n<p>The thing that seemed to me that might be a performance limitation was having to make an indirect function call for every field read or write.</p>\n</blockquote>\n<p>Yeah its stuff like that that can turn off some people, i.e. someone trying to make a crazy 3D game with a big simulated world (with multiplayer co-op). In those cases everything starts to add up. But for a 2D turned based game? JS is perfectly fine. Bones is interesting cus its concerned with the scripting stuff right off the bat, so theres a potential there to achieve that dream lol.</p>",
        "id": 476819487,
        "sender_full_name": "peeps",
        "timestamp": 1728922937
    },
    {
        "content": "<p>This created a divide between the game makers who could work on the \"deep arts\" of the game, and on some games left the modders wishing the game developers could give them more access.</p>",
        "id": 476819532,
        "sender_full_name": "Zicklag",
        "timestamp": 1728922952
    },
    {
        "content": "<p>That's one reason I went to ECS. I was thinking, \"having to make function call bindings manually to all aspects of the game is always going to make modders second class citizens\".</p>",
        "id": 476819637,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923014
    },
    {
        "content": "<p>But with ECS, there is one static game API, and the rest of it is all <em>data</em>.</p>",
        "id": 476819679,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923035
    },
    {
        "content": "<p>So if we can generate automatic bindings to the <em>data</em> we can let mods do almost anything.</p>",
        "id": 476819751,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923056
    },
    {
        "content": "<p>Almost.</p>",
        "id": 476819772,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923064
    },
    {
        "content": "<p>It's a lot better anyway, and doesn't take a large amount of effort by the game maker in many cases.</p>",
        "id": 476819794,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923076
    },
    {
        "content": "<p>I like that mods can do things in the game that the game developer hasn't even thought of yet.</p>",
        "id": 476819905,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923120
    },
    {
        "content": "<p>Just by allowing them to stick their hands right into the game and mess with all kinds of stuff. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 476819951,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"766979\">Zicklag</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476819532\">said</a>:</p>\n<blockquote>\n<p>This created a divide between the game makers who could work on the \"deep arts\" of the game, and on some games left the modders wishing the game developers could give them more access.</p>\n</blockquote>\n<p>Yess exactly. This is the exact situation i been trying to avoid with my current game. I recently scrapped my last idea on how to mod it cus i just didnt like it, but it had the potential to avoid this problem by essentially exposing everything.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"766979\">Zicklag</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476819637\">said</a>:</p>\n<blockquote>\n<p>That's one reason I went to ECS. I was thinking, \"having to make function call bindings manually to all aspects of the game is always going to make modders second class citizens\".</p>\n</blockquote>\n<p>I actually realized something like that pretty recently. When i was thinking about the modding of my current game, i realized that were some things that bevy just took care care of for me. For example, i dont need to code anything to allow someone to insert a system into a schedule or before/after a specific system. Bevy just lets u do it. So part of the modding api was just bevy being bevy lol.</p>",
        "id": 476820084,
        "sender_full_name": "peeps",
        "timestamp": 1728923179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675776\">peeps</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476819487\">said</a>:</p>\n<blockquote>\n<p>Bones is interesting cus its concerned with the scripting stuff right off the bat, so theres a potential there</p>\n</blockquote>\n<p>Yeah, there is some question as to how performant the Bones ECS itself can be, since it's really pretty simple, but we also realized that having the ECS itself be super parallel and performant may not really be the best way to make advanced performant games all the time anyway.</p>\n<p>For example, one game that might get ported to bones from our community is a sand simulation game: <a href=\"https://github.com/spicylobstergames/astratomic/\">https://github.com/spicylobstergames/astratomic/</a></p>\n<p>It's got very performance intensive simulations, but all that has to be parallelized and optimized independent of the ECS anyway. If you've got large simulation structures and such, you could possibly optimize it better by storing it in a data structure optimized for that simulation.</p>\n<p>The ECS may not be the bottleneck in actual performance critical games.</p>\n<p>And even though the rest of bones isn't really focused on multi-threading, we did leave the possibility open for multi-threaded schedulers that work similar to Bevy.</p>\n<p>And the renderer can be multi-threaded without the rest of the game being multi-threaded, too.</p>",
        "id": 476820867,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923467
    },
    {
        "content": "<p>Bevy itself will undoubtedly be more performant that Bones in probably any metric ( other than maybe scripting ), but we're not yet sure if that actually means you can't make at least semi-performance-critical games in bones. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 476821281,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923624
    },
    {
        "content": "<p>And we're of course still interested in improving performance where it helps, without making things overly complicated.</p>\n<p>Bones can be reasonably understood in completeness by one person right now, which is important to me.</p>",
        "id": 476821462,
        "sender_full_name": "Zicklag",
        "timestamp": 1728923703
    },
    {
        "content": "<p>Well based on all that, it seems you got ur head screwed on straight, lol. Bones seems to be in capable hands <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"766979\">Zicklag</span> <a href=\"#narrow/stream/231634-beginners/topic/Plugins.20in.20roc/near/476821281\">said</a>:</p>\n<blockquote>\n<p>Bevy itself will undoubtedly be more performant that Bones in probably any metric ( other than maybe scripting ), but we're not yet sure if that actually means you can't make at least semi-performance-critical games in bones. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>No! I believe in you. Make it go brrr!</p>",
        "id": 476822824,
        "sender_full_name": "peeps",
        "timestamp": 1728924330
    },
    {
        "content": "<p>I'm curious what this plugin use-case looks like post-purity-inference. In particular, I'd like to find a way for a platform using the embedded/plugin workflow to load a compiled roc dynamic library (built with --no-link) at runtime. It looks like the rust crates people use for this kind of thing are <code>libloading</code> and <code>pluginator</code>, but I'm not sure how to go about making the roc_fx functions available to the loaded library.</p>",
        "id": 481855402,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1731381335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430894\">Dan G Knutson</span> <a href=\"#narrow/channel/231634-beginners/topic/Plugins.20in.20roc/near/481855402\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how to go about making the roc_fx functions available to the loaded library.</p>\n</blockquote>\n<p>we actually want to simplify how that works too, by changing it so that you pass those in as a struct of function pointers when you call the compiled Roc function</p>",
        "id": 481855762,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731381531
    },
    {
        "content": "<p>and then the compiled Roc code automatically passes a pointer to that struct of function pointers around to all the inner Roc calls so they can all access them</p>",
        "id": 481855800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731381554
    },
    {
        "content": "<p>so then there's no two-way linking needed, you just link in the Roc function and call it passing a pointer to an ordinary struct of function pointers for <code>roc_alloc</code> and friends</p>",
        "id": 481855841,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731381580
    },
    {
        "content": "<p>it definitely simplifies that boundary a lot, but it's also a nontrivial project to implement <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 481855864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731381600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/231634-beginners/topic/Plugins.20in.20roc/near/481855800\">said</a>:</p>\n<blockquote>\n<p>and then the compiled Roc code automatically passes a pointer to that struct of function pointers around to all the inner Roc calls so they can all access them</p>\n</blockquote>\n<p>Oh, that would be so much nicer than having to double-link. Currently do you have to actually load the roc shared library, and then have the roc shared library load the host library ( or something like that )?</p>\n<p>Are there any roc linking/loading examples?</p>",
        "id": 481856225,
        "sender_full_name": "Zicklag",
        "timestamp": 1731381769
    },
    {
        "content": "<p>all the current platform examples have to do the double-linking</p>",
        "id": 481856770,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731382082
    },
    {
        "content": "<p>Is there a way to do that double-linking at runtime today with libloading? Or would it boil down to some kind of manually-passed-around record of effectful functions?</p>",
        "id": 481857107,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1731382255
    },
    {
        "content": "<p>Currently, the plugin shared library just expects to be able to grab existing exposed functions in the host for each of the <code>roc_</code> platform functions. Depending on your link settings, this may or may not work. It is kinda like taboo instead of proper shared library use. The shared library is just grabbing and calling functions out of the host. So a circular dependency between the host and shared library. It is bad form, but generally just works (though tends to break with musl build)</p>",
        "id": 481857130,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731382265
    },
    {
        "content": "<p>The future will be a manual made record of function pointers passed from the host to roc</p>",
        "id": 481857184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731382304
    },
    {
        "content": "<p>ah, I'm learning things about linking. the current method is relying on name resolution/conventions, so we'd expect it to 'just work' (even loading a library at runtime) without passing the effectful functions around?</p>",
        "id": 481857299,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1731382361
    },
    {
        "content": "<p>like, does a platform loading a compiled roc dynamic library at runtime actually need to do much of anything differently?</p>",
        "id": 481857476,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1731382458
    },
    {
        "content": "<p>It just needs to make sure the functions that roc needs are dynamically exposed. Otherwise when roc calls them, name resolution will fail.</p>",
        "id": 481857872,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731382697
    },
    {
        "content": "<p>In a lot of programming languages with default compiliation setup, this just means ensuring that the functions don't get cleaned up due to dead code elimination. In some cases, it means jumping through a few extra hoops to force the linker to keep the function dynamically exposed.</p>",
        "id": 481857992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731382792
    },
    {
        "content": "<p>I thought the last time we discussed it, the main blocker for upgrading to have passed in allocators was module params and purity inference. Is this unblocked now if someone was motivated to implement it? It's basically just passing an extra parameter to every function in a module (a record with the <code>roc_alloc</code>, <code>roc_dbg</code> function etc).</p>",
        "id": 481871312,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731391736
    },
    {
        "content": "<p>It would also include the available effects, but yeah, I think it could be done now if someone is motivated.</p>",
        "id": 481871839,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731392062
    },
    {
        "content": "<p>Implicit param to all functions plus automatic dispatch on any effect call or builtin call to a special roc method like allocators</p>",
        "id": 481871934,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731392116
    },
    {
        "content": "<p>Ah, OK, cool, that doesn't sound as bad as I thought, then. I think that should be perfectly usable enough.</p>",
        "id": 481964622,
        "sender_full_name": "Zicklag",
        "timestamp": 1731422353
    }
]