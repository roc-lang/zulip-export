[
    {
        "content": "<p>I've got a use case that involves type inference, and I'd like to ensure that the data earlier in the program doesn't infer to have a field, in this case <code>style: Str</code>. Heres a code example of what I'd like to do, but it doesn't compile:</p>\n<div class=\"codehilite\"><pre><span></span><code>style = &quot;some css&quot;\naddStyle : {}a -&gt; { style : Str }a\naddStyle = \\r -&gt; { r &amp; style }\n</code></pre></div>\n<p>My though is that the <code>a</code> would 'eat' the <code>style: Str</code>, and give the intended behavior</p>\n<p>If <code>addStyle</code> infers that it should return <code>{style: Str, foo: Bool}*</code>, then it would infer that it should take <code>{foo: Bool}*</code>. Do I have the wrong mental model, or is this not possible right now?</p>",
        "id": 447054505,
        "sender_full_name": "Trevor Settles",
        "timestamp": 1719372982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479378\">@Trevor Settles</span> the <code>&amp;</code> record update syntax cannot change the structure of the record, nor can anything really in Roc. The only way to do that is to manually copy over the fields you want to a new record.</p>",
        "id": 447119650,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719376228
    },
    {
        "content": "<p>And there's not any way (as far as I know) to do what you're trying here, besides with the current style of record builders</p>",
        "id": 447119699,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719376277
    },
    {
        "content": "<p>But that's much fancier than what you're trying to do</p>",
        "id": 447119712,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719376289
    },
    {
        "content": "<p>So the way is to define something like</p>\n<div class=\"codehilite\"><pre><span></span><code>Element : { tag: Str, content: Str, style: Str }\n\nnewElem : Str -&gt; Element\nnewElem = \\tag -&gt; { tag, content: &quot;&quot;, style: &quot;&quot; }\n\naddStyle : { style : Str }a -&gt; { style : Str }a\naddStyle = \\r -&gt; { r &amp; style: &quot;some css&quot; }\n\ncoloredDiv =\n    newElem\n    |&gt; addStyle\n</code></pre></div>",
        "id": 447119909,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719376440
    },
    {
        "content": "<p>Thanks for the suggestion! I'm doing json parsing, and HTML gen with RTL, so I'm really trying to lean into the type inference. I ended up getting around this by adding a <code>style</code> key in the json I was taking in</p>",
        "id": 447120756,
        "sender_full_name": "Trevor Settles",
        "timestamp": 1719376716
    },
    {
        "content": "<p>Oh, if you're trying to decode JSON with an optional field, the <code>OptionOrNull</code> type can handle that <a href=\"https://github.com/lukewilliamboswell/roc-json/blob/main/package/OptionOrNull.roc\">https://github.com/lukewilliamboswell/roc-json/blob/main/package/OptionOrNull.roc</a></p>",
        "id": 447121171,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719376855
    },
    {
        "content": "<p>Your Roc code will still need the field, but you can avoid needing to add optional fields in the JSON.</p>",
        "id": 447121308,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719376905
    },
    {
        "content": "<blockquote>\n<p><code>addStyle = \\r -&gt; { r &amp; \"some css\" }</code></p>\n</blockquote>\n<p>should be:<br>\n<code>addStyle = \\r -&gt; { r &amp; style: \"some css\" }</code></p>",
        "id": 447121527,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719376965
    },
    {
        "content": "<p>But you would need to extract it from the <code>OptionOrNull</code> type using <code>OptionOrNull.getResult |&gt; Result.withDefault</code></p>",
        "id": 447121728,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719377014
    },
    {
        "content": "<p>Yeah, whoops</p>",
        "id": 447121750,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719377019
    }
]