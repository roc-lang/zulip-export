[
    {
        "content": "<p>I'm finding the roc track really fun, I've solved about 58 exercises.</p>\n<p>However, I'm starting to get to the point where I feel stuck on every challenge.</p>\n<p>Does anyone have any high level advice for how to get unstuck without resorting to \"cheating\"?</p>\n<p>For example, I just solved the saddle points exercise but I had to look at the exemplar code to do it, and my solution is basically the same as a result, just with some minor differences.</p>\n<p>I want to continue solving exercises at a good pace and coming up with unique solutions but I feel like I'm not able to <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>The next exercise is <a href=\"https://exercism.org/tracks/roc/exercises/rectangles\">https://exercism.org/tracks/roc/exercises/rectangles</a> and I can already feel myself wanting to look at the example code because I don't know where to start.</p>",
        "id": 476918862,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1728976506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> or <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> should be able to give some good tips</p>",
        "id": 476955510,
        "sender_full_name": "Anton",
        "timestamp": 1728987644
    },
    {
        "content": "<p>Wow, so cool to hear you've done that many examples already! Awesome.</p>",
        "id": 476955687,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728987718
    },
    {
        "content": "<p>Wow congrats, that's awesome!</p>\n<p>You could try looking at solutions to some of the exercises in other language tracks. That could give you a good start but require you to still adapt the solution you see to Roc.</p>",
        "id": 476977890,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1728995389
    },
    {
        "content": "<p>58 exercises, wow that's impressive, we're going to have to add many more! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nI've occasionally taken a peak at the Haskell or Elm solutions: it's good to try your best for a while, but it's no use getting stuck for too long, I feel it's better to look for inspiration, learn and move on to the next exercise.<br>\nThat said, what kind of things do you get stuck on? Personally, as I come from 20+ years of imperative languages, the main difficulty is understanding how to think like a functional programming engineer. I mostly struggled on loops: generally List.walk does what I need it to, it's just not natural to me. Often, writing a little recursive function (ideally using tail recursion) is a simpler option, especially when you don't know in advance how many iterations you'll need.<br>\nHope this helps, and feel free to ask questions here if you get stuck. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 477074173,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729027929
    },
    {
        "content": "<p>Thank you for the encouragement</p>\n<blockquote>\n<p>That said, what kind of things do you get stuck on?</p>\n</blockquote>\n<p>I think I often get stuck trying to come up with a way of iterating that makes sense for the problem. Walk is useful but sometimes doesn't feel like the right fit. I like the recursive function idea.<br>\nI also sometimes struggle with the amount of ceremony needed handling things like array indexing, especially in cases where you happen to know that the array is not empty. I guess there is a skill to dealing with results in an elegant way. I have spent a fair bit of time with Elm so I should be used to this but it still sort of trips me up.</p>\n<blockquote>\n<p>You could try looking at solutions to some of the exercises in other language tracks. That could give you a good start but require you to still adapt the solution you see to Roc.</p>\n</blockquote>\n<p>Yeah that's a good idea.<br>\nI also have been prompting claude with the problem description saying \"give me high level guidance without showing any code\", and that sometimes works quite well.</p>",
        "id": 477090889,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1729036594
    },
    {
        "content": "<p>Asking an LLM for advice without spoilers is a great idea!</p>",
        "id": 477095098,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1729039005
    },
    {
        "content": "<p>Yeah, I'll try that as well! I asked Claude and ChatGPT for Roc code a few times, but they barely know Roc, so they generate a weird mixture of various languages, they're not helpful at all. It will certainly improve once Roc is the <a href=\"https://github.com/roc-lang/roc/issues/1\">#1</a> language in the world <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>, but in the meantime, asking for general guidelines is a much better idea.</p>\n<p>Regarding the ceremony around accessing arrays and so on, I must admit that I feel the same way, it's one of my main problems with the language right now, tbh, some things feel overly verbose, and I often wish there was an <code>unwrap()</code> function like in Rust, to say: \"please trust me on this, compiler, I know what I'm doing\". But <code>unwrap()</code> is really overused in Rust, and this leads to unstable programs, so Roc is trying to avoid it (disclaimer: I'm not a  Roc developer, and in fact I'm fairly new to the language). Since I'm writing many of the Exercism solutions, I try to do things the Roc way and avoid <code>unwrap()</code>, but if it was a personal side-project, I would definitely be using my own <code>unwrap()</code> function.</p>\n<p>Here are a few variants of a <code>tripleFirst</code> function that takes the first element of a list that we know for sure is not empty, and it returns the triple of the first element:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Recommended Roc approach</span>\n<span class=\"n\">tripleFirst1</span> <span class=\"o\">=</span> \\<span class=\"nb\">list</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">firstElement</span> <span class=\"o\">=</span>\n        <span class=\"n\">when</span> <span class=\"nb\">list</span> <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"ow\">is</span>\n            <span class=\"n\">Err</span> <span class=\"n\">ListWasEmpty</span> <span class=\"o\">-&gt;</span> <span class=\"n\">crash</span> <span class=\"s2\">\"Unreachable: the list cannot be empty here\"</span>\n            <span class=\"n\">Ok</span> <span class=\"n\">first</span> <span class=\"o\">-&gt;</span> <span class=\"n\">first</span>\n    <span class=\"n\">firstElement</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n\n<span class=\"c1\"># Using a custom `unwrap()` function:</span>\n<span class=\"n\">tripleFirst2</span> <span class=\"o\">=</span> \\<span class=\"nb\">list</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">firstElement</span> <span class=\"o\">=</span> <span class=\"nb\">list</span> <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"o\">|&gt;</span> <span class=\"n\">unwrap</span> <span class=\"s2\">\"the list cannot be empty here\"</span>\n    <span class=\"n\">firstElement</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">unwrap</span> <span class=\"o\">=</span> \\<span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">message</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">when</span> <span class=\"n\">result</span> <span class=\"ow\">is</span>\n        <span class=\"n\">Ok</span> <span class=\"n\">value</span> <span class=\"o\">-&gt;</span> <span class=\"n\">value</span>\n        <span class=\"n\">Err</span> <span class=\"n\">_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">crash</span> <span class=\"s2\">\"Unwrap failed: $(message)\"</span>\n\n\n<span class=\"c1\"># Using Result.withDefault =&gt; quick &amp; easy, but probably a very bad idea</span>\n<span class=\"n\">tripleFirst3</span> <span class=\"o\">=</span> \\<span class=\"nb\">list</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">firstElement</span> <span class=\"o\">=</span> <span class=\"nb\">list</span> <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"o\">|&gt;</span> <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span> <span class=\"mi\">0</span>\n    <span class=\"n\">firstElement</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n\n<span class=\"c1\"># If the function returns a `Result` (for some other errors) you could write:</span>\n<span class=\"n\">tripleFirst4</span> <span class=\"o\">=</span> \\<span class=\"nb\">list</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">firstElement</span> <span class=\"o\">=</span> <span class=\"nb\">list</span> <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"o\">|&gt;</span> <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"err\">?</span> \\<span class=\"n\">ListWasEmpty</span> <span class=\"o\">-&gt;</span> <span class=\"n\">crash</span> <span class=\"s2\">\"Unreachable: the list cannot be empty here\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">len</span> <span class=\"nb\">list</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span> <span class=\"n\">then</span>\n        <span class=\"n\">Err</span> <span class=\"n\">ListIsTooLong</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">Ok</span> <span class=\"p\">(</span><span class=\"n\">firstElement</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I find the recommended approach a bit too heavy, and the <code>unwrap</code> option is actually quite nice, imho. The <code>Result.withDefault</code> option is so easy that I'm sure many people will be tempted to use it (I certainly have), but it's probably a bad idea because if the assumption is one day broken (through refactoring, for example), we may not notice it straight away, the code will just start using the default value. I hope this helps.</p>",
        "id": 477113066,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729049531
    },
    {
        "content": "<p>I feel like I would do </p>\n<div class=\"codehilite\"><pre><span></span><code>tripleFirst1 = \\list -&gt; list |&gt; List.first |&gt; Result.map \\f -&gt; f * 3\n</code></pre></div>",
        "id": 477113502,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729049757
    },
    {
        "content": "<p>I have to admit, I have been opting for <code>Result.withDefault</code> quite a lot.</p>",
        "id": 477113568,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1729049774
    },
    {
        "content": "<p>Or maybe </p>\n<div class=\"codehilite\"><pre><span></span><code>tripleFirst1 = \\list -&gt;\n    first = list |&gt; List.first?\n    first * 3\n</code></pre></div>",
        "id": 477113642,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729049823
    },
    {
        "content": "<p>ohh taht's quite nice</p>",
        "id": 477113675,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1729049839
    },
    {
        "content": "<p>I'm sort of scared to use the crash keyword in actual code outside of scripting</p>",
        "id": 477113740,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1729049881
    },
    {
        "content": "<p>Wait I'm not sure how to use the <code>?</code> operator... I thought we added that</p>",
        "id": 477113838,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729049905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Any.20high.20level.20advice.20for.20exercism.20problems/near/477113502\">said</a>:</p>\n<blockquote>\n<p>I feel like I would do </p>\n<p><div class=\"codehilite\"><pre><span></span><code>tripleFirst1 = \\list -&gt; list |&gt; List.first |&gt; Result.map \\f -&gt; f * 3\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, I should have made it clear that if your function can just return an error, then that's great, do that, it's easy (especially with the <code>?</code> try operator). But I've found that I often run into cases where the error just cannot happen, so I don't want it to be part of the function signature.</p>",
        "id": 477113841,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729049907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Any.20high.20level.20advice.20for.20exercism.20problems/near/477113838\">said</a>:</p>\n<blockquote>\n<p>Wait I'm not sure how to use the <code>?</code> operator... I thought we added that</p>\n</blockquote>\n<p>You just need to return an <code>Ok</code> value at the end</p>",
        "id": 477113930,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729049958
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>tripleFirst1 = \\list -&gt;\n    first = list |&gt; List.first?\n    Ok (first * 3)\n</code></pre></div>",
        "id": 477113963,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729049977
    },
    {
        "content": "<blockquote>\n<p>But I've found that I often run into cases where the error just cannot happen</p>\n</blockquote>\n<p>I guess this is what <code>crash</code> is (can be used) for</p>",
        "id": 477114219,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729050106
    },
    {
        "content": "<p>Yes, I believe that <code>crash</code> in the right solution in this case, but when you want to unwrap an <code>Ok</code> value, when you know for sure that it cannot be an <code>Err</code>, then it can be a bit verbose, and I think an <code>unwrap()</code> function is fine in this case (others might disagree). Just be careful not to overuse it.</p>",
        "id": 477114557,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729050266
    },
    {
        "content": "<p>I personally think that there should be a <code>Result.unwrap</code> function in the standard library, or else:</p>\n<ol>\n<li>many people will just use <code>Result.withDefault</code> which is much worse (as explained earlier)</li>\n<li>other people will write their own <code>unwrap</code> function, and various libraries will use various <code>unwrap</code> variants, possibly with different names. In the end it will be worse than including it in the standard library (with a big warning: \"please don't overuse!\").</li>\n<li>many people will struggle like Nathan and I did when learning the language.</li>\n</ol>",
        "id": 477114885,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729050441
    },
    {
        "content": "<p>Just my 2 cents, again, I'm still very new to Roc!</p>",
        "id": 477115051,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729050511
    },
    {
        "content": "<p>I feel less guilty using Result.withDefault than I do using crash. Crash feels super spooky to me lol</p>",
        "id": 477116144,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1729051077
    },
    {
        "content": "<p>Haha, yes, I think it's meant to be scary.<br>\n<code>Result.withDefault</code> is fine if you actually need a default value, but if you're using it to unwrap the value and the default value can never be used, then I fear that this can lead to hard-to-debug bugs in the future, so I think <code>crash</code> is better when you know for sure that a path is impossible.</p>",
        "id": 477121521,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729054062
    },
    {
        "content": "<p>My 2 cents regarding crash or withDefault. </p>\n<p>I would argue that a function <code>tripleFirst : List a -&gt; a</code> is impossible to implement in a \"good way\" since its not a total function. Either you need to resort to use <code>crash</code>or <code>Result.withDefault</code>, both are equally bad imho.</p>\n<p>The problem is that the function has a bad design from the beginning. The right (imho) approach is to change the signature of the function to make it total. Either you can change the argument to a <em>non empty list</em> (a list that's guaranteed to have at least one element) or you can change the signature to return a result.</p>\n<div class=\"codehilite\"><pre><span></span><code># a non empty list can be represented as a tuple (a,List a)\ntripleFirst : (a,List a) -&gt; a\n\nor\n\n# return an error on empty list\ntripleFirst : List a -&gt; Result a [EmptyList]\n</code></pre></div>\n<p>I don't know how the Roc problems on Exercism are designed in general but  I think it would make sense to try to design them in a way to avoid forcing the student to use bad habits like crash or withDefault.</p>",
        "id": 477128986,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1729058809
    },
    {
        "content": "<p>That's a really interesting insight, thanks.<br>\nLooking at the 96 exercises we wrote, I just counted 19 uses of <code>crash</code> in the solutions. Seven of these are due to the fact that the instructions explicitly say that the user should assume that the inputs are ASCII, so when calling <code>Str.fromUtf8</code>, we just crash rather than bubble up the error. Perhaps that's a bad idea. In some cases, we start by checking that all characters are digits, then we call some function which can then assume that it's only getting digits as input, so after it does whatever it needs to do (e.g., reversing the order of the digits), it can convert the characters back to a string and it can be certain that there will be no UTF-8 error, so it just crashes. I haven't looked in detail at the other cases yet, but they seem to be mostly access to lists that we know are not empty, or we know they have N elements and we're accessing the element e &lt; N. That sort of thing.</p>",
        "id": 477130668,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729059486
    },
    {
        "content": "<p>I was going to say, one trivial example is when you're wanting to map over a string.<br>\nYou call <code>toUtf8</code> and then map, and then call <code>fromUtf8</code> which returns a result. But we know the characters are all valid utf8 because we just got them from a string.</p>\n<p>e.g </p>\n<div class=\"codehilite\"><pre><span></span><code>digits = string\n        |&gt; Str.toUtf8\n        |&gt; List.keepIf \\c -&gt; c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;\n        |&gt; Str.fromUtf8\n        |&gt; Result.withDefault &quot;&quot; # This is unreachable\n</code></pre></div>\n<p>(caveats about unicode/graphemes not withstanding)</p>",
        "id": 477130824,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1729059547
    },
    {
        "content": "<p>Yes, that's a great example</p>",
        "id": 477130937,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729059591
    },
    {
        "content": "<p>dependent types can solve this but that would add more complexity to the compiler , we'd like to avoid that for now :p</p>",
        "id": 477160570,
        "sender_full_name": "Anton",
        "timestamp": 1729068214
    }
]