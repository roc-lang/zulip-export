[
    {
        "content": "<p>How do you build a hello world to compile to wasi?</p>",
        "id": 405155641,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701362228
    },
    {
        "content": "<p>I've compiled the wasm example but that requires a JS host.</p>",
        "id": 405155906,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701362294
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/syntax.3A.20whitespace.20vs.20comma.20for.20items\">#beginners &gt; syntax: whitespace vs comma for items</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 405159892,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701363457
    },
    {
        "content": "<p>To my understanding, wasi would use something like a zig host that contains a main with a roc platform. I think we support it, but I have not messed with that pipeline in a long time.</p>\n<p>In the worst case, you can just compile the roc code with <code>--no-link</code> and targeting wasm. Then have a platform built for wasi link against that.</p>",
        "id": 405160455,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701363617
    },
    {
        "content": "<p>As a clarifying note, all roc code is totally agnostic of that information. Whether it is for the browser or wasi roc will generate the exact same thing. It is up to some sort of host to deal with mapping browser/wasi primitives to roc io primitives.</p>",
        "id": 405161464,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701363882
    },
    {
        "content": "<p>I have played around with wasi some time ago. I did not go far, but the hello world example worked.</p>\n<p>I pushed the code here: <a href=\"https://github.com/ostcar/roc-wasi-platform\">https://github.com/ostcar/roc-wasi-platform</a></p>\n<p>It is its own platform, written in zig. Currently, it only knows the Task <code>writeLine</code>. My goal was to support <a href=\"https://github.com/ziglang/zig/blob/master/lib/std/os/wasi.zig\">all wasi functions</a>. But I lost the motivation :)</p>",
        "id": 405161468,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701363883
    },
    {
        "content": "<p>ah ok, this is my confusion then</p>",
        "id": 405161588,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701363919
    },
    {
        "content": "<p>wasi requires a bunch of bindings. I wasn't sure if that was built-in to Roc or not</p>",
        "id": 405161625,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701363933
    },
    {
        "content": "<p>So it sounds like someone needs to build that via a runtime. And Oskar has started that. Very cool</p>",
        "id": 405161685,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701363952
    },
    {
        "content": "<p>Yeah, Roc has no io primitives and depends on a platform for them. More context here: <a href=\"http://roc-lang.org/platforms\">roc-lang.org/platforms</a></p>",
        "id": 405161827,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701363981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> doesn't wasi expect a \"wasi_snapshot_preview1\" imported value from the host? I don't see that in your host.zig</p>",
        "id": 405162387,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701364115
    },
    {
        "content": "<p>It is very easy to build this in zig. Zig has build an abstraction layer around wasi, so you can use the normal zig functions. </p>\n<p>For example, the <code>writeLine</code> Task is just:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc_fx_stdoutLine</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdOut</span><span class=\"p\">().</span><span class=\"n\">writer</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"{s}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"p\">.</span><span class=\"n\">asSlice</span><span class=\"p\">()})</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"k\">unreachable</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>There is nothing wasi specific about it.</p>",
        "id": 405162409,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701364128
    },
    {
        "content": "<p>I wonder if we could just compile the rust basic cli for wasi?</p>",
        "id": 405162627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701364209
    },
    {
        "content": "<p>ok, so I'm trying to understand how things are linked here.</p>",
        "id": 405162633,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701364212
    },
    {
        "content": "<p>Doesn't wasi have some sort of concept for logging? And if so, how does <code>roc_fx_stdoutLine</code> get linked to that?</p>",
        "id": 405162746,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701364252
    },
    {
        "content": "<p>I was expecting to see some sort of mapping from \"wasi method\" to the implementation method roc_fx_stdoutLine but i don't see any such thing.</p>",
        "id": 405162829,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701364283
    },
    {
        "content": "<p>I will of course pull down your project and try it out :)</p>",
        "id": 405163087,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701364380
    },
    {
        "content": "<p>It does indeed work! I'm going to play around with this some more.</p>",
        "id": 405164219,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701364841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> might have some more info on this!</p>",
        "id": 405170812,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701367204
    },
    {
        "content": "<p>Well in terms of what to do, Oskar has covered it.<br>\nI think there's a misunderstanding about how the various layers fit together.<br>\n<span class=\"user-mention\" data-user-id=\"668654\">@Matthew Phillips</span> you actually wouldn't see names of WASI methods at the source code level unless you looked inside libc implementation code or something.</p>",
        "id": 405171856,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701367493
    },
    {
        "content": "<p>So in the Zig code above, <code>stdout.print</code> will compile to different things on different targets.<br>\nIf you compile for Windows then there will be some Windows API call in there.<br>\nIf you compile for a Unix system there will be syscalls like <code>write</code> or something.<br>\nAnd if you compile that same Zig code for WASI then it will compile to WASI's version of <code>write</code>. I can't remember what it's called.</p>",
        "id": 405172341,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701367653
    },
    {
        "content": "<p>Roc has no concept of Windows syscalls or Linux syscalls or WASI syscalls.</p>",
        "id": 405172878,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701367842
    },
    {
        "content": "<p>Those things are dealt with by the compiler of the host language.</p>",
        "id": 405172916,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701367860
    },
    {
        "content": "<p>Also WASI does not directly have a concept of \"logging\" really. It's a POSIX-like system interface, so it has a concept of stdout, and it has a concept of writing to files, and you can use those for logging if you want.</p>",
        "id": 405173914,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701368259
    },
    {
        "content": "<p>Ah ok, so in this case there's no connection because WASI doesn't have a concept of logging</p>",
        "id": 405174310,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368411
    },
    {
        "content": "<p>But it does have one of filesystem access presumably</p>",
        "id": 405174389,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368442
    },
    {
        "content": "<p>So <em>somehow</em> there needs to a connection between the platform's \"readFile\" method and the WASI \"readFile\" method</p>",
        "id": 405174485,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368483
    },
    {
        "content": "<p>The platform being the roc platform, i mean</p>",
        "id": 405174520,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368497
    },
    {
        "content": "<p>Or wait</p>",
        "id": 405174644,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668654\">Matthew Phillips</span> <a href=\"#narrow/stream/231634-beginners/topic/compiling.20for.20wasi/near/405174389\">said</a>:</p>\n<blockquote>\n<p>But it does have one of filesystem access presumably</p>\n</blockquote>\n<p>Yes it has the same concepts as Unix or Linux has. It's an interface layer to the OS. It has the same concepts as any OS.</p>",
        "id": 405174658,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701368544
    },
    {
        "content": "<p>OK, maybe I get it now</p>",
        "id": 405174698,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368559
    },
    {
        "content": "<p>So, in the host.zig you would call zig's \"readFile\" method, and <em>that</em> thing, under the hood, connects to WASI's readFile method</p>",
        "id": 405174781,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368589
    },
    {
        "content": "<p>yep</p>",
        "id": 405174806,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701368600
    },
    {
        "content": "<p>Ok, then as far as the connection between the Roc code and the <code>host.zig</code>, I see <code>roc_fx_stdoutLine</code> as a Zig method. I assume that this is some sort of method naming convention that causes the connection?</p>",
        "id": 405175106,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368720
    },
    {
        "content": "<p>yes, the <code>roc_fx_</code> prefix</p>",
        "id": 405175143,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701368739
    },
    {
        "content": "<p><code>roc_</code> probably always in front, then <code>fx_</code> because that's the exported module in the <code>main.roc</code></p>",
        "id": 405175181,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368754
    },
    {
        "content": "<p>fx is short for \"effects\"</p>",
        "id": 405175243,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701368766
    },
    {
        "content": "<p>Oh, so <code>roc_fx_</code> is always the name? It's not because this module happens to export something \"as Fx\"?</p>",
        "id": 405175336,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368804
    },
    {
        "content": "<p>If I changed that to <code>as Something</code> then it doesn't because <code>roc_something_</code></p>",
        "id": 405175378,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368821
    },
    {
        "content": "<p>It expects to be an Effects</p>",
        "id": 405175425,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368836
    },
    {
        "content": "<p>Oh wow OK if we're digging in this deep I'd have to look it up, I dunno</p>",
        "id": 405175461,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701368847
    },
    {
        "content": "<p>Not important :)</p>",
        "id": 405175497,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368864
    },
    {
        "content": "<p>I know enough to know what to do to add a new method, so this has been a lot of help, thanks!</p>",
        "id": 405175533,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701368878
    },
    {
        "content": "<p>Name comes from here: <a href=\"https://github.com/ostcar/roc-wasi-platform/blob/1796542883803f9a573e1b29f89d0348e1e4d617/src/Effect.roc#L14\">https://github.com/ostcar/roc-wasi-platform/blob/1796542883803f9a573e1b29f89d0348e1e4d617/src/Effect.roc#L14</a></p>",
        "id": 405176815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701369331
    },
    {
        "content": "<p>Always prefixed with <code>roc_fx_</code></p>",
        "id": 405176862,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701369347
    },
    {
        "content": "<p><code>as Fx</code> from: <a href=\"https://github.com/ostcar/roc-wasi-platform/blob/1796542883803f9a573e1b29f89d0348e1e4d617/src/main.roc#L10\">https://github.com/ostcar/roc-wasi-platform/blob/1796542883803f9a573e1b29f89d0348e1e4d617/src/main.roc#L10</a><br>\nis used for other generation.</p>",
        "id": 405177060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701369424
    },
    {
        "content": "<p>So you mean, the <code>roc_fx_</code> prefix is defined somewhere in the Roc compiler and not in the platform's code, right?</p>",
        "id": 405178599,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701369979
    },
    {
        "content": "<p>Not important that I understand this part just yet :) I'm unblocked to experiment.</p>",
        "id": 405179316,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701370212
    },
    {
        "content": "<blockquote>\n<p>the <code>roc_fx_</code> prefix is defined somewhere in the Roc compiler and not in the platform's code, right?</p>\n</blockquote>\n<p>yep</p>",
        "id": 405179451,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701370261
    },
    {
        "content": "<p>Oh neat <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span>, I was thinking about starting one of these. </p>\n<p>It would be awesome to write up a zig glue spec which would make zig platforms so much quicker to write.</p>\n<p>Definitely an after AoC project I'm keen to look at.</p>",
        "id": 405191383,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701374408
    },
    {
        "content": "<p>AoC?</p>",
        "id": 405191983,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701374566
    },
    {
        "content": "<p>Advent of Code</p>",
        "id": 405192187,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701374632
    },
    {
        "content": "<blockquote>\n<p>to write up a zig glue spec</p>\n</blockquote>\n<p>I have been debating doing this for a long time. I think zig would be the easiest language to build a nice spec for. <code>comptime</code> will make a lot of it super easy. <code>c++</code> would also be pretty easy, but probably messier than zig due to more complex templates and some other struggles. <code>c</code> you have to use macros and repeated imports or way more code gen to get all of the types and it is much more painful.</p>",
        "id": 405192879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701374861
    },
    {
        "content": "<p>This would be really amazing :)</p>",
        "id": 405193022,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701374900
    },
    {
        "content": "<blockquote>\n<p>I have been debating doing this for a long time.</p>\n</blockquote>\n<p>That said, my list of things to look at or work on is quite large rn.</p>",
        "id": 405193029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701374902
    },
    {
        "content": "<p>If I understand, it would be a single implementation of the IO methods that you could then use in any platform, right?</p>",
        "id": 405193113,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701374940
    },
    {
        "content": "<p>the zig glue spec?</p>",
        "id": 405193168,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701374967
    },
    {
        "content": "<p>Yeah</p>",
        "id": 405194837,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701375597
    },
    {
        "content": "<p>Like, it would be nice if there was a library that implemented readFile, other IO methods, and then you could use that library in a platform that compiles to WASI, and in a platform that compiles to native, etc.</p>",
        "id": 405194958,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701375641
    },
    {
        "content": "<p>So that the platforms don't all have to implement those themselves.</p>",
        "id": 405195010,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701375670
    },
    {
        "content": "<p>So zig glue spec is different. It is about automatically generating zig code that interacts with roc. That way you don't need to know roc internal details to write a zig platform. Instead, that will all be automatically generated. For example, all the code here was auto generated by the rust glue: <a href=\"https://github.com/roc-lang/basic-webserver/tree/main/platform/src/glue\">https://github.com/roc-lang/basic-webserver/tree/main/platform/src/glue</a></p>",
        "id": 405195756,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701375979
    },
    {
        "content": "<p>That said, someone could totally make a zig library for implementing a number of common primitives that would then be shared between many platforms (like readFile).</p>",
        "id": 405195846,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701376018
    },
    {
        "content": "<p>That said, it would be up to each platform as to whether or not they support a readFile primitive. It may make sense for a cli platform to have read file, but it probably doesn't make sense for frontend webpage platform.</p>",
        "id": 405196063,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701376102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"668654\">@Matthew Phillips</span> you're going to love the Module Params design. I just added a link on <a href=\"https://github.com/lukewilliamboswell/roc-awesome\">https://github.com/lukewilliamboswell/roc-awesome</a> It's a longer read, and I think Agus has just started on parts of it. But yeah, platform independent libraries will be great!</p>",
        "id": 405196200,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701376172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/compiling.20for.20wasi/near/405196063\">said</a>:</p>\n<blockquote>\n<p>That said, it would be up to each platform as to whether or not they support a readFile primitive. It may make sense for a cli platform to have read file, but it probably doesn't make sense for frontend webpage platform.</p>\n</blockquote>\n<p>yep, agree!</p>",
        "id": 405196806,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701376420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/compiling.20for.20wasi/near/405196200\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"668654\">Matthew Phillips</span> you're going to love the Module Params design. I just added a link on <a href=\"https://github.com/lukewilliamboswell/roc-awesome\">https://github.com/lukewilliamboswell/roc-awesome</a> It's a longer read, and I think Agus has just started on parts of it. But yeah, platform independent libraries will be great!</p>\n</blockquote>\n<p>I don't know Roc well enough yet to fully get it, but in general this makes me very happy :) Going to pour over the proposal some more</p>",
        "id": 405198525,
        "sender_full_name": "Matthew Phillips",
        "timestamp": 1701377143
    },
    {
        "content": "<p>I think for platforms, they will just expose low level primitive IO like TCP/IP or Streams etc and then the package/library ecosystem takes thing from there. With all modules being platform independent by design, this makes it really easy to share things across platforms that have similar functionality. E.g. any platform that has TCP/IP can use Agu's roc-pg to work with PostgreSQL servers etc</p>",
        "id": 405208076,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701379634
    }
]