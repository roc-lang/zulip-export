[
    {
        "content": "<p>Hi,</p>\n<p>for fun I was trying to make a dotnet platform that actually works, and maybe make a PoC actor-based GUI with Avalonia (that's the ambitious version). The sample on Roc lang works, but is missing a lot of detail :)</p>\n<p>However, I encountered an isssue. Roc only works with C# if C# is compiled to native code with AOT (ahead of time compilation).</p>\n<p>Calling into Roc works fine, but Roc cannot call <code>roc_alloc</code> and so on in the host, unless the host is a native binary.<br>\n<a href=\"https://github.com/qrzychu/roc-dotnet-platform\">https://github.com/qrzychu/roc-dotnet-platform</a> - my repo for now</p>\n<p><a href=\"https://github.com/AaronRobinsonMSFT/DNNE/issues/200\">https://github.com/AaronRobinsonMSFT/DNNE/issues/200</a> - I created this thread on Github in a library that compiles all the \"natively exposed\" methods into a native DLL even without AOT, but then it is not included in the standard, JIT-ted build.</p>\n<p>I guess it's the same for Python, JS, Java and so on.</p>\n<p>What's the solution here? Wrapping Roc binary in another binary that provides the functions, and only then calling the Roc main function from dotnet? </p>\n<p>I know it's a bit early for this to be a high priority issue, but I've seen talks claiming Roc functions can be called from node.js - I assumed this is mostly analogous.</p>\n<p>Is there a way to \"redirect\" the <code>roc_alloc</code> and others into some specific binary, or is it stricly the host job, and that means that the host can only be native code? Or am I missing something?</p>\n<p>Also, other than the basic-cli source code, is there a doc listing all the host functions Roc might call?</p>",
        "id": 512138026,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744652048
    },
    {
        "content": "<p>also, how would I make it so that I can actually do <code>roc build</code> instead of <code>dotnet build</code>?</p>",
        "id": 512138329,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744652160
    },
    {
        "content": "<p>then this issue becomes much less of an issue :)</p>",
        "id": 512138399,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744652173
    },
    {
        "content": "<blockquote>\n<p>Also, other than the basic-cli source code, is there a doc listing all the host functions Roc might call?</p>\n</blockquote>\n<p>No doc, but I think <a href=\"https://github.com/roc-lang/roc/blob/966d0459e7ccb1bd28cb77c05b8419953ef167af/crates/compiler/builtins/bitcode/src/utils.zig#L58\">this</a> is the cleanest list.</p>",
        "id": 512144988,
        "sender_full_name": "Anton",
        "timestamp": 1744654358
    },
    {
        "content": "<blockquote>\n<p>What's the solution here? Wrapping Roc binary in another binary that provides the functions, and only then calling the Roc main function from dotnet?</p>\n</blockquote>\n<p>I believe in this case you want to compile Roc to a library with <code>roc build --lib</code>, let me see if I can find an example project for that.</p>",
        "id": 512146191,
        "sender_full_name": "Anton",
        "timestamp": 1744654802
    },
    {
        "content": "<blockquote>\n<p>also, how would I make it so that I can actually do <code>roc build</code> instead of <code>dotnet build</code>?</p>\n</blockquote>\n<p>With JIT, I think dotnet needs to be in charge of the final build.</p>",
        "id": 512146360,
        "sender_full_name": "Anton",
        "timestamp": 1744654860
    },
    {
        "content": "<p>You can call dotnet through with a <a href=\"https://github.com/roc-lang/basic-webserver/blob/main/build.roc\"><code>build.roc</code> script</a> if you want.</p>",
        "id": 512146584,
        "sender_full_name": "Anton",
        "timestamp": 1744654924
    },
    {
        "content": "<blockquote>\n<p>I believe in this case you want to compile Roc to a library with <code>roc build --lib</code>, let me see if I can find an example project for that.</p>\n</blockquote>\n<p>Oh yeah, we use that for the .NET example: <a href=\"https://www.roc-lang.org/examples/DotNetPlatform/README.html\">https://www.roc-lang.org/examples/DotNetPlatform/README.html</a> see <code>roc build main.roc --lib ...</code></p>",
        "id": 512147039,
        "sender_full_name": "Anton",
        "timestamp": 1744655092
    },
    {
        "content": "<p>thanks!</p>\n<p>though I got everything to work when dotnet is compiled with native AOT, I was wondering if I would be able to make it work without the AOT.</p>\n<p>Thing is, I would like to debug the platform for quite some time until it's \"done\", then the <code>build.roc</code> would be the solution. It is possible to debug the native app, but then I would have to use something like gdb instead of the dotnet one, which is, well, not great :D</p>",
        "id": 512148540,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744655636
    },
    {
        "content": "<p>but still, if I wanted to just call some rock functions from node.js for example, how do I give it the allocation functions? They have to be native</p>",
        "id": 512148684,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744655679
    },
    {
        "content": "<p>This should all get a lot better with v0.1.0 of roc. Which is in the works but a ways away.</p>",
        "id": 512158112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744658997
    },
    {
        "content": "<p>Currently dependences between the a platform and app are mostly implicit</p>",
        "id": 512158211,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744659021
    },
    {
        "content": "<p>It requires the platform to dynamically exposed certain cffi compatible symbols</p>",
        "id": 512158263,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744659041
    },
    {
        "content": "<p>C# probably can do this, but it may be a pain</p>",
        "id": 512158322,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744659064
    },
    {
        "content": "<p>In the future, the platform will have to pass a list of pointers into roc. One for each of the need functions. Those still have to be cffi compatible, but they follow proper dependency chains and should just work without linker pains like you noted above.</p>",
        "id": 512158552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744659130
    },
    {
        "content": "<p>that sounds great :) that woud also mean that every platform needs to provide all of the functions right away, right?</p>\n<p>on another note, in roc_alloc, what is the meaning of the second parameter? it's called <code>alignment</code> in the basic-cli platform, but it is ignored in the Rust code (same in dotnet)</p>",
        "id": 512162009,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744660442
    },
    {
        "content": "<p>For some functions you could just have an empty or dummy impl to start with.</p>\n<hr>\n<p>It is how many bytes the data needs to be align to. In most cases allocators already align to a high enough that this value doesn't matter. In some cases, more control is wanted for tighter allocation packing.</p>",
        "id": 512213771,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744687405
    }
]