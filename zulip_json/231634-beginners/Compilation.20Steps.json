[
    {
        "content": "<p>The Roc compiler has no scanner? Scanning and Parsing are done in the Parser?</p>",
        "id": 436732631,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1714667467
    },
    {
        "content": "<p>scanner == lexer?</p>",
        "id": 436776402,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714683747
    },
    {
        "content": "<p>And yeah, roc uses parser combinators to go from source to first level ast.</p>",
        "id": 436776461,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714683781
    },
    {
        "content": "<p>Yes sir. So that is like the Syntax-Directed Translation pattern?</p>",
        "id": 436791990,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1714692398
    },
    {
        "content": "<p>I'm not familiar with that term, but it's basically just that we have a function that goes directly from bytes in the file to an Abstract Syntax Tree</p>",
        "id": 436793407,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714693374
    },
    {
        "content": "<p>there's no intermediate structure like a \"token\" or anything like that</p>",
        "id": 436793441,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714693401
    },
    {
        "content": "<p>although <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> and I have talked about wanting to rewrite the parser in a way which uses the more traditional approach, for various reasons <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436793463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714693422
    },
    {
        "content": "<p>the reason it works the way it does today is that when I started working on the compiler, parser combinators were the only technique I knew for parsing (from my experience using <a href=\"https://package.elm-lang.org/packages/elm/parser/latest\">elm/parser</a>) and Bodil Stokke wrote a post about <a href=\"https://bodil.lol/parser-combinators/\">how to do parser combinators in Rust</a>, so I followed that to get started...and now several years later it's still how our parser is written <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 436793600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714693503
    },
    {
        "content": "<p>Hah! My first exposure to parser combinators was Bodil’s article. </p>\n<p>Yesterday when I was reading the roc parser, I was going like wait, I know this, I know that and this <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 436794093,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1714693814
    },
    {
        "content": "<p>Huh, I've never heard of Syntax-Directed Translation before...</p>",
        "id": 436813334,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714708673
    },
    {
        "content": "<p>If I'm reading the wikipedia page right, SDT is a fairly extreme compiler construction method, if taken literally.</p>",
        "id": 436813482,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714708789
    },
    {
        "content": "<p>It's like the lex/yacc examples that show you how to do an expression evaluator in the yacc grammar. i.e. it doesn't build up an AST and evaluate it - it does the evaluation in the parser!</p>",
        "id": 436813604,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714708834
    },
    {
        "content": "<p>New to these stuff. Just reading around.</p>",
        "id": 436813612,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1714708843
    },
    {
        "content": "<p>I could imagine stretching the definition a bit and just considering \"doing extra steps in the parser\" to be SDT</p>",
        "id": 436813742,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714708914
    },
    {
        "content": "<p>e.g. in GCC I think for a long time there was a simple constant evaluator done very very early in the compiler, possibly directly in the parser (I'm like 95% speculating here, don't quote me)</p>",
        "id": 436813855,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714708957
    },
    {
        "content": "<p>In Roc, one might imagine trying to do desugaring, canonicalization, name resolution, etc - all as part of the parser.</p>",
        "id": 436813898,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714709007
    },
    {
        "content": "<p>One disadvantage then is that it's hard to have a parser that can accept fragments of code and parse them into something sensible - which can be useful for things like auto-formatting code that doesn't compile yet, or better syntax highlighting, etc.</p>",
        "id": 436814042,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714709108
    },
    {
        "content": "<p>Or at least, you'd have to have two separate parsers - one for tooling and one for the production compiler.</p>",
        "id": 436814064,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714709127
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I wonder if the compiler could be faster if you cram everything into as few stages as possible?</p>\n<p>Definitely harder to maintain, but maybe that could be overcome with tooling or generics</p>",
        "id": 436814141,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714709175
    },
    {
        "content": "<p>Looks like a shortcut that will come with a lotta gotcha’s down the line</p>",
        "id": 436814331,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1714709296
    },
    {
        "content": "<p>Definitely need to embark on that... carefully.</p>",
        "id": 436814657,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714709607
    },
    {
        "content": "<p>I don't know that I would immediately reject it as \"impossible to do well\"</p>",
        "id": 436814665,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714709623
    },
    {
        "content": "<p>But it's also not obvious how one would do it well.</p>",
        "id": 436814716,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1714709650
    }
]