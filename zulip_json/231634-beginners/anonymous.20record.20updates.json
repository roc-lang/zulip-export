[
    {
        "content": "<p>Hey all, I've been looking for a good first issue and it seems like the <a href=\"https://github.com/roc-lang/roc/issues/2659\">anonymous record update syntax issue</a> would be a useful addition that's easy to model after the anonymous field accessor code. It's suggested to check here to make sure the issue is still relevant, which I expect is true based on the utility. Also, just to check, record updates are not valid for tuple \"records\", just standard records, right?</p>",
        "id": 355033489,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683006549
    },
    {
        "content": "<p>Meaning we only want to allow users to write:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">&amp;</span><span class=\"nv\">foo</span>\n<span class=\"c1\">-- updates to</span>\n<span class=\"nf\">\\</span><span class=\"nv\">record</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">record</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>and not:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">&amp;</span><span class=\"mi\">0</span>\n<span class=\"c1\">-- updates to</span>\n<span class=\"nf\">\\</span><span class=\"nv\">record</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">record</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 355034069,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683006730
    },
    {
        "content": "<p>yep, that's correct - awesome! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 355034190,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683006784
    },
    {
        "content": "<p>Looking forward to finally committing to a language I want to use. I have good confidence that Roc will succeed being backed by NoRedInk and friends, especially after watching <a href=\"https://www.youtube.com/watch?v=QyJZzq0v7Z4\">\"Why Isn't Functional Programming the Norm?\"</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"QyJZzq0v7Z4\" href=\"https://www.youtube.com/watch?v=QyJZzq0v7Z4\"><img src=\"https://uploads.zulipusercontent.net/5a0224992100375bae80b70325c2ba752d13f2d6/68747470733a2f2f692e7974696d672e636f6d2f76692f51794a5a7a713076375a342f64656661756c742e6a7067\"></a></div>",
        "id": 355034837,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683007009
    },
    {
        "content": "<p>(by backed, I don't mean sponsored)</p>",
        "id": 355035467,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683007263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"612983\">@Gabriel Dertoni</span> here's the thread where I started looking into the issue.</p>",
        "id": 355221240,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683048816
    },
    {
        "content": "<p>Hey, I would be interested in collaborating on this. I think I am pretty close to having an initial version working. However, I am a bit stuck trying to figure out how the type inference code works.</p>",
        "id": 355222815,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683049113
    },
    {
        "content": "<p>For the most part I just duplicates the field accessor code and changed things where necessary. Later today I can push to my fork of roc so you can have a look.</p>",
        "id": 355223464,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683049266
    },
    {
        "content": "<p>Sounds like we're in a similar boat.</p>",
        "id": 355224190,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683049447
    },
    {
        "content": "<p>I'll also push my code later. Hey, what are you thinking should be the name for the anonymous record updater syntax? Since the record access syntax is called both <code>RecordAccessor</code> and <code>RecordAccessorFunction</code>, I think a literal <code>RecordUpdaterFunction</code> is the most readable name. I wish there was something terser that was as clear, but I don't see anything in the thesaurus.</p>",
        "id": 355225149,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683049670
    },
    {
        "content": "<p>Yep, I used something like this. Since the variants for record access and accessor were named respectivelly <code>RecordAccess</code> and <code>RecordAcessor</code> and there is already a <code>RecordUpdate</code>, I named the new variant <code>RecordUpdater</code>. and <code>UpdaterFunction</code> in the AST.</p>",
        "id": 355249999,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683056367
    },
    {
        "content": "<p>I have managed to finish an initial implementation and have opened a pull request <a href=\"https://github.com/roc-lang/roc/pull/5367\">https://github.com/roc-lang/roc/pull/5367</a>. If you have any feedback or differences from your implementation you would like to discuss, let me know.</p>",
        "id": 355335029,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683095979
    },
    {
        "content": "<p>In order to make this syntax even better, I think we should support nesting, like <code>&amp;foo.bar.baz</code>.</p>",
        "id": 355335509,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683096214
    },
    {
        "content": "<p>Left some comments on the PR, looks good! I've got some <code>test_syntax</code> tests I can add. I'll start by putting them in my branch and you can consider pulling them into your PR.</p>",
        "id": 355551626,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1683131611
    },
    {
        "content": "<p>Sounds good, will be looking into those comments soon.</p>",
        "id": 355564737,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683135071
    }
]