[
    {
        "content": "<p>The discussion about reference equality in this topic <a href=\"#narrow/stream/304641-ideas/topic/memoization.20builtin\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/memoization.20builtin</a> got me thinking about an edge case. In Elm, like Roc, the user isn't able to perform reference equality directly on two values. However in Elm there is a sneaky loop hole:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nf\">/</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"c1\">--This is true</span><span class=\"w\"></span>\n<span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nf\">/</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">--This is false</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This happens because the floating point standard says that NaN isn't equal to itself. So if reference equality fails, checking the record fields also fails due to the NaN.</p>\n<p>Is this possible in Roc? Presumably this isn't something that's desired but if you prevent it then I guess technically you aren't following the floating point standard? I don't know what implications this has but I figured it's worth bringing up.</p>",
        "id": 271352656,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1644443537
    },
    {
        "content": "<p>I think we want to <code>roc_panic</code> on <code>0 / 0</code> and similar math domain errors?</p>",
        "id": 271352957,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644443715
    },
    {
        "content": "<p>similar to how we panic on overflow</p>",
        "id": 271353018,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644443748
    },
    {
        "content": "<p>in practice a roc <code>F64</code> should never be a <code>NaN</code></p>",
        "id": 271353076,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644443766
    },
    {
        "content": "<p>Ah, I didn't think of that but I think that's the best choice!</p>",
        "id": 271353196,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1644443832
    },
    {
        "content": "<blockquote>\n<p>in practice a roc <code>F64</code> should never be a <code>NaN</code></p>\n</blockquote>\n<p>this is true today, although the more I think about it the more likely I think we are to end up wanting to support it for performance reasons</p>",
        "id": 271355848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644445041
    },
    {
        "content": "<p>Maybe there could be an unsafe float type that doesnâ€™t check for NaN or overflows and a safe float type that returns an unsafe float (or maybe Err) on any operations that can overflow or return NaN?</p>",
        "id": 271357652,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1644445945
    }
]