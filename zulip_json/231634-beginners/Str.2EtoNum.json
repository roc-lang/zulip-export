[
    {
        "content": "<p>I'll see what I can do to help <span class=\"user-mention\" data-user-id=\"455616\">@Martin Janiczek</span></p>",
        "id": 263273965,
        "sender_full_name": "Anton",
        "timestamp": 1638356788
    },
    {
        "content": "<p>I'll get started on implementing <code>toU8</code> and work my way through all the Num types. Once that's done, I can use them all for <code>toNum</code>.</p>",
        "id": 263278015,
        "sender_full_name": "Anton",
        "timestamp": 1638359395
    },
    {
        "content": "<p>it's easier to make a <code>toNum</code> builtin I think</p>",
        "id": 263278197,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638359482
    },
    {
        "content": "<p>then <code>toU8</code> can just be a specialized version of that</p>",
        "id": 263278216,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638359501
    },
    {
        "content": "<p>I can make some zig foundations for that too</p>",
        "id": 263278284,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638359528
    },
    {
        "content": "<p>Don't feel pressured <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> , thanks for the willingness to help :)</p>",
        "id": 263278544,
        "sender_full_name": "Martin Janiczek",
        "timestamp": 1638359725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455616\">@Martin Janiczek</span> it's cool, I am happy to do it!</p>",
        "id": 263279593,
        "sender_full_name": "Anton",
        "timestamp": 1638360370
    },
    {
        "content": "<p>This might be a hard first builtin <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263296501,
        "sender_full_name": "Anton",
        "timestamp": 1638368241
    },
    {
        "content": "<p>I mostly got the backend part I think</p>",
        "id": 263297041,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638368476
    },
    {
        "content": "<p>an open question is what the errors should be. Zig gives some info but we probably don't want to just follow that</p>",
        "id": 263297136,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638368523
    },
    {
        "content": "<p>with backend I mean the lowlevel</p>",
        "id": 263297228,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638368541
    },
    {
        "content": "<p>in fact, I can push my current state which kinda should be good enough for integers, and you can work from there @Anton ?</p>",
        "id": 263297328,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638368581
    },
    {
        "content": "<p>Pushed my work to the <code>str-to-num</code> branch</p>",
        "id": 263298907,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638369232
    },
    {
        "content": "<p>it should have working code for the integers, floats should follow from that straightforwardly, decimal I didn't really look at yet</p>",
        "id": 263299092,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638369304
    },
    {
        "content": "<p>and I guess for now we can make the type <code>Str -&gt; Result (Num *) {}</code>?</p>",
        "id": 263299145,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638369324
    },
    {
        "content": "<p>Awesome, thanks <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> I'll check it out</p>",
        "id": 263306287,
        "sender_full_name": "Anton",
        "timestamp": 1638372035
    },
    {
        "content": "<p>I think a type of <code>Str -&gt; Result (Num *) [ InvalidStr ]*</code> would be best</p>",
        "id": 263319939,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638377280
    },
    {
        "content": "<p>the wording on the error type for this one is a tricky because (for example) if <code>Num *</code> becomes <code>I8</code> then a string of <code>\"1.1\"</code> becomes an invalid input, and an error type of <code>InvalidNum</code> might look weird there (\"huh? 1.1 <em>is</em> a valid number!\")</p>",
        "id": 263320007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638377294
    },
    {
        "content": "<p>and we can't really get more specific than that without making exhaustiveness checks weird - e.g. if it were like <code>[ IntWithDecimalPoint, UnexpectedNonDigits ]*</code> the first one wouldn't be possible if <code>Num *</code> unified to <code>F64</code></p>",
        "id": 263320152,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638377373
    },
    {
        "content": "<p>fortunately, in practice I expect it to be extremely rare for anyone to want a more specific error than \"it didn't work,\" so I think we're okay just having one error type <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 263320411,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638377465
    },
    {
        "content": "<p>maybe,  <code>Str -&gt; Result (Num *) [ NotANumber ]*</code> lol</p>",
        "id": 263324233,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638378938
    },
    {
        "content": "<p>I love these tags</p>",
        "id": 263324246,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638378943
    },
    {
        "content": "<p>I'm kinda joking, InvalidStr is fine</p>",
        "id": 263324334,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638378972
    },
    {
        "content": "<p><code>NaN</code> is totally a valid tag, but of course <code>if num == NaN</code> won't type check if <code>num</code> is actually a number <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 263327759,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638380293
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> actually I wonder if we'll end up wanting to special-case error messages around the <code>NaN</code> tag in case people actually try to do that!</p>",
        "id": 263327878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638380331
    },
    {
        "content": "<p>example?</p>",
        "id": 263327968,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638380360
    },
    {
        "content": "<p>like what kind of error message</p>",
        "id": 263327994,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638380373
    },
    {
        "content": "<p>oh just like a hint \"In Roc, NaN is not a number type, but rather a tag like Ok, Err, True, False, etc.\"</p>",
        "id": 263328145,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638380421
    },
    {
        "content": "<p>amusingly, <code>== NaN</code> would always return false in languages where NaN is a number, so arguably the type mismatch Roc would give you is actually more helpful than having it \"Just Work\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 263328274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638380491
    },
    {
        "content": "<p>How about <code>InvalidNumStr</code>? <code>InvalidStr</code> makes me think I have an improperly decoded String or something.</p>",
        "id": 263339349,
        "sender_full_name": "Anton",
        "timestamp": 1638385018
    },
    {
        "content": "<p>The original <code>ExpectedNum a</code> is also pretty good or can't we make builtins with type variables in the errors yet?</p>",
        "id": 263339953,
        "sender_full_name": "Anton",
        "timestamp": 1638385217
    },
    {
        "content": "<p><code>InvalidNumStr</code> sounds good! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 263346689,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638387720
    },
    {
        "content": "<p>I think we shouldn't actually do the <code>ExpectedNum a</code> thing because it wouldn't work with an Abilities design for numbers</p>",
        "id": 263347122,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638387854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Str.2EtoNum/near/263328274\">said</a>:</p>\n<blockquote>\n<p>amusingly, <code>== NaN</code> would always return false in languages where NaN is a number, so arguably the type mismatch Roc would give you is actually more helpful than having it \"Just Work\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>I see so this is more for giving a helping hand to people coming from a language like JavaScript for example</p>",
        "id": 263355571,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638391757
    },
    {
        "content": "<p>cool idea, that kind of friendliness goes a long way</p>",
        "id": 263355604,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638391775
    },
    {
        "content": "<p>Anton passed me the baton on this, I'll see if I can wrap it up within the hr or so</p>",
        "id": 263356814,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638392363
    },
    {
        "content": "<p>how do I use a Dec again?</p>",
        "id": 263359501,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638393779
    },
    {
        "content": "<p>I have to force it in the type signature right?</p>",
        "id": 263359514,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638393789
    },
    {
        "content": "<p>yes</p>",
        "id": 263359583,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638393832
    },
    {
        "content": "<p>ok, I almost have this done, I'm just running into an issue with the bitcode functions atm</p>",
        "id": 263359653,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638393856
    },
    {
        "content": "<p><code>'Unrecognized builtin function: \"roc_builtins.str.to_int.i64\"</code></p>",
        "id": 263359667,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638393866
    },
    {
        "content": "<p>I see the issue</p>",
        "id": 263360587,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638394381
    },
    {
        "content": "<p>you know Anton was working on this too?</p>",
        "id": 263361206,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638394696
    },
    {
        "content": "<p>He told me to take over and that he'll pick up where I left off tomorrow</p>",
        "id": 263361547,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638394902
    },
    {
        "content": "<p>I'm using his branch</p>",
        "id": 263361719,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638394974
    },
    {
        "content": "<p><code>thread 'main' panicked at 'Found StructValue(StructValue { struct_value: Value { name: \"call_builtin\", address: 0x600001773e20, is_const: false, is_null: false, is_undef: false, llvm_value: \"  %call_builtin = call %\\\"num.NumParseResult(i64)\\\" @roc_builtins.str.to_int.i64(%str.RocStr %\\\"#arg1\\\"), !dbg !488\", llvm_type: \"%\\\"num.NumParseResult(i64)\\\" = type { i8, i64 }\" } }) but expected PointerValue variant', /Users/rvcas/.cargo/git/checkouts/inkwell-85610d8ccb0c28f9/14b78d9/src/values/enums.rs:285:13</code></p>",
        "id": 263361807,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395018
    },
    {
        "content": "<p>I kinda have no clue what that means tbh</p>",
        "id": 263361890,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395046
    },
    {
        "content": "<p>set <code>RUST_BACKTRACE=1</code> to figure out where that cast was called</p>",
        "id": 263361948,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638395075
    },
    {
        "content": "<p>oh right</p>",
        "id": 263361972,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395085
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/z3IZme8Rk9eAN2u0v9mIobc9/Screen-Shot-2021-12-01-at-4.45.33-PM.png\">Screen-Shot-2021-12-01-at-4.45.33-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/z3IZme8Rk9eAN2u0v9mIobc9/Screen-Shot-2021-12-01-at-4.45.33-PM.png\" title=\"Screen-Shot-2021-12-01-at-4.45.33-PM.png\"><img src=\"/user_uploads/22008/z3IZme8Rk9eAN2u0v9mIobc9/Screen-Shot-2021-12-01-at-4.45.33-PM.png\"></a></div>",
        "id": 263362073,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395150
    },
    {
        "content": "<p>yo this M1 is so fast, I have zero fear of a full rebuild takes me max 48s lmao</p>",
        "id": 263362143,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395169
    },
    {
        "content": "<p>seems to be related to how things are returned from zig</p>",
        "id": 263362657,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395412
    },
    {
        "content": "<p>I probably need to look at fromUtf8C</p>",
        "id": 263362969,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395564
    },
    {
        "content": "<p>ok I know what to do, just a sec</p>",
        "id": 263363147,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638395659
    },
    {
        "content": "<p>hmm for decimal it may be that zig returns via a pointer</p>",
        "id": 263363159,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638395669
    },
    {
        "content": "<p>because the <code>{ errcode, value }</code> struct is bigger than an i128</p>",
        "id": 263363180,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638395686
    },
    {
        "content": "<p>oh sorry, Int doesn't work yet</p>",
        "id": 263364657,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638396447
    },
    {
        "content": "<p>I think I'm stuck, trying to mimic fromUtf8C didn't work :'(</p>",
        "id": 263364679,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638396468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Str.2EtoNum/near/263363159\">said</a>:</p>\n<blockquote>\n<p>hmm for decimal it may be that zig returns via a pointer</p>\n</blockquote>\n<p>the above output was from running <code>Str.toNum \"1\"</code></p>",
        "id": 263364899,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638396603
    },
    {
        "content": "<p>so where is that invalid cast?</p>",
        "id": 263366113,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638397244
    },
    {
        "content": "<p>also when dealing with records, keep in mind that we reorder fields</p>",
        "id": 263366156,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638397274
    },
    {
        "content": "<p>and so on the zig side the fields must also be in the right order</p>",
        "id": 263366162,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638397283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Str.2EtoNum/near/263366113\">said</a>:</p>\n<blockquote>\n<p>so where is that invalid cast?</p>\n</blockquote>\n<p>oh I'm dumb, I should have walked down the stack trace further</p>",
        "id": 263366286,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638397340
    },
    {
        "content": "<p>let me do that again</p>",
        "id": 263366299,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638397346
    },
    {
        "content": "<p>it's hard to tell to be honest, I just ran the stack trace again</p>",
        "id": 263366426,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638397425
    },
    {
        "content": "<p>I have everything as is pushed, I didn't bother committing my attempt at mimicking what fromUtf8 does</p>",
        "id": 263366664,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638397563
    },
    {
        "content": "<p>found the issue, can't fix it now. The problem is t hat the zig code returns a struct { errcode, value }, but the roc function needs to return a result</p>",
        "id": 263367993,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638398365
    },
    {
        "content": "<p>we have some examples of that</p>",
        "id": 263368002,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638398374
    },
    {
        "content": "<p><code>num_overflow_checked</code> in can/src/builtins.rs is probably a good example</p>",
        "id": 263368041,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638398402
    },
    {
        "content": "<p>ah I see, so my suspicions were correct but I was looking at a bad example. Thanks, I'll see if I can work with that</p>",
        "id": 263368797,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638398884
    },
    {
        "content": "<p>I'm about to continue this</p>",
        "id": 263479354,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638469108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> I tried your suggestion, I think I've made progress but it's not quite there yet</p>",
        "id": 263486024,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638472021
    },
    {
        "content": "<p>I pushed those changes, I use an If Expr to check the returned record's \"error code\" field for a value greater than zero</p>",
        "id": 263486089,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638472061
    },
    {
        "content": "<p>I might be doing something wrong with the vars tho, it's a little hard to tell for me</p>",
        "id": 263486127,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638472078
    },
    {
        "content": "<p>got a test working, pushed, see bottom of <code>gen_str.rs</code></p>",
        "id": 263489302,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638473478
    },
    {
        "content": "<p>nice</p>",
        "id": 263490425,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474081
    },
    {
        "content": "<p>thanks</p>",
        "id": 263490427,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474083
    },
    {
        "content": "<p>cool, I see your commit, a few subtle but key changes</p>",
        "id": 263490903,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474309
    },
    {
        "content": "<p>I'm going to have to think about how to do Float</p>",
        "id": 263491598,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474629
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/1bHb4mEgF-4ucb2XY_1ut9Zc/Screen-Shot-2021-12-02-at-2.50.00-PM.png\">Screen-Shot-2021-12-02-at-2.50.00-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/1bHb4mEgF-4ucb2XY_1ut9Zc/Screen-Shot-2021-12-02-at-2.50.00-PM.png\" title=\"Screen-Shot-2021-12-02-at-2.50.00-PM.png\"><img src=\"/user_uploads/22008/1bHb4mEgF-4ucb2XY_1ut9Zc/Screen-Shot-2021-12-02-at-2.50.00-PM.png\"></a></div>",
        "id": 263491617,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474644
    },
    {
        "content": "<p>that layout makes sense because how would it even know the string contains a float in it before hand</p>",
        "id": 263491692,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474687
    },
    {
        "content": "<p>I'm not sure it would make sense to try the parseFloat if if parseInt fails</p>",
        "id": 263491958,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474814
    },
    {
        "content": "<p>is there a run time cost to that?</p>",
        "id": 263491977,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474827
    },
    {
        "content": "<p>or does it make more sense to have 3 builtins for this instead ?</p>",
        "id": 263492348,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638474984
    },
    {
        "content": "<p>float should work in an actual program</p>",
        "id": 263492751,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638475186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> thoughts here? I'm not sure there is anything good we can do in this case</p>",
        "id": 263492939,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638475241
    },
    {
        "content": "<p>default to float?</p>",
        "id": 263492961,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638475255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Str.2EtoNum/near/263492751\">said</a>:</p>\n<blockquote>\n<p>float should work in an actual program</p>\n</blockquote>\n<p>I see, cause it can infer it based on usage</p>",
        "id": 263492993,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475275
    },
    {
        "content": "<p>makes sense</p>",
        "id": 263492994,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475277
    },
    {
        "content": "<p>it would be nice for it to just work in the repl though</p>",
        "id": 263493028,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475294
    },
    {
        "content": "<p>but how could it?</p>",
        "id": 263493071,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638475318
    },
    {
        "content": "<p>I know, that's the question :'(</p>",
        "id": 263493719,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>x = Str.toNum &quot;1.0&quot;\n\nx + 2.0\n</code></pre></div>",
        "id": 263493825,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475650
    },
    {
        "content": "<p>this should work tho like you said</p>",
        "id": 263493850,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475663
    },
    {
        "content": "<p>modulo error handling</p>",
        "id": 263494029,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638475752
    },
    {
        "content": "<p>yes</p>",
        "id": 263494033,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638475754
    },
    {
        "content": "<p>right right lol</p>",
        "id": 263494149,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475807
    },
    {
        "content": "<p>I can add a test case for that at least</p>",
        "id": 263494200,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638475834
    },
    {
        "content": "<p>ok that passes now</p>",
        "id": 263494666,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638476127
    },
    {
        "content": "<p>should we bother supporting dec right now? or should we take the WIP prefix off the PR</p>",
        "id": 263495245,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638476414
    },
    {
        "content": "<p>dec has a fromstr already, so might as well implement that one?</p>",
        "id": 263495366,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638476477
    },
    {
        "content": "<p>oh right</p>",
        "id": 263495392,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638476492
    },
    {
        "content": "<p>I just need to switch the function that gets called in the <a href=\"http://build.rs\">build.rs</a> match case then</p>",
        "id": 263495421,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638476515
    },
    {
        "content": "<p>I have a failing test case written already so I'll go ahead and try to make it pass</p>",
        "id": 263495483,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638476536
    },
    {
        "content": "<p>ok almost there: <code>'LLVM error: Did not get return value from bitcode function \"roc_builtins.dec.from_str\"'</code></p>",
        "id": 263497067,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638477355
    },
    {
        "content": "<p>pushed the changes as well</p>",
        "id": 263497081,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638477361
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">fromStr</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">num_</span><span class=\"p\">.</span><span class=\"n\">NumParseResult</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">@call</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">modifier</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">always_inline</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">RocDec</span><span class=\"p\">.</span><span class=\"n\">fromStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">arg</span><span class=\"p\">}))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">dec</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">errorcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dec</span><span class=\"p\">.</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">errorcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 263497130,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638477374
    },
    {
        "content": "<p>not exactly sure what I'm missing here</p>",
        "id": 263498201,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638478022
    },
    {
        "content": "<p>look at the LLVM IR,</p>",
        "id": 263499459,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638478734
    },
    {
        "content": "<p>how do I dump that from the test?</p>",
        "id": 263500733,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638479357
    },
    {
        "content": "<p>is there a print statement somewhere I can uncomment or add?</p>",
        "id": 263500760,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638479376
    },
    {
        "content": "<p>yes, in <code>compiler/test_gen/src/helpers/llvm.rs</code></p>",
        "id": 263501003,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638479516
    },
    {
        "content": "<p>line 242 I think</p>",
        "id": 263501054,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638479528
    },
    {
        "content": "<p>right ok, that's what I thought, I'm going to take a break and come back to this in a bit</p>",
        "id": 263501144,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638479591
    },
    {
        "content": "<p>so I think this edge case means it can't be <code>Num.fromStr</code> and instead the Roc API needs to be like <code>Str.toU8</code>, <code>Str.toF64</code>, etc. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263506137,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482518
    },
    {
        "content": "<p>because other things depend on any <code>Num *</code> value being an integer</p>",
        "id": 263506181,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482535
    },
    {
        "content": "<p>and if we do <code>Num.fromStr \"1.1\"</code> and that fails because it was expecting an int, that's super confusing</p>",
        "id": 263506211,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482548
    },
    {
        "content": "<p>whereas <code>Str.toF64 \"1.1\"</code> will obviously succeed, and <code>Str.toI64 \"1.1\"</code> will obviously fail</p>",
        "id": 263506282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482593
    },
    {
        "content": "<p>right</p>",
        "id": 263506330,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482632
    },
    {
        "content": "<p><code>Str.toI64 \"1.0\"</code> is a little less clear, but I think either design is fine; we could either allow it because it's an integer or give an error because it' has a decimal point</p>",
        "id": 263506337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482635
    },
    {
        "content": "<p>What if we had the tag be an argument?</p>",
        "id": 263506420,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482665
    },
    {
        "content": "<p>Str.toNum “1.0” F64</p>",
        "id": 263506472,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482699
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  what would the type of that function be?</p>",
        "id": 263506521,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482718
    },
    {
        "content": "<p>oh</p>",
        "id": 263506538,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482732
    },
    {
        "content": "<p>A tag union could be the signature for the second arg?</p>",
        "id": 263506577,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482759
    },
    {
        "content": "<p>I mean what's the type of that <code>Str.toNum</code> function?</p>",
        "id": 263506634,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482773
    },
    {
        "content": "<p>And we fill it in with all available num types?</p>",
        "id": 263506640,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482775
    },
    {
        "content": "<p>(like what's the return type specifically)</p>",
        "id": 263506650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482779
    },
    {
        "content": "<p>Hm right</p>",
        "id": 263506693,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482802
    },
    {
        "content": "<p>e.g. <code>Str.toI64 : Str -&gt; Result I64 [ InvalidI64Str ]*</code> - we know it gives an I64</p>",
        "id": 263506703,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482811
    },
    {
        "content": "<p>but yeah</p>",
        "id": 263506705,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482812
    },
    {
        "content": "<p>could it still not be Num?</p>",
        "id": 263506717,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482823
    },
    {
        "content": "<p>I think if we try to have a more flexible function than that, we end up returning <code>Num *</code></p>",
        "id": 263506724,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482826
    },
    {
        "content": "<p>which has the edge case problem</p>",
        "id": 263506744,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482835
    },
    {
        "content": "<p>like we could try to do <code>Num.toStr : Str, a -&gt; Result (Num a) [ InvalidNumStr ]*</code></p>",
        "id": 263506784,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482861
    },
    {
        "content": "<p>The return type isn’t exactly the issue it’s not knowing the type within the string for the layout without some usage for inference</p>",
        "id": 263506785,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482862
    },
    {
        "content": "<p>unless I misunderstood the question</p>",
        "id": 263506796,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482869
    },
    {
        "content": "<p>but now you can actually pass an <code>a</code> value, which we don't want because that's supposed to be a phantom type in <code>Num</code> so there's no runtime overhead</p>",
        "id": 263506814,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482881
    },
    {
        "content": "<p>oh I see</p>",
        "id": 263506871,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482897
    },
    {
        "content": "<p>yea so it works fine with usage allowing F64 to be inferred and then it hits the correct branch</p>",
        "id": 263506925,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482924
    },
    {
        "content": "<p>but just stand alone in the repl it defaults to Int I64</p>",
        "id": 263506969,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482947
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">x = </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toNum</span> <span class=\"s\">\"1.1\"</span> <span class=\"nx\">F64</span> <span class=\"o\">|&gt;</span> <span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">withDefault</span> <span class=\"mi\">0</span>\n\n<span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"mi\">999999999999</span>\n</code></pre></div>",
        "id": 263507005,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482977
    },
    {
        "content": "<p>so there we're saying \"hey parse this as an F64\" but its return type is still <code>Num *</code></p>",
        "id": 263507020,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638482989
    },
    {
        "content": "<p>yea</p>",
        "id": 263507031,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638482998
    },
    {
        "content": "<p>Then I can match on the layout of ARG_2</p>",
        "id": 263507105,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483015
    },
    {
        "content": "<p>so when we add it to 9999999999, all the <code>Num.add</code> is going to know is that it's a <code>Num *</code> + <code>Num *</code></p>",
        "id": 263507110,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483016
    },
    {
        "content": "<p>yep</p>",
        "id": 263507123,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483024
    },
    {
        "content": "<p>that info won't make it to <code>Num.add</code></p>",
        "id": 263507131,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483027
    },
    {
        "content": "<p>dam</p>",
        "id": 263507142,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483033
    },
    {
        "content": "<p>lol</p>",
        "id": 263507148,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483038
    },
    {
        "content": "<p>I guess separate functions makes the most sense? But realistically it’ll be fine as is in a real program</p>",
        "id": 263507211,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483078
    },
    {
        "content": "<p>yeah I think separate functions is the way to go</p>",
        "id": 263507235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483094
    },
    {
        "content": "<p>but we can probably get some good code reuse behind the scenes</p>",
        "id": 263507256,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483111
    },
    {
        "content": "<p>Str.toInt and Str.toFloat then</p>",
        "id": 263507257,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483113
    },
    {
        "content": "<p>the reverse doesn’t have that problem of course</p>",
        "id": 263507316,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483128
    },
    {
        "content": "<p>Num.toStr works fine</p>",
        "id": 263507330,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483138
    },
    {
        "content": "<p>This probably explains why most systems langs have different functions for that</p>",
        "id": 263507352,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483155
    },
    {
        "content": "<p>agreed! <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 263507393,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483194
    },
    {
        "content": "<p>Also Str.toDec of course</p>",
        "id": 263507401,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483199
    },
    {
        "content": "<p>I’ll adjust that today</p>",
        "id": 263507410,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483205
    },
    {
        "content": "<p>I think <code>Str.toNum</code> still works right?</p>",
        "id": 263507422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483218
    },
    {
        "content": "<p>oops</p>",
        "id": 263507428,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483223
    },
    {
        "content": "<p>I know it’s been confusing me too</p>",
        "id": 263507445,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483238
    },
    {
        "content": "<p>I mean <code>Num.toStr</code> still works</p>",
        "id": 263507448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483239
    },
    {
        "content": "<p>100%</p>",
        "id": 263507497,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483246
    },
    {
        "content": "<p>one thing we could do is use the word <code>parse</code></p>",
        "id": 263507500,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483247
    },
    {
        "content": "<p>yea</p>",
        "id": 263507507,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483253
    },
    {
        "content": "<p>Num.toStr takes Num * as the arg so we concretely know the layout before hand</p>",
        "id": 263507569,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483302
    },
    {
        "content": "<p>like <code>Num.parseI64</code> or <code>Str.parseI64</code> or something</p>",
        "id": 263507593,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483321
    },
    {
        "content": "<p>parse is cool, although I like the consistency with toStr</p>",
        "id": 263507705,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483376
    },
    {
        "content": "<p>Do we want I64 etc. or all Int *?</p>",
        "id": 263507744,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483402
    },
    {
        "content": "<p>So parseInt?</p>",
        "id": 263507762,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483413
    },
    {
        "content": "<p>oh that's interesting</p>",
        "id": 263507802,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483452
    },
    {
        "content": "<p>Oh actually you’re right</p>",
        "id": 263507904,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483520
    },
    {
        "content": "<p>It has to be per type</p>",
        "id": 263507918,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483528
    },
    {
        "content": "<p>so <code>Int</code> is probably fine, but if we did a <code>parseFrac</code> then it might need to be different between float vs dec because of <code>NaN</code>, <code>Infinity</code>, and <code>-Infinity</code></p>",
        "id": 263507936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483539
    },
    {
        "content": "<p>Cause again it defaults to I64</p>",
        "id": 263507939,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483540
    },
    {
        "content": "<p>oh yeah that's another point</p>",
        "id": 263507969,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483555
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 263507980,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483567
    },
    {
        "content": "<p>Ima sit down to eat brb</p>",
        "id": 263508007,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638483597
    },
    {
        "content": "<p>yeah like what if you do <code>parseInt</code> on a number that's too big for I64, but it would have fit in I128?</p>",
        "id": 263508056,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638483607
    },
    {
        "content": "<p>yea you right or even like if you want an I32 but it defaults to I64</p>",
        "id": 263509023,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638484241
    },
    {
        "content": "<p>If I'm following this correctly these are issues that arise only in the REPL because you don't have the full program to do type inference.<br>\nCould we say that the REPL input <em>must</em> have type annotations in certain cases? Do these issues go away then? Or is it too hard to make good error messages for that?</p>",
        "id": 263570285,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1638533558
    },
    {
        "content": "<p>Like maybe in REPL mode it's an error to define a value whose type we can't resolve. You have to annotate it? Maybe that's too annoying, just an idea.</p>",
        "id": 263570586,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1638533724
    },
    {
        "content": "<p>there is not really a good place for them to go</p>",
        "id": 263572765,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638534842
    },
    {
        "content": "<p>haskell has type applications for this sort of thing, so you can say <code>identity @Word32 42</code> and that would provide all the required type info</p>",
        "id": 263572949,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638534930
    },
    {
        "content": "<blockquote>\n<p>these are issues that arise only in the REPL because you don't have the full program to do type inference.</p>\n</blockquote>\n<p>they can happen even in a full program, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>x = 5\n\nif x - 1 &gt; 0 then\n</code></pre></div>\n<p>should the branch get taken? In order to decide that, we need to evaluate <code>x - 1</code> where both <code>x</code> and <code>1</code> have the type <code>Num *</code></p>",
        "id": 263580575,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638538740
    },
    {
        "content": "<p>so in general I consider it valuable for Roc to maintain the invariant that you never need to add a type annotation to anything for any reason</p>",
        "id": 263580735,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638538818
    },
    {
        "content": "<p>among other things, this means that the editor feature of \"highlight this to find out its type\" works 100% of the time</p>",
        "id": 263580772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638538835
    },
    {
        "content": "<p>I'd be very hesitant to give that up, especially when the <code>parseI64</code> design is very simple and doesn't have this problem <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 263580888,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638538912
    },
    {
        "content": "<p>Yea it’s just a bunch of copy and paste work tbh, it’ll be fine</p>",
        "id": 263593510,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638544508
    },
    {
        "content": "<p>did we settle on parse or to as the prefix?</p>",
        "id": 263593534,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638544524
    },
    {
        "content": "<p>parseI64 or toI64</p>",
        "id": 263593566,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638544543
    },
    {
        "content": "<p><code>toI64</code> seems better in every way :p</p>",
        "id": 263593954,
        "sender_full_name": "Anton",
        "timestamp": 1638544709
    },
    {
        "content": "<p>I like that it’s consistent with Num.toStr</p>",
        "id": 263594224,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638544832
    },
    {
        "content": "<p>yeah let's try <code>Str.toI64</code> and see if people get confused in practice; can always try the longer <code>parse</code> if so!</p>",
        "id": 263594703,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638545077
    },
    {
        "content": "<p>I’m happy either way</p>",
        "id": 263597335,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638546276
    },
    {
        "content": "<p>I’ll carry on a bit later btw, it’s art Basel weekend in Miami right now so stuff is pretty crazy and I have to do some running around</p>",
        "id": 263604911,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638549573
    },
    {
        "content": "<p>if anyone else wants they are welcome to continue no need to wait for me</p>",
        "id": 263604987,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638549605
    },
    {
        "content": "<p>I’m back home, I’ll pick this back up again in a sec</p>",
        "id": 263632704,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638562921
    },
    {
        "content": "<p>I haven’t forgotten about this. My b for not getting it done yesterday</p>",
        "id": 263748755,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638678423
    },
    {
        "content": "<p>tomorrow I should be good to go</p>",
        "id": 263748762,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638678436
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/g389H4Z1IC7oYg6A2zFUCfVK/Screen-Shot-2021-12-06-at-10.07.23-PM.png\">Screen-Shot-2021-12-06-at-10.07.23-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/g389H4Z1IC7oYg6A2zFUCfVK/Screen-Shot-2021-12-06-at-10.07.23-PM.png\" title=\"Screen-Shot-2021-12-06-at-10.07.23-PM.png\"><img src=\"/user_uploads/22008/g389H4Z1IC7oYg6A2zFUCfVK/Screen-Shot-2021-12-06-at-10.07.23-PM.png\"></a></div>",
        "id": 263953577,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638846468
    },
    {
        "content": "<p>we're cooking. so I was able to do it with the same low-level for all aliases</p>",
        "id": 263953618,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638846494
    },
    {
        "content": "<p>so it's just a matter of defining the builtins and mapping them to <code>str_to_num</code> in can <code>builtins.rs</code></p>",
        "id": 263953648,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638846556
    },
    {
        "content": "<p>are we happy with this PR? anyone got time to review?<br>\n<a href=\"https://github.com/rtfeldman/roc/pull/2116\">https://github.com/rtfeldman/roc/pull/2116</a></p>",
        "id": 264235989,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639005933
    },
    {
        "content": "<p>I reviewed it but I couldn't approve because I started the PR.</p>",
        "id": 264274397,
        "sender_full_name": "Anton",
        "timestamp": 1639041673
    },
    {
        "content": "<p>merged! <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>\n<p>IT'S ALIVE!!!!</p>",
        "id": 264311614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1639061335
    },
    {
        "content": "<p>Awesome thank you</p>",
        "id": 264354636,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639078553
    },
    {
        "content": "<p>I’m gonna crawl back to wasm now :p</p>",
        "id": 264354714,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639078569
    },
    {
        "content": "<p>If anyone wants to explore why i128 and LLVM are not happy for the Dec/I128 functions feel free</p>",
        "id": 264354821,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639078616
    }
]