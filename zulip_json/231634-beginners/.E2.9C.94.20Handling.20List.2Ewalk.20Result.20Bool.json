[
    {
        "content": "<p>I think you want <code>Ok is_file if is_file -&gt;</code> as the first when branch and <code>_ -&gt;</code> as the second when branch</p>",
        "id": 491112449,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735412210
    },
    {
        "content": "<p>Sorry - never used Zulip before...I deleted my original message by mistake.</p>\n<p>So - trying to determine if a entry is a File or a Directory using \"if\" rather than \"when\"</p>\n<p>Code: <a href=\"https://github.com/bartonhammond/pullNightly/blob/main/list-walk.roc\">https://github.com/bartonhammond/pullNightly/blob/main/list-walk.roc</a></p>\n<p>Here's the code snipped:</p>\n<div class=\"codehilite\"><pre><span></span><code> foo = List.walk dir_list { file: [], dir: [] } \\state, elem -&gt;\n        if File.is_file! elem then\n            { state &amp; file: List.append state.file elem }\n        else\n            { state &amp; dir: List.append state.dir elem }\n</code></pre></div>\n<p>And the error is </p>\n<div class=\"codehilite\"><pre><span></span><code>This if condition needs to be a Bool:\n\n15│          if File.is_file! elem then\n                ^^^^^^^^^^^^^^^^^^\n\nThis File.is_file! call produces:\n\n    Result Bool [PathErr InternalIOErr.IOErr]\n\nBut I need every if condition to evaluate to a Bool—either Bool.true\nor Bool.false.\n</code></pre></div>",
        "id": 491113050,
        "sender_full_name": "Barton Hammond",
        "timestamp": 1735412803
    },
    {
        "content": "<p>so <code>File.is_file!</code> returns a <code>Result Bool [PathErr InternalIOErr.IOErr]</code>. Essentially, if the path is bad or if something else goes wrong, it will return a <code>PathErr</code>.</p>",
        "id": 491113164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735412930
    },
    {
        "content": "<p>Otherwise, it returns a boolean indicating if something is a file or not</p>",
        "id": 491113178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735412949
    },
    {
        "content": "<p>In the example, you have to decide what to do with the error.</p>",
        "id": 491113190,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735412973
    },
    {
        "content": "<p>Probably the easiest is just propagating the error with <code>?</code></p>",
        "id": 491113251,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735413004
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">walk?</span><span class=\"w\"> </span><span class=\"n\">dir_list</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"ss\">dir</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">is_file!</span><span class=\"sc\">? </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"ss\">file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"ss\">dir</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I think should work an propagate the error up the stack</p>",
        "id": 491113281,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735413037
    },
    {
        "content": "<p>I think that is the right syntax...</p>",
        "id": 491113294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735413052
    },
    {
        "content": "<p>Otherwise, you can handle the error locally:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">walk?</span><span class=\"w\"> </span><span class=\"n\">dir_list</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"ss\">dir</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">is_file!</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">is_file</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_file</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"ss\">file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"ss\">dir</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># Just ignore failures</span>\n<span class=\"w\">            </span><span class=\"n\">state</span>\n</code></pre></div>",
        "id": 491113396,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735413151
    },
    {
        "content": "<p>Sorry - this is very confusing...</p>\n<p>With this:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo = List.walk dir_list { file: [], dir: [] } \\state, elem -&gt;\n    when File.is_file! elem is\n        Ok is_file if is_file -&gt;\n            { state &amp; file: List.append state.file elem }\n        Ok _ -&gt;\n            { state &amp; dir: List.append state.dir elem }\n        _ -&gt;\n            # Just ignore failures\n            state\n</code></pre></div>\n<p>I  get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>I was partway through parsing a function, but I got stuck here:\n\n14│      foo = List.walk dir_list { file: [], dir: [] } \\state, elem -&gt;\n                                                                       ^\n\nI just saw a pattern, so I was expecting to see a -&gt; next.%\n</code></pre></div>",
        "id": 491113635,
        "sender_full_name": "Barton Hammond",
        "timestamp": 1735413392
    },
    {
        "content": "<p>Try putting some more newlines and indents in there</p>",
        "id": 491113829,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735413579
    },
    {
        "content": "<p>Seems like it doesn't know where the block starts?</p>",
        "id": 491113844,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735413597
    },
    {
        "content": "<p>sorry, I may have mixed up some tabbing. Didn't actually run the example, just typed it out</p>",
        "id": 491114007,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735413732
    },
    {
        "content": "<p>Oh, we don't have <code>List.walk!</code> so this function can't work.</p>",
        "id": 491114242,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735413972
    },
    {
        "content": "<p>wrt to formatting, my VSCode is not formatting the file on save.  I have the Roc Extension installed and have the settings.json updated.  <br>\nThe <code>roc_nightly</code> directory has the <code>roc</code> and <code>roc_language_server</code>.  </p>\n<p>When I am in any <code>roc</code> file, I do not have a menu option to \"format\" so I don't know if there is problem with file formatting.</p>\n<p>settings.json </p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;roc-lang.language-server.exe&quot;: &quot;/Users/bartonhammond/projects/roc/roc_nightly&quot;,\n  &quot;editor.formatOnSave&quot;: true\n}\n</code></pre></div>",
        "id": 491115042,
        "sender_full_name": "Barton Hammond",
        "timestamp": 1735414748
    },
    {
        "content": "<p>So to give a concrete solution here. Due to <code>File.is_file!</code> being effectful (e.g. having a <code>!</code> in the name), it can't be used with non-effectful functions like <code>List.walk</code>. Currently, roc does not have <code>List.walk!</code>, so this code must be done manually through a recursive functions (growing pains of having just switched to purity inference).</p>\n<p>So the solution right now is likely this:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">dirs_and_files!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">next_state</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">is_file!</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">is_file</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_file</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"ss\">file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">                    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"ss\">dir</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">                    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"c1\"># Just ignore failures</span>\n<span class=\"w\">                        </span><span class=\"n\">state</span>\n<span class=\"w\">            </span><span class=\"n\">dirs_and_files!</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"n\">next_state</span>\n\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">state</span>\n</code></pre></div>",
        "id": 491115289,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735414980
    },
    {
        "content": "<p>I'll have to learn more to understand what you're talking about.</p>",
        "id": 491115765,
        "sender_full_name": "Barton Hammond",
        "timestamp": 1735415428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"815215\">Barton Hammond</span> has marked this topic as resolved.</p>",
        "id": 491115893,
        "sender_full_name": "Notification Bot",
        "timestamp": 1735415570
    },
    {
        "content": "<p>Yeah, roc is currently in flux with a lot of changes that greatly affect syntax and direct code.</p>",
        "id": 491115899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735415580
    },
    {
        "content": "<p>Purity inference is one of them. Original design doc at the top of this thread: <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Purity.20inference.20proposal.20v3\">#ideas &gt; Purity inference proposal v3</a></p>",
        "id": 491115922,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735415618
    }
]