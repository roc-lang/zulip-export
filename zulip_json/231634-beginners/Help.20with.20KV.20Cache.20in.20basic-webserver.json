[
    {
        "content": "<p>I have started on <a href=\"https://github.com/roc-lang/basic-webserver/pull/17/files\">basic-webserver PR#17</a> to implement a simple KV cache for the webserver. This will also be helpful for when we have a builtin binary encoder/decoder, as this can be upgraded to store the value in the platform side, without manually handling on the application side.  </p>\n<p>Unfortunately, I think I'm blocked on ideas for how to actually store the data in-memory in Rust. I've implemented the rest of the functionality, and added an example app to test the feature.</p>\n<p>I am looking for some assistance for how to implement the following in <code>platform/src/lib.rs</code>. </p>\n<p>How can I allocate some memory, and make a thread-safe hyper friendly data structure to store the values in? How should one do this in a Rusty way?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[roc_fn(name = </span><span class=\"s\">\"getKV\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">get_kv</span><span class=\"p\">(</span><span class=\"n\">key</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">roc_std</span>::<span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">glue_manual</span>::<span class=\"n\">CacheError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// todo - how to implement this?</span>\n<span class=\"w\">    </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocResult</span>::<span class=\"n\">err</span><span class=\"p\">(</span><span class=\"n\">glue_manual</span>::<span class=\"n\">CacheError</span>::<span class=\"n\">NotFound</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[roc_fn(name = </span><span class=\"s\">\"setKV\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">set_kv</span><span class=\"p\">(</span><span class=\"n\">key</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">roc_std</span>::<span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// todo - how to implement this?</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 410801846,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704177164
    },
    {
        "content": "<p>Maybe use a <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\">HashMap</a>?</p>",
        "id": 410817415,
        "sender_full_name": "mkrieger1",
        "timestamp": 1704187537
    }
]