[
    {
        "content": "<p>I’m working on a sudoku solver in Roc. I started by porting over some Elm code for an interactive puzzle solving aid, but since I’m using basic-cli, I’m ditching the interactive bits and just building a (hopefully) fast solver.</p>\n<p>Since the constraints are different, I’m trying to simplify where I can. </p>\n<p>Here’s my first question: <br>\nI have an opaque type <code>Number := U8</code> to represent a value from 1-9, inclusive. The idea here is to prevent me from mistakenly ending up in a situation where a cell contains a nonsensical value. However, I’m not convinced this abstraction is worth the complexity. I am parsing a puzzle from a string, then manipulating it with a solving algorithm. I’m not accepting any user input in the process. Sure, my <code>Number.fromStr</code> function is a nice helper for parsing, but definitely isn’t necessary. </p>\n<p>What would you do?</p>",
        "id": 406082451,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701789920
    },
    {
        "content": "<p>Here's the code, for reference: <a href=\"https://github.com/sandprickle/roc-sudoku-solver/blob/main/Sudoku/Number.roc\">https://github.com/sandprickle/roc-sudoku-solver/blob/main/Sudoku/Number.roc</a></p>",
        "id": 406091275,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701792378
    },
    {
        "content": "<p>I somewhat reflexively question any abstraction I create, even one as simple as this. Not sure how productive it is.</p>",
        "id": 406092205,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701792559
    },
    {
        "content": "<p>Could also use a tag of 9 explicitly labelled values, which is arguably better than a U8.</p>",
        "id": 406093236,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701792743
    },
    {
        "content": "<p>Ah, that would also prevent errors within the Number module.</p>",
        "id": 406093720,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701792832
    },
    {
        "content": "<p>What would the memory footprint be of such a tag union?</p>",
        "id": 406093867,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701792854
    },
    {
        "content": "<p>That said, I would just use a U8 personally, but I think it would be easy to make a zero cost abstraction here.</p>\n<p>You can still do your opaque number wrapper. Just don't defensively verify. Make your verification only be through fromNumber (don't have link rn, but parse don't validate) and only exposing <a href=\"http://Number.one\">Number.one</a> through Number.nine otherwise. This way you limit where checks appear and ensure you are never accidentally generate a bad number.</p>",
        "id": 406094110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701792902
    },
    {
        "content": "<p>Tag of up to 256 elements that doesn't wrap any datat is the same size as a U8</p>",
        "id": 406094392,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701792952
    },
    {
        "content": "<p>So I think both would be equally valid and performant</p>",
        "id": 406094515,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701792969
    },
    {
        "content": "<p>Also, the opaque wrapper will compile away so also should be as performant as just using the underlying U8</p>",
        "id": 406094667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701792997
    },
    {
        "content": "<p>Plus since we have abilities now, Number can have Eq, Inspect, Hash, if you need them. Probably can just use the autoderive impl.</p>",
        "id": 406094984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793055
    },
    {
        "content": "<p>Yeah, I figured I wasn't incurring a runtime performance penalty here. Was just wondering whether the opaque wrapper was a good idea or not.</p>\n<p>Right now the only verification I'm doing are in <code>Number.fromInt</code>, <code>Number.fromIntNormalize</code>, and <code>Number.fromStr</code>, which was my attempt at using the parse don't validate approach.</p>",
        "id": 406095600,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793168
    },
    {
        "content": "<p>Yes, I am autoderiving Eq and Hash</p>",
        "id": 406095674,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793182
    },
    {
        "content": "<p>Glad memory footprint of Tags came up. I was wondering whether I could make any improvements to my representation of a cell: </p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Cell : [ Fixed Number, Empty (Set Number)]\n</code></pre></div>\n<p>So this would use 1 <code>U8</code> plus the size of the <code>Set</code> per cell?</p>",
        "id": 406096690,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793427
    },
    {
        "content": "<p>Instead of <code>fromInt</code> I bet most of the time, you can just expose a constant number and a list of all numbers and build from that, to remove a tiny bit of extra checks, but I wouldn't worry about perf too much right away. That last detail can be dug into when profiling.</p>",
        "id": 406096792,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793450
    },
    {
        "content": "<p>Yeah, your size is correct 25bytes. Then cause padding is cruel, 32byte. If I'm correct</p>",
        "id": 406097073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793550
    },
    {
        "content": "<p>Ah, so getting rid of the tag wouldn't actually save me anything because of padding?</p>",
        "id": 406097231,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793586
    },
    {
        "content": "<p>Getting rid of the tag would make it 24bytes.</p>",
        "id": 406097316,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793611
    },
    {
        "content": "<p>And it wouldn't pad.</p>",
        "id": 406097341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793617
    },
    {
        "content": "<p>Oh, so that would actually be an improvement then.</p>",
        "id": 406097480,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793648
    },
    {
        "content": "<p>I don't think I need to differentiate between a fixed value and a cell with only one possible value, so that shouldn't be difficult.</p>",
        "id": 406097642,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793680
    },
    {
        "content": "<p>Yes</p>\n<p>And could definitely be improved more if you are willing to write a BitSet abstraction on top of a U16.</p>",
        "id": 406097734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793692
    },
    {
        "content": "<p>That also probably would be a lot faster due to removing hashing and a memory lookup</p>",
        "id": 406097946,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793738
    },
    {
        "content": "<p>Depending on how advance my solving algorithm gets, I may need to encode whether the cell was a hint given at the beginning or not. But there are plenty of extra bits where I could hide that information.</p>",
        "id": 406097969,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793743
    },
    {
        "content": "<p>I was definitely  wondering whether a Set was a good choice here. Logically it's what i want, but I had a hunch a List might be better.</p>",
        "id": 406098115,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793780
    },
    {
        "content": "<p>But a List still allocates on the heap, and another question was going to be how I might avoid those heap allocations.</p>",
        "id": 406098213,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701793801
    },
    {
        "content": "<p>Two options.</p>\n<ol>\n<li>BitSet</li>\n<li>Tuple</li>\n</ol>",
        "id": 406098381,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793829
    },
    {
        "content": "<ol start=\"3\">\n<li>If you really don't want to write a BitSet, write out the gigantic tag with all combinatorial possibilities (terrible idea, but would be performant and small)</li>\n</ol>",
        "id": 406098858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701793927
    },
    {
        "content": "<p>Writing a bit set seems fine to me</p>",
        "id": 406099132,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701794020
    },
    {
        "content": "<p>I kinda want to write the same algorithm in Zig and benchmark both implementations. Not using a BitSet would put Roc at a disadvantage because Zig packed structs make that trivial</p>",
        "id": 406099762,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701794161
    },
    {
        "content": "<p>Hmm, a BitSet should also allow me to bypass a lot of <code>Result</code>s</p>",
        "id": 406103974,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701795201
    },
    {
        "content": "<p>yep</p>",
        "id": 406109121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701796715
    },
    {
        "content": "<p>I’ll plan on implementing it a few different ways and sharing the benchmarks for each.</p>",
        "id": 406110128,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701797090
    },
    {
        "content": "<p>One version I’d like to implement is a version where the 81-element list representing the Grid is swapped for some stack structure. Except that it seems rather unwieldy to do so. I need to be able to access arbitrary cells. Is this even possible with a tuple?</p>",
        "id": 406119088,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701800267
    },
    {
        "content": "<p>Maybe the better approach to avoiding that heap allocation cost would be to use a platform that does arena allocation</p>",
        "id": 406119248,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701800310
    },
    {
        "content": "<p>Though I guess it’s probably only one allocation anyway so maybe not much of an issue</p>",
        "id": 406119423,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701800379
    },
    {
        "content": "<p><code>.0</code>, <code>.1.</code>, ...., <code>.80</code></p>",
        "id": 406120197,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701800661
    },
    {
        "content": "<p>Then make a wrapper function that maps from index to those fucntions if you need to use an arbitrary nat index....it isn't great......</p>",
        "id": 406120245,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701800687
    },
    {
        "content": "<p>Ok I wasn’t sure whether I could do that or not.</p>",
        "id": 406122197,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701801367
    },
    {
        "content": "<p>Definitely not ergonomic. I’ll have to see how much performance it gains me.</p>",
        "id": 406122239,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1701801389
    },
    {
        "content": "<p>Yeah......</p>",
        "id": 406122930,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701801654
    },
    {
        "content": "<p>I want tuples to work like arrays on the stack with more features like this</p>",
        "id": 406122964,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701801671
    },
    {
        "content": "<p>Or just to have a real stack allocated array type</p>",
        "id": 406122982,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701801679
    },
    {
        "content": "<p>You may find the <a href=\"#narrow/stream/304641-ideas/topic/SIMD.20API/near/279933993\">SIMD discussion and design proposal</a> interesting background on Tuples</p>",
        "id": 406124930,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701802404
    },
    {
        "content": "<p>Any plans for a <code>List.walkUntilWithIndex</code>, or tips on how I could implement something like this myself?</p>",
        "id": 407095970,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702234183
    },
    {
        "content": "<p>They are written here in roc: <a href=\"https://github.com/roc-lang/roc/blob/f795d0856a8a68747aa7bc975827bd02ff8d4610/crates/compiler/builtins/roc/List.roc#L494-L579\">https://github.com/roc-lang/roc/blob/f795d0856a8a68747aa7bc975827bd02ff8d4610/crates/compiler/builtins/roc/List.roc#L494-L579</a></p>",
        "id": 407096134,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702234332
    },
    {
        "content": "<p>Would be a great first issue to add it.</p>",
        "id": 407096139,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702234340
    },
    {
        "content": "<p>Ah, ok. I see there are some helper functions in that file I could use to implement it.</p>",
        "id": 407096485,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702234690
    },
    {
        "content": "<p>Shall I go ahead and submit an issue for it?</p>",
        "id": 407096494,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702234704
    },
    {
        "content": "<p>Also, want to check to see whether I'm looking for the right function here.</p>\n<p>My sudoku grid is represented currently as <code>List [Fixed Number, Empty (List Number)]</code></p>\n<p>When cell does not have a number filled in, I instead store a list of possible values for that cell. The first step in solving the puzzle is to prune extraneous values from this list. After that, I will use a backtracking algorithm to visit each empty cell in turn, try setting the value to one of the possible values, and check whether that produces a valid solution. If so, I return it. If not, I try the next possible value. If none of those work, I move on to the next empty cell.</p>",
        "id": 407096860,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702234960
    },
    {
        "content": "<p>Hmm, <code>List.walkWithIndex</code> would probably be sufficient if I actually want to check for multiple solutions. Which I should probably do.</p>",
        "id": 407096930,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702235001
    },
    {
        "content": "<p>I'm still open to adding <code>walkUntilWithIndex</code> if we want that though.</p>",
        "id": 407096976,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702235036
    },
    {
        "content": "<p>Actually, I still want to be able to bail early when checking for multiple solutions. If I find a second solution halfway through, I want to be able to return an error immediately.</p>",
        "id": 407097402,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702235432
    },
    {
        "content": "<p><span aria-label=\"duck\" class=\"emoji emoji-1f986\" role=\"img\" title=\"duck\">:duck:</span></p>",
        "id": 407097410,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702235445
    },
    {
        "content": "<p>If you want to work on it, just feel free to add and make a PR. If you don't filing an issue would be great.</p>",
        "id": 407097789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702235857
    }
]