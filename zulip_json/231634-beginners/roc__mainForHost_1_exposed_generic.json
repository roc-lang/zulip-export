[
    {
        "content": "<p>How do you know what the exposed function signature will be for e.g. <code>mainForHost : Str -&gt; Str</code>? I have been having a hard time trying to make a very basic platform using zig than the platform switching example which is just <code>mainForHost : Str</code>. Is there a way to generate the LLVM for example which might provide a clue as to the expected signature?</p>",
        "id": 401248015,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699569251
    },
    {
        "content": "<p>For reference I have been trying to get <a href=\"https://github.com/lukewilliamboswell/roc-serverless\">https://github.com/lukewilliamboswell/roc-serverless</a> working.. but even without the wasm part I'm not confident I have the signature correct</p>",
        "id": 401248152,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699569352
    },
    {
        "content": "<p>Would it be possible fore something like <code>roc glue</code> to generate this signature in future?</p>",
        "id": 401248518,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699569569
    },
    {
        "content": "<p><code>--debug</code></p>",
        "id": 401250026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699570525
    },
    {
        "content": "<p>That will get you the llvm ir</p>",
        "id": 401250035,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699570530
    },
    {
        "content": "<p>I think I answered part of my question above. Build it using a debug version of the compiler and I get a <code>.bc</code> file</p>",
        "id": 401250039,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699570534
    },
    {
        "content": "<p>And yeah, all of this can be generated by roc glue.</p>",
        "id": 401250105,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699570570
    },
    {
        "content": "<p>The roc webserver that Richard is working on in rust had these functions generated (though currently with a bug)</p>",
        "id": 401250144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699570600
    },
    {
        "content": "<p>Also, debug should get you a <code>.ll</code> file</p>",
        "id": 401250200,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699570636
    },
    {
        "content": "<p><code>'I could not find the debugir tool on the PATH</code> do you have to build that from source? Is there a distribution for macos?</p>",
        "id": 401250409,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699570752
    },
    {
        "content": "<p>You actually don't need it. The <code>.ll</code> file should exist now.</p>",
        "id": 401250447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699570778
    },
    {
        "content": "<p>This will help me investigate further</p>",
        "id": 401251109,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699571001
    },
    {
        "content": "<p>The glue from Richard's webserver generates identically to what I expect, two pointers return and argument of RocStr.</p>\n<p>The llvm though gives, which looks like it takes a single pointer.</p>\n<div class=\"codehilite\"><pre><span></span><code>define void @roc__mainForHost_1_exposed_generic(ptr %0) {\nentry:\n  %call = call fastcc {} @_mainForHost_f03bf86f79d121cbfd774dec4a65912e99f5f17c33852bbc45e81916e62b53b()\n  store {} %call, ptr %0, align 1\n  ret void\n}\n</code></pre></div>\n<p>The issue I have is that zig is generating different wasm type signature from roc I think. How is this possible?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build --target=wasm32 examples/echo.roc\nðŸ”¨ Rebuilding platform...\nLLD Link... warning(link): unexpected LLD stderr:\nwasm-ld: warning: function signature mismatch: roc__mainForHost_1_exposed_generic\n&gt;&gt;&gt; defined as (i32, i32) -&gt; void in lto.tmp\n&gt;&gt;&gt; defined as (i32) -&gt; void in /Users/luke/.cache/zig/o/21804a4778e09cb059cc1335d2b95b55/roc_appxhNgOx.o\n\n0 errors and 0 warnings found in 420 ms while successfully building:\n\n    examples/echo.wasm\n</code></pre></div>\n<p>I suspect there is some kind of optimization going on maybe?</p>",
        "id": 401253553,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699572656
    },
    {
        "content": "<p>I figured it out!! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I had to change the platform from <code>mainForHost = main</code> to <code>mainForHost = \\str -&gt; main str</code> and then it works. I have no idea why.</p>",
        "id": 401254132,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699573079
    },
    {
        "content": "<p>sorry, just saw this. it's because of lambda sets <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 401255185,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699573864
    },
    {
        "content": "<p>I think there's an issue to make it so that's automatically suggested in these cases</p>",
        "id": 401255211,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699573887
    },
    {
        "content": "<p>Can we automatically just wrap/add that on the compiler side so users don't have to?</p>",
        "id": 401255332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699573960
    },
    {
        "content": "<p>in theory, yes</p>",
        "id": 401257672,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699575242
    }
]