[
    {
        "content": "<p>Again something I probably miss, but could you please help me with this one. The code below fails:</p>\n<div class=\"codehilite\"><pre><span></span><code>get_user : Result (List Str) _ -&gt; Result Str _\nget_user = |prev_result|\n    when prev_result is\n        Err(_) as err -&gt;\n            err\n        Ok([]) -&gt;\n            Err(UserNotFound)\n        Ok([user]) -&gt;\n            Ok(user)\n        Ok([_, ..]) -&gt;\n            Err(MultipleUsersFound)\n</code></pre></div>\n<p>With the type mismatch error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ./Delme.roc ────────────────────────────────────────────────\n\nSomething is off with the 3rd branch of this when expression:\n\n 3│  get_user : Result (List Str) _ -&gt; Result Str _\n 4│  get_user = |prev_result|\n 5│      when prev_result is\n 6│          Err(_) as err -&gt;\n 7│              err\n 8│          Ok([]) -&gt;\n 9│              Err(UserNotFound)\n10│          Ok([user]) -&gt;\n11│              Ok(user)\n                 ^^^^^^^^\n\nThis Ok tag application has the type:\n\n    [Ok Str, …]\n\nBut the type annotation on get_user says it should be:\n\n    [Ok (List Str), …]\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 1 warning found in 24 ms%\n</code></pre></div>\n<p>And the compiler seems to ignore the type annotation completely, because the error looks completely the same even if I put something obviously wrong in it like: <code>get_user : Result (List Str) _ -&gt; Result U8 _</code>.</p>\n<p>You know, it's very hard to get rid of a feeling, that it's something wrong with the compiler when it's in a premature state. :)</p>",
        "id": 513954539,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745438505
    },
    {
        "content": "<p>Lack of gradual typing or automatic conversion of types strikes again ...we really need either better errors or better solutions around this</p>",
        "id": 513955980,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745439094
    },
    {
        "content": "<p>Key insight is the type of <code>err</code> is <code>Result (List Str) _</code>. As such, the input and output type must both be <code>Result (List Str) _</code>.</p>",
        "id": 513956134,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745439152
    },
    {
        "content": "<p>If you remove the <code>as err</code> and instead do <code>Err(e) -&gt; Err(e)</code>, it should all work.</p>",
        "id": 513956231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745439191
    },
    {
        "content": "<p>I don't think it's graudal typing,  because this code fails with the same error:</p>\n<div class=\"codehilite\"><pre><span></span><code>get_user : Result (List Str) _ -&gt; Result Str _\nget_user = |prev_result|\n    when prev_result is\n        Err(_) as err -&gt;\n            err\n        # Ok([]) -&gt;\n        #     Err(UserNotFound)\n        # Ok([user]) -&gt;\n        #     Ok(user)\n        # Ok([_, ..]) -&gt;\n        #     Err(MultipleUsersFound)\n        Ok(users) -&gt;\n            when users is\n                [] -&gt;\n                    Err(UserNotFound)\n                [user] -&gt;\n                    Ok(user)\n                [_, ..] -&gt;\n                    Err(MultipleUsersFound)\n</code></pre></div>",
        "id": 513956235,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745439192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Function.20type.20annotation.20gets.20ignored/near/513956231\">said</a>:</p>\n<blockquote>\n<p>If you remove the <code>as err</code> and instead do <code>Err(e) -&gt; Err(e)</code>, it should all work.</p>\n</blockquote>\n<p>It works indeed!</p>",
        "id": 513956441,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745439257
    },
    {
        "content": "<p>Ok, it is gradual typing, but in a different place. I see now. Thanks!</p>",
        "id": 513956727,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745439369
    },
    {
        "content": "<p>Yeah, at a minimum, we need a better error/ux here</p>",
        "id": 513974598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745447345
    },
    {
        "content": "<p>Frankly, I would love for limited cases like this to just work, but I'm not sure that is viable without significant compiler effort/complexity (not really sure either way, don't work on the type checker much)</p>",
        "id": 513974735,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745447412
    },
    {
        "content": "<p>yeah Ayaz and someone else had a long exchange looking into this a month or two ago (I forget where the thread was) and as I recall the conclusion seemed to be that it couldn't work reliably in practice</p>",
        "id": 513980214,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745450826
    },
    {
        "content": "<p>or at least not without switching to a totally different type system <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 513980249,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745450858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"894032\">Ilya Shmygol</span> <a href=\"#narrow/stream/231634-beginners/topic/Function.20type.20annotation.20gets.20ignored/near/513956441\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Function.20type.20annotation.20gets.20ignored/near/513956231\">said</a>:</p>\n<blockquote>\n<p>If you remove the <code>as err</code> and instead do <code>Err(e) -&gt; Err(e)</code>, it should all work.</p>\n</blockquote>\n<p>It works indeed!</p>\n</blockquote>\n<p>Yeah that _ in the Err destructure in the first branch is probably not letting us be able to figure out what the type of the Result Err is, but Err(e) -&gt; Err(e) gives us a variable that we can assign a free var to</p>",
        "id": 513988319,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745455920
    },
    {
        "content": "<p>I don’t understand how we got that error though…</p>",
        "id": 513988438,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745456008
    },
    {
        "content": "<p>I think we get the weird error cause it checks the branches for consistency first before checking if the branches match the out expression</p>",
        "id": 514015167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745472417
    },
    {
        "content": "<p>And the branches aren't consistent due to the first returning <code>Result (List Str) _</code> and the last returning <code>Result Str _</code></p>",
        "id": 514015230,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745472456
    },
    {
        "content": "<p>I actually get it often: if branches are not consistent the error message just ignores the function annotation and relies on the type inferenced from one of the branches.</p>",
        "id": 514039585,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745481465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"894032\">Ilya Shmygol</span> <a href=\"#narrow/stream/231634-beginners/topic/Function.20type.20annotation.20gets.20ignored/near/514039585\">said</a>:</p>\n<blockquote>\n<p>I actually get it often: if branches are not consistent the error message just ignores the function annotation and relies on the type inferenced from one of the branches.</p>\n</blockquote>\n<p>I wonder if it changes if you assign the result of the when to a var and then return the var</p>",
        "id": 514076778,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745489444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Function.20type.20annotation.20gets.20ignored/near/514015230\">said</a>:</p>\n<blockquote>\n<p>And the branches aren't consistent due to the first returning <code>Result (List Str) _</code> and the last returning <code>Result Str _</code></p>\n</blockquote>\n<p>Oh right since you are returning the Err as is from the arg type that means the value is the same. Constructing a new Err will ensure that it can be inferred as the annotated return type</p>",
        "id": 514077596,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745489563
    },
    {
        "content": "<p>I think the non obvious part with us having fully inferred structural typing is that a value in a tagged union still carries with it the type of entire tag union it is apart of.  Which is different than say TypeScripts unions where the values have their own type which is then checked where necessary to be part of some union.  Err(_) isn’t just a value with an Err tag and some payload value here.  It is a Result (List Str) _ value that happens to have been instantiated with the Err tag.</p>",
        "id": 514080208,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745490031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/231634-beginners/topic/Function.20type.20annotation.20gets.20ignored/near/514076778\">said</a>:</p>\n<blockquote>\n<p>I wonder if it changes if you assign the result of the when to a var and then return the var</p>\n</blockquote>\n<p>Well if I put the result of the when block to a var the error is basically the same, but makes more sense, because it doesn't complain about <code>get_user</code>.</p>\n<p>Without variable (pay attention to how is the error message wrong about <code>get_user</code> annotation):</p>\n<div class=\"codehilite\"><pre><span></span><code>This Ok tag application has the type:\n\n    [Ok Str, …]\n\nBut the type annotation on get_user says it should be:\n\n    [Ok (List Str), …]\n</code></pre></div>\n<p>With a variable the error message makes a bit more sense, because it complains about the when branches being inconsistent:</p>\n<div class=\"codehilite\"><pre><span></span><code>This Ok tag application has the type:\n\n    [Ok Str, …]\n\nBut all the previous branches have type:\n\n    [Ok (List Str), …]\n\nAll branches of a when must have the same type!\n</code></pre></div>",
        "id": 514080733,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745490178
    },
    {
        "content": "<p>Yeah since the offending expression is in return position it is the value of get_users and there the error is attributed to that binding</p>",
        "id": 514081110,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745490292
    },
    {
        "content": "<p>I think a small improvement to the error handling here is to always attribute the error to the expression and then say since you have that problem with the return expression. Maybe say because of that you can’t unify with the return type</p>",
        "id": 514081648,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745490442
    },
    {
        "content": "<p>I'm pretty sure the issue with the error message is that we do type checking from the inside out.</p>\n<p>So you get the inner most error message even if a tiny bit of context from farther out could smek a better error message</p>",
        "id": 514162404,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745509648
    },
    {
        "content": "<p>In this case, a statement in a function has a type error. So the functions type signature doesn't matter for the most part. Things are already broken before we even reach that.</p>",
        "id": 514162674,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745509733
    }
]