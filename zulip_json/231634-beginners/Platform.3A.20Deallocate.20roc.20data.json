[
    {
        "content": "<p>I have no experience with system level programming at all. I am trying to get a wasm platform by try an error.</p>\n<p>I have something that works, but I have a question about it. Here is the exported zig function:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">allocUint8</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">heap</span><span class=\"p\">.</span><span class=\"n\">page_allocator</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span>\n<span class=\"w\">        </span><span class=\"nb\">@panic</span><span class=\"p\">(</span><span class=\"s\">\"failed to allocate memory\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__handlerForHost_1_exposed</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">RocList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">RocList</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">run_roc</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">heap</span><span class=\"p\">.</span><span class=\"n\">page_allocator</span><span class=\"p\">.</span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">input_len</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input_len</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// TODO: What should the pointer be for the empty callresult?</span>\n<span class=\"w\">    </span><span class=\"c1\">// Is this on the stack or the heap? Do I have to deallocate?</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">callresult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">roc__handlerForHost_1_exposed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">callresult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">arg</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">callresult</span><span class=\"p\">.</span><span class=\"n\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>First the wasm runtime calls <code>allocUint8</code> to allocate some memory. Then it calls <code>run_roc</code> to run the roc code. The defer statement at the beginning makes sure, that the allocated memory gets freed (I hope).</p>\n<p>But what about <code>callresult</code>? Roc writes a list of [*]u8 somewhere in the memory.I think, that it is on the heap. So do I have to free it? Can I do this in this function or has the wasm runtime call a free function afterwards?</p>\n<p>Also, what should callback.pointer be initialized with? Currently, I use the input-pointer. But this seems like an hack.</p>\n<p>I know, this is more a zig question. But maybe you can help me anyway?</p>",
        "id": 369111046,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1687595902
    },
    {
        "content": "<p>Technically speaking, <code>callresult</code> shouldn't be initialized at all.</p>",
        "id": 369224024,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687623326
    },
    {
        "content": "<p><code>roc__handlerForHost_1_exposed</code> just needs some stack space to write output data to</p>",
        "id": 369224072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687623349
    },
    {
        "content": "<blockquote>\n<p>So do I have to free it?</p>\n</blockquote>\n<p>yeah, call result should get freed, but isn't currently. Obviously it would have to be freed by the caller of <code>run_roc</code>, or it would need to be converted into a data structure with a different memory management plan such that it can be freed automatically.</p>",
        "id": 369224544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687623497
    },
    {
        "content": "<p>Do you have a link to the full code, I just want some more info about use and surrounding code.</p>",
        "id": 369224743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687623553
    },
    {
        "content": "<p>Here is the current status of my experiment: <a href=\"https://github.com/ostcar/goroc\">https://github.com/ostcar/goroc</a></p>",
        "id": 369266868,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1687642544
    }
]