[
    {
        "content": "<p>I’m not looking for production-grade code, mainly is it idiomatic or is there more idiomatic way to write that function computing the Caesar Cipher of a string?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">caesar</span><span class=\"w\"> </span><span class=\"s\">\"abc\"</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"s\">\"bcd\"</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">caesar</span><span class=\"w\"> </span><span class=\"s\">\"abc\"</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"s\">\"zab\"</span>\n\n<span class=\"nv\">caesar</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">caesar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">plaintext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">walkUtf8</span><span class=\"w\"> </span><span class=\"nv\">plaintext</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">letter</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nv\">letter</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">%</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n</code></pre></div>",
        "id": 437869835,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715281091
    },
    {
        "content": "<p>I can't answer your question regarding whether the following may be more idiomatic or not, but if your expected input is only ASCII, you might consider also (in pseudocode):</p>\n<ol>\n<li>Convert the string to <code>List U8</code>.</li>\n<li>Split at a particular index, based on <code>shift</code>.</li>\n<li>Concatenate the halves accordingly.</li>\n<li>Join back into a string.</li>\n</ol>\n<p>I suspect this version might be a tiny bit more readable (as you wouldn't need to do the element-wise shifting explicitly).</p>",
        "id": 437872540,
        "sender_full_name": "Hristo",
        "timestamp": 1715282300
    },
    {
        "content": "<p>Indeed that’s more readable to convert to List U8 first, thanks <span class=\"user-mention\" data-user-id=\"693045\">@Hristo</span> </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">caesar</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">caesar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">plaintext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">plaintext</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">%</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">a'</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n</code></pre></div>",
        "id": 437874341,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715283102
    },
    {
        "content": "<p>I’m not sure what you meant by split and concat though</p>",
        "id": 437874545,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715283190
    },
    {
        "content": "<p>The list version should also be a lot more performant</p>",
        "id": 437874665,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715283245
    },
    {
        "content": "<p>It should happen inplace</p>",
        "id": 437874675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715283254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479073\">@Matthieu Pizenberg</span> you're absolutely right!</p>\n<blockquote>\n<p>I’m not sure what you meant by split and concat though</p>\n</blockquote>\n<p>I wasn't being clear at all in my message <a href=\"#narrow/stream/231634-beginners/topic/Is.20there.20a.20better.20way.20to.20write.20this.20simple.20function.3F/near/437872540\">above</a>. But I'm also glad that - despite my confusing pseudocode - you arrived at a version which you feel is better.</p>\n<p>I was thinking in terms of the Caesar cipher being an explicit mapping, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">alphabet</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">b'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">c'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">d'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">f'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">g'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">h'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">j'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">k'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">l'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">m'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">o'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">p'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">q'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">r'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">s'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">t'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">u'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">v'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">w'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">x'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">y'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">z'</span><span class=\"p\">]</span>\n\n<span class=\"nv\">ceasar</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">ceasar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">plaintext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">mapChar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">ceasarHelp</span><span class=\"w\"> </span><span class=\"nv\">shift</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">plaintext</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">mapChar</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n\n<span class=\"nv\">ceasarHelp</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span>\n<span class=\"nv\">ceasarHelp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">others</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">alphabet</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">shifted</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">others</span><span class=\"w\"> </span><span class=\"nv\">before</span>\n<span class=\"w\">    </span><span class=\"nv\">zipped</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map2</span><span class=\"w\"> </span><span class=\"nv\">alphabet</span><span class=\"w\"> </span><span class=\"nv\">shifted</span><span class=\"w\"> </span><span class=\"kt\">Pair</span>\n<span class=\"w\">    </span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">zipped</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">mapping</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Pair</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nv\">output</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">insert</span><span class=\"w\"> </span><span class=\"nv\">mapping</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nv\">output</span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">ceasar</span><span class=\"w\"> </span><span class=\"s\">\"abc\"</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\"bcd\"</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">ceasar</span><span class=\"w\"> </span><span class=\"s\">\"abc\"</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\"zab\"</span>\n</code></pre></div>\n<p>Clearly, this isn't as readable - I have to admit that prior to writing it out, the mapping part seemed (in my mind) it'd be neater to implement and subsequently read.</p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> for jumping in to confirm regarding idiomaticity and efficiency!</p>",
        "id": 437880672,
        "sender_full_name": "Hristo",
        "timestamp": 1715286024
    },
    {
        "content": "<p>Right! yes I was missing the alphabet part. I like that version too thanks for that. Not as terse but shows more of the language</p>",
        "id": 437881663,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715286453
    },
    {
        "content": "<p>This last version will probably be a lot slower. Dict in the hot loop will be a lot slower than a little bit of math.</p>",
        "id": 437883149,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715287113
    },
    {
        "content": "<p>Yeah, that's true! <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> <br>\nIt might be more useful in cases where arbitrary mappings are needed (instead of something that could be computed arithmetically).</p>",
        "id": 437884602,
        "sender_full_name": "Hristo",
        "timestamp": 1715287835
    },
    {
        "content": "<p>Right, that’s more useful in settings where the substitution key of the cipher is arbitrary</p>",
        "id": 437886518,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715288637
    }
]