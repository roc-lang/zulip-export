[
    {
        "content": "<p>I see going through old streams that a lot of stuff has gone into list slicing and pattern matching. However, I'm unsure if the pattern matching is up to date in the tutorial, or if its outdated. Good slicing is always appreciated.</p>\n<p>Additonally, is there a way to deconstruct a list such that you can break it into lists and elements? Like, matching a list so you could split it into two sublists based on some criteria? We can think of lists as closed under concatenation, so in a sense they're recursive structures. If it doesn't exist, I feel it should, though I'm already thinking about how it'd be a delicate matter to not become either ambiguous or over-complex. If no-one's done it, and it's not absurdly stupid, I might think on it longer and create a proper proposal. I can see it doing some magic things with in-place mutation optimisations, plus it might be extensible to other structures like trees and so on.</p>\n<p>Dunno. The beauty of pattern matching seems to be in letting you assign names directly to the bits of a thing you want to process, rather than doing a bunch of error-prone extractive nonsense, and it'd be a shame not to extend that as far as Roc's design goals allow.</p>",
        "id": 396055731,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697019607
    },
    {
        "content": "<p>Some <a href=\"https://github.com/roc-lang/examples/blob/main/examples/PatternMatching/PatternMatching.roc\">element focused pattern matching</a> is supported. But I believe we do not support haskell style x:xs pattern matching yet. We have talked about it before, I'll see if I can find it.</p>",
        "id": 396067054,
        "sender_full_name": "Anton",
        "timestamp": 1697023848
    },
    {
        "content": "<p><a href=\"#narrow/stream/304641-ideas/topic/.E2.9C.94.20list.20pattern.20matching/near/305963239\">Found it</a><br>\nWe also have <a href=\"https://github.com/roc-lang/roc/issues/5187\">an issue</a> for it.</p>",
        "id": 396068184,
        "sender_full_name": "Anton",
        "timestamp": 1697024241
    }
]