[
    {
        "content": "<p>Are there any examples of how to run rust tests in a Roc platform? I feel like I'm missing something obvious, but unsure. I've been looking through the example platforms and haven't found any tests, so wondering if this is possible. </p>\n<p>For reference, I was wanting to add a test to verify html syntax parsing is working correctly in the static-site example platform. <a href=\"https://github.com/roc-lang/roc/pull/5051/commits/c4519c5abc24af97a9b6a203c8665c4a749435ee#r1117878673\">Here is a link</a> to the test I added, but I haven't figure out how to run it. </p>\n<p>Running <code>cargo test</code> I get something like;</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>linking<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"sb\">`</span>cc<span class=\"sb\">`</span><span class=\"w\"> </span>failed:<span class=\"w\"> </span><span class=\"nb\">exit</span><span class=\"w\"> </span>status:<span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span>note:<span class=\"w\"> </span><span class=\"s2\">\"cc\"</span><span class=\"w\"> </span><span class=\"s2\">\"-arch\"</span><span class=\"w\"> </span><span class=\"s2\">\"arm64\"</span><span class=\"w\"> </span><span class=\"s2\">\"/var/fold</span>\n<span class=\"s2\">  ... many lines removed ..</span>\n<span class=\"s2\">   \"</span>-lresolv<span class=\"s2\">\" \"</span>-lc<span class=\"s2\">\" \"</span>-lm<span class=\"s2\">\" \"</span>-liconv<span class=\"s2\">\" \"</span>-L<span class=\"s2\">\" \"</span>/Users/luke/.rustup/toolchains/1.65.0-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib<span class=\"s2\">\" \"</span>-o<span class=\"s2\">\" \"</span>/Users/luke/Documents/GitHub/roc/examples/static-site-gen/platform/target/debug/deps/host-12b7a8d1a1a85c2f<span class=\"s2\">\" \"</span>-Wl,-dead_strip<span class=\"s2\">\" \"</span>-nodefaultlibs<span class=\"s2\">\"</span>\n<span class=\"s2\">  = note: ld: library not found for -lapp</span>\n<span class=\"s2\">          clang: error: linker command failed with exit code 1 (use -v to see invocation)</span>\n\n\n<span class=\"s2\">warning: `host` (lib test) generated 2 warnings (1 duplicate)</span>\n<span class=\"s2\">error: could not compile `host` due to previous error; 2 warnings emitted</span>\n<span class=\"s2\">warning: build failed, waiting for other jobs to finish...</span>\n<span class=\"s2\">warning: `host` (lib) generated 2 warnings (1 duplicate)</span>\n</code></pre></div>",
        "id": 337943990,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1677308770
    },
    {
        "content": "<p>Yeah if you are trying to run Rust and Roc together then it has to be driven from Roc. Roc knows how to deal with rust but not the other way around</p>",
        "id": 337948937,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677311958
    },
    {
        "content": "<p>Thank you. What is the preferred strategy for writing tests in platform host code then? Would it be separate into another crate and unit test there?</p>",
        "id": 337951124,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1677313098
    },
    {
        "content": "<p>I don't think it's been done enough for a preferred strategy to have developed yet!<br>\nIf I were doing it, I'd mostly write Rust-only tests for the Rust code. If some function normally accepts an input from a Roc app then the test would just pass it a value of that type in Rust instead. Similarly if your Rust function normally calls a Roc function then have it call some test function in Rust instead.<br>\nAt some point I guess you really do want a test that crosses the boundary. So I guess I'd make a test app that you compile and run. It has an example Roc app that calls all of your platform functions in certain ways. Exits with a failure exit code if it fails.</p>",
        "id": 337963648,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677318634
    },
    {
        "content": "<p>we have a WIP feature of <code>expect-fx</code> which will in the future let you write stuff like <code>expect-fx myTask</code> and it will run the task during <code>roc test</code></p>",
        "id": 338009178,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677334581
    },
    {
        "content": "<p>and then you can put various <code>expect</code>s inside the task, as normal</p>",
        "id": 338009204,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677334592
    },
    {
        "content": "<p>You can also run rusts testing strategy by first building a shared library of a roc app.</p>",
        "id": 338054950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677355329
    },
    {
        "content": "<p>Then rust can build test just fine linking against <a href=\"http://libapp.so\">libapp.so</a></p>",
        "id": 338054971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677355348
    }
]