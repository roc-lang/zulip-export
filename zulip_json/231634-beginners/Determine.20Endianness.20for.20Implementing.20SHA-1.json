[
    {
        "content": "<p>I was trying to implement SHA-1 using Wikipedia's <a href=\"https://en.wikipedia.org/wiki/SHA-1#Examples_and_pseudocode\">pseudocode</a> and realized that I have no way to know whether the machine is running big or little endian mode. I need it for the UUID library I'm writing (specifically UUID v5). If I'm trying to convert a <code>U128</code> to a series of big-endian U32 \"words\", how would I do that in Roc?</p>",
        "id": 443549979,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717903538
    },
    {
        "content": "<p>Worst-case, I take an <code>{ endianness: [Big, Little] }</code> module param on the Sha-1 module, not ideal but it's better than assuming little endian</p>",
        "id": 443550771,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717904295
    },
    {
        "content": "<p><a href=\"#narrow/stream/231634-beginners/topic/Determine.20Endianness.20for.20Implementing.20SHA-1/near/443550771\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/List.20files.20in.20a.20directory\">#beginners &gt; List files in a directory</a> by <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span>.</p>",
        "id": 443550795,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717904327
    },
    {
        "content": "<p>I think this is by design. Im not sure. But I guess it is so that Roc code executes the same everwhere.</p>",
        "id": 443551881,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717905393
    },
    {
        "content": "<p>Would it help if the platform provided a primitive that told you what the underlying system was?</p>",
        "id": 443551911,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717905432
    },
    {
        "content": "<p>I'm not a pro on endianness and it's implementation in different languages, but that's actually the worry here: I'm not confident that Roc <em>will</em> execute the same way everywhere. If it can be either big or little endian, then byte-level operations may have different results on different machines.</p>",
        "id": 443552011,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717905494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Determine.20Endianness.20for.20Implementing.20SHA-1/near/443551911\">said</a>:</p>\n<blockquote>\n<p>Would it help if the platform provided a primitive that told you what the underlying system was?</p>\n</blockquote>\n<p>Yes, I think that is necessary unless Roc makes a guarantee of which endianness it runs, which I'd be suprised by, since the architecture of the machine you're running on is optimized for one or the other.</p>",
        "id": 443552068,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717905562
    },
    {
        "content": "<p>Another reason why I'd see that being an issue is if Roc code can be distributed in a way that the platform could compile the Roc code to either big or little endian without setting such a flag that you're proposing, since the Roc is already compiled to a <code>.so</code>. Not sure if that's possible, but it could be a problem</p>",
        "id": 443552349,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717905738
    },
    {
        "content": "<p>I think you should be able to implement this without worrying about endianess in roc.</p>",
        "id": 443559566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717911101
    },
    {
        "content": "<p>Sure you could get the info from a platform, but I don't think it is needed here</p>",
        "id": 443559574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717911116
    },
    {
        "content": "<p>Bit shifting is the magical way to convert from your sha big endian numbers to a native endian number and back</p>",
        "id": 443559653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717911164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Determine.20Endianness.20for.20Implementing.20SHA-1/near/443559653\">said</a>:</p>\n<blockquote>\n<p>Bit shifting is the magical way to convert from your sha big endian numbers to a native endian number and back</p>\n</blockquote>\n<p>Okay, so yeah, if I bit shift (which I'm already doing), that'll normalize the result. If that's true, which I think it is, then no need to worry about this anymore.</p>",
        "id": 443559735,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717911250
    },
    {
        "content": "<p>If you have the bytes <code>[ 0x00, 0x00, 0x00, 0x07 ]</code> as your 32 bit big endian number input, you do:</p>\n<div class=\"codehilite\"><pre><span></span><code>when bytes is\n    [b3, b2, b1, b0, ..] -&gt;\n        num = (b3 &lt;&lt; 24) |  (b3 &lt;&lt; 16) |  (b3 &lt;&lt; 8) |  b3\n</code></pre></div>",
        "id": 443559749,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717911280
    },
    {
        "content": "<p>Now <code>num</code> is whatever native endian happens to be</p>",
        "id": 443559753,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717911295
    },
    {
        "content": "<p>Well, just to make sure we're on the same page, I need to go the other way. SHA1 requires big endian, and I \"don't know\" what I'm running on. So how do I get from native to big, not the other way?</p>",
        "id": 443560069,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717911630
    },
    {
        "content": "<p>Still doable with bitshifting:</p>\n<div class=\"codehilite\"><pre><span></span><code>num = 7\nb0 = Num.toU8 (num)\nb1 = Num.toU8 (num &gt;&gt; 8)\nb2 = Num.toU8 (num &gt;&gt; 16)\nb3 = Num.toU8 (num &gt;&gt; 24)\n\n# Big endian out\n[b3, b2, b1, b0]\n\n# little endian out\n[b0, b1, b2, b3]\n</code></pre></div>",
        "id": 443560180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717911739
    },
    {
        "content": "<p>Okay, this should be hard to screw up, thanks</p>",
        "id": 443560288,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1717911871
    },
    {
        "content": "<p>oof, I didn’t realize that bit shifting leaks target details <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 443598370,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717942294
    },
    {
        "content": "<p>as Luke mentioned earlier, it’s a design goal that Roc code should give the same answers regardless of what target it’s running on, and the fact that bit shifts give different answers depending on native endianness breaks that</p>",
        "id": 443598498,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717942398
    },
    {
        "content": "<p>so I think it would be best not to depend on that behavior, because I’d like to try to figure out a way to change it!</p>",
        "id": 443598583,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717942449
    },
    {
        "content": "<blockquote>\n<p>oof, I didn’t realize that bit shifting leaks target details</p>\n</blockquote>\n<p>It doesn't</p>",
        "id": 443608737,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717947941
    },
    {
        "content": "<p>It always gives the same answer, which is why you can use it to extract bytes from native endian. Then you can order them as big or little endian</p>",
        "id": 443608948,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717948071
    },
    {
        "content": "<p>So the roc users doesn't know if the number is actually stored in big or little endian. They can just extract the bytes then order it as they please.</p>",
        "id": 443609036,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717948107
    },
    {
        "content": "<p>sweet, thanks for clarifying!</p>",
        "id": 443632193,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717962881
    }
]