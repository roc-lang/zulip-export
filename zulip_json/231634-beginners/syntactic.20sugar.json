[
    {
        "content": "<p>it is maybe to much to ask but what is the reasoning behind \"syntactic sugar\" (task related  syntax) I see couple of ways to write the same thing,  isn't this to much? It creates confusion and always adds additional effort to decipher code  when someone has different style. Maybe focus on  1 max  2 ways to express stuff, just pick the nicer form and  drop the others(I ask in general terms  not like I expect  to invalidate already allowed syntax all the sudden)</p>",
        "id": 312379104,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669484796
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"568088\">@Artur Swiderski</span>, that sounds reasonable :)<br>\nCan you give a specific example of a case and all the ways it can be written? That way we can perhaps provide the reason why all the options exist.</p>",
        "id": 312382894,
        "sender_full_name": "Anton",
        "timestamp": 1669487080
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>\n\n<hr>\n<p>await (Stdout.line \"Type something press Enter:\") \\_ -&gt;<br>\n        await Stdin.line \\text -&gt;<br>\n            Stdout.line \"You just entered: \\(text)\"</p>\n<hr>\n<div class=\"codehilite\"><pre><span></span><code>_ &lt;- await (Stdout.line &quot;Type something press Enter:&quot;)\ntext &lt;- await Stdin.line\n\nStdout.line &quot;You just entered: \\(text)&quot;\n</code></pre></div>\n\n<hr>\n<div class=\"codehilite\"><pre><span></span><code>    cwd &lt;- Env.cwd |&gt; Task.await\n    cwdStr = Path.display cwd\n\n    _ &lt;- Stdout.line &quot;cwd: \\(cwdStr)&quot; |&gt; Task.await\n    dirEntries &lt;- Dir.list cwd |&gt; Task.await\n    contentsStr = Str.joinWith (List.map dirEntries Path.display) &quot;\\n    &quot;\n\n    _ &lt;- Stdout.line &quot;Directory contents:\\n    \\(contentsStr)\\n&quot; |&gt; Task.await\n    _ &lt;- Stdout.line &quot;Writing a string to out.txt&quot; |&gt; Task.await\n    _ &lt;- File.writeUtf8 path &quot;a string!&quot; |&gt; Task.await\n</code></pre></div>",
        "id": 312384311,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669488026
    },
    {
        "content": "<p>similar stuff  but  slightly different  syntax every time</p>",
        "id": 312384350,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669488054
    },
    {
        "content": "<p>Yep. Backpassing and pipelining definitely give multiple options to write things. That said, they are both very important for readable code in certain cases. Maybe we need to teach them more directly.</p>",
        "id": 312384657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669488246
    },
    {
        "content": "<p>Without backpassing, <code>&lt;-</code>, you get stuck with the problem of nesting. Every lambda leads to another indentation level.</p>\n<div class=\"codehilite\"><pre><span></span><code>Task.await x (\\a -&gt;\n    Task.await y (\\b -&gt;\n        Task.await z (\\c -&gt;\n            ...\n        )\n    )\n)\n</code></pre></div>\n<p>Becomes</p>\n<div class=\"codehilite\"><pre><span></span><code>a &lt;- Task.await x\nb &lt;- Task.await y\nc &lt;- Task.await z\n</code></pre></div>\n<p>Of course you still want regular lambda syntax for a few reason. (Function definition, one offs, lambdas that don't take up the rest of the scope).</p>",
        "id": 312385036,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669488513
    },
    {
        "content": "<p>_ &lt;- File.writeUtf8 path \"a string!\" |&gt; Task.await<br>\nintuitively I would expect this way \n_ -&gt; File.writeUtf8 path \"a string!\" |&gt; Task.await<br>\nbecause when<br>\na &lt;- Task.await x<br>\nb &lt;- Task.await y<br>\nworks how it works,\n_ &lt;- File.writeUtf8 path \"a string!\" |&gt; Task.await becomes confusing</p>",
        "id": 312385646,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669488903
    },
    {
        "content": "<p>Pipelining, <code>|&gt;</code>, on the other hand has a more limited use case where it is quite important. It is extremely useful for the readability of data transformation pipelines.</p>\n<div class=\"codehilite\"><pre><span></span><code>List.map (List.keepIf (List.reverse (List.walk data 0 Num.sub)) (\\x -&gt; x &gt; 7)) (\\x -&gt; x - 2)\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>data2 = List.map data  \\x -&gt; x - 2\ndata3 = List.keepIf data2 \\x -&gt; x &gt; 7\ndata4 = List.reverse data3\nresult = List.walk data4 0 Num.sub\n</code></pre></div>\n<p>Becomes</p>\n<div class=\"codehilite\"><pre><span></span><code>data\n    |&gt; List.map \\x -&gt; x - 2\n    |&gt; List.keepIf \\x -&gt; x &gt; 7\n    |&gt; List.reverse\n    |&gt; List.walk 0 Num.sub\n</code></pre></div>",
        "id": 312385880,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669489078
    },
    {
        "content": "<p>The syntax that you find confusing is when pipelining is mixed with backpassing. This syntax is less necessary, but is allowed due to mixing the two above described syntaxes.</p>\n<p><code>_ &lt;- File.writeUtf8 path \"a string!\" |&gt; Task.await</code> is a way to move the relatively unimportant and repetitive <code>Task.await</code> to the end of the line. That way you can just read the operation that is happening <code>File.writeUtf8</code>. So it is a minor enhancement to readability if you know how it desugars, but I totally get that it is a strange syntax on its own.</p>",
        "id": 312386255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669489270
    },
    {
        "content": "<p>I guess you would find it more readable with parenthesis:<br>\n<code>_ &lt;- (File.writeUtf8 path \"a string!\" |&gt; Task.await)</code></p>",
        "id": 312386397,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669489326
    },
    {
        "content": "<p>Looking specifically at desugaring it, I see two ways it could be done (I am not 100% sure which ordering happens in the compiler).<br>\nway 1 (pipeline desugars before backpassing):<br>\n<code>_ &lt;- File.writeUtf8 path \"a string!\" |&gt; Task.await</code><br>\nto<br>\n<code>_ &lt;- Task.await (File.writeUtf8 path \"a string!\")</code><br>\nto<br>\n<code>Task.await (File.writeUtf8 path \"a string!\") \\_ -&gt; ...</code></p>\n<p>way 2 (backpassing desugars before pipelining):<br>\n<code>_ &lt;- File.writeUtf8 path \"a string!\" |&gt; Task.await</code><br>\nto<br>\n<code>File.writeUtf8 path \"a string!\" |&gt; Task.await \\_ -&gt; ...</code><br>\nto<br>\n<code>Task.await (File.writeUtf8 path \"a string!\") \\_ -&gt; ...</code></p>",
        "id": 312386690,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669489524
    },
    {
        "content": "<p>Hopefully that at least helps to explain what is happening some and the reason why both of the syntaxes exist. I totally understand that how they combine may be super strange especially when first learning</p>",
        "id": 312386789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669489580
    },
    {
        "content": "<p>interestingly, \"fewer ways to do the same thing\" is an argument I hadn't previously considered for why <code>with</code> might be a good idea:</p>\n<div class=\"codehilite\" data-code-language=\"Swift\"><pre><span></span><code><span class=\"n\">with</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"k\">await</span>\n    <span class=\"n\">cwd</span> <span class=\"o\">&lt;-</span> <span class=\"n\">Env</span><span class=\"p\">.</span><span class=\"n\">cwd</span>\n    <span class=\"n\">cwdStr</span> <span class=\"p\">=</span> <span class=\"n\">Path</span><span class=\"p\">.</span><span class=\"n\">display</span> <span class=\"n\">cwd</span>\n\n    <span class=\"kc\">_</span> <span class=\"o\">&lt;-</span> <span class=\"n\">Stdout</span><span class=\"p\">.</span><span class=\"n\">line</span> <span class=\"s\">\"cwd: </span><span class=\"si\">\\(</span><span class=\"n\">cwdStr</span><span class=\"si\">)</span><span class=\"s\">\"</span>\n    <span class=\"n\">dirEntries</span> <span class=\"o\">&lt;-</span> <span class=\"n\">Dir</span><span class=\"p\">.</span><span class=\"n\">list</span> <span class=\"n\">cwd</span>\n    <span class=\"n\">contentsStr</span> <span class=\"p\">=</span> <span class=\"n\">Str</span><span class=\"p\">.</span><span class=\"n\">joinWith</span> <span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">.</span><span class=\"bp\">map</span> <span class=\"n\">dirEntries</span> <span class=\"n\">Path</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">)</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">    \"</span>\n\n    <span class=\"kc\">_</span> <span class=\"o\">&lt;-</span> <span class=\"n\">Stdout</span><span class=\"p\">.</span><span class=\"n\">line</span> <span class=\"s\">\"Directory contents:</span><span class=\"se\">\\n</span><span class=\"s\">    </span><span class=\"si\">\\(</span><span class=\"n\">contentsStr</span><span class=\"si\">)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n    <span class=\"kc\">_</span> <span class=\"o\">&lt;-</span> <span class=\"n\">Stdout</span><span class=\"p\">.</span><span class=\"n\">line</span> <span class=\"s\">\"Writing a string to out.txt\"</span>\n    <span class=\"kc\">_</span> <span class=\"o\">&lt;-</span> <span class=\"n\">File</span><span class=\"p\">.</span><span class=\"n\">writeUtf8</span> <span class=\"n\">path</span> <span class=\"s\">\"a string!\"</span>\n</code></pre></div>",
        "id": 312392880,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669493863
    },
    {
        "content": "<p>How would that make fewer ways to do the same thing? That just adds another way.</p>",
        "id": 312393087,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669494012
    },
    {
        "content": "<p>oh I'm thinking add that and remove backpassing - I don't think we need both</p>",
        "id": 312395927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669496400
    },
    {
        "content": "<p>Oh, but then you run into the issue of mixed functions. <code>List.mapTry</code>, <code>Result.try</code>, <code>List.map</code>, etc. All of them benefit from backpassing. <code>with</code> limits only one function to benefiting from backpassing. You lose all of the adhoc uses.</p>",
        "id": 312397183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669497415
    },
    {
        "content": "<p>Task and result might be avoided together, but lists and tasks would be used together. So that could still likely benefit from backpassing.</p>",
        "id": 312397290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669497497
    },
    {
        "content": "<p>hm, what would an example of that mixed-use look like? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 312397375,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669497586
    },
    {
        "content": "<p>I don't know of any where the types actually work out, but I could be missing something!</p>",
        "id": 312397408,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669497602
    },
    {
        "content": "<p>I guess we did discuss this some before and it is more one off use rather than mixed use. That or nested use. I'll try to type up an example later, but in general, i might nest the scope, use Result.try with backpassing within the nested scope and then continue on from that. This would require double nesting for a use case like that and would be very verbose.</p>",
        "id": 312405771,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669504998
    },
    {
        "content": "<p>Oh, what about something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">resultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">rowResultHttp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todoResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loadRowToTodo</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">baseUrl</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todoResultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">todoResult</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">todoResultHttp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todoStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">writeTodo</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">todoStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Uses <code>Result.try</code> and <code>Result.map</code> (Theoretically this would also apply to <code>Task.await</code> and <code>Task.map</code>). I don't think it would work with <code>with</code>. Or if it did, it would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">resultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"k\">try</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rowResultHttp</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">todoResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loadRowToTodo</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">baseUrl</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">todoResultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">todoResult</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">todo</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">todoResultHttp</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\"># TODO replace this with json encoding</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">todoStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">writeTodo</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">todoStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 312406427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669505574
    },
    {
        "content": "<p>I think in general it makes any one off or nested uses quite verbose. So I think regular backpassing will still have value.</p>",
        "id": 312406699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669505803
    },
    {
        "content": "<p>For context, here is a full chunk of code with a mix of backpassing functions (and one <code>Result.map</code> that couldn't use backpassing due to the type problem you mentioned):</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">updateResult</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dBExecute</span><span class=\"w\"> </span><span class=\"s2\">\"UPDATE todos SET title = ?1, completed = ?2 WHERE id = ?2\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Text</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Boolean</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"n\">updateResultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">updateResult</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">updateResultHttp</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"n\">rowsAffected</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">rowsAffected</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\"># Fetch and return the todo.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowResult</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dBFetchOne</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT id, title, completed, item_order FROM todos WHERE id = ?1\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowResultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">rowResult</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">NotFound</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">404</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">resultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">rowResultHttp</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">todoResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loadRowToTodo</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">baseUrl</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">todoResultHttp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">todoResult</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">todo</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">todoResultHttp</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">todoStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">writeTodo</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">todoStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">mergeResult</span><span class=\"w\"> </span><span class=\"n\">resultHttp</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">always</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">mergeResult</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">always</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 312406807,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669505903
    },
    {
        "content": "<p>would this work?</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">updateResult</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dBExecute</span><span class=\"w\"> </span><span class=\"s2\">\"UPDATE todos SET title = ?1, completed = ?2 WHERE id = ?2\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Text</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Boolean</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">updateResult</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">rowsAffected</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\"># Fetch and return the todo.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowResult</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dBFetchOne</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT id, title, completed, item_order FROM todos WHERE id = ?1\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">rowResult</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">row</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">loadRowToTodo</span><span class=\"w\"> </span><span class=\"n\">baseUrl</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">todo</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">writeTodo</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">mergeResult</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">always</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">NotFound</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">404</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 312412569,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669511294
    },
    {
        "content": "<p>although in fairness, I like the backpassing version of <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> better <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">updateResult</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dBExecute</span><span class=\"w\"> </span><span class=\"s2\">\"UPDATE todos SET title = ?1, completed = ?2 WHERE id = ?2\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Text</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Boolean</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">updateResult</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">rowsAffected</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\"># Fetch and return the todo.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rowResult</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dBFetchOne</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT id, title, completed, item_order FROM todos WHERE id = ?1\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">rowResult</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">row</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">loadRowToTodo</span><span class=\"w\"> </span><span class=\"n\">baseUrl</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">mapErrToHttp</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">todo</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">writeTodo</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">mergeResult</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">always</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">NotFound</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">404</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 312413007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669511658
    },
    {
        "content": "<p>Yeah, i think other solutions definitely are possible, but i think supporting the backpassing syntax adds a lot of refreshing flexibility.</p>",
        "id": 312414957,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669513671
    },
    {
        "content": "<p>Also, i am am not sure how often <code>Task.await</code> and <code>Task.map</code> will want to be used together, but i suspect fully removing backpassing would end up with a number of limitations.</p>\n<p>Aside, that hidden <code>with Task.await</code> at the end of the line feels worse than <code>|&gt; Task.await</code> to me. Bother are trying to hide the <code>Task.await</code> for readability, but the <code>with</code> is super hidden and hard to find without the clear indentation.</p>",
        "id": 312415115,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669513810
    },
    {
        "content": "<p>another thing I hadn't considered is that <code>with</code> inside another <code>with</code> is a form of shadowing</p>",
        "id": 312416278,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669515088
    },
    {
        "content": "<p>(because <code>&lt;-</code> is taking on a new meaning)</p>",
        "id": 312416282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669515098
    },
    {
        "content": "<p>but without allowing that, nested code like this would be less nice</p>",
        "id": 312416289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669515111
    },
    {
        "content": "<p>so that's another point for backpassing</p>",
        "id": 312416295,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669515119
    },
    {
        "content": "<p>maybe I need to give it some more time, but whenever I see backpassing used with <code>map</code> I don't like how it reads <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 312416345,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669515140
    },
    {
        "content": "<p>Thx for explanation. As a side  comment I would say that construction \"with Task.await\" I find even more confusing. Whenever there is one liner impacting all below, I am struggling especially in language where there is no much usage of delimiters like {} , (). I like more  _ &lt;- because it at least act on  its immediate neighborhood.  With  this   \"with Task.await\" I am lost because I lose touch, what effects what. Is this another legal way to express the same concept?</p>",
        "id": 312442983,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669541300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568088\">Artur Swiderski</span> <a href=\"#narrow/stream/231634-beginners/topic/syntactic.20sugar/near/312443827\">said</a>:</p>\n<blockquote>\n<p>sometimes  more verbose isn't  necessarily worser because I usually do a lot of copy pasting anyway so I do not save time with shorter enigmatic  syntax. But it causes a lot of burnout when I am forced to decipher like  10 lines at once instead of one two three lines.<br>\nobviously  things like :<br>\n[list]<br>\n|&gt; dosomething<br>\n|&gt; dosomething<br>\n|&gt; dosomething<br>\n|&gt; dosomething<br>\n|&gt; dosomething</p>\n<p>are ok  <br>\nbut  this :</p>\n<p>with Task.await<br>\n    cwd &lt;- Env.cwd<br>\n    cwdStr = Path.display cwd</p>\n<div class=\"codehilite\"><pre><span></span><code>_ &lt;- Stdout.line &quot;cwd: \\(cwdStr)&quot;\ndirEntries &lt;- Dir.list cwd\ncontentsStr = Str.joinWith (List.map dirEntries Path.display) &quot;\\n    &quot;\n\n_ &lt;- Stdout.line &quot;Directory contents:\\n    \\(contentsStr)\\n&quot;\n_ &lt;- Stdout.line &quot;Writing a string to out.txt&quot;\n_ &lt;- File.writeUtf8 path &quot;a string!&quot;\n</code></pre></div>\n\n<p>: O   and my jaw drops</p>\n</blockquote>",
        "id": 312443827,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669541805
    },
    {
        "content": "<p>below is weird but  at least I can  analyze it basically  line  by  line: \n_ &lt;- await (Stdout.line \"Type something press Enter:\")<br>\ntext &lt;- await Stdin.line<br>\nStdout.line \"You just entered: \\(text)\"</p>\n<p>and being  able to analyze  program line by line is huge  boost for my productivity.  In general it boils down to context if I do not have to keep track of  contex I am currently in good for me. This is  strong side of languages like \"C\"  with its all flows, I can read each line separately because  context is always simple. In provided  example \"with Task.await\" I expect that all below lines will behave in some  weird way  I have to keep track of those  ways. For examle  in \"C++\"  when program is heavily  templated, one code snippet may mean nothing without knowing  context of at least  some parameters,  from template list and that's horrible, looks cool  but  is horrible nevertheless. So I like  when every line  tells its own story I read  code like a book I don't have to  think so much  I don't  have to jump from place  to place distract myself</p>",
        "id": 312445779,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669542963
    },
    {
        "content": "<p>I am rising all of that because I am more like bug fixer type than application creator(at least by trade) so I have to skim through a lot of code daily  (sometimes I am not so much familiar with). So I just know  what works for me best. So many times  I see code with single  conceptual context scatter all over the places, I have to jump here and there to gather it all back to one piece in my head. Those  riddles looks sometimes so professional but  they  are killing me. When I have opportunity  to read  code like a book line by line is so good ( but  rare nowadays ). By trade I do C++ and it's crazy how  people are abusing syntax of  this language just insane  at times</p>",
        "id": 312447312,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669543844
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"568088\">@Artur Swiderski</span>, excellent feedback!</p>",
        "id": 312455932,
        "sender_full_name": "Anton",
        "timestamp": 1669548617
    },
    {
        "content": "<p>look at lua language, it has relatively simple straightforward syntax (although it is too verbose at times ). Right away I am able to work with this language because of that. In general,  I am looking for language with couple of traits (and roc potentially has many of them) among those syntax is not the most important consideration but still major factor. As to lua I don't like  other design choices  they made but regarding syntax, I will never complain.</p>",
        "id": 312464938,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669553302
    },
    {
        "content": "<p>For  roc I have hope to replace  python in my usual use cases. Sometimes I write  simple tool to analyze some data  in files in very specific way. Functional languages are good with parsing, so \"roc\" should excel. In python because language is in such common use (a lot of examples and references online) I can complete task in couple of minutes but I find experience not satisfying and prone to minor mistakes. I hope  I will be able  to complete  the same in roc,  in similar time but in somehow less \"ad hoc\" manner. Since  those are very small programs for personal use I can use  anything  in terms of technology. In this  use case,  syntax is much less important  but still it is good to see something which fits my general world view</p>",
        "id": 312466413,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669554085
    },
    {
        "content": "<p>I was also interested in roc because of my dissatisfaction with python.<br>\nDynamic languages like python and lua are easy to get started with. It's noticeably harder to keep things simple with a pure functional language but we'll keep trying :)</p>",
        "id": 312483446,
        "sender_full_name": "Anton",
        "timestamp": 1669562392
    }
]