[
    {
        "content": "<p>For people who are not interested in becoming platform authors or contributors, but just want to try out roc for \"end-applications\", is trying it out on Windows for small cli apps etc. still discouraged?</p>\n<p>It's something I could for example do at $(dayJob) for small-ish script type of applications where I'm not risking much by using roc, but everywhere I've looked it still seems to be discouraged.</p>\n<p>Is it still the case that a breakthrough update of the compiler has to happen until you feel comfortable recommending people to try out roc on Windows?</p>",
        "id": 444449605,
        "sender_full_name": "Gent Krasniqi",
        "timestamp": 1718280237
    },
    {
        "content": "<p>I'm not fully aware of the status here, but I think we still recommend wsl. <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> should know best though.</p>",
        "id": 444474266,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718287591
    },
    {
        "content": "<p>You are correct it's still not recommended unless your more comfortable diving into compiler bugs and compiling from source.</p>\n<p>There has been a fair amount of work in the background making changes that will help get us to this point soon. For example we've been working on refactoring basic-cli so it will be much easier to build it for Windows.</p>\n<p>Ideally we need a contributor who is also a Windows user to use roc and help find and fix the bugs. There's no major changes in the compiler though, its all there and %99 working fine. </p>\n<p>I have tested roc-wasm4 and that works really well on Windows. All the zig platforms I've tested work fine using the legacy linker. There's a bug with the Windows surgical linker at the moment.</p>\n<p>The main hurdle I think is upgrading our platforms and testing those so they support Windows. This isn't a change in the compiler though.</p>",
        "id": 444555212,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718310409
    },
    {
        "content": "<p>Could leveraging on something like MSYS2/mingw potentially mean that a Windows release could keep better pace with a Linux release?</p>\n<p>If I remember correctly nim does this, and it works well for them.</p>",
        "id": 444566347,
        "sender_full_name": "Gent Krasniqi",
        "timestamp": 1718313993
    },
    {
        "content": "<p>I dont think that's necessary. We have it in CI all native Windows and it's working well. </p>\n<p>We don't include a release in nightly (I think) because it just hasnt been tested much and we know of some bugs. So if someone comes along they aren't likely to have a great experience unless they are comfortable with rust and building from source.</p>",
        "id": 444569216,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718315450
    },
    {
        "content": "<p>maybe weâ€™re at the point where a nightly release would actually help surface bugs</p>",
        "id": 444576834,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718318836
    },
    {
        "content": "<p>I just spent an hour or so hacking around with things manually on basic-cli, and we're much closer, but still not quite there to make a release that will \"just work\" using the legacy linker. It looks like it should just work, but we've got a few libs that aren't linked in by roc cli; and I'm struggling a little with Windows linking. <code>libMSVCRT.a</code> and <code>libOLDNAMES.a</code>.</p>",
        "id": 444577517,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718319231
    },
    {
        "content": "<p>Also, I'm testing against <a href=\"https://github.com/roc-lang/basic-cli/tree/refactor-host\">this</a> branch, which refactors the rust out into separate crates which is easier to follow</p>",
        "id": 444577642,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718319301
    },
    {
        "content": "<p>Building manually with zig I get the following</p>\n<div class=\"codehilite\"><pre><span></span><code>zig build-exe .\\examples\\hello-world.obj .\\platform\\windows-x64.lib -lc\nerror: lld-link: could not open &#39;libMSVCRT.a&#39;: No such file or directory\nerror: lld-link: could not open &#39;libOLDNAMES.a&#39;: No such file or directory\n</code></pre></div>",
        "id": 444578130,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718319657
    },
    {
        "content": "<p>So it could just be my local setup</p>",
        "id": 444578195,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718319680
    },
    {
        "content": "<p>No joy with zig 0.13.0</p>\n<div class=\"codehilite\"><pre><span></span><code>PS C:\\Users\\bosyl\\Documents\\GitHub\\basic-cli&gt; C:\\Users\\bosyl\\zig-windows-x86_64-0.13.0\\zig-windows-x86_64-0.13.0\\zig.exe build-exe .\\examples\\hello-world.obj .\\platform\\windows-x64.lib -lc\nerror: lld-link: could not open &#39;libMSVCRT.a&#39;: No such file or directory\nerror: lld-link: could not open &#39;libOLDNAMES.a&#39;: No such file or directory\n</code></pre></div>",
        "id": 444581260,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718321070
    },
    {
        "content": "<p>ahh gotcha - but very exciting to hear about the progress on this! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 444582673,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718322111
    },
    {
        "content": "<p>We're so close...</p>",
        "id": 444582812,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718322191
    },
    {
        "content": "<p>So if anyone, knows anyone, who knows how linking works on Windows and would like to look into this, that would be super. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 444583652,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718322786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc.20on.20Windows.20Jun.202024/near/444581260\">schrieb</a>:</p>\n<blockquote>\n<p>No joy with zig 0.13.0</p>\n<p><div class=\"codehilite\"><pre><span></span><code>PS C:\\Users\\bosyl\\Documents\\GitHub\\basic-cli&gt; C:\\Users\\bosyl\\zig-windows-x86_64-0.13.0\\zig-windows-x86_64-0.13.0\\zig.exe build-exe .\\examples\\hello-world.obj .\\platform\\windows-x64.lib -lc\nerror: lld-link: could not open &#39;libMSVCRT.a&#39;: No such file or directory\nerror: lld-link: could not open &#39;libOLDNAMES.a&#39;: No such file or directory\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't know much about zig, but doesn't the \".a\" extension suggest it is actually expecting something like mingw to be installed? It would be \".lib\" if it were native, right?</p>",
        "id": 444895971,
        "sender_full_name": "Gent Krasniqi",
        "timestamp": 1718477108
    },
    {
        "content": "<p>That does seem strange. I've searched through the roc codebase and can't find any reference to these libs. Also the linking for windows just deferes to zig like so;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zig</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">([</span><span class=\"s\">\"build-exe\"</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"n\">input_paths</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">([</span>\n<span class=\"w\">        </span><span class=\"s\">\"-target\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"native\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"--subsystem\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"console\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"-lc\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"-femit-bin={}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_path</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span>\n<span class=\"w\">    </span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>So I'm not sure where <code>lld-link</code> get these from.</p>",
        "id": 444919718,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718492792
    },
    {
        "content": "<p>I'm trying to build from source by following BUILDING_FROM_SOURCE.md, and ran into this when doing <code>cargo run examples/platform-switching/rocLovesRust.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Failed to rebuild src/lib.rs:\n        The executed command was:\n            rustup run nightly-2023-12-21 cargo build --lib\n        stderr of that command:\n            error: toolchain &#39;nightly-2023-12-21-x86_64-pc-windows-msvc&#39; is not installed\n</code></pre></div>",
        "id": 444973164,
        "sender_full_name": "Gent Krasniqi",
        "timestamp": 1718541709
    },
    {
        "content": "<p>I will install that with rustup, but just wanted to point that out. Is there any other checklist for building from source that I'm maybe missing?</p>",
        "id": 444973273,
        "sender_full_name": "Gent Krasniqi",
        "timestamp": 1718541817
    },
    {
        "content": "<p>There's no checklist or anything yet.</p>",
        "id": 445014238,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718568266
    },
    {
        "content": "<p>I think the only gotcha is installing LLVM but if you follow this you'll be fine <a href=\"https://github.com/roc-lang/roc/blob/main/BUILDING_FROM_SOURCE.md#llvm-installation-on-windows\">https://github.com/roc-lang/roc/blob/main/BUILDING_FROM_SOURCE.md#llvm-installation-on-windows</a></p>",
        "id": 445023498,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718574822
    },
    {
        "content": "<p>Yes it turned out the guide was actually sufficient for building roc, I guess only building some of the example platforms had different requirements. Anyway I think I'm done playing with it in Windows for now considering neither of basic-cli or basic-webserver work. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 445075764,
        "sender_full_name": "Gent Krasniqi",
        "timestamp": 1718611517
    },
    {
        "content": "<p>In case it's of interest, and not simply an outdated example, I could report a runtime error I got with the rocLovesZig.roc example. (it compiled without errors)<br>\nBut I have that on another laptop that I don't have access to right now.</p>",
        "id": 445076196,
        "sender_full_name": "Gent Krasniqi",
        "timestamp": 1718611655
    }
]