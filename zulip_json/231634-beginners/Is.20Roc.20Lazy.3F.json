[
    {
        "content": "<p>Is Roc lazy or strict? I've found a couple of references to an explicit <code>lazy</code> function (in the <code>Parser</code> module) so I'm guessing the latter, but it's not mentioned in the FAQ.<br>\nI would also be interested in the reason behind the direction given (whathever it is).</p>",
        "id": 371029610,
        "sender_full_name": "Maldus512",
        "timestamp": 1688110078
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"617038\">@Maldus512</span>, Roc is strict, but it's still possible to build lazy things on top of a strict language, which is what I believe happened with the <code>Parser</code>. There are <a href=\"https://chat.openai.com/share/146ddbb1-d33c-41d8-9b33-96217d195f2a\">quite a few downsides</a> to adding lazy evaluation to a programming language. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> has mentioned before that he considers laziness in haskell to be a mistake but I'm not sure what he considers to be the key drawbacks.</p>",
        "id": 371049799,
        "sender_full_name": "Anton",
        "timestamp": 1688114098
    },
    {
        "content": "<p>I see, thank you!<br>\nI'd be very interested to know more on this choice, especially if it was driven more by performance or semantics concerns. Again, I guess performance is the driving factor since in absence of side effects the order of evaluation is not particularly meaningful.</p>",
        "id": 371095366,
        "sender_full_name": "Maldus512",
        "timestamp": 1688121910
    }
]