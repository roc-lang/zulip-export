[
    {
        "content": "<p>For a simple program</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;simple-recursion&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.8.1/x8URkvfyi9I0QhmVG98roKBUs_AZRkLFwFJVJ3942YA.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n    ]\n    provides [main] to pf\n\nNullable val : [Null, Full val]\n\nField : {\n    columntype : Nullable ColumnType,\n}\n\nColumnType : {\n    fields : Nullable Field,\n}\n\nmain =\n    Full {columntype: Null} |&gt; Inspect.toStr |&gt; Stdout.line\n</code></pre></div>\n<p>I am getting the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── CYCLIC ALIAS in main7.roc ───────────────────────────────────────────────────\n\nThe Field alias is self-recursive in an invalid way:\n\n12│  Field : {\n     ^^^^^\n\nRecursion in aliases is only allowed if recursion happens behind a\ntagged union, at least one variant of which is not recursive.\n</code></pre></div>\n<p>Is this expected, or a false positive?</p>",
        "id": 431840488,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712544763
    },
    {
        "content": "<p>We have a bug that doesn't fully resolve types when dealing with recursion. As such, the recursive type must be defined inline.</p>",
        "id": 431842809,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712545600
    },
    {
        "content": "<p>Oh no.. Thanks!</p>",
        "id": 431842954,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712545678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> has marked this topic as resolved.</p>",
        "id": 431842959,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712545679
    },
    {
        "content": "<p>As an extra not, I think you can use <code>as</code> to help with defining types when dealing with this....That said, the exact way to model this inline is escaping me at this time. would need to mess around a bit.</p>",
        "id": 431843129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712545752
    },
    {
        "content": "<p>Would be great if you could point me to any example of this workaround. I hope it is possible to at least have recursive opaque types</p>",
        "id": 437348104,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715034934
    }
]