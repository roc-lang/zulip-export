[
    {
        "content": "<p>My first roc program ... I was trying to work out how to do tests first, so was experimenting with \"expect\"</p>\n<div class=\"codehilite\" data-code-language=\"app\"><pre><span></span><code>import pf.Stdout\n\nTuple: { x: F64, y: F64, z: F64, w: F64 }\ntuple_to_string: Tuple -&gt; Str\ntuple_to_string = |{x:x, y:y, z:z, w:w}|\n  \"{x:${Num.to_str(x)}, y:${Num.to_str(y)}, z:${Num.to_str(z)}, w:${Num.to_str(w)}}\"\n\ntest_01! = |_|\n  _ = Stdout.line! (\"Scenario: A tuple with w=1.0 is a point\")\n  tuple = {x:4.3, y:-4.2, z:3.1, w:1.0}\n  {x:a,y:b,z:c,w:d} = tuple\n  #expect a == 4.3\n  #_ = Stdout.line!(\"a is ${Num.to_str(a)}\")\n  Stdout.line!(\"tuple is ${tuple_to_string(tuple)}\")\n\nmain! = |_args|\n  test_01!(1)\n</code></pre></div>\n<p>If I uncomment the expect ... I get</p>\n<p>thread '&lt;unnamed&gt;' panicked at crates/compiler/mono/src/ir/pattern.rs:1044:26:<br>\ninternal error: entered unreachable code: only optional destructs can be optional fields<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>",
        "id": 502847023,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1740912361
    },
    {
        "content": "<p>Hi Jonathan,</p>\n<p>I myself am also a beginner to Roc. One thing I've noticed is that when <code>roc build</code> or <code>roc run</code> show a crash like this, it's because it encountered an issue with the types, and there might be a bug somewhere at the moment that crashes the compiler with <code>build</code> and <code>run</code>.</p>\n<p>However, you can run: <code>roc check &lt;filename&gt;</code> and it'll tell you what the type issue is:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in test.roc ───────────────────────────────────────────────────\n\nThis 1st argument to tuple_to_string has an unexpected type:\n\n18│    Stdout.line!(&quot;tuple is ${tuple_to_string(tuple)}&quot;)\n                                                ^^^^^\n\nThis tuple value is a:\n\n    {\n        w : Frac Binary64,\n        x : Frac Decimal,\n        y : Frac Binary64,\n        z : Frac Binary64,\n    }\n\nBut tuple_to_string needs its 1st argument to be:\n\n    {\n        w : F64,\n        x : F64,\n        y : F64,\n        z : F64,\n    }\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 3 warnings found in 29 ms.\n</code></pre></div>\n<p>Looks like by running <code>expect a == 4.3</code> the type inferred for a, and subsequently x, is a <code>Dec</code>. This clashes with what <code>tuple_to_string</code> expects (all F64s).</p>\n<p>I'm not sure why <code>expect a == 4.3</code> forces <code>a</code> to be a Dec (don't know how the type inference works, yet).</p>\n<p>I tried <code>expect a == 4.3f64</code>, but it looks like equality might not be implemented for <code>f32</code> or <code>f64</code> yet? Hopefully someone with more knowledge can chime in.</p>\n<p>Aside from that, remember to give <code>roc check</code> a shot whenever you encounter a crash like that.</p>",
        "id": 502865296,
        "sender_full_name": "hchac",
        "timestamp": 1740925384
    },
    {
        "content": "<p>If you turn the equality into a delta/error comparison though, it type checks fine:</p>\n<p><code>expect Num.abs(a - 4.3) &lt; 0.001</code></p>\n<p>Replace <code>0.001</code> with your preferred level of accuracy.</p>",
        "id": 502865875,
        "sender_full_name": "hchac",
        "timestamp": 1740925788
    },
    {
        "content": "<blockquote>\n<p>I'm not sure why <code>expect a == 4.3</code> forces <code>a</code> to be a Dec (don't know how the type inference works, yet).</p>\n</blockquote>\n<p>That is likely a type inference bug. <code>Dec</code> is the default fractional type.</p>",
        "id": 502887153,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740940277
    },
    {
        "content": "<p>I think floats intentionally don't have equality cause equality on binary floats is almost always a mistake.</p>",
        "id": 502887256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740940352
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/builtins/Num#is_approx_eq\">https://www.roc-lang.org/builtins/Num#is_approx_eq</a></p>",
        "id": 502887262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740940354
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> is the builtin solution</p>",
        "id": 502887272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740940367
    },
    {
        "content": "<p>Thanks.<br>\nroc check is brilliant.<br>\nI was surprised by the whole \"you can't == floats\" thing, but I like it ... I think. :)</p>",
        "id": 502889665,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1740941958
    },
    {
        "content": "<p>Oh actually, just realized it isn't a bug. By using <code>== 4.3</code>, you are guaranteeing the type must be <code>Dec</code> (cause <code>F32</code> and <code>F64</code> don't have equality).</p>",
        "id": 502889812,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740942058
    },
    {
        "content": "<p>So the main bug is that <code>roc check</code> gives full nice errors, but <code>roc build</code> and <code>roc run</code> fail to. They also should surface all the same errors as check, but in the current compiler that is definitely not the case.</p>",
        "id": 502889928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740942136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/expect.20crash/near/502887256\">said</a>:</p>\n<blockquote>\n<p>I think floats intentionally don't have equality cause equality on binary floats is almost always a mistake.</p>\n</blockquote>\n<p>I was reading the <code>abilities</code> doc, and stumbled on this paragraph in the <a href=\"https://www.roc-lang.org/abilities#builtins\">Builtins</a> section:</p>\n<blockquote>\n<p><code>Eq</code> is not derived for <code>F32</code> or <code>F64</code> as these types do not support structural equality. If you need to compare floating point numbers, you must provide your own function for comparison.</p>\n</blockquote>\n<p>So that confirms it was intentional.</p>",
        "id": 502925574,
        "sender_full_name": "hchac",
        "timestamp": 1740968292
    }
]