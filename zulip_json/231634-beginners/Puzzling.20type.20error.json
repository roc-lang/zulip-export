[
    {
        "content": "<p>I am trying to build \"generators\", functions that can use a Task-like syntax to yield values and then resume when another value is requested. They work, but as I try to build one of the useful operators on them, I am running into a type error that I can't understand:</p>\n<div class=\"codehilite\"><pre><span></span><code>This yieldFrom call produces:\n\n    [\n        Stop,\n        YieldValue a ({} -&gt; YieldValue a),\n    ] as *\n\nBut all the previous branches have type:\n\n    [\n        Stop,\n        YieldValue s ({} -&gt; YieldValue a),\n    ]b\n\nAll branches of a when must have the same type!\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 4 warnings found in 30 ms\n</code></pre></div>\n<p>The code required to explain all this is a bit long: <a href=\"https://github.com/aarchiba/roc-experiments/blob/main/Stream.roc#L328\">https://github.com/aarchiba/roc-experiments/blob/main/Stream.roc#L328</a></p>\n<p>But I don't understand the difference between these two types, or why the types in this code shouldn't work. Specifically, they seem to differ in that one has a \"b\" appended, and the other has an \"as *\" appended. I don't understand what either of these mean. Perhaps the error message could be clearer?</p>",
        "id": 419630039,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1706984361
    },
    {
        "content": "<p>I think the important part is <code>YieldValue a</code> vs <code>YieldValue s</code></p>",
        "id": 419633189,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706986704
    },
    {
        "content": "<p>Speaking of types puzzles, I recently ran into this mystery <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n<p><a href=\"/user_uploads/22008/zUA-jtYQfoqF2MmZu5tQIOWE/telegram-cloud-photo-size-2-5325936614897210857-y.jpg\">telegram-cloud-photo-size-2-5325936614897210857-y.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/zUA-jtYQfoqF2MmZu5tQIOWE/telegram-cloud-photo-size-2-5325936614897210857-y.jpg\" title=\"telegram-cloud-photo-size-2-5325936614897210857-y.jpg\"><img src=\"/user_uploads/22008/zUA-jtYQfoqF2MmZu5tQIOWE/telegram-cloud-photo-size-2-5325936614897210857-y.jpg\"></a></div><p>I'll try to localize the problem, but it's gone when I removed type annotation from the function allowing type system to infer types</p>",
        "id": 419633650,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706987046
    },
    {
        "content": "<p>Definitely need more context on that one, but looks like a bug (or at least a missing constraint that isn't being printed)</p>",
        "id": 419633727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706987152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Puzzling.20type.20error/near/419633189\">said</a>:</p>\n<blockquote>\n<p>I think the important part is <code>YieldValue a</code> vs <code>YieldValue s</code></p>\n</blockquote>\n<p>Well spotted, but for the life of me I can't figure out why roc is inferring that type.</p>",
        "id": 419638192,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1706991196
    },
    {
        "content": "<p>I was adding more type annotions and I think these two may be hitting the same underlying issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>Something is off with the body of the yieldFn definition:\n\n332│              yieldFn : {} -&gt; YieldValue a\n333│              yieldFn = \\{} -&gt; yieldFrom (Stream next s2)\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis yieldFrom call produces:\n\n    YieldValue a\n\nBut the type annotation on yieldFn says it should be:\n\n    YieldValue a\n</code></pre></div>",
        "id": 419640327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706993347
    },
    {
        "content": "<p>My guess....lambdasets.</p>",
        "id": 419640346,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706993388
    },
    {
        "content": "<p>The compiler is seeing the values as two different types cause it is failing to unify their lambdasets.</p>",
        "id": 419640405,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706993416
    },
    {
        "content": "<p>but yeah, compiler bugs</p>",
        "id": 419640412,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706993423
    }
]