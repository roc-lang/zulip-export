[
    {
        "content": "<p>As flabbergasted as I've been to witness it, I've run into a <code>Segmentation fault (core dumped)</code> message, when working with pure Roc code (i.e., no platforms, it's an interface file, with a bunch of <code>expect</code> tests).</p>\n<p>The error occurred in the context of my attempting to do conversion gymnastics (going through <code>Dec</code> and <code>Frac</code>), in order to be able to (string) format <code>F64</code> values with a decimal point, when their values after the decimal point are <code>0</code>s.</p>\n<p>I'll try to provide a minimal reproducible example.</p>\n<p>Please, note that this might be due to my local environment, as I've been experiencing issues with parsing <code>F64</code> from <code>Str</code> in the REPL. However, the issue which I'm referring to above isn't limited to the REPL (as I mentioned, it occurs as a result of <code>roc test ...</code>). Just to confirm, this is in the context of a 64-bit machine (my Roc experiments have been conducted running inside a Docker container). I'll try to reproduce the issue on a different machine as well.</p>",
        "id": 426015732,
        "sender_full_name": "Hristo",
        "timestamp": 1710194383
    },
    {
        "content": "<p>On a related note, is there a way to format an <code>F64</code> with a value of <code>5.0</code> as <code>\"5.0\"</code>(rather than <code>\"5\"</code>) via <code>Num.toStr</code>?<br>\nThe only way I could think of is via <code>Num.toFrac</code>, but I'm getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"kt\">F64</span>\n<span class=\"err\">…</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mf\">10.</span><span class=\"mi\">0</span>\n\n<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span>\n<span class=\"err\">»</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toFrac</span><span class=\"w\"> </span><span class=\"nv\">p</span>\n<span class=\"nv\">thread</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">main'</span><span class=\"w\"> </span><span class=\"nv\">panicked</span><span class=\"w\"> </span><span class=\"nv\">at</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">yet</span><span class=\"w\"> </span><span class=\"nv\">implemented</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NumToFrac</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">layout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">arg</span><span class=\"w\"> </span><span class=\"kt\">Builtin</span><span class=\"p\">(</span><span class=\"kt\">Float</span><span class=\"p\">(</span><span class=\"kt\">F64</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"nv\">ret</span><span class=\"w\"> </span><span class=\"kt\">InLayout</span><span class=\"p\">(</span><span class=\"kt\">DEC</span><span class=\"p\">)</span><span class=\"nf\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">crates</span><span class=\"nf\">/</span><span class=\"nv\">compiler</span><span class=\"nf\">/</span><span class=\"nv\">gen_dev</span><span class=\"nf\">/</span><span class=\"nv\">src</span><span class=\"nf\">/</span><span class=\"nv\">generic64</span><span class=\"nf\">/</span><span class=\"nv\">mod</span><span class=\"nf\">.</span><span class=\"nv\">rs</span><span class=\"nf\">:</span><span class=\"mi\">5089</span><span class=\"nf\">:</span><span class=\"mi\">20</span>\n<span class=\"nv\">note</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">RUST_BACKTRACE</span><span class=\"nf\">=</span><span class=\"mi\">1</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">environment</span><span class=\"w\"> </span><span class=\"nv\">variable</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">backtrace</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 426016367,
        "sender_full_name": "Hristo",
        "timestamp": 1710194660
    },
    {
        "content": "<p>Any segfaults while running <code>roc test</code> on an interface file is certainly a compiler bug. If you can log an issue with a reproduction that would be super helpful.</p>",
        "id": 426027207,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710199642
    },
    {
        "content": "<p>For formatting numbers to <code>Str</code>, I think it has been discussed before but I can't recall the discussion. I feel like the best solution long term will be a userspace library that provides that functionality. </p>\n<p>I've implemented similar formatting functions in isolation in small parts where I've needed them, but a larger package with better support and functionality would be really helpful.</p>",
        "id": 426027692,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710199976
    },
    {
        "content": "<p>Also the crash in the REPL <code>thread 'main' panicked at 'not yet implemented: NumToFrac</code> is likely due to an unimplemented function in one of the dev backends.</p>",
        "id": 426027762,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710200024
    },
    {
        "content": "<p>Thanks for your response, <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>!</p>\n<p>Yes, that's indeed the case regarding the panic - it appears that <code>toFrac</code> is only defined for integer types, which is understandable.</p>\n<p>I also do appreciate the suggestion regarding a user-space library. That's what I eventually resorted to - adding the \".0\" in what felt originally as a hacky way (something that could be expanded to some more elaborate and flexible formatting functionality), but I do appreciate it's in the category of functionalities which, by design or otherwise, haven't been intended to be offered by the standard library.</p>",
        "id": 426062616,
        "sender_full_name": "Hristo",
        "timestamp": 1710225563
    },
    {
        "content": "<p>I think this can be closed as unable to reproduce, unless somebody else would like to try reproducing it via the old-Linux version.</p>\n<p>The issue occurs only within the context of the 64-bit machine on which I'm running the old-Linux version of Roc:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\"> </span>roc<span class=\"w\"> </span>version\nroc<span class=\"w\"> </span>nightly<span class=\"w\"> </span>pre-release,<span class=\"w\"> </span>built<span class=\"w\"> </span>from<span class=\"w\"> </span>commit<span class=\"w\"> </span>7d51d2b<span class=\"w\"> </span>on<span class=\"w\"> </span>Fri<span class=\"w\"> </span>Mar<span class=\"w\">  </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"m\">09</span>:08:29<span class=\"w\"> </span>UTC<span class=\"w\"> </span><span class=\"m\">2024</span>\n</code></pre></div>\n<p>I haven't been able to reproduce the issue on an Apple M1.</p>\n<p>Please, find a minimum reproducible example (and hence the one-letter names) as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">SegFaultExample</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n\n<span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">SegFaultExample</span>\n<span class=\"w\">    </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">If</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">Dec</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">changed</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">F64</span><span class=\"nf\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">there</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">no</span><span class=\"w\"> </span><span class=\"nv\">segfaultt</span><span class=\"nf\">.</span>\n<span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Dec</span>\n<span class=\"kt\">Q</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">)</span>\n\n<span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">T</span>\n<span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">g</span>\n\n<span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Q</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">T</span>\n<span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"7\"</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">segfault</span><span class=\"w\"> </span><span class=\"nv\">doesn't</span><span class=\"w\"> </span><span class=\"nv\">occur</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">following</span><span class=\"w\"> </span><span class=\"nv\">though</span><span class=\"nf\">.</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"6\"</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Please, have a look at the two comments as well, which showcase some of the observed odd behaviour.</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; roc test SegFaultExample.roc\n\n... [the warning regarding the unused list has been omitted for brevity]\n\n0 errors and 1 warning found in 198 ms\n.\n\nRunning tests…\n\n──────────────────────────────────\nSegmentation fault (core dumped)\n</code></pre></div>",
        "id": 426207482,
        "sender_full_name": "Hristo",
        "timestamp": 1710275551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693045\">Hristo</span> has marked this topic as resolved.</p>",
        "id": 426207768,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710275654
    },
    {
        "content": "<p>Can you file an issue. That is a small enough report it is definitely worth digging into</p>",
        "id": 426246242,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710296198
    },
    {
        "content": "<p>I'll probably be able to reproduce it, I have machines for all Roc targets :)</p>",
        "id": 426297243,
        "sender_full_name": "Anton",
        "timestamp": 1710323681
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  - shall do a bit later today!</p>",
        "id": 426306004,
        "sender_full_name": "Hristo",
        "timestamp": 1710326415
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nApologies it took ages - I've finally found some time to create a GitHub <a href=\"https://github.com/roc-lang/roc/issues/6590\">ticket</a> regarding this.<br>\nI confirm that I've got several workarounds, so this is in no way a blocker in my case.<br>\nThanks!</p>",
        "id": 426820100,
        "sender_full_name": "Hristo",
        "timestamp": 1710535946
    }
]