[
    {
        "content": "<p>(forked from <a href=\"#narrow/stream/231634-beginners/topic/Task.2Ferror.20handling.20.26.20platform.20use/near/314385634\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/Task.2Ferror.20handling.20.26.20platform.20use/near/314385634</a>)</p>\n<p>At least basic-cli main to have the signature <code>main : Task {} []</code>, which I take to mean that we can't leave any errors unhandled. I've seen the available options in the Task package (such as await vs attempt, onFail, etc), but, at least at my experience level they don't seem to combine well.</p>\n<p>For example, the tutorial extensively highlights <code>await</code>, though...</p>\n<ol>\n<li><code>await</code>, afaict, prevents the remainder of the surrounding function from being able to handle any errors that came out of the application of awaited task.</li>\n<li><code>attempt</code> does allow handling errors in the same function, but is not nearly as convenient, and must be paired with <code>Result</code> functions (not too bad) or <code>when</code>.</li>\n<li>A <code>when</code> expression (for error checking) disrupts the visual flow (and thus readability/pacing) of what otherwise might be a nicely pipeline or back-passed function.</li>\n</ol>\n<p>I'm hoping someone can share some technique(s) for use in throwaway/non-productionized programs (\"scripts\"), such as in Advent of Code solutions, in which I can conveniently use backpassing with <code>await</code> throughout <code>main</code>, while being able to capture errors and log a generic failure message to Stderr.</p>\n<p>For serious programs, I would of course take errors seriously, but at present I do find myself regularly switching a given function back and forth between Task functions (such as backpassing await vs backpassing attempt vs forward-piping onFail to attempt) in order to find a good balance of succinctness and simplicity while satisfying platform requirements.</p>",
        "id": 314852068,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1670578468
    },
    {
        "content": "<p>one idea: we could change <code>basic-cli</code> to accept <code>main : Task {} *</code> - and then have it crash automatically for unhandled errors</p>",
        "id": 314883351,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670588676
    },
    {
        "content": "<p>this would be convenient for quick scripts, and if you wanted to force error handling, it would be as trivial as annotating your application with <code>main : Task {} []</code> like today</p>",
        "id": 314883507,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670588739
    },
    {
        "content": "<p>Generally, what i have found pretty reasonable is to make a task that is chained with await. Only at the very end use a <code>when</code> to do any error handling. If no error handling is wanted, I think you can just <code>crash</code> on all errors.</p>\n<p>Theoretically, it should be possible to chain a <code>Task.onFail</code> to deal with error handling (again, this could just be a call to <code>crash</code>).  That said, i would need to double check if this is convenient or if the types don't exactly align happily.</p>",
        "id": 314922536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670600462
    },
    {
        "content": "<p>We also could just expose something like <code>Task.crashOnErr</code> to the end user that would print the error and crash. Requires a way to print tag unions first, but in general should work</p>",
        "id": 314922967,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670600582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> by chained, do you mean <code>|&gt;</code> ?</p>\n<p>I could see how that'd work, but isn't that still also mutually exclusive with a predominant backpassing task construction style? I couldn't figure out how to make the type system work with await, backpassing, _and_ error handling.</p>\n<p>I may just be trying to over-leverage backpassing + await when backpassing + attempt or chaining + await would be more suitable for these situations?</p>\n<p>It's been the better part of a year since I've given the tutorial a full read through, but in my recent skimming, it seemed like await + backpassing were prominently advertised together without mention of caveats, so I figured that combination was the most conventional choice whenever tasks were involved.</p>",
        "id": 314965121,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1670613495
    },
    {
        "content": "<p>I'm still having a hard time sometimes getting tasks to work together. I spent a fair amount of time working with them; but it still hasn't fully clicked for me. Below is a concrete example; I have been trying for about 15mins now to figure out what is causing this error. I am sure it is something really obvious that I am missing here.</p>\n<p>I thought I would share as this is probably a common experience. </p>\n<p>I am not sure which <code>await</code> has the issue here. </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fileInput</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"s2\">\"input-day-15.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fileData</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parseInput</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"n\">fileInput</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">withColor</span><span class=\"w\"> </span><span class=\"s2\">\"Part 1 Sample:\"</span><span class=\"w\"> </span><span class=\"nc\">Green</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">initialState</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">sampleData</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">withColor</span><span class=\"w\"> </span><span class=\"s2\">\"Part 1 File:\"</span><span class=\"w\"> </span><span class=\"nc\">Green</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">initialState</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">fileData</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">2_000_000</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"Complete\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s2\">\"Oops, something went wrong.\"</span><span class=\"w\"></span>\n\n<span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">State</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">I64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>% roc dev day15.roc\n\n── TYPE MISMATCH ─────────────────────────────────────────────────── day15.roc ─\n\nThis 2nd argument to await has an unexpected type:\n\n<span class=\"m\">22</span>│&gt;          fileInput &lt;- File.readUtf8 <span class=\"o\">(</span>Path.fromStr <span class=\"s2\">\"input-day-15.txt\"</span><span class=\"o\">)</span> <span class=\"p\">|</span>&gt; Task.await\n<span class=\"m\">23</span>│&gt;          <span class=\"nv\">fileData</span> <span class=\"o\">=</span> parseInput <span class=\"o\">(</span>Str.toUtf8 fileInput<span class=\"o\">)</span>\n<span class=\"m\">24</span>│&gt;          <span class=\"o\">{}</span> &lt;- part1 <span class=\"o\">(</span>withColor <span class=\"s2\">\"Part 1 Sample:\"</span> Green<span class=\"o\">)</span> <span class=\"o\">{</span>initialState <span class=\"p\">&amp;</span> data : sampleData<span class=\"o\">}</span> <span class=\"m\">10</span> <span class=\"p\">|</span>&gt; Task.await\n<span class=\"m\">25</span>│&gt;          <span class=\"o\">{}</span> &lt;- part1 <span class=\"o\">(</span>withColor <span class=\"s2\">\"Part 1 File:\"</span> Green<span class=\"o\">)</span> <span class=\"o\">{</span>initialState <span class=\"p\">&amp;</span> data : fileData<span class=\"o\">}</span> 2_000_000 <span class=\"p\">|</span>&gt; Task.await\n<span class=\"m\">26</span>│&gt;\n<span class=\"m\">27</span>│&gt;          Stdout.line <span class=\"s2\">\"Complete\"</span>\n\nThe argument is an anonymous <span class=\"k\">function</span> of type:\n\n    Str -&gt; Task <span class=\"o\">{}</span> <span class=\"o\">[]</span>\n\nBut await needs its 2nd argument to be:\n\n    Str -&gt; Task <span class=\"o\">{}</span> <span class=\"o\">[</span>FileReadErr Path.Path InternalFile.ReadErr,\n    FileReadUtf8Err Path.Path <span class=\"o\">[</span>BadUtf8 Utf8ByteProblem Nat<span class=\"o\">]]</span>\n\nTip: Looks like a closed tag union does not have the FileReadErr and\nFileReadUtf8Err tags.\n\nTip: Closed tag unions can<span class=\"err\">'</span>t grow, because that might change the size\n<span class=\"k\">in</span> memory. Can you use an open tag union?\n\n────────────────────────────────────────────────────────────────────────────────\n\n<span class=\"m\">1</span> error and <span class=\"m\">0</span> warnings found <span class=\"k\">in</span> <span class=\"m\">25</span> ms.\n</code></pre></div>",
        "id": 316385610,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1671237461
    },
    {
        "content": "<p>does part1 does more file reading stuff? Im not sure what is going on there but I think we need to see more of the code.</p>",
        "id": 316386923,
        "sender_full_name": "Erik",
        "timestamp": 1671238415
    },
    {
        "content": "<p>I got it working. If I handle the error case for <code>File.readUtf8</code> it works fine. I guess my understanding was that errors would flow all the way up to the <code>task</code> and then get captured in the <code>Task.onFail task \\_ -&gt; crash \"Oops, something went wrong.\"</code></p>\n<p>Changing it to the following works now. It was a little confusing; as I've used this same pattern for the last 14 AoC days and haven't had this issue before.</p>\n<div class=\"codehilite\"><pre><span></span><code>fileInput &lt;-\n    File.readUtf8 (Path.fromStr &quot;input-day-15.txt&quot;)\n    |&gt; Task.mapFail \\_ -&gt; crash &quot;couldnt read file&quot;\n    |&gt; Task.await\n\nfileData = parseInput (Str.toUtf8 fileInput)\n</code></pre></div>",
        "id": 316387351,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1671238685
    },
    {
        "content": "<p>Hmmm it may have been one of the earlier awaits. Since part1 says it returns a task with no error tags. But at that point the task flowing through still has the file read errors as apart of its type. I think that could explain why adding the crash earlier takes care of it.</p>",
        "id": 316388076,
        "sender_full_name": "Erik",
        "timestamp": 1671239242
    },
    {
        "content": "<p>I wanna see if I can get that rudimentary language server going being able to hover the types here might help.</p>",
        "id": 316388163,
        "sender_full_name": "Erik",
        "timestamp": 1671239291
    },
    {
        "content": "<p>To test my theory u could remove the early crash and change the task type on part1</p>",
        "id": 316388230,
        "sender_full_name": "Erik",
        "timestamp": 1671239362
    },
    {
        "content": "<blockquote>\n<p>To test my theory u could remove the early crash and change the task type on part1</p>\n</blockquote>\n<p>Yep, that works. Having the definition on <code>part1</code> meant that it couldn't flow the error all the way through. I guess I added that to assist with fault finding something else, which then causes this issue.</p>",
        "id": 316389174,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1671240199
    },
    {
        "content": "<p>Ooh, I just realised that if I handle the errors correctly, then I can simplify the whole main to the following. After playing with it a while, I really like this pattern!</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">fileInput</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"s2\">\"input-day-15.txt\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapFail</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s2\">\"couldn't read input\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">fileData</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parseInput</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"n\">fileInput</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"s2\">\"Sample\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">initState</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">sampleData</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"s2\">\"File\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">initState</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">fileData</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">2_000_000</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"Completed processsing 😊\"</span><span class=\"w\"></span>\n\n<span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">State</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">I64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316389906,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1671240882
    },
    {
        "content": "<p>Erik, I think you're observation about seeing the types is a good one. If we could \"see\" the types flow through the code then that would be awesome.</p>",
        "id": 316390238,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1671241232
    },
    {
        "content": "<p>I thought we made it so that all returned tags are now open, so i am a bit surprised by this error. That said, don't have access to a computer right now, so can't mess with it to figure these things out.</p>",
        "id": 316392040,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671242969
    },
    {
        "content": "<p>Interesting, ok I narrowed down the example to not require anything more than the following</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"s2\">\"main\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">pf</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/roc-lang/basic-cli/releases/download/0.1.3/5SXwdW7rH8QAOnD71IkHcFxCmBEPtFSLAIkclPEgjHQ.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">File</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">Path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">Stdout</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"w\"></span>\n\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_fileInput</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"s2\">\"some-file.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Some Str\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Some Data\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Some Str\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Some Data\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">2_000_000</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"Complete\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s2\">\"Oops, something went wrong.\"</span><span class=\"w\"></span>\n\n<span class=\"n\">part1</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nc\">I64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316401006,
        "sender_full_name": "Erik",
        "timestamp": 1671251360
    },
    {
        "content": "<p>which reproduces the error</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc check\n\n── TYPE MISMATCH ──────────────────────────────────────────────────── main.roc ─\n\nThis 2nd argument to await has an unexpected type:\n\n14│&gt;          _fileInput &lt;- File.readUtf8 (Path.fromStr &quot;some-file.txt&quot;) |&gt; Task.await\n15│&gt;\n16│&gt;          {} &lt;- part1 (&quot;Some Str&quot;) { data: &quot;Some Data&quot; } 10 |&gt; Task.await\n17│&gt;          {} &lt;- part1 (&quot;Some Str&quot;) { data: &quot;Some Data&quot; } 2_000_000 |&gt; Task.await\n18│&gt;\n19│&gt;          Stdout.line &quot;Complete&quot;\n\nThe argument is an anonymous function of type:\n\n    Str -&gt; Task {} []\n\nBut await needs its 2nd argument to be:\n\n    Str -&gt; Task {} [FileReadErr Path.Path InternalFile.ReadErr,\n    FileReadUtf8Err Path.Path [BadUtf8 Utf8ByteProblem Nat]]\n\nTip: Looks like a closed tag union does not have the FileReadErr and\nFileReadUtf8Err tags.\n\nTip: Closed tag unions can&#39;t grow, because that might change the size\nin memory. Can you use an open tag union?\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 13 ms.\n</code></pre></div>\n<p>I thought changing the annotation on part1 to return <code>Task {} []*</code> might work out to make it explicitely open. But then I get.</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc check\n\n── UNNECESSARY WILDCARD ───────────────────────────────────────────── main.roc ─\n\nThis type annotation has a wildcard type variable (*) that isn&#39;t\nneeded.\n\n23│  part1 : Str, { data : Str }, I64 -&gt; Task {} []*\n                                                   ^\n\nAnnotations for tag unions which are constants, or which are returned\nfrom functions, work the same way with or without a * at the end. (The\n* means something different when the tag union is an argument to a\nfunction, though!)\n\nYou can safely remove this to make the code more concise without\nchanging what it means.\n\n────────────────────────────────────────────────────────────────────────────────\n\n0 errors and 1 warning found in 13 ms.\n</code></pre></div>\n<p>Which makes me think I don't fully understand open tag unions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 316401112,
        "sender_full_name": "Erik",
        "timestamp": 1671251495
    },
    {
        "content": "<p>To clarify, I would have expected 0 warnings for that change since the above error made it seem like that tag union needed to be open (or explicitly include those error tags.</p>",
        "id": 316401193,
        "sender_full_name": "Erik",
        "timestamp": 1671251588
    },
    {
        "content": "<p>So still haven't had time to dig into this on a computer, but i think the type of await is pretty telling<br>\n<code>Task a err, (a -&gt; Task b err) -&gt; Task b err</code></p>\n<p>Even if the return type tag is always open, the <code>Task a err</code> is an input to the function, this doesn't have to be open.</p>\n<p>On top of that, the 2 error types have to unify and be represented in the same final memory layout based on how await is written. Still not totally sure the ramifications of this/if we can make it more flexible, but just some minor musings.</p>",
        "id": 316403440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671253585
    },
    {
        "content": "<p>Im away from my laptop, but I had a thought, I feel like you need to remove the type definition on <code>main</code>?</p>",
        "id": 316406409,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1671256887
    },
    {
        "content": "<p>That shouldn't change anything. The type of main is specified in the platform.</p>",
        "id": 316406977,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671257291
    },
    {
        "content": "<p>So you can't really change it.</p>",
        "id": 316406996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671257308
    },
    {
        "content": "<p>Oh, the original code works with a minor change. Just needs this type signature:<br>\n<code>part1 : Str, State, I64 -&gt; Task {} *</code></p>",
        "id": 316407413,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671257751
    },
    {
        "content": "<p>This definitely surprises me since I though we made open tag unions the default for return types. That would mean that returning <code>[]</code> should be the same as using <code>*</code> to my understanding, but that is obviously wrong based on this example.</p>",
        "id": 316407483,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671257809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> any insights to help us understand the types here especially with the default of returning open tag unions?</p>\n<p>Why does <code>part1 : Str, State, I64 -&gt; Task {} *</code> work, but <code>part1 : Str, State, I64 -&gt; Task {} []</code> fail to type check? I still assume this is somehow tied to it being consumed by <code>await</code>. So it isn't really about returning open tag unions. It's about how <code>await</code> is consuming and restricting the tag union. Just don't understand the full picture.</p>",
        "id": 316407621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671257965
    },
    {
        "content": "<p>OK maybe this has something to do with it.... when the thing is being sent through <code>await</code> where the return is a <code>Task {} []</code> it raises this issue. But if the error tag union has just one tag in it the error goes away.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"s2\">\"main\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">pf</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/roc-lang/basic-cli/releases/download/0.1.3/5SXwdW7rH8QAOnD71IkHcFxCmBEPtFSLAIkclPEgjHQ.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">File</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">Path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">Stdout</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"w\"></span>\n\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_fileInput</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"s2\">\"some-file.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">writeBytes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"s2\">\"myfile.dat\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">iDontActuallyKnowWhatImDoing</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"Donezo\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s2\">\"boom\"</span><span class=\"w\"></span>\n\n<span class=\"n\">iDontActuallyKnowWhatImDoing</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Hmm</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">iDontActuallyKnowWhatImDoing</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316409316,
        "sender_full_name": "Erik",
        "timestamp": 1671259525
    },
    {
        "content": "<p><code>iDontActuallyKnowWhatImDoing : Task {} [Hmm]</code> typechecks but <code>iDontActuallyKnowWhatImDoing : Task {} []</code> does not</p>",
        "id": 316409404,
        "sender_full_name": "Erik",
        "timestamp": 1671259574
    },
    {
        "content": "<p>If Roc is encouraging people to crash on any errors because they can't figure out another way then it's a problem we need to fix! The language should be encouraging the opposite - handling everything.</p>\n<p>I would suggest trying this pattern:</p>\n<p>Put all the logic into a helper function whose return task type has all of the possible error tags in it.</p>\n<p>Then all main does is call that helper and handle the returned errors. It would have a <code>when..is</code> to turn the success or any errors into strings, then print it out.</p>\n<p>Since main handles all the errors it can return a task with no errors.</p>",
        "id": 316430658,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1671272948
    },
    {
        "content": "<p>I suppose that's similar to what Erik is doing with the inner <code>task</code></p>",
        "id": 316430828,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1671273021
    },
    {
        "content": "<p>I'm on my phone now but can try it on a computer later</p>",
        "id": 316430926,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1671273085
    },
    {
        "content": "<p>OK this is what I meant but it gives the same error</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.1.3/5SXwdW7rH8QAOnD71IkHcFxCmBEPtFSLAIkclPEgjHQ.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">File</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Task</span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">pf</span><span class=\"w\"></span>\n\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">run</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">onFail</span><span class=\"w\"> </span><span class=\"nx\">handleErrors</span><span class=\"w\"></span>\n\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">FileReadErr</span><span class=\"w\"> </span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">Path</span><span class=\"w\"> </span><span class=\"nx\">InternalFile</span><span class=\"p\">.</span><span class=\"nx\">ReadErr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">FileReadUtf8Err</span><span class=\"w\"> </span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">Path</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">BadUtf8</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"p\">]]</span><span class=\"w\"></span>\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">_fileInput</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">File</span><span class=\"p\">.</span><span class=\"nx\">readUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">fromStr</span><span class=\"w\"> </span><span class=\"s\">\"some-file.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">part1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"Some Str\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Some Data\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">part1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"Some Str\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Some Data\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"nx\">_000_000</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Complete\"</span><span class=\"w\"></span>\n\n<span class=\"nv\">handleErrors</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">FileReadErr</span><span class=\"w\"> </span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">Path</span><span class=\"w\"> </span><span class=\"nx\">InternalFile</span><span class=\"p\">.</span><span class=\"nx\">ReadErr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">FileReadUtf8Err</span><span class=\"w\"> </span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">Path</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">BadUtf8</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nv\">handleErrors</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">error</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">errorString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">error</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">FileReadErr</span><span class=\"w\"> </span><span class=\"nx\">path</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nv\">pathStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">display</span><span class=\"w\"> </span><span class=\"nx\">path</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"s\">\"Could not read the file \\(pathStr)\"</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"nx\">FileReadUtf8Err</span><span class=\"w\"> </span><span class=\"nx\">path</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nv\">pathStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">display</span><span class=\"w\"> </span><span class=\"nx\">path</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"s\">\"Invalid UTF8 in file \\(pathStr)\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"nx\">errorString</span><span class=\"w\"></span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nx\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316434236,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1671274736
    },
    {
        "content": "<p>this is a bug in specifically how empty tag unions are handled. For example <code>part1 : Str, { data : Str }, I64 -&gt; Task {} [FileReadErr _ _ ]</code> works. The empty tag union case <code>part1 : Str, { data : Str }, I64 -&gt; Task {} []</code> should work too.</p>",
        "id": 316460128,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1671284705
    },
    {
        "content": "<p>Ok, this is a bug. I thought this seemed off.</p>",
        "id": 316477298,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671291847
    },
    {
        "content": "<p>Thanks</p>",
        "id": 316477311,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671291852
    },
    {
        "content": "<p>FWIW after all of this discussion and exploring, I think the current design is really great. My example above feels pretty simple conceptually and it encourages you to handle the errors so they don't accumulate. I think a good introduction with plenty of examples will be sufficient. Also, additional tooling support like an IDE would be nice to have in the future. The error msg could maybe be improved a liite more, im not sure what's possible here though.</p>",
        "id": 316506530,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1671308404
    },
    {
        "content": "<p>Whether you handle the errors right away, handle them latter, or just crash since it is a quick script, the original error example should type check. It is still a bug specifically around how we handle the empty tag. It should be considered open because it is in a return type. Since it is not considered open it doesn't merge/type check. Including Brian's proper error checking example wouldn't type check in current roc without changing the type of part1.</p>",
        "id": 316511438,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671311855
    },
    {
        "content": "<p>Yep good summary.<br>\nIt certainly did seem like a bug. Thanks for confirming that, Ayaz!</p>",
        "id": 316513358,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1671313195
    },
    {
        "content": "<p>I checked naive type on hover, it doesn't even really help here.. I feel like the editor could do a much nicer job, at least telling you where the type inference went wrong interactively (e.g. linking the relevant part of the <code>part1</code> signature vs the specific problematic part of the backpacking, like the error message but interactive), which even in this compiler bug scenario would make it much easier to recognize as a bug</p>\n<p><a href=\"/user_uploads/22008/Wuh8gho3htxv7UUhlYdwipaU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Wuh8gho3htxv7UUhlYdwipaU/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/Wuh8gho3htxv7UUhlYdwipaU/image.png\"></a></div>",
        "id": 316529444,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1671325719
    },
    {
        "content": "<p>Awesome thanks everyone for confirming the bug and the tips/tricks :).</p>",
        "id": 316537952,
        "sender_full_name": "Erik",
        "timestamp": 1671334798
    }
]