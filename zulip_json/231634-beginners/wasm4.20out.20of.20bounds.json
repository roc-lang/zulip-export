[
    {
        "content": "<p>I've been playing with wasm4 platform but ran into out of bounds error</p>\n<p>here's an ugly prototype of a maze game. level 3 crashes. if to have a bigger field, let's say 20x20 (currently it's 6x6), the game crashes trying to build even the first level.</p>\n<p>I thought it was something with recursion/stack overflow during random traversal. but it should be a pretty straightforward TCO case. also, there are no problems for the <code>roc-cli</code> platform, so it’s probably specific to the allocation mechanism of the wasm4 platform</p>\n<p><a href=\"https://gist.github.com/wontem/50bc86494a59fd7d7fffacc5dabb6e5d\">https://gist.github.com/wontem/50bc86494a59fd7d7fffacc5dabb6e5d</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>error log</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>bit_set.ArrayBitSet(u64,5120).isSet@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[6]:0x796\nroc_alloc@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[4]:0x2b1\n#UserApp_finishWalk_ab6bf482529beb271842e34a3922217532b2f57565d72aea510e9edbdcef6@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[95]:0xba67\n#UserApp_continueWalk_49cb6ad1f356dc514791c661f63f6841479dc80eaa158e38e2871686552@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[90]:0xa86d\n#UserApp_genMaze_9d55cb5018ba494bcf5765953355c83e4ade148e5c95b280aacd826c59bea86@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[87]:0xa36b\n#UserApp_movePlayer_bad96aa871ccf5b068b2a1da7544fd3d07a932588efb92244e692b8beda99ce@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[84]:0x9d75\n#UserApp_93_3efb3241b6f76bcf29426c5d5647f69b665c3ac3b1fc474c237e0eea46afd1@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[69]:0x802b\nroc__mainForHost_2_caller@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[67]:0x7965\nupdate@http://localhost:4444/wasm4.js line 56 &gt; WebAssembly.instantiate:wasm-function[21]:0x1e59\nbluescreenOnError@http://localhost:4444/wasm4.js:56:33222\nupdate@http://localhost:4444/wasm4.js:56:35997\np@http://localhost:4444/wasm4.js:62:4760\n</code></pre></div>\n</div></div>",
        "id": 417628079,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706096607
    },
    {
        "content": "<p>looks like it may be a bug with the allocator...not fully sure yet</p>",
        "id": 417679824,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706113003
    },
    {
        "content": "<p>The error currently doesn't make sense to me. Looks to be failing an assert in zig but we have a conditional right before the assert that should make it impossible. Not yet sure what is going on. Will have to debug more later.</p>",
        "id": 417682953,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706113818
    },
    {
        "content": "<p>Skimmed the allocator. Never read allocators or zig and must say, the code is very simple to follow! From what I see, it’s really hardly possible the problem happens because of the allocation for roc.</p>\n<p>Looks more like it fails trying to allocate memory on the stack for zig, it just happens to fail during <code>isSet</code>. Will check it later today. Or maybe the trace log is not accurate</p>",
        "id": 418026417,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706170106
    },
    {
        "content": "<p>Yeah, I decreased <code>mem_size</code> and increased <code>stack_size</code> by <code>10000</code> and it helped. Now, the question is why the stack overflow is happening. Seems to be a lack of TCO then. How can I check it? Going to check llvm ir, maybe there is a hint.</p>",
        "id": 418052932,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706179719
    },
    {
        "content": "<p>Interesting. That makes sense for the random failure location.</p>",
        "id": 418104736,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706196556
    },
    {
        "content": "<p>could be hitting this compiler bug: <a href=\"https://github.com/roc-lang/roc/issues/6213\">https://github.com/roc-lang/roc/issues/6213</a></p>",
        "id": 418105571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706196808
    },
    {
        "content": "<p>We need to cleanup our ir and ensure all stack allocas happen outside of looping code. Otherwise, as the loops run, it can still accumulate stack space.</p>",
        "id": 418105808,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706196880
    },
    {
        "content": "<p>I used <code>Task.loop</code> as a workaround. Works well enough</p>",
        "id": 418123194,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706201789
    },
    {
        "content": "<p>Glad you found a workaround</p>",
        "id": 418124525,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706202205
    }
]