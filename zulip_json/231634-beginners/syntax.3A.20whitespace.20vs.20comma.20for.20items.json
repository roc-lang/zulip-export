[
    {
        "content": "<p>From what I can tell, Roc function call arguments are separated with whitespace, however, arguments in a function definition, and items in lists and records are separated with commas. Why are these different? I understand that not having commas in definitions, lists and records would be more annoying because there would need to be parens instead, but why not keep everything uniform and have commas for function call arguments as well?</p>",
        "id": 402179415,
        "sender_full_name": "noonien",
        "timestamp": 1700038788
    },
    {
        "content": "<p>great question! It's mainly because of what happens when function calls happen inside lists - for example, in our static site generator for <a href=\"http://roc-lang.org\">roc-lang.org</a>:</p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/7b1f2d2ac1f6e0b7a283cfbe932318f37a0a6861/www/wip_new_website/main.roc#L104\">https://github.com/roc-lang/roc/blob/7b1f2d2ac1f6e0b7a283cfbe932318f37a0a6861/www/wip_new_website/main.roc#L104</a></p>",
        "id": 402212580,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048302
    },
    {
        "content": "<p>today, this can be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"s\">\"home-link\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">title</span><span class=\"w\"> </span><span class=\"s\">\"Roc\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">rocLogo</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>...but if we required commas to separate arguments in function calls, then it would have to be this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"s\">\"home-link\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"w\"> </span><span class=\"s\">\"Roc\"</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">rocLogo</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>...because the first way would become ambiguous; we couldn't tell if <code>[id \"home-link\", href</code> meant \"I want to call <code>id</code> passing <code>\"home-link\"</code> and <code>href</code> in the usual comma-separated way\" or \"I want to call <code>id</code> passing <code>\"home-link\"</code> and then <code>href</code> begins the next element in the list\"</p>",
        "id": 402212786,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048365
    },
    {
        "content": "<p>that said, I actually think it's an interesting idea to revisit that decision</p>",
        "id": 402213094,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048442
    },
    {
        "content": "<p>originally I assumed that pattern would come up often (because it came up all the time in Elm, specifically for DSLs like this) but to date that one specific DSL is the only place I've seen this come up <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 402213389,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048523
    },
    {
        "content": "<p>actually tuples would be another place - I don't have an example to link to offhand, but for example <code>(foo bar, baz blah)</code> would have to become <code>((foo bar), (baz blah))</code></p>",
        "id": 402213556,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048570
    },
    {
        "content": "<p>we haven't tried it, but another thing that's possible in the HTML DSL is to use optional record fields - in which case the above code could be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"home-link\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">href</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">title</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"Roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">rocLogo</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 402213980,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048674
    },
    {
        "content": "<p>although the same consideratoin happens for the list of child nodes - e.g. <a href=\"https://github.com/roc-lang/roc/blob/7b1f2d2ac1f6e0b7a283cfbe932318f37a0a6861/www/wip_new_website/main.roc#L109\">https://github.com/roc-lang/roc/blob/7b1f2d2ac1f6e0b7a283cfbe932318f37a0a6861/www/wip_new_website/main.roc#L109</a></p>\n<p>would go from this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">            </span><span class=\"nv\">div</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"s\">\"top-bar-links\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/tutorial\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"tutorial\"</span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/install\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"install\"</span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/community\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"community\"</span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/docs\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"docs\"</span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/donate\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"donate\"</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n</code></pre></div>\n<p>...to this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">            </span><span class=\"nv\">div</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"s\">\"top-bar-links\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/tutorial\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"tutorial\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/install\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"install\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/community\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"community\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/docs\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"docs\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/donate\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"donate\"</span><span class=\"p\">]),</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n</code></pre></div>",
        "id": 402214121,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048713
    },
    {
        "content": "<p>also worth noting that the optional record fields design raises the design question of what to do with custom attributes (such as <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\"><code>data-</code> attributes</a>) - might need a <code>custom:</code> field which takes a list of tuples or something</p>",
        "id": 402214450,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048802
    },
    {
        "content": "<p>all that said, I could see an argument for the extra commas being worth it for other reasons (e.g. readability, being able to pass <code>if</code>s or <code>when</code>s as middle arguments without needing parens, etc.)</p>",
        "id": 402214930,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700048932
    },
    {
        "content": "<p>actually <a href=\"https://github.com/roc-lang/roc/blob/98df325d76b6b743c6b01f399bbbeaaf0d8108fa/www/wip_new_website/main.roc#L107\">https://github.com/roc-lang/roc/blob/98df325d76b6b743c6b01f399bbbeaaf0d8108fa/www/wip_new_website/main.roc#L107</a> is a better example of the downside, would need to have parens across multiple lines if <code>homeLink</code> was moved ahead one spot:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">nav</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">ariaLabel</span><span class=\"w\"> </span><span class=\"s\">\"primary\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">div</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"s\">\"top-bar-links\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/tutorial\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"tutorial\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/install\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"install\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/community\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"community\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/docs\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"docs\"</span><span class=\"p\">]),</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">href</span><span class=\"w\"> </span><span class=\"s\">\"/wip/donate\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"donate\"</span><span class=\"p\">]),</span>\n<span class=\"w\">            </span><span class=\"p\">]),</span>\n<span class=\"w\">            </span><span class=\"nv\">homeLink</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n</code></pre></div>\n<p>so in general DSLs that wanted to use function calls to make the elements would get a lot more parens!</p>",
        "id": 402216037,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700049212
    },
    {
        "content": "<p>I see, that makes sense.<br>\nI'm looking over the syntactic design choices of programming languages and this particular choice in Roc seemed quite interesting, the lack of \"uniformity\" does seem to be massively outweighed by the improvements to succinctness.<br>\nThanks for your reply!</p>",
        "id": 402218881,
        "sender_full_name": "noonien",
        "timestamp": 1700049880
    },
    {
        "content": "<p>absolutely, thanks for the question! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 402221221,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700050445
    },
    {
        "content": "<p>Personally, I would rather consider removing commas from the type definition than adding them to the function call site.</p>\n<p>That said, I'm pretty sure that would lead to a mess and don't currently have a good alternative.</p>\n<p>I guess we could remove commas and require parens around more complex types just like with nested function calls currently. I wonder how that would look.</p>",
        "id": 402272984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700063186
    },
    {
        "content": "<p>In this case. Could u just use a semicolon as the separator? Are the only conflicts because you want to use the same symbol for separation in lists?</p>",
        "id": 402277372,
        "sender_full_name": "Jacob",
        "timestamp": 1700064297
    },
    {
        "content": "<p>A few examples of instead changing the type to match the calling syntax. Tried to pick more complex looking signitures from current roc code:</p>\n<p>Note, I left off parens around the output type given it is never ambiguous, but they could be added</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Dict</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"w\"> </span><span class=\"nf\">([Present v, Missing] -&gt; [Present v, Missing]) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"w\"> </span><span class=\"nx\">where</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"w\"> </span><span class=\"nx\">implements</span><span class=\"w\"> </span><span class=\"nx\">Hash</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nx\">Eq</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">write</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">Stream</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">TcpWriteErr</span><span class=\"w\"> </span><span class=\"nx\">StreamErr</span><span class=\"p\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">andMap</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">b</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">walkTryHelp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">state</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"w\"> </span><span class=\"nx\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">state</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">state</span><span class=\"w\"> </span><span class=\"nx\">err</span>\n</code></pre></div>",
        "id": 402278083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700064475
    },
    {
        "content": "<blockquote>\n<p>Could u just use a semicolon as the separator? Are the only conflicts because you want to use the same symbol for separation in lists?</p>\n</blockquote>\n<p>Yes, though I don't think many people would want different separates that they have to remember based on context.</p>",
        "id": 402278327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700064529
    },
    {
        "content": "<p>I do like the way lean has type annotations, very clean, but can get long sometimes. The parenthesis do make things very clear and organized though.</p>",
        "id": 402278420,
        "sender_full_name": "Jacob",
        "timestamp": 1700064550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/syntax.3A.20whitespace.20vs.20comma.20for.20items/near/402278327\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could u just use a semicolon as the separator? Are the only conflicts because you want to use the same symbol for separation in lists?</p>\n</blockquote>\n<p>Yes, though I don't think many people would want different separates that they have to remember based on context.</p>\n</blockquote>\n<p>Yeah thats kinda annoying if all you're getting is that the call site has commas.</p>",
        "id": 402278879,
        "sender_full_name": "Jacob",
        "timestamp": 1700064696
    },
    {
        "content": "<p>Another way to use commas for function calls would be to use <code>f(x, y, z)</code> syntax, which would be more familiar to people coming from imperative languages. Is there a benefit unique to functional programming that causes what seems like every functional language (Elm, Haskell, Lean, Roc, etc) to use <code>f x y z</code> syntax instead?</p>",
        "id": 402320021,
        "sender_full_name": "timotree",
        "timestamp": 1700079312
    },
    {
        "content": "<p>I suppose the juxtaposition syntax makes a lot of sense in curried languages. But Roc isn't curried</p>",
        "id": 402320325,
        "sender_full_name": "timotree",
        "timestamp": 1700079470
    },
    {
        "content": "<p>yeah Roc uses it because of its practical benefits (in terms of avoiding parentheses in DSLs like the above example), not because of consistency or conceptual elegance <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 402321351,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700079881
    },
    {
        "content": "<p>is unparenthesized <code>if</code> or <code>when</code> in the middle of a list a real win though? I'd be a bit concerned about readability in such a case, and in more recent years, I've tended to favor breaking down complex expressions into simpler ones by using intermediate variables.</p>\n<p>Yes, naming things is hard, but also, to some extent, if it's hard to give a reasonable name, then it might not be the best way to achieve what you're trying to build.</p>\n<p>I have found commas to be a poor visual delimiter for use in complex expressions... It's great for a list of numbers or a list of strings, or even a list of lists, but strings and lists have their own, stronger delimiters. In terms of function calls, more than a few times I've been confused about which tokens are arguments to a call, and which are elements in the list.</p>",
        "id": 405007973,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1701315396
    },
    {
        "content": "<p>These are certainly hard tradeoffs to make. I do rather appreciate the style choice of <code>(f x)</code> over <code>f(x)</code> when parens are needed to avoid ambiguity. I do greatly prefer writing <code>f : (List x) y</code> instead of <code>f : List x, y</code> because the former is more approachable and less visually ambiguous, and because non-trivial parameters will require parens anyways.</p>",
        "id": 405010248,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1701315965
    },
    {
        "content": "<p>Side note: I'd certainly be happy writing <code>f : (List x), y</code> but I'd probably parenthesize all trailing params if any of the preceding required it, just for balance and visual clarity, i.e. <code>f : (List x) (y)</code></p>",
        "id": 405012262,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1701316516
    },
    {
        "content": "<p>I think the upside is much more for function calls than <code>if</code> or <code>when</code>, e.g.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/syntax.3A.20whitespace.20vs.20comma.20for.20items/near/402216037\">said</a>:</p>\n<blockquote>\n<p>actually <a href=\"https://github.com/roc-lang/roc/blob/98df325d76b6b743c6b01f399bbbeaaf0d8108fa/www/wip_new_website/main.roc#L107\">https://github.com/roc-lang/roc/blob/98df325d76b6b743c6b01f399bbbeaaf0d8108fa/www/wip_new_website/main.roc#L107</a> is a better example of the downside, would need to have parens across multiple lines if <code>homeLink</code> was moved ahead one spot:</p>\n</blockquote>",
        "id": 405139703,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701357550
    },
    {
        "content": "<p>2 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/compiling.20for.20wasm\">#beginners &gt; compiling for wasm</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 405159894,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701363457
    },
    {
        "content": "<p>hmmm. yeah, that's true. Some DSLs seem to benefit from this a lot, and for others, it may be more neutral either way</p>",
        "id": 405243820,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1701393758
    }
]