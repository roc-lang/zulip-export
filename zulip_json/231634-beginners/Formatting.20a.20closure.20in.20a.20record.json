[
    {
        "content": "<p>How should we format a closure in a record?</p>\n<p>Here is a concrete example that I wrote recently that breaks the formatter:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">key</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"data\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">value</span><span class=\"o\">:</span>\n<span class=\"w\">        </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">dict</span><span class=\"w\"> </span><span class=\"nx\">data</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">walk</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">str</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">Thing</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">tag</span><span class=\"w\"> </span><span class=\"s\">\"Thing\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">i32</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"nx\">Stuff</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">tag</span><span class=\"w\"> </span><span class=\"s\">\"Stuff\"</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">        </span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Note, it can also be written without the backpassing and maybe that is clearer, but it still will break the formatter:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">key</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"data\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">value</span><span class=\"o\">:</span>\n<span class=\"w\">        </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">dict</span><span class=\"w\"> </span><span class=\"nx\">data</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">walk</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">                </span><span class=\"nx\">Thing</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">tag</span><span class=\"w\"> </span><span class=\"s\">\"Thing\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">i32</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"nx\">Stuff</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">tag</span><span class=\"w\"> </span><span class=\"s\">\"Stuff\"</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">        </span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Thoughts on:</p>\n<ol>\n<li>What should be considered valid formatting here?</li>\n<li>How should <code>roc format</code> handle the code examples above?</li>\n</ol>",
        "id": 368647069,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687455596
    },
    {
        "content": "<p>Is it the \"free\" comma that is causing trouble?</p>",
        "id": 368649763,
        "sender_full_name": "Anton",
        "timestamp": 1687456178
    },
    {
        "content": "<p>Formatter fails with or without the comma.</p>",
        "id": 368650400,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687456324
    },
    {
        "content": "<p><code>Parse error was: Expr(Closure(Body(List(End(@948), @714), @689), @430), @120)</code></p>",
        "id": 368650820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687456421
    },
    {
        "content": "<p>For (1.) I think both snippets should be valid (parseable)<br>\nFor (2.) I think the comma should be put here: <code>\"Stuff\" [],</code></p>",
        "id": 368653423,
        "sender_full_name": "Anton",
        "timestamp": 1687457018
    },
    {
        "content": "<p>part of me thinks we should make the comma optional and format without it, since it's syntactically unambiguous anyway</p>",
        "id": 368658717,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687458296
    },
    {
        "content": "<p>e.g. if you put another field anywhere after that last line, like <code>foo:</code>, it couldn't possibly mean anything other than that you're ready to define the next record field</p>",
        "id": 368658849,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687458328
    },
    {
        "content": "<p>however, that doesn't help if what you want to do next is punning, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">key</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"data\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">value</span><span class=\"kt\">:</span>\n<span class=\"w\">        </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"w\"> </span><span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Thing</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"s\">\"Thing\"</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"kt\">Stuff</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"s\">\"Stuff\"</span><span class=\"w\"> </span><span class=\"kt\">[]</span>\n<span class=\"w\">        </span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 368658923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687458353
    },
    {
        "content": "<p>without the comma, or indentation-awareness, that wouldn't work</p>",
        "id": 368659020,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687458368
    }
]