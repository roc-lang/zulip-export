[
    {
        "content": "<p>I think I'm doing something wrong while constructing an opaque type.</p>\n<p>The type definition:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">JsonValue</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">JsonNull</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">JsonBool</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">JsonNum</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">JsonStr</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">JsonArray</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">JsonValue</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">JsonDict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Pair</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">JsonValue</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have a <code>JsonArray (List JsonValue)</code> and I want to wrap it so it becomes a <code>JsonValue</code> itself.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">──</span><span class=\"w\"> </span><span class=\"kt\">TYPE</span><span class=\"w\"> </span><span class=\"kt\">MISMATCH</span><span class=\"w\"> </span><span class=\"err\">────────────────────────────────</span><span class=\"w\"> </span><span class=\"nv\">examples</span><span class=\"nf\">/</span><span class=\"nv\">json</span><span class=\"nf\">/</span><span class=\"kt\">ParserJson</span><span class=\"nf\">.</span><span class=\"nv\">roc</span><span class=\"w\"> </span><span class=\"err\">─</span><span class=\"w\"></span>\n\n<span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"nv\">nd</span><span class=\"w\"> </span><span class=\"nv\">argument</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">what</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">expect</span><span class=\"nf\">:</span><span class=\"w\"></span>\n\n<span class=\"mi\">66</span><span class=\"err\">│</span><span class=\"w\">      </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">res</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">JsonValue</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"nf\">^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n\n<span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">argument</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nv\">anonymous</span><span class=\"w\"> </span><span class=\"nv\">function</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">JsonArray</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">JsonBool</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">JsonDict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Pair</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">JsonNull</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">JsonNum</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">JsonStr</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">JsonValue</span><span class=\"w\"></span>\n\n<span class=\"kt\">But</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">needs</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"nv\">nd</span><span class=\"w\"> </span><span class=\"nv\">argument</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"nf\">:</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">JsonArray</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">JsonValue</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">JsonValue</span><span class=\"w\"></span>\n\n<span class=\"err\">────────────────────────────────────────────────────────────────────────────────</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 288956235,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657294474
    },
    {
        "content": "<p>what does the rest of your program look like?</p>",
        "id": 288959685,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657296070
    },
    {
        "content": "<p>In particular what is <code>map</code> and what are you feeding into it before the pipeline operator?</p>",
        "id": 288959855,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657296145
    },
    {
        "content": "<p>What map is: A function with the signature <code>map : Parser input a, (a -&gt; b) -&gt; Parser input b</code><br>\n(source: <a href=\"https://github.com/rtfeldman/roc/blob/f4c0925b21afcb46fd6bd0315b19ee97d942a8f8/examples/json/ParserCore.roc#L185-L190\">https://github.com/rtfeldman/roc/blob/f4c0925b21afcb46fd6bd0315b19ee97d942a8f8/examples/json/ParserCore.roc#L185-L190</a> )</p>\n<p>What I am feeding (types given at every step as I tried very hard to find out why the compiler was unhappy) <a href=\"https://github.com/rtfeldman/roc/blob/f4c0925b21afcb46fd6bd0315b19ee97d942a8f8/examples/json/ParserJson.roc#L52-L66\">https://github.com/rtfeldman/roc/blob/f4c0925b21afcb46fd6bd0315b19ee97d942a8f8/examples/json/ParserJson.roc#L52-L66</a></p>",
        "id": 288971075,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657301978
    },
    {
        "content": "<p>okay I have a patch for this. I'll send it to you in a couple hours.</p>",
        "id": 288975081,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657304011
    },
    {
        "content": "<p>Thanks a lot for your hard work! <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 288989525,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657312225
    }
]