[
    {
        "content": "<p>Are there some plans to evaluate inputs against functions to determine whether an error path could occur or not and eventually determine that there's no error in some cases?</p>\n<p>Sample:</p>\n<div class=\"codehilite\"><pre><span></span><code> sample = List.min([1, 2, 3])?\n</code></pre></div>\n<p>Here you need to handle <code>ListWasEmpty</code> at some point, even though this list should likely never be empty. That's a bit contrived but as a sample one could take something such as <code>calculate_smallest_surface_area_of_rectangle</code> that is called within a function that always needs to receive a length, width and height.</p>",
        "id": 528521129,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1752403380
    },
    {
        "content": "<p>We have plans for something like this to be evaluated at compile time and be reduced to a constant. In this case if we had something like <code>List.min : List(Num(size)) -&gt; Result(Num(size), [ListWasEmpty])</code>, this would probably just be equivalent to a constant <code>Ok(1)</code> in memory.</p>",
        "id": 528521424,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752403696
    },
    {
        "content": "<p>That doesn't really answer your question which I think is aimed at runtime and specifically an optimisation to elide bounds checking or something like that?</p>",
        "id": 528521464,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752403754
    },
    {
        "content": "<p>Actually was looking more into it from design time / editor perspective in the sense of knowing the right things to take care of and avoiding noise on things the might never happen (well never say never <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>).</p>",
        "id": 528521528,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1752403843
    },
    {
        "content": "<p>Ah, make impossible things impossible!</p>",
        "id": 528521576,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752403895
    },
    {
        "content": "<p>You can use a Tuple or Record if you have a compile time fixed size. </p>\n<p>Or wrap a list with some helpers <code>NonEmptyList(a) := List(a)</code> etc</p>",
        "id": 528521615,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752403940
    },
    {
        "content": "<p>Here is a real world example of how to use NonEmptyList: <a href=\"https://github.com/roc-lang/basic-cli/blob/main/examples/terminal-app-snake.roc\">https://github.com/roc-lang/basic-cli/blob/main/examples/terminal-app-snake.roc</a></p>",
        "id": 528527644,
        "sender_full_name": "Anton",
        "timestamp": 1752410746
    },
    {
        "content": "<p>A general solution to these type of issues is dependent types but that would also add significant complexity to the compiler.</p>",
        "id": 528527690,
        "sender_full_name": "Anton",
        "timestamp": 1752410806
    }
]