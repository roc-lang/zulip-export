[
    {
        "content": "<p>This should work right?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">list</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nf\">list</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Effect</span><span class=\"o\">.</span><span class=\"n\">args</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Effect</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"kt\">Ok</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">InternalTask</span><span class=\"o\">.</span><span class=\"n\">fromEffect</span>\n\n<span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">argList</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in Arg.roc ────────────────────────────────────────────────────\n\nThis 2nd argument to await has an unexpected type:\n\n15│&gt;      Task.await list \\argList -&gt;\n16│&gt;          Task.err (Exit 0 &quot;&quot;)\n\nThe argument is an anonymous function of type:\n\n    List Str -&gt; Task * [Exit (Num *) Str]\n\nBut await needs its 2nd argument to be:\n\n    List Str -&gt; Task * *\n</code></pre></div>",
        "id": 448666888,
        "sender_full_name": "Anton",
        "timestamp": 1719942364
    },
    {
        "content": "<p>I don't understand how <a href=\"https://github.com/roc-lang/examples/blob/bca609aad7279e4df04f0643abd72a830504cb88/examples/CommandLineArgs/main.roc#L36\">this function</a> can work but the code I posted does not.</p>",
        "id": 448667172,
        "sender_full_name": "Anton",
        "timestamp": 1719942467
    },
    {
        "content": "<p>No, I don't think it should work based on our current type system<br>\n......<br>\nBut man, I hate <code>*</code> a lot of the time.</p>",
        "id": 448684351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719947658
    },
    {
        "content": "<p>I mean I love the clarity of it, but I hate how untuitive it can make bugs</p>",
        "id": 448684422,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719947681
    },
    {
        "content": "<p><code>Task.await: Task a b, (a -&gt; Task c b) -&gt; Task c b</code></p>",
        "id": 448684714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719947769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Task a b ~ Task (List Str) *\na = List Str\nb = * (note, this is the not in an output position, it is closed and can not merge with anything)\n\na -&gt; Task c b ~ \\argList -&gt; Task.err (Exit 0 &quot;&quot;)\nc = *\nb = [Exit (Num *) Str]\n\n# we have just declared `b` as two different types...bug\n</code></pre></div>",
        "id": 448685305,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719947928
    },
    {
        "content": "<p>I honestly think that <code>*</code> should be restricted to only being allowed to be used in function signatures.</p>",
        "id": 448685413,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719947968
    },
    {
        "content": "<p>Then <code>list</code> would be:<br>\n<code>list : Task (List Str) []</code>.<br>\nThe error becomes more clear. And you would probably change the type to:<br>\n<code>list : Task (List Str) _</code><br>\nOr more accurately:<br>\n<code>list : Task (List Str) []*</code></p>",
        "id": 448685788,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719948074
    },
    {
        "content": "<blockquote>\n<p>I don't understand how <a href=\"https://github.com/roc-lang/examples/blob/bca609aad7279e4df04f0643abd72a830504cb88/examples/CommandLineArgs/main.roc#L36\">this function</a> can work but the code I posted does not.</p>\n</blockquote>\n<p>I think it works due to a compiler bug. I bet that we are interpreting <code>[]</code> as an open tag instead of a closed tag.</p>",
        "id": 448686424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719948270
    },
    {
        "content": "<p><code>Arg.list</code> should be <code>list: Task (List Str) []*</code></p>",
        "id": 448686497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719948301
    },
    {
        "content": "<p>Thanks for the explanation <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n<p>With <code>[]*</code> I still can't get it to work, I've further simplified my code:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Stdout</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Task</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Task</span><span class=\"p\">]</span>\n\n<span class=\"nf\">okStr</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"o\">*</span>\n<span class=\"nf\">okStr</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"s\">\"aa\"</span>\n\n<span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">okStr</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">MyErr</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span>\n</code></pre></div>\n<p>This is the error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\n\nThis 2nd argument to `await` has an unexpected type:\n\n11│&gt;      Task.await okStr \\str -&gt;\n12│&gt;          Task.err (MyErr str)\n\nThe argument is an anonymous function of type:\n\n    Str -&gt; Task * [MyErr Str]\n\nBut `await` needs its 2nd argument to be:\n\n    Str -&gt; Task * []*\n\nTip: Looks like a closed tag union does not have the `MyErr`\ntag.\n\nTip: Closed tag unions can&#39;t grow, because that might change\nthe size in memory. Can you use an open tag union?\n</code></pre></div>\n<p>From the error message it seems like the compiler just erroneously detected a closed tag union?</p>\n<p>I can use <code>okStr : Task Str []_</code>, but type inference makes this <code>okStr : Task Str [MyErr Str]</code>. This would require everyone who uses <code>okStr</code> to handle the <code>MyErr Str</code> error which can not actually happen.</p>",
        "id": 448838917,
        "sender_full_name": "Anton",
        "timestamp": 1720010659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/error.20unification/near/448838917\">said</a>:</p>\n<blockquote>\n<p>I can use <code>okStr : Task Str []_</code>, but type inference makes this <code>okStr : Task Str [MyErr Str]</code>. This would require everyone who uses <code>okStr</code> to handle the <code>MyErr Str</code> error which can not actually happen.</p>\n</blockquote>\n<p>If you write the same thing using Results, which are just an alias instead of an opaque type, can you still not use []*?</p>",
        "id": 448841636,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720011305
    },
    {
        "content": "<p>I've been running into this issue with Tasks for basic-cli, the current <del>solution</del> hack is to do </p>\n<div class=\"codehilite\"><pre><span></span><code>runTask : Task ok {}\n\nrunTask |&gt; Task.result! |&gt; Result.withDefault foo\n</code></pre></div>",
        "id": 448842345,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720011496
    },
    {
        "content": "<p>It <em>feels</em> like opaque types prevent full type constraining from happening, in that Task doesn't actually look like a single tag Union to the compiler, though I'm not sure on this.</p>",
        "id": 448842673,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720011601
    },
    {
        "content": "<p>is this related to let polymorphism? What happens if you do <code>okStr : {} -&gt; Task Str []*</code> instead?</p>",
        "id": 448847960,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720012823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/error.20unification/near/448847960\">said</a>:</p>\n<blockquote>\n<p>is this related to let polymorphism? What happens if you do <code>okStr : {} -&gt; Task Str []*</code> instead?</p>\n</blockquote>\n<p>If I change the <code>Arg.list</code> signature to <code>list : U64 -&gt; Task (List Str) []*</code> I still get an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ../basic-cli/examples/../platform/Arg.roc ──────────────────\n\nSomething is off with the body of the parse definition:\n\n83│  parse : CliParser state -&gt; Task state [Exit I32 Str, StdoutErr Stdout.Err]\n84│  parse = \\parser -&gt;\n85│      # Stdout.line! &quot;Parsing args...&quot;\n86│      arguments = list! 0\n                     ^^^^^^^\n\nThis await call produces:\n\n    Task state []*\n\nBut the type annotation on parse says it should be:\n\n    Task state [\n        Exit I32 Str,\n        StdoutErr Stdout.Err,\n    ]\n\nTip: Looks like a closed tag union does not have the StdoutErr and\nExit tags.\n\nTip: Closed tag unions can&#39;t grow, because that might change the size\nin memory. Can you use an open tag union?\n</code></pre></div>",
        "id": 448857381,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720015067
    },
    {
        "content": "<blockquote>\n<p>If you write the same thing using Results, which are just an alias instead of an opaque type, can you still not use []*?</p>\n</blockquote>\n<p>Yeah, I get the same thing using Result</p>",
        "id": 448864312,
        "sender_full_name": "Anton",
        "timestamp": 1720016885
    },
    {
        "content": "<blockquote>\n<p>What happens if you do <code>okStr : {} -&gt; Task Str []*</code> instead?</p>\n</blockquote>\n<p>That works!</p>",
        "id": 448868904,
        "sender_full_name": "Anton",
        "timestamp": 1720017628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/231634-beginners/topic/error.20unification/near/448857381\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/error.20unification/near/448847960\">said</a>:</p>\n<blockquote>\n<p>is this related to let polymorphism? What happens if you do <code>okStr : {} -&gt; Task Str []*</code> instead?</p>\n</blockquote>\n<p>If I change the <code>Arg.list</code> signature to <code>list : U64 -&gt; Task (List Str) []*</code> I still get an error:</p>\n</blockquote>\n<p>this one surprises me - <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> any ideas why it would be saying those don't unify?</p>",
        "id": 448888160,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720021953
    },
    {
        "content": "<p>I'm not sure, it's probably worth expanding out the types under the <code>Task</code> alias</p>",
        "id": 448913384,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720028672
    },
    {
        "content": "<p>Related issue I think:</p>\n<p>The effect:</p>\n<div class=\"codehilite\"><pre><span></span><code>ffiLoad : Str  -&gt; Effect (Result U64 Str)\nffiClose : U64 -&gt; Effect (Result {} *)\nffiCall : U64, Str -&gt; Effect (Result {} *)\n</code></pre></div>\n<p>With <code>call : Lib, Str -&gt; Task {} *</code>. Which should work based on <code>ffiClose</code> working and being <code>close : Lib -&gt; Task {} *</code>: </p>\n<div class=\"codehilite\"><pre><span></span><code>Something is off with the body of the call definition:\n\n46│   call : Lib, Str -&gt; Task {} *\n47│   call = \\@Lib lib, fnName -&gt;\n48│&gt;      Effect.ffiCall lib fnName\n49│&gt;      |&gt; InternalTask.fromEffect\n\nThis InternalTask.fromEffect call produces:\n\n    InternalTask.Task {} []\n\nBut the type annotation on call says it should be:\n\n    Task.Task {} *\n</code></pre></div>\n<p>Changing to <code>Task {} []</code> cause that seems to be what the error is telling me to do.</p>\n<div class=\"codehilite\"><pre><span></span><code>Something is off with the body of the call definition:\n\n46│   call : Lib, Str -&gt; Task {} []\n47│   call = \\@Lib lib, fnName -&gt;\n48│&gt;      Effect.ffiCall lib fnName\n49│&gt;      |&gt; InternalTask.fromEffect\n\nThis InternalTask.fromEffect call produces:\n\n    InternalTask.Task {} err\n\nBut the type annotation on call says it should be:\n\n    Task.Task {} []\n</code></pre></div>",
        "id": 448974096,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720052641
    },
    {
        "content": "<p>Oh, I think I just realized something!</p>\n<p>So if you dump the ir of the <code>examples/tcp-client.roc</code>, the call to <code>roc_fx_tcpClose</code> is incorrect. We can not have open tags in effects. They mean that the output has a dynamic layout that the platform is unaware of.</p>\n<p>This is the effect: <code>tcpClose : U64 -&gt; Effect (Result {} *)</code><br>\nThis is what rust expects: <code>(u64) -&gt; RocResult&lt;(), ()&gt;</code><br>\nThis is the signiture that llvm is generating: <code>declare void @roc_fx_tcpClose(ptr sret({ [0 x i64], [6 x i64], i8, [7 x i8] }), i64)</code><br>\nSo the first arg is the result type and the second arg is the actual function input.<br>\nThat means, it expects a result type of <code>{ [0 x i64], [6 x i64], i8, [7 x i8] }</code><br>\n<code>i8, [7 x i8]</code> at the end is a tag for Ok/Err.<br>\n<code>[0 x i64]</code> contains no data, so we don't care about it.<br>\n<code>[6 x i64]</code> is 48 bytes of unaccounted for data.<br>\nWhat does that data represent? I'm pretty sure it's the union of all of the error types that build up in the task chain. In this case, the largest potential payload is <code>TcpPerformErr (TcpReadErr (Unrecognized Str))</code> which is a Str (3 x i64) wrapped in a tag (i8, [7 x i8] aka 1xi64), wrapped in a tag (1xi64), wrapped in a tag (1xi64). For a total of 6 x i64.</p>\n<p>This means that <code>roc_fx_tcpClose</code> is returning a different type from rust than llvm is interpreting it as. There definitely needs to be a mapping generated here.</p>\n<p>As a note, at some point we might want an optimization to collapse those tags together or avoid padding in some way.</p>",
        "id": 448982717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720057962
    },
    {
        "content": "<p>whoa, great find!</p>",
        "id": 448983903,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720058642
    },
    {
        "content": "<p>Nice, so we should replace the wildcards in our effects/platformTasks with the unit type I guess.</p>",
        "id": 448987183,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720060897
    },
    {
        "content": "<p>So have a fixed closed tag provided to the host (e.g. effect/platform task), and to the app we can still have an open tag.</p>",
        "id": 448987463,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720061115
    },
    {
        "content": "<p>Yeah, this is probably something that needs to be codified as a restriction in the compiler</p>",
        "id": 448987591,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720061190
    },
    {
        "content": "<p>oh I think we definitely want to support it</p>",
        "id": 449073449,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720095275
    },
    {
        "content": "<p>I think we need to fix the code gen <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 449073475,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720095285
    },
    {
        "content": "<p>How would we support it? I think that we might need to build a restricted type in rust and then have roc explicitly map the error/expand the type.</p>",
        "id": 449088346,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720099774
    },
    {
        "content": "<p>Like I dont think rust can construct the error tag in general here. Cause it only knows the local errors, not the full set of errors that the app unified with.</p>",
        "id": 449088514,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720099822
    },
    {
        "content": "<p>oh sorry, is this in the platform?</p>",
        "id": 449089251,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720100059
    },
    {
        "content": "<p>yeah the platform shouldn’t be able to tell the host it has an unbound variable</p>",
        "id": 449089304,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720100081
    },
    {
        "content": "<p>The platform specifies an effect like:<br>\n<code>Effect (Result {} *)</code></p>\n<p>Roc is generate code that is expecting it to return a <code>Result {} UnifiedErrorTag</code></p>",
        "id": 449089945,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720100276
    },
    {
        "content": "<p>ahh yeah, I see what you mean avoiding restricting it now - yeah, that should be a compile-time error</p>",
        "id": 449105902,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720104810
    },
    {
        "content": "<p>I'm making the suggested changes to <code>tcpClose</code>. Given that we always return ok here, should we not be returning <code>{}</code> instead, just like <code>roc_fx_ttyModeCanonical</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_tcpClose</span><span class=\"p\">(</span><span class=\"n\">stream_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">TCP_STREAMS</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">tcp_streams_local</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">tcp_streams_local</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">stream_id</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 449304004,
        "sender_full_name": "Anton",
        "timestamp": 1720183301
    },
    {
        "content": "<p>Sidenote: For those messing with this general error unification problem, you may hit a case where you can not remove the <code>*</code> in <code>[]*</code> even though it is reported as unnecessary. I made <a href=\"https://github.com/roc-lang/roc/issues/6873\">#6873</a> for that issue.</p>",
        "id": 449324565,
        "sender_full_name": "Anton",
        "timestamp": 1720189544
    }
]