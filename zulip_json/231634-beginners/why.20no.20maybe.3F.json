[
    {
        "content": "<p>Reading through \"roc for elm programmers\", and I'm somewhat surprised that there's no \"Maybe\" type. Requiring developers to make their own custom maybe-ish types (e.g. the [Null | NonNull a] in the example) seems like it would substantially get in the way of code re-use, and making \"generic functions\" that are usable across domains. Is that on purpose?<br>\n(having no tuples makes sense, given that it's so low-friction to create ~anonymous records)</p>",
        "id": 233916314,
        "sender_full_name": "Jared",
        "timestamp": 1618020096
    },
    {
        "content": "<p>definitely on purpose!</p>",
        "id": 233916639,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1618020362
    },
    {
        "content": "<p>my view is essentially that:</p>\n<ol>\n<li><code>Maybe</code> in return values is overall worse than <code>Result</code> with an error type that has no extra info. Much nicer to have all those operations collapsed into using <code>Result</code> consistently imo.</li>\n<li><code>Maybe</code> as a way to have functions take \"optional arguments\" is something I think should be done very rarely, and when it is done, there's no benefit to having helper functions (e.g. <code>Maybe.map</code>) because all you're doing is constructing it right when you pass it to the function (e.g. in Rust, <code>foo(Some(bar))</code>), so since Roc lets you construct tags on the fly, <code>Maybe</code> wouldn't have a significant advantage there over an ad-hoc tag union.</li>\n<li><code>Maybe</code> is very often misused for data modeling. The reason is that a lot of people learn languages with <code>null</code> first, and then they learn \"this language doesn't have <code>null</code>, but it does have <code>Maybe</code>, so whenever I would use <code>null</code> I'll just swap in <code>Maybe</code>,\" which leads to data model designs that have states which could have easily been ruled out by using a custom tag union instead. <code>Result</code> is never used in data modeling and doesn't have this problem.</li>\n</ol>",
        "id": 233917114,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1618020753
    },
    {
        "content": "<p>so my hope in omitting <code>Maybe</code> from the standard library is that it will:</p>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> encourage more functions to consistently return <code>Result</code> when they might not always have a value to return<br>\n<span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> mean functions with optional arguments use more self-documenting tag unions than <code>Maybe</code><br>\n<span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> lead to better data modeling due to not importing <code>null</code>-based habits in the form of \"<code>s/null/Maybe</code> in data models</p>",
        "id": 233917234,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1618020866
    }
]