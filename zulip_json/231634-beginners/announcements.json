[
    {
        "content": "<p>For macos apple silicon devices:<br>\nNightlies created from tomorrow on will require you to have llvm installed using <code>brew install llvm@13</code>. This is still required if you previously installed llvm 13 through <code>brew install llvm</code>.</p>",
        "id": 299568756,
        "sender_full_name": "Anton",
        "timestamp": 1663595458
    },
    {
        "content": "<p>This will make install instructions simpler in the future.</p>",
        "id": 299569338,
        "sender_full_name": "Anton",
        "timestamp": 1663595655
    },
    {
        "content": "<p>huh, llvm doesn't get bundled in the binary? <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span></p>",
        "id": 299570243,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663595985
    },
    {
        "content": "<p>I'll make an issue to look into static linking</p>",
        "id": 299572304,
        "sender_full_name": "Anton",
        "timestamp": 1663596727
    },
    {
        "content": "<p>awesome, thank you!</p>",
        "id": 299573088,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663597012
    },
    {
        "content": "<p>Specifically we are missing <code>llvm/lib/libc++abi.1.dylib</code> when executing the c hello world. This may be the only \"part of llvm\" that is dyn linked. I'm also not sure what code relies on libc++abi.1</p>",
        "id": 299573214,
        "sender_full_name": "Anton",
        "timestamp": 1663597067
    },
    {
        "content": "<p>When does that error message pop up? Is this just due to us tryin to build a c host with. clang and libc++, or is this a roc app building issue?</p>",
        "id": 299579132,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663599066
    },
    {
        "content": "<p>I don't know yet, this was an error encountered by <span class=\"user-mention\" data-user-id=\"507458\">@doubledup</span>. Probably the easiest way to reproduce this would be to temporarily move <code>libc++abi.1.dylib</code> from <code>/opt/homebrew/opt/llvm/lib</code> on an apple silicon device.</p>",
        "id": 299581172,
        "sender_full_name": "Anton",
        "timestamp": 1663599723
    },
    {
        "content": "<p>I wonder if that happens on all hosts, or only on some</p>",
        "id": 299582851,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663600287
    },
    {
        "content": "<p><span aria-label=\"magnifying glass\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"magnifying glass\">:magnifying_glass:</span> FYI <span aria-label=\"magnifying glass\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"magnifying glass\">:magnifying_glass:</span> <a href=\"#narrow/stream/304641-ideas/topic/opaque.20bools\">Opaque booleans</a> have <a href=\"https://github.com/roc-lang/roc/pulls?q=is%3Apr+is%3Aclosed\">landed</a>! If you have programs using <code>True</code> or <code>False</code> for booleans, the only changes you should need to make are:</p>\n<ul>\n<li>change <code>True</code> to <code>Bool.true</code> and <code>False</code> to <code>Bool.false</code></li>\n</ul>\n<p>Thanks to <span class=\"user-mention\" data-user-id=\"497765\">@Kilian Vounckx</span> for landing this! And let us know if you have any trouble with the new booleans.</p>",
        "id": 299991859,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663777102
    },
    {
        "content": "<p>looks like the repl hasn't been updated yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p><a href=\"/user_uploads/22008/eJ5YWGfGCkCjfA8_8HBRoX1G/Screen-Shot-2022-09-21-at-12.25.45-PM.png\">Screen-Shot-2022-09-21-at-12.25.45-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/eJ5YWGfGCkCjfA8_8HBRoX1G/Screen-Shot-2022-09-21-at-12.25.45-PM.png\" title=\"Screen-Shot-2022-09-21-at-12.25.45-PM.png\"><img src=\"/user_uploads/22008/eJ5YWGfGCkCjfA8_8HBRoX1G/Screen-Shot-2022-09-21-at-12.25.45-PM.png\"></a></div><p>I bet that would be a nice first issue if anyone wants to contribute it!</p>",
        "id": 299993283,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663777558
    },
    {
        "content": "<p>FYI, a restriction in what kinds of values are allowed to be polymorphic has been added to Roc, as described in this thread: <a href=\"#narrow/stream/304641-ideas/topic/Let-generalization.20-.20let's.20not.3F\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Let-generalization.20-.20let's.20not.3F</a></p>\n<p>TL;DR only the following assignments can now be used polymorphically:</p>\n<ul>\n<li>Number literals (eg <code>pi = 3.14</code> can be used as a <code>Dec</code> or <code>F64</code>)</li>\n<li>Function literals (eg <code>id = \\x -&gt; x</code> can be used as a <code>Str -&gt; Str</code> or <code>Nat -&gt; Nat</code>)</li>\n</ul>\n<p>If you have an assignment that you'd like to use polymorphically but is not a function or number literal, you can always transform it to a thunk that can be then used polymorphically. For example,</p>\n<div class=\"codehilite\"><pre><span></span><code>emptyState = { list : [] }\n\nemptyStrState : { list : List Str }\nemptyStrState = emptyState\n\nemptyNatState : { list : List Nat }\nemptyNatState = emptyState # ❌ type error today!\n</code></pre></div>\n<p>can be written as </p>\n<div class=\"codehilite\"><pre><span></span><code>emptyState = \\{} -&gt; { list : [] }\n\nemptyStrState : { list : List Str }\nemptyStrState = emptyState {}\n\nemptyNatState : { list : List Nat }\nemptyNatState = emptyState {} # ✅ okay!\n</code></pre></div>\n<p>Builtin API changes:</p>\n<ul>\n<li><code>Dict.empty</code> is now a thunk, so you'll need to call <code>Dict.empty {}</code></li>\n<li><code>Set.empty</code> is now a thunk, so you'll need to call <code>Set.empty {}</code></li>\n</ul>",
        "id": 321912287,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1673984594
    },
    {
        "content": "<p>If you suspect you've run into a bug related to the above behavior, please file an issue or let me know.</p>\n<p>We are working on better error messages for the kind of type errors that happen in the first example presented above.</p>",
        "id": 321912481,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1673984674
    }
]