[
    {
        "content": "<p>Howdy!  I'm having some trouble getting tests to complete on <code>trunk (4990fb3)</code>.  I'm running with <code>earthly +test-all</code> with Docker v20.10.12 on Fedora and getting several tests failing with the message:</p>\n<div class=\"codehilite\"><pre><span></span><code>          +test-rust *failed* | valgrind stderr was: &quot;runtime: vex amd64-&gt;IR: unhandled instruction bytes: 0x62 0xF1 0x7C 0x48 0x28 0xD 0x2D 0x69 0x1 0x0\n          +test-rust *failed* | vex amd64-&gt;IR:   REX=0 REX.W=0 REX.R=0 REX.X=0 REX.B=0\n          +test-rust *failed* | vex amd64-&gt;IR:   VEX=0 VEX.L=0 VEX.nVVVV=0x0 ESC=NONE\n          +test-rust *failed* | vex amd64-&gt;IR:   PFX.66=0 PFX.F2=0 PFX.F3=0\n          +test-rust *failed* | ==12150== valgrind: Unrecognised instruction at address 0x10e809.\n          +test-rust *failed* | ==12150== Your program just tried to execute an instruction that Valgrind\n          +test-rust *failed* | ==12150== did not recognise.  There are two possible reasons for this.\n          +test-rust *failed* | ==12150== 1. Your program has a bug and erroneously jumped to a non-code\n          +test-rust *failed* | ==12150==    location.  If you are running Memcheck and you just saw a\n          +test-rust *failed* | ==12150==    warning about a bad jump, it&#39;s probably your program&#39;s fault.\n          +test-rust *failed* | ==12150== 2. The instruction is legitimate but Valgrind doesn&#39;t handle it,\n          +test-rust *failed* | ==12150==    i.e. it&#39;s Valgrind&#39;s fault.  If you think this is the case or\n          +test-rust *failed* | ==12150==    you are not sure, please let us know and we&#39;ll try to fix it.\n          +test-rust *failed* | ==12150== Either way, Valgrind will now raise a SIGILL signal which will\n          +test-rust *failed* | ==12150== probably kill your program.\n          +test-rust *failed* | &quot;&#39;, cli/tests/cli_run.rs:153:17\n          +test-rust *failed* | stack backtrace:\n          +test-rust *failed* |    0: rust_begin_unwind\n          +test-rust *failed* |              at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:517:5\n          +test-rust *failed* |    1: std::panicking::begin_panic_fmt\n          +test-rust *failed* |              at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:460:5\n          +test-rust *failed* |    2: cli_run::cli_run::check_output_with_stdin\n          +test-rust *failed* |    3: core::ops::function::FnOnce::call_once\n          +test-rust *failed* |    4: serial_test::serial_core\n          +test-rust *failed* |    5: core::ops::function::FnOnce::call_once\n          +test-rust *failed* |              at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/ops/function.rs:227:\n</code></pre></div>",
        "id": 272612336,
        "sender_full_name": "Emi",
        "timestamp": 1645386692
    },
    {
        "content": "<p>any tips on how to deal with this?</p>",
        "id": 272612347,
        "sender_full_name": "Emi",
        "timestamp": 1645386706
    },
    {
        "content": "<p>I think that most people don't actually run tests with earthly, that is mostly used for CI.</p>",
        "id": 272612497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645386865
    },
    {
        "content": "<p>As for the actually issue, what cpu/architecture are you running on?</p>",
        "id": 272612507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645386879
    },
    {
        "content": "<p>This is an intel x86_64 (11th Gen Intel(R) Core(TM) i3-1115G4)</p>",
        "id": 272612514,
        "sender_full_name": "Emi",
        "timestamp": 1645386895
    },
    {
        "content": "<p>also good to know!  is <code>cargo test</code> a better way to do it?</p>",
        "id": 272612528,
        "sender_full_name": "Emi",
        "timestamp": 1645386918
    },
    {
        "content": "<p>i had been running the earthly because that's what's in the CONTRIBUTING.md</p>",
        "id": 272612547,
        "sender_full_name": "Emi",
        "timestamp": 1645386957
    },
    {
        "content": "<p><code>cargo test</code> should be good</p>",
        "id": 272613082,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645387556
    },
    {
        "content": "<p>thanks!</p>",
        "id": 272613121,
        "sender_full_name": "Emi",
        "timestamp": 1645387575
    },
    {
        "content": "<p>I'm actually getting the same error with running tests outside of Docker?  Command is <code>cargo test cli_run</code></p>",
        "id": 272613951,
        "sender_full_name": "Emi",
        "timestamp": 1645388627
    },
    {
        "content": "<p>wait no slightly different</p>",
        "id": 272613999,
        "sender_full_name": "Emi",
        "timestamp": 1645388653
    },
    {
        "content": "<p>might be able to debug this one on my own, hold on</p>",
        "id": 272614007,
        "sender_full_name": "Emi",
        "timestamp": 1645388669
    },
    {
        "content": "<p>okay no, im out of my league here, sorry</p>",
        "id": 272614272,
        "sender_full_name": "Emi",
        "timestamp": 1645388958
    },
    {
        "content": "<p>just running the zig test (to minimize output), I get this error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- cli_run::hello_zig stdout ----\nthread &#39;cli_run::hello_zig&#39; panicked at &#39;`valgrind` exited with no exit code. valgrind stdout was: &quot;&quot;\n\nvalgrind stderr was: &quot;vex amd64-&gt;IR: unhandled instruction bytes: 0x62 0xF1 0xFE 0x48 0x6F 0x5 0xD6 0xDC 0x4 0x0\nvex amd64-&gt;IR:   REX=0 REX.W=0 REX.R=0 REX.X=0 REX.B=0\nvex amd64-&gt;IR:   VEX=0 VEX.L=0 VEX.nVVVV=0x0 ESC=NONE\nvex amd64-&gt;IR:   PFX.66=0 PFX.F2=0 PFX.F3=0\n==106615== valgrind: Unrecognised instruction at address 0x114c88.\n==106615== Your program just tried to execute an instruction that Valgrind\n==106615== did not recognise.  There are two possible reasons for this.\n==106615== 1. Your program has a bug and erroneously jumped to a non-code\n==106615==    location.  If you are running Memcheck and you just saw a\n==106615==    warning about a bad jump, it&#39;s probably your program&#39;s fault.\n==106615== 2. The instruction is legitimate but Valgrind doesn&#39;t handle it,\n==106615==    i.e. it&#39;s Valgrind&#39;s fault.  If you think this is the case or\n==106615==    you are not sure, please let us know and we&#39;ll try to fix it.\n==106615== Either way, Valgrind will now raise a SIGILL signal which will\n==106615== probably kill your program.\n&quot;&#39;, cli/tests/cli_run.rs:153:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 272614291,
        "sender_full_name": "Emi",
        "timestamp": 1645388983
    },
    {
        "content": "<p>the binaries produced seem to run find on their own<br>\n(when i run the <code>hello-world</code> binary, i get the expected output)</p>\n<div class=\"codehilite\"><pre><span></span><code>â•°â”€$ cargo run examples/hello-zig/Hello.roc                                                                                                                                               â†µ 101\n    Finished dev [unoptimized + debuginfo] target(s) in 0.14s\n     Running `target/debug/roc examples/hello-zig/Hello.roc`\nðŸ”¨ Rebuilding host... Done!\nHello, World!\nruntime: 0.020ms\n</code></pre></div>",
        "id": 272614372,
        "sender_full_name": "Emi",
        "timestamp": 1645389043
    },
    {
        "content": "<p>but running it with valgrind produces this output</p>\n<div class=\"codehilite\"><pre><span></span><code>==107064== Memcheck, a memory error detector\n==107064== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==107064== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\n==107064== Command: examples/hello-zig/hello-world\n==107064==\nvex amd64-&gt;IR: unhandled instruction bytes: 0x62 0xF1 0xFE 0x48 0x6F 0x5 0xD6 0xDC 0x4 0x0\nvex amd64-&gt;IR:   REX=0 REX.W=0 REX.R=0 REX.X=0 REX.B=0\nvex amd64-&gt;IR:   VEX=0 VEX.L=0 VEX.nVVVV=0x0 ESC=NONE\nvex amd64-&gt;IR:   PFX.66=0 PFX.F2=0 PFX.F3=0\n==107064== valgrind: Unrecognised instruction at address 0x114c88.\n==107064==    at 0x114C88: std.debug.attachSegfaultHandler (debug.zig:1763)\n==107064==    by 0x113428: std.debug.maybeEnableSegfaultHandler (debug.zig:1748)\n==107064==    by 0x111AD2: std.start.callMainWithArgs (start.zig:366)\n==107064==    by 0x111882: main (start.zig:383)\n==107064== Your program just tried to execute an instruction that Valgrind\n==107064== did not recognise.  There are two possible reasons for this.\n==107064== 1. Your program has a bug and erroneously jumped to a non-code\n==107064==    location.  If you are running Memcheck and you just saw a\n==107064==    warning about a bad jump, it&#39;s probably your program&#39;s fault.\n==107064== 2. The instruction is legitimate but Valgrind doesn&#39;t handle it,\n==107064==    i.e. it&#39;s Valgrind&#39;s fault.  If you think this is the case or\n==107064==    you are not sure, please let us know and we&#39;ll try to fix it.\n==107064== Either way, Valgrind will now raise a SIGILL signal which will\n==107064== probably kill your program.\n==107064==\n==107064== Process terminating with default action of signal 4 (SIGILL): dumping core\n==107064==  Illegal opcode at address 0x114C88\n==107064==    at 0x114C88: std.debug.attachSegfaultHandler (debug.zig:1763)\n==107064==    by 0x113428: std.debug.maybeEnableSegfaultHandler (debug.zig:1748)\n==107064==    by 0x111AD2: std.start.callMainWithArgs (start.zig:366)\n==107064==    by 0x111882: main (start.zig:383)\n==107064==\n==107064== HEAP SUMMARY:\n==107064==     in use at exit: 0 bytes in 0 blocks\n==107064==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==107064==\n==107064== All heap blocks were freed -- no leaks are possible\n==107064==\n==107064== For lists of detected and suppressed errors, rerun with: -s\n==107064== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\nfish: Job 1, &#39;valgrind examples/hello-zig/helâ€¦&#39; terminated by signal SIGILL (Illegal instruction)\n</code></pre></div>",
        "id": 272614387,
        "sender_full_name": "Emi",
        "timestamp": 1645389071
    },
    {
        "content": "<p>valgrind is <code>valgrind-3.18.1</code> from the Fedora repos</p>",
        "id": 272614422,
        "sender_full_name": "Emi",
        "timestamp": 1645389120
    },
    {
        "content": "<p>that kinda looks like a zig issue then</p>",
        "id": 272614908,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645389653
    },
    {
        "content": "<p>how does <code>hello-rust</code> do?</p>",
        "id": 272614914,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645389661
    },
    {
        "content": "<p>This likely means that zig is generating an instruction that valgrind doesn't know about. That has happened to me in the past, but it is pretty rare. Though it is totally possible especially with cpu target of native/host.</p>",
        "id": 272619420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645394384
    },
    {
        "content": "<p>May mean they need a newer version of valgrind to run the tests, or tell zig to target an older cpu.</p>",
        "id": 272619517,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645394417
    },
    {
        "content": "<p>3.18.1 seems to be the most recent <a href=\"https://valgrind.org/downloads/current.html\">https://valgrind.org/downloads/current.html</a></p>",
        "id": 272619766,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645394667
    },
    {
        "content": "<p>We're still on Zig 0.8.1 rather than the latest 0.9.1, right? What's your zig version, <span class=\"user-mention\" data-user-id=\"479958\">@Emi</span> ?</p>",
        "id": 272621780,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645397048
    },
    {
        "content": "<p>Oh yes!  It's just the zig examples, I don't know how I missed that, thank you!  I'm running zig 0.8.1, but I'll try messing around with <code>valgrind</code> versions and seeing if I can figure out how to target different cpus, like Brendan said</p>",
        "id": 272621802,
        "sender_full_name": "Emi",
        "timestamp": 1645397091
    },
    {
        "content": "<p>Also just FYI, I've never run valgrind on this project but I'm a regular contributor!</p>",
        "id": 272621897,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645397185
    },
    {
        "content": "<p>oh fair!  what do you do for tests?  just skip the valgrind ones?</p>",
        "id": 272621917,
        "sender_full_name": "Emi",
        "timestamp": 1645397211
    },
    {
        "content": "<p>a strategy is to just run the tests that work and have CI do valgrind</p>",
        "id": 272622125,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645397466
    },
    {
        "content": "<p>depending on what you do, it's probably very rare you break the valgrind tests</p>",
        "id": 272622135,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645397486
    },
    {
        "content": "<p>gotcha, thanks!</p>",
        "id": 272622200,
        "sender_full_name": "Emi",
        "timestamp": 1645397538
    },
    {
        "content": "<p>so something you could do is have valgrind just do nothing (e.g. make a script with the name \"valgrind\" that just calls the binary)</p>",
        "id": 272622343,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645397711
    },
    {
        "content": "<p>if the problem persists of course, it might also be fixed when we upgrade to zig 0.9.1</p>",
        "id": 272622358,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645397731
    },
    {
        "content": "<p>I think I'll probably do something just like that</p>",
        "id": 272623313,
        "sender_full_name": "Emi",
        "timestamp": 1645398652
    },
    {
        "content": "<p>thanks everyone for the help!</p>",
        "id": 272623549,
        "sender_full_name": "Emi",
        "timestamp": 1645398944
    },
    {
        "content": "<p>Related to this: should we change the contributing docs to say earthly is for CI mostly and that contributors can just do <code>cargo test</code></p>",
        "id": 272624152,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645399653
    },
    {
        "content": "<p>I made a PR for this</p>",
        "id": 272655256,
        "sender_full_name": "Anton",
        "timestamp": 1645431915
    },
    {
        "content": "<p>this worked for me on OSX 10.15.7 </p>\n<div class=\"codehilite\"><pre><span></span><code>brew tap LouisBrunner/valgrind\nbrew install --HEAD LouisBrunner/valgrind/valgrind\n</code></pre></div>",
        "id": 272859035,
        "sender_full_name": "Aaron",
        "timestamp": 1645560188
    },
    {
        "content": "<p>Yeah, if you have older macos and it is x86, that does work.</p>",
        "id": 272877165,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645569743
    }
]