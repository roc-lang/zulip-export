[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>. Could you explain what <code>N</code>, <code>M</code>, and <code>var</code> are in <code>bp_N&gt;M&gt;var</code> syntax that you use in <a href=\"https://github.com/roc-lang/rfcs/blob/main/0011-union-refinement.md\">RFC 011</a>?</p>",
        "id": 491866847,
        "sender_full_name": "osa1",
        "timestamp": 1735987859
    },
    {
        "content": "<p>As far as I can see there are no examples of <code>N</code> and <code>M</code> being different numbers in the examples, so it's hard to tell why you have two numbers <code>N</code> and <code>M</code> and when they can be different.</p>",
        "id": 491867735,
        "sender_full_name": "osa1",
        "timestamp": 1735988701
    },
    {
        "content": "<p>yes, apologies that this is a bit confusing. the idea is to distinguish between the specific branch being targeted, and the pattern within the branch that is being constrained. <code>bp_N</code> refers to the Nth branch being targeted. <code>M&gt;var</code> refers to the branch pattern that should be matched.</p>",
        "id": 491890771,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736009609
    },
    {
        "content": "<p>For example, take the case</p>\n<div class=\"codehilite\"><pre><span></span><code>x: [A [B, C], D [E]]\n\nwhen x is\n  A B -&gt; D E\n  D E -&gt; A C\n  A other -&gt; A other\n</code></pre></div>\n<p>Our goal is constrain <code>other</code> down to <code>[C]</code>, so we are looking at <code>bp_3</code>. The way we want to constrain is by eliminating whatever is in its type that appears in previous branches. What could appear in other branches is given by the pattern <code>A other</code> that occurs in the second branch, so call this <code>3&gt;other</code> (the pattern path in branch 3 that leads to <code>other</code>). Now <code>other</code> = <code>[B, C] - bp_1&gt;(3&gt;other) - bp_2&gt;(3&gt;other)</code>. <code>bp_1&gt;(3&gt;other)</code> is <code>[B]</code>, because that's where <code>other</code> would match the pattern. <code>bp_2&gt;(3&gt;other)</code> is <code>[]</code>, because the third branch does not match the second. So we send up with <code>other = [B, C] - [B] - [] = [C]</code>.</p>",
        "id": 491891108,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736009987
    },
    {
        "content": "<p>Thanks, it makes more sense to me now.</p>\n<p>Have you considered this alternative (or maybe it's the same as what you describe?) approach? When unifying the pattern types with the scrutinee type, you copy the scrutinee type, updating it with the fully covered variants (non-variant types are copied as-is). So in your example, when you check the second branch's pattern, you consider the scrutinee type not as <code>[A [B, C], D [E]]</code> but as <code>[A [C], D [E]]</code>. Then in the third branch, you consider it as <code>[A [C]]</code>.</p>\n<p>Is this the same as what you describe?</p>",
        "id": 491893995,
        "sender_full_name": "osa1",
        "timestamp": 1736012691
    },
    {
        "content": "<p>The copying should share the unification variables, but copy everything else, updating variants based on fully covered variants in the previous branches.</p>",
        "id": 491894265,
        "sender_full_name": "osa1",
        "timestamp": 1736012925
    },
    {
        "content": "<p>I wonder if this approach is a bit too eager, because you do refinements before generating all of the unification constraints.</p>",
        "id": 491894787,
        "sender_full_name": "osa1",
        "timestamp": 1736013375
    },
    {
        "content": "<p>Do you know if there's prior work on this? I can't find anything.</p>",
        "id": 491896560,
        "sender_full_name": "osa1",
        "timestamp": 1736014601
    },
    {
        "content": "<p>yes, i think it is equivalent. you probably need to solve at least the constraints in the body of all prior branches before updating the scrutinee. This still might be too eager, but I think the only other alternative is some fixpoint analysis (maybe there's a simpler method)</p>",
        "id": 491896740,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736014774
    },
    {
        "content": "<p>i think you have to break unification variables when you update the scrutinee, but yeah copy the unification vars up to that</p>",
        "id": 491896809,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736014811
    },
    {
        "content": "<p>i know that this is quite simple in a typesystem with subtyping - i don't have any papers in mind off the top of my head but kotlin, typescript, etc have done this</p>",
        "id": 491896894,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736014903
    },
    {
        "content": "<p>Why is it simpler with subtyping?</p>",
        "id": 491897111,
        "sender_full_name": "osa1",
        "timestamp": 1736015092
    },
    {
        "content": "<p>you can model this as intersections which are often part of the basic operations of the type system, so you don't need to materialize the types partway</p>",
        "id": 491897624,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736015523
    },
    {
        "content": "<p>Have you considered handling cases where the refinement cannot be done based on the scrutinee type? E.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>type Err:\n    Err([A, B, C])\n    Ok(I32)\n\nmatch x:\n    Err(&#39;A): ...\n    Err(other): ...     # other : [B, C]\n    Ok(x): ...\n</code></pre></div>\n<p>Here <code>[A, B, C]</code> is not a type argument to the scrutinee (<code>x</code>) type, so it can't be refined.</p>",
        "id": 491949028,
        "sender_full_name": "osa1",
        "timestamp": 1736066366
    },
    {
        "content": "<p>I ended up implementing this without updating the scrutinee type as described above: <a href=\"https://github.com/fir-lang/fir/pull/39\">https://github.com/fir-lang/fir/pull/39</a>.</p>\n<p>What I did was: for a branch, first unify the pattern type with the scrutinee type as usual, but before type checking the right-hand side, refine binders in the pattern based on coverage information.</p>\n<p>Here are some examples of what this can handle: <a href=\"https://github.com/fir-lang/fir/blob/main/tests/Rows3.fir\">https://github.com/fir-lang/fir/blob/main/tests/Rows3.fir</a></p>",
        "id": 491971834,
        "sender_full_name": "osa1",
        "timestamp": 1736087848
    },
    {
        "content": "<p>ah very nice. i guess the coverage of the pattern indeed gives you all you need</p>",
        "id": 491979494,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736094363
    },
    {
        "content": "<p>FYI you may want to review <a href=\"https://langdev.stackexchange.com/questions/4239/flow-sensitive-type-refinement-of-polymorphic-variants\">https://langdev.stackexchange.com/questions/4239/flow-sensitive-type-refinement-of-polymorphic-variants</a> before implementing this.</p>",
        "id": 492470469,
        "sender_full_name": "osa1",
        "timestamp": 1736330429
    },
    {
        "content": "<p>wow that is the best StackOverflow answer to an advanced question I've ever seen in my entire life <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span></p>",
        "id": 492513785,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736345844
    },
    {
        "content": "<p>Alexis King is awesome</p>",
        "id": 492513837,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736345861
    },
    {
        "content": "<p>I didn't know about <a href=\"http://langdev.stackexchange.com\">langdev.stackexchange.com</a> , that's useful</p>",
        "id": 492516194,
        "sender_full_name": "Anton",
        "timestamp": 1736346576
    },
    {
        "content": "<p>I discovered an interesting case, where refining a pattern binding causes a type error. Without refinement there's no type error.</p>\n<div class=\"codehilite\"><pre><span></span><code>test(x: [A, ..r]): [A, ..r]\n     match x:\n         ~A: ~A\n         other: other\n</code></pre></div>\n<p>Here the RHS type of the first branch is <code>[A, ..x1]</code> where <code>x1</code> is a fresh unification variable.</p>\n<p>In the second branch, normally the type would be <code>[A, ..r]</code> and RHS types of these two branches would unify.</p>\n<p>But with refinement, we get <code>[..r]</code>, which doesn't unify with <code>[A, ..x1]</code> (type of first RHS) as <code>r</code> is a rigid type variable (coming from the type signature), not a unification variable.</p>\n<p>Not sure how to approach this..</p>\n<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> have you considered this case before?</p>",
        "id": 494752228,
        "sender_full_name": "osa1",
        "timestamp": 1737363538
    },
    {
        "content": "<p>I feel like this is where \"absent\" fields in variant and record types will come into play.</p>\n<p>E.g. we refine <code>other</code> as <code>[..r] \\ A</code> (\"a record with rows r, not including label A\")</p>\n<p>Then allow unification <code>[..r] \\ A ~ [A, ..x1]</code> (which unifies <code>r ~ x1</code>).</p>",
        "id": 494765101,
        "sender_full_name": "osa1",
        "timestamp": 1737366949
    },
    {
        "content": "<p>yes.. one approach is to avoid distinguishing rigid and unification variables until after generalization</p>",
        "id": 494817451,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737381491
    },
    {
        "content": "<p>i assume your definition of rigid vs unification variable is rigid can be instantiated, unification can be instantiated with at most one type until generalization?</p>",
        "id": 494817650,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737381544
    },
    {
        "content": "<p>if you do this, then the type is <code>x: [A, ..r'] -&gt; [A, ..r']</code> for fresh unification var <code>r'</code> and I believe it solves correctly. Then after solving the body of <code>test</code>, generalize <code>r'</code> to <code>r</code></p>",
        "id": 494817900,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737381602
    },
    {
        "content": "<p>One thing to be careful about with this approach though is whether you would like to support polymorphic recursion. If polymorphic recursion is permitted, then I think you must take the set-theoretic approach you describe</p>",
        "id": 494818738,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737381819
    },
    {
        "content": "<p>imo set theoretic models are better in general, just much harder to implement</p>",
        "id": 494818819,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737381842
    },
    {
        "content": "<p>My definition of rigid type variable is when you have a type parameter in a type signature, that type variable becomes \"rigid\" when checking the body of the function, i.e. it only unifies with itself.</p>\n<p>So in my example <code>r</code> is rigid: <code>test(x: [A, ..r]): [A, ..r] = ...</code>. In this identity function <code>t</code> is rigid: <code>id(x: t): t = x</code></p>",
        "id": 494823206,
        "sender_full_name": "osa1",
        "timestamp": 1737382957
    },
    {
        "content": "<p>I don't care too much about poly. recursion.. but I'm curious what's the difference between the set theoretic approach from non- set theoretic one?</p>",
        "id": 494823696,
        "sender_full_name": "osa1",
        "timestamp": 1737383098
    },
    {
        "content": "<p>I think you are right that if I make <code>r</code> a unification variable and then generalize at the end, I would get the same type as in the signature so it would work.</p>",
        "id": 494825042,
        "sender_full_name": "osa1",
        "timestamp": 1737383442
    },
    {
        "content": "<blockquote>\n<p>Then allow unification <code>[..r] \\ A ~ [A, ..x1]</code> (which unifies <code>r ~ x1</code>).</p>\n</blockquote>\n<p>I'm actually not sure if this is possible. The type <code>[..r] \\ A</code> doesn't have any unification variables (<code>r</code> is a rigid variable) so not sure how to make it equal to <code>[..r]</code> again.</p>",
        "id": 494829215,
        "sender_full_name": "osa1",
        "timestamp": 1737384467
    },
    {
        "content": "<p>I see - yes then i think making it a unification var would work, as long as you preserve the link (eg all instances of <code>r</code> become a unification var pointing at the same thing)</p>",
        "id": 494836117,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737386250
    },
    {
        "content": "<p>W.r.t set theoretic types, i mean treating types as sets of values rather than the typical type-theoretic approach - the type-theoretic approach makes unification easy but distinguishing based on values harder. For most cases the difference is not so severe, like in this case, but with intersections, negations, etc it can make a big difference in my experience. I think Castagna is the leading expert on this topic, <a href=\"https://www.irif.fr/~gc/papers/set-theoretic-types-2022.pdf\">https://www.irif.fr/~gc/papers/set-theoretic-types-2022.pdf</a> is a good paper of his i like</p>",
        "id": 494836569,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737386375
    },
    {
        "content": "<p>I’m interested in how the Elixir project of implementing set-theoretic types , especially for gradual typing, goes.</p>",
        "id": 494837713,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737386665
    },
    {
        "content": "<p>Giuseppe is the advisor to the project, so I'm pretty sure this is the exact paper that is being implemented here</p>",
        "id": 494838613,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737386892
    },
    {
        "content": "<p>Here's a good talk from the recent ElixirConf about what they are doing: <a href=\"https://www.youtube.com/watch?v=Bf7dp0Yj8Po\">https://www.youtube.com/watch?v=Bf7dp0Yj8Po</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bf7dp0Yj8Po\" href=\"https://www.youtube.com/watch?v=Bf7dp0Yj8Po\"><img src=\"https://uploads.zulipusercontent.net/fa5db396252c7adba557c26023f5e1d29b17fb91/68747470733a2f2f692e7974696d672e636f6d2f76692f426637647030596a38506f2f64656661756c742e6a7067\"></a></div>",
        "id": 494838749,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737386921
    },
    {
        "content": "<p>I just found another repro of the issue that doesn't use refinements:</p>\n<div class=\"codehilite\"><pre><span></span><code>test(x: [..errs]): [E1, ..errs]\n    if Bool.True:\n        x\n    else:\n        ~E1\n</code></pre></div>\n<p>This can't be type checked if we consider type of <code>x</code> as <code>[..errs]</code> where <code>errs</code> is rigid (i.e. can't be unified with anything else).</p>\n<p>So I think it's clear that I need something like what <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> suggested.</p>",
        "id": 494839366,
        "sender_full_name": "osa1",
        "timestamp": 1737387070
    },
    {
        "content": "<p>Thinking about this more, I don't think creating unification variables for type variables in the signature and then generalizing and compring the generalized type with the signature can type check this.</p>\n<p>Here's how the type checking goes:</p>\n<ul>\n<li>\n<p>Create fresh unification variable for <code>errs</code>: <code>errs1</code>.</p>\n</li>\n<li>\n<p>Bind <code>x : [..errs1]</code>.</p>\n</li>\n<li>\n<p>Unify both branches of <code>if</code>:</p>\n<ul>\n<li>Branch 1: <code>[..errs1]</code></li>\n<li>Branch 2: <code>[E1, ..a]</code> (<code>a</code> is fresh)</li>\n</ul>\n</li>\n<li>\n<p>Unification links <code>errs1</code> to <code>[E1, ..errs2]</code> (<code>errs2</code> is fresh) and <code>a</code> to <code>errs2</code>.</p>\n</li>\n<li>\n<p>So the return type becomes <code>[E1, ..errs2]</code>, and the argument is <code>[..errs1]</code>, which was linked to <code>[E1, ..errs2]</code>.</p>\n</li>\n<li>\n<p>So when generalized we get <code>Fn([E1, ..errs]): [E1, errs]</code>. That's the inferred type of this function.</p>\n</li>\n</ul>\n<p>I think this function's type signature is not right.</p>",
        "id": 494908489,
        "sender_full_name": "osa1",
        "timestamp": 1737405442
    },
    {
        "content": "<p>Unfortunately this takes us back to my original question with the refinement.</p>\n<div class=\"codehilite\"><pre><span></span><code>test(x: [A, ..r]): [A, ..r]\n     match x:\n         ~A: ~A\n         other: other\n</code></pre></div>\n<p>Here if I refine type of <code>other</code> as <code>[..r]</code>, I can't unify it with <code>[A, ..r2]</code> and get the argument or return type in the signature.</p>",
        "id": 494911367,
        "sender_full_name": "osa1",
        "timestamp": 1737406404
    },
    {
        "content": "<p>This seems relevant: <a href=\"https://drops.dagstuhl.de/storage/00lipics/lipics-vol263-ecoop2023/LIPIcs.ECOOP.2023.17/LIPIcs.ECOOP.2023.17.pdf\">https://drops.dagstuhl.de/storage/00lipics/lipics-vol263-ecoop2023/LIPIcs.ECOOP.2023.17/LIPIcs.ECOOP.2023.17.pdf</a></p>",
        "id": 494913550,
        "sender_full_name": "osa1",
        "timestamp": 1737407307
    },
    {
        "content": "<p>I think we just accept this program as ill-typed. If we don't want refinement we can use the argument:</p>\n<div class=\"codehilite\"><pre><span></span><code>test(x: [A, ..r]): [A, ..r]\n     match x:\n         ~A: ~A\n         _: x\n</code></pre></div>\n<p>which type checks.</p>",
        "id": 494916967,
        "sender_full_name": "osa1",
        "timestamp": 1737408784
    },
    {
        "content": "<p>yes i think that program has to be ill-typed</p>",
        "id": 494918000,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737409241
    },
    {
        "content": "<p>to do anything else you need something other than unification (ie distinguish the input parameter typevar from the output value var)</p>",
        "id": 494918056,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737409269
    },
    {
        "content": "<p>i think it is sufficient to check whether any user-annotated rigid variables after generalization can be unified (without instantiation) to the inferred generalized types</p>",
        "id": 494918191,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737409327
    },
    {
        "content": "<p>there is probably a simpler way though</p>",
        "id": 494918203,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737409336
    },
    {
        "content": "<p>Now my problem with this system is that it seems a bit counterintuitive. I implemented it, wrote tests, wrote a blog post about it, but I still find cases that I expect to work but doesn't, then debug it for a few hours, only to realize that it's working as expected and my program should be tweaked. Users will have the same experience, or worse depending on how well they understand rows.</p>",
        "id": 494918789,
        "sender_full_name": "osa1",
        "timestamp": 1737409628
    },
    {
        "content": "<p>yeah</p>",
        "id": 494947144,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737423192
    },
    {
        "content": "<p>this is why unification is not ideal for this</p>",
        "id": 494947156,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737423202
    },
    {
        "content": "<p>my general take is that subtyping is almost always superior</p>",
        "id": 494947261,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737423246
    },
    {
        "content": "<p>especially in the preference of inference</p>",
        "id": 494947288,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737423256
    },
    {
        "content": "<p>but it's hard</p>",
        "id": 494947296,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737423261
    },
    {
        "content": "<p>undecidability of semi-unification etc etc (but possible in a restricted context)</p>",
        "id": 494947461,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737423357
    },
    {
        "content": "<p>If you impolement this in Roc are you going to use rows or subtyping?</p>\n<p>I don't want to introduce subtyping in my system because (1) I have no experience in implementing subtyping (2) I also don't have any experience in using subtyping outside of OOP langs so I can't predict the interactions it's going to have with the other features.</p>\n<p>For now, I'm thinking maybe I can adjust the user type signatures under the hood to make this work like subtyping. For example, if user has <code>[A, ..r]</code> in argument position, maybe I can replace it with <code>[A, B, ..r]</code> somehow to make the types align.</p>",
        "id": 494986143,
        "sender_full_name": "osa1",
        "timestamp": 1737445733
    },
    {
        "content": "<p>So far I found two things that users should be aware of and understand:</p>\n<ul>\n<li>\n<p>Variants in return position always need to be polymorphic (with the <code>..r</code> part), otherwise the function becomes unnecessarily strict.</p>\n<p>I think OCaml does it right here by hiding the row parameter and instead having syntax like <code>[&gt; ...]</code>. I may do something simliar.</p>\n</li>\n<li>\n<p>You can't add a label to a variant that you take as an argument. So if you want to convert a label <code>A</code> into <code>B</code>, your function type needs to be <code>[A, B, ..r] -&gt; [B, ..r]</code> instead of <code>[A, ..r] -&gt; [B, ..r]</code>.</p>\n</li>\n</ul>",
        "id": 494990867,
        "sender_full_name": "osa1",
        "timestamp": 1737447513
    },
    {
        "content": "<p>probably rows but i do think they are the imperfect model for this, for example exactly because the rows leak into userspace and are kind of confusing to users (eg ocaml's <code>[&gt; ...]</code> vs <code>[&lt; ...]</code>)</p>",
        "id": 495063550,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737469493
    },
    {
        "content": "<blockquote>\n<ul>\n<li>You can't add a label to a variant that you take as an argument. So if you want to convert a label <code>A</code> into <code>B</code>, your function type needs to be <code>[A, B, ..r] -&gt; [B, ..r]</code> instead of <code>[A, ..r] -&gt; [B, ..r]</code>.</li>\n</ul>\n</blockquote>\n<p>Sorry, i think i missed something - is there a reason this doesn't work? Or are there other patterns you are referring to that don't work with your model</p>\n<div class=\"codehilite\"><pre><span></span><code>test(x: [A, ..r]): [B, ..r]\n  match x:\n    ~A: ~B\n    other: other\n</code></pre></div>",
        "id": 495064934,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737469741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/231634-beginners/topic/.60bp_N.3EM.3Evar.60.20syntax.20in.20RFC.20011.3F/near/495063550\">said</a>:</p>\n<blockquote>\n<p>probably rows but i do think they are the imperfect model for this, for example exactly because the rows leak into userspace and are kind of confusing to users (eg ocaml's <code>[&gt; ...]</code> vs <code>[&lt; ...]</code>)</p>\n</blockquote>\n<p>Yeah, but subtyping exposes users to covariance which is also confusing.. I'm also not sure if subtyping based approaches can be as flexible, as upcasting means losing information.</p>",
        "id": 495065187,
        "sender_full_name": "osa1",
        "timestamp": 1737469787
    },
    {
        "content": "<p>yeah i agree</p>",
        "id": 495065447,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737469826
    },
    {
        "content": "<p>all these models are kind of confusing haha. this is me coming from the perspective of ocaml variants and roc tags (esp. polymorphic versions) seeming to be much more confusing than any typescript types in the common case for people i've talked to about it</p>",
        "id": 495065721,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737469883
    },
    {
        "content": "<blockquote>\n<p>Sorry, i think i missed something - is there a reason this doesn't work?</p>\n</blockquote>\n<p>The problem is the return types of branches don't unify:</p>\n<ul>\n<li>First branch: <code>[B, ..x1]</code> (x1 is fresh)</li>\n<li>Second branch: <code>[..r]</code> (r is from the type signature) (note that this type doesn't have <code>A</code> as I \"refined\" it)</li>\n</ul>\n<p>These two don't unify because you can't unify <code>r</code> with anything as it's coming from the type signature (I call this \"rigid type variable\"), so you can't add <code>B</code> to this record.</p>\n<p>Am I doing it wrong?</p>",
        "id": 495067540,
        "sender_full_name": "osa1",
        "timestamp": 1737470232
    },
    {
        "content": "<p>ah i see, and you found that instantiation doesn't work</p>",
        "id": 495068501,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737470402
    },
    {
        "content": "<p>yeah that is unfortunate</p>",
        "id": 495068554,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737470407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/231634-beginners/topic/.60bp_N.3EM.3Evar.60.20syntax.20in.20RFC.20011.3F/near/495068501\">said</a>:</p>\n<blockquote>\n<p>ah i see, and you found that instantiation doesn't work</p>\n</blockquote>\n<p>To be clear it works, but it infers <code>[A, B, ..r] -&gt; [B, ..r]</code> instead of <code>[A, ..r] -&gt; [B, ..r]</code>. Which is fine (I think the types are identical in terms of how you would use them), but intuitively not what one might expect.</p>\n<p>How the type checking would go with instantiation:</p>\n<ul>\n<li>bind <code>x</code> to <code>[A, ..x1]</code> where the type is from the signature but type parameter <code>r</code> is instantiated as <code>x1</code>.</li>\n<li>in the first branch, unify <code>[A, ..x1]</code> with type of the pattern which is <code>[A, ..x2]</code>, so that equates <code>x1</code> and <code>x2</code>.</li>\n<li>in the rhs of the first branch, return type is <code>[B, ..x3]</code>.</li>\n<li>in the second branch, unify type of <code>other</code> which is <code>x4</code> (fresh) with type of <code>x</code> so that gives us <code>x4 ~ [A, ..x1]</code>, and then refine it as <code>[..x1]</code> based on coverage of the previous branches.</li>\n<li>in the rhs of the second brnach, return type is <code>[..x1]</code>.</li>\n<li>unify return types: <code>[..x1] ~ [B, ..x3]</code>, which unifies <code>x1</code> with rows of <code>[B, ..x3]</code>.</li>\n</ul>\n<p>So the type before generalization becomes <code>[A, B, ..x3] -&gt; [B, ..x3]</code>.</p>",
        "id": 495073409,
        "sender_full_name": "osa1",
        "timestamp": 1737471274
    },
    {
        "content": "<p>yeah that's tough</p>",
        "id": 495085655,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737474073
    }
]