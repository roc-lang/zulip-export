[
    {
        "content": "<p>folks, just out of curiosity, how does equality checks work in Roc? does in-place mutation affects that in any way? (maybe this question is more of a dummy question related to any immutable languages but hopefully I can nerdsnipe someone to explain it a bit <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)</p>",
        "id": 353230306,
        "sender_full_name": "Georges Boris",
        "timestamp": 1682593595
    },
    {
        "content": "<p>kind of maybe? we have less sharing than e.g. elm would have, in general</p>",
        "id": 353233745,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682594187
    },
    {
        "content": "<p>so generally what we do is structural equality, and sometimes you can just compare pointers (references) and if they are the same then they must point to the same thing</p>",
        "id": 353233947,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682594246
    },
    {
        "content": "<p>is the approach to always do pointers and then fallback to structural equality? (unless dealing with primitive types?</p>\n<p>would equality checks inside a clojure automatically break the possibility of in-place mutation in that same clojure? since then a pointer value would not mean equality.</p>",
        "id": 353289910,
        "sender_full_name": "Georges Boris",
        "timestamp": 1682601586
    },
    {
        "content": "<p>Yes, pretty much. If the pointer equality check fails structural equality is still done. It doesnâ€™t work for equating function types of course</p>",
        "id": 353290493,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1682601658
    }
]