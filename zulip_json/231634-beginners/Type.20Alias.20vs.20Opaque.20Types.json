[
    {
        "content": "<p>I was testing returning a specific type for a function, and it required using an Opaque type vs a type alias.  Why is this?</p>\n<div class=\"codehilite\"><pre><span></span><code>Point := { x: Str, y: Str, z: Str }\n\ntoPoint : Num a, Num b, Num c -&gt; Point\ntoPoint = \\a, b, c -&gt; @Point { x: Num.toStr a, y: Num.toStr b, z: Num.toStr c }\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\"><pre><span></span><code>Point : { x: Str, y: Str, z: Str }\n\ntoPoint : Num a, Num b, Num c -&gt; Point\ntoPoint = \\a, b, c -&gt; { x: Num.toStr a, y: Num.toStr b, z: Num.toStr c } #how to say this is type Point?\n</code></pre></div>",
        "id": 422480260,
        "sender_full_name": "Brian Teague",
        "timestamp": 1708454868
    },
    {
        "content": "<p>I thought I would be able to create a function that returns a type alias Point like in Haskell.</p>",
        "id": 422481779,
        "sender_full_name": "Brian Teague",
        "timestamp": 1708455416
    },
    {
        "content": "<p>I can run the second snippet, can you further specify your issue?</p>",
        "id": 422481819,
        "sender_full_name": "Anton",
        "timestamp": 1708455433
    },
    {
        "content": "<p>Never mind, the second example worked.  I was getting a compile error earlier, and apparently fixed it while typing up this example <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 422482161,
        "sender_full_name": "Brian Teague",
        "timestamp": 1708455548
    }
]