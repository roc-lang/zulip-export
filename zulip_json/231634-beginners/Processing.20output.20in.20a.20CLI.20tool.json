[
    {
        "content": "<p>Hi folks,</p>\n<p>I want to write a CLI tool, something I'd normally write in Bash.</p>\n<p>Here is a simple example of what I'd do in Bash (I don't want to write a Git CLI too but I use it as an example since we all have Git installed):</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">out</span><span class=\"o\">=</span><span class=\"k\">$(</span>git<span class=\"w\"> </span>init<span class=\"w\"> </span>foobar<span class=\"k\">)</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"w\"> </span><span class=\"si\">${</span><span class=\"nv\">out</span><span class=\"si\">}</span><span class=\"w\"> </span><span class=\"o\">=</span>~<span class=\"w\"> </span>^Initialized<span class=\"se\">\\ </span>empty<span class=\"se\">\\ </span>Git<span class=\"se\">\\ </span>repository<span class=\"se\">\\ </span><span class=\"k\">in</span><span class=\"se\">\\ </span><span class=\"o\">(</span>.+<span class=\"o\">)</span>$<span class=\"w\"> </span><span class=\"o\">]]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"ok: absolute path of a new empty repo is: </span><span class=\"si\">${</span><span class=\"nv\">BASH_REMATCH</span><span class=\"p\">[1]</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"w\">    </span><span class=\"k\">elif</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"w\"> </span><span class=\"si\">${</span><span class=\"nv\">out</span><span class=\"si\">}</span><span class=\"w\"> </span><span class=\"o\">=</span>~<span class=\"w\"> </span>^Reinitialized<span class=\"se\">\\ </span>existing<span class=\"se\">\\ </span>Git<span class=\"se\">\\ </span>repository<span class=\"se\">\\ </span><span class=\"k\">in</span><span class=\"se\">\\ </span><span class=\"o\">(</span>.+<span class=\"o\">)</span>$<span class=\"w\"> </span><span class=\"o\">]]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"ok: absolute path of a reinitialized repo is: </span><span class=\"si\">${</span><span class=\"nv\">BASH_REMATCH</span><span class=\"p\">[1]</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"error: unexpected out: </span><span class=\"si\">${</span><span class=\"nv\">out</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"w\">    </span><span class=\"k\">fi</span>\n<span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"nb\">echo</span><span class=\"w\"> </span>error\n<span class=\"k\">fi</span>\n</code></pre></div>\n<p>Obviously, I can come up with more complicated examples with multiple matching groups, etc.</p>\n<p>As far as I can see, Roc doesn't have Regex matching. Could you please tell me how you'd do that?</p>\n<p>Thank you!</p>",
        "id": 464943754,
        "sender_full_name": "Ostar",
        "timestamp": 1724563142
    },
    {
        "content": "<p>We've talked about having a syntax for simple string matching like this, but it doesn't exist today sadly. </p>\n<p>In this specific case, I would probably split by spaces and then use list pattern matching.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">out</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s\">\"Initialized\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"empty\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Git\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"repository\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"in\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">dir</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"ok: absolute path of a new empty repo is: $(dir)\"</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s\">\"Reinitialized\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"empty\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Git\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"repository\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"in\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">dir</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"ok: absolute path of a reinitialized repo is: $(dir)\"</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"error: unexpected out: $(out)\"</span>\n</code></pre></div>",
        "id": 464945388,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724564078
    },
    {
        "content": "<p>There are also some parser combinator libraries that people have written, but I tend to essentially always roll my own direct parsing code for things like this.</p>",
        "id": 464945452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724564142
    },
    {
        "content": "<p>Thank you!</p>\n<p>The <code>Str.split out</code> is a good option for example like this. The only change I'd make is to move the pattern matching into a separate (pure, not Task, easy to test) function.</p>\n<p>I've never used parser combinators (just looking on Wikipedia now), could you please point me to a Roc parser combinator library?</p>\n<p>Is Regex on a road map? Or maybe has anybody tried to write Regex matcher in Roc as a library?</p>",
        "id": 465028619,
        "sender_full_name": "Ostar",
        "timestamp": 1724605113
    },
    {
        "content": "<blockquote>\n<p>The only change I'd make is to move the pattern matching into a separate (pure, not Task, easy to test) function.</p>\n</blockquote>\n<p>Sure, that can be done. Depends if you are working on a quick script or something large that you want more testable.</p>\n<blockquote>\n<p>could you please point me to a Roc parser combinator library?</p>\n</blockquote>\n<p>I think this: <a href=\"https://github.com/lukewilliamboswell/roc-parser\">https://github.com/lukewilliamboswell/roc-parser</a></p>\n<blockquote>\n<p>Is Regex on a road map?</p>\n</blockquote>\n<p>No. I don't expect Regex to ever be in the roc standard library.</p>\n<blockquote>\n<p>Or maybe has anybody tried to write Regex matcher in Roc as a library?</p>\n</blockquote>\n<p>Not that I know of. Generally people are pushed towards parser combinators or manual parsers. They are generally consider a lot safer and cleaner than regex even if they are more lines of code. That said, someone totally could implement regex support in a package or platform.</p>",
        "id": 465031118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724607847
    },
    {
        "content": "<blockquote>\n<p>No. I don't expect Regex to ever be in the roc standard library.</p>\n</blockquote>\n<blockquote>\n<p>Generally people are pushed towards parser combinators or manual parsers. </p>\n</blockquote>\n<p>Thank you. That's good to know, so I should look for other options.</p>\n<blockquote>\n<p>I think this: <a href=\"https://github.com/lukewilliamboswell/roc-parser\">https://github.com/lukewilliamboswell/roc-parser</a></p>\n</blockquote>\n<p>That's great, thank you!</p>",
        "id": 465107493,
        "sender_full_name": "Ostar",
        "timestamp": 1724658429
    },
    {
        "content": "<p>47 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/number.20ranges.20without.20heap.20allocations\">#beginners &gt; number ranges without heap allocations</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 465530797,
        "sender_full_name": "Notification Bot",
        "timestamp": 1724784091
    }
]