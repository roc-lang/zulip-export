[
    {
        "content": "<p>I'm trying to get Roc to generate a <code>.wasm</code> file. I've been following the instructions in <code>examples/platform-switching/web-assembly-platform/README.md</code> but I can't seem to get anything to work. I'm not really sure where I'm going wrong. </p>\n<p>I would love to be able to generate a valid WASM file, and potentially even something that could be used with WASI. I appreciate that there probably aren't many platforms yet, and we don't have RocGlue for it, but I'm interested in working on this. </p>\n<p>I've thought it might be fun to try and make something work for <a href=\"https://wasmer.io/posts/announcing-wcgi\">WCGI</a>. But don't have much experience, and I'm thinking it may be too big a project for me but worth giving it a go.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -- build --target wasm32 examples/platform-switching/rocLovesWebAssembly.roc\n   Compiling palette v0.6.1\n   Compiling signal-hook v0.3.15\n   Compiling pulldown-cmark v0.9.2\n   Compiling roc_cli v0.0.1 (/Users/luke/Documents/GitHub/roc/crates/cli)\n   Compiling roc_repl_expect v0.0.1 (/Users/luke/Documents/GitHub/roc/crates/repl_expect)\n   Compiling roc_code_markup v0.0.1 (/Users/luke/Documents/GitHub/roc/crates/code_markup)\n   Compiling roc_docs v0.0.1 (/Users/luke/Documents/GitHub/roc/crates/docs)\n    Finished dev [unoptimized + debuginfo] target(s) in 8.27s\n     Running `target/debug/roc build --target wasm32 examples/platform-switching/rocLovesWebAssembly.roc`\nðŸ”¨ Rebuilding platform...\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Error:\n    Failed to rebuild host.zig:\n        The executed command was:\n            zig build-obj examples/platform-switching/web-assembly-platform/host.zig -femit-llvm-ir=examples/platform-switching/web-assembly-platform/main.bc --pkg-begin str crates/compiler/builtins/bitcode/src/str.zig --pkg-end --library c -target i386-linux-musl -fPIC --strip\n        stderr of that command:\n            ./examples/platform-switching/web-assembly-platform/host.zig:7:9: error: This platform is for WebAssembly only. You need to pass `--target wasm32` to the Roc compiler.\n        @compileError(&quot;This platform is for WebAssembly only. You need to pass `--target wasm32` to the Roc compiler.&quot;);\n        ^\n&#39;, crates/compiler/build/src/link.rs:1493:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread &#39;main&#39; panicked at &#39;Failed to (re)build platform.: Any { .. }&#39;, crates/compiler/build/src/program.rs:941:46\n</code></pre></div>",
        "id": 351991039,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682223069
    },
    {
        "content": "<p><del>I think I might be using the wrong version of zig. Just going to build 0.9.1 from source and see if that helps.</del> didn't help</p>",
        "id": 351993251,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682224881
    },
    {
        "content": "<p>It seems to think the target is <code>i386-linux-musl</code>. Using <code>--target wasm32</code> doesn't seem to do anything. Indeed when I hardcode it to <code>Target::Wasm32</code> in <code>crates/cli/src/main.rs</code> this doesn't change the arguments to zig build.</p>\n<p>So I searched for where that might be and have found this in <code>crates/compiler/build/src/link.rs</code> which I can hardcode to <code>wasm32-wasi</code> but then I get a successful build with a series of errors like below when it tries to link with <code>ld-temp.o</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">zig_target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"n\">opt_level</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OptLevel</span>::<span class=\"n\">Development</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"s\">\"wasm32-wasi\"</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// For LLVM backend wasm we are emitting a .bc file anyway so this target is OK</span>\n<span class=\"w\">    </span><span class=\"s\">\"i386-linux-musl\"</span>\n<span class=\"w\">    </span><span class=\"c1\">// ^^^^^^^^^^^^^ If I change this to \"wasm32-wasi\" I get a sucessful build the below errors.</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>wasm-ld: warning: Linking two modules of different target triples: &#39;/Users/luke/\nDocuments/GitHub/roc/target/debug/build/wasi_libc_sys-5e2583e767e30111/out/wasi-\nlibc.a/Users/luke/Documents/GitHub/roc/target/debug/build/wasi_libc_sys-5e2583e7\n67e30111/out/zig-cache/o/4811dec3fd38e36f9330ff74e399d7a1/memset.o&#39; is\n&#39;wasm32-unknown-wasi-musl&#39; whereas &#39;ld-temp.o&#39; is &#39;wasm32-unknown-unknown-unknown&#39;\n</code></pre></div>",
        "id": 352005797,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682232988
    },
    {
        "content": "<p>Ok, so I've realised that I have this working now. They are just compiler warnings that I have above. Only realised after manually compiling the host using zig. I had to fix a minor bug in <code>host.zig</code> to get it to compile. Modified some things... and now I have a roc platform that runs with wasmer. </p>\n<div class=\"codehilite\"><pre><span></span><code>% wasmer run examples/platform-switching/rocLovesWebAssembly.wasm\nHello, from Zig!\n</code></pre></div>",
        "id": 352012726,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682236660
    },
    {
        "content": "<p>Is it possible to target <code>wasm</code> using a Rust platform at the moment?</p>",
        "id": 352014366,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682237506
    },
    {
        "content": "<p>I'm not sure of the current status. I do remember at some point in the past the compiler's build system only supported Zig platforms. That goes back to our first Wasm examples with llvm. I'm not sure if that restriction has been lifted since then. I did a lot of the Wasm support but not this part. <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  might know more about it.</p>",
        "id": 352016536,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682238390
    },
    {
        "content": "<p>We'd need a specific Rust platform to work on. I don't think one exists right now.</p>",
        "id": 352017435,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682238775
    },
    {
        "content": "<p>Also note that Roc glue exists at the language level (Rust/Zig), not the instruction set level (x86_64/Wasm).</p>",
        "id": 352018330,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682239180
    },
    {
        "content": "<p>Rust glue does support the Wasm target as far as I know</p>",
        "id": 352018363,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682239199
    },
    {
        "content": "<p>Super. Looking forward to building a rust platform for wasm with glue. I might need a minimal example and then I should be good to add more features. I think Brendan is working on an example using glue, not sure if he's thinking wasm though.</p>",
        "id": 352027155,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682242684
    },
    {
        "content": "<p>we do try to generate glue for wasm, see </p>\n<div class=\"codehilite\"><pre><span></span><code>#[cfg(target_arch = &quot;arm&quot;)]\nmod arm;\n#[cfg(target_arch = &quot;arm&quot;)]\npub use arm::*;\n#[cfg(target_arch = &quot;aarch64&quot;)]\nmod aarch64;\n#[cfg(target_arch = &quot;aarch64&quot;)]\npub use aarch64::*;\n#[cfg(target_arch = &quot;wasm32&quot;)]\nmod wasm32;\n#[cfg(target_arch = &quot;wasm32&quot;)]\npub use wasm32::*;\n#[cfg(target_arch = &quot;x86&quot;)]\nmod x86;\n#[cfg(target_arch = &quot;x86&quot;)]\npub use x86::*;\n#[cfg(target_arch = &quot;x86_64&quot;)]\nmod x86_64;\n#[cfg(target_arch = &quot;x86_64&quot;)]\npub use x86_64::*;\n</code></pre></div>\n<p>but I don't think that's been tested in any way so far</p>",
        "id": 352054743,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682252587
    },
    {
        "content": "<p><strong>Status: Blocked - I think I need assistance, still trying to figure it out.</strong></p>\n<h2>Goal - Compile Minimal Rust platform to WASM</h2>\n<p>Get a minimal example that compiles a Roc platform/app to a WASM file for e.g. a Netlify serverless function. Basically I just want to use STDIO and STDOUT for request/response, and make an Echo example.</p>\n<p>Basic concept is something like <code>mainForHost : List U8 -&gt; Str</code> or similar, with a platform <code>lib.rs</code> maybe something like this. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Read</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"n\">io</span>::<span class=\"n\">stdin</span><span class=\"p\">().</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocStr</span>::<span class=\"n\">from_slice_unchecked</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc_main</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">  </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"n\">roc_str</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">flush</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Step 1 - Compile library (SUCCESS)</h2>\n<p>Using <code>examples/platform-switching/rust-platform</code> as a starting point I get.</p>\n<div class=\"codehilite\"><pre><span></span><code>% roc build --target wasm32 --no-link rocLovesRust.roc\n0 errors and 0 warnings found in 36 ms while successfully building:\n\n    rocLovesRust.o\n</code></pre></div>\n<h2>Step 2 - Link WASM file (SUCCESS)</h2>\n<div class=\"codehilite\"><pre><span></span><code>% wasm-ld --no-entry --export-dynamic --allow-undefined -o rocLovesRust.wasm rocLovesRust.o\n</code></pre></div>\n<h2>Step 3 - Run WASM file (FAIL) :sadface:</h2>\n<div class=\"codehilite\"><pre><span></span><code>% wasmer rocLovesRust.wasm\nerror: failed to run `rocLovesRust.wasm`\nâ•°â”€â–¶ 1: Error while importing &quot;env&quot;.&quot;__udivti3&quot;: unknown import. Expected Function(FunctionType { params: [I32, I64, I64, I64, I64], results: [] })\n</code></pre></div>\n<p>When I ask ChatGPT how to fix it I get this.</p>\n<blockquote>\n<p>The error you're encountering indicates that the WebAssembly module you generated is trying to import a function named __udivti3 from the \"env\" namespace, but it can't find it. The __udivti3 function is a compiler-generated helper function for 128-bit unsigned integer division. It is part of the compiler-rt library, which provides runtime support for various compiler-generated functions. To resolve this issue, you need to link your Rust code with the appropriate wasm32 version of the compiler-rt library. </p>\n</blockquote>\n<p>And this is where I get stuck. </p>\n<p>Any ideas on how to get rust to link compiler-rt library in would be most appreciated.</p>",
        "id": 352422658,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682395916
    },
    {
        "content": "<p>I tried another method and created a rust project for the sole purpose of compiling the missing functions into <code>.o</code> files against the <code>wasm32-unknown-unknown</code> target, and then tried linking them using <code>wasm-ld</code>, but it still doesn't seem to work. I really don't have much experience here, so this is probably a crazy idea. Sharing in case this helps.</p>\n<div class=\"codehilite\"><pre><span></span><code>% wasm-ld --no-entry --export-dynamic -o rocLovesRust.wasm rocLovesRust.o ./udivmodti4.o ./udivti3.o ./libcompiler-rt.a\nwasm-ld: error: lto.tmp: undefined symbol: __udivti3\nwasm-ld: error: lto.tmp: undefined symbol: __udivti3\nwasm-ld: error: lto.tmp: undefined symbol: __multi3\n</code></pre></div>",
        "id": 352432310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682400934
    },
    {
        "content": "<p>I've pivoted to just use the Zig platform. It works really well. I hope to polish it a little and hopefully have a working example for the next meetup. Just a few (maybe just one) compiler issues to fix so this can be used by anyone using a nightly release and a URL platform. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 352472933,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682413389
    },
    {
        "content": "<p>The following builds WASM ok with <code>roc build --target wasm32 examples/echo.roc</code>, and also runs well using <code>% wasmer run examples/echo.wasm</code>, except it prints out <code>hello, world!%</code> instead of what I expect it to which is <code>Goodbye!%</code>. I'm pretty confident it is a combination of my lack of Zig, and not quite understanding how we call the exposed Roc functions.</p>\n<p>Looking for any pointers to get Roc to take the list of bytes in and return the modified list back.</p>\n<div class=\"codehilite\"><pre><span></span><code>platform &quot;serverless&quot;\n    requires {} { main : List U8 -&gt; List U8 }\n    exposes []\n    packages {}\n    imports []\n    provides [mainForHost]\n\nmainForHost : List U8 -&gt; List U8\nmainForHost = main\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// &lt;-- other Roc related definitions above here removed for brevity --&gt;</span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">RocList</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"p\">;</span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdOut</span><span class=\"p\">().</span><span class=\"n\">writer</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">helloStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello, world!\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"p\">.</span><span class=\"n\">fromSlice</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">helloStr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">maybeBytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">maybeBytes</span><span class=\"w\"> </span><span class=\"k\">orelse</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Error getting elements</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{});</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">process</span><span class=\"p\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">array_len</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">byteSlice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">array_len</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">writeAll</span><span class=\"p\">(</span><span class=\"n\">byteSlice</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Write the slice to stdout</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;echo&quot;\n    packages { pf: &quot;../platform/main.roc&quot; }\n    imports []\n    provides [main] to pf\n\nmain = \\_ -&gt;\n    Str.toUtf8 &quot;Goodbye!\\n&quot;\n</code></pre></div>",
        "id": 352506096,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682421426
    },
    {
        "content": "<p>the signature of <code>pub extern fn roc__mainForHost_1_exposed_generic(ret: *RocList) void;</code> needs two arguments</p>",
        "id": 352506378,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682421493
    },
    {
        "content": "<p>first the input string, and then a pointer to store the output into</p>",
        "id": 352506438,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682421507
    },
    {
        "content": "<p>Thank you.  I thought that might be the case, but then I get the following error which I have trouble understanding or debugging. There is only one place were I define <code>roc__mainForHost_1_exposed_generic</code> so I don't think that is causing it. </p>\n<div class=\"codehilite\"><pre><span></span><code>wasm-ld: warning: function signature mismatch: roc__mainForHost_1_exposed_generic\n&gt;&gt;&gt; defined as (i32, i32) -&gt; void in /var/folders/48/39th9k0n0wdcj18k3yhm_g5c0000gn/T/roc_appNrHux0.o\n&gt;&gt;&gt; defined as (i32) -&gt; void in lto.tmp\n\n0 errors and 0 warnings found in 427 ms while successfully building:\n\n    examples/echo.wasm\nluke@192-168-1-104 roc-serverless % wasmer run examples/echo.wasm\nerror: failed to run `examples/echo.wasm`\nâ”‚   1: RuntimeError: unreachable\nâ•°â”€â–¶ 2: unreachable\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>pub extern fn roc__mainForHost_1_exposed_generic(arg: *RocList, ret: *RocList) void;\n\npub fn main() !void {\n\n    const stdout = std.io.getStdOut().writer();\n\n    const helloStr = &quot;hello, world!&quot;;\n    var arg = RocList.fromSlice(u8, helloStr[0..]);\n    var ret = RocList.empty();\n\n    roc__mainForHost_1_exposed_generic(&amp;arg, &amp;ret);\n\n    const maybeBytes = ret.elements(u8);\n    const bytes = maybeBytes orelse {\n        std.debug.print(&quot;Error getting elements\\n&quot;, .{});\n        std.process.exit(1);\n    };\n\n    const array_len: usize = ret.len();\n    const byteSlice = bytes[0..array_len];\n\n    try stdout.writeAll(byteSlice); // Write the slice to stdout\n\n}\n</code></pre></div>",
        "id": 352508339,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682422074
    },
    {
        "content": "<p>Specifically, any idea where the <code>defined as (i32) -&gt; void in lto.tmp</code> might be referring to?</p>",
        "id": 352508696,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682422197
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 352514758,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682423776
    },
    {
        "content": "<p>that signature is just wrong then. i'm not sure how the wasm backend generates them</p>",
        "id": 352515238,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682423889
    },
    {
        "content": "<p>you might have more luck if you try to build the roc app with <code>--optimize</code>. that ll use the llvm wasm backend</p>",
        "id": 352515343,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682423915
    },
    {
        "content": "<p>just to figure out if that is the issue</p>",
        "id": 352515387,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682423924
    },
    {
        "content": "<p>Unfortunately, that didn't change anything. I still get the same error with <code>--optimize</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 352635285,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682454977
    },
    {
        "content": "<p>Is your code pushed to a branch or repo somewhere? Would be nice to be able to look at and play with it.</p>",
        "id": 352640128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682456852
    },
    {
        "content": "<p>Ok, I'll do that. Just out for a few minutes.</p>",
        "id": 352645398,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682459488
    },
    {
        "content": "<p>Here is the platform <a href=\"https://github.com/lukewilliamboswell/roc-serverless\">roc-serverless</a>, <del>it doesn't build as is due to the zig builtins issue we've been talking about. I have it working with a local modification in my roc cli so that it knows where to find the builtins.</del> I pushed an update with the builtins locally, so it does build and reproduce the WASM error above.</p>",
        "id": 352650957,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682462366
    },
    {
        "content": "<p>To me this is using the LLVM backend. That is the default, you don't have to specify <code>--optimize</code>. Rather, you need <code>--dev</code> to get the dev one. And the dev backend does not use <code>wasm-ld</code>, it has its own built-in linker.</p>",
        "id": 352651352,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682462539
    },
    {
        "content": "<p>At a guess, lto.tmp sounds like a temporary file used for link time optimization by wasm-ld. Again, I'm guessing!</p>",
        "id": 352651438,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682462593
    },
    {
        "content": "<p>No idea how it would have two different signatures though</p>",
        "id": 352651496,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682462627
    },
    {
        "content": "<p>Maybe try it with <code>--dev</code> and see what happens!</p>",
        "id": 352651975,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682462840
    },
    {
        "content": "<p>I forgot I had another change I had to make in the compiler to get this to run. Added to README.</p>",
        "id": 352652548,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682463109
    },
    {
        "content": "<p>I tried with <code>--dev</code> but that still gives the the same function type mismatch. Btw this was using <code>% cargo run -- build --target wasm32 --dev ../roc-serverless/examples/echo.roc</code> to build it. It gives </p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;-- other warnings removed --&gt;\n\nwasm-ld: warning: Linking two modules of different target triples: &#39;/Users/luke/Documents/GitHub/roc/target/debug/build/wasi_libc_sys-5e2583e767e30111/out/wasi-libc.a/Users/luke/Documents/GitHub/roc/target/debug/build/wasi_libc_sys-5e2583e767e30111/out/zig-cache/o/ea7f435e8379892b4b98d80660f9fbc9/memset.o&#39; is &#39;wasm32-unknown-wasi-musl&#39; whereas &#39;ld-temp.o&#39; is &#39;wasm32-unknown-unknown-unknown&#39;\n\n\nwasm-ld: warning: function signature mismatch: roc__mainForHost_1_exposed_generic\n&gt;&gt;&gt; defined as (i32, i32) -&gt; void in /var/folders/48/39th9k0n0wdcj18k3yhm_g5c0000gn/T/roc_appf32a4I.o\n&gt;&gt;&gt; defined as (i32) -&gt; void in lto.tmp\n</code></pre></div>",
        "id": 352652732,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682463193
    },
    {
        "content": "<p>Btw the other change is </p>\n<blockquote>\n<p>First, change <code>\"i386-linux-musl\"</code> to <code>\"wasm32-wasi\"</code> on line 373 in <code>crates/compiler/build/src/link.rs</code></p>\n</blockquote>\n<p>Which leads me to wonder if there is an issue in cli where it doesn't recognise <code>--dev</code> when we have <code>--target wasm32</code></p>",
        "id": 352653209,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682463446
    },
    {
        "content": "<p>How can I confirm if it is using the dev backend and not LLVM?</p>",
        "id": 352655617,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682464691
    },
    {
        "content": "<p>Based on the <a href=\"https://github.com/roc-lang/roc/blob/ffe30af2167385ad75cb89c073608166df18b0e7/crates/cli/src/lib.rs#L619-L635\">source code here</a>, it looks like wasm does ignore the <code>--dev</code> flag.</p>",
        "id": 352663981,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682469590
    },
    {
        "content": "<p>Though it also looks like it would always use the dev wasm and never llvm</p>",
        "id": 352664087,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682469625
    },
    {
        "content": "<p>So definitely a bit confused by that</p>",
        "id": 352664111,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682469641
    },
    {
        "content": "<p>I think I found it, if I change <code>BuildConfig::BuildAndRunIfNoErrors</code> to <code>BuildConfig::BuildOnly</code> in <a href=\"https://github.com/roc-lang/roc/blob/ffe30af2167385ad75cb89c073608166df18b0e7/crates/cli/src/lib.rs#L603\">cli/src/lib.rs</a> then it builds correctly using the dev backend, and not wasm-ld</p>",
        "id": 352666075,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682470763
    },
    {
        "content": "<p>Actually, I think that just changes the linking_strategy from <code>LinkingStrategy::Legacy</code> to <code>LinkingStrategy::Additive</code> which builds without errors, but then there is an issue running the wasm, which I think may because it doesn't actually add the app into it or something.</p>",
        "id": 352666842,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682471209
    },
    {
        "content": "<p>Interesting. I think this is the issue. We always call llvm when the backend is set to wasm: <a href=\"https://github.com/roc-lang/roc/blob/ffe30af2167385ad75cb89c073608166df18b0e7/crates/compiler/build/src/program.rs#L116-L124\">https://github.com/roc-lang/roc/blob/ffe30af2167385ad75cb89c073608166df18b0e7/crates/compiler/build/src/program.rs#L116-L124</a></p>",
        "id": 352666885,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471235
    },
    {
        "content": "<p>Changing it to works;</p>\n<div class=\"codehilite\"><pre><span></span><code>CodeGenBackend::Wasm =&gt; {\n            gen_from_mono_module_dev_wasm32(arena, loaded, preprocessed_host_path, wasm_dev_stack_bytes)\n        }\n</code></pre></div>",
        "id": 352667278,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682471477
    },
    {
        "content": "<p>Yeah, that actually makes sense, cause other stuff is not expecting the development backend and is using the wrong file becuase it is matching what the llvm backend wants for files.</p>",
        "id": 352667607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471669
    },
    {
        "content": "<p>You also need to update this, which is another bug/discrepency: <a href=\"https://github.com/roc-lang/roc/blob/ffe30af2167385ad75cb89c073608166df18b0e7/crates/cli/src/lib.rs#L606-L616\">https://github.com/roc-lang/roc/blob/ffe30af2167385ad75cb89c073608166df18b0e7/crates/cli/src/lib.rs#L606-L616</a></p>",
        "id": 352667655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471702
    },
    {
        "content": "<p>to:</p>\n<div class=\"codehilite\"><pre><span></span><code>        match (\n            matches.is_present(FLAG_OPTIMIZE),\n            matches.is_present(FLAG_OPT_SIZE),\n            matches.is_present(FLAG_DEV),\n        ) {\n            (true, false, false) =&gt; OptLevel::Optimize,\n            (false, true, false) =&gt; OptLevel::Size,\n            (false, false, true) =&gt; OptLevel::Development,\n            (false, false, false) =&gt; OptLevel::Normal,\n            _ =&gt; user_error!(&quot;build can be only one of `--dev`, `--optimize`, or `--opt-size`&quot;),\n        }\n</code></pre></div>",
        "id": 352667675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471711
    },
    {
        "content": "<p>Then with <code>--dev</code>, it seems to compile fine.</p>",
        "id": 352667687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471720
    },
    {
        "content": "<p>Not sure if it works though</p>",
        "id": 352667694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471725
    },
    {
        "content": "<p>So yeah, some of the wasm pipelining seems to have been messed up over time.</p>",
        "id": 352667806,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471799
    },
    {
        "content": "<p>Not sure what is breaking with the llvm backend though. That is a separate issue.</p>",
        "id": 352667818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682471814
    },
    {
        "content": "<p>So that gives me a <code>.o</code> file instead of a <code>.wasm</code> file now.</p>",
        "id": 352667858,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682471837
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% cargo run -- build --target wasm32 --dev ../roc-serverless/examples/echo.roc\n ðŸ”¨ Rebuilding platform...\n0 errors and 0 warnings found in 394 ms while successfully building:\n\n    ../roc-serverless/examples/echo.o\n</code></pre></div>",
        "id": 352668153,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682472040
    },
    {
        "content": "<p>I'm not really sure, but fundamentally, we need to rework these pipelines.</p>",
        "id": 352668169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682472054
    },
    {
        "content": "<p>Also, I think we need to make two different targets for <code>wasm32</code>, one for browser, and one for wasi.</p>",
        "id": 352668207,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682472090
    },
    {
        "content": "<p>Also, <code>echo.o</code> may just be a misnaming of <code>echo.wasm</code>. Assuming the wasm dev backend generated correctly, I think it was just filling in whatever file name it was given.</p>",
        "id": 352668332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682472178
    },
    {
        "content": "<p>Yeah, unfortunately that doesn't seem to be the case. </p>\n<div class=\"codehilite\"><pre><span></span><code>% wasmer validate examples/echo.o\nerror: failed to validate `examples/echo.o`\nâ•°â”€â–¶ 1: Validation error: unexpected end-of-file (at offset 0x0)\n</code></pre></div>",
        "id": 352668529,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682472312
    },
    {
        "content": "<p>haha. ok</p>",
        "id": 352668660,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682472395
    },
    {
        "content": "<p>So if I comment out the <code>wasm_module.eliminate_dead_code(env.arena, called_fns);</code> in <code>build_app_binary</code> in <code>crates/compiler/gen_wasm/src/lib.rs</code> is does generate a valid wasm filed, named <code>echo.o</code>.  But then I have this issue;</p>\n<div class=\"codehilite\"><pre><span></span><code>% wasmer validate examples/echo.o\nValidation passed for `examples/echo.o`.\n% wasmer run examples/echo.o\nerror: failed to run `examples/echo.o`\nâ”‚   1: failed to instantiate WASI module\nâ”‚   2: Instantiation failed\nâ•°â”€â–¶ 3: Error while importing &quot;env&quot;.&quot;roc_panic&quot;: unknown import. Expected Function(FunctionType { params: [I32, I32], results: [] })\n</code></pre></div>",
        "id": 352669142,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682472751
    },
    {
        "content": "<p>So I think I'm almost there, it looks good in the wasm module. I just don't have a zig implementation for <code>roc_panic</code> I think.  I'll see if I can figure that out.</p>",
        "id": 352669376,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682472919
    },
    {
        "content": "<p>Adding <code>roc_panic</code> like this, and now I have a different issue.</p>\n<div class=\"codehilite\"><pre><span></span><code>export fn roc_panic(_: *anyopaque, _: *anyopaque) void {\n    // do something?\n}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>% wasmer run examples/echo.o\nerror: failed to run `examples/echo.o`\nâ”‚   1: failed to instantiate WASI module\nâ”‚   2: Instantiation failed\nâ•°â”€â–¶ 3: Error while importing &quot;env&quot;.&quot;roc__mainForHost_1_exposed_generic&quot;: unknown import. Expected Function(FunctionType { params: [I32, I32], results: [] })\n</code></pre></div>",
        "id": 352670583,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682473792
    },
    {
        "content": "<p>Can you switch away from the generic version of the function and to the concrete one</p>",
        "id": 352671206,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682474225
    },
    {
        "content": "<p>Fundamentally should be something like <code>roc__mainForHost_1_exposed(arg: *RocList) *RocList</code></p>",
        "id": 352671261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682474269
    },
    {
        "content": "<p>Maybe dev wasm doesn't generate the generic version...not sure though</p>",
        "id": 352671313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682474284
    },
    {
        "content": "<p>Hmmm, not sure about that. </p>\n<div class=\"codehilite\"><pre><span></span><code>...\npub extern fn roc__mainForHost_1_exposed(arg: *RocList) *RocList;\n\npub fn main() !void {\n    ...\n    var arg = RocList.fromSlice(u8, helloStr[0..]);\n    var ret: *RocList = roc__mainForHost_1_exposed(&amp;arg);\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>% wasmer run examples/echo.o\nerror: failed to run `examples/echo.o`\nâ•°â”€â–¶ 1: RuntimeError: Parameters of type [] did not match signature [F64, I64, I64] -&gt; [F64]\n</code></pre></div>",
        "id": 352671808,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682474620
    },
    {
        "content": "<p>It might have worked actually, the issue now might be my main.</p>\n<div class=\"codehilite\"><pre><span></span><code>Exports:\n  Functions:\n    &quot;_start&quot;: [F64, I64, I64] -&gt; [F64]\n</code></pre></div>",
        "id": 352671979,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682474759
    },
    {
        "content": "<p>Awesome! Though i have no ideas for that error.</p>",
        "id": 352672099,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682474833
    },
    {
        "content": "<p>Yeah, trying to figure this one out is tricky. I think we've got the right code for working with Roc, and my issue is purely WASI specific now. Start should be <code>\"_start\": [] -&gt; []</code></p>",
        "id": 352673336,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682475814
    },
    {
        "content": "<p>Oh that's right I never implemented that for the generic main. Never had an example of it.</p>",
        "id": 352690635,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682487135
    },
    {
        "content": "<p>Ok, I think I've exhausted up to the limit of my knowledge for now. </p>\n<p>I've reverted back to the simpler <code>main : Str </code> for the platform (as in the rocLovesWasm example) and want to focus on integrating with a cloud. I've uncovered a some issues here, and I'm not confident enough to say which of these need to be fixed or investigated further. I'm happy to log issues for anything I've mentioned above we want to keep track of, just need a pointer here and there. </p>\n<p>For Rust Host -&gt; WASM it seems the main issue is that we only support generating WASM when we have a <code>host.zig</code> host. All the Rust examples have a <code>host.c</code> host. I have an example Rust platform that I've added a <code>host.zig</code> to. I'm reasonably confident it should work, <code>cargo check</code> is happy etc, and it generates valid wasm, however it doesn't seem to build and then link in any of the Rust (and by extension the Roc) functions into the end file.</p>\n<p>For Zig Host -&gt; WASM there are a few issues in the build tooling which I've discussed above. If these issues are worked around with manual compiler patches, we end up with <code>_start</code> not being generated correctly which is the standard entry for WASI. Brendan suggested we need a separate target for WASI; I feel like a Roc app will always have a main so we can always support WASI without issues.</p>",
        "id": 352705999,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682492378
    },
    {
        "content": "<p>I've pushed the latest I have to <a href=\"https://github.com/lukewilliamboswell/roc-serverless\">github</a> and updated README to work using current main, in case anyone would like to see.</p>",
        "id": 352706687,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682492559
    },
    {
        "content": "<p>I'll make a few comments that some people might know already but others might not.<br>\nThe <code>_start</code> function is not unique to WASI or Wasm, native binaries have the same thing. When you write a C program with a <code>int main(int argc, char** argv)</code>, the C compiler inserts code to call <code>main</code> from a <code>_start</code> function that is usually written in assembly and provided by <code>libc</code>. It sets up the stack and the values of <code>argc</code> and <code>argv</code> and then calls <code>main</code>.<br>\n<a href=\"https://embeddedartistry.com/blog/2019/04/08/a-general-overview-of-what-happens-before-main/\">https://embeddedartistry.com/blog/2019/04/08/a-general-overview-of-what-happens-before-main/</a><br>\nThe Roc entry point <code>main</code> is of course not the overall entry point for the whole binary. The <em>real</em> <code>main</code> is in Zig or Rust or whatever, and that is the one that should be called from <code>_start</code>. <code>_start</code> normally has no arguments. I can't remember if it returns an exit code as i32, or if it returns void.<br>\nIn the virtual DOM platform that I started work on a while ago (and is now on hold) the client side Zig platform has no <code>main</code> or <code>_start</code>  because we are running in a browser, not an OS, and there are no command line arguments etc.<br>\nSimilarly if Roc is being used to generate a plugin for a game engine or something, we will compile to an object file or dynamic library rather than an executable, and it will have no <code>main</code>.</p>",
        "id": 352764130,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682507499
    },
    {
        "content": "<p>do we actually need <code>wasm-ld</code> anymore?</p>",
        "id": 352794563,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682514405
    },
    {
        "content": "<p>now that we have a surgical linking implementation</p>",
        "id": 352794616,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682514418
    },
    {
        "content": "<p>Looking at the current code, <code>wasm-ld</code> is used in a few places, all driven by zig. It is used for compiling the host, preprocessing the host, and linking if not using the additive linker.</p>",
        "id": 352845400,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682522842
    },
    {
        "content": "<p>gotcha - but if we switched to always use the additive linker for compiling Roc application code, then it would only be used on the host and that's it?</p>",
        "id": 352937601,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682539739
    },
    {
        "content": "<p>Yeah, I think so. Would only need it for building and preprocessing the host. That said, no idea how it works and what it would take to use with the llvm backend. No idea if any part of it is special.</p>",
        "id": 352946361,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682542879
    },
    {
        "content": "<p>Not sure what you mean by special, but can't think of anything unusual about it.</p>\n<p>But as I mentioned in another thread recently, the surgical / additive linking is quite specific to the Dev Wasm backend. It is not a general purpose linker like wasm-ld is. It could be developed into something more but why? Wasm ld does what we need.</p>",
        "id": 354063871,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682719984
    },
    {
        "content": "<p>We need it to create a preprocessed host</p>",
        "id": 354064106,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682720032
    },
    {
        "content": "<p>Also my linking code will not work for llvm</p>",
        "id": 354065741,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682720309
    },
    {
        "content": "<p>well ultimately the goal in general (not just for wasm, but all backends) is that:</p>\n<ul>\n<li>linking always starts from a preprocessed host (e.g. that was downloaded from a URL)</li>\n<li>we always do linking ourselves rather than relying on a third-party linker (both so <code>roc</code> is the only thing you need to download to use Roc, which is a goal, and also so we can complete linking as fast as possible, which is also a goal!)</li>\n</ul>",
        "id": 354082390,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682723485
    },
    {
        "content": "<p>Ok so if we always start from a preprocessed host then a platform author needs wasm-ld to create that.</p>",
        "id": 354186059,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682745107
    },
    {
        "content": "<p>oh yeah platform authors will totally need third-party tools to create preprocessed hosts <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 354199364,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682747761
    },
    {
        "content": "<p>but that's already unavoidable because they need some other language besides Roc to create the host anyway</p>",
        "id": 354199630,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682747801
    },
    {
        "content": "<p>so really I should have said application authors shouldn't need anything other than <code>roc</code> to use it</p>",
        "id": 354199752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682747825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20WASM/near/352794563\">said</a>:</p>\n<blockquote>\n<p>do we actually need <code>wasm-ld</code> anymore?</p>\n</blockquote>\n<p>Ok so back to this question, the answer is that the llvm backend needs it because our surgical linking doesn't work with that.<br>\nAnd we also need it to build any of our official platforms or example platforms.</p>",
        "id": 354216580,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682750884
    },
    {
        "content": "<p>I got an example working on NodeJS via wasm - <a href=\"https://github.com/roc-lang/roc/pull/5346\">https://github.com/roc-lang/roc/pull/5346</a> - but I got stuck trying to figure out how to pass a NodeJS string into wasm <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 354604914,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682827378
    },
    {
        "content": "<p>anyone with wasm knowledge know how to go about doing that? I basically want to have <code>main.roc</code> give a <code>Str -&gt; Str</code> function instead of a <code>Str</code>, and then call that from JS passing a JS string converted to a wasm representation that Roc can use</p>",
        "id": 354604951,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682827436
    },
    {
        "content": "<p>Just a note, I know Luke was running into some generation issue with the LLVM backend. For <code>List U8 -&gt; List U8</code> i think it broke and generated the wrong signature.</p>",
        "id": 354605271,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682827755
    },
    {
        "content": "<p>I've had trouble making that change as well. I think it is my understanding of the <code>pub extern fn roc__mainForHost_1_exposed_generic(_: *RocStr, _: *RocStr) void;</code> function which has me stumped. I keep getting stuck on a Zig <code>unreachable</code> error when I try and run the wasm file that gets generated. I was hoping to copy your implementation.</p>",
        "id": 354605273,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682827757
    },
    {
        "content": "<p>I really don't know how to figure out what the function types should be for the Roc exposed stuff</p>",
        "id": 354605289,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682827791
    },
    {
        "content": "<p>I feel like I'm reaching in the dark here. I had the idea of generating the types for Rust using glue, which works well. But then I think my Zig lets me down when I try and fault find. So haven't made much progress.</p>",
        "id": 354605367,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682827875
    },
    {
        "content": "<p>Basically I keep playing around with the signature of <code>roc__mainForHost</code> and I am getting different errors like,</p>\n<div class=\"codehilite\"><pre><span></span><code>wasm-ld: warning: function signature mismatch: roc__mainForHost_1_exposed_generic\n&gt;&gt;&gt; defined as (i32, i64, i32) -&gt; void in lto.tmp\n&gt;&gt;&gt; defined as (i32) -&gt; void in ../roc-serverless/examples/../platform/zig-cache/o/60f380eba017104c3db40f606e31875f/roc_app145t9T.o\n</code></pre></div>\n<p>I am reasonably sure it should be something like <code>pub extern fn roc__mainForHost_1_exposed_generic(_: *RocStr, _: RocStr) void;</code>; but I am not sure.</p>",
        "id": 354605876,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682828493
    },
    {
        "content": "<p>well one hurdle that has to be overcome is that it relies on <code>pub fn main()</code> in <code>host.zig</code></p>",
        "id": 354605885,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682828509
    },
    {
        "content": "<p>and <code>main</code> isn't allowed to accept arguments directly</p>",
        "id": 354605939,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682828534
    },
    {
        "content": "<p>it would need to be some other function than <code>main</code> and then exported differently, but I haven't been able to figure out how to get that to work</p>",
        "id": 354605955,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682828555
    },
    {
        "content": "<p>This is what I have currently. My plan is to use STDIO, you can bind to that from JS</p>\n<div class=\"codehilite\"><pre><span></span><code>pub extern fn roc__mainForHost_1_exposed_generic(_: *RocStr, _: RocStr) void;\n\npub fn main() u8 {\n\n    // Call Roc and get the Str\n    var arg : RocStr = RocStr.empty();\n    var ret : *RocStr = &amp;RocStr.empty();\n\n    roc__mainForHost_1_exposed_generic(ret, arg);\n\n    // Print to stdio\n    const stdout = std.io.getStdOut().writer();\n    stdout.print(&quot;Printing...&quot;, .{}) catch unreachable;\n    stdout.print(&quot;{s}&quot;, .{ret.asSlice()}) catch unreachable;\n\n    // value.decref();\n\n    return 0;\n}\n</code></pre></div>",
        "id": 354605958,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682828558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> shouldn't it be similar to a browser example where it is controlled by a <a href=\"https://github.com/roc-lang/roc/blob/main/examples/platform-switching/web-assembly-platform/host.js\">host.js file</a>? Then you would setup zig the same way as that example.</p>",
        "id": 354606038,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682828682
    },
    {
        "content": "<p>I have an example here somewhere, I'll dig it out. It shows the WASM and the JS for using stdio/stdout</p>",
        "id": 354606306,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682828789
    },
    {
        "content": "<p>unfortunately that example is using <code>main()</code> with no arguments - <a href=\"https://github.com/roc-lang/roc/blob/e520eaddccd4042432efb1cc4cf0389845efbb00/examples/platform-switching/web-assembly-platform/host.js#L48\">https://github.com/roc-lang/roc/blob/e520eaddccd4042432efb1cc4cf0389845efbb00/examples/platform-switching/web-assembly-platform/host.js#L48</a> (which compiles to <code>_start</code>)</p>",
        "id": 354606310,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682828806
    },
    {
        "content": "<p>Or <a href=\"https://github.com/bhansconnect/functional-mos6502-web-performance/blob/master/implementations/roc-effectful/platform/host.js\">like this</a>. Zig still has a main, but other functions can be called/shared with wasm module</p>",
        "id": 354606315,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682828811
    },
    {
        "content": "<p>how though? in examples like that I've done <code>console.log</code> on <a href=\"https://github.com/bhansconnect/functional-mos6502-web-performance/blob/c0033c4bf22f690320b7b56f7e7ede3a7dc44f32/implementations/roc-effectful/platform/host.js#L45\"><code>wasm.instance.exports</code></a> and all it has is <code>_start</code></p>",
        "id": 354606462,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682828913
    },
    {
        "content": "<p>including if I define another <code>pub</code>  function just like <code>main</code> (except not named <code>main</code>)</p>",
        "id": 354606470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682828937
    },
    {
        "content": "<p>This <a href=\"https://blog.cloudflare.com/announcing-wasi-on-workers/\">announcing-wasi-on-workers</a> is the example I was thinking of, unfortunately it uses a library from cloudfare. I thought it was vanilla JS.</p>",
        "id": 354606677,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682829147
    },
    {
        "content": "<p>A good mental model here is that the wasm program is a dynamic library, not an executable. You don't want a <code>main</code> because the <code>main</code> is in the browser or node. That runs the event loop which enters JS, which calls Wasm. So Wasm is not really an entry point.</p>",
        "id": 354613959,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682834870
    },
    {
        "content": "<p>So if you have a zig host then export some functions from it</p>",
        "id": 354614075,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682834927
    },
    {
        "content": "<p>Then when you instantiate your Wasm module pass it an object of the functions it needs to \"link\" to</p>",
        "id": 354614232,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682834995
    },
    {
        "content": "<p>And the exported functions will appear in <code>exports</code></p>",
        "id": 354614345,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682835046
    },
    {
        "content": "<p>We have a hello world example and a virtual dom example, they both do this. Did you try copying those?</p>",
        "id": 354614443,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682835098
    },
    {
        "content": "<p><code>pub</code> is not enough, you need to export it. That's the same technique we use for our built-ins. Those are also built into a library for external foreign code to use. This is no different.</p>",
        "id": 354614826,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682835311
    },
    {
        "content": "<p>It's confusing because Zig automatically exports a function called main but no other names</p>",
        "id": 354616056,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682835791
    },
    {
        "content": "<p>For npm you should look at browser examples only, and ignore all WASI examples. WASI does the opposite of what you want, as it usually focuses on executables. But for node or browser you never want that. There is only a way for Wasm to be called from JS. There's no way for it to be <code>main</code>.</p>",
        "id": 354616926,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682836230
    },
    {
        "content": "<p>OK I have some time today and tomorrow. Richard and Luke, if you like, I can spend an hour or so with each of you separately on Zoom and try to unblock you. DM me to arrange. It would be good to spread familiarity of this stuff around a bit more! If we succeed then we can post back here to let people what worked.</p>",
        "id": 354618122,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682836973
    },
    {
        "content": "<p>The chats with Luke and Richard both concluded that we have some bugs in our build system for Wasm targets.<br>\nI came across <a href=\"https://github.com/roc-lang/roc/compare/main...fix-wasm-build#diff-a0fa218e1d84f824e03760d3ba315c429533dd1e5e8546c99c0c365a957c8edfR776\">one place in particular</a> where we are assigning a variable <code>preprocessed_host_path</code> to <code>host.zig</code><br>\nBut that can't be right because \"preprocessed\" implies \"compiled\" but this is a source code file. We are then passing it to <code>wasm-ld</code> which doesn't make sense.<br>\nI think we need to spend some time debugging that build process and create a test for it that runs in CI to keep it working, such as the Node.js integration example.</p>",
        "id": 354717725,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682871918
    },
    {
        "content": "<p>This may be correct, but only because our llvm wasm build currently is heavily tied to zig. It actually tosses out the preprocessed host and use <code>host.zig</code>. The final command it runs is a command to compile <code>host.zig</code> and <code>roc_app.bc</code> into a wasm file. I think it was a hack to make the build process simple and get it to work for llvm wasm.</p>\n<p>That all said, no matter what, that needs to change in the long term to separate llvm wasm from zig.</p>",
        "id": 354730681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682877651
    },
    {
        "content": "<p>In other words, currently, llvm wasm throws away all prepocessing and instead lets zig completely control the build.</p>",
        "id": 354730889,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682877752
    },
    {
        "content": "<p>gotcha - what would it take to change that?</p>",
        "id": 354731148,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682877904
    },
    {
        "content": "<p>I don't actually know. I just happened to learn about the weird dependencies when working on my recent wasm related PR.</p>",
        "id": 354732185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682878382
    },
    {
        "content": "<p>As far as I could tell, host.zig is passed _directly_ as an argument to wasm-ld. But wasm-ld is not a Zig compiler.</p>",
        "id": 354801018,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682922540
    },
    {
        "content": "<p>oh, rereading your comment, maybe I was getting fooled by a variable name</p>",
        "id": 354801336,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682922673
    },
    {
        "content": "<p>either way we need to change this, if only to refactor the existing behaviour to make it clear what's happening!</p>",
        "id": 354801473,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682922738
    },
    {
        "content": "<p>Heya, sorry to necro this topic, but most of the context for this conversation is here. I am very interested in platform building and specifically standalone wasm platforms for roc.</p>\n<p>I got my first taste trying to use the nightly package to compile some of the wasm examples. I hit a few issues, dug in, and got my <a href=\"https://github.com/roc-lang/roc/pull/6834\">first PR</a> in fixing the issues with the nightly release. I tried to get a feel for where things were though the process of opening that PR, reading the <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/compiler/build/src/link.rs#L4\">two</a> <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/linker/src/lib.rs\">linkers</a>, and reading through some of the conversations here.</p>\n<p>It <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/linker/src/lib.rs#L444\">appears</a> that there is still some work to be done in the surgical linker to support my goals. I browsed through the elf linker to get an idea what the work would be and this is obviously a much larger task than the one I took on previously. Before I begin I just had a couple questions.</p>\n<ol>\n<li>Does this work align with the project's near term goals? It <a href=\"https://github.com/roc-lang/roc/issues/6037\">seems</a> <a href=\"https://github.com/roc-lang/roc/issues/6414\">like</a> it?</li>\n<li>Am I stepping on any toes? It looks like <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> and <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> have done most of the work around the current linker.</li>\n<li>I believe the final outcome of this is building a wasm platform would more or less mirror the process for the <a href=\"https://www.roc-lang.org/examples/GoPlatform/README.html\">go platform</a>. It this the desired end state? Am I incorrect that because of the <code>preprocess-host</code> step building a platform will still depend on some final target roc app?</li>\n<li>The current surgical linker implementation is entirely dependent on the <code>object</code> crate. That library does not support wasm. It also does not have any sort of public trait to implement its API for a wasm target we define. From the elf code it looks like we predominantly rely on the <code>.sections()</code> and <code>.relocations()</code> iterators / items. Would you want to just duck-type their api? Implement our own trait wrapping <code>object</code>'s functionality, then implement that for wasm? Try to push such an implementation back upstream before we take this on?</li>\n<li>Any tips before I begin? Any landmines I have not uncovered yet?</li>\n</ol>\n<p>Sorry for the barrage of questions. I hoped I could give the best idea of what I want to implement by packaging some of the broad directional strokes alongside some of the implementation details. Thanks for taking the time to read this far!</p>",
        "id": 447290900,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719425005
    },
    {
        "content": "<p>re toe stepping, definitely not.</p>",
        "id": 447291160,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719425062
    },
    {
        "content": "<p>I think there is a misconception here. The surgical linker is only for native targets.</p>",
        "id": 447304817,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719428501
    },
    {
        "content": "<p>So it is is not needed for any wasm work</p>",
        "id": 447304861,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719428510
    },
    {
        "content": "<p>We have a separate custom wasm linker that <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> wrote and it should be mostly good to just use. Otherwise, can always fallback to the legacy wasm linker</p>",
        "id": 447305088,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719428550
    },
    {
        "content": "<p>That said, I know some of our wasm building and linking was tied into zig for simplicity. Depending on your platform goals, that may need to be unwound.</p>",
        "id": 447305230,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719428585
    },
    {
        "content": "<p>If anything, I assume this work would be built on top of the additive linker (assuming it is missing the features needed)....</p>\n<p>Actually I think I already know what is missing. If I understand correctly, the additive linker only works with the wasm dev backend and not the wasm llvm backend. Something probably needs to be done for the llvm backend and wasm backend to both link in the same way.</p>",
        "id": 447306214,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719428781
    },
    {
        "content": "<p>Totally not stepping on toes. Any assistance would be most appreciated. I'll try and explaing my understanding of the current situation. I'm not an expert on these things, and have mostly just stumbled into these things while trying to make a change. Sorry for the long post.</p>",
        "id": 447307229,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719429003
    },
    {
        "content": "<p>I've been trying to work towards removing the platform rebuilding from the cli so its not a dependency from the compiler on the platform hosts. This will remove complexity from the compiler and make it easier to maintain and to support more host languages, by shifting the responsibility for (pre)building binaries to the platform hosts, who can use thier own tooling etc. Roc is then only responsible for linking the host and the app together.</p>",
        "id": 447307261,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719429008
    },
    {
        "content": "<p>It turns out, what I thought would be a relatively minor change is a rather large yak that requires shaving. There seems to be a lot of different things that are interrelated and need to happen first.</p>",
        "id": 447307281,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719429012
    },
    {
        "content": "<p>In short the current status is that I am stuck on <a href=\"https://github.com/roc-lang/roc/pull/6808\">https://github.com/roc-lang/roc/pull/6808</a>, specifically I don't have a great setup on linux so it's been slow to fix this, and I've gotten distracted by other things I can make progress on. This change fixes the preprocess host subcommand, which means we can make prebuilt binaries for the platform hosts that are suitable for the surgical linker. That will enable us to land <a href=\"https://github.com/roc-lang/basic-webserver/pull/54\">this basic-webserver</a> and <a href=\"https://github.com/roc-lang/basic-cli/pull/194\">this basic-cli</a> PRs which refactor the host out into crates and add a build script. Without the pre-process host subcommand working, we can't build the prebuilt binaries to support the surgical linker.</p>",
        "id": 447307300,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719429018
    },
    {
        "content": "<p>For WASM specifically, I have been stuck on at least one issue. I started <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-wasi\">the roc-platform-template-wasi</a> platform to try and find the correct way to build WASM platforms. The current roc cli rebuilds a WASM host using some workarounds by compiling to llvm bytcode and then using zig to build the final <code>.wasm</code> file. I think this is a limitation in zig <code>0.11.0</code> that is resolved in zig <code>0.12.0</code> and later versions. If we upgrade our zig version (<a href=\"#narrow/stream/395097-compiler-development/topic/Zig.200.2E12.2E0/near/444208611\">which looks doable now</a> then I think we can use zig to link two  <code>.wasm</code> files just using <code>zig build-exe</code> or <code>zig build-lib</code>. I discovered this while working on <a href=\"https://github.com/lukewilliamboswell/roc-glue-code-gen/pull/3\">upgrading the glue for zig platforms</a>. So ideally, we can have the host (pre)built into a <code>.wasm</code> file and then all the roc cli needs to do is link that with the app <code>.wasm</code> file to make the final binary. We may be able to use the WASM linker that we already have for the dev backend, I haven't looked into that yet. I haven't been able to build and link everything correctly manually yet.</p>",
        "id": 447307325,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719429024
    },
    {
        "content": "<p>After unlocking the preprocess-host subcommand, and updating the platforms to support surgical linking, we can then return to the cli and switch off platform rebuilding. But doing this breaks all of the cli platform tests in the compiler as they now need a second step to build the platform. All of those changes are mostly done and ready to go in <a href=\"https://github.com/roc-lang/roc/pull/6696\">#6696</a>. We also want to move most of the examples from <code>roc-lang/roc/examples</code> and into the examples repository at <code>roc-lang/examples</code>, and the cli test that are there into <code>roc-lang/roc/crates/cli/tests/...</code>. We have cli tests for CI to ensure we don't break basic-cli etc, but these examples aren't the best experience for newcomers wanting to checkout roc, that is why we have the examples repository.</p>",
        "id": 447307349,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719429030
    },
    {
        "content": "<p>Ok, yes I think there is some misconception on the surgical linker then. I tried to build the wasm platform in rust instead of zig. I was looking to build wasm plugins for a host (not roc host) rust program. To do that it was helpful to share data structures and logic between the host program and the roc platform code. So I tried to do a \"standalone\" wasm build, adapting the nodejs interop example to the instructions found in the go platform tutorial. I got all the way to step 4 with <code>roc preprocess-host main.roc --target wasm32</code> and it failed with <code>thread 'main' panicked at crates/linker/src/lib.rs:335:14: not yet implemented: surgical linker does not support target Wasm32</code>. At that point I dove into the surgical linker since that was where that error came from.</p>",
        "id": 447307791,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719429124
    },
    {
        "content": "<p>Is this the \"seperate custom linker\" you were referring to?<br>\n<a href=\"https://github.com/roc-lang/roc/blame/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/compiler/build/src/link.rs#L1196\">https://github.com/roc-lang/roc/blame/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/compiler/build/src/link.rs#L1196</a></p>",
        "id": 447311579,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719430018
    },
    {
        "content": "<blockquote>\n<p>Something probably needs to be done for the llvm backend and wasm backend to both link in the same way.</p>\n</blockquote>\n<p>There's a common misunderstanding to watch out for. \"The additive linker\" is not really thing. It's not a separate entity from the wasm dev back end. Rather, that backend is designed to not really need any linking.</p>\n<p>The backend has some internal state where it keeps track of the \"instructions generated so far\". To initialise that state, I \"cheat\" by loading it up with the instructions from the host instead. So the backend \"thinks\" it generated the host. It then \"appends\" the instructions for the Roc app to the instructions for the host.</p>\n<p>There is not really any linking because you never have two separate things to link.</p>",
        "id": 447312580,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719430343
    },
    {
        "content": "<p>When Brendan mentioned \"seperate custom linker\" this is what he was referring to.</p>",
        "id": 447312777,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719430407
    },
    {
        "content": "<p>Here is the type signature of <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/compiler/gen_wasm/src/lib.rs#L88-L94\"><code>build_app_module</code></a>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">build_app_module</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">r</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">env</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">r</span><span class=\"w\"> </span><span class=\"nc\">Env</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">layout_interner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">r</span><span class=\"w\"> </span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">STLayoutInterner</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">interns</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">r</span><span class=\"w\"> </span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Interns</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">host_module</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasmModule</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">procedures</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MutMap</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ProcLayout</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Proc</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">WasmModule</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BitVec</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>You can see one of the arguments is <code>host_module: WasmModule&lt;'a&gt;</code> and the return value is another, larger <code>WasmModule&lt;'a&gt;</code>.</p>",
        "id": 447313524,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719430586
    },
    {
        "content": "<p>So it takes the host and adds the app to it.</p>",
        "id": 447313809,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719430641
    },
    {
        "content": "<p>Now I oversimplified a little when I said there is \"no\" linking to do. There is no linking needed for app-to-host calls. But we do need to do some linker type work for host-to-app calls. In other words, the <code>mainForHost</code> call.</p>",
        "id": 447314291,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719430727
    },
    {
        "content": "<p>So there is some linking functionality there</p>",
        "id": 447314317,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719430734
    },
    {
        "content": "<p>And if someone wanted to make a separate linker for Wasm then there is plenty of relevant code there you could start from. In particular the <a href=\"https://github.com/roc-lang/roc/tree/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/wasm_module\"><code>wasm_module</code></a> crate. It knows how to parse a binary file into that <code>WasmModule</code> data structure. We have Rust code for parsing and traversing the linking data in a Wasm file.</p>",
        "id": 447315194,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719430930
    },
    {
        "content": "<p>Thanks for the pointer <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> ! I am going to have to take a hot second to digest what you wrote here. I have not been through the <code>gen_wasm</code> compiler module yet.</p>",
        "id": 447316171,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719431169
    },
    {
        "content": "<p>OK cool. I'll throw some more links at you for the bits that do linking stuff.</p>\n<ul>\n<li>Here's where we <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/wasm_module/src/lib.rs#L118\">preload</a> the host bytes and parsing them into a WasmModule</li>\n<li>Here's where we <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/wasm_module/src/lib.rs#L80\">serialize</a> the WasmModule back out again</li>\n<li>Here are the data structures for the <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/wasm_module/src/linking.rs\">linking section</a> of the Wasm module</li>\n<li>Here's where we <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/wasm_module/src/lib.rs#L524\"><code>link_host_to_app_calls</code></a></li>\n</ul>",
        "id": 447317670,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719431521
    },
    {
        "content": "<p>Nearly all the linking related stuff is in wasm_module rather than gen_wasm. So if someone wanted to build a separate surgical linker to use with the LLVM backend, they would import stuff from wasm_module and not gen_wasm.</p>",
        "id": 447318209,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719431647
    },
    {
        "content": "<p>Might be worth looking at the README files as well.</p>",
        "id": 447318481,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719431722
    },
    {
        "content": "<p>And the reason <code>wasm_module</code> is not invoked from the linker today is it does not <del>have</del> produce the appropriate llvm metadata, so cannot be optimized?</p>\n<p>The surgical linker is all about getting LLVM to optimize the final output?</p>",
        "id": 447318727,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719431788
    },
    {
        "content": "<p>No that's not right.<br>\nOptimisation happens before linking.</p>",
        "id": 447319030,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719431882
    },
    {
        "content": "<p>Also <a href=\"http://link.rs\">link.rs</a> is not a linker</p>",
        "id": 447319415,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719431960
    },
    {
        "content": "<p>Sorry, just to level set. I am an overly ambitious app developer (with a background mostly in web). Not a compiler dev.</p>",
        "id": 447319446,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719431966
    },
    {
        "content": "<p>cool <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 447319503,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719431981
    },
    {
        "content": "<p>most of the compiler devs here were overly ambitious app devs not that long ago. 2 years or so in my case.</p>",
        "id": 447319668,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719432005
    },
    {
        "content": "<p>Sorry, the short replies there were just cos someone was interrupting me here in the real world!</p>",
        "id": 447320111,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719432085
    },
    {
        "content": "<p>No worries! I am greatful for any feedback at all.</p>",
        "id": 447320534,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719432152
    },
    {
        "content": "<p>So the <code>link.rs</code> file is part of a kind of ad-hoc build system. It makes shell commands to invoke linkers with various command line options.</p>",
        "id": 447320726,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719432189
    },
    {
        "content": "<p>Ok, so lets take a step back. Under the build instructions <a href=\"https://www.roc-lang.org/examples/GoPlatform/README.html\">here</a> I was confused about the \"why\" behind some of these things. My naive assumptions -&gt; the things confusing me are:</p>\n<ol>\n<li>The platform is entirely independent of the app using it. -&gt; This makes it confusing why <code>roc gen-stub-lib</code> and <code>roc build --lib main.roc --output platform/libapp.so</code> exist.</li>\n<li>it is possible for the roc compiler to consume an independently built platform -&gt;  Prebuilt platforms require <code>.rh</code> and <code>.rm</code> files, but those require calling <code>roc preprocess-host main.roc</code> on an <code>app</code> module (which in turn references the platform you are trying to build those files for <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span> )</li>\n<li>host == the language a roc platform is built in, platform == the implementation of the roc platform api in a host language</li>\n<li>When compiling an object is built for the roc app then \"linked\" via either the surgical or legacy linkers to the prebuilt platform</li>\n<li>I am getting most of these steps from <a href=\"https://www.roc-lang.org/examples/GoPlatform/README.html\">here</a> then trying to apply them to the couple wasm examples in the roc repo.</li>\n</ol>",
        "id": 447323859,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719432826
    },
    {
        "content": "<blockquote>\n<ol>\n<li>The platform is entirely independent of the app using it. -&gt; This makes it confusing whyÂ <code>roc gen-stub-lib</code>Â andÂ <code>roc build --lib main.roc --output platform/libapp.so</code>Â exist.</li>\n</ol>\n</blockquote>\n<p>I think those two commands are creating what <a href=\"https://github.com/roc-lang/roc/tree/main/crates#building-a-roc-application\">this diagram</a> calls the \"app library\" and \"platform library\".</p>\n<blockquote>\n<ol start=\"2\">\n<li>it is possible for the roc compiler to consume an independently built platform -&gt; Prebuilt platforms requireÂ <code>.rh</code>Â andÂ <code>.rm</code>Â files, but those require callingÂ <code>roc preprocess-host main.roc</code>Â on anÂ <code>app</code>Â module (which in turn references the platform you are trying to build those files forÂ <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span>Â )</li>\n</ol>\n</blockquote>\n<p>I think what's happening here is that you are building the platform with a dummy app that will later gets replaced with a real one. Definitely a bit roundabout, and that's because we are dealing with existing toolchains for other languages that we didn't create. They don't have command line arguments for the exact thing Roc wants to do, so we end up doing tricks like this. Most Roc app developers just download the prebuilt platform and never have to think about this weird stuff.</p>\n<blockquote>\n<ol start=\"3\">\n<li>host == the language a roc platform is built in, platform == the implementation of the roc platform api in a host language</li>\n</ol>\n</blockquote>\n<p>platform = host + some Roc code on top to present a nice API to apps<br>\nSo no the platform is not just in a host language, it is a combination of host language and Roc.</p>\n<blockquote>\n<ol start=\"4\">\n<li>When compiling an object is built for the roc app then \"linked\" via either the surgical or legacy linkers to the prebuilt platform</li>\n</ol>\n</blockquote>\n<p>Yep </p>\n<blockquote>\n<ol start=\"5\">\n<li>I am getting most of these steps fromÂ <a href=\"https://www.roc-lang.org/examples/GoPlatform/README.html\">here</a>Â then trying to apply them to the couple wasm examples in the roc repo.</li>\n</ol>\n</blockquote>\n<p>OK</p>",
        "id": 447340650,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1719437540
    },
    {
        "content": "<blockquote>\n<p>The platform is entirely independent of the app using it. -&gt; This makes it confusing why roc gen-stub-lib and roc build --lib main.roc --output platform/libapp.so exist.</p>\n</blockquote>\n<p>We don't need gen-stub-lib anymore you can use <code>roc build --lib main.roc --output platform/libapp.so</code> instead, the plan is to remove it. See <a href=\"https://github.com/roc-lang/roc/pull/6696\">#6696</a>. There is currently a bug in pre-process host that overwrites the dylib, and we want to change that API.</p>",
        "id": 447340756,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719437598
    },
    {
        "content": "<p>I put together some slides to try and give an overview of platform development, you can find the thread <a href=\"#narrow/stream/303057-gatherings/topic/Roc.20Online.20Meetup.20May.202024/near/440575947\">https://roc.zulipchat.com/#narrow/stream/303057-gatherings/topic/Roc.20Online.20Meetup.20May.202024/near/440575947</a></p>",
        "id": 447340945,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719437698
    },
    {
        "content": "<p>WASM is a little special in some ways though.</p>",
        "id": 447340987,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719437712
    },
    {
        "content": "<p>That <a href=\"https://www.roc-lang.org/examples/GoPlatform/README.html\">https://www.roc-lang.org/examples/GoPlatform/README.html</a> example only shows how to build for surgical linking, which is not applicable for WASM -- and coupled closely with the current cli which we plan to change.</p>",
        "id": 447341405,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719437906
    },
    {
        "content": "<p>So it is not going to be a helpful guide for what you are trying to do</p>",
        "id": 447341437,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719437931
    },
    {
        "content": "<p>I would recommend you look at another platform like <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-zig\">https://github.com/lukewilliamboswell/roc-platform-template-zig</a> or <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-wasi\">https://github.com/lukewilliamboswell/roc-platform-template-wasi</a> or <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">https://github.com/lukewilliamboswell/roc-platform-template-go</a></p>",
        "id": 447341528,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719437978
    },
    {
        "content": "<p>Thank you both. Your comments have already been very helpful, and I still have a lot more reading to do! I get that it is still early in the project, and there are some hacks in place to use existing toolchains, but I think the work you all are doing here is really stellar. I would love to continue contributing. I will hapily take guidance If you have a good next issue for me to chew on given what we talked about today while I digest what you both have shared with me.</p>",
        "id": 447353087,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719443550
    },
    {
        "content": "<p>Just saw you moved messages <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> </p>\n<blockquote>\n<p>In short the current status is that I am stuck on <a href=\"https://github.com/roc-lang/roc/pull/6808\">https://github.com/roc-lang/roc/pull/6808</a>, specifically I don't have a great setup on linux so it's been slow to fix this, and I've gotten distracted by other things I can make progress on.</p>\n</blockquote>\n<p>My linux environment is all setup and ready to go, so this could be a good fit working towards enabling more independent platforms.</p>",
        "id": 447356758,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719444823
    },
    {
        "content": "<p>Sounds great. I've been using that PR for refactor host in basic-cli to test it. They're kind of paired, so when the PRs are ready we can do a new release of both and not block anyone. If you can look into that I would appreciate it, let me know if you have any questions. <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> has provided a lot of guidance with that API change too. <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> has also done some investigation, but I haven't looked into that yet.</p>",
        "id": 447364685,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719449533
    }
]