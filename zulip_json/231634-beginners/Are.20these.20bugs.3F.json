[
    {
        "content": "<p>Hi, I am just beginning to experiment with the language, and I have encountered several surprising behaviors. I didn't see these on the issues page, but I might have just missed them. </p>\n<p>What I was trying to do was implement a function which takes two lists, and determines if the first is in the second. It's the same as Haskell's <code>isInfixOf</code>.</p>\n<p>This was my first attempt</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;sublist&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.8.1/x8URkvfyi9I0QhmVG98roKBUs_AZRkLFwFJVJ3942YA.tar.br&quot; }\n    imports [pf.Stdout]\n    provides [main] to pf\n\nmain = Stdout.line &quot;hi&quot;\n\ncontains = \\a, b -&gt;\n    List.len a &lt;= List.len b &amp;&amp; (List.startsWith b a || contains a (List.dropFirst b 1))\n\nexpect contains [1] [1]\n</code></pre></div>\n<p>That will stackoverflow, even though  <code>List.startsWith [1] [1]</code> is true, which should short circuit <code>||</code>, which I assume is an inclusive or.</p>\n<p>Next I tried</p>\n<div class=\"codehilite\"><pre><span></span><code>contains = \\a, b -&gt;\n    when (a, b) is\n        ([], _) -&gt; Bool.true\n        (_, []) -&gt; Bool.false\n        (_, [_, .. as tail]) -&gt;\n            List.len a &lt;= List.len b &amp;&amp; (List.startsWith b a || contains a tail)\n</code></pre></div>\n<p>For this it complained that my pattern matching isn't exhaustive because \"Other possibilities include <code>( [_, ..], _ )</code>\". I do not understand how that other possibility is not part of my patterns.</p>\n<p>The below works, but I am curious to know if I have misunderstandings or if the above are bugs. Thanks!</p>\n<div class=\"codehilite\"><pre><span></span><code>contains = \\a, b -&gt;\n    when (a, b) is\n        ([], _) -&gt; Bool.true\n        (_, []) -&gt; Bool.false\n        (_, _) -&gt;\n            List.len a &lt;= List.len b &amp;&amp; (List.startsWith b a || contains a (List.dropFirst b 1))\n</code></pre></div>",
        "id": 425135086,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1709744316
    },
    {
        "content": "<p><code>||</code> doesn't currently short-circuit. It's a change we've talked about but haven't implemented yet!</p>",
        "id": 425153182,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709750233
    },
    {
        "content": "<blockquote>\n<p>For this it complained that my pattern matching isn't exhaustive because \"Other possibilities include ( [_, ..], _ )\"</p>\n</blockquote>\n<p>I'll file an issue for that</p>",
        "id": 425154479,
        "sender_full_name": "Anton",
        "timestamp": 1709750681
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6561\">#6561</a></p>",
        "id": 425157866,
        "sender_full_name": "Anton",
        "timestamp": 1709751649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Are.20these.20bugs.3F/near/425153182\">said</a>:</p>\n<blockquote>\n<p><code>||</code> doesn't currently short-circuit. It's a change we've talked about but haven't implemented yet!</p>\n</blockquote>\n<p>Oh, well that would explain that. Which gives me the idea to do it like this. (I also found the format command)</p>\n<div class=\"codehilite\"><pre><span></span><code>contains = \\a, b -&gt;\n    List.len a\n    &lt;= List.len b\n    &amp;&amp; (\n        if\n            List.startsWith b a\n        then\n            Bool.true\n        else\n            contains a (List.dropFirst a 1))\n</code></pre></div>\n<p>Thanks for responding. Cool language!</p>",
        "id": 425182956,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1709761453
    }
]