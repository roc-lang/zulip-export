[
    {
        "content": "<p>Another example of questionable behaviour in my opinion.<br>\nHere is a piece of code i had:</p>\n<div class=\"codehilite\"><pre><span></span><code>parse_template_recursive : List U8, List (Spec _) -&gt; Result (List (Spec _)) [InvalidTemplate([MissingClosingBracket])]\nparse_template_recursive = |template_codes, acc|\n    when split_first_segment(template_codes) is\n        Err(ListWasEmpty) -&gt; Ok(acc)\n        Err(MissingClosingBracket) -&gt; MissingClosingBracket |&gt; InvalidTemplate |&gt; Err\n        Ok({before : [&#39;{&#39;, .. ,&#39;}&#39;], others}) -&gt; crash(&quot;Not implemented yet&quot;)\n        Ok({before, others}) -&gt; crash(&quot;Not implemented yet&quot;)\n</code></pre></div>\n<p><code>split_first_segment</code> may currently return only 2 types of errors: <code>ListWasEmpty</code> and <code>MissingClosingBracket</code>, but in the feature may be extended with other errors. Should the pattern matcher be smart enough to understand this:</p>\n<div class=\"codehilite\"><pre><span></span><code>parse_template_recursive : List U8, List (Spec _) -&gt; Result (List (Spec _)) [InvalidTemplate([MissingClosingBracket])]\nparse_template_recursive = |template_codes, acc|\n    when split_first_segment(template_codes) is\n        Err(ListWasEmpty) -&gt; Ok(acc)\n        Err(reason) -&gt; reason |&gt; InvalidTemplate |&gt; Err\n        Ok({before : [&#39;{&#39;, .. ,&#39;}&#39;], others}) -&gt; crash(&quot;Not implemented yet&quot;)\n        Ok({before, others}) -&gt; crash(&quot;Not implemented yet&quot;)\n</code></pre></div>\n<p>Because currently even if I do handle a case when <code>ListWasEmpty</code> has being thrown I still get an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\nSomething is off with the body of the\n`parse_template_recursive` definition:\n120│   parse_template_recursive : List U8, List (Spec _) -&gt; Result (List (Spec _)) [InvalidTemplate([MissingClosingBracket])]\n121│   parse_template_recursive = |template_codes, acc|\n122│&gt;      when split_first_segment(template_codes) is\n123│&gt;          Err(ListWasEmpty) -&gt; Ok(acc)\n124│&gt;          Err(reason) -&gt; reason |&gt; InvalidTemplate |&gt; Err\n125│&gt;          Ok({before : [&#39;{&#39;, .. ,&#39;}&#39;], others}) -&gt; crash(&quot;Not implemented yet&quot;)\n126│&gt;          Ok({before, others}) -&gt; crash(&quot;Not implemented yet&quot;)\nThis `when` expression produces:\n    [\n        Err [InvalidTemplate [\n            ListWasEmpty,\n            MissingClosingBracket,\n        ]],\n        Ok (List (Match.Spec c)),\n    ]\nBut the type annotation on\n`parse_template_recursive` says it should be:\n    Result (List (Match.Spec c)) [InvalidTemplate [MissingClosingBracket]]\n</code></pre></div>",
        "id": 512543547,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1744807333
    },
    {
        "content": "<blockquote>\n<p>Should the pattern matcher be smart enough to understand this</p>\n</blockquote>\n<p>Yes, it should be but it is quite limited at the moment. I'll make an issue.</p>",
        "id": 512550626,
        "sender_full_name": "Anton",
        "timestamp": 1744809266
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7748\">#7748</a></p>",
        "id": 512602163,
        "sender_full_name": "Anton",
        "timestamp": 1744822297
    },
    {
        "content": "<p>No this should not work</p>",
        "id": 512612468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744823823
    },
    {
        "content": "<p>As much as it feels it should</p>",
        "id": 512612521,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744823830
    },
    {
        "content": "<p>Roc has no gradual typing</p>",
        "id": 512612559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744823836
    },
    {
        "content": "<p>The type of <code>reason</code> is <code>[ListWasEmpty, MissingClosingBracket]</code></p>",
        "id": 512613006,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744823901
    },
    {
        "content": "<p>Think of it like this. If you had an enum <code>Color: [Red, Green, Blue]</code>. Even if the function is guaranteed to return <code>Blue</code>, the type is still <code>Color</code>. The same thing is happening here</p>",
        "id": 512613458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744823974
    },
    {
        "content": "<p>I know this has been discussed in the past, but I don't think there are any current plans to add gradual typing for tag unions.</p>",
        "id": 512613936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744824043
    },
    {
        "content": "<blockquote>\n<p>No this should not work</p>\n</blockquote>\n<p>Yeah, I was doubting as well when I wrote up the issue. I'll close it.</p>",
        "id": 512624192,
        "sender_full_name": "Anton",
        "timestamp": 1744825612
    },
    {
        "content": "<p>Got it, thanks.</p>",
        "id": 512667986,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1744832350
    }
]