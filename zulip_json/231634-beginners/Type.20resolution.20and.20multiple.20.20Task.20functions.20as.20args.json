[
    {
        "content": "<p>I have run into what appears to be a bug with type resolution when passing multiple arguments containing Task functions into another function - from what I can tell, the compiler is having trouble doing error accumulation across these multiple arguments.</p>\n<p>I am attempting to adapt a function from:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">dispatchToolCalls</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">ToolCall</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">(Str -&gt; Task Str *) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Message</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">_</span>\n<span class=\"nv\">dispatchToolCalls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">toolCallList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">toolHandlerMap</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\">#...</span>\n</code></pre></div>\n<p>To:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">dispatchToolCalls</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">ToolCall</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">logger</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Message</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">_</span>\n<span class=\"nv\">dispatchToolCalls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">toolCallList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">toolHandlerMap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">logger</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\">#...</span>\n</code></pre></div>\n<h3>Important details:</h3>\n<ul>\n<li>The first function signature works without issue, even though the tasks contained in the Dict may all have different error types. (Thus, error accumulation appears to be working across the contents of the Dict.)</li>\n<li>However, adding the <code>logger</code> causes an error. </li>\n<li>Note that the same error is produced regardless of whether it is an optional record field, or simply a normal argument.</li>\n<li>I have tried various combinations of type variables, underscores, and asterisk, all without success.</li>\n<li>Changing the logger to have an identical type signature to the functions in the Dict also did not help.</li>\n</ul>\n<h3>Error message:</h3>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ../package/Tools.roc ────────────────────\n\nThis 2nd argument to this function has an unexpected type:\n117│                          logger! &quot;Calling tool: $(toolName)&quot;\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe argument is an anonymous function of type:\n    {} -&gt; Task […] *\n\nBut this function needs its 2nd argument to be:\n    {} -&gt; Task […] *\n\nTip: Any connection between types must use a named type variable, not\na *!\n</code></pre></div>\n<p>It seems to me like this should be a viable type signature, and that the underscore should be able to accumulate the types of the <code>Dict</code> tasks as well as the logger. Is there a correct way to write this type signature that I am missing? Am I mistaken in believing this should be possible?</p>",
        "id": 491424012,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735665886
    },
    {
        "content": "<p>Can you share your code? It doesn't have to be a minimal reproduction</p>",
        "id": 491425164,
        "sender_full_name": "Anton",
        "timestamp": 1735666745
    },
    {
        "content": "<p>Yeah, let me commit and push a new branch.</p>",
        "id": 491426441,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735667614
    },
    {
        "content": "<p><strong>package/Tools.roc</strong></p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">dispatchToolCallsLogged</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">ToolCall</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nf\">(Str -&gt; Task {} *) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Message</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">_</span>\n<span class=\"nv\">dispatchToolCallsLogged</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">toolCallList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">toolHandlerMap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">logger</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">toolCalls</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">toolCallList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">toolMessages</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">toolCalls</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">toolMessages</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"nx\">toolCalls</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">toolCall</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">toolName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">toolCall</span><span class=\"p\">.</span><span class=\"nx\">function</span><span class=\"p\">.</span><span class=\"nx\">name</span>\n<span class=\"w\">                </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">toolHandlerMap</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">toolCall</span><span class=\"p\">.</span><span class=\"nx\">function</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">                    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">handler</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"nx\">logger</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Calling tool: $(toolName)\"</span>\n<span class=\"w\">                        </span><span class=\"nv\">toolMessage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">callTool</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"nx\">toolCall</span><span class=\"w\"> </span><span class=\"nx\">handler</span>\n<span class=\"w\">                        </span><span class=\"nv\">updatedToolMessages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">toolMessages</span><span class=\"w\"> </span><span class=\"nx\">toolMessage</span>\n<span class=\"w\">                        </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Step</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">toolCalls</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">dropFirst</span><span class=\"w\"> </span><span class=\"nx\">toolCalls</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">toolMessages</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">updatedToolMessages</span><span class=\"w\"> </span><span class=\"p\">})</span>\n\n<span class=\"w\">                    </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"nx\">logger</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Couldn't find tool: $(toolName)\"</span>\n<span class=\"w\">                        </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Step</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">toolCalls</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">dropFirst</span><span class=\"w\"> </span><span class=\"nx\">toolCalls</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nx\">toolMessages</span><span class=\"w\"> </span><span class=\"p\">})</span>\n\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">ListWasEmpty</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Done</span><span class=\"w\"> </span><span class=\"nx\">toolMessages</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 491427350,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735668153
    },
    {
        "content": "<p><a href=\"https://github.com/imclerran/roc-ai/tree/add-tool-logging\">https://github.com/imclerran/roc-ai/tree/add-tool-logging</a></p>",
        "id": 491427373,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735668171
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 491430869,
        "sender_full_name": "Anton",
        "timestamp": 1735670343
    },
    {
        "content": "<p>Your roc-lang badge on the repo is pretty cool</p>",
        "id": 491430885,
        "sender_full_name": "Anton",
        "timestamp": 1735670353
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">dispatchToolCallsLogged</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">ToolCall</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Message</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n</code></pre></div>",
        "id": 491431920,
        "sender_full_name": "Anton",
        "timestamp": 1735671112
    },
    {
        "content": "<p>I can't completely explain why though given everything in the \"important details\" section</p>",
        "id": 491432293,
        "sender_full_name": "Anton",
        "timestamp": 1735671375
    },
    {
        "content": "<p>The details of error accumulation can be quite tricky</p>",
        "id": 491432471,
        "sender_full_name": "Anton",
        "timestamp": 1735671491
    },
    {
        "content": "<p>I assume it's the \"any connection\" in the tip, the <code>toolHandlerMap</code> and <code>logger</code> are connected through error accumulation</p>\n<div class=\"codehilite\"><pre><span></span><code>Tip: Any connection between types must use a named type variable, not\na *!\n</code></pre></div>",
        "id": 491433300,
        "sender_full_name": "Anton",
        "timestamp": 1735672056
    },
    {
        "content": "<p>This could also be happening: two <code>*</code> in one definition means that these two types can not be the same, while in truth they could actually be the same.</p>",
        "id": 491433523,
        "sender_full_name": "Anton",
        "timestamp": 1735672204
    },
    {
        "content": "<p>Hmm.. thats really weird! I tried a bunch of combinations of type variables, etc. I'm picking up on this after not having touched the bug out of frustration in a few weeks, so some of my troubleshooting happened a while ago. Would have sworn I tried using matched type variables, but maybe I only used something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>dispatchToolCallsLogged : List ToolCall, Dict Str (Str -&gt; Task Str a), (Str -&gt; Task {} b) -&gt; Task (List Message) _\n</code></pre></div>",
        "id": 491434114,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735672603
    },
    {
        "content": "<p>PS: Feel free to grab the roc badge! <img alt=\":roc:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/5f42d943.png\" title=\"roc\"></p>",
        "id": 491434142,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735672629
    },
    {
        "content": "<p>I'm going to adapt handleToolCalls accordingly, and see if this actually works in practice when used in an example where the type of logger is actually defined, but I imagine if it type checks here, it should still typecheck fine.</p>",
        "id": 491434288,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735672745
    },
    {
        "content": "<p>Hmm.. well it type checks just fine, but when I pass Stdout.line into logger, nothing is ever printed, despite tools clearly being called by the program. So thats a weird, maybe, but probably not related bug. And If I leave the record empty to use the default, I get a \"no lambda set found\" error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nno lambda set found for (`ai.Tools.IdentId(47)`, []): LambdaSet {\n    set: [\n        ( ai.Tools.48, []),\n    ],\n    args: [\n        InLayout(STR),\n    ],\n    ret: InLayout(\n        290,\n    ),\n    representation: InLayout(\n        291,\n    ),\n    full_layout: InLayout(\n        292,\n    ),\n}\nLocation: crates/compiler/mono/src/layout.rs:1590:17\n</code></pre></div>",
        "id": 491435636,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735673746
    }
]