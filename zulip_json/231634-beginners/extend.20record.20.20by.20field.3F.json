[
    {
        "content": "<p>Is there  syntax to  do  something  like  that <br>\ninst1 = { one : 1 ,  two :2 }<br>\n{inst1  &amp;  three : 3}  # this  does not  work, I want  copy of  inst1 and  additional field, regardless of what inst1 holds (in my case it  not so easy to know  that)</p>",
        "id": 350299540,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1681645737
    },
    {
        "content": "<p>No. Roc's type system doesn't allow that. The <code>&amp;</code> operator expects the argument and result records to have the same type, and that means they must have the same fields. That's how records are defined.</p>\n<p>A Dict would be the appropriate structure for what you're trying to do. The values all must have the same type. If you have values of different types you can put them in a tagged union.</p>\n<p>This stuff can feel restrictive if you're used to dynamic languages but the restrictions tend to guide you towards fast and reliable code.</p>",
        "id": 350307130,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1681648320
    },
    {
        "content": "<p>what  is tagged  union ?? Ok I see there is  chapter  for that, maybe I will figure this out</p>",
        "id": 350310214,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1681649245
    }
]