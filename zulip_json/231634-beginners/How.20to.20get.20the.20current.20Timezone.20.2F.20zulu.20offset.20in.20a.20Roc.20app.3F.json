[
    {
        "content": "<p>So I see that <code>Utc.now</code> provides time in Zulu time. Just wondering if there's a way to access the system's timezone?</p>",
        "id": 436178183,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444072
    },
    {
        "content": "<p>There isn't currently, but we could add it.</p>",
        "id": 436178469,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714444206
    },
    {
        "content": "<p>How would you do this using rust?</p>",
        "id": 436178486,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714444214
    },
    {
        "content": "<p>Looks like <code>chrono::offset::TimeZone</code></p>",
        "id": 436178731,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444339
    },
    {
        "content": "<p>If we are happy adding <code>chrono</code> as a dependency I can add that.</p>",
        "id": 436179016,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714444486
    },
    {
        "content": "<p>Or happy to talk you through how to add another effect for the platform</p>",
        "id": 436179039,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714444498
    },
    {
        "content": "<p>It's pretty straightforward</p>",
        "id": 436179061,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714444513
    },
    {
        "content": "<p>I have never written any Rust, but been thinking its high time to learn as I participate more in the Roc community...</p>",
        "id": 436179185,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444570
    },
    {
        "content": "<p>On a little more digging, looks like chrono doesn't actually give anything useable? <br>\n<a href=\"https://stackoverflow.com/questions/59603665/how-do-you-find-the-local-timezone-offset-in-rust\">https://stackoverflow.com/questions/59603665/how-do-you-find-the-local-timezone-offset-in-rust</a></p>\n<p>Looks like this will get the TZ offset, not sure yet if thats part of chrono or std lib, or something else.<br>\n<code>Local.timestamp(0, 0).offset().fix().local_minus_utc()</code></p>",
        "id": 436179397,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444686
    },
    {
        "content": "<p>Anyway, I'd love to go through the process of adding a new effect for the platform.</p>",
        "id": 436179513,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444766
    },
    {
        "content": "<p>Can confirm Local is part of the chrono library.</p>",
        "id": 436179649,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444827
    },
    {
        "content": "<p>I'm not sure how we want to represent an <code>Offset</code>... so this might need tweaking...</p>\n<p>Add host&lt;-&gt;platform interface in <code>platform/Effect.roc</code>, something like </p>\n<div class=\"codehilite\"><pre><span></span><code>offsetTime : Effect U128\n</code></pre></div>\n<p>Add platform&lt;-&gt;app interface in <code>platform/Utc.roc</code>, something like</p>\n<div class=\"codehilite\"><pre><span></span><code>## Some offset thing...\noffset : Task U128 *\noffset =\n    Effect.offsetTime\n    |&gt; Effect.map Ok\n    |&gt; InternalTask.fromEffect\n</code></pre></div>\n<p>Add the Fx implemenation in the host <code>crates/host/src/lib.rs</code>, something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_offsetTime</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">U128</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u128</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// implement using chrono::offset::TimeZone</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// return value to roc</span>\n<span class=\"w\">    </span><span class=\"n\">roc_std</span>::<span class=\"n\">U128</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 436179658,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714444831
    },
    {
        "content": "<p>chrono is just giving offset in seconds from Zulu time.</p>",
        "id": 436179744,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444888
    },
    {
        "content": "<p>So shouldn't exceed <code>60 * 60 * 14</code> which could be as small as an <code>I16</code>.</p>",
        "id": 436179873,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714444946
    },
    {
        "content": "<p>Offset can be +14 hours -12 hours I believe. Its either that or -14/+12.</p>",
        "id": 436180009,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714445037
    },
    {
        "content": "<p>Thanks for the pointers on adding an effect to the platform. I'll give it a go. Gonna have to learn the basics of setting up my rust dev environment, etc, before I can actually implement it lol.</p>",
        "id": 436180407,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714445272
    },
    {
        "content": "<p>This looks relevant <br>\n<a href=\"https://docs.rs/chrono/latest/chrono/offset/struct.FixedOffset.html\">https://docs.rs/chrono/latest/chrono/offset/struct.FixedOffset.html</a></p>",
        "id": 436180484,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714445300
    },
    {
        "content": "<p>Yeah, I also picked up rust so I could contribute to roc <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span></p>",
        "id": 436180564,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714445355
    },
    {
        "content": "<p>I'm not familiar with chrono, but at a glance I'd recommend not using FixedOffset for any reason <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436180711,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445430
    },
    {
        "content": "<p>one of the things I've learned the hard way is that \"fixed UTC offset\" is the same thing as UTC, but it has a name that incorrectly suggests it's taking time zones into account when it isn't</p>",
        "id": 436180791,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445482
    },
    {
        "content": "<p>for example, the information contained in \"UTC time foo, with an offset of +2\" is:</p>\n<ul>\n<li>UTC time foo</li>\n<li>as an inconvenience, you must subtract 2 to use it</li>\n</ul>",
        "id": 436180919,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445542
    },
    {
        "content": "<p>I'm seeing <code>chrono::Local</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Local</span><span class=\"p\">.</span><span class=\"n\">timestamp</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">offset</span><span class=\"p\">().</span><span class=\"n\">fix</span><span class=\"p\">().</span><span class=\"n\">local_minus_utc</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>which returns 3600 seconds for one particular poster....</p>",
        "id": 436180967,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714445578
    },
    {
        "content": "<p>in contrast, a date plus a time zone (e.g. \"time foo in the Chicago time zone\") can be converted to/from an UTC time - and of course people often want to specify dates add times without the time zone, but you know what their time zone is and so can apply it to the time they specified to get UTC</p>",
        "id": 436181145,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445649
    },
    {
        "content": "<p>but if the user gives you a particular date and time, and all you have recorded is their \"UTC offset\" - that doesn't tell you their time zone</p>",
        "id": 436181199,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445691
    },
    {
        "content": "<p>many time zones have rules that are more complex than a fixed UTC offset that changes once or twice per year</p>",
        "id": 436181270,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445737
    },
    {
        "content": "<p>and even in the common case in the US (for example), if all you have is a fixed UTC offset, you don't know whether that offset was recorded during daylight savings time or not, so you don't know which direction to adjust it in if you cross a DST boundary</p>",
        "id": 436181419,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445812
    },
    {
        "content": "<p>to sum up:</p>\n<ul>\n<li>UTC is useful</li>\n<li>Date/time + time zone can be converted to UTC (and is separately useful for other reasons) </li>\n<li>UTC offset carries no more information than UTC, and is a footgun because it gives the misimpression of representing time zone information - so I think it's best not to use it for any reason!</li>\n</ul>",
        "id": 436181670,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714445954
    },
    {
        "content": "<p>Ok, this looks like the better solution then <a href=\"https://docs.rs/iana-time-zone/latest/iana_time_zone/fn.get_timezone.html\">https://docs.rs/iana-time-zone/latest/iana_time_zone/fn.get_timezone.html</a></p>",
        "id": 436183582,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714446990
    },
    {
        "content": "<p>That all makes a lot of sense.  Definitely don't want to do away with UTC time, but I think it would be useful to have a way to move between UTC time and Local time. </p>\n<p>I can see that pure Zulu offset has some definite ambiguities, if you are trying to determine the timezone from the offset. Depending on your usecase, zulu offset may be exactly what you want. If you simply want to convert a zulu time to a local time to display to the user, offset is exactly what you're looking for. If you want to store a time longterm, and particularly if you're recording it without date info attached.</p>",
        "id": 436183749,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714447107
    },
    {
        "content": "<p>See also <a href=\"https://www.iana.org/time-zones\">https://www.iana.org/time-zones</a></p>",
        "id": 436183832,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714447175
    },
    {
        "content": "<p>Seems to me that both offset and timezone are useful? If all the platform provides is timezone string, but you want to display a time in local time to the user, you still need a way to convert TZ string to an offset. Maybe that should be in a package rather than the platform, but still has its applications.</p>",
        "id": 436183938,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714447221
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/2yVVLsgu7glfu8QScA1C3TvA/Screenshot-2024-04-30-at-13.20.28.png\">Screenshot-2024-04-30-at-13.20.28.png</a><br>\nSo the solution is to build a Roc package that provides the tz data</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/2yVVLsgu7glfu8QScA1C3TvA/Screenshot-2024-04-30-at-13.20.28.png\" title=\"Screenshot-2024-04-30-at-13.20.28.png\"><img src=\"/user_uploads/22008/2yVVLsgu7glfu8QScA1C3TvA/Screenshot-2024-04-30-at-13.20.28.png\"></a></div>",
        "id": 436184016,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714447275
    },
    {
        "content": "<p>The data files look like ^^ in a standardised format so they can be parsed. We could code gen the implementation similar to how we generate the mapping between codepoints and unicode properties like in the roc-land/unicode package.</p>",
        "id": 436184128,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714447331
    },
    {
        "content": "<p>Correct me if I'm wrong, I believe what we want is:</p>\n<ul>\n<li>a platform effect to provide the TZ string</li>\n<li>a package to convert TZ string to local offset</li>\n</ul>",
        "id": 436184250,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714447424
    },
    {
        "content": "<blockquote>\n<p>The Time Zone Database (called tz, tzdb or zoneinfo) contains code and<br>\ndata that represent the history of local time for many representative<br>\nlocations around the globe.  It is updated periodically to reflect<br>\nchanges made by political bodies to time zone boundaries, UTC offsets,<br>\nand daylight-saving rules.</p>\n</blockquote>",
        "id": 436184258,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714447429
    },
    {
        "content": "<p>Though, I'm not sure it's worth including the full history for every single time zone</p>",
        "id": 436184417,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714447519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20get.20the.20current.20Timezone.20.2F.20zulu.20offset.20in.20a.20Roc.20app.3F/near/436184417\">said</a>:</p>\n<blockquote>\n<p>Though, I'm not sure it's worth including the full history for every single time zone</p>\n</blockquote>\n<p>Hmm... depending on how big the dataset is, could include the data as a CSV or similar and perform a query on that for historical dates, while hardcoding current info. </p>\n<p>Alternatively it could be network dependent, but that seems sub optimal.</p>",
        "id": 436184878,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714447801
    },
    {
        "content": "<p>If it's a package then application and platform authors can opt out of using it if they dont need it. Once the source is compiled it's probably not that large. Maybe there is a more compact way of representing it in source code too? like encode into a data table and include that in the source code?</p>",
        "id": 436185267,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714448033
    },
    {
        "content": "<p>That makes sense… are you thinking like a large dict of TZ data? Or how would Roc store a data table like that?</p>",
        "id": 436185494,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714448159
    },
    {
        "content": "<p>I'm thinking we could hash the TZ string, and use that as a Dict key</p>",
        "id": 436185501,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714448162
    },
    {
        "content": "<p>Maybe for the value we have a <code>List {utcFrom: U64, offset:U16}</code> or something</p>",
        "id": 436185836,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714448377
    },
    {
        "content": "<p>Where from is the beginning date as offset from epoch when the offset came into use?</p>",
        "id": 436186050,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714448510
    },
    {
        "content": "<p>That would still require list iteration… maybe hash the from and TZ string for O(1) lookup</p>",
        "id": 436186127,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714448545
    },
    {
        "content": "<p>There's an implementation for the <code>Hasher</code> ability floating around somewhere. I don't think it needs to be cryptographically secure or anything.  In <code>crates/compiler/builtins/roc/Dict.roc</code> we have the <code>LowLevelHasher</code> which is an implementation of wyhash. I'm not sure if there is any different using a <code>Str</code> key or hashing it first. <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  would know</p>",
        "id": 436186216,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714448614
    },
    {
        "content": "<p>Maybe there is a smarter data structure to put all this in? I'm not great with this stuff</p>",
        "id": 436186333,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714448678
    },
    {
        "content": "<p>Just caught up here. How big is this database in practice and how often does it actually change. Are we talking 10s of timezones, 100s, other?</p>",
        "id": 436187315,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449278
    },
    {
        "content": "<p>Just trying to get a feel for the data before suggesting anything.</p>",
        "id": 436187350,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449300
    },
    {
        "content": "<p><del>Thousands of TimeZones</del></p>",
        "id": 436187403,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449328
    },
    {
        "content": "<p>Maybe between 5-20 rules per timezone</p>",
        "id": 436187432,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449350
    },
    {
        "content": "<p>Maybe only hundreds of TZ's</p>",
        "id": 436187449,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449362
    },
    {
        "content": "<p>Ok, so 597 timezones</p>",
        "id": 436187628,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449455
    },
    {
        "content": "<p>Ok</p>",
        "id": 436187707,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449487
    },
    {
        "content": "<p>A bunch of timezones share common rules</p>",
        "id": 436187723,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449501
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Tz_database\">https://en.wikipedia.org/wiki/Tz_database</a></p>",
        "id": 436187800,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449552
    },
    {
        "content": "<p>This is the best summary I've found</p>",
        "id": 436187812,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449560
    },
    {
        "content": "<p>My gut feeling is that the best would be to write a program to read the timezones database and generate roc code for a package (can also try having the roc package directly read the time zone database, but I would guess that would be slow).</p>",
        "id": 436187827,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449571
    },
    {
        "content": "<p>I would push for using a tag instead of a string for the timezones.</p>",
        "id": 436187852,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449590
    },
    {
        "content": "<p>Of course with conversion</p>",
        "id": 436187877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449602
    },
    {
        "content": "<p>Cause if a specific version of the time zone package doesn't know about a timezone, won't matter if it is a string or a tag. That said, I guess there could be value in making this more pluggable if the database changes often and you would rather load it at runtime.</p>",
        "id": 436188053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449670
    },
    {
        "content": "<p>Anyway, this is small enough that if you use a tag, linear search (or binary for that matter) might beat a dictionary. If you use a string, probably should just make the string the key to a dictionary</p>",
        "id": 436188113,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714449715
    },
    {
        "content": "<p>Another approach that seems common is to use the database on the users host system. For example the go std library has this </p>\n<p><strong>func LoadLocation(name string) (*Location, error)</strong><br>\nLoadLocation returns the Location with the given name.</p>\n<p>If the name is \"\" or \"UTC\", LoadLocation returns UTC. If the name is \"Local\", LoadLocation returns Local.</p>\n<p>Otherwise, the name is taken to be a location name corresponding to a file in the IANA Time Zone database, such as \"America/New_York\".</p>\n<p>LoadLocation looks for the IANA Time Zone database in the following locations in order:</p>\n<ol>\n<li>the directory or uncompressed zip file named by the ZONEINFO environment variable</li>\n<li>on a Unix system, the system standard installation location</li>\n<li>$GOROOT/lib/time/zoneinfo.zip</li>\n<li>the time/tzdata package, if it was imported</li>\n</ol>",
        "id": 436188449,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714449916
    },
    {
        "content": "<p>I think it would be nice to have a package that includes the database, then it would <strong>just work</strong> wherever you write Roc code.</p>",
        "id": 436188601,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714450022
    },
    {
        "content": "<p>Yeah, I think you want both.</p>",
        "id": 436188620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714450046
    },
    {
        "content": "<p>One that is 100% roc with nicer types</p>",
        "id": 436188639,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714450065
    },
    {
        "content": "<p>One for loading from the system and being able to update with a file</p>",
        "id": 436188705,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714450093
    },
    {
        "content": "<p>This is how it's done in Elm <a href=\"https://github.com/justinmimbs/timezone-data/blob/10.1.1/src/TimeZone.elm\">https://github.com/justinmimbs/timezone-data/blob/10.1.1/src/TimeZone.elm</a></p>",
        "id": 436188746,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714450131
    },
    {
        "content": "<p>A platform could provide:</p>\n<div class=\"codehilite\"><pre><span></span><code>Utc := I128\nTimeZone := Str\nLocal := I128\n\nnow : Task Utc *\nname : TimeZone -&gt; Task Str [NotFound]\nsystemTimeZone : Task TimeZone [NotAvailable]\noffset : Utc, TimeZone -&gt; Local\n</code></pre></div>\n<p>A package could provide:</p>\n<div class=\"codehilite\"><pre><span></span><code>Utc := I128\nTimeZone := Str\nLocal := I128\n\nname : TimeZone -&gt; Result Str [NotFound]\noffset : Utc, TimeZone -&gt; Local\n</code></pre></div>\n<p>Using the platform to get the offset would use less memory as the IANA database is not included, at the expense of requiring a <code>Task</code> which would search for the database on the system - which may not be available in some environments.</p>",
        "id": 436190349,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714451387
    },
    {
        "content": "<p>I think the database could be ingested as code which would cost binary size, but would be fast and as long as timezones don't update too much, not that bad for dependency Management</p>",
        "id": 436193325,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714453214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20get.20the.20current.20Timezone.20.2F.20zulu.20offset.20in.20a.20Roc.20app.3F/near/436183749\">said</a>:</p>\n<blockquote>\n<p>If you simply want to convert a zulu time to a local time to display to the user, offset is exactly what you're looking for.</p>\n</blockquote>\n<p>it's a trap!<br>\noffsets are not stable over time; the offset for a time in this week may be different to the offset for a time next week.</p>\n<p>to accurately convert any UTC time to a local time, you <strong>need</strong> to know the user's local Timezone Identifier (like <code>Australia/Sydney</code>)</p>",
        "id": 436366749,
        "sender_full_name": "RKB",
        "timestamp": 1714517778
    }
]