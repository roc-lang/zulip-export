[
    {
        "content": "<p>Here's a little app that doesn't type check</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;main&quot;\n    packages { cli: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.5.0/Cufzl36_SnJ4QbOoEmiJ5dIpUxBvdB3NEySvuH82Wio.tar.br&quot; }\n    imports [cli.Stdout]\n    provides [main] to cli\n\nadd : { x : I64, y ? I64 } -&gt; I64\nadd = \\{ x, y ? 1 } -&gt; x + y\n\nmain =\n    a = add { x: 1, y: 1 }\n    b = add { x: 2 }\n    out = Num.toStr (a + b)\n    Stdout.line out\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc check main.roc\n── TYPE MISMATCH ──────────────────────────────────────── bug_example/main.roc ─\n\nThis 1st argument to add has an unexpected type:\n\n11│      b = add { x: 2 }\n                 ^^^^^^^^\n\nThe argument is a record of type:\n\n    { … }\n\nBut add needs its 1st argument to be:\n\n    { y : Int Signed64, … }\n\nTip: Looks like the y field is missing.\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 146 ms.\n</code></pre></div>\n<p>It turns out the fix is to make the record type open</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;main&quot;\n    packages { cli: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.5.0/Cufzl36_SnJ4QbOoEmiJ5dIpUxBvdB3NEySvuH82Wio.tar.br&quot; }\n    imports [cli.Stdout]\n    provides [main] to cli\n\nadd : { x : I64, y ? I64 }* -&gt; I64\nadd = \\{ x, y ? 1 } -&gt; x + y\n\nmain =\n    a = add { x: 1, y: 1 }\n    b = add { x: 2 }\n    out = Num.toStr (a + b)\n    Stdout.line out\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc run main.roc\n5\n</code></pre></div>\n<p>This behavior goes against my intuition for how open/closed records and optional fields should interact. I would expect that if I've specified a closed record with an optional field then values of that type should always have the required fields, and could also have the optional fields. The flip side is that I can kind of see how optional fields are kind like additional fields in an open record, so maybe this is expected.</p>\n<p>Is this expected? If so why? Is it possible to change how type inference works so that optional fields work with closed records, or is there something fundamental about the unification algorithm where this is the way it has to be? Is this behavior a good thing in some cases? If this isn't desired is it more like a bug or a missing/todo feature?</p>",
        "id": 405218053,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701382862
    },
    {
        "content": "<p>looks like a bug to me.</p>",
        "id": 405218216,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701382929
    },
    {
        "content": "<p>Nice, I really was at the point where I thought I was missing something <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I made an issue a couple days ago <a href=\"https://github.com/roc-lang/roc/issues/6101\">https://github.com/roc-lang/roc/issues/6101</a></p>",
        "id": 405218551,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701383082
    },
    {
        "content": "<p>I think there is another related issue, 1 sec</p>",
        "id": 405218669,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701383145
    },
    {
        "content": "<p>For a more concrete example, I have this in Array2D</p>\n<div class=\"codehilite\"><pre><span></span><code>WalkOptions a : {\n    direction : [Forwards, Backwards],\n    orientation ? [Rows, Cols],\n    start ? Index,\n}a\n\nwalk : Array2D a, state, WalkOptions *, (state, a, Index -&gt; state) -&gt; state\n\nwalkUntil : Array2D a, state, WalkOptions *, (state, a, Index -&gt; [Continue state, Break state]) -&gt; state\n</code></pre></div>\n<p>Those optional fields don't work unless the record is open, and I can't share the type between functions without the type variable</p>",
        "id": 405218687,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701383154
    },
    {
        "content": "<p>I thought it might be related to <a href=\"https://github.com/roc-lang/roc/issues/5660\">https://github.com/roc-lang/roc/issues/5660</a> but on second thoughts I think this is different.</p>",
        "id": 405218955,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701383255
    },
    {
        "content": "<p>I really couldn't say for sure, but I think you're right that it's different.<br>\nI'll keep digging in. I had started to write some tests and trace the unification steps, but then I second guessed myself.</p>",
        "id": 405219258,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701383388
    },
    {
        "content": "<p>Is this the same bug?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Color</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nv\">mk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">red</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">green</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">blue</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Color</span><span class=\"w\"> </span><span class=\"c1\"># comment out this line and it all works</span>\n<span class=\"nv\">mk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"nx\">red</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">green</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">blue</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">blue</span><span class=\"p\">}</span>\n\n<span class=\"nv\">mkRed</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Color</span>\n<span class=\"nv\">mkRed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">red</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">mk</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">red</span><span class=\"p\">}</span>\n\n<span class=\"nv\">mkGreen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Color</span>\n<span class=\"nv\">mkGreen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">green</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">mk</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">green</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># This 1st argument to mk has an unexpected type:</span>\n\n<span class=\"c1\"># xx│  mkGreen = \\green -&gt; mk {green}</span>\n<span class=\"c1\">#                             ^^^^^^^</span>\n\n<span class=\"c1\"># The argument is a record of type:</span>\n\n<span class=\"c1\">#     { green : U8 }</span>\n\n<span class=\"c1\"># But mk needs its 1st argument to be:</span>\n\n<span class=\"c1\">#     {</span>\n<span class=\"c1\">#         blue ? U8,</span>\n<span class=\"c1\">#         green ? U8,</span>\n<span class=\"c1\">#         red : U8,</span>\n<span class=\"c1\">#     }</span>\n\n<span class=\"c1\"># Tip: Looks like the red and blue fields are missing.</span>\n</code></pre></div>",
        "id": 405708147,
        "sender_full_name": "timotree",
        "timestamp": 1701645959
    },
    {
        "content": "<p>Yes, exact same bug!</p>",
        "id": 405708450,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701646070
    },
    {
        "content": "<p>If you add a <code>*</code> to the end of the record in the type sig for <code>mk</code> it should work</p>",
        "id": 405708599,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701646131
    },
    {
        "content": "<p>It seems like this is an issue with closed records but not open records</p>",
        "id": 405708636,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701646165
    },
    {
        "content": "<p>Here's a currently passing <code>uitest</code> for open record type inference</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;test&quot; provides [main] to &quot;./platform&quot;\n\nfields : {x : I64, y ? I64 }* -&gt; I64\nfields = \\{x, y ? 0} -&gt; x + y\n\nmain = (\n    fields {x: 0, y: 1},\n#          ^^^^^^^^^^^^ { x : I64, y : I64 }\n    fields {x: 2}\n#          ^^^^^^ { x : I64, y ? I64 }\n)\n</code></pre></div>\n<p>Are these types correct? Clearly it's working right now, but I could just as easily see an argument that the inferred types should be</p>\n<div class=\"codehilite\"><pre><span></span><code>    fields {x: 0, y: 1},\n#          ^^^^^^^^^^^^ { x : I64, y ? I64 }\n    fields {x: 2}\n#          ^^^^^^ { x : I64, y ? I64 }\n</code></pre></div>\n<p>or maybe</p>\n<div class=\"codehilite\"><pre><span></span><code>    fields {x: 0, y: 1},\n#          ^^^^^^^^^^^^ { x : I64, y : I64 }\n    fields {x: 2}\n#          ^^^^^^ { x : I64 }\n</code></pre></div>",
        "id": 405909603,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701723237
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\"><pre><span></span><code>    fields {x: 0, y: 1},\n#          ^^^^^^^^^^^^ { x : I64, y : I64 }\n</code></pre></div>\n<p>is right. <code>fields : {x : I64, y ? I64 }</code> is polymorphic in the presence of <code>y</code>, but the specialization is specialized to y existing</p>",
        "id": 405911382,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701723942
    },
    {
        "content": "<p>Re</p>\n<div class=\"codehilite\"><pre><span></span><code>    fields {x: 2}\n#          ^^^^^^ { x : I64, y ? I64 }\n</code></pre></div>\n<p>I think this is fine if the semantic behavior is that <code>y</code> is not provided, and should be treated as missing in the optionality regard. I think if <code>?</code> is a weak variable, it's always treated as such, even though the naming isn't right there. Maybe it should be called \"ExplicitlyMissing\" or something</p>",
        "id": 405911663,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701724050
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    fields {x: 2}\n#          ^^^^^^ { x : I64 }\n</code></pre></div>\n<p>I think we don't want to collapse to a type like this, because that wouldn't typecheck unless (1) we also make the inferred specialized record open, or (2) perform inference via subtyping. I think (1) is wrong, and (2) is probably too complicated</p>",
        "id": 405911848,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701724123
    },
    {
        "content": "<p>Ah I see, the mental model I was building was kind of treating this like subtyping, so that helps.</p>\n<p>So then for a closed record I think it makes sense for type inferance to be exactly the same in this case. And I guess in all cases, as long as there are no additional open-record-only fields.</p>",
        "id": 405915817,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701725906
    }
]