[
    {
        "content": "<p>In response to <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405350559\">https://roc.zulipchat.com/#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405350559</a></p>\n<blockquote>\n<p>There is a function <code>Str.startsWithScalar</code>but no <code>Str.endsWithScalar</code>. Is this on purpose?</p>\n</blockquote>\n<p>Probably not. I think there are some deliberate holes where <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> has particular API ideas (for example unicode) but frequently if a builtin is missing it's because no one has implemented it yet. If you'd like to add it I'd ask in <a class=\"stream\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing\">#contributing</a> first, but the code change is probably pretty straightforward. </p>\n<blockquote>\n<p>Is there an easy way to slice a string? For example myStr[1:]? (Drop the first element in a memory efficient way)<br>\nMy solution was [convert to graphemes list, drop first, join to string]</p>\n</blockquote>\n<p>I think this is a place where the Str builtins will need some time to mature due to trickiness around unicode. Just from your question <code>myStr[1:]</code> would be dropping a U8, while in your code example you're dropping a grapheme. Eventually there should be memory efficient ways  ways to handle this. I saw in <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>'s solution that he split the string into U8s up front and iterated over that, which is a different way to avoid the extra <code>joinWith</code>s.</p>\n<blockquote>\n<p>Is the <code>Str.joinWith</code> smart enough to see, that no allocation is needed?</p>\n</blockquote>\n<p>That's a really good question. I don't know enough about Roc's string representation to know if there's an opportunity for optimization in that case. If you want to dig into I'd maybe start <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/bitcode/src/str.zig#L1841\">here</a> and <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/bitcode/src/str.zig#L1757\">here</a></p>",
        "id": 405394581,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701447248
    },
    {
        "content": "<p><code>Str.joinWith</code> will not allocate if it is a small string generated. Otherwise, it will just do a single large allocation and copy over data. I guess we could technically add a special case for <code>Str.joinwith str \"\"</code>.</p>",
        "id": 405399492,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701448977
    },
    {
        "content": "<p>Is there a logical difference between a grapheme and a Scalar? Or is it just the representation as Str vs U32?</p>\n<p>I did not use toUtf8 on purpose, since it would drop the first byte, and not the first Scalar/Grapheme. But there is no function Str.fromScalars.</p>\n<p>I would love to make a contribution. I will see, if I am able to do it.</p>",
        "id": 405399871,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701449097
    },
    {
        "content": "<blockquote>\n<p>I did not use toUtf8 on purpose, since it would drop the first byte, and not the first Scalar/Grapheme</p>\n</blockquote>\n<p>In general I totally get it, but for AoC the input is basically always ascii, right?</p>",
        "id": 405400707,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701449394
    },
    {
        "content": "<p>If I understand correct (which I totally could be off). A grapheme is a group of scalars. Often it is just one, but it can be more (as is common with emoji)</p>",
        "id": 405402667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701450029
    },
    {
        "content": "<p>yeah unicode handling is complicated enough that for several reasons I actually want to remove it from the builtins and into <a href=\"https://github.com/roc-lang/unicode\">https://github.com/roc-lang/unicode</a>, but that's got a ways to go before it's production-ready <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 405405877,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701450915
    },
    {
        "content": "<p>For AoC in my experience the input has always been ASCII to toUtf8 works great.</p>",
        "id": 405405925,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701450932
    },
    {
        "content": "<p>I have a PR in unicode that needs some love, I haven't forgotten about it, just deprioritised for AoC stuff last month or so. We should have a reasonable text segmentation implementation for breaking into extended grapheme clusters, but there's still a fair bit to do.</p>",
        "id": 405406447,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701451092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/string.20manipulation.20questions/near/405402667\">said</a>:</p>\n<blockquote>\n<p>If I understand correct (which I totally could be off). A grapheme is a group of scalars. Often it is just one, but it can be more (as is common with emoji)</p>\n</blockquote>\n<p>If I understand the docs correctly, then a group of graphemes is called a glyph.</p>\n<p><a href=\"https://www.roc-lang.org/builtins/Str#graphemes\">https://www.roc-lang.org/builtins/Str#graphemes</a></p>\n<p>So a Grapheme and a Scalar seems to be the same</p>",
        "id": 405410331,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701452509
    },
    {
        "content": "<p>Yeah, a grapheme mighty need multiple U8s to be utf8 encoded, but all grapheme can be encoded as a single U32. That doesn't mean all U32s are valid graphemes</p>",
        "id": 405410806,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701452729
    },
    {
        "content": "<p>without going down the Unicode rabbit hole too much, a scalar is a single integer, whereas a grapheme is one or more integers (and there's no upper limit on how many there can be in a single grapheme), even thought both scalars and graphemes render as what we perceive to be an individual \"character\"</p>",
        "id": 405411235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701452899
    },
    {
        "content": "<p>I think glyph would be a nice word for this except glyph already has a different (but related) meaning, and it seems like it would be confusing to reuse that term for this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 405411371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701452961
    },
    {
        "content": "<p>Ah beans, I got <code>codeunit</code> and <code>grapheme</code> mixed up, didn't I?</p>",
        "id": 405411567,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701453041
    },
    {
        "content": "<p>potentially! Code units are also integers (every scalar is a code unit, but not every code unit is a scalar)</p>",
        "id": 405412122,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701453246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/string.20manipulation.20questions/near/405411235\">said</a>:</p>\n<blockquote>\n<p>without going down the Unicode rabbit hole too much, a scalar is a single integer, whereas a grapheme is one or more integers (and there's no upper limit on how many there can be in a single grapheme), even thought both scalars and graphemes render as what we perceive to be an individual \"character\"</p>\n</blockquote>\n<p>Ok. I expected, that <code>s |&gt; Str.toScalars |&gt; List.len == s  |&gt; Str.graphemes |&gt; List.len</code> But this is not true:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    glyph = &quot;üë©‚Äçüë©‚Äçüë¶‚Äçüë¶&quot;\n    scalarCount =  glyph |&gt; Str.toScalars |&gt; List.len\n    graphemesCount = glyph |&gt; Str.graphemes |&gt; List.len\n\n    scalarCount == graphemesCount\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>roc test test.roc\nglyph : Str\nglyph = &quot;üë©‚Äçüë©‚Äçüë¶‚Äçüë¶&quot;\n\nscalarCount : Nat\nscalarCount = 7\n\ngraphemesCount : Nat\ngraphemesCount = 4\n\n1 failed and 0 passed in 845 ms.\n</code></pre></div>\n<p>My conclusion is, that strings are complicated <span aria-label=\"face with peeking eye\" class=\"emoji emoji-1fae3\" role=\"img\" title=\"face with peeking eye\">:face_with_peeking_eye:</span></p>",
        "id": 405416174,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701454900
    },
    {
        "content": "<p>yeah this is part of the reason I want to put it in a separate package haha</p>",
        "id": 405417330,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701455425
    },
    {
        "content": "<p>with lots of documentation!</p>",
        "id": 405417335,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701455429
    },
    {
        "content": "<p>in general, my feeling is that:</p>\n<ul>\n<li>tons of string use cases are easy to understand and not error prone, and it makes sense to have a <code>Str</code> module for those</li>\n<li>as soon as you say \"I want to access some subset of a string\" (other than specifically splitting a string by another string), we have taken an express train to Unicode Edge Case City and the learning curve required to avoid mistakes skyrockets (but it's not necessarily obvious that this is what has happened!)</li>\n<li>I hope that by putting these use cases in a different package with lots of documentation, it makes it easier to realize that this is what's happened, and even though it's innately complicated, you at least have the resources in one place to learn how to do what you need to do</li>\n</ul>",
        "id": 405417815,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701455637
    },
    {
        "content": "<p>So for AoC, I just use Str.toUtf8 and ignore the real world.</p>\n<p>For the real world, there is no clear answer to the question \"give me the first 'unit' of a string\". Even <code>Str.toScalars |&gt; List.first </code> or <code>Str.graphemes |&gt; List.first</code> are not correct for a string, that starts with <span aria-label=\"family woman woman boy boy\" class=\"emoji emoji-1f469-200d-1f469-200d-1f466-200d-1f466\" role=\"img\" title=\"family woman woman boy boy\">:family_woman_woman_boy_boy:</span>.</p>\n<p>I can work with that for the next 24 days <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 405418920,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701456131
    }
]