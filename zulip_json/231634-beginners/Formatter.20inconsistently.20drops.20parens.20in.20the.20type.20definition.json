[
    {
        "content": "<p>Formatter transforms this type</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">d</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">d</span>\n</code></pre></div>\n<p>Originally, <code>(a, (b -&gt; c))</code> is a tuple with two items <code>a</code> and <code>b -&gt; c</code><br>\nBut after formatting it becomes <code>(a, b -&gt; c)</code> which is a function with two arguments</p>\n<p>Created an issue<br>\n<a href=\"https://github.com/roc-lang/roc/issues/6426\">https://github.com/roc-lang/roc/issues/6426</a></p>",
        "id": 418143346,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706208453
    },
    {
        "content": "<p>The above example is still only one argument as a tuple.<br>\nx : (a, b-&gt;c) is equivalent to x: (a, (b-&gt;c)) which is why the parenthesis were dropped.</p>\n<p>x has one argument, tuple, with values a and function b-&gt;c</p>\n<p>Two separate arguments would look like this.<br>\nx: a, (b-&gt;c) -&gt; d</p>",
        "id": 418148771,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706210445
    },
    {
        "content": "<p>The parser sees it differently (as I described, it assumes <code>((a, b) -&gt; c) -&gt; d</code>). So it's a bug for the parser then</p>",
        "id": 418149505,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706210722
    },
    {
        "content": "<p>You're right.  This grammar is ambiguous.<br>\n<code>(a, b-&gt; c) -&gt; d</code><br>\nIs it a tuple with type <code>a</code> and type function <code>b -&gt; c</code>, or is it a function with two args <code>a, b -&gt; c</code></p>",
        "id": 418150645,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706211142
    },
    {
        "content": "<p>Those extra parenthesis should not be dropped.</p>",
        "id": 418150947,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706211263
    },
    {
        "content": "<p>Your original type is correct. So formatter bug. It needs to put parens around closure type definitions if they aren't top level.</p>",
        "id": 418151206,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706211356
    },
    {
        "content": "<p>I guess this was missed ambiguity that got added when we added the tuple syntax</p>",
        "id": 418151395,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706211419
    },
    {
        "content": "<p>Just to document an additional edge cases:<br>\n<code>x: (a, (b, c -&gt; d)) -&gt; e</code><br>\n<code>x: (a, b, (c-&gt;d)) -&gt; e</code><br>\n<code>x: a, (b, c -&gt; d) -&gt; e</code><br>\n<code>x: a, b, (c -&gt; d) -&gt; e</code></p>",
        "id": 418189950,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706230827
    },
    {
        "content": "<p>the actual bug would be in the parser, right?</p>",
        "id": 418360941,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706308768
    },
    {
        "content": "<p>It is the formatter failing.</p>\n<p>Slightly simpler example:</p>\n<p>Original: <code>x: (A, (B -&gt; C))</code><br>\nFormatted <code>x : (A, B -&gt; C)</code></p>\n<p>It correctly parses the first expession as a tuple that contains a value <code>A</code> and a function <code>B -&gt; C</code>.<br>\nWhen formatting and printing that back out, it needs to put the function <code>B -&gt; C</code> into parens otherwise, it will be invalid.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>parsed expression</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Annotation(\n    Identifier(\n        &quot;x&quot;,\n    ),\n    Tuple {\n        elems: [\n            Apply(\n                &quot;&quot;,\n                &quot;A&quot;,\n                [],\n            ),\n            Function(\n                [\n                    Apply(\n                        &quot;&quot;,\n                        &quot;B&quot;,\n                        [],\n                    ),\n                ],\n                Apply(\n                    &quot;&quot;,\n                    &quot;C&quot;,\n                    [],\n                ),\n            ),\n        ],\n        ext: None,\n    },\n),\n</code></pre></div>\n</div></div>\n<p>Formatting failed and gave us <code>(A, B -&gt; C)</code>, that said, it does parse the wrong expression correctly.<br>\n<code>(A, B -&gt; C)</code> is a function <code>A</code> and <code>B</code> to <code>C</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>formatted then reparsed expression</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Annotation(\n    Identifier(\n        &quot;x&quot;,\n    ),\n    Function(\n        [\n            Apply(\n                &quot;&quot;,\n                &quot;A&quot;,\n                [],\n            ),\n            Apply(\n                &quot;&quot;,\n                &quot;B&quot;,\n                [],\n            ),\n        ],\n        Apply(\n            &quot;&quot;,\n            &quot;C&quot;,\n            [],\n        ),\n    ),\n),\n</code></pre></div>\n</div></div>",
        "id": 418363550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706310385
    }
]