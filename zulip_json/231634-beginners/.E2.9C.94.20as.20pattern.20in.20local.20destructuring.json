[
    {
        "content": "<p>Should using an <code>as</code> pattern inside a local destructuring be possible?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">sample</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kt\">Test</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Test</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 487312659,
        "sender_full_name": "lue",
        "timestamp": 1733854005
    },
    {
        "content": "<p>I'd suggest we take the as out of the parens, but yes, this should definitely be a thing that works if it doesn't already</p>",
        "id": 487313781,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733854428
    },
    {
        "content": "<p>What do a and b mean here, and what is the longform version of your intended assignment?</p>",
        "id": 487314366,
        "sender_full_name": "jan kili",
        "timestamp": 1733854644
    },
    {
        "content": "<p>a and b are pattern variables here. Extra parens for clarity:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">sample</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"kt\">Test</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Test</span><span class=\"w\"> </span><span class=\"p\">{})</span>\n\n<span class=\"w\">    </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>right now, putting an <code>as</code> anywhere in a (nested) pattern used on the left of a local destructuring doesn't compile.</p>",
        "id": 487314551,
        "sender_full_name": "lue",
        "timestamp": 1733854715
    },
    {
        "content": "<p>your intension is to do not write it in 2 lines ?</p>\n<div class=\"codehilite\"><pre><span></span><code>b = Test 42\n(Test a) = b\n</code></pre></div>",
        "id": 487314811,
        "sender_full_name": "Ghislain",
        "timestamp": 1733854816
    },
    {
        "content": "<p>yeah, not surprising, past lists, I don't think as is used regularly</p>",
        "id": 487314818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733854818
    },
    {
        "content": "<p>So probably has bugs</p>",
        "id": 487314849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733854830
    },
    {
        "content": "<p>the example is just something minimal. splitting into multiple can become a bit more involved if you have more nested <code>as</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>sample =\n    ((Test a) as first, (....) as second, (....) as third) = triple\n\n    ....\n</code></pre></div>\n<p>I don't even want to advocate for <code>as</code>, just wondering if there was a reason.<br>\nFor maybe extra context, I'm transpiling elm (which allows as everywhere) to roc which is why I noticed this in the first place.</p>\n<p>Do yall think I should open an issue for this? Edit: <a href=\"https://github.com/roc-lang/roc/issues/7328\">https://github.com/roc-lang/roc/issues/7328</a></p>",
        "id": 487315188,
        "sender_full_name": "lue",
        "timestamp": 1733854961
    },
    {
        "content": "<p><del>In that longer example, I see no need for <code>as</code> because it's safer to do those two acts in two steps</del><br>\n<del>Act 1: naming known pieces</del><br>\n<del>Act 2: naming unknown pieces</del></p>\n<p><del>Act 1 (safe):</del></p>\n<div class=\"codehilite\"><pre><span></span><code>triple : (Foo, Bar, Baz)\n\n(first, second, third) = triple\n</code></pre></div>\n<p><del>Act 2 (unsafe):</del></p>\n<div class=\"codehilite\"><pre><span></span><code>Test a = first\n</code></pre></div>\n<p><del>Act 2 (safe):</del></p>\n<div class=\"codehilite\"><pre><span></span><code>when first is\n    Test a -&gt; ...\n    Toast a -&gt; ...\n    _ -&gt; ...\n</code></pre></div>\n<p>Edit: nvm, you're assuming type safety, which is reasonable</p>",
        "id": 487315746,
        "sender_full_name": "jan kili",
        "timestamp": 1733855161
    },
    {
        "content": "<p>Yeah, probably just never used. So bugs. Please file with the minimal repro. I assume a workaround would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>(first, second, third) = triple\nTest a = first\n.... = second\n.... = third\n</code></pre></div>",
        "id": 487315799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733855169
    },
    {
        "content": "<p>Oh, yeah, and as <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> pointed out, if there are multiple variants to those tags, you need to use a <code>when ... is</code></p>",
        "id": 487315990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733855237
    },
    {
        "content": "<blockquote>\n<p>Act 2: naming unknown pieces</p>\n</blockquote>\n<p>to clarify, <code>Test</code> is just a wrapper tag, not from a union</p>",
        "id": 487316000,
        "sender_full_name": "lue",
        "timestamp": 1733855239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"522669\">lue</span> has marked this topic as resolved.</p>",
        "id": 488874892,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734106363
    }
]