[
    {
        "content": "<p>Hi everyone! <br>\nI have a question.</p>\n<p>I'm wondering if it's possible to use <code>Roc's tags</code> in low-level languages like <code>C++</code>, <code>Rust</code>, <code>Zig</code>, etc.<br>\nIf no - then why, and if yes - why no one does it.<br>\nOn surface, this feature looks like just anonimous <code>Rust enums</code>, where <code>enum</code> is not defined upfront by user, but is instead defined automatically by the compiler.</p>\n<p>I'm also curious about <code>closed/open</code> feature which is related to <code>tags</code> as well as <code>records</code>.</p>\n<p>Sorry if I'm asking in the wrong place.<br>\nThanks!</p>",
        "id": 436850278,
        "sender_full_name": "Alex",
        "timestamp": 1714729608
    },
    {
        "content": "<p><a href=\"#narrow/stream/231634-beginners/topic/What.20actually.20*is*.20a.20tag.3F/near/397828496\">Heres a rather long conversation related to tags</a></p>",
        "id": 436851246,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714729964
    },
    {
        "content": "<p>From memory that was an interesting read going into the weeds of what they are.</p>",
        "id": 436851287,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714729981
    },
    {
        "content": "<p>To answer your question more specifically, I'm not sure if it's possible. It's certainly possible to simulate them I guess <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 436851390,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714730023
    },
    {
        "content": "<p>Thanks, I'll take a look.</p>",
        "id": 436857891,
        "sender_full_name": "Alex",
        "timestamp": 1714732682
    },
    {
        "content": "<p>any language could do it for sure</p>",
        "id": 436858348,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714732840
    },
    {
        "content": "<p>OCaml has had a very similar language feature (which Roc's tags were originally based on) for a long time, called <a href=\"https://ocaml.org/manual/5.1/polyvariant.html\">polymorphic variants</a></p>",
        "id": 436858435,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714732880
    },
    {
        "content": "<p>I think one reason nobody does it is that Roc is the first language to try making them the primary sum type the language uses</p>",
        "id": 436858561,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714732925
    },
    {
        "content": "<p>OCaml also has traditional nominal sum types (like Rust enums) that must be declared up front, and the general recommendation is to use those instead of polymorphic variants - there's a section at the end of that linked article about their reasoning</p>",
        "id": 436858793,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714733021
    },
    {
        "content": "<p>my intuition was that the concerns they outlined wouldn't be problems in practice in Roc, and fortunately that has definitely worked out as I'd hoped <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436858917,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714733066
    },
    {
        "content": "<p>but it might not have!</p>",
        "id": 436858922,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714733070
    },
    {
        "content": "<p>another relevant factor is that before Ayaz came up with a nicer syntax for open/closed, the type annotation syntax was confusing to a lot of beginners (now it's fine though)</p>",
        "id": 436859044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714733141
    },
    {
        "content": "<p>so for all those reasons, the information that you can use them as a core language feature and have it be a nice experience is very new - we're the first ones to try that experiment - so it's not like other languages knew about that and chose to go a different way; rather, they didn't have the results of the experiment so it presumably wasn't even something on their radar!</p>",
        "id": 436859166,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714733191
    },
    {
        "content": "<p>I think it is also important to add that anything that is a roc tag could be represented as a rust Enum. It just might be less convenient to do so cause in rust. you will have to explicitly name a bunch of this that roc would build automatically.</p>",
        "id": 436903332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714748770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc's.20tags/near/436858561\">said</a>:</p>\n<blockquote>\n<p>I think one reason nobody does it is that Roc is the first language to try making them the primary sum type the language uses</p>\n</blockquote>\n<p>I don’t mean to rain on anybody’s parade, but the OCaml veteran Andreas Rossberg created a blockchain language called <a href=\"https://internetcomputer.org/docs/current/motoko/main/getting-started/basic-concepts\">Motoko</a> a few years ago, where the only kind of sum type is polymorphic variants. The Motoko docs aren’t so great, but here’s someone blogging about the feature: <a href=\"https://kaipeacock.com/blog/motoko/using-variants/\">https://kaipeacock.com/blog/motoko/using-variants/</a></p>\n<p>The feature is more or less identical to Roc, I believe.<br>\nI don’t think Motoko is necessarily a good language, but I just thought I should point out some prior art <span aria-label=\"face with peeking eye\" class=\"emoji emoji-1fae3\" role=\"img\" title=\"face with peeking eye\">:face_with_peeking_eye:</span>.</p>",
        "id": 454473959,
        "sender_full_name": "Nick Smith",
        "timestamp": 1722088231
    },
    {
        "content": "<p>that's cool! It looks like Folkert had already <a href=\"https://github.com/roc-lang/roc/commit/5ad2823a236abf8fb068e291952f793713d273e2\">implemented tag unions</a> in Roc's compiler prior to <a href=\"https://github.com/dfinity/motoko-base/commit/e4efcb9bbd8c8eeff41b3d461b679e43d1d66f44\">Motoko's initial commit</a>, but I doubt Roc was on their radar. Most likely, we both independently decided polymorphic variants were worth trying out as the main sum type <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 454475510,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722089512
    }
]