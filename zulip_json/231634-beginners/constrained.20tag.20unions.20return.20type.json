[
    {
        "content": "<p>The tutorial (<a href=\"https://github.com/roc-lang/roc/blob/main/TUTORIAL.md#type-variables-in-tag-unions\">https://github.com/roc-lang/roc/blob/main/TUTORIAL.md#type-variables-in-tag-unions</a>)  <br>\nstates that the compiler infers</p>\n<div class=\"codehilite\"><pre><span></span><code>example : [Foo Str, Bar Bool]a -&gt; [Foo Str, Bar Bool]a\n</code></pre></div>\n<p>from</p>\n<div class=\"codehilite\"><pre><span></span><code>example = \\tag -&gt;\n    when tag is\n        Foo str -&gt; Bar (Str.isEmpty str)\n        Bar _ -&gt; Bar False\n        other -&gt; other\n</code></pre></div>\n<p>because</p>\n<blockquote>\n<p>The reason it has this type is the other -&gt; other branch. Take a look at that branch, and ask this question: \"What is the type of other?\" There has to be exactly one answer! It can't be the case that other has one type before the -&gt; and another type after it; whenever you see a named value in Roc, it is guaranteed to have the same type everywhere it appears in that scope.<br>\nFor this reason, any time you see a function that only runs a when on its only argument, and that when includes a branch like x -&gt; x or other -&gt; other, the function's argument type and return type must necessarily be equivalent.</p>\n</blockquote>\n<p>which does not make sense to me. I get that the type variables <code>a</code> need to have the same type because of the <code>other -&gt; other</code>.  But can't <code>other</code> be anything except <code>[Foo Str, Bar Bool]</code> (as those cases are matched already anyway)? Resulting in parts before the <code>a</code> not having to be the same and ultimately inferring <code>[Foo Str, Bar *]a -&gt; [Bar Bool]a</code> which coincides with the actual possible values as well?</p>",
        "id": 298121694,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1662808829
    },
    {
        "content": "<p>I think you are correct and that is a typo or mixed up example</p>",
        "id": 298143074,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662819887
    },
    {
        "content": "<p>But i am not an expert on the type unification</p>",
        "id": 298143093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662819905
    },
    {
        "content": "<p>Though it may be the case that unions share the same namespace, thus those two unify giving the same input and output type.</p>",
        "id": 298143171,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662819953
    },
    {
        "content": "<p>You are correct in a sense, but the model of unification that Roc uses doesn't permit the minimal inferred type you suggest. One perspective of types, which Roc uses heavily, is that they determine the layout in memory of a value, and that's what's causing the inferred <code>[Foo Str, Bar Bool]a -&gt; [Foo Str, Bar Bool]a</code> here. Let's say I pass another tag into this function, say <code>C</code>. Then on the left-hand side, when matching, we have that the value of C needs the memory layout of <code>[Foo Str, Bar Bool, C]</code>. Since <code>C</code> will enter the default <code>other -&gt; other</code> branch, and undergoes no transformation, it must have type (and corresponding layout) <code>[Foo Str, Bar Bool, C]</code> on the right-hand side as well. So that is why the unification rules force the right-hand type to include <code>Foo</code>, even when in principle it doesn't look like it needs to.</p>\n<p>Now, it is possible to reduce the type here to get the minimal one you suggest. But that requires flow typing and implicit conversions (i.e. you will need to modify the value of <code>other</code>, you can't return it as-is). Those ideas haven't been considered</p>",
        "id": 298145992,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1662821391
    },
    {
        "content": "<p>If I were to have the following function with a user provided type like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>paintRedBlue: [Red, Blue] -&gt; [Blue]\npaintRedBlue= \\paint -&gt; when paint is\n    Red -&gt; Blue\n    other -&gt; other\n</code></pre></div>\n<p>The argument of course <em>could</em> be any additional type, but let's stick to <code>[Red, Blue]</code> for the sake of argument.<br>\nIf this function is called with <code>Blue</code>, it will go into the <code>other</code> arm just like the example above. Will this be a runtime memory issue as well (as the memory layout includes <code>Red</code>), or does the problem purely come from the compiler generated type?</p>",
        "id": 298158665,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1662828715
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nSomething is off with the body of the paintRedBlue definition:\n\n4│       paintRedBlue: [Red, Blue] -&gt; [Blue]\n5│       paintRedBlue= \\paint -&gt;\n6│&gt;          when paint is\n7│&gt;              Red -&gt; Blue\n8│&gt;              other -&gt; other\n\nThis when expression produces:\n\n    [Blue, Red]\n\nBut the type annotation on paintRedBlue says it should be:\n\n    [Blue]\n\nTip: Looks like a closed tag union does not have the Red tag.\n\nTip: Closed tag unions can&#39;t grow, because that might change the size\nin memory. Can you use an open tag union?\n</code></pre></div>",
        "id": 298159585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829343
    },
    {
        "content": "<p>That is the current error, just for reference.</p>",
        "id": 298159616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829369
    },
    {
        "content": "<p>Works fine without the type annotation of course.</p>",
        "id": 298159649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829391
    },
    {
        "content": "<p>This does work, interestingly:</p>\n<div class=\"codehilite\"><pre><span></span><code>» paintRedBlue: [Red, Blue] -&gt; [Blue]\n… paintRedBlue= \\paint -&gt;\n…     when paint is\n…         Red -&gt; Blue\n…         Blue -&gt; Blue\n…\n… paintRedBlue Red\n\nBlue : [Blue]\n</code></pre></div>",
        "id": 298159768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829481
    },
    {
        "content": "<p>I guess it splits the types into two different unification with relayout, but when using a variable the types must be linked.</p>",
        "id": 298159817,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829515
    },
    {
        "content": "<p>I guess with the first example, we would have to deal with removing types from unions as they match to make it unify correctly. <code>other</code> is of type <code>[Red, Blue]</code>. Thus the output must be of type <code>[Red, Blue]</code>. Technically speaking, we could recognize that <code>Red</code> was already covered and view <code>other</code> as just <code>[Blue]</code>.</p>\n<p>This is similar to gradual typing in Typescript, where if you check for null, the possibility of null will be removed from a type and you can then use it as if null is not part of the type.</p>",
        "id": 298160312,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829816
    },
    {
        "content": "<p>That would then unify to the working function.</p>",
        "id": 298160358,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829847
    },
    {
        "content": "<p>But if we view <code>other</code> as just <code>[Blue]</code>, we would assume the wrong layout for it and would definitely need to explicitly codify the relayout that happens when converting from <code>[Red,Blue]</code> to <code>[Blue]</code></p>",
        "id": 298160492,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662829937
    },
    {
        "content": "<p>From my point of view such gradual typing makes a lot of sense. I assume it would work the same way for constrained type unions, relieving the restriction that the result and return type have to be the same when it can be seen they won't be the same. Implicit conversion on the other hand seems like a \"dirty\" way of modifying what is essentially an identity function to update the types.</p>",
        "id": 298163049,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1662831577
    },
    {
        "content": "<p>Also, the implicit conversion is a cost. Not sure how bad it could get, but it might involve copying around a decent bit of data in a complex tag with data stored inside of it instead of just being an enumeration.</p>",
        "id": 298163697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662832032
    },
    {
        "content": "<p>Yeah, the implicit conversion would be an implicit runtime conversion. That cost might be zero, but it might not be zero - and in general we should not assume it will be free. In the examples where you have a closed tag union, everything works out okay because the values you build up on the right hand side are not the values you've built up on the left hand sides of your <code>when</code> cases.</p>",
        "id": 298167282,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1662834561
    },
    {
        "content": "<p>That also means though if you do something like</p>\n<div class=\"codehilite\"><pre><span></span><code>paintRedBlue: [Red, Blue] -&gt; _\npaintRedBlue= \\paint -&gt;\n    when paint is\n        Red -&gt; paint\n        Blue -&gt; Red\n</code></pre></div>\n<p>the inferred type here is <code>[Red, Blue] -&gt; [Red, Blue]</code> even though we \"know\" that only <code>[Red]</code> will ever be returned - and for the same reason, because if we inferred <code>[Red]</code>, we would have to do an implicit conversion at runtime for the value of <code>paint</code> returned in <code>Red -&gt; paint</code>. And in that case, the runtime conversion would not be zero-cost!</p>",
        "id": 298167459,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1662834667
    },
    {
        "content": "<p>Nice example, I think it would be acceptable in such a scenario for the user to \"convince\" the compiler of <code>paint</code> being red in the upper arm by simply replacing <code>paint</code> with <code>Red</code>. But perhaps there is a scenario where there is no way for the user to convince the compiler of a narrower type, but using <code>when ... is</code> I cannot think of one.</p>",
        "id": 298168043,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1662835130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/231634-beginners/topic/constrained.20tag.20unions.20return.20type/near/298145992\">said</a>:</p>\n<blockquote>\n<p>Now, it is possible to reduce the type here to get the minimal one you suggest. But that requires flow typing</p>\n</blockquote>\n<p>flow typing (that is, where a type can be different inside the branches of a conditional than it was outside the conditional - such as a type losing its nullability inside an <code>if (x != null) { ... }</code> branch in TypeScript) also increases compile times</p>",
        "id": 298171093,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1662837467
    },
    {
        "content": "<p>so far we haven't seen any concrete use cases where this would be a significant benefit to real-world programs (although I can vaguely imagine it being useful if you want to partially handle some errors in a tag union of different errors...but, critically, I haven't seen any real Roc programs that want to try to do that yet), and I don't think it would be a great tradeoff to make the compiler slower for every Roc program essentially to make a certain niche of types less surprising but not significantly more useful</p>",
        "id": 298171268,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1662837609
    },
    {
        "content": "<p>then again, a counterpoint I'm open to is that some of the ways type inference of tag unions work is among the most surprising aspects of the language, so maybe if the compilation time cost can be made small enough, it might be worth it anyway!</p>",
        "id": 298171324,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1662837682
    },
    {
        "content": "<p>(to be fair, type inference and checking for arbitrary union types, including tag unions in the style of flow typing, can be made very fast, ie linear or near-linear with certain techniques like binary decision trees)</p>",
        "id": 298171756,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1662838034
    },
    {
        "content": "<p>there was a previous ideas thread about this kind of thing at <a href=\"#narrow/stream/304641-ideas/topic/Narrowing.20types.20in.20when.20expressions\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Narrowing.20types.20in.20when.20expressions</a> but it didn’t go anywhere</p>",
        "id": 298171923,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1662838156
    },
    {
        "content": "<p>oh yeah, I forgot about that!</p>",
        "id": 298172234,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1662838408
    },
    {
        "content": "<p>yeah if the impact on type-checking time would be insignificant in practice, I could definitely see it being worth it <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 298172309,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1662838450
    },
    {
        "content": "<p>the impact on runtime could not be insignificant, in some cases, due to the required conversions, so that’s a consideration too!</p>",
        "id": 298172361,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1662838533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/constrained.20tag.20unions.20return.20type/near/298171268\">said</a>:</p>\n<p>Perhaps this is an example for the partial error handling you mentioned:</p>\n<div class=\"codehilite\"><pre><span></span><code>removeNoncritical : List([LintingError, CompileError, FormattingError]) -&gt; List([CompileError])\nremoveNoncritical = \\errors -&gt; List.walk errors [] \\state, error -&gt;\n    when error is\n        LintingError | FormattingError -&gt; state\n        criticalError -&gt; List.append state criticalError\n</code></pre></div>",
        "id": 298172428,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1662838599
    },
    {
        "content": "<p>Could this alternative implementation of that example also receive such a minimal inferred return type of <code>List [CompileError]</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>removeNoncritical = \\errors -&gt; List.keepIf errors \\error -&gt;\n    when error is\n        LintingError | FormattingError -&gt; False\n        _ -&gt; True\n</code></pre></div>\n<p>Or would app developers sometimes need to write with flow typing in mind (verbosely hold the compiler's hand) to reap the full benefits of a flow typing system?</p>",
        "id": 298198206,
        "sender_full_name": "jan kili",
        "timestamp": 1662865942
    },
    {
        "content": "<p>At least in Haskell such an example would not work. Take <code>catMaybes</code> for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>catMaybes :: [Maybe a] -&gt; [a]\ncatMaybes = mapMaybe id\n\nmapMaybe          :: (a -&gt; Maybe b) -&gt; [a] -&gt; [b]\nmapMaybe _ []     = []\nmapMaybe f (x:xs) =\n let rs = mapMaybe f xs in\n case f x of\n  Nothing -&gt; rs\n  Just r  -&gt; r:rs\n</code></pre></div>\n<p>The only reason <code>catMaybes</code> works is because mapMaybe actually determines what items will go in the list. A different implementation (like yours) using e.g. a filter function wouldn't tell the compiler enough due to losing gained type information when inside the filter function after returning the boolean.</p>",
        "id": 298208315,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1662876910
    },
    {
        "content": "<p>I suspect I'm hitting some similar confusion. For me, this code has no error:</p>\n<div class=\"codehilite\"><pre><span></span><code>colorToRgb : Color a -&gt; Result [Rgb (Point3 a)] [KeyNotFound]\ncolorToRgb = \\color -&gt;\n    when color is\n        Rgb rgb -&gt; Ok (Rgb rgb)\n        Hsv hsv -&gt; Ok (Rgb (hsvToRgb hsv))\n        NamedColor name -&gt; Dict.get namedColors name\n</code></pre></div>\n<p>But this code fails:</p>\n<div class=\"codehilite\"><pre><span></span><code>colorToRgb : Color a -&gt; Result [Rgb (Point3 a)] [KeyNotFound]\ncolorToRgb = \\color -&gt;\n    when color is\n        Rgb rgb -&gt; Ok (Rgb rgb)\n        Hsv hsv -&gt; Ok (Rgb (hsvToRgb hsv))\n        _ -&gt; KeyNotFound\n</code></pre></div>\n<p>With this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>This when expression produces:\n\n    [\n        KeyNotFound,\n        Ok [Rgb (Point3 a)],\n    ]\n\nBut the type annotation on colorToRgb says it should be:\n\n    Result [Rgb (Point3 a)] [KeyNotFound]a\n</code></pre></div>\n<p>I actually want the former code, but I was trying to diagnose a similar issue elsewhere in the code when I hit this, and this one seems easier to explain. I really don't understand what the issue is. The type annotation <em>doesn't</em> say <code>[KeyNotFound]a</code></p>",
        "id": 403581737,
        "sender_full_name": "Tom",
        "timestamp": 1700655854
    },
    {
        "content": "<p>I think <code>_ -&gt; KeyNotFound</code> needs to be <code>_ -&gt; Err KeyNotFound</code>.</p>",
        "id": 403582274,
        "sender_full_name": "Anton",
        "timestamp": 1700656085
    },
    {
        "content": "<p>To return a Result instead of just KeyNotFound</p>",
        "id": 403582325,
        "sender_full_name": "Anton",
        "timestamp": 1700656111
    },
    {
        "content": "<p>I can see how the <code>a</code> can be distracting though</p>",
        "id": 403582346,
        "sender_full_name": "Anton",
        "timestamp": 1700656123
    },
    {
        "content": "<p>The type definition of Result may also help clear things up:</p>\n<div class=\"codehilite\"><pre><span></span><code>Result ok err : [Ok ok, Err err]\n</code></pre></div>",
        "id": 403582705,
        "sender_full_name": "Anton",
        "timestamp": 1700656257
    },
    {
        "content": "<p>Thanks for the pointer! Yeah, I understand how result works. I was just overlooking the missing Err, and yeah, the error message was misleading in this case.</p>",
        "id": 403616994,
        "sender_full_name": "Tom",
        "timestamp": 1700667314
    },
    {
        "content": "<p>I guess I haven't resolved my deeper error, though, and I wonder if I'm just overlooking things again. Here's some of the code:</p>\n<div class=\"codehilite\"><pre><span></span><code>Point3 a : (Frac a, Frac a, Frac a)\n\nColor a : [\n    Hsv (Point3 a),\n    Rgb (Point3 a),\n    NamedColor Str,\n]\n\n# namedColors : Dict Str [Rgb (Point3 a)]\nnamedColors =\n    Dict.empty {}\n    |&gt; Dict.insert &quot;red&quot; (Rgb (1, 0, 0))\n    |&gt; Dict.insert &quot;yellow&quot; (Rgb (1, 1, 0))\n    |&gt; Dict.insert &quot;blue&quot; (Rgb (0, 0, 1))\n\ncolorToRgb : Color a -&gt; Result [Rgb (Point3 a)] [KeyNotFound]\ncolorToRgb = \\color -&gt;\n    when color is\n        Rgb rgb -&gt; Ok (Rgb rgb)\n        Hsv hsv -&gt; Ok (Rgb (hsvToRgb hsv))\n        NamedColor name -&gt; Dict.get namedColors name\n</code></pre></div>\n<p>No errors here, but if I uncomment <code># namedColors : Dict Str [Rgb (Point3 a)]</code>, I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Something is off with the 3rd branch of this when expression:\n\n37│   colorToRgb : Color a -&gt; Result [Rgb (Point3 a)] [KeyNotFound]\n38│   colorToRgb = \\color -&gt;\n39│&gt;      when color is\n40│&gt;          Rgb rgb -&gt; Ok (Rgb rgb)\n41│&gt;          Hsv hsv -&gt; Ok (Rgb (hsvToRgb hsv))\n42│&gt;          NamedColor name -&gt; Dict.get namedColors name\n\nThis get call produces:\n\n    Result [Rgb (\n        Frac a,\n        Frac a,\n        Frac a,\n    )b] [KeyNotFound]\n\nBut the type annotation on colorToRgb says it should be:\n\n    [\n        Err [KeyNotFound],\n        Ok [Rgb (Point3 a)],\n    ]\n</code></pre></div>\n<p>I thought it was the trailing <code>b</code>, but now I suspect that's misleading.</p>",
        "id": 403618546,
        "sender_full_name": "Tom",
        "timestamp": 1700667822
    },
    {
        "content": "<p>Try this</p>\n<div class=\"codehilite\"><pre><span></span><code>namedColors : {} -&gt; Dict Str [Rgb (Point3 a)]\nnamedColors = \\{} -&gt;\n    Dict.empty {}\n    |&gt; Dict.insert &quot;red&quot; (Rgb (1, 0, 0))\n    |&gt; Dict.insert &quot;yellow&quot; (Rgb (1, 1, 0))\n    |&gt; Dict.insert &quot;blue&quot; (Rgb (0, 0, 1))\n\ncolorToRgb : Color a -&gt; Result [Rgb (Point3 a)] [KeyNotFound]\ncolorToRgb = \\color -&gt;\n    when color is\n        Rgb rgb -&gt; Ok (Rgb rgb)\n        Hsv hsv -&gt; Ok (Rgb (hsvToRgb hsv))\n        NamedColor name -&gt; Dict.get (namedColors {}) name\n</code></pre></div>",
        "id": 403624591,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700669627
    },
    {
        "content": "<p>I think if you want <code>namedColors</code> to be a constant value then you need to concretize the types, you can't leave it as <code>Point3 a</code></p>",
        "id": 403624735,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700669679
    },
    {
        "content": "<p>I think the trailing <code>b</code> is to indicate that within the structural typing system roc uses we can't know if the <code>Point3 a</code> returned by <code>namedColors</code> is the same <code>Point3 a</code> returned by <code>colorToRgb</code></p>",
        "id": 403624976,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700669770
    },
    {
        "content": "<p>This is also why <code>Dict.empty</code> is a function and not a constant, I think</p>",
        "id": 403625137,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700669834
    },
    {
        "content": "<p>yeah this is a limitation today, but <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>  has an idea of how to make it Just Work in certain cases (including this one)</p>",
        "id": 403625508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700669980
    },
    {
        "content": "<p>Thanks, y'all! Typing works with those changes. Some questions:</p>\n<ul>\n<li>I don't suppose it memoizes namedColors when it's a function?</li>\n<li>How would I figure out the inferred type for something in source? I know how to do that in the repl, but multiline things don't seem to work in the repl.</li>\n<li>How would I \"concretize the types\"?</li>\n</ul>\n<p>Meanwhile, my apologies if there are things in docs that I've missed.</p>",
        "id": 403639818,
        "sender_full_name": "Tom",
        "timestamp": 1700675408
    },
    {
        "content": "<p>Memoize -&gt; not currently, we want to in the future.</p>",
        "id": 403644544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700677492
    },
    {
        "content": "<p>Language server might be able to help with getting the type of something. Otherwise you should be able to do <code>x : _</code> and roc should tell you the type of <code>_</code> if I recall correctly. I guess you could also just specify a wrong type and see what type roc says.</p>",
        "id": 403644681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700677560
    },
    {
        "content": "<p>Not sure exactly what the last question is asking, maybe someone else can help.</p>",
        "id": 403644843,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700677618
    },
    {
        "content": "<p>by concretize I meant use a concrete type instead of a type variable. So <code>namedColors : Dict Str [Rgb (Point3 Dec)]</code></p>",
        "id": 403645087,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700677708
    },
    {
        "content": "<p>Now you're locked in to a decimal representation of <code>Point3</code>, which will need to bubble up to <code>colorToRgb : Color Dec -&gt; Result [Rgb (Point3 Dec)] [KeyNotFound]</code> as well</p>",
        "id": 403645252,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700677792
    },
    {
        "content": "<p>At that pint you might as well just define <code>Point3</code> with <code>Dec</code>, which might be an ok simplification</p>",
        "id": 403645597,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700677894
    },
    {
        "content": "<p>Thanks for all the replies, y'all! I haven't tried out the langserver. I guess I need to dig up how to do that. Saying just <code>_</code> doesn't turn up the answer for me, or maybe I'm just doing a bad job reading output. And I had been a bit fuzzy on some of the number details. Thanks for clarifying the concretize thing. That does seem to fix the issue as an alternative to making namedColors a function.</p>",
        "id": 403647619,
        "sender_full_name": "Tom",
        "timestamp": 1700678778
    },
    {
        "content": "<p>Beyond that, my code still fails <a href=\"https://github.com/roc-lang/roc/issues/3513\">because Num functions aren't finished</a>, but not much I can do with that for now. (No time to dig up contributing that at the moment.) Thanks for all the help, y'all! And looking forward to some kind of memoization and also just the typing improvement in the future!</p>",
        "id": 403647922,
        "sender_full_name": "Tom",
        "timestamp": 1700678952
    },
    {
        "content": "<p>That shouldn't be a problem for <code>roc ...</code> that doesn't use the dev backend.</p>",
        "id": 403648458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700679177
    },
    {
        "content": "<p>only the <code>repl</code> uses the dev backend currently or run with <code>--dev</code></p>",
        "id": 403648506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700679193
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ roc run hsv.roc\n...\nthread &#39;main&#39; panicked at &#39;Undefined Symbol in relocation, (+762, Relocation { kind: PltRelative, encoding: Generic, size: +20, target: Symbol(SymbolIndex(+ae)), addend: +fffffffffffffffc, implicit_addend: false }): Ok(Symbol { name: &quot;floorf&quot;, address: +0, size: +0, kind: Label, section: Undefined, scope: Unknown, weak: false, flags: Elf { st_info: +10, st_other: +0 } })&#39;, crates/linker/src/elf.rs:1486:25\n...\n</code></pre></div>\n<p>I guess this must be a different problem than the issue then.</p>",
        "id": 403655505,
        "sender_full_name": "Tom",
        "timestamp": 1700682229
    },
    {
        "content": "<p>And that's for F32. With Dec, I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>...\nthread &#39;main&#39; panicked at &#39;internal error: entered unreachable code: Unrecognized dec unary operation: NumFloor&#39;, crates/compiler/gen_llvm/src/llvm/lowlevel.rs:2318:13\n...\n</code></pre></div>",
        "id": 403655882,
        "sender_full_name": "Tom",
        "timestamp": 1700682408
    },
    {
        "content": "<p>Ugh...how did I miss that.</p>\n<p>So Dec, probably is actually just missing the op. For float, that symbol should be embedded in the builtins but I missed it. Try the first sample with <code>--linker=legacy</code></p>",
        "id": 403660463,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700684636
    },
    {
        "content": "<p>It compiles for F32 with <code>--linker=legacy</code>. Thanks!</p>",
        "id": 403670279,
        "sender_full_name": "Tom",
        "timestamp": 1700689927
    }
]