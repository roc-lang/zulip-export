[
    {
        "content": "<p>Hi, sorry to write such a message, but it feels like I'm stuck. I was attempting to write a simple compiler and roc seemed like it would be fun to try in. At some point i started running into compiler bugs, that after many attempts don't seem to  be circumventable. Here's my repo if anyone wishes to reproduce this <a href=\"https://ass.si/git/Adrian/CompilerV3/src/commit/6cd097a3d58c94197b2a76e1d291545655e69043/main.roc\">https://ass.si/git/Adrian/CompilerV3/src/commit/6cd097a3d58c94197b2a76e1d291545655e69043/main.roc</a> .</p>",
        "id": 449487906,
        "sender_full_name": "Adrian",
        "timestamp": 1720269795
    },
    {
        "content": "<p>Upon running <code>roc build</code> the output is </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\nAborted (core dumped)\n</code></pre></div>",
        "id": 449487968,
        "sender_full_name": "Adrian",
        "timestamp": 1720269814
    },
    {
        "content": "<p>Thanks to everyone who'd have looked into this in advance :)</p>",
        "id": 449488212,
        "sender_full_name": "Adrian",
        "timestamp": 1720269875
    },
    {
        "content": "<p>No need to apologize when asking for help @Adrian :)</p>\n<p>Is there a specific piece of code that was added and produced the issue?</p>",
        "id": 449490150,
        "sender_full_name": "Anton",
        "timestamp": 1720270422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20with.20my.20program/near/449490150\">said</a>:</p>\n<blockquote>\n<p>No need to apologize when asking for help @Adrian :)</p>\n<p>Is there a specific piece of code that was added and produced the issue?</p>\n</blockquote>\n<p>Not really, I had been preforming a ton of removals and additons and at some point i couldn't get the errors to go away</p>",
        "id": 449500483,
        "sender_full_name": "Adrian",
        "timestamp": 1720274972
    },
    {
        "content": "<p>Does <code>roc check</code> result in the same issue?</p>",
        "id": 449500967,
        "sender_full_name": "Anton",
        "timestamp": 1720275142
    },
    {
        "content": "<p>The apology is for writing such a demoralizing error report. This isn't really something I'd want to receive and something I'd even less want to debug. Tho this might be on me for not being familiar with the compiler and not compiling the roc myself but getting it from AUR.</p>",
        "id": 449501106,
        "sender_full_name": "Adrian",
        "timestamp": 1720275200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20with.20my.20program/near/449500967\">said</a>:</p>\n<blockquote>\n<p>Does <code>roc check</code> result in the same issue?</p>\n</blockquote>\n<p>Nope, it works</p>",
        "id": 449501128,
        "sender_full_name": "Adrian",
        "timestamp": 1720275209
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>adrian: ~/compilerV3$ roc check</p>\n<p>── UNUSED DEFINITION in main.roc ───────────────────────────────────────────────</p>\n<p>parsed is not used anywhere in your code.</p>\n<p>40│      parsed = parseUtf8 parser inp<br>\n         ^^^^^^</p>\n<p>If you didn't intend on using parsed then remove it so future readers<br>\nof your code don't wonder why it is there.</p>\n<p>── UNUSED DEFINITION in main.roc ───────────────────────────────────────────────</p>\n<p>pathOut is not used anywhere in your code.</p>\n<p>38│      pathOut = Path.withExtension pathIn \"ebs\"<br>\n         ^^^^^^^</p>\n<p>If you didn't intend on using pathOut then remove it so future readers<br>\nof your code don't wonder why it is there.</p>\n<p>── UNUSED ARGUMENT in main.roc ─────────────────────────────────────────────────</p>\n<p>This function doesn't use x.</p>\n<p>282│      const \\x -&gt; @CexprT {}<br>\n                 ^</p>\n<p>If you don't need x, then you can just remove it. However, if you<br>\nreally do need x as an argument of this function, prefix it with an<br>\nunderscore, like this: \"_x\". Adding an underscore at the start of a<br>\nvariable name is a way of saying that the variable is not used.</p>\n<p>── UNUSED DEFINITION in main.roc ───────────────────────────────────────────────</p>\n<p>ifP is not used anywhere in your code.</p>\n<p>239│  ifP =<br>\n      ^^^</p>\n<p>If you didn't intend on using ifP then remove it so future readers of<br>\nyour code don't wonder why it is there.</p>\n<p>── UNUSED DEFINITION in main.roc ───────────────────────────────────────────────</p>\n<p>scopeP is not used anywhere in your code.</p>\n<p>253│  scopeP =<br>\n      ^^^^^^</p>\n<p>If you didn't intend on using scopeP then remove it so future readers<br>\nof your code don't wonder why it is there.</p>\n<p>── UNUSED IMPORT in main.roc ───────────────────────────────────────────────────</p>\n<p>Core.lazy is not used in this module.</p>\n<p>25│      lazy,<br>\n         ^^^^</p>\n<p>Since Core.lazy isn't used, you don't need to import it.</p>\n<p>────────────────────────────────────────────────────────────────────────────────</p>\n<p>0 errors and 6 warnings found in 82 ms</p>\n</div></div>",
        "id": 449501291,
        "sender_full_name": "Adrian",
        "timestamp": 1720275286
    },
    {
        "content": "<p>When minimizing the code, I found that changing  <code>oneOf [fnP]</code>to <code>fnP</code> results in a drop of build time from 11918 ms to 232 ms, there is also a ~7 GiB difference in RAM consumption between the two. Do you happen to have seen behavior like this before <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 449522041,
        "sender_full_name": "Anton",
        "timestamp": 1720283331
    },
    {
        "content": "<p>oh wow, definitely need to get a flamegraph of that diff</p>",
        "id": 449522659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720283499
    },
    {
        "content": "<p>Yeah, good idea</p>",
        "id": 449522714,
        "sender_full_name": "Anton",
        "timestamp": 1720283514
    },
    {
        "content": "<p>Basically all time is spent in recursive calls of <code>reify_layout_slice</code> and <code>reify_recursive_layout</code><br>\n<a href=\"/user_uploads/22008/LomOQ0wXvfYQPkzL3TLLfzyF/Screenshot_20240706_203114.png\">Screenshot_20240706_203114.png</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/LomOQ0wXvfYQPkzL3TLLfzyF/Screenshot_20240706_203114.png\" title=\"Screenshot_20240706_203114.png\"><img src=\"/user_uploads/22008/LomOQ0wXvfYQPkzL3TLLfzyF/Screenshot_20240706_203114.png\"></a></div>",
        "id": 449542851,
        "sender_full_name": "Anton",
        "timestamp": 1720290973
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/KNwvBEbrO9u_14NzRMDAz65k/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/KNwvBEbrO9u_14NzRMDAz65k/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/KNwvBEbrO9u_14NzRMDAz65k/image.png\"></a></div>",
        "id": 449552250,
        "sender_full_name": "Adrian",
        "timestamp": 1720295971
    },
    {
        "content": "<p>I can also reproduce the overflow without <code>fnP</code> (Just for reference). I would guess that the same problem is at play</p>",
        "id": 449552321,
        "sender_full_name": "Adrian",
        "timestamp": 1720295992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> that function would be trying to unify lambdaset layouts? Right?</p>",
        "id": 449552750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720296084
    },
    {
        "content": "<p>it builds the runtime representation of the lambda set, so no unification</p>",
        "id": 449573461,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720307646
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 449579028,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720310776
    },
    {
        "content": "<blockquote>\n<p>I can also reproduce the overflow without <code>fnP</code> (Just for reference). I would guess that the same problem is at play</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"695871\">@Adrian</span>, that allowed me to do a lot of minimization:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pf</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/lukewilliamboswell/roc-parser/releases/download/0.7.1/MvLlME9RxOBjl0QCxyn3LIaoG9pSlaNxCa-t3BfbPNc.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Task</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">parser.Core</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Parser</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">const</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">keep</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">oneOf</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">skip</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">parser.String</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Utf8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parseUtf8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">]</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">[]</span>\n\n<span class=\"w\">    </span><span class=\"n\">parsed</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">parseUtf8</span><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"w\"> </span><span class=\"n\">input</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nf\">parser</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">includeP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">whiteP</span><span class=\"p\">]</span>\n\n<span class=\"nf\">includeP</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Include</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">keep</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"s\">\"blabla\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">skip</span><span class=\"w\"> </span><span class=\"n\">whiteP</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">prevent</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">overflow</span>\n\n<span class=\"nf\">whitesp</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\"> </span><span class=\"se\">\\r\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"nf\">whiteP</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"kt\">Utf8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Wsp</span><span class=\"p\">]</span><span class=\"kr\">_</span>\n<span class=\"nf\">whiteP</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"kt\">Wsp</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">chompWhile</span><span class=\"w\"> </span><span class=\"n\">whitesp</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 449887806,
        "sender_full_name": "Anton",
        "timestamp": 1720449571
    },
    {
        "content": "<p>When I look at the call stack with gdb I see this endlessly repeated:</p>\n<div class=\"codehilite\"><pre><span></span><code>roc_mono::layout::layout_from_flat_type\nroc_mono::layout::Layout::from_var\nroc_mono::layout::Layout::from_var\nroc_mono::layout::LambdaSet::from_var\nroc_mono::layout::layout_from_flat_type\nroc_mono::layout::Layout::from_var\nroc_mono::layout::Layout::from_var\nroc_mono::layout::LambdaSet::from_var\nroc_mono::layout::layout_from_flat_type\n</code></pre></div>",
        "id": 449888880,
        "sender_full_name": "Anton",
        "timestamp": 1720449752
    },
    {
        "content": "<p>Also found related (closed) issues: <a href=\"https://github.com/roc-lang/roc/issues/3444\">#3444</a> and <a href=\"https://github.com/roc-lang/roc/issues/3449\">#3449</a></p>",
        "id": 449890328,
        "sender_full_name": "Anton",
        "timestamp": 1720450003
    },
    {
        "content": "<p>I made <a href=\"https://github.com/roc-lang/roc/issues/6890\">#6890</a> for this issue.</p>",
        "id": 449916084,
        "sender_full_name": "Anton",
        "timestamp": 1720454880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695871\">Adrian</span> has marked this topic as resolved.</p>",
        "id": 449916893,
        "sender_full_name": "Notification Bot",
        "timestamp": 1720455050
    },
    {
        "content": "<p>I also made <a href=\"https://github.com/roc-lang/roc/issues/6891\">#6891</a> for the other issue I encountered with slow compilation and high RAM usage.</p>",
        "id": 449919158,
        "sender_full_name": "Anton",
        "timestamp": 1720455608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20Help.20with.20my.20program/near/449522041\">said</a>:</p>\n<blockquote>\n<p>When minimizing the code, I found that changing  <code>oneOf [fnP]</code>to <code>fnP</code> results in a drop of build time from 11918 ms to 232 ms, there is also a ~7 GiB difference in RAM consumption between the two. Do you happen to have seen behavior like this before <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>?</p>\n</blockquote>\n<p>In case it is helpful, on my M1 mac <a href=\"https://github.com/isaacvando/rtl\">RTL</a> takes about 30s to build with --optimize and about 900ms without. I'd be happy to generate a flamegraph but not sure how.</p>",
        "id": 451250010,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1720923990
    },
    {
        "content": "<p><code>cargo install flamegraph</code><br>\n<code>flamegraph --root -- ....</code></p>",
        "id": 451250131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720924135
    },
    {
        "content": "<p>On mac</p>",
        "id": 451250133,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720924140
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/rzsF2QbpMm3ky39Tbab-spp6/roc_build_flamegraph.svg\">roc_build_flamegraph.svg</a><br>\n<a href=\"/user_uploads/22008/VBS4Dy4vhlrmD7D4atSTBr6c/roc_build_optimize_flamegraph.svg\">roc_build_optimize_flamegraph.svg</a></p>",
        "id": 451250603,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1720924634
    },
    {
        "content": "<p>Do you build roc from source? Can you build it with <code>--profile release-with-debug</code>? That will make the flamegraph a lot more meaningful</p>",
        "id": 451251199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720925284
    },
    {
        "content": "<p>Also, just ran it locally:</p>\n<p>73% of time spent in morphic. Most of rest spent in llvm.</p>\n<p>Very very deep stack trace:<br>\nanalyze_func -&gt; analyze_graph -&gt; analyze_block_scc -&gt; analyze_block -&gt; analyze_value -&gt; get_analysis -&gt; analyze_func</p>",
        "id": 451251600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720925753
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> just in case he has any thoughts. I have never really dug into morphic.</p>\n<p>Would be good to file a bug.</p>",
        "id": 451251664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720925798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20Help.20with.20my.20program/near/451251199\">said</a>:</p>\n<blockquote>\n<p>Do you build roc from source? Can you build it with <code>--profile release-with-debug</code>? That will make the flamegraph a lot more meaningful</p>\n</blockquote>\n<p>Good to know, I can build it from source if the need arises again</p>",
        "id": 451251805,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1720925975
    },
    {
        "content": "<p>Though masked in practically infinite recursion (which might be the bug, not sure), it looks like the execution time actually breaks down to a lot of time spent in primitives (all the hash set operations).</p>",
        "id": 451252558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720926625
    },
    {
        "content": "<p>about 7/8ths of the time spent in morphic is spent in hashbrown. About half the time spent in morphic is specifically spent in <code>HashSet::insert</code></p>",
        "id": 451252682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720926760
    },
    {
        "content": "<p>Not sure if any of this is actionable or just a fact of how morphic works though. Just giving the breakdown I see.</p>",
        "id": 451252728,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720926832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> RTL is a super recursive parser, right?</p>",
        "id": 451252904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720926989
    },
    {
        "content": "<p>Yes it is very recursive</p>",
        "id": 451252955,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1720927051
    },
    {
        "content": "<p>As for morphic functions that are calling into hashbrown that are eating up all the time:</p>\n<ol>\n<li><code>ForwardState::merge_slots</code> -&gt; <code>ForwardState::copy_data</code> -&gt; <code>ForwardState::copy_aliases</code> -&gt; <code>ForwardState::add_alias</code> -&gt; <code>HashSet::insert</code></li>\n<li><code>ForwardState::scc_summarize</code> -&gt; <code>Iterator::collect</code></li>\n<li><code>ForwardState::merge_slots</code> -&gt; <code>HashSet::insert</code>/<code>HashSet::remove</code> directly</li>\n</ol>",
        "id": 451254023,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720928200
    },
    {
        "content": "<p>Not that I have any concrete idea for size, but I think that a solid bit of time could be recovered if we start optimizing the starting size of hashsets and hashmaps. Resizing them is extra expensive cause everything has to be rehashed (if they are small enough, might be worth trying normal sets/maps without hashing or btrees).</p>\n<p>So probably need to profile how large contains get in morphic and get better default sizes.</p>",
        "id": 451255945,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720930057
    },
    {
        "content": "<p>Oh also, I wonder if we can parallelize some of this morphic work for perf gains? I think it basically spends the entire time maxing a single core.</p>",
        "id": 451281414,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720931350
    },
    {
        "content": "<p>After tons of stack collapsing, this is where the time is actually spent:</p>\n<p><a href=\"/user_uploads/22008/zq1kZMhbpHhqTd6ugFJoD6js/Screenshot-2024-07-14-at-1.00.19AM.png\">Screenshot-2024-07-14-at-1.00.19AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/zq1kZMhbpHhqTd6ugFJoD6js/Screenshot-2024-07-14-at-1.00.19AM.png\" title=\"Screenshot-2024-07-14-at-1.00.19AM.png\"><img src=\"/user_uploads/22008/zq1kZMhbpHhqTd6ugFJoD6js/Screenshot-2024-07-14-at-1.00.19AM.png\"></a></div>",
        "id": 451332060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720944087
    }
]