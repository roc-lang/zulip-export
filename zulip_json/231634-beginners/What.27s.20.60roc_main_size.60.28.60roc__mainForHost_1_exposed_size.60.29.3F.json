[
    {
        "content": "<p>Per topic, I was curious what the return value of  <code>roc_main_size</code>/<code>roc__mainForHost_1_exposed_size</code> represents.</p>",
        "id": 473525979,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727661963
    },
    {
        "content": "<p>It is the size in bytes of the data returned by the related function</p>",
        "id": 473529933,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727662670
    },
    {
        "content": "<p>This is necessary for dealing with tasks and lambda captures.</p>",
        "id": 473530104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727662687
    },
    {
        "content": "<p>At least it is needed today. Long term, we may instead do boxing for this. It is just a lot simpler for a mix of issues.</p>",
        "id": 473530330,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727662725
    },
    {
        "content": "<p>Example use: <a href=\"https://github.com/roc-lang/roc/blob/587d0afd462994edc15fcceb8514bc0d2662b12b/examples/cli/false-interpreter/platform/src/lib.rs#L120-L133\">https://github.com/roc-lang/roc/blob/587d0afd462994edc15fcceb8514bc0d2662b12b/examples/cli/false-interpreter/platform/src/lib.rs#L120-L133</a></p>",
        "id": 473531066,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727662832
    },
    {
        "content": "<p>Essentially grab the size. Alloc a block of memory of that size (could theoretically be on the stack instead of a new alloc). let roc store to it. Then call the returned closure with those as capture data.</p>",
        "id": 473531338,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727662874
    },
    {
        "content": "<p>oh it's the data for the closure?</p>",
        "id": 473531531,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727662906
    },
    {
        "content": "<p>not the return value of the function, but anything the closure captures?</p>",
        "id": 473531850,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727662953
    },
    {
        "content": "<p>It is the size of the data being returned. If the function is returning a closure (which a task is). It really is just returning the closure captures. That is how a closure is represented in memory. A closure capture does not have a known size until the final roc application is compiled</p>",
        "id": 473533999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727663313
    },
    {
        "content": "<blockquote>\n<p>A closure capture does not have a known size until the final roc application is compiled</p>\n</blockquote>\n<p>.. and the platform host is compiled into a binary ahead of time. It's only linked with the roc app later.</p>",
        "id": 473539469,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727664284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/What's.20.60roc_main_size.60.28.60roc__mainForHost_1_exposed_size.60.29.3F/near/473530330\">said</a>:</p>\n<blockquote>\n<p>At least it is needed today. Long term, we may instead do boxing for this. It is just a lot simpler for a mix of issues.</p>\n</blockquote>\n<p>Are there any breaking changes planned? If I code a platform with these functions today, do I have to expect a rewrite in the future?* Will these be depreciated at one point?</p>\n<ul>\n<li>Neutral question. I dont mind a rewrite or not either way. Just want to know.</li>\n</ul>",
        "id": 473599775,
        "sender_full_name": "Shaiden Spreitzer",
        "timestamp": 1727677134
    },
    {
        "content": "<p>There are definitely breaking changes planed for platform authors. Some of these are described here <a href=\"https://www.roc-lang.org/plans#planned-breaking-changes\">https://www.roc-lang.org/plans#planned-breaking-changes</a></p>",
        "id": 473652108,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727686821
    },
    {
        "content": "<p>There has been some discussion recently that possibly modifies these plans, but it's basically the same (we expect changes in future).</p>",
        "id": 473652411,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727686874
    }
]