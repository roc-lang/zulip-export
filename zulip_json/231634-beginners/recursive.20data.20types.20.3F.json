[
    {
        "content": "<p>like in zig it'd be done with a pointer like so</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">next</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">?*</span><span class=\"n\">Node</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 327502743,
        "sender_full_name": "dank",
        "timestamp": 1676281074
    },
    {
        "content": "<p>in roc syntactically you can just define recursive types</p>",
        "id": 327521425,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676286771
    },
    {
        "content": "<p>in zig you couldn't write <code>next: Node</code> because that would be a type of infinite size</p>",
        "id": 327521483,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676286791
    },
    {
        "content": "<p>but in roc there is implicitly a pointer around any recursive use of a type</p>",
        "id": 327521549,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676286819
    },
    {
        "content": "<p>so the above would be equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><code>LinkedList a : [ Nil, Cons a (LinkedList a) ]\n</code></pre></div>",
        "id": 327521651,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676286848
    },
    {
        "content": "<p>ahh thanks. I was looking for a doc on it, thought it wasn't implemented yet.</p>\n<p>I do see now it's on here <a href=\"https://github.com/roc-lang/roc/blob/main/roc-for-elm-programmers.md#custom-types\">https://github.com/roc-lang/roc/blob/main/roc-for-elm-programmers.md#custom-types</a><br>\npretty cool tnx</p>",
        "id": 327525117,
        "sender_full_name": "dank",
        "timestamp": 1676288159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/recursive.20data.20types.20.3F/near/327521651\">said</a>:</p>\n<blockquote>\n<p>so the above would be equivalent to</p>\n<p><div class=\"codehilite\"><pre><span></span><code>LinkedList a : [ Nil, Cons a (LinkedList a) ]\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>one question folkert if you dont mind. why do we need the second a after Cons? <br>\nisn't it enough that we specify it after the LinkedList?<br>\n[it does seem to work without it but i might be missing something]</p>",
        "id": 327536460,
        "sender_full_name": "dank",
        "timestamp": 1676291658
    },
    {
        "content": "<p>here, <code>Cons</code> has two fields, one of type <code>a</code> (the data) and one of type <code>LinkedList a</code> (the next node)</p>",
        "id": 327537049,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676291851
    },
    {
        "content": "<p>yes I understand. is it just for declarative purposes? <br>\nmeaning could we have managed without it?</p>",
        "id": 327537439,
        "sender_full_name": "dank",
        "timestamp": 1676291972
    },
    {
        "content": "<p>oh nvm</p>",
        "id": 327537676,
        "sender_full_name": "dank",
        "timestamp": 1676292039
    },
    {
        "content": "<p>it's more like trying to resemble the structure of the outer type</p>",
        "id": 327537772,
        "sender_full_name": "dank",
        "timestamp": 1676292075
    },
    {
        "content": "<p>without that <code>a</code> there is not actual data in your linked list</p>",
        "id": 327537818,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676292097
    },
    {
        "content": "<p>it's jus the spine (basically, you've encoded peano numbers at that point)</p>",
        "id": 327537852,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676292111
    },
    {
        "content": "<p>haha yes</p>",
        "id": 327537989,
        "sender_full_name": "dank",
        "timestamp": 1676292156
    },
    {
        "content": "<p>that makes sense. i read it wrong initially</p>",
        "id": 327538025,
        "sender_full_name": "dank",
        "timestamp": 1676292171
    }
]