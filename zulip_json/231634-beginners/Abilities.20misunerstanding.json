[
    {
        "content": "<p>While playing with ability-based prngs, I came across multiple problems with abilities/lambda sets. Please help to figure out if it's my misunderstanding or lambda-set bugs? Here are branches with problem reproductions:</p>\n<ul>\n<li><a href=\"https://github.com/wontem/roc-rand/pull/3\">no lambda set found</a></li>\n<li><a href=\"https://github.com/wontem/roc-rand/pull/4\">This specialization of ... is overly general</a></li>\n<li><a href=\"https://github.com/wontem/roc-rand/pull/5\">unexpected type</a></li>\n</ul>\n<p>there are more problems I encountered but they are most likely just other variants of the ones above</p>",
        "id": 420032442,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1707221069
    },
    {
        "content": "<p>For the second one, does wrapping in an explicit lambda fix the issue?</p>",
        "id": 420077900,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707234784
    },
    {
        "content": "<p>added a couple of comments there: <a href=\"https://github.com/wontem/roc-rand/pull/4#discussion_r1480095154\">https://github.com/wontem/roc-rand/pull/4#discussion_r1480095154</a></p>",
        "id": 420080554,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1707235516
    },
    {
        "content": "<p>so for the wrapped variant without type annotation, the result is the same, but with it - the comilation fails with the same error as in the <code>no lambda set found</code> example</p>",
        "id": 420081215,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1707235693
    },
    {
        "content": "<p>Ok. For <code>no lamda set found</code> I am pretty certain it is a compiler bug. It basically means we failed to generate the correctly specialized version of a function.</p>",
        "id": 420082251,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707235986
    },
    {
        "content": "<p>In this case failed to specialize on all captured values in the lambda</p>",
        "id": 420082411,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707236035
    },
    {
        "content": "<p>In the unexpected type, using <code>XorShift32.u64</code> looks wrong to me. Shouldn't it be <code>RngCore.u64</code>?</p>",
        "id": 420083255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707236258
    },
    {
        "content": "<p>Bool wants to return a generator that can be used with any RNG. Then you are forcing it to return a generator that can only be used with xorshift</p>",
        "id": 420083601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707236354
    },
    {
        "content": "<p>So type mismatch</p>",
        "id": 420083648,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707236364
    },
    {
        "content": "<p>Said a different way, you are constraining the generator too early.</p>",
        "id": 420084559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707236612
    },
    {
        "content": "<p>Really is shouldnt be constrained until running the generator</p>",
        "id": 420084646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707236637
    },
    {
        "content": "<p>Yeah, it already changed in the main branch. But the problem is still there just pops earlier. Iâ€™ll add another example a bit later, afk now</p>",
        "id": 420084733,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1707236649
    },
    {
        "content": "<p>You might need the equivalent of Hasher.complete except that in this case it would take a generator and return the final value. <a href=\"https://github.com/roc-lang/roc/blob/d62cc0b1d3e540a42bf58c4e3848c115f614a6c8/crates/compiler/builtins/roc/Hash.roc#L64\">https://github.com/roc-lang/roc/blob/d62cc0b1d3e540a42bf58c4e3848c115f614a6c8/crates/compiler/builtins/roc/Hash.roc#L64</a></p>",
        "id": 420095725,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707239663
    },
    {
        "content": "<p>That said, feels like it shouldn't strictly be needed to constrain the type</p>",
        "id": 420095855,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707239699
    },
    {
        "content": "<p>Hmm...actually in the hasher case, the init function is unique by hasher and complete is generic.</p>",
        "id": 420096005,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707239744
    },
    {
        "content": "<p>So that would be more like the seed function being specific cause it is actually generating a specific RNG implementation.</p>",
        "id": 420096134,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707239776
    },
    {
        "content": "<p>That said, I would bet you can make the completion function specific instead. Fundamentally it should be one of the two ends</p>",
        "id": 420096208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707239802
    }
]