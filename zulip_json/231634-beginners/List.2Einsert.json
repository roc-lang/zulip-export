[
    {
        "content": "<p>Is there a function for inserting something into the middle of a list? I can't seem to find it. Otherwise, I feel like it should be there</p>",
        "id": 487069911,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733769269
    },
    {
        "content": "<p>List.replace ?</p>",
        "id": 487070009,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769305
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/builtins/List#replace\">https://www.roc-lang.org/builtins/List#replace</a></p>",
        "id": 487070075,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769326
    },
    {
        "content": "<p>No I mean putting it in the middle and shifting everything above. Something like <code>List.insert [0, 1, 2, 3] 2 42 == [0, 1, 42, 2, 3]</code></p>",
        "id": 487070154,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733769355
    },
    {
        "content": "<p>I know it isn't good for performance, but if order matters, it can be the only way to do something</p>",
        "id": 487070350,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733769417
    },
    {
        "content": "<p>No, I think you'd have to implement yourself</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>listInsert = \\list, item, index -&gt;\n  start = List.sublist {start: At 0, end: Length index}\n  end = List.sublist {start: After index}\n  l = List.withCapacity ((List.len list) + 1)\n  List.concat l start\n  |&gt; LIst.append item\n  |&gt; List.concat end\n</code></pre></div>",
        "id": 487071067,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769656
    },
    {
        "content": "<p>Or something like that</p>",
        "id": 487071079,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769662
    },
    {
        "content": "<p>And def won't be the best perf</p>",
        "id": 487071184,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769696
    },
    {
        "content": "<p>Don't know a way to get Roc to do a memcpy straight from the original list to the new list, maybe LLVM will get rid of the interstitial list</p>",
        "id": 487071441,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769772
    },
    {
        "content": "<p>In pure roc, I'd pop to the end and use <code>List.swap</code> in repeatedly to put it in place. It would have good performance I think, since no new memory is allocated</p>",
        "id": 487071620,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733769839
    },
    {
        "content": "<p>But I really think it should be a builtin</p>",
        "id": 487071710,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733769857
    },
    {
        "content": "<p>Oh, yeah, like <code>List.reserve list 1</code> and then do the swaps?  I think if the list is created AND this all happens in a single function it will mutate in place</p>",
        "id": 487072004,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769948
    },
    {
        "content": "<p>something like this</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>insert : List a, U64, a -&gt; List a\ninsert = \\list, index, value -&gt;\n    pushed = List.append list value\n    List.range { start: At (List.len list), end: At index }\n    |&gt; List.walk pushed \\acc, i -&gt;\n        List.swap acc i (i + 1)\n</code></pre></div>",
        "id": 487072426,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733770078
    },
    {
        "content": "<p>probably an of-by-1 error or something. Just wrote it real quick. The range list has to be allocated though</p>",
        "id": 487072554,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733770113
    },
    {
        "content": "<p>If you are going to do that, I think my implementation would be faster.  You should do both, measure and compare.  And let me know</p>",
        "id": 487072830,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770203
    },
    {
        "content": "<p>Sublist is fast since it's mostly just creating a new stack-allocated struct</p>",
        "id": 487072997,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770247
    },
    {
        "content": "<p>It should just be a builtin though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>, then the discussion doesn't matter. I want to use it for AOC, so there is probably another way. But it feels missing</p>",
        "id": 487073100,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733770282
    },
    {
        "content": "<p>Mine'll be just three new stack-allocated structs, a heap allocation, and two memcpys</p>",
        "id": 487073114,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770287
    },
    {
        "content": "<p>I agree <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 487073137,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770296
    },
    {
        "content": "<p>If you are doing day 9, I have a different idea</p>",
        "id": 487073247,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770331
    },
    {
        "content": "<p>But I only have 8 minutes left on lunch</p>",
        "id": 487073263,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770337
    },
    {
        "content": "<p>Enjoy!<br>\nOnce there is some more feedback on the feature request, I think I might take a stab at implementing it. It's been a while since I have done a contribution</p>",
        "id": 487073474,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733770421
    },
    {
        "content": "<p>Assuming everyone agrees this should be a builtin, what should happen if the index is out of bounds? Leave the list unchanged, push the value to the end, or return a Result? (Or another option I can't think of?)</p>",
        "id": 487074022,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733770529
    },
    {
        "content": "<p>Can you put something in the #ideas channel?</p>",
        "id": 487075134,
        "sender_full_name": "Anton",
        "timestamp": 1733770858
    },
    {
        "content": "<p>Oh yeah, this was the wrong channel al along. I created a new topic there. Someone with more zulip-fu knowledge is welcome to move this if they want, but I don't feel it's necessary</p>",
        "id": 487075706,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733771026
    }
]