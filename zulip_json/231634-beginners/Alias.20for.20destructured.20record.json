[
    {
        "content": "<p>Isn't it possible to do <code>{a, b} as full_record</code> in the function arguments as is it is in <code>when-is</code>?</p>",
        "id": 513919243,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745426585
    },
    {
        "content": "<p>This definition fails:</p>\n<div class=\"codehilite\"><pre><span></span><code>add_user : Database, { name : Str, owes ?? Dict Str Dec, owed_by ?? Dict Str Dec, balance ?? Dec} -&gt; Result Database _\nadd_user = |database, { name, owes ?? Dict.empty({}), owed_by ?? Dict.empty({}), balance ?? 0.0} as user|\n</code></pre></div>\n<p>with error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── MALFORMED ARGS LIST in ./Database.roc ───────────────────────────────────────\n\nI was trying to parse the arguments list for a function, but I got\nstuck here:\n\n19│  add_user = |database, { name, owes ?? Dict.empty({}), owed_by ?? Dict.empty({}), balance ?? 0.0} as user|\n                                                                                                      ^\n\nI was expecting to find a | next.%\n</code></pre></div>",
        "id": 513919525,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745426687
    },
    {
        "content": "<p>Not yet supported, but seems reasonable to add. Do you expect any problems from this <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>, <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span>?</p>",
        "id": 513925021,
        "sender_full_name": "Anton",
        "timestamp": 1745428474
    },
    {
        "content": "<p>That should be fine so long as the left side of the <code>x as y</code> is an exhaustive pattern. I believe this has been already implemented in the way that <span class=\"user-mention\" data-user-id=\"894032\">@Ilya Shmygol</span> wrote it in the new compiler's parsing code, but I might be wrong</p>",
        "id": 513965770,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1745442775
    },
    {
        "content": "<p>Yeah, I think it just doesn't work with <code>??</code></p>",
        "id": 513974821,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745447476
    },
    {
        "content": "<p>But not fully sure</p>",
        "id": 513974833,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745447485
    },
    {
        "content": "<p>I honestly can’t remember if this will in fact “just work” in the new parser but I think so. I wish I had time to look at it right now</p>",
        "id": 513988604,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745456102
    },
    {
        "content": "<p>Brendan is probably right, but for those who don't know, ?? is going away in the rewrite</p>",
        "id": 513998188,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1745462683
    },
    {
        "content": "<p>That’s news to me and the parser <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 513998333,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745462773
    },
    {
        "content": "<p>wait, me too! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 514001075,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745464386
    },
    {
        "content": "<p>unless I'm misremembering?</p>",
        "id": 514001079,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745464390
    },
    {
        "content": "<p>Optional/default value record fields are going away</p>",
        "id": 514014933,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745472266
    },
    {
        "content": "<p>I think <code>??</code> is switching to be <code>Result.with_default(...)</code></p>",
        "id": 514014959,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745472288
    },
    {
        "content": "<p>At least that is what I remember being decided</p>",
        "id": 514014978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745472307
    },
    {
        "content": "<p>But not fully sure on with default.</p>",
        "id": 514015017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745472334
    },
    {
        "content": "<p>That’s somewhat sad, since it was implemented not even six months ago (by me) and has just as much value in a static dispatch world as before.  And with_default has been there and will remain for when you want to chain it (we almost had ?? Desugar to it, but chose to use a when instead)</p>",
        "id": 514083191,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745490918
    },
    {
        "content": "<p>I liked <code>??</code>...</p>",
        "id": 514084474,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745491312
    },
    {
        "content": "<p>yeah I don't remember that change haha</p>",
        "id": 514117913,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745499313
    },
    {
        "content": "<p>in my mind, the plan was still to have <code>??</code> work the same as today</p>",
        "id": 514117977,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745499329
    },
    {
        "content": "<p>can anyone find a thread where we discussed changing that?</p>",
        "id": 514118133,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745499363
    },
    {
        "content": "<p>It may have stemmed from this discussion? </p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304641-ideas/topic/.60if.60.20condition.20pattern.20match/near/502688091\">said</a>:</p>\n<blockquote>\n<p>Now that we have static dispatch do we expect to see issues with <code> ? </code> and <code> ?? </code>?<br>\nThey no longer play nice with pipelines</p>\n<p><div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"p\">(((</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"n\">default_config</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">stage1</span><span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage1Err</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">stage2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage2Err</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">stage3</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage3Err</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 514130157,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745502276
    },
    {
        "content": "<p>To clarify my statement. In the new compiler, I would expect this to still just work:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"p\">(((</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"n\">default_config</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">stage1</span><span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage1Err</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">stage2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage2Err</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">stage3</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage3Err</span>\n</code></pre></div>",
        "id": 514163377,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745509956
    },
    {
        "content": "<p>I just recall a discussion on default value record fields like:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"n\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"n\">i32</span><span class=\"p\">}</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">record</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>\n<p>In that discussion, richard suggested we should remove them cause overall they had been confusing and error prone for users.</p>",
        "id": 514163988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745510158
    },
    {
        "content": "<p>I think this is the most official message of removal, but significant discussion definitely happened in idea threads much earlier:<br>\n<span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498642549\">said</a>:</p>\n<blockquote>\n<p>of note, the \"demanded\" enum for records isn't necessary anymore due to optional record fields going away</p>\n</blockquote>",
        "id": 514167587,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745511201
    },
    {
        "content": "<p>ohh yeah, I misunderstood</p>",
        "id": 514176022,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745513534
    },
    {
        "content": "<p>so my understanding is that:</p>\n<ul>\n<li><code>??</code> is still an infix operator, which works the same way as today</li>\n<li>we no longer support default record fields, which used to <em>also</em> use <code>??</code> as their syntax for specifying the default fields</li>\n</ul>",
        "id": 514176135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745513566
    },
    {
        "content": "<p><img alt=\":nod-yes:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/a8fe64af.gif\" title=\"nod-yes\"> yeah, exactly that.</p>",
        "id": 514177712,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745513942
    },
    {
        "content": "<p>yep!</p>",
        "id": 514249222,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1745540638
    },
    {
        "content": "<p>Sweet, that makes sense</p>",
        "id": 514375076,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745586051
    }
]