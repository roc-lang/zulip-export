[
    {
        "content": "<p>here's a syntax reference comparing <a href=\"https://fptransforms.vercel.app/transformations.html\">Elm, Haskell, and Roc syntax</a> created by <span class=\"user-mention\" data-user-id=\"281566\">@Mario</span>! (source code <a href=\"https://github.com/supermario/fptransforms\">here</a>)</p>",
        "id": 248839156,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628512817
    },
    {
        "content": "<p>quick tip, custom types syntax seems to be wrong. It’s comma separated instead of the |</p>",
        "id": 248861657,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628522278
    },
    {
        "content": "<p>oops good point! <span class=\"user-mention\" data-user-id=\"281566\">@Mario</span> accepts pull requests, so you can make a quick fix if you like <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 248867577,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628524684
    },
    {
        "content": "<p>oh wait, you're on the road! I'll make a PR</p>",
        "id": 248868082,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628524849
    },
    {
        "content": "<p><span aria-label=\"car\" class=\"emoji emoji-1f697\" role=\"img\" title=\"car\">:car:</span></p>",
        "id": 248868279,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628524913
    },
    {
        "content": "<p>Roc lists starts with 0 or 1 ? I read somewhere that it's not possible to pattern match on list, why? There was some Elm algorithms I made in the past (nothing incredible) that would be very hard to do without pattern matching on list.</p>",
        "id": 249109886,
        "sender_full_name": "Gabriela",
        "timestamp": 1628689928
    },
    {
        "content": "<p>0</p>",
        "id": 249112187,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628690651
    },
    {
        "content": "<p>And because they aren’t really lists, they are actually arrays</p>",
        "id": 249112235,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628690671
    },
    {
        "content": "<p>so it’s not some cons list like structure under the hood which would allow you to easily remove the head and capture the rest of the list in a pattern match.</p>",
        "id": 249112327,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628690713
    },
    {
        "content": "<p>I feel like that shouldn't restrict pattern matching. Givem the arrays are immutable anyway, we should be able to create some sort of slice type data structure to enable cons list pattern matching, right?</p>",
        "id": 249131854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1628698994
    },
    {
        "content": "<p>I’m also not sure what the implications would be for how ref counting with re-use works</p>",
        "id": 249165733,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628714130
    },
    {
        "content": "<p>it's kind of tricky to make that work. Ideally, we want a slice to be of type <code>List *</code>, so the user is not really able to distinguish the two</p>",
        "id": 249166086,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628714352
    },
    {
        "content": "<p>but then, that means every list needs an \"offset\" field which is zero for \"normal\" lists and can be non-zero for slices</p>",
        "id": 249166126,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628714379
    },
    {
        "content": "<p>question is: where do you store this information: storing it on the stack makes all lists in your program bigger. We know that how many bytes an object takes really matters for performance</p>",
        "id": 249166212,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628714412
    },
    {
        "content": "<p>Is there any particular design-philosophy reason why Roc lacks tuples?</p>",
        "id": 259018434,
        "sender_full_name": "Joseph Anthony Zullo",
        "timestamp": 1635194878
    },
    {
        "content": "<p>you can use either records <code>{ x: I64, y: F64 }</code> or a global tag, say <code>x = Pair a b</code> or  <code>x = T a b</code></p>",
        "id": 259018579,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1635194937
    },
    {
        "content": "<p>the difference with e.g. elm is that <code>T a b</code> works without a type definition (you can just use it inline) and <code>T a b c</code> also works</p>",
        "id": 259018652,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1635194980
    }
]