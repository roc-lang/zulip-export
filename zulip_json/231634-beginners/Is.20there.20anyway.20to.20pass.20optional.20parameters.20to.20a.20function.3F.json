[
    {
        "content": "<p>I have the following function that I'm using to create fake gallery items for testing:</p>\n<div class=\"codehilite\"><pre><span></span><code># Makes a gallery item for testing.\nmakeDefaultItem : _ -&gt; GalleryItem\nmakeDefaultItem = \\_ -&gt; {\n    width: 10,\n    height: 20,\n    headings: []\n}\n</code></pre></div>\n<p>I'd like to extend it to include optional parameters to configure it.</p>\n<p>In TypeScript I'd do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">makeDefaultItem</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nx\">width?</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">height?</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">headings?</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">GalleryItem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">width</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">width</span><span class=\"w\"> </span><span class=\"o\">!==</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">width</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">10</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">height</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">height</span><span class=\"w\"> </span><span class=\"o\">!==</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">height</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">20</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">headings</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">headings</span><span class=\"w\"> </span><span class=\"o\">!==</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">headings</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This way I can create gallery items for testing specifying the parameters I care about and defaulting the rest. Say for example my next test really only cares about the width of a gallery item, so in TypeScript I could create it like this:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">galleryItem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">makeDefaultItem</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nx\">width</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">32</span><span class=\"w\"> </span><span class=\"p\">});</span>\n</code></pre></div>\n<p>Is it possible to have optional parameters like this for a Roc function?</p>",
        "id": 451879703,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1721169157
    },
    {
        "content": "<p>Here's a demo of the syntax </p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br&quot;,\n}\n\nimport cli.Stdout\nimport cli.Task exposing [Task]\n\nmain : Task {} _\nmain =\n\n    one : GalleryItem\n    one = makeDefaultItem {}\n\n    two : GalleryItem\n    two = makeDefaultItem {\n        width: 100,\n        height: 200,\n        headings: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;],\n    }\n\n    Stdout.line! (Inspect.toStr one)\n    Stdout.line! (Inspect.toStr two)\n\nGalleryItem : {\n    width: U64,\n    height: U64,\n    headings: List Str,\n}\n\nmakeDefaultItem : { width ? U64, height ? U64, headings ? List Str } -&gt; GalleryItem\nmakeDefaultItem = \\{ width ? 10, height ? 20, headings ? [] } -&gt; {\n    width,\n    height,\n    headings,\n}\n</code></pre></div>",
        "id": 451881345,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721169606
    },
    {
        "content": "<p>Unfortunately there's a strange compiler bug <span aria-label=\"ladybug\" class=\"emoji emoji-1f41e\" role=\"img\" title=\"ladybug\">:ladybug:</span> if we have both calls, either one is happy but together it crashes.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc demo.roc\nthread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5759:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\&#39;\\xae\\xa4\\xef\\x8b\\xd4\\xa4\\x87&quot;), definition of value binding ValueId(3): expected type &#39;(((heap_cell, bag&lt;(heap_cell,)&gt;), (), ()),)&#39;, found type &#39;((),)&#39;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 451881588,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721169658
    },
    {
        "content": "<p>I can't get the optional syntax to work... definitely something strange going on. </p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br&quot;,\n}\n\nimport cli.Stdout\nimport cli.Task exposing [Task]\n\nmain : Task {} _\nmain =\n\n    items = [\n        makeDefaultItem {\n            height: 200u64,\n            headings: [&quot;A&quot;],\n        },\n        makeDefaultItem {\n            width: 100u64,\n            height: 200u64,\n            headings: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;],\n        },\n    ]\n\n    items\n        |&gt; List.map toStr\n        |&gt; Str.joinWith &quot;\\n\\n&quot;\n        |&gt; Stdout.line!\n\nGalleryItem : {\n    width : U64,\n    height : U64,\n    headings : List Str,\n}\n\nmakeDefaultItem : { width ? U64, height : U64, headings : List Str } -&gt; GalleryItem\nmakeDefaultItem = \\{ width ? 10, height, headings } -&gt; {\n    width,\n    height,\n    headings,\n}\n\ntoStr : GalleryItem -&gt; Str\ntoStr = \\{ width, height, headings } -&gt;\n    headingsStr = Str.joinWith headings &quot;, &quot;\n    &quot;&quot;&quot;\n    Gallery Item:\n        width: $(Num.toStr width)\n        height: $(Num.toStr height)\n        headings: $(headingsStr)\n    &quot;&quot;&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc demo.roc\nthread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5759:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00F\\x93\\xd4\\x88\\xfa\\xad\\x9b\\x90&quot;), definition of value binding ValueId(12): expected type &#39;(((heap_cell, bag&lt;(heap_cell,)&gt;), (), ()),)&#39;, found type &#39;(((heap_cell, bag&lt;(heap_cell,)&gt;), ()),)&#39;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 451883109,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721170034
    },
    {
        "content": "<p>Ok I might steer clear of optional parameters for the moment. Thanks for your help <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 451883959,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1721170255
    },
    {
        "content": "<p>Yeah, compiler bug that seems to only allow for one specialization of the function.</p>",
        "id": 451890649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721172550
    },
    {
        "content": "<p>Cause it should create a different version of the function for each optional configuration used.</p>",
        "id": 451890689,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721172591
    },
    {
        "content": "<p>Probably a case of missing some wiring to tell it to create the function many times instead of specializing it once</p>",
        "id": 451890767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721172617
    },
    {
        "content": "<p>That said, I am not very familiar with that part of the code, but I would guess it is a relatively small fix.</p>",
        "id": 451890799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721172641
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6909\">https://github.com/roc-lang/roc/issues/6909</a> </p>\n<p>^^^ Issue logged</p>",
        "id": 451895546,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721174467
    },
    {
        "content": "<p>I think we already have <a href=\"https://github.com/roc-lang/roc/issues/6423\">https://github.com/roc-lang/roc/issues/6423</a></p>",
        "id": 451900560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721176646
    }
]