[
    {
        "content": "<p>I have to put inside  dict something  like this</p>\n<div class=\"codehilite\"><pre><span></span><code>SomeTag   1.1     #  some  tag and Frac\n</code></pre></div>\n<p>later I am using  dict.get   to  take  this  value out, I have to match it against    (SomeTag   _ )  but  for  some  reason Frac  matching  does not work  at all I am getting  crashes  or  failures  depending on what I do. The same  logic  work  with integral numbers  this is definitely  compiler issue   and  serious  one</p>",
        "id": 360851916,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684949002
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"568088\">@Artur Swiderski</span>,<br>\nI believe this behavior is on purpose, checking floats for equality <a href=\"https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\">is not recommended</a>. I'll make an issue to make a nice example demonstrating best practices. We should however provide a nice error when the user tries to do this, can you share your code and error message?</p>",
        "id": 360855772,
        "sender_full_name": "Anton",
        "timestamp": 1684950102
    },
    {
        "content": "<p>there are many errors sometimes compiler crashes I do not have access to the  code on this specific computer. Anyway something is wrong ? I want to patter match mostly against this tag I provided because  this  pattern need to be serviced  differently than  others. Alternative  would be to  create map only for storing floats. btw I don't know  how to match against  set (only list and I need  set here ).<br>\n  Is there any syntax  to mach record ?</p>",
        "id": 360858674,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684950915
    },
    {
        "content": "<p>Would be useful to see code examples, but I will try and answer some without it.</p>\n<blockquote>\n<p>Is there any syntax to mach record ?</p>\n</blockquote>\n<p>yes:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">record</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">record</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"matches when a equals 1 and b equals 2\"</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"matches when a equals 10. will bind b such that it can be used in this branch\"</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">newNameA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">newNameB</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"binds a as newNameA and b as newNameB\"</span>\n</code></pre></div>",
        "id": 360860374,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684951359
    },
    {
        "content": "<blockquote>\n<p>btw I don't know how to match against set (only list and I need set here ).</p>\n</blockquote>\n<p>there is no way to match against a set directly. If you know the exact order, you could match against the set converted to a list.<br>\nMore likely, you could check if a set contains another set. or something of that nature. Would need to know more details to comment more.</p>",
        "id": 360860821,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684951488
    },
    {
        "content": "<blockquote>\n<p>there are many errors sometimes compiler crashes</p>\n</blockquote>\n<p>If you are willing, filing bugs as you hit crashes is helpful. Preferably with minimal triggering examples, but even larger repros are useful.</p>",
        "id": 360861052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684951560
    },
    {
        "content": "<p>Oh, also, for matching the tag with an F32 in it, you should be able to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">myDict</span><span class=\"w\"> </span><span class=\"nx\">myKey</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nf\">(SomeTag floatVal) -&gt;</span>\n<span class=\"w\">        </span><span class=\"c1\"># here I can use floatVal. I can compare it to values with epsilon and such.</span>\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"c1\"># deal with other tags and such</span>\n</code></pre></div>",
        "id": 360862718,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684952018
    },
    {
        "content": "<p>Lastly, if you really want to check that a float is close enough to 1.1, you could do:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">myDict</span><span class=\"w\"> </span><span class=\"nx\">myKey</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">SomeTag</span><span class=\"w\"> </span><span class=\"nx\">floatVal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">absDiff</span><span class=\"w\"> </span><span class=\"nx\">floatVal</span><span class=\"w\"> </span><span class=\"mf\">1.1</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">epsilon</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"c1\"># This only matches if we have a float that is close to 1.1</span>\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"c1\"># deal with other tags and such</span>\n</code></pre></div>",
        "id": 360863365,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684952139
    },
    {
        "content": "<p>Oh, one extra note, if you want decimals with equality, you can use <a href=\"https://www.roc-lang.org/builtins/Num#Dec\">Dec</a> explicitly (in the future, this should become the default).</p>\n<p>Then you can do something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">SomeUnion</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">SomeTag</span><span class=\"w\"> </span><span class=\"nx\">Dec</span><span class=\"p\">]</span>\n\n<span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">myDict</span><span class=\"w\"> </span><span class=\"nx\">myKey</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nf\">(SomeTag 1.1) -&gt;</span>\n<span class=\"w\">        </span><span class=\"c1\"># This matches when the Dec is exactly 1.1</span>\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"c1\"># deal with other tags and such</span>\n</code></pre></div>",
        "id": 360867822,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684952805
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/5442\">https://github.com/roc-lang/roc/issues/5442</a>  &lt;- I created  this, using matching  I redirected   float to other branch  but still compiler  expect it  to have  certain  capability. I can  overcome  this but I have to redesign  stuff and  a lot  of  boilerplate  code  needs to be created</p>",
        "id": 360885063,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684958160
    },
    {
        "content": "<p>Roc doesn't support equality of floating point numbers, which is why the code you linked doesn't compile.</p>",
        "id": 360885886,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684958420
    },
    {
        "content": "<p>yes  but I created path  to  divert float to other  branch where equality of  float is not needed</p>",
        "id": 360886106,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684958522
    },
    {
        "content": "<p>so i t should  work imho</p>",
        "id": 360886189,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684958538
    },
    {
        "content": "<p>I see what you're intending. Do you want</p>\n<div class=\"codehilite\"><pre><span></span><code>        Ok someTag -&gt;\n            newSet = Set.remove  myset  someTag\n            someTag\n</code></pre></div>\n<p>in this branch, <code>someTag</code> to have type <code>[Tag1, Tag2, Tag3]</code>?</p>",
        "id": 360886223,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684958550
    },
    {
        "content": "<p>Unfortunately, Roc does not work this way (presently). In that branch, <code>someTag</code> is not narrowed from the tag of the first branch, so it has type <code>[Tag1, Tag2, Tag3, Gang F32]</code></p>",
        "id": 360886313,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684958582
    },
    {
        "content": "<p>I want  to redirect  float  from  above  path using  this  Ok (Gang val ) -&gt;  Tag3</p>",
        "id": 360886381,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684958611
    },
    {
        "content": "<p>it is not like useless feature, it would help me to create  what I want</p>",
        "id": 360886590,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684958670
    },
    {
        "content": "<p>I agree. It's not currently supported, but you can get around it for now by listing out each variant. So something like</p>\n<div class=\"codehilite\"><pre><span></span><code>        Ok (Gang val ) -&gt;  Tag3\n        Ok Tag1 -&gt;\n            newSet = Set.remove  myset  Tag1\n            Tag1\n        Ok Tag2 -&gt;\n            newSet = Set.remove  myset  Tag2\n            Tag2\n        ...\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>helper = \\tag -&gt;\n  newSet = Set.remove myset tag\n  tag\n\n...\n        Ok (Gang val ) -&gt;  Tag3\n        Ok Tag1 -&gt; helper Tag1\n        Ok Tag2 -&gt; helper Tag2\n        ...\n</code></pre></div>",
        "id": 360886827,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684958749
    },
    {
        "content": "<p>I had that before  but it is getting unmanageable when I have  a lot of tags and I want to group them somehow</p>",
        "id": 360887045,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684958810
    },
    {
        "content": "<p>Yeah that's fair. <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/type.20narrowing\">#ideas &gt; type narrowing</a> discusses adding support for what you'd want here.</p>",
        "id": 360887129,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684958839
    },
    {
        "content": "<p>Note: you can also make this work by just avoiding floats. Change <code>Str.toF32</code> to <code>Str.toDec</code>.</p>",
        "id": 360887437,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684958933
    },
    {
        "content": "<p>I will check but I am sure  that I tried  and failed with Dec</p>",
        "id": 360887790,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684959063
    },
    {
        "content": "<p>Hmm. Maybe there is some other Dec issue. It definitely is less tested that floats. Seemed to work with your small example in my testing.</p>",
        "id": 360888045,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684959152
    },
    {
        "content": "<p>toDec does  not  work for  me there is  some  compiler  crash  I registered  issue</p>",
        "id": 360891092,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684960197
    },
    {
        "content": "<p>btw  how to create stand  alone  Dec  number ,  is there any suffix ?</p>",
        "id": 360894514,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1684961356
    },
    {
        "content": "<p><code>1dec</code> looks to work</p>",
        "id": 360913207,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684970636
    }
]