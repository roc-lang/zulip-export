[
    {
        "content": "<p>Not sure if this is the right stream for this, but I wanted to check here before raising an issue.<br>\nI was playing around with roc and I think I found a bug. A minimal reproduction can be done in the repl:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">false</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">true</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">true</span>\n</code></pre></div>\n<p>This should give <code>Bool.true</code> as a result (simplifies to <code>Bool.false || Bool.true</code>), but it gives <code>Bool.false</code>.<br>\nIs this a known issue? I am using a compiler built from source yesterday</p>",
        "id": 358319468,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684098046
    },
    {
        "content": "<p>Adding parenthesis around the two '&amp;&amp;' comparisons makes it work, which makes me think it is an issue with the order of operations</p>",
        "id": 358319516,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684098095
    },
    {
        "content": "<p>Does <code>||</code> run before <code>&amp;&amp;</code>....is that correct? Don't recall normal ordering rules.</p>",
        "id": 358319523,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098116
    },
    {
        "content": "<p>Simplify to <code>Bool.false &amp;&amp; Bool.true &amp;&amp; Bool.true</code></p>",
        "id": 358319588,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098157
    },
    {
        "content": "<p>In every programming language I know of <code>&amp;&amp;</code> runs before <code>||</code></p>",
        "id": 358319763,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684098315
    },
    {
        "content": "<p>In electronics and mathematics the and operator also has precedence</p>",
        "id": 358319792,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684098341
    },
    {
        "content": "<p><del>Not python (assuming i just typed this in correctly)</del> nvm...typed it wrong</p>",
        "id": 358319886,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098387
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span> <span class=\"ow\">and</span> <span class=\"kc\">True</span>\n</code></pre></div>\n<p>This in a python repl gives <code>True</code></p>",
        "id": 358319969,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684098449
    },
    {
        "content": "<p>It is a super easy fix, looks like we have a precedence table and they are equal precedence currently.</p>",
        "id": 358320424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098779
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/cfcd2a52892cc5ef0cf3ba9a33007820aa57d596/crates/compiler/module/src/called_via.rs#L21-L22\">https://github.com/roc-lang/roc/blob/cfcd2a52892cc5ef0cf3ba9a33007820aa57d596/crates/compiler/module/src/called_via.rs#L21-L22</a></p>",
        "id": 358320482,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098818
    },
    {
        "content": "<p>Just incrementing all precedence by 1 except for OR is a fix.</p>",
        "id": 358320583,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098866
    },
    {
        "content": "<p>Then and has a precendence 1 higher. Not sure if we picked equal precedence for a specific reason.</p>",
        "id": 358320620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098893
    },
    {
        "content": "<p>I always use parens in cases like these</p>",
        "id": 358320642,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684098904
    },
    {
        "content": "<p>Because they are equal precedence, this is current behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">false</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">true</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">true</span>\n\n<span class=\"c1\"># is running as:</span>\n\n<span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">false</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">true</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">true</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 358321029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684099244
    },
    {
        "content": "<p>Oh I see<br>\nI think it is best to have either <code>&amp;&amp;</code> be higher precedence, or have the compiler enforce you to put parens</p>",
        "id": 358321067,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684099287
    },
    {
        "content": "<p>Probably. No idea why it is this way, just digging into the compiler and noting how it currently is.</p>",
        "id": 358321152,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684099359
    },
    {
        "content": "<p>Should I raise an issue for it?</p>",
        "id": 358321188,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684099384
    },
    {
        "content": "<p>I could probably fix it myself, but it would be tomorrow (in my timezone it is almost midnight)</p>",
        "id": 358321214,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684099408
    },
    {
        "content": "<p>That  is probably reasonable. Though should wait for a comment from someone else before fixing. It may be working as intended. I don't know the background here. But yeah, fix is super simple, I already have one.</p>",
        "id": 358321284,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684099459
    },
    {
        "content": "<p>I'd like to second the idea of the compiler forcing you to place parens when &amp;&amp; and || are used. I can never keep straight which takes precedence (unlike +, -, *, /, ^). That said, fixing the precedence seems fine otherwise.</p>",
        "id": 358321337,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1684099537
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/5410\">issue raised</a></p>",
        "id": 358321614,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684099735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432314\">Martin Stewart</span> <a href=\"#narrow/stream/231634-beginners/topic/Wrong.20boolean.20operator.20result/near/358321337\">said</a>:</p>\n<blockquote>\n<p>I'd like to second the idea of the compiler forcing you to place parens when &amp;&amp; and || are used. I can never keep straight which takes precedence (unlike +, -, *, /, ^). That said, fixing the precedence seems fine otherwise.</p>\n</blockquote>\n<p>I'm from an electrical engineering background where these operators are used a lot. In my case I never confuse them, which is why I found the output in roc odd. So my preference is having the correct precedence.<br>\nAlso fine with the enforced parenthesis though</p>",
        "id": 358321755,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684099848
    },
    {
        "content": "<p>I guess it depends how many other people find it difficult to remember boolean operator precedence.</p>",
        "id": 358321812,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1684099919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> or <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> any history on this ordering? Is it a bug or is it intentional for some specific reason?</p>",
        "id": 358322169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684100225
    },
    {
        "content": "<p>I'm +1 for compiler warning here - seems similar to confusing infix functions in a pipeline like <code>|&gt; ((/) 2</code> (elm)</p>\n<p>I can understand it might be obvious if the person knows the caveat but imo Roc is trying to push for making things safe even for beginners so a compiler warning for error-prone assignments seems the right choice</p>",
        "id": 358323058,
        "sender_full_name": "Georges Boris",
        "timestamp": 1684101020
    },
    {
        "content": "<p>I'm pretty sure I just started with whatever Elm did on that</p>",
        "id": 358324154,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684101955
    },
    {
        "content": "<p>I like the idea of forcing parens there <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 358324213,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684101967
    },
    {
        "content": "<p>It looks like Elm returns true:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"kt\">False</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kt\">False</span><span class=\"w\"> </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"kt\">True</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kt\">True</span>\n<span class=\"kt\">True</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span>\n</code></pre></div>",
        "id": 358324489,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1684102239
    },
    {
        "content": "<p>Cool. So then two issues. 1 fix the precedence to match elm and most programming languages again</p>",
        "id": 358324836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684102616
    },
    {
        "content": "<p>2 force parens</p>",
        "id": 358324839,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684102622
    },
    {
        "content": "<p>I think if we force parens the precedence becomes moot, no?</p>",
        "id": 358328520,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684105966
    },
    {
        "content": "<p>Oh, i was thinking warning if no parens, so precedence still matters. For example in repl or dev</p>",
        "id": 358328768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684106172
    },
    {
        "content": "<p>If we make parens 100% required than it is moot</p>",
        "id": 358328780,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684106190
    },
    {
        "content": "<p>ah fair</p>",
        "id": 358329455,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684106860
    },
    {
        "content": "<p>good idea about making it a warning <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 358329456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684106867
    },
    {
        "content": "<p>in that case, yeah might as well change the precedence too</p>",
        "id": 358329459,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684106874
    },
    {
        "content": "<p>Do warnings make sense for Roc when <code>roc run</code> runs your program even with compiler errors?</p>",
        "id": 358330440,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684107826
    },
    {
        "content": "<p>yeah, the distinction is:</p>\n<ul>\n<li>errors mean \"this will compile to a <code>crash</code>, so your program may crash if you run it anyway\"</li>\n<li>warnings mean \"this won't compile to a <code>crash</code>, but you should really fix it; it will cause the process to exit with a nonzero exit code, and therefore fail CI\" (and alaso if you're a package, this will block being able to publish on the official registry)</li>\n<li><code>roc dev</code> will run as soon as there are no errors, even if there are still warnings</li>\n</ul>",
        "id": 358330876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684108270
    },
    {
        "content": "<p>Ah, the nonzero exit code is key. Without that I'd be worried it would result in the usual pile of ignored warnings.</p>",
        "id": 358330946,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684108330
    },
    {
        "content": "<p>yeah my experience on warnings is that if it's hard to ignore them from day 1, they'll never pile up</p>",
        "id": 358330983,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684108388
    },
    {
        "content": "<p>but of course they still shouldn't block running your program if you don't want to deal with them right away (and neither should errors!)</p>",
        "id": 358331008,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684108432
    },
    {
        "content": "<p>Yeah, that's a good balance :)</p>",
        "id": 358331065,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684108464
    },
    {
        "content": "<p>This kind of warning seems to be most suited for the formatter.</p>",
        "id": 358391177,
        "sender_full_name": "Anton",
        "timestamp": 1684139636
    },
    {
        "content": "<p>So no warning when doing <code>roc run/dev/build</code>? Only a warning on <code>roc format</code>?</p>",
        "id": 358472999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684160162
    },
    {
        "content": "<p>I would be concerned that <code>roc format</code> won't be in the hot loop enough to get cared about, even if it gives a warning. So I guess this depends on if we think that in general this should be fixed or if we don't care too much. Personally, I always add the parens in these kinds of cases, so I am totaly happy with the compiler warning and this being enforced in general. I think using them directly is simply more error prone and harder to read.</p>",
        "id": 358473511,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684160273
    },
    {
        "content": "<blockquote>\n<p>So no warning when doing <code>roc run/dev/build</code>? Only a warning on <code>roc format</code>?</p>\n</blockquote>\n<p>Yes, that's what I was thinking</p>\n<blockquote>\n<p>I think using them directly is simply more error prone and harder to read.</p>\n</blockquote>\n<p>I agree, but this seems the case for a lot of things that are currently fixed by the formatter :p</p>",
        "id": 358474493,
        "sender_full_name": "Anton",
        "timestamp": 1684160483
    },
    {
        "content": "<p>Would the formatter give a warning, or just fix it by adding in the parens as roc sees it?</p>",
        "id": 358475370,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684160662
    },
    {
        "content": "<p>Cause that is what actually would get parsed?</p>",
        "id": 358475426,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684160677
    },
    {
        "content": "<p>Automatically adding parens sounds dangerous because it might happen somewhere you're not currently looking at and you might not notice the warning which won't appear in subsequent runs.</p>",
        "id": 358479343,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684161466
    },
    {
        "content": "<p>I first thought that the formatter should add parens as roc sees the order but then it might be easy to miss that the order is not how you want it. So maybe a compiler warning is more appropriate</p>",
        "id": 358479767,
        "sender_full_name": "Anton",
        "timestamp": 1684161551
    },
    {
        "content": "<p>Yeah, that's what I think as well. Also, I'm not sure<code>roc format</code> warnings should be a thing as users will likely run it automatically on save and they'll probably miss them. At least that's what (almost) everybody does in Elm.</p>",
        "id": 358480115,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684161624
    },
    {
        "content": "<p>If there are going to be compiler warnings for these operators, should there be a discussion for others as well (comparison operators vs equality operators,...)?</p>",
        "id": 358512642,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684168483
    },
    {
        "content": "<p>yeah totally, and personally I've thought for years that we should do warnings like this for arithmetic operators</p>",
        "id": 358521863,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684170487
    },
    {
        "content": "<p>e.g. <code>1 + 2 * 3 - 4</code> should be explicitly rewritten to <code>1 + (2 * 3) - 4</code></p>",
        "id": 358521985,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684170512
    }
]