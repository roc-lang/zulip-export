[
    {
        "content": "<p>Hi,<br>\nI am trying to implement a simple terminal game using the basic-cli platform. I am trying to read user input in a non blocking way.  To simulate this I wanted to assing some time in the loop to read user input and ignore it if no input is received withing the given time. Does anyone know how to implement a function that receices a task and a time and returns the task result if the task completes or a Timeout error if the time runs out?</p>",
        "id": 422428899,
        "sender_full_name": "Daniel Herrmann",
        "timestamp": 1708439439
    },
    {
        "content": "<p>I don't think that is currently supported in basic cli. Someone would need to add the feature to the platform. Though it might be hard to add into the platform in a generic way with the current platform interface (without effect interpreters). </p>\n<p>So probably would currently need to be added for specific operation.</p>",
        "id": 422434788,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708440995
    },
    {
        "content": "<p>I think you can probably achieve what you want with <a href=\"https://www.roc-lang.org/packages/basic-cli/0.8.1/Tty#enableRawMode\">Tty.enableRawMode</a>, see <a href=\"https://github.com/lukewilliamboswell/roc-ansi/blob/b1651e02947eca2c9cafaa5a992ecc2d3a079c57/examples/tui-menu.roc#L64\">this example</a>.</p>",
        "id": 422437567,
        "sender_full_name": "Anton",
        "timestamp": 1708441722
    },
    {
        "content": "<p>I am using Tty.enableRawMode, the example is almost what I wanted, except the input is blocking, because the GUI doenst neet to update if there is no user input. Maybe I do need to implement something to be able to add a timeout to a task</p>",
        "id": 422441100,
        "sender_full_name": "Daniel Herrmann",
        "timestamp": 1708442661
    },
    {
        "content": "<p>Right, I understand now</p>",
        "id": 422443196,
        "sender_full_name": "Anton",
        "timestamp": 1708443203
    },
    {
        "content": "<p>Or implement a turn based game with no idle animations :P</p>",
        "id": 422459871,
        "sender_full_name": "Daniel Herrmann",
        "timestamp": 1708447990
    },
    {
        "content": "<p>That seems easier <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 422461167,
        "sender_full_name": "Anton",
        "timestamp": 1708448383
    },
    {
        "content": "<p>Yeah, this is something I've explored a bit while making terminal UI games. I came to the conclusion it's not possible without Task.map2 and the effect interpreters.</p>",
        "id": 422491228,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1708458874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.20Timeout/near/422491228\">said</a>:</p>\n<blockquote>\n<p>Yeah, this is something I've explored a bit while making terminal UI games. I came to the conclusion it's not possible without Task.map2 and the effect interpreters.</p>\n</blockquote>\n<p>Is there a place to track the implementation of Task.map2? I've been working on using your roc-ansi package to create an <a href=\"https://wiki.archlinux.org/title/Music_Player_Daemon\">MPD (Music Player Daemon)</a> TUI client and I've gotten to the point where I can get and display the current playlist from the server, but it doesn't auto update since the next loop is stuck waiting for input.</p>\n<p>I wanted to set a timeout on getting that input and jump to the next iteration of the loop, but it sounds like that's not possible with the basic-cli platform at the moment.</p>",
        "id": 429404107,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1711373496
    },
    {
        "content": "<p>I think we know what needs to be done, but it just needs someone to implement it in the compiler. I think the next step from memory is to implement a paricular function which can take any roc type and give it a good name. Then this will enable the changes we need for glue. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  or <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  could give a better explanation. Is this something you would be interested in working on?</p>\n<p>I don't think we've made an issie to track it or anything, so any updates or discussion would most likely be in zulip chat.</p>",
        "id": 429486319,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711392253
    },
    {
        "content": "<p>Oh actually I think <span class=\"user-mention\" data-user-id=\"507458\">@doubledup</span> might be working on things?</p>",
        "id": 429487141,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711392598
    },
    {
        "content": "<p>OK, thanks. I did search in Zulip and Github issues, but thought maybe I'd missed something. </p>\n<p>I think compiler work is beyond my abilities at this point, so I think I'll wait until someone one else is able to do it. There are plenty of other things I can play around with in the meantime.</p>",
        "id": 429487937,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1711392885
    }
]