[
    {
        "content": "<p>I have a record with many fields. One of the fields has the type <a href=\"https://roc-lang.github.io/basic-webserver/Utc/#Utc\"><code>Utc.Utc</code> from basic-webserver</a>.</p>\n<p>To convert the record to json, I have to convert the field to something else that implements encodable. What I want to do is something like<code>encodable_object = {object &amp; time: object.time |&gt; Utc.to_nanos_since_epoch}</code>. But this does not work, since the type of <code>{ object &amp; ...}</code>  has to have the same type as <code>object</code>. So you can change the value, but not the type.</p>\n<p>Is there an easy way to create a new record with a similar type? Or do I have to type out all fields?</p>",
        "id": 492568966,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1736363763
    },
    {
        "content": "<p>we should give <code>Utc</code> the <code>Encoding</code> ability</p>",
        "id": 492569095,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736363823
    },
    {
        "content": "<p>For now, you have to type out all of the fields, yes.</p>",
        "id": 492569121,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736363834
    },
    {
        "content": "<p>We didn't want to enable using record updates to change the underlying type because that would make it really easy for beginners to require moving a lot of data around</p>",
        "id": 492569219,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736363882
    },
    {
        "content": "<p>In general, we should push for all custom types in the future to have as many of the generated methods as possible</p>",
        "id": 492569321,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736363921
    },
    {
        "content": "<p>In our stdlib/platforms</p>",
        "id": 492569365,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736363938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/Convert.20one.20field.20of.20a.20record/near/492569219\">said</a>:</p>\n<blockquote>\n<p>We didn't want to enable using record updates to change the underlying type because that would make it really easy for beginners to require moving a lot of data around</p>\n</blockquote>\n<p>Only if the ref count is higher then 1 (which is true for everything in Roc) and the new type has a different size or alignment then the old type.</p>\n<p>It does not seem so different then <code>List.map</code>. It also copies a lot of memory if the new size is different.</p>",
        "id": 492569636,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1736364045
    },
    {
        "content": "<p>But I get your point.</p>",
        "id": 492569744,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1736364107
    },
    {
        "content": "<p>I think the door is still open to implementing it</p>",
        "id": 492569768,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736364119
    },
    {
        "content": "<p><a href=\"#narrow/channel/316715-contributing/topic/record.20.60.2E.2E.60.20update.20syntax/near/483085103\">#contributing &gt; record &#96;..&#96; update syntax @ ðŸ’¬</a></p>",
        "id": 492570116,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736364251
    },
    {
        "content": "<p>Here's the most recent discussion</p>",
        "id": 492570141,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736364261
    },
    {
        "content": "<p>Feel free to suggest against the conclusion we made in there</p>",
        "id": 492570175,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736364282
    }
]