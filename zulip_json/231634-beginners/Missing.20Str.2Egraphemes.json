[
    {
        "content": "<p>The Str module does not expose <code>graphemes</code>:</p>\n<p>21â”‚          |&gt; Str.graphemes<br>\n                ^^^^^^^^^^^^^</p>\n<p><a href=\"https://www.roc-lang.org/builtins/Str/#graphemes\">https://www.roc-lang.org/builtins/Str/#graphemes</a></p>",
        "id": 305710887,
        "sender_full_name": "Gabriela",
        "timestamp": 1666560306
    },
    {
        "content": "<p>the PR for that was merged today, so you may have a version of the compiler that does not support it yet</p>",
        "id": 305711020,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1666560394
    },
    {
        "content": "<p>So I will wait for the next nightly build to be available, probably tomorrow, thanks.</p>",
        "id": 305711770,
        "sender_full_name": "Gabriela",
        "timestamp": 1666560873
    },
    {
        "content": "<p>Here's the previous conversation on this topic:<br>\n<a href=\"#narrow/stream/316715-contributing/topic/.E2.9C.94.20Missing.20Str.2Egraphemes\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/.E2.9C.94.20Missing.20Str.2Egraphemes</a></p>",
        "id": 305713286,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1666561864
    },
    {
        "content": "<p>I was a little anxious to finish this advent of code exercise (2015, 3rd), so I converted the String input myself.<br>\n<a href=\"https://pastebin.com/YGB2rkFP\">https://pastebin.com/YGB2rkFP</a></p>",
        "id": 305714424,
        "sender_full_name": "Gabriela",
        "timestamp": 1666562529
    },
    {
        "content": "<p>In lieu of not having that function, I did the following for Roctoberfest:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseContents</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Report</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">ContentsParseErr</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">parseContents</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">InvalidBit</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ContentsParseErr</span><span class=\"w\"> </span><span class=\"s\">\"The line </span><span class=\"se\">\\\"</span><span class=\"s\">\\(line)</span><span class=\"se\">\\\"</span><span class=\"s\"> have an invalid bit\"</span><span class=\"w\"></span>\n\n<span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">ReportLine</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidBit</span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">parseBit</span><span class=\"w\"></span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"s\">\"101010011010\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">One</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Zero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">One</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Zero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">One</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Zero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Zero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">One</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">One</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Zero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">One</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Zero</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"nv\">parseBit</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Bit</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidBit</span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">parseBit</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bit</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">bit</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">Zero</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">One</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">InvalidBit</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 305718176,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1666564901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363500\">@Gabriela</span> the new nightlies are available now, except for MacOS x86_64, I'll look into what went wrong there.</p>",
        "id": 305798680,
        "sender_full_name": "Anton",
        "timestamp": 1666611457
    },
    {
        "content": "<p>New MacOS x86_64 nightlies are available now as well.</p>",
        "id": 305856755,
        "sender_full_name": "Anton",
        "timestamp": 1666628288
    }
]