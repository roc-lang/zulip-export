[
    {
        "content": "<p>Edit: I think I get it now after re-reading the tutorial. <code>*</code> is the wildcard type and can resolve to any type since <code>Stdout.line</code> never fails. So its compatible with the <code>I32</code> requirement.</p>\n<p>Hi there. I have what I think is a basic type system question. I was reading through the basic-cli platform and saw that the platform requires a name main which <code>main : Task {} I32</code><br>\nI'm confused why <code>main = Stdout.line \"hello\"</code> satisfies this constraint since its type is<code>Task.Task {} *</code>.<br>\nMy understanding was that the <code>*</code> in the type annotation means \"no value\" while the platform seems to require an I32 on failure.</p>",
        "id": 434768297,
        "sender_full_name": "Hrishikesh Dharam",
        "timestamp": 1713796901
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"701867\">@Hrishikesh Dharam</span>,<br>\nI don't know how the type checking works in detail but I believe the following is happening; the <code>*</code> in <code>Task {} *</code> means that <code>Stdout.line</code> can not return an \"error Task\". With that type signature, the compiler knows <code>line</code> is guaranteed to return an empty success Task (<code>{}</code>) and because the success case (<code>{}</code>) matches the success case of <code>Task {} I32</code> all is well :)</p>",
        "id": 434770689,
        "sender_full_name": "Anton",
        "timestamp": 1713797468
    },
    {
        "content": "<p>Thanks Anton, that mental model makes sense to me</p>",
        "id": 434775016,
        "sender_full_name": "Hrishikesh Dharam",
        "timestamp": 1713798417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"701867\">Hrishikesh Dharam</span> has marked this topic as resolved.</p>",
        "id": 434775078,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713798426
    }
]