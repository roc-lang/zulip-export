[
    {
        "content": "<p>Hello,</p>\n<p>out of curiosity, are there any performance implications on iterating a list with <code>List.walk</code> vs tail-call recursion with the <code>.. as rest</code> pattern?</p>\n<div class=\"codehilite\"><pre><span></span><code>List.walk(some_list, {}, |state, item|\n    ...\n)\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\"><pre><span></span><code>some_func = |some_list|\n    [] -&gt; ...\n    [item, .. as rest] -&gt;\n        ...\n        some_func(rest)\n</code></pre></div>\n<p>I see that <code>List.walk</code> calls <code>get_unsafe</code> underneath to avoid a bounds check. Can I assume the list destructuring also avoids bounds checks?</p>\n<p>And are there any other performance implications to be aware of between the two?</p>\n<p>Thanks.</p>",
        "id": 502704378,
        "sender_full_name": "hchac",
        "timestamp": 1740799190
    },
    {
        "content": "<p>Raw tail recursion is likely slower</p>",
        "id": 502704852,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740799565
    },
    {
        "content": "<p>Not by a lot, but slower</p>",
        "id": 502704857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740799571
    },
    {
        "content": "<p>Llvm might be smart enough to remove the bounds check, but it is not guaranteed.</p>",
        "id": 502704875,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740799590
    },
    {
        "content": "<p>On top of that, rest is a seamless slice. While those are fast to make, it is still more work than just incrementing an offset.</p>",
        "id": 502704910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740799624
    },
    {
        "content": "<p>Overall, probably not something to worry about, but is a minor optimization that could see gains in a very hot loop with essentially no body.</p>",
        "id": 502705006,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740799688
    },
    {
        "content": "<p>I see,</p>\n<p>so <code>rest</code> would be like me manually doing a <code>rest = List.drop_first(some_list, idx)</code> inside a <code>List.walk_with_index</code> or something similar?</p>\n<p>No doubt the <code>.. as rest</code> is convenient for a lot of code</p>",
        "id": 502705066,
        "sender_full_name": "hchac",
        "timestamp": 1740799773
    },
    {
        "content": "<p>Yeah, rest is equivalent to drop first on the original list.</p>",
        "id": 502705379,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740800030
    },
    {
        "content": "<p>Which the cost would be incrementing a pointer and decrementing a length.</p>",
        "id": 502705438,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740800054
    },
    {
        "content": "<p>With a bit of extra orchestration logic</p>",
        "id": 502705469,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740800084
    },
    {
        "content": "<p>Instead of walk with index where the cost is just an int increment with no extra logic.</p>",
        "id": 502705487,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740800102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"881564\">hchac</span> has marked this topic as resolved.</p>",
        "id": 502748802,
        "sender_full_name": "Notification Bot",
        "timestamp": 1740837371
    }
]