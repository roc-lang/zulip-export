[
    {
        "content": "<p>One thing I really like about Elm is that there's a single well written elm/http package that lots of other packages have built off of to support various rest APIs. In Roc, if I want to write a package to support a rest API, do I need to maintain multiple versions of it for each platforms own http API?</p>",
        "id": 258722406,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1634914273
    },
    {
        "content": "<p>our vision is that there is one package that exposes a <code>Request</code> type, and then many platforms can interpret that request description in whatever way they want</p>",
        "id": 258723148,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634914554
    },
    {
        "content": "<p>I believe Richard called these capability modules?</p>",
        "id": 258724107,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1634914891
    },
    {
        "content": "<p>They essentially can be a base for common APIs</p>",
        "id": 258724169,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1634914916
    },
    {
        "content": "<p>Cool, that's an interesting idea!</p>",
        "id": 258725162,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1634915317
    },
    {
        "content": "<p>Unsure if we should create new topics on Zulip or write in those that have a similar name to our question?</p>\n<p>So I have been playing around with the rust examples and am also learning some more rust along the way since I am completely new to the language. <br>\nWhat I want to accomplish to get more familar with roc and writing platforms:</p>\n<p>I want to write a little roc platform example that extends the <code>cli</code> <code>readLine</code> / <code>writeLine</code> example. But instead of shutting down after writing out your first and lastname I want it to repeat from the start and ask again! That seems like a reasonably small project.<br>\nBut I don't want to just while loop / re-allocating the unsafe block in the cli <code>lib.rs</code> main example.<br>\nI want to learn and understand how to keep the roc program alive and let it recive / emit \"events\" / \"callbacks\".</p>\n<div class=\"codehilite\"><pre><span></span><code>#[no_mangle]\npub extern &quot;C&quot; fn rust_main() -&gt; i32 {\n    let size = unsafe { roc_main_size() } as usize;\n    let layout = Layout::array::&lt;u8&gt;(size).unwrap();\n    // I don&#39;t just want to while loop around this block and endlessly re-init the roc program...\n    unsafe {\n        // TODO allocate on the stack if it&#39;s under a certain size\n        let buffer = std::alloc::alloc(layout);\n\n        roc_main(buffer);\n\n        let result = call_the_closure(buffer);\n\n        std::alloc::dealloc(buffer, layout);\n\n        result\n    };\n\n    // Exit code\n    0\n}\n</code></pre></div>\n<p>Could i get some help in how to accomplish that? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span><br>\nCurrently I do not know how to keep a roc program alive... or how to send \"messages\" back and forth between roc and the platform.</p>",
        "id": 259389597,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1635428513
    },
    {
        "content": "<p>Yeah, platforms can be a bit complex and are still in the process of being made nicer. I think the process of making them will probably be some of the biggest Roc library and abi changes in the future. There are also still a few missing pieces that make certain platform architectures painful or at least hard to make.</p>\n<p>Anyway, to attempt to answer your questions.<br>\n1) Your goal shouldn't need any platform changes. You should just be able to use recursion in the roc app.<br>\n2) Calling a closure is unsafe, so you would need the repeated unsafe block if you want to change the platform as you mentioned. That being said, you should be able to keep the allocation and deallocation outside of the loop and just reuse the buffer.<br>\n3) Keeping a roc program alive with some basic state and event handling done in the host is currently really annoying to maybe impossible to do as expected (should hopefully be updated soonish). Currently the sdl example is blocked on issues related to that (<a href=\"https://github.com/rtfeldman/roc/issues/1797\">exposing multiple functions to host</a> and type boxing). The easier option currently is probably to define your context in Roc and recursively use it. The false-interpreter example does everything in Roc with a context for state.</p>",
        "id": 259406015,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635434976
    },
    {
        "content": "<p>Thank you for that detailed step by step  <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> !</p>\n<p>I added <code>main</code> as the last line and it did indeed work:</p>\n<div class=\"codehilite\"><pre><span></span><code>main : Task {} *\nmain =\n    {} &lt;- await (Stdout.line &quot;What&#39;s your first name?&quot;)\n\n    firstName &lt;- await Stdin.line\n\n    {} &lt;- await (Stdout.line &quot;What&#39;s your last name?&quot;)\n\n    lastName &lt;- await Stdin.line\n\n    Stdout.line &quot;Hi, \\(firstName) \\(lastName)!&quot;\n\n    main\n</code></pre></div>\n<p>Altho I feel like this is not what I had in mind exactly, it certainly is a step in the right direction <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nThere is no really any back and forth going on between Rust and Roc here. Would not work with a webserver platform for example. (if Roc blocks the thread in an infinite recursion \"loop\" and never lets the platform do anything anymore).<br>\nI think part of my confusion might come from being a JS developer. The browser does not shut down after a \"main\" function has completed.<br>\nI am so used to event based systems. Gonna take a look at that SDL github issue. Thank you.</p>",
        "id": 259448007,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1635453192
    },
    {
        "content": "<p>Also, it is possible to have a webserver, it's just that currently it would have to be a webserver with only a single function exposed to the host. That function either would get called directly on each request, or it would return a list of closures to be called on specific requests. So definitely doable with current roc, but not a nice event loop structure where you expose a small handful of functions (eg: model, view, update).</p>",
        "id": 259451037,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635454727
    },
    {
        "content": "<p>There is a pr with a simple webserver. It probably still works, but hasn't been touched in a while. It opts for the first option of calling the same function for every request. It may also match what you are looking for.</p>",
        "id": 259451379,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635454839
    },
    {
        "content": "<p><a href=\"https://github.com/rtfeldman/roc/pull/1635\">Pr link</a></p>",
        "id": 259451504,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635454892
    },
    {
        "content": "<p>I am hijacking this, hope this is okay.</p>\n<p>So what I do not quite understand yet is how the link from my C API in the platform is made to the Roc code. Where is declared that I have to export <code>roc__mainForHost_1_exposed_generic</code> which then is <code>mainForHost</code> in the roc code? I do not see where that connection is made. And in addition: Am I allowed to export any symbol and it is automatically linked to roc? So for example if I have a <code>fn get_four() -&gt; i32 { 4 }</code> and I want to make that available in roc (of course via C calling convention, not via Rust calling convention), how do I export it to roc?</p>",
        "id": 259723235,
        "sender_full_name": "Matthias Beyer",
        "timestamp": 1635589760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> but that \"one function exposed to the host\" is the \"main\" is it not?</p>",
        "id": 259723473,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1635590130
    },
    {
        "content": "<p>The one function exposed to the host could be any one function with any set of arguments and return value. So it could be an event handler or something similar.</p>",
        "id": 259739406,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635611442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453579\">@Matthias Beyer</span> we definitely need to start improving the docs around this especially for platform builders. Essentially the package-config.roc defines the c API. It specifies which functions are imported and exported from roc. Then roc, when compiling, expects those functions with some minor name changes. Exposed functions from roc are definitely the most complex because they may return closures.</p>",
        "id": 259739600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635611747
    },
    {
        "content": "<p>All functions provided to roc that are specific to the platform are in the form <code>roc_fx_...</code></p>",
        "id": 259739755,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635611896
    },
    {
        "content": "<p>There is also another set of functions that must always be provided that are used for memory management and panicking: <code>roc_panic</code>, <code>roc_alloc</code> <code>roc_realloc</code>, <code>rpc_dealloc</code> also 2 others that might go away in the Future: <code>roc_memcpy</code> and <code>roc_memset</code></p>",
        "id": 259739891,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635612071
    },
    {
        "content": "<p>Then, if roc is exposing only a simple function, the function is just <code>roc__&lt;name&gt;_1_exposed</code>. If it is returning a closure, another set of extra information is exposed so the host can understand the closure.</p>",
        "id": 259740012,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635612220
    },
    {
        "content": "<p>So if I implement a function <code>roc_fx_hereBeDragons</code> with a C ABI, I can call <code>hereBeDragons</code> from roc? Is it that simple?</p>",
        "id": 259740083,
        "sender_full_name": "Matthias Beyer",
        "timestamp": 1635612302
    },
    {
        "content": "<p>Have to add to the <code>Package-Config.roc</code> as well. Like the function signiture</p>",
        "id": 259740166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635612387
    },
    {
        "content": "<p>Also, roc forces it to be an effect so calling is normally done through tasks, not directly, but it is pretty similar.</p>",
        "id": 259740262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635612530
    },
    {
        "content": "<p>Can you explain a bit about how tasks and effects work? I've been trying to expose my own platform functions to my Roc code too, but haven't had much success yet.</p>",
        "id": 259796800,
        "sender_full_name": "Tom Small",
        "timestamp": 1635698752
    },
    {
        "content": "<p>I will try, but I may not have the best answer. If I am off base, hopefully someone will jump in and correct me.</p>\n<p>Essentially an Effect is a promise or a future. A wrapper that is capable of giving you a value. This is a type built into Roc. I think (though I could be wrong) that it is required as the return type from all platform functions. Roc deals with this translation internally, and the platform can still just return raw types.</p>\n<p>A Task on the other hand is a common Roc module that is used to deal with the possibility of failure. A task is defined as <code>Task ok err : Effect.Effect (Result ok err)</code>. It enables nice chain-ability when it comes to the potential of errors. For example, <code>Task.await</code>, takes a task, runs a transformation on result if it is not an error and then returns a task that might or might not be an error.</p>",
        "id": 259808276,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635714204
    },
    {
        "content": "<p>Thank you, Brendan! That's very helpful.</p>",
        "id": 259949205,
        "sender_full_name": "Tom Small",
        "timestamp": 1635822918
    },
    {
        "content": "<p>Where can I find documentation for Roc Platforms? (and the Roc Platforms themselves)</p>",
        "id": 263333202,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1638382516
    },
    {
        "content": "<p>it doesn't exist yet - my plan has been to write the tutorial for application authors first and then to move on to platform authors!</p>",
        "id": 263333452,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638382619
    },
    {
        "content": "<p>Ah, okay... how would you recommend I learn a platform's API? Maybe your \"Edges of Cutting-Edge  Languages talk?\"   Just figuring out where to go from looking at the initial Hello World examples (and this seems to be the next step).</p>",
        "id": 263333863,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1638382798
    },
    {
        "content": "<p>basically yes. Most examples have platforms written in rust or zig, so pick your favorite out of the 2 and see how the platform connects to the app</p>",
        "id": 263334179,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638382913
    },
    {
        "content": "<p>Actually, what you just said just clicked lol... I'm looking to be an Application author.</p>",
        "id": 263334273,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1638382942
    },
    {
        "content": "<p>for an app author the platform is just a bunch of roc code</p>",
        "id": 263334370,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638382976
    },
    {
        "content": "<p>usually there is a <code>Task</code> module</p>",
        "id": 263334397,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638382986
    },
    {
        "content": "<p>and then there can be some extra stuff around that</p>",
        "id": 263334414,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1638382993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"460629\">@Jason Hobbs</span> I also gave a talk on zig showtime with a demo on how to work with platforms</p>",
        "id": 263355729,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638391817
    },
    {
        "content": "<p>you can skip the roc intro and go straight to the demo</p>",
        "id": 263355760,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638391835
    },
    {
        "content": "<p>if you're curious that is, but the examples folders are also good</p>",
        "id": 263355822,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638391873
    },
    {
        "content": "<p>So funny.. I just finished watching that like 5 minutes ago. Great talk on it... has me curious about using Node.js as a platform for kicks</p>",
        "id": 263355902,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1638391912
    },
    {
        "content": "<p>hm interesting thought, I hadn't considered that<br>\nand thanks :), it was my first public talk</p>",
        "id": 263355992,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638391944
    },
    {
        "content": "<p>Probably would not be a pleasant experience. I would assume cffi in node would be annoying. Also, with rocs current compilation model and setup, I think extra work would need to be done manually or via updates to the compiler.</p>",
        "id": 263356095,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1638392007
    },
    {
        "content": "<p>maybe it could work if you use zig to import node as a c lib?</p>",
        "id": 263356222,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638392069
    },
    {
        "content": "<p>Is that a thing?</p>",
        "id": 263356342,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1638392126
    },
    {
        "content": "<p>idk I'm just spit balling lol</p>",
        "id": 263356473,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638392170
    },
    {
        "content": "<p><span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 263356490,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638392181
    },
    {
        "content": "<p>lol I guess I imagined the Platform-to-Application API as being more loosely connected. Makes sense for performance it isn't.</p>",
        "id": 263358591,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1638393258
    },
    {
        "content": "<p>A roc application is essentially a static library that the platform depends on.</p>",
        "id": 263358787,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1638393373
    },
    {
        "content": "<p>Is it the LLVM that makes it compatible across different languages? Or is there some other common protocol for the static libraries to work? (Might be an odd question - I don't have much experience linking libraries or using systems-level languages)</p>",
        "id": 263359456,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1638393758
    },
    {
        "content": "<p>it's the C ABI</p>",
        "id": 263359567,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1638393819
    },
    {
        "content": "<p>cffi is a standard protocol supported by most languages.</p>",
        "id": 263359569,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1638393821
    },
    {
        "content": "<p>oh, okay.. nice.</p>",
        "id": 263359747,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1638393912
    },
    {
        "content": "<p>If an application wants to use any pseudo-random number generation, will the application need to use a platform that exports a pRNG function?</p>",
        "id": 267044110,
        "sender_full_name": "jan kili",
        "timestamp": 1641463814
    },
    {
        "content": "<p>(or a noise function, from like a clock or thermometer)</p>",
        "id": 267044201,
        "sender_full_name": "jan kili",
        "timestamp": 1641463904
    },
    {
        "content": "<p>I'm just thinking of simple randomness ergonomics like Python's <code>random.choice([a, b, c, ...])</code>, but maybe randomness in FP is its own can of worms?</p>",
        "id": 267044842,
        "sender_full_name": "jan kili",
        "timestamp": 1641464357
    },
    {
        "content": "<p>in elm it's enough for the platform to provide a seed value</p>",
        "id": 267045495,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641464826
    },
    {
        "content": "<p>(After quickly reading about RNG in Elm...) Are you referring to Elm's <code>step</code> function? Or would an effectful function like <code>generate</code> be preferable?</p>\n<p>Perhaps RNG-supportive Roc platforms should provide a seed generator function like <code>getSeed : {} -&gt; U128</code>, and then platform-agnostic randomness packages can provide ergonomic abstractions. (Ex: <code>choice : List a, U128 -&gt; a</code>)</p>\n<p>Of course, platforms could also provide their own domain-specific abstractions. (Hmm, I can't think of a good example.)</p>",
        "id": 267047132,
        "sender_full_name": "jan kili",
        "timestamp": 1641466055
    },
    {
        "content": "<p>it would have to be a <code>{} -&gt; Random.Random U128</code> function; the value returned by getSeed is different every time, so it needs to be somehow wrapped to keep the rest of the language pure</p>",
        "id": 267047868,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641466523
    },
    {
        "content": "<p>Is that to prevent inaccurate memoization? Is that wrapper somehow recognized as opaque?</p>",
        "id": 267048179,
        "sender_full_name": "jan kili",
        "timestamp": 1641466760
    },
    {
        "content": "<p>purity (same input always gives the same output) is very core to roc, a bunch of things don't make sense without it</p>",
        "id": 267048420,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641466891
    },
    {
        "content": "<p>for instance we can currently freely reorder definitions in a let block. That's not true without purity</p>",
        "id": 267048498,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641466937
    },
    {
        "content": "<p>and yeah a wrapper like <code>Seed : [ @Seed U128 ]</code> is opaque and has no runtime cost versus just the U128</p>",
        "id": 267048567,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641466996
    },
    {
        "content": "<p>the <code>Random.Random</code> (or <code>Random.Generator</code>) is meant to chain randomness</p>",
        "id": 267048602,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641467023
    },
    {
        "content": "<p>it's defined as <code>Random a : [ @Random (Seed -&gt; { value : a, newSeed : Seed }) ]</code></p>",
        "id": 267048675,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641467059
    },
    {
        "content": "<p>and on that type you can define <code>map2</code> and <code>after/andThen</code> ect</p>",
        "id": 267048692,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641467079
    },
    {
        "content": "<p>Gotcha! Thanks for that great explanation. Are those built-in Elm types that you expect to be emulated by many Roc platform authors?</p>",
        "id": 267049064,
        "sender_full_name": "jan kili",
        "timestamp": 1641467345
    },
    {
        "content": "<p>this is similar to http I think where there could be a generic <code>Random</code> package with the types and map2/andThen, and the platform provides the function to get a new seed</p>",
        "id": 267049491,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641467731
    },
    {
        "content": "<p>actually that would be <code>getSeed : Task Seed *</code> in practice I think</p>",
        "id": 267049513,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641467751
    },
    {
        "content": "<p>and of course you could also have a <code>constantSeed : U128 -&gt; Seed</code> or something like that in the random package, mostly for testing</p>",
        "id": 267049620,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641467820
    },
    {
        "content": "<p>Perfect. I wonder what percentage of platforms will support RNG! I'm used to it as a language built-in, but I suppose that some application categories need it more than others (game engines vs. text editors?). That might be reflected in different platform authors seeing it as critical vs. bloat.</p>",
        "id": 267050101,
        "sender_full_name": "jan kili",
        "timestamp": 1641468138
    },
    {
        "content": "<p>yes. Note that with the <code>constantSeed</code> you could use any entropy. So e.g. if your application has users, you could use the username as the initial seed (need some hashing or something to turn it into a number, but it's doable)</p>",
        "id": 267051512,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641469229
    },
    {
        "content": "<p>so even if the platform does not provide it conveniently, if it gives you anything that is varying in a meaningful way (time of day, ...) you could use that to make an effectively random seed</p>",
        "id": 267051562,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641469275
    },
    {
        "content": "<p>(this is all not cryptographic of course)</p>",
        "id": 267051568,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1641469287
    },
    {
        "content": "<p>yeah, actually the package that eventually became <code>elm/random</code> was originally implemented entirely as a third-party package with no language integration or dependency on effects: <a href=\"https://github.com/mgold/elm-random-pcg\">https://github.com/mgold/elm-random-pcg</a></p>",
        "id": 267080489,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641486199
    },
    {
        "content": "<p>it was eventually moved into <code>elm/random</code> because it became the recommended way to do things, and at that point it also picked up the <code>generate</code> task</p>",
        "id": 267080544,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641486239
    },
    {
        "content": "<p>so in Roc it could just be implemented as a third-party library along the same lines as the original Elm implementation, which would naturally imply that it's platform-agnostic!</p>",
        "id": 267080715,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641486304
    },
    {
        "content": "<p>that Elm implementation is based on <a href=\"https://www.pcg-random.org/\">https://www.pcg-random.org/</a> (hence the name <code>random-pcg</code>), although it had to do some tricks to work around how browsers don't support 64-bit integers natively (or didn't at the time), such as using two 32-bit integers instead</p>",
        "id": 267080865,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641486372
    },
    {
        "content": "<p>so an ideal Roc implementation would probably have a public API with a lot of similarities to the Elm one, but an internal implementation that might look more like a Roc port of <a href=\"https://github.com/rust-random/rand\">https://github.com/rust-random/rand</a> because of the 64-bit integer support</p>",
        "id": 267081173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641486515
    },
    {
        "content": "<p>Well that sounds like a good <code>## Goals</code> section to me!</p>",
        "id": 267140482,
        "sender_full_name": "jan kili",
        "timestamp": 1641518991
    },
    {
        "content": "<p>Let the RNG begin: <a href=\"https://github.com/JanCVanB/roc-random\">https://github.com/JanCVanB/roc-random</a></p>",
        "id": 267140494,
        "sender_full_name": "jan kili",
        "timestamp": 1641518999
    },
    {
        "content": "<p>Contributors welcome!</p>",
        "id": 267140533,
        "sender_full_name": "jan kili",
        "timestamp": 1641519003
    },
    {
        "content": "<p>yoooooo, that's awesome! lmk if you have any questions about the Elm version - Max and I used to go to San Francisco Elm meetups back in the day and talk about it when he was developing it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 267142591,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641521082
    },
    {
        "content": "<p>Thanks, right now I'm having fun contorting my brain to translate code with <code>[personally-semi-advanced math concept]</code> from <code>[personally-unlearned programming language] </code> to <code>[objectively-unfinished programming language]</code> while utilizing <code>[newly-proposed platform-agnosticity pattern]</code> to future-proof it for use with <code>[nonexistent potential platforms]</code> through <code>[nonexistent publishing system]</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267142946,
        "sender_full_name": "jan kili",
        "timestamp": 1641521498
    },
    {
        "content": "<p>I love the ambition! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 267143027,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641521590
    },
    {
        "content": "<p>The nice part is that even without a packaging system, it can probably be copied into any random platform and used.</p>",
        "id": 267144863,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641523477
    },
    {
        "content": "<p>to be fair, that's how you end up being the person who says \"I wrote the random generation library everybody uses in Roc\" <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 267186295,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641560720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> this is great!<br>\nNot sure if you're aware of this already but if you're trying to figure out what some unfamiliar Elm code is doing, then <a href=\"https://package.elm-lang.org/packages/elm/core/latest/Debug#log\">Debug.log</a> is your friend. For example you could clone the repo and then start inserting <code>_ = Debug.log \"some_var\" some_var</code> into <code>let</code> blocks all over the place, then run the tests and see what comes out on the console.</p>",
        "id": 267197037,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1641566936
    },
    {
        "content": "<p>I (a newborn Rustling) am trying to create a Bevy <a href=\"https://docs.rs/bevy/latest/bevy/\">https://docs.rs/bevy/latest/bevy/</a> \"hello world\" platform by adapting <code>examples/hello-rust/platform</code>. While I could post the wide and wild variety of errors I'm getting, what files would you expect me to need to change to get Bevy to compile (just a minimal hello popup)? I'm currently changing <code>platform/sec/lib.rs</code> and <code>platform/Cargo.toml</code>.</p>",
        "id": 269865764,
        "sender_full_name": "jan kili",
        "timestamp": 1643464647
    },
    {
        "content": "<p>that page you link has an example. In theory you could just have the platform not use any roc code at all, so changing the platform rust code to that example should do it? (swap <code>main</code> for <code>rust_main</code>)</p>",
        "id": 269866886,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643465934
    },
    {
        "content": "<p>So no <code>Cargo.toml</code> changes necessary?</p>",
        "id": 269867404,
        "sender_full_name": "jan kili",
        "timestamp": 1643466560
    },
    {
        "content": "<p>Last night I tried injecting Bevy main into Rust main function and got so many angry messages haha</p>",
        "id": 269867489,
        "sender_full_name": "jan kili",
        "timestamp": 1643466632
    },
    {
        "content": "<p>oh, yes sure</p>",
        "id": 269867493,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643466639
    },
    {
        "content": "<p>you'd need to add bevy to the dependencies section of the <code>Cargo.toml</code></p>",
        "id": 269867498,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643466653
    },
    {
        "content": "<p>typically you can find what to add on <code>crates.io</code>: <a href=\"https://crates.io/crates/bevy\">https://crates.io/crates/bevy</a></p>",
        "id": 269867516,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643466685
    },
    {
        "content": "<p>so <code>bevy = \"0.6.0\"</code> in this case</p>",
        "id": 269867523,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643466697
    },
    {
        "content": "<p>Great - sounds like I'm on the right track :)</p>",
        "id": 269867711,
        "sender_full_name": "jan kili",
        "timestamp": 1643466918
    },
    {
        "content": "<p>Bevy recommends \"dynamic\" in its dependency definition, but that causes errors about bevy missing \"rlib\"</p>",
        "id": 269867814,
        "sender_full_name": "jan kili",
        "timestamp": 1643467031
    },
    {
        "content": "<p>Last I saw, without bevy dynamic, it was complaining about hundreds of missing files that started with underscores - can post details later</p>",
        "id": 269867898,
        "sender_full_name": "jan kili",
        "timestamp": 1643467092
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 269867905,
        "sender_full_name": "jan kili",
        "timestamp": 1643467100
    },
    {
        "content": "<p>hmm you could try getting bevy to run just outside of a roc context</p>",
        "id": 269868026,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643467235
    },
    {
        "content": "<p>it's hard to know now if the problem is with roc or with rust or bevy</p>",
        "id": 269868042,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643467258
    },
    {
        "content": "<p>I got their hello world working normally, but when I integrated with Roc it was hard to say what failed</p>",
        "id": 269870311,
        "sender_full_name": "jan kili",
        "timestamp": 1643469799
    },
    {
        "content": "<p>Here's where I'm stuck, if anyone can help <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/rtfeldman/roc/commit/88c94bf3031feb7f9bad4008cd403bd0b2f42db5\">https://github.com/rtfeldman/roc/commit/88c94bf3031feb7f9bad4008cd403bd0b2f42db5</a><br>\n(This is not intended as a WIP contribution, it's just pushed to the repo for convenient diff-ing)</p>",
        "id": 269904015,
        "sender_full_name": "jan kili",
        "timestamp": 1643509545
    },
    {
        "content": "<p>Well, this seems solidly beyond my Rust abilities now:<br>\n<code>ld: symbol(s) not found for architecture x86_64</code><br>\n<code>error: linking with </code>cc<code> failed: exit status: 1</code><br>\n<code>  = note: clang-7: error: invalid version number in '-mmacosx-version-min=12.0'</code><br>\nI seem to be experiencing <a href=\"https://github.com/rust-lang/rust/issues/91372\">https://github.com/rust-lang/rust/issues/91372</a> via <a href=\"https://github.com/rust-lang/rust/issues/91781\">https://github.com/rust-lang/rust/issues/91781</a>, but the fixes they mention don't seem to work for me. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 269932763,
        "sender_full_name": "jan kili",
        "timestamp": 1643548995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> could this be because we have some C code in the rust platforms? I always forget why that was needed, but maybe information gets lost in the process?</p>",
        "id": 269932883,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643549150
    },
    {
        "content": "<p>it's needed until we can switch over to surgical linking for everything</p>",
        "id": 269933392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643549762
    },
    {
        "content": "<p><a href=\"https://users.rust-lang.org/t/error-when-compiling-linking-with-o-files/49635/5?u=rtfeldman\">https://users.rust-lang.org/t/error-when-compiling-linking-with-o-files/49635/5?u=rtfeldman</a></p>",
        "id": 269933423,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643549824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> is there a commit somewhere I can check out so I can try it on my machine?</p>",
        "id": 269933542,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643549975
    },
    {
        "content": "<p>Yes! <a href=\"https://github.com/rtfeldman/roc/commit/88c94bf3031feb7f9bad4008cd403bd0b2f42db5\">https://github.com/rtfeldman/roc/commit/88c94bf3031feb7f9bad4008cd403bd0b2f42db5</a></p>",
        "id": 269933554,
        "sender_full_name": "jan kili",
        "timestamp": 1643549998
    },
    {
        "content": "<p>Thank you both :)</p>",
        "id": 269933584,
        "sender_full_name": "jan kili",
        "timestamp": 1643550003
    },
    {
        "content": "<p>hm, I can't build bevy at all on my M1 (even outside Roc) because I'm running into <a href=\"https://github.com/bevyengine/bevy/issues/928#issuecomment-943882168\">https://github.com/bevyengine/bevy/issues/928#issuecomment-943882168</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269939872,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643557871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> are you on an M1 or x64 mac?</p>",
        "id": 269939882,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643557890
    },
    {
        "content": "<p>x64</p>",
        "id": 269941226,
        "sender_full_name": "jan kili",
        "timestamp": 1643559271
    },
    {
        "content": "<p>Their helloworld &amp; breakout examples build for me</p>",
        "id": 269941240,
        "sender_full_name": "jan kili",
        "timestamp": 1643559291
    },
    {
        "content": "<p>I tried this with the latest nightly of rust, which is supposed to have the fix for #91372, and that didn't work either</p>",
        "id": 269943684,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1643562325
    },
    {
        "content": "<p>so I guess a reasonable question is: how important is it that it be bevy specifically? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269963251,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643583595
    },
    {
        "content": "<p>I have an x64 mac I can try it on tomorrow</p>",
        "id": 269963303,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643583607
    },
    {
        "content": "<p>Haha, to me? Very. To the community? Probably not.</p>",
        "id": 269963723,
        "sender_full_name": "jan kili",
        "timestamp": 1643584120
    },
    {
        "content": "<p>I haven't tried the fix yet, but might get some coding in tonight to try it :) thanks!</p>",
        "id": 269963738,
        "sender_full_name": "jan kili",
        "timestamp": 1643584144
    },
    {
        "content": "<p>shot in the dark: <code>clang-7: error: invalid version number in '-mmacosx-version-min=12.0'</code> - when you run <code>clang --version</code> what does it say?</p>",
        "id": 269963889,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643584339
    },
    {
        "content": "<p>oh also what version of macOS are you on?</p>",
        "id": 269963929,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643584400
    },
    {
        "content": "<p>That's a good question - I'm afk right now, but that was my error when running with some recommended env var like <code>MACOSX_DEPLOYMENT_TARGET=12.0 &amp;&amp; cargo run examples/hello-rust/Hello.roc</code></p>",
        "id": 269963996,
        "sender_full_name": "jan kili",
        "timestamp": 1643584479
    },
    {
        "content": "<p>I'm on 12.0.1</p>",
        "id": 269964000,
        "sender_full_name": "jan kili",
        "timestamp": 1643584489
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[nix-shell:~/code/clones/roc]$ clang --version\nclang version 7.1.0 (tags/RELEASE_710/final)\nTarget: x86_64-apple-darwin\nThread model: posix\nInstalledDir: /nix/store/zfh3npfhfjjgwi0dqpriklip5k15ppmj-clang-7.1.0/bin\n</code></pre></div>",
        "id": 269978159,
        "sender_full_name": "jan kili",
        "timestamp": 1643602545
    },
    {
        "content": "<p>I'll take this debugging into <a href=\"https://github.com/rtfeldman/roc/issues/2432\">https://github.com/rtfeldman/roc/issues/2432</a></p>",
        "id": 269979245,
        "sender_full_name": "jan kili",
        "timestamp": 1643603957
    },
    {
        "content": "<p>Unrelated to this debugging, Bevy's API looks super-resistant to first-level Roc-ification:</p>\n<ul>\n<li>struct literals</li>\n<li>derive macros</li>\n<li><code>mut</code> parameters<br>\n<span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></li>\n</ul>",
        "id": 269980772,
        "sender_full_name": "jan kili",
        "timestamp": 1643605744
    },
    {
        "content": "<p>However, second-level Roc-ification seems promising:</p>\n<ul>\n<li>platform is bound to one game genre/subgenre (entities, components, systems, and composing them into an app)</li>\n<li>apps define internal logic for those game systems (setup, scoring, interactions, etc.)</li>\n</ul>",
        "id": 269980942,
        "sender_full_name": "jan kili",
        "timestamp": 1643605928
    },
    {
        "content": "<p>Example for a 2D platformer (like Super Mario): The platform says that there must be a <code>Player</code> that <code>jump</code>s, but the Roc app must specify when the jump happens via keymapping, how the jump looks via animation curve, when the jump is allowed via state machine rules, and how the jump is interrupted via collision rules. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 269981227,
        "sender_full_name": "jan kili",
        "timestamp": 1643606233
    },
    {
        "content": "<p>Can a platform <code>requires</code> multiple things?<br>\nI can make a one-<code>requires</code> platform work, even if the def isn't named <code>main</code>.<br>\nNow I'm trying to get this two-<code>requires</code> platform to work:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">platform</span><span class=\"w\"> </span><span class=\"s\">\"breakout\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ballSpeed</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dec</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">paddleSpeed</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dec</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">ballSpeedForHost</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">paddleSpeedForHost</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">effects</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"kt\">Effect</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"nf\">ballSpeedForHost</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dec</span><span class=\"w\"></span>\n<span class=\"nf\">ballSpeedForHost</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">ballSpeed</span><span class=\"w\"></span>\n\n<span class=\"nf\">paddleSpeedForHost</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dec</span><span class=\"w\"></span>\n<span class=\"nf\">paddleSpeedForHost</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">paddleSpeed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"err\">──</span><span class=\"w\"> </span><span class=\"kt\">MISSING</span><span class=\"w\"> </span><span class=\"kt\">REQUIRES</span><span class=\"w\"> </span><span class=\"err\">────────────────────────────────────────────────────────────</span><span class=\"w\"></span>\n\n<span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">partway</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">parsing</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"n\">stuck</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"kt\">:</span><span class=\"w\"></span>\n\n<span class=\"mi\">1</span><span class=\"err\">│</span><span class=\"w\">  </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"breakout\"</span><span class=\"w\"></span>\n<span class=\"mi\">2</span><span class=\"err\">│</span><span class=\"w\">      </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ballSpeed</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">paddleSpeed</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                     </span><span class=\"o\">^</span><span class=\"w\"></span>\n\n<span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">expecting</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">keyword</span><span class=\"w\"> </span><span class=\"n\">next</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270158131,
        "sender_full_name": "jan kili",
        "timestamp": 1643695899
    },
    {
        "content": "<p>not currently, a quick fix is to accept a record with the fields that you want</p>",
        "id": 270167584,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643703760
    },
    {
        "content": "<p>That would be great, though since I didn't see a <code>RocRecord</code> in <code>roc_std</code>, I didn't know how to proceed with that approach.</p>",
        "id": 270167836,
        "sender_full_name": "jan kili",
        "timestamp": 1643703869
    },
    {
        "content": "<p>you can expose multiple things from the package config</p>",
        "id": 270167936,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643703921
    },
    {
        "content": "<p>hmm wait no</p>",
        "id": 270167946,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643703927
    },
    {
        "content": "<p>well kinda</p>",
        "id": 270167948,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643703929
    },
    {
        "content": "<p>you can expose a record, and that turns into a rust struct in a predictable way</p>",
        "id": 270168094,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643704029
    },
    {
        "content": "<p>on the rust side you need to make sure the struct sorts its fields first by alignment, then by name of the field, and it's annotated with <code>#[repr(C)]</code></p>",
        "id": 270168160,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643704081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/270168160\">said</a>:</p>\n<blockquote>\n<p>on the rust side you need to make sure the struct sorts its fields first by alignment, then by name of the field, and it's annotated with <code>#[repr(C)]</code></p>\n</blockquote>\n<p>I just tried this, and it works!</p>",
        "id": 270931424,
        "sender_full_name": "jan kili",
        "timestamp": 1644208097
    },
    {
        "content": "<p>I never expected to dive this much into platform development, but it's smooth!</p>",
        "id": 270931440,
        "sender_full_name": "jan kili",
        "timestamp": 1644208138
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/s8XjKzkl2AxdEJdxsfTpDZQE/hello_world.png\">hello_world.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/s8XjKzkl2AxdEJdxsfTpDZQE/hello_world.png\" title=\"hello_world.png\"><img src=\"/user_uploads/22008/s8XjKzkl2AxdEJdxsfTpDZQE/hello_world.png\"></a></div>",
        "id": 270936510,
        "sender_full_name": "jan kili",
        "timestamp": 1644213859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> are nested Records expose-able?</p>",
        "id": 270938493,
        "sender_full_name": "jan kili",
        "timestamp": 1644216183
    },
    {
        "content": "<p>I'm getting this: <code>emitted runtime error function \"The </code>8.IdentId(0)<code> function could not be generated, likely due to a type error.\"</code><br>\n(though it may be from some unrelated mistake)</p>",
        "id": 270938517,
        "sender_full_name": "jan kili",
        "timestamp": 1644216216
    },
    {
        "content": "<p>Also, any tips on passing a record field like <code>List F32</code> to Rust? Or should I just experiment?</p>",
        "id": 270943420,
        "sender_full_name": "jan kili",
        "timestamp": 1644220789
    },
    {
        "content": "<p>it should just work</p>",
        "id": 271003639,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644251062
    },
    {
        "content": "<p>and nested records also should just work</p>",
        "id": 271003717,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644251094
    },
    {
        "content": "<p>only tricky thing is the order of record fields on the C/Rust/... side</p>",
        "id": 271003776,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644251121
    },
    {
        "content": "<p>How would you write/order the matching Rust struct for this Record?</p>\n<div class=\"codehilite\"><pre><span></span><code>a : {\n    b : Str,\n    c : U8,\n    d : U32,\n    e : List U8,\n    f : List U32,\n    g : {\n        h : U32,\n        i : I32,\n        j : List U32,\n        k : List I32},\n    x : List { y : Str, z : Str } }\n</code></pre></div>",
        "id": 271017707,
        "sender_full_name": "jan kili",
        "timestamp": 1644256872
    },
    {
        "content": "<p>Allright, adding an alias for clarity</p>\n<div class=\"codehilite\"><pre><span></span><code>T : \n    {\n        h : U32,\n        i : I32,\n        j : List U32,\n        k : List I32,\n    }\n\nU : \n    {\n        b : Str,\n        c : U8,\n        d : U32,\n        e : List U8,\n        f : List U32,\n        g : T,\n        x : List { y : Str, z : Str } \n    }\n</code></pre></div>\n\n<p>We can start with <code>T</code>: the rule is sort first by alignment, then by field name.<br>\n(for this you need to know some stuff about alignment, I can elaborate if you're not sure how that works)</p>\n<p>For this record, we're done immediately (lists store a pointer and a length (as a nat/usize) and hence have the alignment of a pointer which is equal to the alignment of a usize). </p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    h : U32,\n    i : I32,\n    j : List U32,\n    k : List I32,\n}\n</code></pre></div>\n\n<p>Compound structures have the alignment equal to the maximum of the alignment of their fields. That means we can sort the fields by alignmenthere:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    c : U8,\n    d : U32,\n    b : Str,\n    e : List U8,\n    f : List U32,\n    g : T,\n    x : List { y : Str, z : Str } \n}\n</code></pre></div>\n\n<p>because of the names you picked this is also already sorted by field name</p>",
        "id": 271022827,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644258967
    },
    {
        "content": "<p>I see, so small-to-large alignment order goes like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>I8 == U8\nI16 == U16\nI32 == U32\nI64 == U64 == Str == List * == Record *\nI128 == U128\n</code></pre></div>",
        "id": 271030505,
        "sender_full_name": "jan kili",
        "timestamp": 1644262476
    },
    {
        "content": "<p><code>Record *</code> is not correct there. Record fields are stored on the stack (while list elements are stored on the heap)</p>",
        "id": 271030729,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262572
    },
    {
        "content": "<p>that means that what types a record's fields have influence the record's alignment</p>",
        "id": 271030752,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262587
    },
    {
        "content": "<p>so a record <code>{ x : u8 }</code> has an alignment of 1, but a record <code>{ x : U128 }</code> has an alignment of 16</p>",
        "id": 271030792,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262610
    },
    {
        "content": "<p>Side question: Are <code>Nat</code>s weird? Would <code>V : { r: U32, s: U64, t: Nat }</code> require different struct definitions for different systems?</p>",
        "id": 271030911,
        "sender_full_name": "jan kili",
        "timestamp": 1644262670
    },
    {
        "content": "<p>yes, I was thinking about that too when writing this out</p>",
        "id": 271031006,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262698
    },
    {
        "content": "<p>in particular this is kinda weird if you mix targets, e.g. a rust project with a wasm frontend and normal x86 backend</p>",
        "id": 271031061,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262728
    },
    {
        "content": "<p>then you need to order the fields depending on your target</p>",
        "id": 271031090,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262746
    },
    {
        "content": "<p>which you can do, but it's not awesome</p>",
        "id": 271031106,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262754
    },
    {
        "content": "<p>Maybe <code>Nat</code>s shouldn't pass between platform and app</p>",
        "id": 271031169,
        "sender_full_name": "jan kili",
        "timestamp": 1644262789
    },
    {
        "content": "<p>it's inevitable</p>",
        "id": 271031402,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262887
    },
    {
        "content": "<p>e.g. a <code>List *</code> also has a different alignment</p>",
        "id": 271031428,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262897
    },
    {
        "content": "<p>because it contains nats and pointers</p>",
        "id": 271031440,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644262906
    },
    {
        "content": "<p>Is this alignment-based sorting algorithm...<br>\na) an unbending constraint?<br>\nb) a performance optimization?<br>\nc) a placeholder?<br>\nJust curious whether pure-alphabetical sorting is possible/optimal.</p>",
        "id": 271032417,
        "sender_full_name": "jan kili",
        "timestamp": 1644263356
    },
    {
        "content": "<p>it's a performance optimization</p>",
        "id": 271032457,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263380
    },
    {
        "content": "<p>when we don't sort by alignment, we can get gaps between fields</p>",
        "id": 271032480,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263394
    },
    {
        "content": "<p>e.g. { x : u32, y: i128 }</p>",
        "id": 271032548,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263411
    },
    {
        "content": "<p>Maybe this sorting would benefit from a compiler flag? <code>--alphabetical-structs</code></p>",
        "id": 271032591,
        "sender_full_name": "jan kili",
        "timestamp": 1644263432
    },
    {
        "content": "<p>an <code>i128</code> has an alignment of 16, meaning that its start address needs to be a multiple of 16</p>",
        "id": 271032604,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263437
    },
    {
        "content": "<p>If a platform developer wants to pass strange values or be flexible somehow</p>",
        "id": 271032640,
        "sender_full_name": "jan kili",
        "timestamp": 1644263458
    },
    {
        "content": "<p>assuming we start at 0, we put in the <code>u32</code> field , taking up 4 bytes. But now we need to add 12 bytes of padding before we can put in the <code>i128</code>field</p>",
        "id": 271032658,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263467
    },
    {
        "content": "<p>the opposite order is not beneficial in this example, but in general sorting by alignment minimizes the amount of padding you need</p>",
        "id": 271032721,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263501
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 271032749,
        "sender_full_name": "jan kili",
        "timestamp": 1644263512
    },
    {
        "content": "<p>e.g. C says: definition order is what we use, if that means we need to insert padding to get the alignment right then that is what we do</p>",
        "id": 271032961,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263600
    },
    {
        "content": "<p>rust says: don't worry about it, we will lay it out in an optimal way</p>",
        "id": 271032981,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263611
    },
    {
        "content": "<p>except if you use <code>#[repr(C)]</code></p>",
        "id": 271033009,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263625
    },
    {
        "content": "<p>With an algorithm toggle, platform developers would be responsible for optimizing performance via field name alphabetization, which might be a nice tradeoff</p>",
        "id": 271033023,
        "sender_full_name": "jan kili",
        "timestamp": 1644263631
    },
    {
        "content": "<p>(basically to let developers use that C mode you just described)</p>",
        "id": 271033100,
        "sender_full_name": "jan kili",
        "timestamp": 1644263659
    },
    {
        "content": "<p>well the order of record fields is not well-defined</p>",
        "id": 271033102,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644263660
    },
    {
        "content": "<p>I think the best long-term solution is to have a compiler command to generate the entire definition, including ordering - but in the short term, maybe we could make a quick compiler flag that prints out the sorted versions of all type aliases in the program?</p>",
        "id": 271034966,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644264451
    },
    {
        "content": "<p>like it just takes the AST of the type alias, sorts everything, and then runs the formatter on it to get a string</p>",
        "id": 271035075,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644264486
    },
    {
        "content": "<p>and then prints the string</p>",
        "id": 271035085,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644264492
    },
    {
        "content": "<p>so at least platform authors don't have to figure all that out in their heads until we have that long-term solution</p>",
        "id": 271035119,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644264520
    },
    {
        "content": "<p>I'd love that. To be clear, I don't have an immediate need for such complex records, but it's right around the corner (especially since only one def can be passed from app to platform right now, I think)</p>",
        "id": 271035508,
        "sender_full_name": "jan kili",
        "timestamp": 1644264716
    },
    {
        "content": "<p>yeah and tag unions are even harder than records <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271036537,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644265219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> I successfully implemented a Roc-to-Rust record/struct with 3 <code>Str</code>s and 2 <code>U32</code>s in the (WIP) plotting platform, but now I'm having trouble simply adding a second <code>F32</code> to the game platform.<br>\n<a href=\"https://github.com/JanCVanB/roc-bevies/pull/3/commits/768ad5d\">https://github.com/JanCVanB/roc-bevies/pull/3/commits/768ad5d</a><br>\nDo you know why only the first <code>f32</code> is being heard? Depending on which field comes first in the struct, the debug print looks like<br>\n<code>Config { ballSpeed: 400.0, paddleSpeed: 0.0 }</code><br>\nor<br>\n<code>Config { paddleSpeed: 400.0, ballSpeed: 0.0 }</code>.<br>\n<span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 271234023,
        "sender_full_name": "jan kili",
        "timestamp": 1644385890
    },
    {
        "content": "<p>I'm probably just not seeing a typo or something, but at this point I can't see it.</p>",
        "id": 271234087,
        "sender_full_name": "jan kili",
        "timestamp": 1644385940
    },
    {
        "content": "<p>The behavior is the same if I change them both to <code>i16</code>s or <code>u16</code>s.</p>",
        "id": 271234359,
        "sender_full_name": "jan kili",
        "timestamp": 1644386222
    },
    {
        "content": "<p>Whoa, when I add another <code>F32</code> between them, it hears the 1st as the 1st and the 2nd as the 3rd!<br>\nRoc source: <code>config = { ballSpeed: 111, manualPadding: 222, paddleSpeed: 333 }</code><br>\nRust debug: <code>Config { ballSpeed: 111.0, manualPadding: 0.0, paddleSpeed: 222.0 }</code><br>\nThis must be related to alignment, but I don't know how. Maybe... Roc is writing the record with 8-byte alignment (because it's represented with an 8-byte pointer) but then Rust isn't recognizing the padding between the 4-byte <code>F32</code>s?<br>\n<a href=\"https://github.com/JanCVanB/roc-bevies/pull/3/commits/8eed55c\">https://github.com/JanCVanB/roc-bevies/pull/3/commits/8eed55c</a></p>",
        "id": 271235251,
        "sender_full_name": "jan kili",
        "timestamp": 1644387192
    },
    {
        "content": "<p>I'm seeing no problems when using </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">roc_config</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__configForHost_1_exposed_generic\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc_config_internal</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc_config_internal</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Default, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ballSpeed</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">paddleSpeed</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271266784,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644408353
    },
    {
        "content": "<p>I'm using the <code>_generic</code> version of configForHost here, which takes a pointer that it writes the value into</p>",
        "id": 271266846,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644408372
    },
    {
        "content": "<p>that is the safer way of doing this, because simply returning values (like <code>-&gt; Config</code>) seems to break in some cases across the C FFI boundary</p>",
        "id": 271266925,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644408436
    },
    {
        "content": "<p>Well that's nice that the extern and unsafe can both be absorbed into the <code>roc_config</code> function - that's how I'll do every Roc call from now on.</p>",
        "id": 271268838,
        "sender_full_name": "jan kili",
        "timestamp": 1644409586
    },
    {
        "content": "<p>This Rustling never would have found that <code>_generic</code> solution, thank you very much</p>",
        "id": 271268915,
        "sender_full_name": "jan kili",
        "timestamp": 1644409650
    },
    {
        "content": "<p>yeah I wonder if we should actually remove the non-generic version</p>",
        "id": 271268945,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644409671
    },
    {
        "content": "<p>since it causes a bunch of problems</p>",
        "id": 271269001,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644409683
    },
    {
        "content": "<p>on the other hand, it's not entirely clear why it causes problems</p>",
        "id": 271269012,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644409691
    },
    {
        "content": "<p>Okay, here's a new request... is passing a function as a record field possible?</p>\n<p>Since only one def can be passed from an app to a platform, I see only two ways of passing both static primitive data and dynamic function logic:</p>\n<ol>\n<li>pass a record containing both primitive fields and function fields</li>\n<li>pass a function that either returns primitive data or performs dynamic logic, depending on the input</li>\n</ol>\n<p>I've tried the following, but the Rust compiler is complaining about methods &amp; traits, so I'm out of my Rust depth <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"nb\">Fn</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Default)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ballSpeed</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">paddleSpeed</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">todo</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"kt\">i16</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271433435,
        "sender_full_name": "jan kili",
        "timestamp": 1644501164
    },
    {
        "content": "<p>the <code>tui</code> example exposes a record with functions and values</p>",
        "id": 271433570,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644501228
    },
    {
        "content": "<p>the trick here is that the field in the record only contains the captured environment of the function (usually that is a unit value, because the exposed function is top-level)</p>",
        "id": 271433711,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644501274
    },
    {
        "content": "<p>we then expose an additional extern function to actually call the function</p>",
        "id": 271433732,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644501289
    },
    {
        "content": "<p><code>tui</code> is in Zig - does the same system apply to Rust?</p>",
        "id": 271433956,
        "sender_full_name": "jan kili",
        "timestamp": 1644501379
    },
    {
        "content": "<p>yes both languages use the C api that we expose</p>",
        "id": 271434036,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644501415
    },
    {
        "content": "<p>Phew, complex platform APIs hurt my brain <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<code>extern fn roc__mainForHost_1_Update_caller(ConstModel, *const RocStr, [*]u8, MutModel) void;</code></p>",
        "id": 271435655,
        "sender_full_name": "jan kili",
        "timestamp": 1644502117
    },
    {
        "content": "<p>that's the downside. Hopefully you get that right once and can then build a nicer api on the rust/zig side</p>",
        "id": 271436035,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644502295
    },
    {
        "content": "<p>also platform author ergonomics might be most underdeveloped part of Roc tooling right now <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 271436312,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644502416
    },
    {
        "content": "<p>we have no way to help generate these things yet</p>",
        "id": 271436322,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644502422
    },
    {
        "content": "<p>but we can in the future!</p>",
        "id": 271436349,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644502431
    },
    {
        "content": "<p>Unrelated, I find this file hilarious:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">platform</span><span class=\"w\"> </span><span class=\"s\">\"roc-plotters/bitmap-chart\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Config</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Config</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Config</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Config</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">configForHost</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"nf\">configForHost</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Config</span><span class=\"w\"></span>\n<span class=\"nf\">configForHost</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271437793,
        "sender_full_name": "jan kili",
        "timestamp": 1644503065
    },
    {
        "content": "<p>The cherry on top is that the file name is <code>Package-Config.roc</code> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 271437822,
        "sender_full_name": "jan kili",
        "timestamp": 1644503083
    },
    {
        "content": "<p>config x 10 == 10x engineering</p>",
        "id": 271438086,
        "sender_full_name": "jan kili",
        "timestamp": 1644503191
    },
    {
        "content": "<p>this reminds me of the greatest talk of all time <a href=\"https://www.youtube.com/watch?v=yL_-1d9OSdk\">https://www.youtube.com/watch?v=yL_-1d9OSdk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"yL_-1d9OSdk\" href=\"https://www.youtube.com/watch?v=yL_-1d9OSdk\"><img src=\"https://uploads.zulipusercontent.net/a7fdd754f6461078d6915a407229cb277f964d95/68747470733a2f2f692e7974696d672e636f6d2f76692f794c5f2d3164394f53646b2f64656661756c742e6a7067\"></a></div>",
        "id": 271438170,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644503235
    },
    {
        "content": "<p>config config, config config config. Config</p>",
        "id": 271438220,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644503260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/271036537\">said</a>:</p>\n<blockquote>\n<p>yeah and tag unions are even harder than records <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Is this a solved problem? I just ran into a use case for a tag union <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 271455499,
        "sender_full_name": "jan kili",
        "timestamp": 1644510203
    },
    {
        "content": "<p>what kind of tag union?</p>",
        "id": 271455697,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644510300
    },
    {
        "content": "<p>we have support for <code>RocResult</code>, and an enum is actually easy</p>",
        "id": 271455721,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644510313
    },
    {
        "content": "<p>I suppose it's an enum: <code>format : [ Bitmap, Svg ]</code></p>",
        "id": 271456834,
        "sender_full_name": "jan kili",
        "timestamp": 1644510798
    },
    {
        "content": "<p>Is there an enum example in <code>examples/</code>?</p>",
        "id": 271456949,
        "sender_full_name": "jan kili",
        "timestamp": 1644510841
    },
    {
        "content": "<p>no but you can treat this as if you're sending a <code>u8</code> over</p>",
        "id": 271459100,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644511692
    },
    {
        "content": "<p>this might also work</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(u8)]\nenum {\n    Bitmap = 0,\n    Svg = 1,\n}\n</code></pre></div>",
        "id": 271459225,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644511743
    },
    {
        "content": "<p>not sure if that plays nicely with extern functions</p>",
        "id": 271459253,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644511756
    },
    {
        "content": "<p>How about lists like <code>List I64</code> or <code>List List { label: Str, values: List I64 }</code>?</p>\n<p>I see a <code>List I64</code> passing between Zig &amp; Roc in <code>examples/quicksort/</code>, but I'm hoping to pass complex lists from Roc to Rust (without knowing their length at compile-time, which requires <code>Vec</code>s?). Will that require any tricks that (a) aren't demonstrated in <code>examples/quicksort/</code> or (b) look different in Rust than in Zig?</p>",
        "id": 271487821,
        "sender_full_name": "jan kili",
        "timestamp": 1644523972
    },
    {
        "content": "<p>Thanks for all of this help on these API patterns :) I hope to produce some useful examples of these patterns, so that future devs can simply copy/paste the goods!</p>",
        "id": 271488110,
        "sender_full_name": "jan kili",
        "timestamp": 1644524120
    },
    {
        "content": "<p>(Side note, I just fought with Rust generics for 2 hours and won!!! I feel like I just received my second Rustling badge, haha)</p>",
        "id": 271488306,
        "sender_full_name": "jan kili",
        "timestamp": 1644524225
    },
    {
        "content": "<p>(perhaps I should have read a Rust guide/tutorial/book, but instead I'm just guessing the syntax until the compiler finally gives in! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 271488510,
        "sender_full_name": "jan kili",
        "timestamp": 1644524333
    },
    {
        "content": "<p>you can use <code>RocList</code> from <code>roc_std</code></p>",
        "id": 271490458,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644525309
    },
    {
        "content": "<p>although you have to carefully think about who owns the memory</p>",
        "id": 271490497,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644525337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"478159\">@Philippe Hosey-Vinchon</span> Do you want to help me make some fun Roc platforms? :) I'm pretty comfortable in Roc after a couple of months with it, but Rust is brand new for me! After fighting with Rust generics today, I can see that platform-ifying existing Rust libraries can have surprise traps, some of which are best defused by a more-experience Rustacean than myself <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span></p>",
        "id": 271512028,
        "sender_full_name": "jan kili",
        "timestamp": 1644537169
    },
    {
        "content": "<p><span aria-label=\"loudspeaker\" class=\"emoji emoji-1f4e2\" role=\"img\" title=\"loudspeaker\">:loudspeaker:</span> In fact, anyone is welcome to collaborate! Help me Roc-ify some useful+popular Rust libraries: <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\nPlots/charts/graphics: <a href=\"https://github.com/JanCVanB/roc-plotters\">https://github.com/JanCVanB/roc-plotters</a><br>\nGames/simulations/UIs: <a href=\"https://github.com/JanCVanB/roc-bevies\">https://github.com/JanCVanB/roc-bevies</a></p>",
        "id": 271512597,
        "sender_full_name": "jan kili",
        "timestamp": 1644537585
    },
    {
        "content": "<p>Hi, new here. I read through a bunch of platform posts here, but after looking at the examples, I don't think I understand platforms at all. Should I, some time in the future, decide to write a simple cli tool in Roc, would there be a standard platform for this purpose? Would it only support nix or windows at one time? I'm confused why there are rust examples and zig examples, and why anyone writing an app would care what language the platform is written in?</p>",
        "id": 271513247,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1644537950
    },
    {
        "content": "<p>Hi, Andrew! I'd recommend using <a href=\"https://github.com/rtfeldman/roc/tree/trunk/examples/cli\"><code>examples/cli/</code></a>, as it's the only platform thusfar that supports general-purpose CLI apps.</p>",
        "id": 271513567,
        "sender_full_name": "jan kili",
        "timestamp": 1644538189
    },
    {
        "content": "<p>In addition to the example CLI apps in that dir (<code>form.roc</code>, <code>countdown.roc</code>, <code>echo.roc</code>), I have some more (mostly-redundant) examples in <a href=\"https://github.com/JanCVanB/advent-of-code-2021/blob/main/solutions/day-1-sonar-sweep/solution_1_part_1.roc\">this abandoned repo</a>.</p>",
        "id": 271513794,
        "sender_full_name": "jan kili",
        "timestamp": 1644538324
    },
    {
        "content": "<p>Regarding Nix/Windows, what operating system are you on? I'm using macOS, and Nix is super convenient for hopping into a Roc-friendly environment.</p>",
        "id": 271513946,
        "sender_full_name": "jan kili",
        "timestamp": 1644538445
    },
    {
        "content": "<p>Sorry, I meant *nix, as any random linux. I run Windows, but built Roc in WSL Ubuntu last night, and will be playing with it there.<br>\nThe platforms that are in the examples seem(and this is fine for this purpose) custom built out with just enough functionality to support the example they work for. This is part of my confusion. Would you expect there to be a batteries included platform that would meet most needs of a particular type of app?</p>",
        "id": 271514673,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1644539020
    },
    {
        "content": "<p>I recommend this thread: <a href=\"#narrow/stream/304641-ideas/topic/A.20platform.20for.20production.20CLIs\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/A.20platform.20for.20production.20CLIs</a><br>\n(TL;DR: Not yet, but it's an inevitability that can be accelerated by demand &amp; contributions)</p>",
        "id": 271514759,
        "sender_full_name": "jan kili",
        "timestamp": 1644539078
    },
    {
        "content": "<p>Regarding Rust/Zig, Roc app developers shouldn't care what language their platform is written in.</p>\n<p>I think about Roc platforms like this:</p>\n<ul>\n<li>Roc is basically a scripting language for C-interoperable languages like Rust/Zig, and a Roc platform is basically a Rust/Zig app with some Roc-specific metadata/decoration.</li>\n<li>When the Roc CLI builds a Roc app, it does two things: it compiles the Roc app into a set of C functions that the Roc platform can call via CFFI (calling C functions from a C-interoperable language), and then it uses the Roc platform's language's compiler to compile those C functions together with the Roc platform into machine code.</li>\n<li>A Roc platform must define all data types that it sends/receives to/from Roc apps, and a Roc app must provide its Roc platform with the def (in the future hopefully multiple defs) that the platform requires.</li>\n<li>Meanwhile, a Roc platform can use any of its language's features (Rust crates, Zig libraries, etc.), and a Roc app can use any Roc features (Roc libraries, etc.).</li>\n<li>Therefore, the only reasons for a Roc platform developer to choose Rust vs. Zig (vs. something else?) is the libraries they want to leverage and their personal preferences.</li>\n<li>As (I think) the example platforms in <code>examples/</code> don't use any unique libraries, I expect that the languages chosen in there were mostly chosen arbitrarily, to demonstrate Roc's flexibility.</li>\n</ul>\n<p>I hope that makes platforms make more sense, but now that I've written it all out I realize this could just confuse the issue <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271515433,
        "sender_full_name": "jan kili",
        "timestamp": 1644539595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/271515433\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Meanwhile, a Roc platform can use any of its language's features (Rust crates, Zig libraries, etc.), and a Roc app can use any Roc features (Roc libraries, etc.).</li>\n<li>Therefore, the only reasons for a Roc platform developer to choose Rust vs. Zig (vs. something else?) is the libraries they want to leverage and their personal preferences.</li>\n</ul>\n</blockquote>\n<p>These still feels like you would be in a place where a Roc app developer could need to also write their underlying platform(or copy/paste from a previous similar app and add new lib Y). Am I misunderstanding?</p>",
        "id": 271517691,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1644541399
    },
    {
        "content": "<p>in the future platforms will be available in the package registry (which doesn't exist yet!) so you can just say what platform you want and the compiler download and install it behind the scenes, just like any other package</p>",
        "id": 271517921,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644541607
    },
    {
        "content": "<p>but since we don't have a package registry yet, for now it's all copying and pasting onto the local filesystem <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 271517947,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644541638
    },
    {
        "content": "<blockquote>\n<p>add new lib Y). Am I misunderstanding?</p>\n</blockquote>\n<p>No, you're correct. If an app wants to do something that its platform doesn't support, then it will need to fork+modify the platform or find another platform. That's by design, so that app consumers/end-users can be absolutely certain what any app might do when they run it. For example, if an app's platform doesn't have networking or file-writing functionalities, you know it's (relatively) safe to run.</p>",
        "id": 271517990,
        "sender_full_name": "jan kili",
        "timestamp": 1644541682
    },
    {
        "content": "<p>but the idea is for obtaining a platform to feel equivalent to obtaining a framework in another language: you just list it as a package dependency and it gets installed for you</p>",
        "id": 271518028,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644541702
    },
    {
        "content": "<p>of note, it's theoretically possible for a platform author to provide a C FFI (via normal function calls, just asking for the name of a dynamic library along with binary encoders and decoders for its arguments and return value) but of course any platform that does that can no longer offer any security guarantees, so it's a strictly opt-in thing <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 271518175,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644541833
    },
    {
        "content": "<p>(that's not a special language feature or anything, it's just an observation that any platform author can in fact do that if they want to and it will work)</p>",
        "id": 271518217,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644541870
    },
    {
        "content": "<p>I know this isn't strictly a platform question, but I think it's related to <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> 's comment: If I wanted to use that handy dandy Random lib, would I always expect to get just the source(and drop it right in my app folder?), or is a Roc compiled binary of some kind possible/intended?</p>",
        "id": 271518355,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1644541959
    },
    {
        "content": "<p>For now, copy/paste it or use a Git submodule. In the indeterminate future, something like npm or pypi for Roc will exist.</p>",
        "id": 271518485,
        "sender_full_name": "jan kili",
        "timestamp": 1644542064
    },
    {
        "content": "<p>However, I don't believe Roc libraries will ever be pre-compiled, as compilation only happens in conjunction with a specific platform. Roc libraries must perform a delicate dance of platform-agnosticity, so that any Roc app (on any Roc platform) can use them.</p>",
        "id": 271518649,
        "sender_full_name": "jan kili",
        "timestamp": 1644542203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> if you are interested, I would be up for helping you with some of the platform stuff and rust type fun. I should theoretically have an ok understanding of the underlying types and rust.</p>",
        "id": 271527881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1644551075
    },
    {
        "content": "<p>Are there any stability guarantees regarding <code>roc_std</code>?</p>",
        "id": 272109665,
        "sender_full_name": "Tom Dohrmann",
        "timestamp": 1645014922
    },
    {
        "content": "<p>not really, if we think a change is necessary we make it and then update all code in the compiler repo</p>",
        "id": 272109834,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645015038
    },
    {
        "content": "<p>so far <code>RocList</code> is not used that much, <code>RocStr</code> a bit more but even there it's just more convenient to quickly turn that into a <code>String</code>/<code>&amp;str</code> or whatever the host language wants</p>",
        "id": 272110209,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645015284
    },
    {
        "content": "<p>there will be eventually, but a major part of the reason the repo is private now is to set expectations around the fact that Roc isn't ready for production use yet, so we may make breaking changes on short notice! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 272111263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645015903
    },
    {
        "content": "<p>When passing a List from a platform to a Roc application, does the List always have to be reference counted? <code>compiler/str/README.md</code> mentions that the platform can't assume anything about Lists provided by Roc application, but AFAICT doesn't say anything about Lists passed the other way around.<br>\nI'm asking because valgrind is reporting that I'm leaking memory which I tracked down to being caused by returning a unique List with a capacity to a Roc application.</p>",
        "id": 272156399,
        "sender_full_name": "Tom Dohrmann",
        "timestamp": 1645035381
    },
    {
        "content": "<p>All list are reference counted in general. If Roc returns a list and it has only 1 reference count left (which is the normal case), it is the host's job to free the memory.</p>",
        "id": 272156780,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645035551
    },
    {
        "content": "<p>If it had a higher than 1 reference count, it would be expected that the host lowers the reference count by one when dropping the list.</p>",
        "id": 272156868,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645035598
    },
    {
        "content": "<p>that misses capacity. But the capacity as it's currently used in <code>roc_std</code> is an older idea that we'll likely not use any more</p>",
        "id": 272156943,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645035614
    },
    {
        "content": "<p>currently, RC grows from <code>isize::MIN</code> upwards. At 0, the RC reaches \"infinity\" and an object with that refcount will live forever</p>",
        "id": 272157037,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645035658
    },
    {
        "content": "<p>a positive value in that location used to indicate a capacity. But we now want to store the capacity on the stack</p>",
        "id": 272157126,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645035696
    },
    {
        "content": "<p>so in effect that means that a positive value in the refcount position is invalid</p>",
        "id": 272157151,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645035714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/272156943\">said</a>:</p>\n<blockquote>\n<p>that misses capacity. But the capacity as it's currently used in <code>roc_std</code> is an older idea that we'll likely not use any more</p>\n</blockquote>\n<p>Oh ok, good to know.</p>",
        "id": 272158114,
        "sender_full_name": "Tom Dohrmann",
        "timestamp": 1645036154
    },
    {
        "content": "<p>but we plan to transition that to basically exactly what <code>Vec</code> does in rust</p>",
        "id": 272167386,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645040271
    },
    {
        "content": "<p>with capacity stored in the struct, not behind the pointer</p>",
        "id": 272167407,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645040279
    },
    {
        "content": "<p>Hi all, I'm trying to build Roc (update_zig_09 branch) on Guix but I'm facing unresolved LLVM symbols when linking roc_cli. LLVM_SYS_130_PREFIX is set, and llvm-config is in PATH. I have zero knowledge of Rust, any hint?</p>",
        "id": 272381031,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645178057
    },
    {
        "content": "<p>that branch doesn't quite work for most things related to lists/strings.</p>",
        "id": 272381205,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645178192
    },
    {
        "content": "<p>if you still want to try it: what errors are you getting exactly?</p>",
        "id": 272381217,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645178201
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/uH8BI03M0DCyOd4-UtsKApea/err.txt\">err.txt</a></p>",
        "id": 272381574,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645178415
    },
    {
        "content": "<p>Looks like every LLVM symbol is undefined.</p>",
        "id": 272381640,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645178448
    },
    {
        "content": "<p>I went with the 09 branch because that's the zig version that happens to be packaged on Guix, but I guess I can downgrade.</p>",
        "id": 272381718,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645178505
    },
    {
        "content": "<p>you can set the zig version with <code>ROC_ZIG=path/to/zig</code></p>",
        "id": 272382586,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645178958
    },
    {
        "content": "<p>if you don't want to touch the system version</p>",
        "id": 272382594,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645178964
    },
    {
        "content": "<p>So, should I give up the 09 branch and try with master? Will that get rid of the llvm unresolveds?</p>",
        "id": 272383100,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645179266
    },
    {
        "content": "<p>I think trying <code>trunk</code> is the best approach for now. Even if you get this branch to compile, it won't really give you much</p>",
        "id": 272383389,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645179454
    },
    {
        "content": "<p>because most examples will just fail to compile</p>",
        "id": 272383405,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645179461
    },
    {
        "content": "<p>note that trunk uses llvm12</p>",
        "id": 272383418,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645179468
    },
    {
        "content": "<p>Ok, I'll try that over the weekend, thanks.</p>",
        "id": 272383526,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645179513
    },
    {
        "content": "<p>btw it does look like llvm cannot be found by the linker. it looks like gcc is used?!</p>",
        "id": 272383588,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645179568
    },
    {
        "content": "<p>so, using trunk may not solve that problem</p>",
        "id": 272383605,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645179582
    },
    {
        "content": "<p>Ups, good catch. Looks like I depend on clang instead of clang-toolchain in the package definition, that might well be the problem.</p>",
        "id": 272386769,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645181485
    },
    {
        "content": "<p>I compiled Roc in Ubuntu on Windows(WSL). Compiles seem to take a really long time. Is this expected? <a href=\"/user_uploads/22008/c_JDajmP9Bb-eWvJ1nAZu7-Z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/c_JDajmP9Bb-eWvJ1nAZu7-Z/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/c_JDajmP9Bb-eWvJ1nAZu7-Z/image.png\"></a></div>",
        "id": 272423448,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1645201959
    },
    {
        "content": "<p>WSL is very slow if the code is stored on the windows side, but compiled from the linux side</p>",
        "id": 272423791,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645202144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> knows more about how to fix this</p>",
        "id": 272423850,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645202163
    },
    {
        "content": "<p>I saw something related to that, and copied all the code into the linux side, but it didn't make any appreciable difference. I'll try compiling it in native windows this weekend. (I only compiled it from linux because I thought it'd be a smoother process. Hint: it was bumpy)</p>",
        "id": 272424353,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1645202402
    },
    {
        "content": "<p>we don't currently support windows outputs, so that means that if you compile a program with the compiler, you need to then run it in WSL</p>",
        "id": 272424499,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645202479
    },
    {
        "content": "<p>also, nobody has actually tried compiling on windows I think. I guess it should work?</p>",
        "id": 272424568,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645202509
    },
    {
        "content": "<p>I remember trying and running into a lot of issues, but that was quite a while ago on a mini pc without a lot of storage. I don't remember why (maybe for llvm-as, maybe for something else), but I needed to compile llvm from source and it ate loads and loads of disk space.</p>",
        "id": 272426940,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645203528
    },
    {
        "content": "<p>I have a quick question, when specifying the path to a platform, does the path have to be absolute?<br>\nI'm asking because relative paths don't seem to work, but not sure.</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;Hello&quot;\n    packages { pf: &quot;../bin/examples/cli/platform&quot; }\n    imports [ pf.Stdout ]\n    provides [ main ] to pf\n</code></pre></div>",
        "id": 272436711,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645207867
    },
    {
        "content": "<p>nevermind, I was being silly lol</p>",
        "id": 272437007,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645208011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/272423850\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> knows more about how to fix this</p>\n</blockquote>\n<p>Just to add a bit more detail, the exact issue I had was that my clone of the repo, and therefore the Cargo <code>target</code> folder, was on the Windows side in the NTFS filesystem. But I was running <code>cargo test</code> and <code>cargo build</code> in the Linux terminal, so Cargo was also using the <code>~/.cargo</code> folder from the Linux ext4 filesystem. So it must have been talking to both filesystems, maybe copying stuff between them, probably going through some sort of translation layer...</p>\n<p>The fix that worked for me was to move everything to the Linux filesystem. There were no other steps to it, just that.</p>\n<p>But the commands that Andrew ran in his screenshot don't look like they would have the same issue since all the files are on the Linux side, and he's running Roc rather than Cargo.</p>",
        "id": 272437876,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645208429
    },
    {
        "content": "<p>But I'm not sure what else to suggest since the only WSL-specific issue we know about is this one</p>",
        "id": 272438449,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645208728
    },
    {
        "content": "<p>I'll try running the same command on my machine and see what happens.</p>",
        "id": 272438555,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645208768
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>brian@acer:~/code/roc$ time target/debug/roc build examples/cli/form.roc\n🔨 Rebuilding host... Done!\n🎉 Built examples/cli/form in 2268 ms\n\nreal    0m2.314s\nuser    0m1.997s\nsys     0m0.380s\nbrian@acer:~/code/roc$ time target/debug/roc build examples/cli/form.roc\n🔨 Rebuilding host... Done!\n🎉 Built examples/cli/form in 317 ms\n\nreal    0m0.327s\nuser    0m0.400s\nsys     0m0.064s\nbrian@acer:~/code/roc$ time target/debug/roc build --precompiled-host examples/cli/form.roc\n🎉 Built examples/cli/form in 201 ms\n\nreal    0m0.210s\nuser    0m0.299s\nsys     0m0.031s\n</code></pre></div>",
        "id": 272439299,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645209099
    },
    {
        "content": "<p>From the Windows \"System &gt; About\" menu:</p>\n<div class=\"codehilite\"><pre><span></span><code>Device name acer\nProcessor   11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz   2.80 GHz\nInstalled RAM   8.00 GB (7.80 GB usable)\nDevice ID   8E0330F2-1463-4F8C-8E66-5A35508DA65E\nProduct ID  00325-96756-33883-AAOEM\nSystem type 64-bit operating system, x64-based processor\nPen and touch   Touch support with 10 touch points\n</code></pre></div>",
        "id": 272439480,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645209178
    },
    {
        "content": "<p>Why does hello.roc link against all these libraries on MacOS ?<br>\n<code>AudioUnit.framework, Cocoa.framework, CoreAudio.framework, CoreVideo.framework, IOKit.framework, Metal.framework, QuartzCore.framework, Security.framework</code></p>",
        "id": 272448932,
        "sender_full_name": "Aaron",
        "timestamp": 1645214044
    },
    {
        "content": "<p>I think those libraries are needed for some programs, so for now they are included in all programs</p>",
        "id": 272449052,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645214111
    },
    {
        "content": "<p>Is that something the platform does?</p>",
        "id": 272449096,
        "sender_full_name": "Aaron",
        "timestamp": 1645214135
    },
    {
        "content": "<p>Yeah, today Roc platforms can't specify which OS libraries they need, but there's a plan for that. Until then, link ALL the things!</p>",
        "id": 272450550,
        "sender_full_name": "jan kili",
        "timestamp": 1645214572
    },
    {
        "content": "<p>i haven't finished the tutorial yet but is there an argc/argv interface in the common platforms ?</p>",
        "id": 272450619,
        "sender_full_name": "Aaron",
        "timestamp": 1645214616
    },
    {
        "content": "<p>all of that linking will go away when we have surgical linking working on macOS - currently that only works on Linux, but the x86 macOS implementation is partially complete</p>",
        "id": 272457289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645218317
    },
    {
        "content": "<p>the current linking solution on <code>trunk</code> has a bunch of problems, but it was a lot faster to get up and running than the long-term implementation we're working towards <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 272457347,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645218352
    },
    {
        "content": "<p>so wheneever any platform needs to link something new, we just add it in there</p>",
        "id": 272457407,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645218364
    },
    {
        "content": "<p>eventually that whole <code>.rs</code> file will be unnecessary and get deleted</p>",
        "id": 272457420,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645218375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479763\">Aaron</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/272450619\">said</a>:</p>\n<blockquote>\n<p>i haven't finished the tutorial yet but is there an argc/argv interface in the common platforms ?</p>\n</blockquote>\n<p>I don't think any platform in the examples currently exposes this, though it shouldn't be too hard to do. This could be a candidate for a <a href=\"https://github.com/rtfeldman/roc/issues/2498\">standard platform</a>.</p>\n<p>(Digression: I wonder if argc/argv should be more standardized in the language, or always handled in the host, because right now if the host exposes them they must be wrapped in an Effect - but (I think) they need not be effect-ful, since they're supplied by the kernel)</p>",
        "id": 272459311,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1645219435
    },
    {
        "content": "<p>Could this be a similar interface to the way Elm accepts flags on init?</p>",
        "id": 272461408,
        "sender_full_name": "Aaron",
        "timestamp": 1645220589
    },
    {
        "content": "<p>Yeah so the classic <code>argc</code> and <code>argv</code> interface is just the way that you represent an array of strings in C. In Roc, the same information would be represented as <code>List Str</code>. So I think platforms would expose command line arguments to Roc as <code>List Str</code>. Once it's in Roc you'll generally want to parse the CLI arguments for your program into a nice Tag Union. That parsing library can be pure Roc code. There are similar libraries in Elm for URLs, for example.</p>",
        "id": 272465706,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645222669
    },
    {
        "content": "<p>and we do allow passing in flags in e.g. the <code>tui</code> platform</p>",
        "id": 272465910,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645222792
    },
    {
        "content": "<p>at least in theory</p>",
        "id": 272465915,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645222798
    },
    {
        "content": "<p>Does <a href=\"https://github.com/rtfeldman/roc/blob/trunk/examples/tui/platform/host.zig\">tui</a> have an example of that today or no?</p>",
        "id": 272468704,
        "sender_full_name": "jan kili",
        "timestamp": 1645224371
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>mainForHost : { init : ({} -&gt; Model) as Init, update : (Model, Str -&gt; Model) as Update, view : (Model -&gt; Str) as View }\nmainForHost = main\n</code></pre></div>",
        "id": 272468817,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645224456
    },
    {
        "content": "<p>so currently it takes <code>{}</code> as the flags value</p>",
        "id": 272468835,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645224467
    },
    {
        "content": "<p>but that can be turned into something else</p>",
        "id": 272468873,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645224482
    },
    {
        "content": "<p>Nice!</p>",
        "id": 272468960,
        "sender_full_name": "jan kili",
        "timestamp": 1645224534
    },
    {
        "content": "<p>I'm not sure if this is called tree shaking or lazy loading or what...<br>\nIs there any way for a platform to include/exclude imported libraries in/from the eventual machine code if the app does/doesn't use them? Example: A Rust-based platform imports two different stdout formatting crates, A and B. An app might do either <code>Task.await (Stdout.lineA \"hello\")</code> or <code>Task.await (Stdout.lineB \"hello\")</code>, and therefore the executable might only need crate A or crate B but not both. Is that a possible optimization, or does CFFI not grant us that level of compile-time insight?</p>",
        "id": 272482416,
        "sender_full_name": "jan kili",
        "timestamp": 1645234747
    },
    {
        "content": "<p>(For a more realistic example, I'm thinking that a video game platform might have a lot of heavy dependencies, but an individual video game might not need everything - physics simulation, programmatic map generation, etc.)</p>",
        "id": 272482563,
        "sender_full_name": "jan kili",
        "timestamp": 1645234863
    },
    {
        "content": "<p>do you mean things the host imports?</p>",
        "id": 272482568,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645234870
    },
    {
        "content": "<p>or like Roc code</p>",
        "id": 272482573,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645234875
    },
    {
        "content": "<p>maybe to put it another way: are we talking about machine code that was originally Rust code getting eliminated, or machine code that was originally Roc code getting eliminated?</p>",
        "id": 272482647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645234926
    },
    {
        "content": "<p>Rust</p>",
        "id": 272482650,
        "sender_full_name": "jan kili",
        "timestamp": 1645234933
    },
    {
        "content": "<p>My question might be: \"Can we tree-shake Rust code that isn't used by Roc?\"</p>",
        "id": 272482664,
        "sender_full_name": "jan kili",
        "timestamp": 1645234946
    },
    {
        "content": "<p>so I believe that's possible in the general case, although it's out of scope for Roc itself</p>",
        "id": 272482675,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645234960
    },
    {
        "content": "<p>I remember reading about this</p>",
        "id": 272482682,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645234973
    },
    {
        "content": "<p>it's something like there's a way to tell compilers (and I think Rust does this by default?) to emit each function into its own separate section of the binary</p>",
        "id": 272482713,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235013
    },
    {
        "content": "<p>The answer is definitely possible. Requires function sections and the linker doing GC</p>",
        "id": 272482722,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645235025
    },
    {
        "content": "<p>which then lets you run a tool afterwards that says \"if nothing ever calls into this section, eliminate the section\"</p>",
        "id": 272482726,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235030
    },
    {
        "content": "<p>yeah exactly <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 272482732,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235036
    },
    {
        "content": "<p>so it depends on whether the host compiler supports emitting code that way</p>",
        "id": 272482781,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I don't think surgical linking should affect that, right?</p>",
        "id": 272482786,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235062
    },
    {
        "content": "<p>but yeah, regardless - it'd be something you would do without getting Roc involved at all</p>",
        "id": 272482800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235085
    },
    {
        "content": "<p>there's just a tool you can run on the final binary that does it, assuming the binary was originally set up in a way that permits the tool do that</p>",
        "id": 272482833,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235117
    },
    {
        "content": "<p>The surgical linker wouldn't be able to clean up unused sections. They would already be baked into the binary.</p>",
        "id": 272482834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645235119
    },
    {
        "content": "<p>right, but it wouldn't affect those sections being there</p>",
        "id": 272482839,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235128
    },
    {
        "content": "<p>It also would probably cost way to much performance</p>",
        "id": 272482847,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645235137
    },
    {
        "content": "<p>like you could still run the \"DCE unused sections\" tool separately later</p>",
        "id": 272482849,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235143
    },
    {
        "content": "<p>and it would still work, because the surgical linker didn't (for example) combine those sections or anything</p>",
        "id": 272482870,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235156
    },
    {
        "content": "<p>like it wouldn't touch them, so if they were set up that way by the host, they'd still be set up that way after surgical linking, and thus still eligible for DCE by a third-party tool</p>",
        "id": 272482934,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235181
    },
    {
        "content": "<p>Yeah, the section would just sit there and never get called into</p>",
        "id": 272482966,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645235224
    },
    {
        "content": "<p>I see, and this is machine code? assembly? C?</p>",
        "id": 272483071,
        "sender_full_name": "jan kili",
        "timestamp": 1645235313
    },
    {
        "content": "<p>And the app developer would run a Dead Code Elimination tool on the output of the Roc CLI's compile/build?</p>",
        "id": 272483126,
        "sender_full_name": "jan kili",
        "timestamp": 1645235367
    },
    {
        "content": "<p>This will be more common if kitchen-sink-style (all-in-one) platforms are popular. Idk that they will be</p>",
        "id": 272483209,
        "sender_full_name": "jan kili",
        "timestamp": 1645235428
    },
    {
        "content": "<p>This will also be more common if app developers don't want to fork their platform, for whatever reasons</p>",
        "id": 272483238,
        "sender_full_name": "jan kili",
        "timestamp": 1645235465
    },
    {
        "content": "<p>I'm new to systems languages, so maybe this DCE thing is commonplace?</p>",
        "id": 272483271,
        "sender_full_name": "jan kili",
        "timestamp": 1645235505
    },
    {
        "content": "<p>Motivation for this question: I saw a cool looking Bevy (Rust video game engine) plugin in my GitHub feed and thought \"add it to the pile! no downside! wait...\"</p>",
        "id": 272483368,
        "sender_full_name": "jan kili",
        "timestamp": 1645235580
    },
    {
        "content": "<p>I wonder if you could have an empty shell host, where you'd opt into components somehow, and then codegen or let the host compile in just the chosen components.</p>",
        "id": 272483448,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1645235646
    },
    {
        "content": "<blockquote>\n<p>I see, and this is machine code? assembly? C?</p>\n</blockquote>\n<p>machine code!</p>",
        "id": 272483520,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235727
    },
    {
        "content": "<blockquote>\n<p>And the app developer would run a Dead Code Elimination tool on the output of the Roc CLI's compile/build?</p>\n</blockquote>\n<p>right, exactly - assuming they cared to <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 272483536,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235748
    },
    {
        "content": "<blockquote>\n<p>I wonder if you could have an empty shell host, where you'd opt into components somehow, and then codegen or let the host compile in just the chosen components.</p>\n</blockquote>\n<p>that's already if you do load them on startup (or later) with dynamic linking</p>",
        "id": 272483632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235819
    },
    {
        "content": "<p>I hadn't thought about it, but it's conceivable we could let platforms ship with multiple binaries so they could load some of them on the fly if they wanted to</p>",
        "id": 272483647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235844
    },
    {
        "content": "<p>I hope platform authors wouldn't use dynamic linking that searches the system path (unless absolutely necessary, e.g. it's needed on macOS for system libraries, and in practice <code>glibc</code> needs it on Linux too)</p>",
        "id": 272483729,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235893
    },
    {
        "content": "<p>because inevitably that would mean that some people would go to run the platform and get an error on startup <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 272483743,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645235922
    },
    {
        "content": "<p>I wasn't thinking dynamic linking, more I'll include these definitions in the compiled platform if you ask for them. (And if you don't, your compile goes boom before you've ever delivered an app to anyone)</p>",
        "id": 272483755,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1645235942
    },
    {
        "content": "<p>ah gotcha</p>",
        "id": 272483986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645236101
    },
    {
        "content": "<p>But now I'm thinking about configuring kernels with <code>make menuconfig</code>, and I'm getting feint.</p>",
        "id": 272483989,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1645236107
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 272483991,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645236112
    },
    {
        "content": "<p>since the DCE thing already works without adding anything to the language, I'd say we should start with that and see if there's a compelling use case for more than that in practice!</p>",
        "id": 272484050,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645236133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477743\">@Andrew Thompson</span> Am I following? <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span> <span class=\"s\">\"fear_the_night\"</span>\n    <span class=\"nx\">packages</span> <span class=\"p\">{</span> <span class=\"nv\">pf: </span><span class=\"s\">\"the-changeling\"</span> <span class=\"p\">}</span>\n    <span class=\"nx\">imports</span> <span class=\"p\">[]</span>\n    <span class=\"nx\">provides</span> <span class=\"p\">[</span> <span class=\"mi\">666</span> <span class=\"p\">]</span> <span class=\"nx\">to</span> <span class=\"nx\">pf</span>\n\n<span class=\"mi\">666</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nv\">realPlatform: </span><span class=\"s\">\"./roc/examples/cli/platform\"</span> <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 272484101,
        "sender_full_name": "jan kili",
        "timestamp": 1645236197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> sorry, I'm too new to follow. I looked at compiling roc code, but haven't made my way through the tutorials.</p>",
        "id": 272484203,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1645236291
    },
    {
        "content": "<p>No worries, I'm probably misunderstanding your \"empty shell host\" - it conjures horror movie vibes <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 272484231,
        "sender_full_name": "jan kili",
        "timestamp": 1645236333
    },
    {
        "content": "<p>There might be another way to support dead code elimination at the platform level, platform language permitting. </p>\n<p>Por example, let's say every publicaclly exposed function in Rust gets its own feature flag (this can be done automatically). Roc knows what functions are being exposed by rust, and can therefore emit the feature flags for the exact functions it needs. Rustc would take care of DCE natively.</p>\n<p>I believe something similar should be possible with zig, but don't know.</p>",
        "id": 272492015,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645244722
    },
    {
        "content": "<p>That definitely would work. That being said, I think generally speaking DCE doesn't matter too much, but if we want it in the future, there are many ways to add it. Personally I think feature flags are a less optimal solution. They require rebuilding the host and would have to be uniquely done for each host language.</p>",
        "id": 272495659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645249494
    },
    {
        "content": "<p>Yes, the language by language basis would be the worst part.<br>\nYou are also correct that DCE isn't super beneficial in most situations. Though I could imagine it being so for embedded systems. But as mentioned, there are alternative approaches for now.</p>",
        "id": 272517569,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645276177
    },
    {
        "content": "<p>Is the expectation that platforms would be delivered normally as binaries?</p>",
        "id": 272526275,
        "sender_full_name": "Andrew Thompson",
        "timestamp": 1645286515
    },
    {
        "content": "<p>yeah the plan is that every platform ships with precompiled binaries</p>",
        "id": 272526765,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287029
    },
    {
        "content": "<p>for each target they support (e.g. Mac, Linux, Windows, etc.)</p>",
        "id": 272526772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287049
    },
    {
        "content": "<p>I'm strongly opposed to the typical way that package managers handle native code, which is to say \"build it on your local machine, and then some percentage of the time have installation fail with something cryptic like <code>ld: could not resolve symbol __cxx_mumbo_jumbo in libwhatever.so</code>\"</p>",
        "id": 272526876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287161
    },
    {
        "content": "<p>the design goal I have in mind is that from any clean operating system install, you can download the <code>roc</code> binary and use it to start writing Roc code, including automatically downloading and installing any platforms you specify, without needing any other tools installed on the system, and with platform compilation always succeeding</p>",
        "id": 272526971,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287277
    },
    {
        "content": "<p>ideally I'd also like the package repo to verify this - e.g. if the platform says it supports x64 Linux, then it looks for a precompiled binary and verifies that it's valid ELF, etc.</p>",
        "id": 272527020,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287350
    },
    {
        "content": "<p>so as an application author, the only programming language you should need to know to use Roc is Roc, and the only tool you should need to program Roc applications is <code>roc</code></p>",
        "id": 272527094,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287407
    },
    {
        "content": "<p>Roc should never tell you \"ok it's time to go learn about shared libraries now\"</p>",
        "id": 272527124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287451
    },
    {
        "content": "<p>unless the particular platform you're using is for building shared libraries or something <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 272527135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287465
    },
    {
        "content": "<p>separately, I also like the idea of (but haven't thought it through completely yet) having a requirement that published platforms declare all their dynamically linked dependencies, and provide links for how to obtain them</p>",
        "id": 272527216,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287529
    },
    {
        "content": "<p>So as a platform author the number of binaries you need to build is (number of OS's) x (number of CPUs), right? I guess that's the same as anywhere else you download pre-built binaries.</p>",
        "id": 272527248,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645287598
    },
    {
        "content": "<p>so if it's absolutely unavoidable to depend on a dynamic library (e.g. for licensing reasons), we can actually detect when it's missing right when you install the platform, and say \"hey your system can't install this platform because it needs this other thing to be installed first; here are the instructions the platform author wrote for what to do if you find yourself in this situation: _______\"</p>",
        "id": 272527250,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479655\">Jose Quesada</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/272517569\">said</a>:</p>\n<blockquote>\n<p>Yes, the language by language basis would be the worst part.<br>\nYou are also correct that DCE isn't super beneficial in most situations. Though I could imagine it being so for embedded systems. But as mentioned, there are alternative approaches for now.</p>\n</blockquote>\n<p>100% true. I have been messing around with embedded Roc and it currently wastes a lot memory. The current problem is that Roc compiles for speed rather than size, and it's unused functions are not garbage collected. So it is actually roc side problems, not host side.</p>",
        "id": 272537122,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645298699
    },
    {
        "content": "<p>I think I need to downgrade it's symbols to no longer be global so that they will properly get garbage collected.</p>",
        "id": 272537229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645298813
    },
    {
        "content": "<blockquote>\n<p>its unused functions are not garbage collected</p>\n</blockquote>\n<p>do you mean builtins?</p>",
        "id": 272537749,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645299378
    },
    {
        "content": "<p>I think unused functions written in Roc by the author of the program shouldn't get emitted in the first place <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 272537774,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645299397
    },
    {
        "content": "<p>No, I mean for example, <code>roc__mainForHost_1_exposed_generic</code> when only <code>roc__mainForHost_1_exposed</code> is used.</p>",
        "id": 272538016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645299626
    },
    {
        "content": "<p>Oh, and <code>__muloti4</code> which we still always emit</p>",
        "id": 272538033,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645299660
    },
    {
        "content": "<p>Hmm, actually I am wrong about the size cost here. The real problem looks to be the loss of inlining. The binary bloats by way more than the size of the roc app. So when the app was completely rust, it inlined and greatly simplified most of the code. Since part is in roc, the inline potential is much more limited.<br>\nIn this case, the Roc app is 1582 bytes, but using roc leads to the binary bloating by 4120 bytes.</p>",
        "id": 272539673,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645301409
    },
    {
        "content": "<p>I like the idea of 4120 bytes being considered bloat...</p>\n<p>I've seen codebases that generate multi-GB server applications and yet they amount to little more than request -&gt; call 0|n other things -&gt; response.</p>",
        "id": 272575787,
        "sender_full_name": "J.R. 'hiljusti' Hill",
        "timestamp": 1645344774
    },
    {
        "content": "<p>Noob question: would this (having the platforms already compiled) simplify cross compiling or would the same problems still exist?</p>",
        "id": 272723595,
        "sender_full_name": "Christian Dereck",
        "timestamp": 1645469411
    },
    {
        "content": "<p>If the platform is precompiled for all the architectures you want to target, roc essentially just hooks into that and is extremely portable. So cross compilation should be very easy. But yeah, depends on the platform supporting your target and llvm at least supporting the CPU architecture you're targeting.</p>",
        "id": 272724961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645470253
    },
    {
        "content": "<p>I have an issue that perhaps someone else has run into?</p>\n<p>I am implementing a custom platform, only modifying the <code>roc_main</code> function from a hello example. Everything in the platform side seems to not have an issue, however, I seem to be getting an error that doesn't make sense to me. Provided the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;hello-rust&quot;\n    packages { pf: &quot;platform&quot; }\n    imports []\n    provides [ main ] to pf\n\ngreeting =\n    hi = &quot;Hello&quot;\n    name = &quot;World&quot;\n\n    &quot;\\(hi), \\(name)!\\n&quot;\n\nmain = greeting\n</code></pre></div>\n<p>I am getting the following error when running:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Finished dev [unoptimized + debuginfo] target(s) in 0.24s\n     Running `target/debug/roc ./examples/speak-aloud/Speak.roc DDDDD`\n🔨 Rebuilding host... Done!\nSIOD ERROR: unbound variable : Hello\nSIOD ERROR: comma-not-inside-backquote\n</code></pre></div>\n<p>The <code>Hello</code> it seems to be referring to is <code>hello = \"Hello\"</code> because if I change what's inside the quotes, the error changes with it</p>",
        "id": 272897146,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645583489
    },
    {
        "content": "<p>Any guesses as to a possible cause?</p>",
        "id": 272897164,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645583509
    },
    {
        "content": "<p>I can run other examples and code without issue, so I seem to be running into something else, but no idea how to trubleshoot in this case</p>",
        "id": 272897278,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645583607
    },
    {
        "content": "<p>Your platform sees <code>Hello</code> as a variable, perhaps it is expecting double quotes inside the string to interpret it as a string?<br>\nSo something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span> <span class=\"s\">\"hello-rust\"</span>\n    <span class=\"nx\">packages</span> <span class=\"p\">{</span> <span class=\"nv\">pf: </span><span class=\"s\">\"platform\"</span> <span class=\"p\">}</span>\n    <span class=\"nx\">imports</span> <span class=\"p\">[]</span>\n    <span class=\"nx\">provides</span> <span class=\"p\">[</span> <span class=\"nx\">main</span> <span class=\"p\">]</span> <span class=\"nx\">to</span> <span class=\"nx\">pf</span>\n\n<span class=\"nv\">main = </span><span class=\"s\">\"\\\"Hello\\\"\"</span>\n</code></pre></div>",
        "id": 272916700,
        "sender_full_name": "Anton",
        "timestamp": 1645604558
    },
    {
        "content": "<p>Thank you Anton. I'll check it out. It shouldn't be the case, as all I am doing is slightly modifying the original hello rust example. Though it very much could be as most of the functions aren't documented yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272958778,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645628043
    },
    {
        "content": "<p>I'm not following completely, for which functions would you like to see more documentation?<br>\nFeel free to push a new branch to the repo with the speak-aloud example if you'd like anyone to help make it work.</p>",
        "id": 272961459,
        "sender_full_name": "Anton",
        "timestamp": 1645629083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>, you were 100% right. I didn't really understand what you meant. I got it to work. I was spawning a child thread, but was expecting the program to panic on invalid input, but that didn't happen. I assumed the output I was getting was actually comming from Roc, but it was the child process. Thanks again.</p>",
        "id": 272972465,
        "sender_full_name": "Jose Quesada",
        "timestamp": 1645633565
    },
    {
        "content": "<p>Happy to help :)</p>",
        "id": 272976352,
        "sender_full_name": "Anton",
        "timestamp": 1645635203
    },
    {
        "content": "<p>Why does <a href=\"http://link.rs\">link.rs</a> mess environment variables? If I'm reading correctly, looks like it's clearing everything except HOME/PATH. That's a problem on Guix,  it relies on environment variables to find includes and libs. Also, why isn't it using CC when building C host files?</p>",
        "id": 273018821,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645654372
    },
    {
        "content": "<p><code>link.rs</code> was cobbled together and has grown naturally. It really is not how we want to do linking in the long term. It works for most people, so it generally doesn't get messed with too much. I don't remember why, but I know that not clearing environment variables led to breakages on some machines<br>\n I know at one point there were some modifications to get it working on nixos (not sure if they got merged). Those might help with getting it working on guix.<br>\nOverall, please feel free to modify it and open pull requests. It could use some cleanup.</p>",
        "id": 273020273,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645654987
    },
    {
        "content": "<p>In the future, platforms will be downloaded precompiled and/or specify their own build commands and linking will always go through the roc linker.</p>",
        "id": 273020439,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645655077
    },
    {
        "content": "<p>LTO+musl:</p>\n<p><code>jacereda@mbp ~/src/roc [env]$ size examples/hello-world/hello-world\n   text    data     bss     dec     hex filename\n  14971     568    1664   17203    4333 examples/hello-world/hello-world\n</code></p>",
        "id": 273156390,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645740664
    },
    {
        "content": "<p>Why glibc? IMHO it would be a good thing to decouple Roc from the C compiler/runtime, just use whatever CC/CFLAGS/LDFLAGS are defined... That would simplify quite a bit <a href=\"http://link.rs\">link.rs</a>.</p>",
        "id": 273156647,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645740836
    },
    {
        "content": "<p>the surgical linker is already that way, it just only works on Linux right now</p>",
        "id": 273156870,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645740958
    },
    {
        "content": "<p>how do I invoke that?</p>",
        "id": 273156931,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645740976
    },
    {
        "content": "<p>pass <code>--roc-linker</code> to the Roc compiler</p>",
        "id": 273157069,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741077
    },
    {
        "content": "<p>honestly I think it might simplify conversations around <code>link.rs</code> if we renamed it to <code>temporary_pile_of_hacks.rs</code> so it's more self-descriptive about how we should be thinking about investing in making it more robust <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 273157179,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741142
    },
    {
        "content": "<p>what size does that yield on your box?</p>",
        "id": 273157258,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741161
    },
    {
        "content": "<p>and/or put a comment at the top explaining how it's going away? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 273157277,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741165
    },
    {
        "content": "<p>I'm on macOS at the moment, so I'm not sure offhand</p>",
        "id": 273157374,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479704\">Jorge Acereda</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/273157258\">said</a>:</p>\n<blockquote>\n<p>what size does that yield on your box?</p>\n</blockquote>\n<p>What specifically are you looking at the size for? Also, the roc linker + some changes to how platforms specify build commands would enable the platform to choose if it wants to use musl or not.</p>",
        "id": 273157620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645741239
    },
    {
        "content": "<p>to elaborate a bit, the surgical linker basically says \"give me a working executable that attempts to dynamically link the Roc application entrypoint\" (typically the <code>main</code> provided by the application author) and after the Roc application gets compiled into machine code, I will incorporate it into that executable and replace that dynamic linking with static linking after the fact</p>",
        "id": 273157840,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741378
    },
    {
        "content": "<p>Well, I do care about code bloat. I'm considering if this would be an appropriate language for embedded.</p>",
        "id": 273157905,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741420
    },
    {
        "content": "<p>so what you start out with is an executable that has some dynamic linking for the Roc application entrypoint, and what you end up with is that same executable except it's no longer doing dynamic linking for the Roc application entrypoint; instead, the entire compiled application has been added to the binary</p>",
        "id": 273157975,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741449
    },
    {
        "content": "<p>the Roc stdlib doesn't depend on libc at all</p>",
        "id": 273157986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741458
    },
    {
        "content": "<p>it just says the host needs to provide a few functions (<code>roc_alloc</code>, <code>roc_dealloc</code>, <code>roc_realloc</code>, <code>roc_memcpy</code>, and <code>roc_panic</code>)</p>",
        "id": 273158025,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741484
    },
    {
        "content": "<p>it's completely up to the host how they want to implement those, they just need to be provided</p>",
        "id": 273158069,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741506
    },
    {
        "content": "<p>it's also completely up to the host how the executable gets compiled in the first place</p>",
        "id": 273158107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741528
    },
    {
        "content": "<p>so there's no need for glibc or any libc at all</p>",
        "id": 273158111,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741535
    },
    {
        "content": "<p>at least from Roc's perspective</p>",
        "id": 273158119,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741542
    },
    {
        "content": "<p>how does that differ from -static plus  -flto or --gc-sections?</p>",
        "id": 273158175,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741563
    },
    {
        "content": "<p>it's completely unrelated to them</p>",
        "id": 273158189,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741574
    },
    {
        "content": "<p>we don't call <code>ld</code> or anything like that</p>",
        "id": 273158217,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741589
    },
    {
        "content": "<p>the reason we call it the surgical linker is that literally all it's doing is adding the compiled application bytes to the binary, and then rewriting some headers to make some direct calls into dynamic ones</p>",
        "id": 273158281,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741624
    },
    {
        "content": "<p>so if you want to do another pass afterwards with a separate tool to GC sections, you totally can!</p>",
        "id": 273158309,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741646
    },
    {
        "content": "<p>but the Roc linker is narrowly scoped to only incorporate the compiled application into the precompiled host binary executable</p>",
        "id": 273158338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741671
    },
    {
        "content": "<p>that's its entire job, it doesn't do anything else</p>",
        "id": 273158346,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741677
    },
    {
        "content": "<p>which is both super fast and also gives platform authors maximum flexibility</p>",
        "id": 273158394,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741686
    },
    {
        "content": "<p>because any linking system needs to do that at the bare minimum</p>",
        "id": 273158413,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741697
    },
    {
        "content": "<p>do you mean patching the elf headers?</p>",
        "id": 273158443,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741721
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 273158447,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741725
    },
    {
        "content": "<p>and Mach-O on macOS - that one's in progress</p>",
        "id": 273158471,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479704\">Jorge Acereda</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/273157905\">said</a>:</p>\n<blockquote>\n<p>Well, I do care about code bloat. I'm considering if this would be an appropriate language for embedded.</p>\n</blockquote>\n<p>Very cool. Great to know the goal. For the embedded case, I don't think you will touch any roc linking stuff at all. Instead, I believe that you would just have roc emit a static library. Then you would have the embedded targeting platform deal with all of the linking.<br>\nThat is what I am doing <a href=\"https://github.com/bhansconnect/roc-microbit\">here</a> when targeting the nrf chip on the microbit.</p>",
        "id": 273158476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645741753
    },
    {
        "content": "<p>and does that work for static and dynamic executables?</p>",
        "id": 273158484,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741767
    },
    {
        "content": "<p>oh, also currently the surgical linker works for x64 ELF only - that's probably relevant!</p>",
        "id": 273158500,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645741776
    },
    {
        "content": "<p>Also, have you considered APE?</p>",
        "id": 273158783,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741923
    },
    {
        "content": "<p>cosmopolitan libc</p>",
        "id": 273158814,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741947
    },
    {
        "content": "<p>having a single binary across OSs could be really nice</p>",
        "id": 273158848,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645741974
    },
    {
        "content": "<p>never heard of APE or cosmopolitan libc</p>",
        "id": 273158889,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645742006
    },
    {
        "content": "<p><a href=\"https://justine.lol/cosmopolitan/index.html\">https://justine.lol/cosmopolitan/index.html</a></p>",
        "id": 273158898,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645742014
    },
    {
        "content": "<p>That would be tagential to Roc. That would be a platform decision.</p>",
        "id": 273158977,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645742049
    },
    {
        "content": "<p>right - from the Roc compiler's perspective, the goal is to be completely decoupled from libc</p>",
        "id": 273159294,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742273
    },
    {
        "content": "<p>so platform authors can use whatever libc they want, or decline to use libc altogether</p>",
        "id": 273159350,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742287
    },
    {
        "content": "<p>and everything still works!</p>",
        "id": 273159369,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742299
    },
    {
        "content": "<p>with cosmopolitan and some hacks you can end up having a single executable with OpenGL graphics running on Windows/Linux/NetBSD/FreeBSD, I did some experiments and it's totally possible... The only showstopper so far was OpenBSD that has some security measures that would need to be circumvented, but it's also possible with some more work.<br>\n<a href=\"https://github.com/jacereda/cosmogfx\">https://github.com/jacereda/cosmogfx</a></p>",
        "id": 273159577,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645742423
    },
    {
        "content": "<p>The main problem that I believe will limit roc for embedded is that roc and the platform are two separate chunks of code. They are not compiled together. They can't take advantage of inlining. This can add a huge number of bytes to an executable. In the roc-microbit case, using roc costs about 2500 bytes more than just using rust due to the loss of inlining.</p>\n<p>Of course, depending on the platform boundary this could potentially be greatly reduced.<br>\nIn reality, the solution is probably LTO between the platform and the Roc app, but that is hard because LTO is dependent on the specific version of LLVM. So it would be very brittle. Also more complex to setup in general.</p>",
        "id": 273159678,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645742505
    },
    {
        "content": "<p>is having a C codegen out of question?</p>",
        "id": 273159836,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645742583
    },
    {
        "content": "<p>well, another alternative could be to use -flto</p>",
        "id": 273159909,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645742626
    },
    {
        "content": "<p>that way the embedded platforms could inline just fine</p>",
        "id": 273159981,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645742647
    },
    {
        "content": "<p>C codegen technically could be done, but I don't think anyone in the project would really want to support that.</p>",
        "id": 273160012,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645742665
    },
    {
        "content": "<p>heh, I've actually thought about it for exactly that use case</p>",
        "id": 273160044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742693
    },
    {
        "content": "<p>it's a big can of worms though</p>",
        "id": 273160050,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742698
    },
    {
        "content": "<p>\"that use case\" being compiling platforms and applications together into one executable</p>",
        "id": 273160082,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742718
    },
    {
        "content": "<p>that can be optimized as a whole</p>",
        "id": 273160099,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742728
    },
    {
        "content": "<p>Also, lto require llvm version matching which is doable, but brittle. If roc is using llvm version 13 and the c compiler for your device is only on gcc or is llvm 12, lto won't work.</p>",
        "id": 273160112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645742738
    },
    {
        "content": "<p>the original idea was to do that via LLVM bytecode, but...yeah, that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 273160129,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742748
    },
    {
        "content": "<p>that would be a nightmare to maintain</p>",
        "id": 273160141,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742757
    },
    {
        "content": "<p>in comparison, we could emit (for example) C99 and say \"here you go, do whatever you want with it\"</p>",
        "id": 273160221,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742785
    },
    {
        "content": "<p>and that's at least a stable interface!</p>",
        "id": 273160234,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645742794
    },
    {
        "content": "<p>I guess the dependency on the LLVM version is just a matter of leaving LLVM mature a bit?</p>",
        "id": 273160381,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645742895
    },
    {
        "content": "<p>Not really. LLVM intentionally wants people not to depend on that so that they can change it if they every think of better representations or other ideas.</p>",
        "id": 273160520,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645742978
    },
    {
        "content": "<p>I see... that makes a C (or zig?) backend more interesting then.</p>",
        "id": 273160684,
        "sender_full_name": "Jorge Acereda",
        "timestamp": 1645743051
    },
    {
        "content": "<p>I guess theoretically it should stabilize, but LLVM still will never make promises about the stability or that tools will work when dealing with multiple versions.</p>",
        "id": 273160688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645743052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479704\">Jorge Acereda</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/273160684\">said</a>:</p>\n<blockquote>\n<p>I see... that makes a C (or zig?) backend more interesting then.</p>\n</blockquote>\n<p>As weird as that sounds. 100%.</p>",
        "id": 273160726,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645743072
    },
    {
        "content": "<p>That or accepting the loss of inlining between platform and application/ architecturing platforms in ways that make it matter less.</p>",
        "id": 273160847,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645743123
    },
    {
        "content": "<p>For example, I think things are made worse by embedded rust. Embedded rust is a giant pile of \"zero\" cost abstractions. The issue is that they depend on inline to be abstracted away. So when we break the inlining, I think it causes the rust to bloat. I think C or rust without the abstractions could be done in a way that the inlining basically didn't cause any problems.</p>",
        "id": 273160988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645743212
    },
    {
        "content": "<p>Oh also, we have to figure out to optimize roc for size. Currently we can only optimize for speed or not at all. Some reason size optimization isn't exposed through the libraries we use.</p>",
        "id": 273161087,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645743252
    },
    {
        "content": "<p>Also, emitting C or Zig doesn't innately solve this. If I was still trying to use embedded rust and you emit C, I still wouldn't get inlining without all of the llvm hassles.</p>",
        "id": 273161523,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645743500
    },
    {
        "content": "<p>well you could probably run a script to translate the C to Rust</p>",
        "id": 273161594,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645743548
    },
    {
        "content": "<p>But emitting C does fix it for C and C++ and Zig. Also, probably easier to get a C compiler with the right llvm version to match my rust compiler.</p>",
        "id": 273161596,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645743549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/273161087\">said</a>:</p>\n<blockquote>\n<p>Oh also, we have to figure out to optimize roc for size. Currently we can only optimize for speed or not at all. Some reason size optimization isn't exposed through the libraries we use.</p>\n</blockquote>\n<p>I think optimizing for speed may be the same as -O2: <a href=\"https://llvm.org/doxygen/CodeGen_8h_source.html\">https://llvm.org/doxygen/CodeGen_8h_source.html</a></p>",
        "id": 273161870,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1645743680
    },
    {
        "content": "<p>Ah, that would make sense. So it looks like <code>Os</code> is <code>O2</code> minus some things and <code>Oz</code> is <code>Os</code> minus loop vectorization: <a href=\"https://stackoverflow.com/questions/15548023/clang-optimization-levels\">https://stackoverflow.com/questions/15548023/clang-optimization-levels</a></p>",
        "id": 273162658,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645744135
    },
    {
        "content": "<p>So I just tested adding optimizing for size to roc. Makes quicksort 3x larger. I guess something we do in our llvm generation really depends on some of the more aggressive optimizations.</p>",
        "id": 273166610,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645746660
    },
    {
        "content": "<p>Ah, nvm. <code>link.rs</code> was still compiling the platform in debug mode. That makes way more sense.</p>",
        "id": 273167429,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645747221
    },
    {
        "content": "<p>Ok, after updating <code>link.rs</code> to also build for size, quicksort goes from 256K to 148K.</p>",
        "id": 273168710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645748194
    },
    {
        "content": "<p>So definitely works</p>",
        "id": 273168723,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645748202
    },
    {
        "content": "<p>Though I guess most of that is attributed to zig having <code>ReleaseSmall</code></p>",
        "id": 273168875,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645748326
    },
    {
        "content": "<p>(<a href=\"https://github.com/roc-lang/basic-cli/tree/main/examples\">https://github.com/roc-lang/basic-cli/tree/main/examples</a>)<br>\nHi all, I am a beginner to Roc, so I might overlook something, but I can't explain the following incomplete output when running time.roc:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    start &lt;- Utc.now |&gt; Task.await\n    dbg start       # =&gt; [time.roc 14:9] @Utc 1685614693863401198\n    {} &lt;- slowTask |&gt; Task.await    # =&gt; Tried to open a file...\n    finish &lt;- Utc.now |&gt; Task.await\n    dbg finish      # =&gt; [time.roc 18:9] @Utc 1685614693863545706\n    duration = Utc.deltaAsNanos start finish |&gt; Num.toStr\n    dbg duration\n    Stdout.line &quot;Completed in \\(duration)ns&quot;\n\nslowTask : Task.Task {} []\nslowTask =\n    path = Path.fromStr &quot;not-a-file-but-try-to-read-anyway&quot;\n    result &lt;- File.readUtf8 path |&gt; Task.attempt\n    when result is\n        _ -&gt; Stdout.line &quot;Tried to open a file...&quot;\n</code></pre></div>\n<p>The dbg output of start and finish is shown, as well as Stdout.line from slowtask, but no output of dbg duration or no Stdout.line with durarion output. What could be a reason for this? Is this a bug? Thanks!</p>",
        "id": 362701532,
        "sender_full_name": "Ivo Balbaert",
        "timestamp": 1685615121
    },
    {
        "content": "<p>If you remove that <code>|&gt; Num.toStr</code> after the <code>Utc.deltaAsNanos</code> would the dbg print?</p>",
        "id": 362720766,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1685619258
    },
    {
        "content": "<p>I could be confusing with other topics, but I think there's some bugfixing happening around <code>Num.toStr</code> and I'm just wondering if that would be the culprit as to why <code>dbg duration</code> would not print <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 362721003,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1685619316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620083\">Fábio Beirão</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20question/near/362720766\">said</a>:</p>\n<blockquote>\n<p>If you remove that <code>|&gt; Num.toStr</code> after the <code>Utc.deltaAsNanos</code> would the dbg print?</p>\n</blockquote>\n<p>You're right! dbg duration then prints out! But there is no Stdout.line display of duration. The problem with Num.toStr  probably  still prevents that, no error is shown, just no output.  Thanks anyway!</p>",
        "id": 362732265,
        "sender_full_name": "Ivo Balbaert",
        "timestamp": 1685621565
    },
    {
        "content": "<p>Just out of curiosity, which roc version are you using? ( <code>roc --version</code> )</p>",
        "id": 362732675,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1685621651
    },
    {
        "content": "<p>My fault! I was using a version of perhaps 1.5 weeks old. Before answering, I did an update to most recent source and build it, and the duration now is displayed:<br>\nTried to open a file...<br>\nCompleted in 59922ns<br>\nThanks for being patient !</p>",
        "id": 362738346,
        "sender_full_name": "Ivo Balbaert",
        "timestamp": 1685622893
    },
    {
        "content": "<p>Absolutely not your fault :) I am happy I could help, with my very very limited roc knowledge. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 362738939,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1685623023
    },
    {
        "content": "<p>I'm trying to write a platform in Zig and I get the following  error when running <code>roc run</code></p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;There were still outstanding Arc references to module_ids&#39;, crates/compiler/load_internal/src/file.rs:1560:37\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 409932654,
        "sender_full_name": "Slazaa",
        "timestamp": 1703530087
    },
    {
        "content": "<p>We will need to see more source to diagnose that. Probably has nothing to do with zig, but instead roc loading or specific parsing issues.</p>",
        "id": 409939313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703537564
    },
    {
        "content": "<p>Try <code>roc check</code> may reveal the real issue, if not, we probably need to see the code and mess around to figure out what is going on.</p>",
        "id": 409939341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703537602
    },
    {
        "content": "<p>I thi k I've seen this error or similar before, something like the way Interface or Package modules imported incorrectly. It's a shame we dont have a better error here yet, but if we can get a minimal repro maybe that would help.</p>",
        "id": 409939497,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703537777
    },
    {
        "content": "<p>Though I think Agu's work implementing module params design will cleanup and fix those issues soon.</p>",
        "id": 409939538,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703537846
    },
    {
        "content": "<p>Yeah, sounds like what I remember when it was last hit.</p>",
        "id": 409939635,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703537992
    }
]