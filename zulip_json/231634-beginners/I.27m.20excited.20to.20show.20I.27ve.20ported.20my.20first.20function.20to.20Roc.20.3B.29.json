[
    {
        "content": "<p>I've ported my first full function to Roc from TypeScript. Anyone want to code review?</p>\n<p>It was a little tricky figuring out what List functions to use here but I got through it.</p>\n<p>Here's the TypeScript version:<br>\n<a href=\"/user_uploads/22008/VYZjmuAxwiiicaBjyU_ib2Em/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/VYZjmuAxwiiicaBjyU_ib2Em/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/VYZjmuAxwiiicaBjyU_ib2Em/image.png\"></a></div><p>Here's the Roc version:<br>\n<a href=\"/user_uploads/22008/qfaE6_GRI18Hirqbf8u6x9IA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/qfaE6_GRI18Hirqbf8u6x9IA/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/qfaE6_GRI18Hirqbf8u6x9IA/image.png\"></a></div><p>Full project here:<br>\n<a href=\"https://github.com/ashleydavis/book-of-examples/tree/main/gallery/roc\">https://github.com/ashleydavis/book-of-examples/tree/main/gallery/roc</a></p>",
        "id": 447012136,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1719355116
    },
    {
        "content": "<p>It looks like a faithful port of the Typescript version - using recursion to check a number of properties of a list.</p>",
        "id": 447015165,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719356470
    },
    {
        "content": "<p>You could also implement the same functionality using <code>headingsMatch = \\headingA, headingB -&gt; headingA == headingB</code> but I guess there's less opportunity to explore the syntax. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 447015405,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719356565
    },
    {
        "content": "<p>I think the module syntax has changed recently, it would now be <code>module [headingsMatch]</code> to expose this function.</p>",
        "id": 447015618,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719356666
    },
    {
        "content": "<p>Another idea, sometimes I like to use variables to document things instead of comments. So you could also write it like;</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">headingsMatch</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">headingA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n\n<span class=\"w\">    </span><span class=\"n\">isDifferentLength</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"n\">headingA</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"n\">headingB</span>\n<span class=\"w\">    </span><span class=\"n\">isMatchingEmpty</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"n\">headingA</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">isFirstItemNotMatching</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">headingA</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">headingB</span>\n\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">isMatchingEmpty</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">true</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">isDifferentLength</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">isFirstItemNotMatching</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">false</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"n\">headingsMatch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">dropFirst</span><span class=\"w\"> </span><span class=\"n\">headingA</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">dropFirst</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 447016409,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719357008
    },
    {
        "content": "<p>Thanks so much for your feedback.</p>",
        "id": 447024643,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1719360185
    },
    {
        "content": "<p>The best thing about this impl is that I understand what you're doing because it's easily readable. It's good that you added the if statements at the top as \"guard\" statements to check for basic stuff first, like list length disparity, but since this is written recursively, those checks will run every time we recurse, so N times for a list with N items. Consider embedding a helper recursing function that avoids repeating those checks</p>",
        "id": 447024818,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719360263
    },
    {
        "content": "<p>Like so:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">headingsMatch</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">headingA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">headingB</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">headingA</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">headingB</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Different</span><span class=\"w\"> </span><span class=\"nv\">lengths</span><span class=\"nf\">.</span>\n<span class=\"w\">        </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">headingA</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">headingB</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Matching</span><span class=\"w\"> </span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"nv\">lists</span><span class=\"nf\">.</span>\n<span class=\"w\">        </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">listsAreEqual</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">listA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">listB</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">listA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">listB</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"p\">([],</span><span class=\"w\"> </span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">                </span><span class=\"p\">([</span><span class=\"nv\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">                </span><span class=\"p\">([],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">second</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">                </span><span class=\"p\">([</span><span class=\"nv\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">restOfFirst</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">second</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">restOfSecond</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">second</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">                        </span><span class=\"nv\">listsAreEqual</span><span class=\"w\"> </span><span class=\"nv\">restOfFirst</span><span class=\"w\"> </span><span class=\"nv\">restOfSecond</span>\n<span class=\"w\">                    </span><span class=\"kr\">else</span>\n<span class=\"w\">                        </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n\n<span class=\"w\">        </span><span class=\"nv\">listsAreEqual</span><span class=\"w\"> </span><span class=\"nv\">headingA</span><span class=\"w\"> </span><span class=\"nv\">headingB</span>\n</code></pre></div>",
        "id": 447025332,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719360488
    },
    {
        "content": "<p>Ooh another idea</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">headingsMatch</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">headingA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">headingA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">true</span>\n<span class=\"w\">        </span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">restA</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">restB</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">headingsMatch</span><span class=\"w\"> </span><span class=\"n\">restA</span><span class=\"w\"> </span><span class=\"n\">restB</span>\n<span class=\"w\">        </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\">  </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">false</span>\n</code></pre></div>",
        "id": 447025779,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719360707
    },
    {
        "content": "<p>Just wanted to post a pattern match version but you beat me to it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span><br>\nYeah, it leverages a powerful tool. I think from an education perspective (I see it’s part of the book), it’s a perfect place to show both versions I think</p>",
        "id": 447026237,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719360928
    },
    {
        "content": "<p>I simplified it a bit using a guard.</p>",
        "id": 447026355,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719360966
    },
    {
        "content": "<p>Yeah, one of the best parts of roc is the pattern matching. I find that, paired with recursion, can make for some really nice implementations for algorithms.</p>",
        "id": 447026477,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719361029
    },
    {
        "content": "<p>Also, most importantly, in typescript there may be reason to use a list because it's running in a dynamic system, but because you're literally just comparing 2 lists of strings, the simplest and most efficient way to do this is <code>headingsMatch = \\headingsA, headingsB -&gt; headingsA == headingsB</code></p>",
        "id": 447026690,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719361131
    },
    {
        "content": "<p>And it won't have type issues</p>",
        "id": 447026701,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719361138
    },
    {
        "content": "<p>Also, while we are looking at it. Before we had tuples I would hav used a Tag. I think it also looks pretty nice.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">headingsMatch</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">headingA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"n\">headingA</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">true</span>\n<span class=\"w\">        </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">restA</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">restB</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">headingsMatch</span><span class=\"w\"> </span><span class=\"n\">restA</span><span class=\"w\"> </span><span class=\"n\">restB</span>\n<span class=\"w\">        </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">false</span>\n</code></pre></div>",
        "id": 447026755,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719361162
    },
    {
        "content": "<p>Yeah, I think these kinds of examples are a great way to learn FP concepts like recursion. Sam makes a great point that for this specific use-case you would just use structural equality.</p>",
        "id": 447026930,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719361230
    },
    {
        "content": "<p>I'm super-duper brand-new to Roc so I wanted to test my intuition but in this specific case would a naïve comparison be (probably) as efficient because the String comparison operator does optimisations like checking length for you? (Understand that this is an algorithm exercise and so the point is to be able to write the procedure from first principles as it were.)</p>",
        "id": 447026976,
        "sender_full_name": "pyrmont",
        "timestamp": 1719361255
    },
    {
        "content": "<p>Oh, I see <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> already answered this. My bad.</p>",
        "id": 447027047,
        "sender_full_name": "pyrmont",
        "timestamp": 1719361286
    },
    {
        "content": "<p>I like how this simple example with the sequence of refactorings tells so much about the language!</p>",
        "id": 447027410,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719361457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"731368\">@pyrmont</span> a lot of the performance-sensitive std library operations are written in Zig, so this is what runs when you compare strings in Roc: <a href=\"https://github.com/roc-lang/roc/blob/7e609bfdbf37b51dd8ae576462a99b7ff404ca63/crates/compiler/builtins/bitcode/src/str.zig#L179\">https://github.com/roc-lang/roc/blob/7e609bfdbf37b51dd8ae576462a99b7ff404ca63/crates/compiler/builtins/bitcode/src/str.zig#L179</a></p>",
        "id": 447027511,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719361511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> Thanks! Yep, that's what I expected :)</p>",
        "id": 447027757,
        "sender_full_name": "pyrmont",
        "timestamp": 1719361614
    },
    {
        "content": "<p>Also while looking at this I found this behaviour which seemed wrong so I made an issue <a href=\"https://github.com/roc-lang/roc/issues/6839\">https://github.com/roc-lang/roc/issues/6839</a></p>",
        "id": 447027968,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719361704
    },
    {
        "content": "<p>Should a definition only used in a test give a warning?</p>",
        "id": 447027995,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719361723
    },
    {
        "content": "<p>Yeah, I was gonna say... if it's only used to test itself and nowhere else, then probably</p>",
        "id": 447028092,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719361770
    },
    {
        "content": "<p>But if it's used only in testing, but it's a helper to test something else, then I'd say no warning</p>",
        "id": 447028122,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719361785
    },
    {
        "content": "<p>But if it's exposed, then it's fine to only be used in a test IMO</p>",
        "id": 447028196,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719361804
    },
    {
        "content": "<p>Tests are dead code unless it's tests execution. Unless the def is exposed, it is expected to have the warning</p>",
        "id": 447029281,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719362328
    },
    {
        "content": "<p>Thanks for clarifying. That makes sense. I've closed the Issue with a comment.</p>",
        "id": 447039164,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719365826
    },
    {
        "content": "<p>it definitely needs to be possible to write test helper functions and constants that are only ever referenced in tests! Those should not be reported as unused; that would make them essentially impossible to use <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 447049363,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719370522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> should I reopen that issue? I'm not 100% becuase of the specific issue reported is about recursion. Maybe I've found an edge case from somehwere.</p>",
        "id": 447050406,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719370975
    },
    {
        "content": "<p>I think test helpers would require explicit identification then. I don’t think it’s a good idea to lock dead code with tests</p>",
        "id": 447126965,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719379252
    },
    {
        "content": "<p>hm, as in you write something that’s not intended to be a test helper, but also isn’t exposed, but is referenced in a test, and therefore never gets reported as unused even though it’s actually dead code?</p>",
        "id": 447129719,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719380966
    },
    {
        "content": "<p>actually we could address that situation by reporting “dead tests” which don’t reference anything exposed (including indirectly)</p>",
        "id": 447129862,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719381048
    },
    {
        "content": "<p>which would also address the other scenario, because after deleting the dead tests, the not-actually-a-helper would no longer be referenced anywhere, and would be reported as unused</p>",
        "id": 447130005,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719381125
    },
    {
        "content": "<p>Yeah, let's say my module is:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">foo</span><span class=\"p\">]</span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"nv\">baz</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">bar</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">baz</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p><code>foo</code> is exported, so it's not dead code. <code>bar</code> isn't exported, but it's used to text something that was exported, so it's not dead code. <code>baz</code> was only used in tests by itself, so it's dead code</p>",
        "id": 447130043,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719381140
    },
    {
        "content": "<p>Reporting \"dead tests\" would be a simpler way to achieve that goal than to do analysis on whether a function was used in an <code>expect</code> with an exposed function.</p>",
        "id": 447130092,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719381169
    },
    {
        "content": "<p>However, it would make test helpers easy to leak into release env. Probably not a problem but without distinguishing mechanism, there is no difference between test helpers and just helpers</p>",
        "id": 447181330,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719398064
    },
    {
        "content": "<p>Yeah, if we wanted strong separation of tests from code, we would need something like test modules in rust</p>",
        "id": 447240417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719414731
    },
    {
        "content": "<p>An aside on this: at work we've built a component library, where each component has a set of examples. We occasionally run into components having dead code which isn't caught because there's still an example which exercises it. But because it's not of use in production, we would rather remove it.</p>\n<p>But we also have the reverse, where we have a library of utility functions we can use, and for that, we also keep dead functions around sometimes because they can still be useful when you need them.</p>\n<p>So dead code detection and what to do about that code definitely can get more complicated than just \"is it called anywhere?\"</p>",
        "id": 447265601,
        "sender_full_name": "Kasper Møller Andersen",
        "timestamp": 1719419345
    },
    {
        "content": "<blockquote>\n<p>can still be useful</p>\n</blockquote>\n<p>In practice, it almost never happens. At least not in my experience.</p>",
        "id": 447285458,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719423770
    },
    {
        "content": "<p>Thanks everyone. There's a lot to process here. Pattern matching is very cool, but seems very different to the languages I am coming from. I'm going back to the Roc tutorial to try and understand it better.</p>",
        "id": 447346105,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1719440054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/I'm.20excited.20to.20show.20I've.20ported.20my.20first.20function.20to.20Roc.20.3B.29/near/447026755\">said</a>:</p>\n<blockquote>\n<p>Also, while we are looking at it. Before we had tuples I would hav used a Tag. I think it also looks pretty nice.</p>\n<p><div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">headingsMatch</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">headingA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"n\">headingA</span><span class=\"w\"> </span><span class=\"n\">headingB</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">true</span>\n<span class=\"w\">        </span><span class=\"kt\">T</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">restA</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">restB</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">headingsMatch</span><span class=\"w\"> </span><span class=\"n\">restA</span><span class=\"w\"> </span><span class=\"n\">restB</span>\n<span class=\"w\">        </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"n\">false</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What's the difference between the tag and tuple versions? I can read the tuple version and understand that, but the tag version is a form of syntax I haven't seen in Roc yet.</p>",
        "id": 447346424,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1719440144
    },
    {
        "content": "<p>Quick advice. Let's not teach using <code>T</code> or other single tags for tuples.</p>",
        "id": 447366731,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719450939
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>headingsMatch = \\a, b -&gt;\n  when (a, b) is\n    ([], []) -&gt; Bool.true\n    ([a, .. as restA], [b, .. as restB] if a == b -&gt; headingsMatch restA restB\n    _ -&gt; Bool.false\n</code></pre></div>",
        "id": 447366926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451077
    },
    {
        "content": "<p>They are identical in function</p>",
        "id": 447366978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451104
    },
    {
        "content": "<p>So really only the tuple version should be used/recommend for language consistency</p>",
        "id": 447366999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451129
    },
    {
        "content": "<p>They're identical, but I think people prefer the tag approach because it's <em>slightly</em> more terse</p>",
        "id": 447367132,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451222
    },
    {
        "content": "<p>The tag version just is constructioning a tag with the type <code>[T Str Str]</code>. It only has a single possible variant. Assuming heading is <code>List Str</code></p>",
        "id": 447367138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451230
    },
    {
        "content": "<p>But tuples are more readable</p>",
        "id": 447367146,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451234
    },
    {
        "content": "<p>In that you don't have to write \\a, b -&gt; (a, b)</p>",
        "id": 447367175,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451261
    },
    {
        "content": "<p>Aside, this is just <code>headingsA == headingsB</code>, right?</p>",
        "id": 447367209,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451299
    },
    {
        "content": "<p>Yep</p>",
        "id": 447367216,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451316
    },
    {
        "content": "<p>It was a learning exercise I think</p>",
        "id": 447367262,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451325
    },
    {
        "content": "<p>I mean the difference is a single character in length assuming the code is formatted</p>\n<div class=\"codehilite\"><pre><span></span><code>T a b\n(a, b)\n</code></pre></div>",
        "id": 447367300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451370
    },
    {
        "content": "<p>List.map2 T vs List.map2 \\a, b -&gt; (a, b)</p>",
        "id": 447367346,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451416
    },
    {
        "content": "<p>Super minor I know</p>",
        "id": 447367372,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451431
    },
    {
        "content": "<p>Didn't notice a version using <code>List.map2</code></p>",
        "id": 447367463,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451483
    },
    {
        "content": "<p>But yeah, I see your point</p>",
        "id": 447367526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451531
    },
    {
        "content": "<p>Yes, I was saying why someone would prefer it in general yes</p>",
        "id": 447367529,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451537
    },
    {
        "content": "<p>Ah</p>",
        "id": 447367548,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451543
    },
    {
        "content": "<p>Obviously means we need to steal T or something short to mean make a tuple... <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 447367627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719451585
    },
    {
        "content": "<p>Lmao my thoughts exactly</p>",
        "id": 447367648,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451603
    },
    {
        "content": "<p>But <em>probably</em> not worth it yet</p>",
        "id": 447367661,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451613
    },
    {
        "content": "<p>When people complain more</p>",
        "id": 447367664,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719451617
    },
    {
        "content": "<p><code>List.map2 (,)</code> ofc <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 447370051,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1719453388
    },
    {
        "content": "<p>Jokes aside, I don’t think it will ever be worth adding a shorthand for this</p>",
        "id": 447370670,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1719453817
    }
]