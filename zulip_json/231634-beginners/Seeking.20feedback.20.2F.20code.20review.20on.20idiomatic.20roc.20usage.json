[
    {
        "content": "<p>Hi folks, I'm gradually working my way up to being able to do advent of code problems, and one library that I find constantly useful in Go is \"charmap\": a map of (x,y) to character. I decided to start implementing it in Roc, and I'd love to get feedback on what could be clearer, more concise, more idiomatic, etc.</p>",
        "id": 408406107,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702786561
    },
    {
        "content": "<p>Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">Charmap</span>\n<span class=\"w\">    </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">      </span><span class=\"nv\">parse</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"nv\">minmax</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"nv\">toString</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"kt\">Point</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">)</span>\n\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">graphemes</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">char</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">((</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI64</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI64</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">join</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span>\n\n<span class=\"nv\">pointsMap</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Point</span>\n<span class=\"nv\">pointsMap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nv\">x1</span><span class=\"w\"> </span><span class=\"nv\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nv\">y1</span><span class=\"w\"> </span><span class=\"nv\">y2</span><span class=\"p\">)</span>\n\n<span class=\"nv\">minmax</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">EmptyMap</span><span class=\"p\">]</span>\n<span class=\"nv\">minmax</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">keys</span><span class=\"w\"> </span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">EmptyMap</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"nv\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"nv\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">head</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">min</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"nv\">pointsMap</span><span class=\"w\"> </span><span class=\"nv\">min</span><span class=\"w\"> </span><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">min</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pointsMap</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span>\n\n<span class=\"w\"> </span><span class=\"nv\">toString</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"w\"> </span><span class=\"nv\">toString</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">dict</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">default</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">minmax</span><span class=\"w\"> </span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">EmptyMap</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nv\">minx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">miny</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">maxx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">maxy</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"nv\">miny</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"nv\">maxy</span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"nv\">minx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"nv\">maxx</span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"nv\">default</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n</code></pre></div>",
        "id": 408406162,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702786589
    },
    {
        "content": "<p>For character, you may want to use a U8 or U32 depending on the goal. I know we have a way to convert a string to code points. Unicode codepoints are U32s.</p>",
        "id": 408410321,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702790341
    },
    {
        "content": "<p>U8 if you only care about ASCII</p>",
        "id": 408410334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702790354
    },
    {
        "content": "<p>It will be a lot more performant that using a string assuming these truly are single character</p>",
        "id": 408410350,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702790380
    },
    {
        "content": "<p>That said, character vs codepoints vs graphemes still confuses me. Maybe graphemes is the best if you want to support all forms of emoji and such.</p>",
        "id": 408410434,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702790442
    },
    {
        "content": "<p>yeah I've banned the word \"character\" from all of Roc's documentation because it is such a huge source of confusion and Unicode bugs <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 408439814,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702817470
    },
    {
        "content": "<p>I'm not sure what Go charmaps are used for though!</p>",
        "id": 408439898,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702817549
    },
    {
        "content": "<p>in general I'd always default to <code>Str</code></p>",
        "id": 408439922,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702817586
    },
    {
        "content": "<p>Yeah. I considered <code>Str.toScalars</code>, mainly because I felt slightly squeamish about dict entries and the <code>default</code> param being able to be any other length than one grapheme (make impossible states impossible in your data representation and all that), but <code>dbg</code> output is a lot harder to understand when all you see is ascii codes.</p>",
        "id": 408456368,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702832272
    },
    {
        "content": "<p>\"charmaps\" aren't really a thing in Go. I just use my \"charmap\" library constantly in adventofcode. It's defined like so in <a href=\"https://github.com/zellyn/adventofcode/blob/master/charmap/charmap.go#L11L12\">charmap.go</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>// M is a map of geom.Vec2 to rune.\ntype M map[geom.Vec2]rune\n</code></pre></div>",
        "id": 408456629,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702832404
    },
    {
        "content": "<p>I appreciate the feedback on always defaulting to <code>Str</code>. Any other code comments? Is stringing the whole function into one expression normal, or would it be more common to create variables holding intermediate results? (That's the way I had it at first, while fighting my ignorance of Roc, naturally.)</p>",
        "id": 408456859,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702832523
    },
    {
        "content": "<p>Also, I kinda used <code>|&gt;</code> or not based on some combination of whether it felt cleaner, avoided parenthesized function calls as args, matched surrounding code, or was the only thing I could think of. And I didn't use <code>&lt;-</code> because while I <em>technically</em> understand exactly what it does, I haven't quite internalized its \"gestalt\" / \"feels\" / whatever you'd call it.</p>",
        "id": 408457183,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702832670
    },
    {
        "content": "<p>One last question: I toyed around with <code>Result.mapErr</code> and <code>Result.map</code> to sort of thread the logic through a linear, non-branching sequence of steps, but it _seemed_ like pattern matching on Ok/Err came out clearer. Does my usage there seem idiomatic?</p>",
        "id": 408457434,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702832762
    },
    {
        "content": "<p>The code reads quite well overall. I don't think backpassing is really warranted in these cases. Quite clean with all the pipelines and explicit <code>when ... is</code></p>",
        "id": 408462805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702835122
    },
    {
        "content": "<p>I would maybe:</p>\n<ol>\n<li>Make an explicit charmap type</li>\n<li>Add the min and max to the type so you don't have to do the expensive call to scan the entire dictionary (though this depends on how often you need them)</li>\n</ol>",
        "id": 408463282,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702835313
    },
    {
        "content": "<p>Also, a note:</p>\n<p>Due to a bug, this type will likely be very slow currently. The strings in the dictionary will get refcounted a lot as it gets passed around. Hopefully I will fix this soon, but just a warning.</p>",
        "id": 408464296,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702835687
    },
    {
        "content": "<p>Since this is for advent of code, calculating the min and max by iteration is almost always fine.</p>",
        "id": 408470530,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702839031
    },
    {
        "content": "<p>The string refcount thing would be an argument for using scalars…</p>",
        "id": 408470599,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702839079
    },
    {
        "content": "<p>Yeah, if you hit perf issues, switching to scalar would probably fix it.</p>",
        "id": 408471789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702839505
    },
    {
        "content": "<p>I'm currently traveling and not sure how much I will get done over the holidays but fixing this refcounting bug is my next priority, just will be a lot of pipelining. So hopefully by mid January at the latest, the choice here shouldn't affect perf.</p>",
        "id": 408472487,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702839805
    },
    {
        "content": "<p>Interesting. For strings of such small lengths (1 character!) it would be more efficient to do something akin to \"intern\" in other languages.</p>",
        "id": 408520612,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702870857
    },
    {
        "content": "<p>Or invent a separate representation for strings that are short enough to fit in a 64-bit value in a register or on the stack, although that seems a bit painful.</p>",
        "id": 408520701,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702870898
    },
    {
        "content": "<p>For Advent of Code I use <code>Str.toUtf8</code> and represent \"characters\" as U8 as I know they are all ASCII and that is very efficient and fast.</p>",
        "id": 408520873,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702870976
    },
    {
        "content": "<p>Since strings are immutable, and there aren't any could-be-faster-if-you-modify-in-place methods on <code>Str</code> (well, depending on how you treat generating substrings, and if you count replacing with exactly-the-same-length replacements), I guess the refcount for strings is solely for GC, not for Roc's modify-in-place optimization.</p>",
        "id": 408520971,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702871035
    },
    {
        "content": "<p>Is there a way to create a new type that is an alias for U8, but has a <code>dbg</code> representation of an ascii character?</p>",
        "id": 408521112,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702871096
    },
    {
        "content": "<p>Strings get mutated in place optimizations if you change them (like replace text). They also have a small string optimization to avoid allocations. Also, substrings end up being slices, so they avoid any allocations</p>",
        "id": 408524180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702872288
    },
    {
        "content": "<p>You can make a custom <code>dbg</code> impl if a type is opaque, but that may be inconvenient for the <code>List U8</code> that is kinda a string use cases.</p>\n<p>Also, if you were to switch your charmap to be a <code>Dict Point (List U8)</code>, it would hit the same recursive refcount perf bug. But if you switch to <code>Dict Point U8</code> it would probably work fine for everything Advent of code. Might be worth making charmap an opaque type with a custom inspect impl such that it prints as if it were a string.</p>",
        "id": 408524646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702872471
    }
]