[
    {
        "content": "<p>How can I investigate the cause of a segmentation fault?</p>\n<p>I've encountered a segmentation fault when running tests for the phone-number exercise in attempting to debug my solution.</p>\n<p>Tests code</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main!] {\n    pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.19.0/Hj-J_zxz7V9YurCSTFcFdu6cQJie4guzsPMUi5kBYUk.tar.br&quot;,\n}\n\nimport pf.Stdout\n\nmain! = |_args|\n    Stdout.line!(&quot;&quot;)\n\nimport PhoneNumber exposing [clean]\n\n# invalid when 11 digits does not start with a 1\nexpect\n    result = clean(&quot;22234567890&quot;)\n    result |&gt; Result.is_err\n\n# valid when 11 digits and starting with 1\nexpect\n    result = clean(&quot;12234567890&quot;)\n    expected = Ok(&quot;2234567890&quot;)\n    result == expected\n</code></pre></div>\n<p>PhoneNumber.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>module [clean]\n\nclean : Str -&gt; Result Str _\nclean = |phone_number|\n    parsed =\n        Str.to_utf8(phone_number)\n        |&gt; List.keep_if(|c| c &gt; &#39;0&#39; and c &lt;= &#39;9&#39;)\n\n    when parsed is\n        [&#39;1&#39;, a, _, _, b, .. as rest] if a &gt; &#39;1&#39; and b &gt; &#39;1&#39; and List.len(rest) == 6 -&gt; Str.from_utf8(List.drop_first(parsed, 1))\n        [a, _, _, b, .. as rest] if a &gt; &#39;1&#39; and b &gt; &#39;1&#39; and List.len(rest) == 6 -&gt; Str.from_utf8(parsed)\n        _ -&gt; Err(InvalidFormat)\n</code></pre></div>\n<p>Interestingly if run the tests individually then no segmentation fault occurs. Also no segmentation fault if I alter the implementation (this corrects the logic so that all tests pass), by changing a GT to a GTE in the line:</p>\n<div class=\"codehilite\"><pre><span></span><code>List.keep_if(|c| c &gt; &#39;0&#39; and c &lt;= &#39;9&#39;)\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><code>List.keep_if(|c| &gt;= &#39;0&#39; and c &lt;= &#39;9&#39;)\n</code></pre></div>\n<p>I'm using:</p>\n<blockquote>\n<p>roc nightly pre-release, built from commit c47a8e9cdac on Sat Mar 22 09:14:20 UTC 2025</p>\n</blockquote>",
        "id": 515392897,
        "sender_full_name": "Tom Hill",
        "timestamp": 1746044967
    },
    {
        "content": "<p>Is the compiler segfaulting or the executable?</p>",
        "id": 515417912,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1746056185
    },
    {
        "content": "<p>Oh, it's expects specifically</p>",
        "id": 515417963,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1746056243
    },
    {
        "content": "<p>Probably the communication better compiler and test runner</p>",
        "id": 515417985,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1746056265
    },
    {
        "content": "<p>Could try running with old or gdb</p>",
        "id": 515418004,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1746056276
    },
    {
        "content": "<p>I was able to reproduce this and am checking it out with valgrind now</p>",
        "id": 515670195,
        "sender_full_name": "Anton",
        "timestamp": 1746176551
    },
    {
        "content": "<p>I switched the expects around and got some memory garbage in the output:</p>\n<div class=\"codehilite\"><pre><span></span><code>â”€â”€ EXPECT FAILED in temp.roc â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n\nThis expectation failed:\n\n12â”‚&gt;  # valid when 11 digits and starting with 1\n13â”‚&gt;  expect\n14â”‚&gt;      result = clean(&quot;12234567890&quot;)\n15â”‚&gt;      expected = Ok(&quot;2234567890&quot;)\n16â”‚&gt;      result == expected\n\nWhen it failed, these variables had these values:\n\nresult : Result Str [\n    BadUtf8 {\n        index : U64,\n        problem : Utf8Problem,\n    },\n    InvalidFormat,\n]\nresult = Ok\n    &quot;&quot;&quot;\n    ï¿½ï¿½ï¿½ï¿½Ð“\n    EÊªÊªÊªÊ²234567890\n    &quot;&quot;&quot;\n\nexpected : [\n    Err [\n        BadUtf8 {\n            index : U64,\n            problem : Utf8Problem,\n        },\n        InvalidFormat,\n    ],\n    Ok Str,\n]\nexpected = Ok &quot;2234567890&quot;\n</code></pre></div>",
        "id": 515670849,
        "sender_full_name": "Anton",
        "timestamp": 1746176811
    },
    {
        "content": "<p>This is likely very similar to <a class=\"message-link\" href=\"/#narrow/channel/463736-bugs/topic/.E2.9C.94.20segfault.20on.20failing.20multi-line.20tests.20with.20a.20float.20def/near/508946074\">#bugs &gt; âœ” segfault on failing multi-line tests with a float def @ ðŸ’¬</a></p>",
        "id": 515675420,
        "sender_full_name": "Anton",
        "timestamp": 1746178497
    },
    {
        "content": "<p>Hmm, the important valgrind error (at the end) is different from the one in the other thread.<br>\n<a href=\"/user_uploads/22008/LtqmqyclmMggWBqX_1U6_n1L/valgrind_output_expect_phone_number_exercism.txt\">valgrind_output_expect_phone_number_exercism.txt</a></p>",
        "id": 515694895,
        "sender_full_name": "Anton",
        "timestamp": 1746186152
    },
    {
        "content": "<p>This assertion is hit when building in debug mode: <a href=\"https://github.com/roc-lang/roc/blob/fac7041d11a70751f271c90dbf8354e746c18837/crates/repl_expect/src/app.rs#L25\">https://github.com/roc-lang/roc/blob/fac7041d11a70751f271c90dbf8354e746c18837/crates/repl_expect/src/app.rs#L25</a></p>",
        "id": 515714453,
        "sender_full_name": "Anton",
        "timestamp": 1746192597
    },
    {
        "content": "<p>Anyway, this does come down to <a class=\"message-link\" href=\"/#narrow/channel/463736-bugs/topic/.E2.9C.94.20segfault.20on.20failing.20multi-line.20tests.20with.20a.20float.20def/near/508946143\">#bugs &gt; âœ” segfault on failing multi-line tests with a float def @ ðŸ’¬</a> . If the new compiler takes too long we will fix this in the old compiler.</p>",
        "id": 515715647,
        "sender_full_name": "Anton",
        "timestamp": 1746192936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"900063\">@Tom Hill</span> with the next release you will get a nicer error message, see <a href=\"https://github.com/roc-lang/roc/pull/7773\">PR#7773</a>.</p>",
        "id": 515718546,
        "sender_full_name": "Anton",
        "timestamp": 1746193756
    },
    {
        "content": "<p>As a workaround you can write your own expect function:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">my_expect</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">my_expect</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">expected</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">clean</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s\">\"Test passed for input: ${input}\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s\">\"Test failed for input: ${input}. Expected: ${Inspect.to_str(expected)}, but got: ${Inspect.to_str(result)}\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 515720363,
        "sender_full_name": "Anton",
        "timestamp": 1746194250
    },
    {
        "content": "<p>Thank you for investigating <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 515798557,
        "sender_full_name": "Tom Hill",
        "timestamp": 1746220074
    },
    {
        "content": "<p>I've made a general issue for this problem <a href=\"https://github.com/roc-lang/roc/issues/7799\">#7799</a></p>",
        "id": 519090302,
        "sender_full_name": "Anton",
        "timestamp": 1747656771
    }
]