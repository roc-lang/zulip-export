[
    {
        "content": "<p>Does roc have a \"lazy list\" or \"infinite sequence\" or stream, etc? I'm thinking about all the things I normally use for advent of code.</p>",
        "id": 465276199,
        "sender_full_name": "drew",
        "timestamp": 1724708756
    },
    {
        "content": "<p>Nope</p>",
        "id": 465278902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724710387
    },
    {
        "content": "<p>Can be built up in userland, but nothing exists in the standard library or language</p>",
        "id": 465278938,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724710417
    },
    {
        "content": "<p>got it, thanks. i’m guessing this means no package either.</p>",
        "id": 465279262,
        "sender_full_name": "drew",
        "timestamp": 1724710624
    },
    {
        "content": "<p>i may see if i can build one, but i know there are a lot of tricky bits in implementing something like this well</p>",
        "id": 465279760,
        "sender_full_name": "drew",
        "timestamp": 1724710967
    },
    {
        "content": "<p>I think someone was messing around with streams before on Zulip, but no idea the state</p>",
        "id": 465280140,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724711116
    },
    {
        "content": "<p>awkward <a href=\"https://gist.github.com/drewolson/6c1f5157e84a6c387faca0646d91e04a\">https://gist.github.com/drewolson/6c1f5157e84a6c387faca0646d91e04a</a></p>",
        "id": 465305095,
        "sender_full_name": "drew",
        "timestamp": 1724724671
    },
    {
        "content": "<p>i solved it!</p>",
        "id": 465305455,
        "sender_full_name": "drew",
        "timestamp": 1724724873
    },
    {
        "content": "<p>my nil definition was typed <code>nil : Stream a</code> but should be <code>nil : Stream _</code></p>",
        "id": 465305481,
        "sender_full_name": "drew",
        "timestamp": 1724724889
    },
    {
        "content": "<p>I'm interested to know why there is a difference there. </p>\n<p>My guess is that this might be related to polymorphism or something. Like once you use the top level <code>nil</code> function it's type becomes fixed to whatever it was used as. So maybe you need to make it a thunk like <code>nil: {} -&gt; Steam a</code> for it to work with different types?</p>",
        "id": 465306593,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724725444
    },
    {
        "content": "<p>i'll gist this if / when i actually get it working</p>",
        "id": 465306632,
        "sender_full_name": "drew",
        "timestamp": 1724725468
    },
    {
        "content": "<p>yeah i'm running into a few more type issues with this right now</p>",
        "id": 465306878,
        "sender_full_name": "drew",
        "timestamp": 1724725613
    },
    {
        "content": "<p>i'm hitting all sorts of compiler bugs <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 465316975,
        "sender_full_name": "drew",
        "timestamp": 1724730675
    },
    {
        "content": "<p>this is what i have so far, it compiles <a href=\"https://gist.github.com/drewolson/774cc1e16c75510eefb9066a1395f780\">https://gist.github.com/drewolson/774cc1e16c75510eefb9066a1395f780</a></p>",
        "id": 465317518,
        "sender_full_name": "drew",
        "timestamp": 1724730963
    },
    {
        "content": "<p>but when i try to use it ... bad things happen to the compiler</p>",
        "id": 465317537,
        "sender_full_name": "drew",
        "timestamp": 1724730974
    },
    {
        "content": "<p>I was playing around with something similar a few months ago. There should be some things about is on a zulip thread somewhere. I named it Iter, so maybe that helps for looking. If I remember correctly, everything compiled back then as well, but crashed when running</p>",
        "id": 465328395,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1724736645
    },
    {
        "content": "<p>Hopefully the new lambdaset changes that have been tested outside of roc and need to be ported to roc will fix a lot of the issues here.</p>",
        "id": 465341069,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724740375
    },
    {
        "content": "<p>somewhat related -- is there a good way to catch up on all the \"ongoing\" stuff around language changes? maybe the answer is \"this zullip\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 465472576,
        "sender_full_name": "drew",
        "timestamp": 1724769805
    },
    {
        "content": "<p>The big things are on <a href=\"https://www.roc-lang.org/plans\">this page</a>, <a href=\"https://github.com/roc-lang/roc/pulls?q=is%3Apr+is%3Aclosed\">recently closed PRs</a> could also be a good way to follow. And yeah zulip if you want to follow everything :)</p>",
        "id": 465474602,
        "sender_full_name": "Anton",
        "timestamp": 1724770257
    },
    {
        "content": "<p>The language seems to be shaping up nicely and i'm excited to use it for more stuff (initially advent of code), but things still feel a bit too seg-fault-y to do so, mostly i'm trying to understand when to keep checking back.</p>",
        "id": 465475763,
        "sender_full_name": "drew",
        "timestamp": 1724770504
    },
    {
        "content": "<blockquote>\n<p>but things still feel a bit too seg-fault-y to do so</p>\n</blockquote>\n<p>Yeah, <a href=\"#narrow/stream/316715-contributing/topic/Advent.20of.20Code.202024/near/462299920\">we are aware</a>. We've been landing a lot of big changes lately, hopefully we'll have more time to focus on reliability in the near future. You can check this <a href=\"https://github.com/roc-lang/roc/issues?q=is%3Aissue+is%3Aopen+segmentation+fault\">github search query</a> to see if the amount of segfaults has reduced :)</p>",
        "id": 465478144,
        "sender_full_name": "Anton",
        "timestamp": 1724771030
    },
    {
        "content": "<p>awesome!</p>",
        "id": 465478654,
        "sender_full_name": "drew",
        "timestamp": 1724771150
    },
    {
        "content": "<p>As a note, most of the segfaults I think come from more complex uses of the language (though the compiler can also crash relatively easily, but many of those go away once <code>roc check</code> errors are fixed). So if you do more imperative style of code with less lambdas and deeply captured data (like a lazy sequence), the language tends to be able to do a lot. But yeah....still not hard to break.</p>",
        "id": 465503012,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776968
    },
    {
        "content": "<p>fair. i don’t have a good intuition of what is “complex” right now. a few months ago i segfaulted on arg parsing, but that seems resolved by merging weaver. i swear i’m not trying to be complex for complexity’s sake <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 465503412,
        "sender_full_name": "drew",
        "timestamp": 1724777070
    },
    {
        "content": "<p>Sorry, not trying to call you out.</p>\n<p>Generally speaking for Roc today, complex in terms of breaking the compiler tends to be lots of nested lambdas. Parser combinators happen to be that. So do lazy sequences. I think a lot of nice functional programming concepts fall into this category sadly. It also is not clear when things will break. Sometimes these features fully work. Other times they break with something that feels simple.</p>",
        "id": 465505949,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/lazy.20sequence/near/465505949\">said</a>:</p>\n<blockquote>\n<p>Sorry, not trying to call you out.</p>\n</blockquote>\n<p>Not at all. The perspective is actually very useful. Every new ecosystem has things that are simple or complex based on their current strengths.</p>",
        "id": 465508289,
        "sender_full_name": "drew",
        "timestamp": 1724778061
    }
]