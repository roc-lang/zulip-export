[
    {
        "content": "<p>I admit it I still don't get backpassing. Basically every other part of Roc is easy to understand, but backpassing is mysterious to me. It certainly makes the code a lot prettier, but I just have absolutely no mental model for it.</p>\n<p>By contrast <code>|&gt;</code> is totally trasparent to me, even though it also gets up to some nonsense with the order things work in - it basically just acknowledges that a ton of big functions are pragmatically understood as acting ON one of the arguments WITH the rest, with that object passing from function to function. It's function composition. It's a pipeline. It's in the name. I can immediately grok it.</p>\n<p>But I've read the Roc tutorial page over and over (and now the roc for elm page)(never touched elm though) and it's just not clicking. If you gave me a perfectly precise description of how backpassing desugars, and some code for me to desugar manually, I give myself an 80% chance of nailing it.</p>",
        "id": 397832882,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697880378
    },
    {
        "content": "<p>Yeah, it's a pain point. I think it would be helpful to explain backpassing using a more familiar function then <code>Task.await</code>.<br>\nPerhaps we could also show an indented version that is more similar to the desugared version to make it easier to understand:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">task</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Type something press Enter:\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n<span class=\"w\">            </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"You just entered: \\(text)\"</span>\n</code></pre></div>",
        "id": 397834699,
        "sender_full_name": "Anton",
        "timestamp": 1697882193
    },
    {
        "content": "<p>Yeah the fact that the explanations already build on await, a rather abstract concept, makes it extra hard.</p>\n<p>I think I (and others) need a problem whose internal structure is immediately understandable, which is poorly expressed by conventional notation, but which is sorta \"isomorphic\" to the backpassed version. A problem which, when articulated the way anyone instinctively would, is already structured like a backpass statement/chain.</p>",
        "id": 397835231,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697882615
    },
    {
        "content": "<p>Well said!</p>",
        "id": 397836171,
        "sender_full_name": "Anton",
        "timestamp": 1697883369
    },
    {
        "content": "<p>To tighten it further, this problem should ideally be something anyone could understand, not just those who'd learnt programming. A \"natural\" problem, not merely a \"technical\" one.</p>",
        "id": 397836656,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697883813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Don't.20Get.20Backpassing/near/397836171\">said</a>:</p>\n<blockquote>\n<p>Well said!</p>\n</blockquote>\n<p>I've got a mild obsession/compulsion with articulating ideas, especially those that are simple but resist expression. Given that doing so was both the topic of my prior comment and inherent to the act of formulating it, I tried real hard to nail it.</p>",
        "id": 397836800,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697883948
    },
    {
        "content": "<p>I explained it in a different way, including desugaring, here - does this help? <a href=\"https://youtu.be/6qzWm_eoUXM?si=nAIzIRt9H5M5plYh&amp;t=1870\">https://youtu.be/6qzWm_eoUXM?si=nAIzIRt9H5M5plYh&amp;t=1870</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"6qzWm_eoUXM\" href=\"https://youtu.be/6qzWm_eoUXM?si=nAIzIRt9H5M5plYh&amp;t=1870\"><img src=\"https://uploads.zulipusercontent.net/c3a925ed18fe1016e197f6abdd6cd3ed6c8f1858/68747470733a2f2f692e7974696d672e636f6d2f76692f36717a576d5f656f55584d2f64656661756c742e6a7067\"></a></div>",
        "id": 397847183,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697891808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657838\">Declan Joseph Maguire</span> <a href=\"#narrow/stream/231634-beginners/topic/Don't.20Get.20Backpassing/near/397835231\">said</a>:</p>\n<blockquote>\n<p>Yeah the fact that the explanations already build on await, a rather abstract concept, makes it extra hard.</p>\n<p>I think I (and others) need a problem whose internal structure is immediately understandable, which is poorly expressed by conventional notation, but which is sorta \"isomorphic\" to the backpassed version. A problem which, when articulated the way anyone instinctively would, is already structured like a backpass statement/chain.</p>\n</blockquote>\n<p>I remember I had an easier time figuring out what backpassing did in an example using <code>Result.try</code> instead of <code>Task.await</code>, precisely because I could read and understand <code>Result.try</code>'s implementation before figuring out how it interacted with backpassing. In contrast, <code>Task.await</code> is necessarily opaque, so explaining backpassing in terms of it requires you to solve for two unknowns at a time.</p>",
        "id": 397849857,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1697894421
    },
    {
        "content": "<p>I also remember realizing at some point that I could use backpassing in to define a function passed to <code>List.map</code>. It's definitely an impractical example, cause if anything it made the code harder to understand, it did kinda help make it click for me that the rest of the body after the backwards arrow really just becomes its own function that, in this case, the <code>List.map</code> can just do whatever it wants with. I'm not sure this specific example will be useful to help teach the concept in general, but I remember thinking it was a noteworthy moment.</p>",
        "id": 397850090,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1697894694
    },
    {
        "content": "<p>Out of curiosity was scala at all a motivation for this feature?</p>",
        "id": 397856126,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697900372
    },
    {
        "content": "<p>I'm assuming not, but worth asking, because it looks <em>very</em> similar to scala's treatment of <code>flatMap</code> and <code>map</code> with <code>for</code> and <code>&lt;-</code></p>",
        "id": 397856200,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697900409
    },
    {
        "content": "<p>Nope</p>",
        "id": 397856447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697900596
    },
    {
        "content": "<p>I don't think any of us working on roc know scala (past very basic interaction with it)</p>",
        "id": 397856536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697900649
    },
    {
        "content": "<p>I do :)</p>",
        "id": 397856545,
        "sender_full_name": "Anton",
        "timestamp": 1697900662
    },
    {
        "content": "<p>I was a professional Scala developer for about 4 months, more than a decade ago <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 397856591,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697900711
    },
    {
        "content": "<p>cats-effect in scala makes heavy use of this with all of it's monads to chain effects together in a very similar way. The only syntactical difference is that you have to start with a<code>for</code> and end with a <code>yield</code>, but in the middle the syntax is nearly identical and uses the same <code>&lt;-</code> and achieves the same niceness of avoiding the pyramid of doom</p>",
        "id": 397856622,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697900740
    },
    {
        "content": "<p>And scala has a bit of extra subtyping magic to make effects that aren't the same, but are compatible be able to work together, so you can chain effects in many different ways.</p>",
        "id": 397856702,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697900790
    },
    {
        "content": "<p>Scala was not a motivation for backpassing at all; it started with <code>do</code> notation as inspiration, but wanting it to be purely syntax sugar</p>",
        "id": 397856704,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697900792
    },
    {
        "content": "<p>I think Scala got it from Haskell too, but I could be wrong!</p>",
        "id": 397856719,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697900814
    },
    {
        "content": "<p>Interesting that you arrived at a very similar looking solution. No idea if it's implemented in the same way</p>",
        "id": 397856723,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697900816
    },
    {
        "content": "<p>Ours is just syntax sugar, so probably not. Just a lambda written different.</p>",
        "id": 397856862,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697900913
    },
    {
        "content": "<p>I'm always afraid to keep giving example of how things are done in other languages in these streams as it seems off-topic</p>",
        "id": 397857034,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697901031
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> probably not a big deal unless the other discussion is live and this kinda cuts it apart. That said, we can always move messages around. At the same time, threads are cheap, so feel free to just make a new one whenever.</p>",
        "id": 397857164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697901128
    },
    {
        "content": "<p>I put it in an offtopic topic</p>",
        "id": 397857214,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697901184
    },
    {
        "content": "<p>Thank you for this thread. It helped me understand backpassing. I'll try to explain how I think about it. Please correct me if I'm wrong.</p>\n<p>Conceptually backpassing is like passing a callback, turned into an assignment operation, as it involves a function that takes a callback. The name on the left side of the arrow is a parameter for the callback. Every line after the one with the <code>&lt;-</code> operator becomes the body of the callback. What’s on the right side of the arrow is a function call, but with last argument omitted. The callback function will be passed as this last argument. The most important thing is that everything that follows the line with the arrow will be evaluated inside the callback! That's why order of backpassing expressions is important (unlike assignments). Essentailly it creates a nesting of closures.</p>\n<p>Let's consider the following.</p>\n<div class=\"codehilite\"><pre><span></span><code>value &lt;- produce input\ntransformed = doSomethingWithThe value\ndoSomethingElseWith transformed\n</code></pre></div>\n\n<p>It is exactly equivalent to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>produce input \\value -&gt;\n    transformed = doSomethingWithThe value\n    doSomethingElseWith transformed\n</code></pre></div>\n\n<p>Here <code>value</code> is the parameter, <code>produce</code> is a named function that takes some <code>input</code> as its first argument and a callback as the second argument. The following two lines with <code>doSomething...</code> are the body of this callback.</p>\n<p><a href=\"/user_uploads/22008/7WmgQo3FdN0nTu7x4bObpOzb/backpassing.png\">backpassing.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/7WmgQo3FdN0nTu7x4bObpOzb/backpassing.png\" title=\"backpassing.png\"><img src=\"/user_uploads/22008/7WmgQo3FdN0nTu7x4bObpOzb/backpassing.png\"></a></div><p>So, like <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  said before, backpassing is just sugar and no magic. The benefits are lack of indentation and more intuitive syntax. I like it!</p>\n<p>Here is <a href=\"https://gitlab.com/tad-lispy/roc-language-playground/-/blob/main/src/backpassing.roc\">an executable example</a> without using tasks and <code>await</code>.</p>",
        "id": 402775394,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700252978
    },
    {
        "content": "<p>Yeah, that's a pretty great explanation</p>",
        "id": 402785767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700258169
    }
]