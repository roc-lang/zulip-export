[
    {
        "content": "<p>I am trying to represent a binary tree in Roc. I am trying to type alias a <code>Node</code>,  but am running into all kinds of issues. </p>\n<p>__Here is what I have so far:__</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>app \"leafsimilar\"\n    packages { pf: \"https://github.com/roc-lang/basic-cli/releases/download/0.7.1/...\" }\n    imports [pf.Stdout]\n    provides [main] to pf\n\n# Type alias for a binary tree node\n# NodeOrNull is a tag which may have a payload which is another node\n# If the NodeOrNull does not have a node payload, the child is considered null\nNode : {val : Num, lhs : NodeOrNull, rhs : NodeOrNull}\n\nboolToStr : Bool -&gt; Str\nboolToStr = \\val -&gt;\n    if val == Bool.true then \"true\"\n    else \"false\"\n\nhasRhs : Node -&gt; Bool\nhasRhs = \\ node -&gt;\n    when node.rhs is\n        NodeOrNull Node child -&gt; Bool.true\n        NodeOrNull Null -&gt; Bool.false\n\nhasLhs : Node -&gt; Bool\nhasLhs = \\ node -&gt;\n    when node.lhs is\n        NodeOrNull Node child -&gt; Bool.true\n        NodeOrNull Null -&gt; Bool.false\n\nroot = {val: 0, lhs: NodeOrNull Null, rhs: NodeOrNull Null}\n\n# root has no children, so hasRhs should return false\nmain = Stdout.line \"\\(boolToStr (hasRhs root))\"\n</code></pre></div>\n<p>__And here are the errors I receive:__</p>\n<div class=\"codehilite\"><pre><span></span><code>── TOO FEW TYPE ARGUMENTS ──\nThe Num opaque expects 1 type argument, but it got 0 instead:\n\n9│  Node : {val : Num, lhs : NodeOrNull, rhs : NodeOrNull}\n                  ^^^\nAre there missing parentheses?\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── UNRECOGNIZED NAME ──\nNothing is named `NodeOrNull` in this scope.\n\n9│  Node : {val : Num, lhs : NodeOrNull, rhs : NodeOrNull}\n                             ^^^^^^^^^^\nDid you mean one of these?\n    Node\n    Result\n    Natural\n    DecodeResult\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── UNRECOGNIZED NAME ──\nNothing is named `NodeOrNull` in this scope.\n\n9│  Node : {val : Num, lhs : NodeOrNull, rhs : NodeOrNull}\n                                               ^^^^^^^^^^\nDid you mean one of these?\n    Node\n    Result\n    Natural\n    DecodeResult\n</code></pre></div>\n<p>I am particularly confused by the error saying that Num expects 1 argument. What argument should <code>Num</code> receive when defining a type alias? I presume the error stating that \"nothing is named NodeOrNull`\" is because this is the incorrect way to include a Tag in a type alias (if its possible at all).</p>\n<p>Can anyone straighten me out on how I am defining a Node? Any pointers on a better way to declare a binary tree Node type would also be great. Thanks!</p>",
        "id": 412037435,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704846555
    },
    {
        "content": "<p>This is a long standing bug that we have with recursive types.</p>",
        "id": 412037501,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704846586
    },
    {
        "content": "<p>Put the full definition inline and it should work.</p>",
        "id": 412037536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704846601
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node : {val : Num, lhs : [Child Node, Null], rhs : [Child Node, Null]}\n</code></pre></div>",
        "id": 412037704,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704846658
    },
    {
        "content": "<p>You can then still separately type alias <code>NodeOrNull: [Child Node, Null]</code></p>",
        "id": 412037784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704846688
    },
    {
        "content": "<p>Oh, also <code>Num</code> alone is not a type an needs a type variable. so actually would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node a : {val : Num a, lhs : [Child Node, Null], rhs : [Child Node, Null]}\n</code></pre></div>\n<p>That or you can pick a concrete number type</p>\n<div class=\"codehilite\"><pre><span></span><code>Node : {val : I64, lhs : [Child Node, Null], rhs : [Child Node, Null]}\n</code></pre></div>",
        "id": 412037957,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704846748
    },
    {
        "content": "<p>Oh, though also, I think you code currently does not define <code>NodeOrNull</code> at all.</p>",
        "id": 412038100,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704846801
    },
    {
        "content": "<p>Ahhh, thank you! That is a huge help. In your code here, can you tell me what the <code>Child</code> word is? I thought that I could use NodeOrNull as a tag, and thus I would not need a pre-existing definition. In your code, is <code>Child</code> a tag, and if so why would this work but NodeOrNull does not. Noob question, but I'm trying to understand the language syntax here.</p>",
        "id": 412038668,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704847052
    },
    {
        "content": "<p>So this is the type definition for <code>Node</code>.</p>\n<p><code>[ Child Node, Null ]</code> is a tagged union with 2 tags: <code>Child</code> and <code>Null</code>. The <code>Child</code> tag contains another <code>Node</code></p>",
        "id": 412039708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704847469
    },
    {
        "content": "<p>Also, example use:</p>\n<div class=\"codehilite\"><pre><span></span><code>hasRhs : Node -&gt; Bool\nhasRhs = \\ node -&gt;\n    when node.rhs is\n       Child _ -&gt; Bool.true\n       Null -&gt; Bool.false\n</code></pre></div>",
        "id": 412039897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704847560
    },
    {
        "content": "<p>Thanks. This makes sense. So is there any work around for defining recursive types right now?</p>\n<p>I updated my code to use the corrected tag union syntax as you described, and as you predicted I am now getting the <code>CYCLIC ALIAS</code> error, which specifies \"Recursion in aliases is only allowed if recursion happens behind a tagged union, at least one variant of which is not recursive.\"  Of course this criteria has been met, since <code>NodeOrNull : [Child Node, Null]</code> is a tag union where the <code>Null</code> tag is not recursive.</p>",
        "id": 412178200,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704904114
    },
    {
        "content": "<p>One sec...definitely should be a work around</p>",
        "id": 412178615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704904242
    },
    {
        "content": "<p>This should work:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node a : [Child {val : a, lhs : Node a, rhs : Node a}, Null]\n</code></pre></div>\n<p>Also, for convenience you can add something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>RootNode a : {val : a, lhs : Node a, rhs : Node a}\n</code></pre></div>\n<p>RootNode is just a Node that is guaranteed to exist.</p>",
        "id": 412180314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704904763
    },
    {
        "content": "<p>I guess you could also make the top one be named <code>NodeOrNull</code> and the bottom be named <code>Node</code></p>",
        "id": 412180462,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704904809
    },
    {
        "content": "<p>That should be very similar to what you had up top</p>",
        "id": 412180507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704904824
    },
    {
        "content": "<p>Thanks Brendan, really appreciate your help here. So just to confirm I'm understanding how your solution avoids the recursion bug at a conceptual level,  it looks like the the tag union containing the recursion must be top-level to the type alias?</p>",
        "id": 412205565,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704914723
    },
    {
        "content": "<p>I think you could nest more recursive types in that type.</p>",
        "id": 412210682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704916874
    },
    {
        "content": "<p>Just the outermost type must be a tag and the entire recursive part of the definition must be inline</p>",
        "id": 412210904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704916958
    },
    {
        "content": "<p>Gotcha. Makes sense.</p>",
        "id": 412212328,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704917562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 412212338,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704917566
    }
]