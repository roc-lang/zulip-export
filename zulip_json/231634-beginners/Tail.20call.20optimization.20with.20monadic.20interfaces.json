[
    {
        "content": "<p>This may not be possible given the lack of currying in Roc, but would it be possible to do TCO when the return value is a monad? I ported over Elm's random library which use a <code>Generator</code> monad, and it's a nice interface but because it works by nesting function calls it doesn't allow for TCO for recursive functions. Is there a way for this to ever be a compiler feature, especially since monads aren't recognised by the compiler? Just curious.</p>",
        "id": 410950264,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704252809
    },
    {
        "content": "<p>You are talking about using an rng in a function. So they become mutually recursive I guess</p>",
        "id": 410954544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704255880
    },
    {
        "content": "<p>I mean it could be an rng function, it could be a caching monad, it could be any kind of <code>a -&gt; (b, a)</code> monad. If I'm using a monad to pass parameters around implicitly it's just annoying that a consequence of that is that I can no longer TCO, especially in a language designed to be friendly and fast. I'm not even sure if languages like Haskell sidestep the issue but it feels like something that should be possible.</p>",
        "id": 410956446,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704257524
    },
    {
        "content": "<p>Maybe via inlining the bind method for your monad, I'm not sure.</p>",
        "id": 410956494,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704257571
    },
    {
        "content": "<p>If the call is hidden behind an intermediate lambda, it’s not really a tail call and probably won’t result in a large stack size unless the RNG is called iteratively without a function that can itself be TCOd</p>",
        "id": 410960981,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1704261312
    },
    {
        "content": "<p>If the call is behind a constructor (like Ok), Roc implements tail recursion modulo cons, which allows TCO even behind constructors.</p>",
        "id": 410961016,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1704261359
    },
    {
        "content": "<p>Sure but if you just substituted a monadic opaque type of the form <code>a -&gt; (v, a)</code> with their structural counterparts, then uncurried all the functions which use said monad, then it is tail call optimized.</p>",
        "id": 410984887,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704275299
    },
    {
        "content": "<p>If we did our own inlining of these one use lambdas, it would mostly fix the issue, correct?</p>",
        "id": 411047249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704301210
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"569850\">@Fletch Canny</span>, can you give a concrete example with some code.</p>",
        "id": 411048926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704301771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Tail.20call.20optimization.20with.20monadic.20interfaces/near/411048926\">said</a>:</p>\n<blockquote>\n<p>Also, <span class=\"user-mention silent\" data-user-id=\"569850\">Fletch Canny</span>, can you give a concrete example with some code.</p>\n</blockquote>\n<p>It's funny, I was trying to replicate some code which would demonstrate this-</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">seed</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Seed</span>\n<span class=\"nv\">seed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">mkSeed</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"nv\">nothingGenerator1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">nothingGenerator1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">nat</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">andThen</span>\n<span class=\"w\">  </span><span class=\"nv\">nothingGenerator1</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">generate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">nothingGenerator1</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nv\">seed</span>\n\n<span class=\"nv\">nothingGenerator2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"> </span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">({},</span><span class=\"w\"> </span><span class=\"kt\">Seed</span><span class=\"p\">)</span>\n<span class=\"nv\">nothingGenerator2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{},</span><span class=\"w\"> </span><span class=\"nv\">s0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">s1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"nv\">s0</span>\n<span class=\"w\">  </span><span class=\"nv\">nothingGenerator2</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">s1</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">nothingGenerator2</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">seed</span><span class=\"p\">)</span><span class=\"nf\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>Where the first expectation should yield a stack overflow (due to lack of tco) and the second one should just hang, but I actually encountered a compiler bug I'd never seen before because of that.</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\n...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;I thought a non-nullable-unwrapped variant for a lambda set was impossible: how\n could such a lambda set be created without a base case?&#39;, crates/compiler/mono/src/layout.rs:1713:61\n</code></pre></div>\n<p>But a version of the code which doesn't yield a compiler bug (The only thing that was causing it was the definition of <code>nothingGenerator1</code>)-</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">nothingGenerator1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">nothingGenerator1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">nat</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">andThen</span>\n<span class=\"w\">    </span><span class=\"nv\">nothingGenerator1</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">  </span><span class=\"kr\">else</span>\n<span class=\"w\">    </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">constant</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>Doesn't even stack overflow.</p>\n<p>Any idea why this wouldn't stack overflow?</p>",
        "id": 411143808,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704355365
    },
    {
        "content": "<p>My guess: It's getting optimized away to an infinite loop that does nothing</p>",
        "id": 411240014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704393078
    },
    {
        "content": "<p>So for these examples, if we do our own inlining of single use lambdas, everything should be tail recursive. I think that will be the general case for these sorts of libraries.</p>\n<p>We definitely want to do our own inlining eventually, this kind of code is an easy case of always inline.</p>",
        "id": 411240310,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704393203
    },
    {
        "content": "<p>Also, just curious, how does currying help with this?</p>",
        "id": 411240830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704393401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Tail.20call.20optimization.20with.20monadic.20interfaces/near/411240830\">said</a>:</p>\n<blockquote>\n<p>Also, just curious, how does currying help with this?</p>\n</blockquote>\n<p>I just figured a curried language would have better optimizations surrounding this type of monadic operation given that the context of the monad is essentially curried. <code>a -&gt; Generator a</code> is <code>a -&gt; Seed -&gt; (a, Seed)</code> which is a curried function.</p>",
        "id": 411460566,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704504043
    }
]