[
    {
        "content": "<p>Should we have a function to check if a float (frac?) is positive or negative infinity i.e. <code>Num.isInfinite : Frac range -&gt; Bool</code>? and while I'm at it <code>Num.isNaN : Frac range -&gt; Bool</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>» (1 / 0)\n\ninf : Float *             # val1\n\n» (-1 / 0)\n\n-inf : Float *            # val2\n</code></pre></div>",
        "id": 351162116,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1681942554
    },
    {
        "content": "<p>I think so yeah!</p>",
        "id": 351163398,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681943247
    },
    {
        "content": "<p>(should be <code>Frac</code>, not <code>Float</code> - I think the repl needs to be updated)</p>",
        "id": 351163412,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681943257
    },
    {
        "content": "<p>That reminds me: for floats, should we have a builtin for distinguishing <code>-0.0</code> and <code>+0.0</code>? It’s probably not a very common use case, and it seems like a lot of languages don’t have it. </p>\n<p>Rust has a few methods that can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">).</span><span class=\"n\">is_sign_negative</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n<span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">).</span><span class=\"n\">is_sign_negative</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span>\n\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">).</span><span class=\"n\">is_sign_positive</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span>\n<span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">).</span><span class=\"n\">is_sign_positive</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">).</span><span class=\"n\">signum</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">1.0</span>\n<span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">).</span><span class=\"n\">signum</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">1.0</span>\n</code></pre></div>\n<p>C has <code>signbit()</code>, which returns <code>-1</code> for <code>-0.0</code> and <code>+1</code> for <code>+0.0</code>.</p>\n<p>It should be possible to tell the difference yourself by checking whether you get positive or negative infinity when dividing by it:</p>\n<div class=\"codehilite\"><pre><span></span><code>isNegativeZero = \\n -&gt; n == 0.0 &amp;&amp; 1.0 / n &lt; 0\n</code></pre></div>",
        "id": 351183348,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1681959426
    },
    {
        "content": "<p>I'd say no by default...if there's specific demand for it later, we can revisit</p>",
        "id": 351302738,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681992123
    },
    {
        "content": "<p>I am working on the gen_dev backend implementation for this, and I'm struggling to find examples in the code for casting a float to an int.<br>\nI have some idea of what the instructions should look like (<a href=\"https://godbolt.org/z/se8EsTGhr\">https://godbolt.org/z/se8EsTGhr</a>), is this the first time this is needed and I need to build the abstraction for it?</p>",
        "id": 355248573,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683055908
    },
    {
        "content": "<p>we should have function to move a float to the stack , and then to read that memory as an integer from the stack</p>",
        "id": 355250963,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683056707
    },
    {
        "content": "<p><code>stack_offset_and_size</code> is probably the magic function</p>",
        "id": 355251086,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683056757
    },
    {
        "content": "<p>hm, I think we'd need more than that, right?</p>",
        "id": 355252031,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683057037
    },
    {
        "content": "<p>like if you have 8 bytes organized as an <code>F64</code>, the integer portion of those bytes will not be laid out the same way as (for example) an <code>I64</code> would be laid out</p>",
        "id": 355252128,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683057066
    },
    {
        "content": "<p>Yeah, we will need the proper functions that do conversion if we don't have them (don't recall at this point).</p>",
        "id": 355253517,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683057526
    },
    {
        "content": "<p>So not just data movement but also type conversion</p>",
        "id": 355253569,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683057543
    },
    {
        "content": "<p>Looks like we have <code>to_float</code>, but I don't see the reverse yet</p>",
        "id": 355253980,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683057676
    },
    {
        "content": "<p>Yeah I think I need to use movss and movsd (for x86) to properly move the bytes between float and int. That first godbolt example used the stack to do that, but maybe we can do it without?</p>",
        "id": 355254508,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683057863
    },
    {
        "content": "<p>Wait, are you trying to get the exact bytes moved or convert to an int?</p>",
        "id": 355254569,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683057892
    },
    {
        "content": "<p>Looking at <code>to_float</code> I don't think I want to convert like it is done there. I need the raw bits in order to bitwise AND it with a constant</p>",
        "id": 355254611,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683057905
    },
    {
        "content": "<p>Oh, then i think we have all the move instructions you might need for that</p>",
        "id": 355254711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683057937
    },
    {
        "content": "<p>...hmmm...actually not quite. We have enough that you can do it if you dump it to the stack and then load it. We don't have the direct movement between general and float regs</p>",
        "id": 355255060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683058058
    },
    {
        "content": "<p>I couldn't find the right one, but maybe I just missed it? There are a few to move between stack and freg, but it should be possible to skip the stack I think.<br>\nHere is a more full-fledged set of instructions I'm looking to generate: <a href=\"https://godbolt.org/z/cf4znYE68\">https://godbolt.org/z/cf4znYE68</a></p>",
        "id": 355255199,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683058101
    },
    {
        "content": "<p>Would be <code>mov_reg64_freg64</code>. You can add it if you want.</p>",
        "id": 355255229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683058113
    },
    {
        "content": "<p>Would be the best answer here</p>",
        "id": 355255272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683058125
    },
    {
        "content": "<p>We just haven't added it yet</p>",
        "id": 355255295,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683058136
    },
    {
        "content": "<p>Alright, I'll try to add it! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 355255362,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683058166
    },
    {
        "content": "<p>I just added a movss/movsd from a pointer into a float register</p>",
        "id": 355255367,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683058167
    },
    {
        "content": "<p>as in, it's on a branch that I'm working on right now</p>",
        "id": 355255397,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683058180
    },
    {
        "content": "<p>because we did not implement that correctly, and <code>LIst.get</code> on a list of floats would just use the last float that the program stored in that register</p>",
        "id": 355255511,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683058211
    },
    {
        "content": "<p>it did not look at the pointer at all, even</p>",
        "id": 355255536,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683058221
    },
    {
        "content": "<p>Oh nice! And it need to be a pointer? I don't fully understand how to control the storage associated with a symbol just yet. I have implemented isNaN already, but I have just been assuming they're already in a register. It seems to work</p>",
        "id": 355255714,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683058292
    },
    {
        "content": "<p>Oh, and what's your workflow to test aarch64 when you're running x86? Do we have guides on how to run the test suites in qemu?</p>",
        "id": 355255919,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683058364
    },
    {
        "content": "<p>I suspect you actually want the <code>movd</code> instruction from that example?</p>",
        "id": 355256280,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683058489
    },
    {
        "content": "<p>that would be a more direct solution, anyway</p>",
        "id": 355256295,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683058496
    },
    {
        "content": "<p>I mostly ignore <code>aarch</code> for the time being, my work is usually on a slightly higher level. when the dev backend is fully functional on x86 linux we can (hopefully) quickly fill in the final translation to assembly</p>",
        "id": 355256448,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683058548
    },
    {
        "content": "<blockquote>\n<p>I have just been assuming they're already in a register</p>\n</blockquote>\n<p>You probably start by calling something like <code>load_to_general_reg</code> or <code>load_to_float_reg</code>. That deals with the storage for you.</p>",
        "id": 355256935,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683058710
    },
    {
        "content": "<p>Oh yes I did do that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 355257369,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683058879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Is.20Infinity.20or.20NaN/near/355256280\">said</a>:</p>\n<blockquote>\n<p>I suspect you actually want the <code>movd</code> instruction from that example?</p>\n</blockquote>\n<p>So I should add an abstraction for it in ASM? I don't think we generate <code>movd</code> <code>movq</code> at the moment</p>",
        "id": 355257537,
        "sender_full_name": "Basile Henry",
        "timestamp": 1683058928
    },
    {
        "content": "<p>yes that needs some custom \"putting the bytes in the right order\"</p>",
        "id": 355258643,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683059312
    }
]