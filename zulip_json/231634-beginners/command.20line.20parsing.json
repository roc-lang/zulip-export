[
    {
        "content": "<p>Hi folks. I'm trying to test out command line parsing from the basic-cli platform, but I'm getting a thread panic. My code and output are here -- <a href=\"https://gist.github.com/drewolson/bef70f973c04e22e4ffe9ec44b9af135\">https://gist.github.com/drewolson/bef70f973c04e22e4ffe9ec44b9af135</a>. What am I doing wrong?</p>",
        "id": 397529265,
        "sender_full_name": "drew",
        "timestamp": 1697729133
    },
    {
        "content": "<p>I don't think its you, if I remember correctly the stuff in the <a href=\"https://www.roc-lang.org/packages/basic-cli/Arg\">arg parser module</a> has some issues.</p>",
        "id": 397534671,
        "sender_full_name": "Erik",
        "timestamp": 1697730973
    },
    {
        "content": "<p>Ahhh yeah <a href=\"https://github.com/roc-lang/basic-cli/issues/90\">here is the issue</a>.</p>",
        "id": 397534928,
        "sender_full_name": "Erik",
        "timestamp": 1697731082
    },
    {
        "content": "<p>Ah, bummer. Thanks!</p>",
        "id": 397535710,
        "sender_full_name": "drew",
        "timestamp": 1697731347
    },
    {
        "content": "<p>i'm curious if folks think this will be fixed before Advent of Code starts. with the new website release and advent of code just around the corner, i'm sure folks will be trying out roc, and command line arg parsing seems like it would be super useful!</p>",
        "id": 403258014,
        "sender_full_name": "drew",
        "timestamp": 1700520300
    },
    {
        "content": "<p>seems like the actual issue is <a href=\"https://github.com/roc-lang/roc/issues/5701\">https://github.com/roc-lang/roc/issues/5701</a></p>",
        "id": 403258062,
        "sender_full_name": "drew",
        "timestamp": 1700520322
    },
    {
        "content": "<blockquote>\n<p>if folks think this will be fixed before Advent of Code starts</p>\n</blockquote>\n<p>Probably not, sadly.</p>",
        "id": 403258727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700520570
    },
    {
        "content": "<p>Ah I see, you're writing a script to fetch AoC puzzles. The website examples include an example of CLI parsing that gets around this issue, but is a bit noisier <a href=\"https://www.roc-lang.org/examples/CommandLineArgs/README.html\">https://www.roc-lang.org/examples/CommandLineArgs/README.html</a></p>",
        "id": 403258818,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700520609
    },
    {
        "content": "<p>It's not even a script to fetch the puzzles, rather just accepting args from the user as to the day of the puzzle and the part to run.</p>",
        "id": 403258929,
        "sender_full_name": "drew",
        "timestamp": 1700520667
    },
    {
        "content": "<p>so that all of my puzzles can be part of the same application. it's how i've done it for haskell and ocaml.</p>",
        "id": 403258950,
        "sender_full_name": "drew",
        "timestamp": 1700520686
    },
    {
        "content": "<p>i suppose i could just have a program per day</p>",
        "id": 403259069,
        "sender_full_name": "drew",
        "timestamp": 1700520743
    },
    {
        "content": "<p>or maybe this is my year of ocaml and next year is my year of roc :)</p>",
        "id": 403259084,
        "sender_full_name": "drew",
        "timestamp": 1700520753
    },
    {
        "content": "<p>Also, you can always directly work with <code>args &lt;- Arg.list |&gt; Task.await</code>. The bug is in the nested lambdas used for handling parsing. For AOC, naive parsing probably is enough with just directly using that list of strings.</p>",
        "id": 403259106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700520766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> fair point. does the nested lambdas issue also become a problem for parser combinator style parsing of the input?</p>",
        "id": 403259158,
        "sender_full_name": "drew",
        "timestamp": 1700520803
    },
    {
        "content": "<p>i feel like all i need to start aoc is some parser combinator library and some arg parsing library. oh, and sum types ;)</p>",
        "id": 403259178,
        "sender_full_name": "drew",
        "timestamp": 1700520820
    },
    {
        "content": "<p>In case it helps anyone, I wrote this poor man's version of the arg parser while I was updating roc-pg to the latest basic-cli the other day: <a href=\"https://github.com/agu-z/roc-pg/blob/72f5390db26527bc3b6067f77ea570f895ff3c0b/sql-cli/src/roc-sql.roc#L191-L278\">https://github.com/agu-z/roc-pg/blob/72f5390db26527bc3b6067f77ea570f895ff3c0b/sql-cli/src/roc-sql.roc#L191-L278</a></p>",
        "id": 403259183,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700520822
    },
    {
        "content": "<p>I think it can affect parser combinator style parsers.</p>",
        "id": 403259271,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700520855
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> got it, so maybe next year for me. i'm super excited about the language</p>",
        "id": 403259304,
        "sender_full_name": "drew",
        "timestamp": 1700520877
    },
    {
        "content": "<blockquote>\n<p>or maybe this is my year of ocaml and next year is my year of roc :)</p>\n</blockquote>\n<p>fair, they are similar languages and I love OCaml</p>\n<blockquote>\n<p>does the nested lambdas also become a problem for parser combinator style parsing of the input?</p>\n</blockquote>\n<p>Last month I worked through some AoC puzzles in Roc and mostly used parser combinators for parsing. You can see my code here <a href=\"https://github.com/mulias/roctoberfest/tree/main/advent_2022\">https://github.com/mulias/roctoberfest/tree/main/advent_2022</a></p>",
        "id": 403259327,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700520888
    },
    {
        "content": "<p>thanks!</p>",
        "id": 403259350,
        "sender_full_name": "drew",
        "timestamp": 1700520901
    },
    {
        "content": "<p>The one type system issue I ran into with parser combinators was a case where I needed a <code>lazy</code> parser to parse recursive data. <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> showed me a workaround, which is here <a href=\"https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_07/main.roc#L158\">https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_07/main.roc#L158</a><br>\nYou need to use <code>buildPrimitiveParser</code> to \"reset\" something with the type system. Sorry I can't be more exact than that, it's definitely a hack to get around a bug.</p>",
        "id": 403259705,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700521089
    },
    {
        "content": "<p>interesting. is <code>lazy</code> effectively a fixed point combinator?</p>",
        "id": 403259849,
        "sender_full_name": "drew",
        "timestamp": 1700521195
    },
    {
        "content": "<p>ah, i see it here, thanks. <a href=\"https://github.com/lukewilliamboswell/roc-parser/blob/46ab6e2a8c13f69601ad516520981331c6b7ce3b/package/Core.roc#L231-L234\">https://github.com/lukewilliamboswell/roc-parser/blob/46ab6e2a8c13f69601ad516520981331c6b7ce3b/package/Core.roc#L231-L234</a></p>",
        "id": 403260289,
        "sender_full_name": "drew",
        "timestamp": 1700521330
    },
    {
        "content": "<p>In general I wouldn't hesitate to use Roc for AoC <strong>if</strong> you're willing to ask for help around here. It's mostly smooth sailing, but every once in a while you run into a road block where it seems like you're doing the right thing and it's not working. Sometimes that's because you are doing the right thing and the compiler has a bug.</p>",
        "id": 403260549,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700521442
    }
]