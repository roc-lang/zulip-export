[
    {
        "content": "<p>Is it possible to define a string type that only contain strings of some format? Such as a RFC3339 timestamp</p>",
        "id": 444991747,
        "sender_full_name": "Albert",
        "timestamp": 1718555040
    },
    {
        "content": "<p>The same question goes to: is it possible to define range types such as only integers &gt; 10</p>",
        "id": 444991826,
        "sender_full_name": "Albert",
        "timestamp": 1718555078
    },
    {
        "content": "<p>Kinda, but indirectly</p>",
        "id": 444991898,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555133
    },
    {
        "content": "<p>You would use an opaque type and force the opaque type constructor to enforce the rules</p>",
        "id": 444991930,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555152
    },
    {
        "content": "<p>Can you give me an example?</p>",
        "id": 444991931,
        "sender_full_name": "Albert",
        "timestamp": 1718555152
    },
    {
        "content": "<p>This is useful when I deal with cryptographic strings that has to follow certain format</p>",
        "id": 444992031,
        "sender_full_name": "Albert",
        "timestamp": 1718555196
    },
    {
        "content": "<p>I only want to validate them once after the IO and use the correct type afterwards</p>",
        "id": 444992092,
        "sender_full_name": "Albert",
        "timestamp": 1718555234
    },
    {
        "content": "<p>A niche use case for sure</p>",
        "id": 444992100,
        "sender_full_name": "Albert",
        "timestamp": 1718555246
    },
    {
        "content": "<p>So for the integer you would make an opaque type</p>\n<div class=\"codehilite\"><pre><span></span><code>AboveTenInt := I64\n</code></pre></div>\n<p>Then you would only expose a constructor that ensures it's valid</p>\n<div class=\"codehilite\"><pre><span></span><code>create: I64 -&gt; Result AboveTenInt [NotAboveTen]\ncreate = \\i -&gt;\n    if i &gt; 10 then\n        Ok (@AboveTenInt i)\n    else\n        Err NotAboveTen\n</code></pre></div>",
        "id": 444992272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555340
    },
    {
        "content": "<p>Then make sure any functions that modify an above ten int also deal with keeping it above ten or returning an error.</p>",
        "id": 444992323,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555372
    },
    {
        "content": "<p>Is <code>create</code> a special function?</p>",
        "id": 444992339,
        "sender_full_name": "Albert",
        "timestamp": 1718555381
    },
    {
        "content": "<p>Not particularly. It just has to be in the same module where <code>AboveTenInt</code> is defined so it can access the wrapper function <code>@AboveTenInt</code>.</p>",
        "id": 444992476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555438
    },
    {
        "content": "<p>So you protect wrapping and unwrapping of opaque types using the module boundary</p>",
        "id": 444992509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555463
    },
    {
        "content": "<p>As long as you have correct functions within the module, nothing outside the module can break the opaque type. They will only be able to modify it by calling those special opaque type functions.</p>",
        "id": 444992554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555499
    },
    {
        "content": "<p>some kind of like public/private functions in a imperative language</p>",
        "id": 444992752,
        "sender_full_name": "Albert",
        "timestamp": 1718555621
    },
    {
        "content": "<p>Essentially</p>",
        "id": 444992763,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555629
    },
    {
        "content": "<p>anything that can produce an AboveTenInt is defined in the module</p>",
        "id": 444992834,
        "sender_full_name": "Albert",
        "timestamp": 1718555649
    },
    {
        "content": "<p>What if I just declare a literal as AboveTenInt outside the module?</p>",
        "id": 444992876,
        "sender_full_name": "Albert",
        "timestamp": 1718555677
    },
    {
        "content": "<p>Would have to go through <code>create</code>. Though you could also make a version that panics instead of returns an error. That would be greater for constants, but dangerous otherwise.</p>\n<p>Long term we want better support for compile time eval that could fold away and unwrap constants (with compile time asserts that they unwrap safely)</p>",
        "id": 444993296,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555900
    },
    {
        "content": "<p>more like Rust macro or Zig comptime?</p>",
        "id": 444994207,
        "sender_full_name": "Albert",
        "timestamp": 1718556508
    },
    {
        "content": "<p>or just a built-in compiler feature?</p>",
        "id": 444994221,
        "sender_full_name": "Albert",
        "timestamp": 1718556518
    },
    {
        "content": "<p>Probably like zig comptime, but less powerful (no metaprogramming via passing around and manipulating types). So really just evaluation of constants and functions that have all inputs know at compile time.</p>",
        "id": 444995311,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718557191
    }
]