[
    {
        "content": "<p>How are libraries going to work that depend on things provided by platforms? Say a library for file IO. You wouldn't want to reimplement it for every platform but there's also no standard interface you can rely on. Afaiu you actually have to import a platform into the lib to use IO primitives right?</p>\n<p>Closely related to this, how do platforms compose? In a decently sized application you'll want many things like e.g. file IO, graphics, maybe an entity component system and more for a game. Does this always have to be provided as a monolith with the composition happening on the rust/zig/c side?</p>",
        "id": 318727891,
        "sender_full_name": "Leander Behr",
        "timestamp": 1672489148
    },
    {
        "content": "<p>Platforms do not compose.</p>",
        "id": 318729073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672489682
    },
    {
        "content": "<p>They require libraries in the host language to compose</p>",
        "id": 318729143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672489696
    },
    {
        "content": "<p>Does the interface feature allow to require things? That could be a way to write libs against an api and have the application provide the required api based on its platform</p>",
        "id": 318729220,
        "sender_full_name": "Leander Behr",
        "timestamp": 1672489729
    },
    {
        "content": "<p>As for a library that depends on a platform. It depends. Generally speaking there are two main options:</p>\n<ol>\n<li>Share types - currently no native way to make sure this is in sync and maybe not always possible due to opaque types. That may or may not change in the future.</li>\n<li>Have mapper functions to go from library types to platform types and effects. Hopefully this will become standardize as better formats are discovered. Then the drawing library can define graphic primitives that map to multiple graphics platforms.</li>\n</ol>",
        "id": 318729698,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672489968
    },
    {
        "content": "<p>Honestly neither of these is necessarily optimal. I expect some sort of change as this becomes more common</p>",
        "id": 318729755,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672489997
    },
    {
        "content": "<p>I guess there is a third option: bundle the library with the platform.</p>",
        "id": 318729984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672490095
    },
    {
        "content": "<p>there are potentially more options in this space with the interpreted effects design, but that's still WIP</p>",
        "id": 318741640,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1672494986
    },
    {
        "content": "<p>I'll write up a design doc for it at some point, but ideas are still percolating plus we don't have a proof of concept platform using it yet - although I'm planning to get back to that next week now that Advent of Code is over!</p>",
        "id": 318745492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1672496762
    },
    {
        "content": "<p>I'm keen to explore this design space using roc-tui if that would help; I would love to share code for effects with cli if possible. I've wondered if it might be possible to have <code>roc glue</code> support interfaces/packages, with the idea to write a host language library which can be shared. </p>\n<blockquote>\n<p>In a decently sized application you'll want many things like e.g. file IO, graphics, maybe an entity component system and more for a game</p>\n</blockquote>\n<p>From previous discussion, I understand the intent is for platforms to naturally evolve around use-cases; and not necessarily general purpose. For example there might be a number of popular game dev platforms evolve which would provide effects and functionality specific to games. These platforms might optimise for a game loop etc. </p>\n<p>Related to this concept is that when you have a more niche use-case then you are encouraged to fork one of these platforms and add the functionality you need. It may be something that many people also need, and then be something that could feedback into the evolution of the platform. Note that with <code>roc glue</code> it should be easy to change the API if needed and re-generate any glue code.</p>",
        "id": 318753687,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1672500821
    },
    {
        "content": "<p>yeah I think the next step regardless is to get effect interpreters working. From there I think we have sufficient primitives to try out some interesting ideas, but they're all predicated on that design actually working in practice, which hasn't been demonstrated yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 318769457,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1672510444
    },
    {
        "content": "<p>any updates here? it feels like a realistic need, but was it asked for to that moment?<br>\nright now, platforms are small, but I imagine it's possible a platform provides bare minimum api, and there are multiple platform-dependent roc modules that implement different frontends.</p>\n<p>upd: looks like it's exactly what module params for!</p>",
        "id": 446961931,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719339632
    }
]