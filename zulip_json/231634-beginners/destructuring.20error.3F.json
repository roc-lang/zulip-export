[
    {
        "content": "<p>I got this weird error message I don't understand:</p>\n<div class=\"codehilite\"><pre><span></span><code>── UNKNOWN OPERATOR ───────────────────────────────────────────────── day2.roc ─\n\nThis looks like an operator, but it&#39;s not one I recognize!\n\n25│      [a, b] = parseLine line\n                ^\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>parseLine = \\line -&gt;\n    parts = Str.graphemes line\n    a = List.get parts 0 |&gt; unwrap\n    b = List.get parts 2 |&gt; unwrap\n    [a, b]\n\ngetLineScore = \\line -&gt;\n    [a, b] = parseLine line\n    me = when a is\n        &quot;A&quot; -&gt; 1\n        &quot;B&quot; -&gt; 2\n        &quot;C&quot; -&gt; 3\n    other = when b is\n        &quot;X&quot; -&gt; 1\n        &quot;Y&quot; -&gt; 2\n        &quot;Z&quot; -&gt; 3\n\n    outcome me other\n</code></pre></div>",
        "id": 345883118,
        "sender_full_name": "itmuckel",
        "timestamp": 1680253246
    },
    {
        "content": "<p>oh that's fun</p>",
        "id": 345883957,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680253508
    },
    {
        "content": "<p>the list pattern is parsed as an expression</p>",
        "id": 345883996,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680253517
    },
    {
        "content": "<p>I don't think we support list destructuring like that?</p>",
        "id": 345884027,
        "sender_full_name": "Anton",
        "timestamp": 1680253525
    },
    {
        "content": "<p>you can use an explicit <code>when</code></p>",
        "id": 345884031,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680253527
    },
    {
        "content": "<p>yeah the pattern is not exhaustive anyway</p>",
        "id": 345884116,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680253548
    },
    {
        "content": "<p>but I'd guess that <code>[..] = someList</code> works</p>",
        "id": 345884147,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680253558
    },
    {
        "content": "<p>which is not useful in any way</p>",
        "id": 345884239,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680253576
    },
    {
        "content": "<p>I'll make an issue for a nicer error message</p>",
        "id": 345884340,
        "sender_full_name": "Anton",
        "timestamp": 1680253612
    },
    {
        "content": "<p>Oh, so I need to do</p>\n<div class=\"codehilite\"><pre><span></span><code>when (parseLine line) is\n    [a, b] -&gt; [a, b]\n    _ -&gt; crash &quot;fail&quot;\n</code></pre></div>\n<p>to get that destructuring? <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 345888847,
        "sender_full_name": "itmuckel",
        "timestamp": 1680254723
    },
    {
        "content": "<p>Yes, for roc it's a key point to minimize runtime errors. So for that reason we should not allow an \"easy to reach for syntax\" that can crash.</p>",
        "id": 345889696,
        "sender_full_name": "Anton",
        "timestamp": 1680254931
    },
    {
        "content": "<p>Reliable apps do not come without sacrifices unfortunately, but I suppose AIs will soon be able to generate most of your error-handling code :p</p>",
        "id": 345890121,
        "sender_full_name": "Anton",
        "timestamp": 1680255034
    },
    {
        "content": "<p>Well, I know it is actually a good thing. :-) In Advent of Code you know it's throwaway code, but in general it is better to force the user to do the right thing, I guess, although rust sometimes drives me mad :-D</p>",
        "id": 345892350,
        "sender_full_name": "itmuckel",
        "timestamp": 1680255562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/destructuring.20error.3F/near/345889696\">said</a>:</p>\n<blockquote>\n<p>Yes, for roc it's a key point to minimize runtime errors. So for that reason we should not allow an \"easy to reach for syntax\" that can crash.</p>\n</blockquote>\n<p>case in point, in languages like python it's very common to accidently raise <code>ValueError: not enough values to unpack</code></p>",
        "id": 345892398,
        "sender_full_name": "dank",
        "timestamp": 1680255575
    },
    {
        "content": "<p>or too many values to unpack, ofc</p>",
        "id": 345892465,
        "sender_full_name": "dank",
        "timestamp": 1680255598
    },
    {
        "content": "<p>Would this work if you returned a tuple instead of a list? Seems like it should, right? I’m pretty sure this would work with a tag</p>",
        "id": 345975546,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1680274410
    }
]