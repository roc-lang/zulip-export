[
    {
        "content": "<p>I'm trying to wrap my head around platforms at the moment, and I roughly get the idea behind the IO handling (the platform handles IO when you want to execute a task). But at the same time, the platform also exposes the <code>main</code> interface to applications (so CLIs have a <code>main</code> which returns an exit code, web servers have different setups, and so on).</p>\n<p>To me these two seem like they sometimes overlap, but many other times, I think I would want the IO primitives being separated from the application interface.</p>\n<p>For example, the <a href=\"#narrow/stream/304902-show-and-tell/topic/Kingfisher.20Webplatform\">Kingfisher platform</a> exposes both a particular <code>main</code> interface, while also handling network requests under the hood. This is intriguing, but I also have a feeling that this moves a lot of code into the platform, which could have been written in Roc. Essentially, the platform contains a bunch of code not related to handling IO, and such code could have benefitted from being written in Roc. But because it must live in the platform, it can't.</p>\n<p>Another example would be if we said that, hypothetically, Elm was recreated 1-to-1 as a Roc platform. Say that I write a nice web app using that, and I figure I want to turn it into a desktop app. Now there might exist an Electron platform I could switch to, or a Tauri, Servo, or whatever platform that can render HTML. But wouldn't all those platforms essentially need to re-implement the framework (i.e. The Elm Architecture) on top of also handling IO, such that they can expose the same interface to my application?</p>\n<p>I guess the underlying question is: can these frameworks be created independently of the platform? It seems to me that the platform is what dictates what IO is available across the entire application, so any framework that wants to control IO in some way must be written into the platform.</p>\n<p>Am I understanding that right? And if so, has there been any discussion on breaking those two apart in some way?</p>",
        "id": 439418746,
        "sender_full_name": "Kasper Møller Andersen",
        "timestamp": 1716104889
    },
    {
        "content": "<p>I think you will find the Module Params design an interesting  read <a href=\"https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?usp=drivesdk\">https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?usp=drivesdk</a></p>",
        "id": 439465319,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1716151324
    },
    {
        "content": "<p>Agus has been working on that and it sounds like it's getting close. So hopefully we can start exploring the new design for platform independent modules etc.</p>",
        "id": 439465370,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1716151375
    },
    {
        "content": "<p>This, and moving Task into the builtins, will enable a lot more to be moved into packages and the platforms can provide lower level primitives.</p>",
        "id": 439465460,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1716151455
    },
    {
        "content": "<p>Gosh, that sure sounds like one sweet proposal! That answered all my questions, raised new ones, and then answered those to an awesome degree <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 439468667,
        "sender_full_name": "Kasper Møller Andersen",
        "timestamp": 1716154717
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 439468677,
        "sender_full_name": "Kasper Møller Andersen",
        "timestamp": 1716154734
    }
]