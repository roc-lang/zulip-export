[
    {
        "content": "<p>hi is there any  equivalent of c++  template in Roc <br>\nI am not saying it should be but just asking </p>\n<p>specifically is there a way to  do this :</p>\n<div class=\"codehilite\"><pre><span></span><code>template  &lt;class A&gt;\nf(A a  )\n{\n// do something  with a in generic  way\n}\n</code></pre></div>",
        "id": 407112714,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702246344
    },
    {
        "content": "<p>No, there is no template system.</p>",
        "id": 407112869,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702246525
    },
    {
        "content": "<p>btw. templates are the reason among many others why I consider C++ piece of garbage, so lack  of this ability although annoying at times may prove to be correct  design  choice, but indeed  sometimes I am lacking  something : )</p>",
        "id": 407112958,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702246620
    },
    {
        "content": "<p>But you can have generic types. For example <code>List a</code> means a list of any type.</p>",
        "id": 407112977,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702246643
    },
    {
        "content": "<p>how  to  use  that in  function  definition</p>",
        "id": 407112993,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702246673
    },
    {
        "content": "<p>Can you say more about what you want to do?</p>",
        "id": 407113044,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702246701
    },
    {
        "content": "<p>let say  I want to create  generic  function  to add two  numbers how  to do  that ?</p>",
        "id": 407113074,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702246764
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>add : Num a, Num a -&gt; Num a\nadd = \\a, b -&gt; a+b\n</code></pre></div>",
        "id": 407113187,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702246903
    },
    {
        "content": "<p>You can only add numbers so it can't work on any type</p>",
        "id": 407113256,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702246956
    },
    {
        "content": "<p>will it work if I pass Float  number to  it ?</p>",
        "id": 407113262,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702246967
    },
    {
        "content": "<p>Yes</p>",
        "id": 407113267,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702246972
    },
    {
        "content": "<p>Num a  stands for  something  or it is just tag as  any in reality ?</p>",
        "id": 407113307,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247034
    },
    {
        "content": "<p>I mean  what to  do  for below function to be equivalent <br>\nadd : Numm a, Numm a -&gt; Numm a<br>\nadd = \\a, b -&gt; a+b</p>",
        "id": 407113390,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247098
    },
    {
        "content": "<p>Doesn't work. Numbers are special.</p>",
        "id": 407113412,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247131
    },
    {
        "content": "<p>and I can't force  Numm  to  act  as Num ?</p>",
        "id": 407113439,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247161
    },
    {
        "content": "<p>No</p>",
        "id": 407113479,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247167
    },
    {
        "content": "<p>ok</p>",
        "id": 407113491,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247180
    },
    {
        "content": "<p>It is built in</p>",
        "id": 407113499,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247189
    },
    {
        "content": "<p>what is the role  fo  this  \"a\"  added  after  Num isn't  Num just enough if it is build in ?</p>",
        "id": 407113562,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247248
    },
    {
        "content": "<p>We started with the most complicated example unfortunately!</p>",
        "id": 407113626,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247290
    },
    {
        "content": "<p>The <code>a</code> is a type variable. It's similar to the typename in the C++ template</p>",
        "id": 407113649,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247328
    },
    {
        "content": "<p>but Num specifies some restriction  on this a ??</p>",
        "id": 407113683,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247379
    },
    {
        "content": "<p>Yes Roc has builtin number types and all of them are specializations of the generic type<code>Num a</code>.</p>",
        "id": 407113796,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247485
    },
    {
        "content": "<p>Numbers are the most complicated, let's talk about lists first for a minute</p>",
        "id": 407113808,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247509
    },
    {
        "content": "<p>So <code>List a</code> means a list of anything<br>\n<code>List User</code> is a list of some type called <code>User</code><br>\n<code>List U8</code> is a list of unsigned 8 bit integers</p>",
        "id": 407113869,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247549
    },
    {
        "content": "<p>So <code>List a</code> is a generic type and <code>List U8</code> is a specialized or concrete type.</p>",
        "id": 407113893,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247584
    },
    {
        "content": "<p>That is how generic types work</p>",
        "id": 407113900,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247599
    },
    {
        "content": "<p>can I put List  b  or  \"a\" is  keyword also ?</p>",
        "id": 407113955,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247644
    },
    {
        "content": "<p>Yes</p>",
        "id": 407113960,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247648
    },
    {
        "content": "<p><code>List b</code> or <code>List whatever</code></p>",
        "id": 407113965,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247659
    },
    {
        "content": "<p>But you can't change the <code>List</code> and you can't change the <code>Num</code></p>",
        "id": 407113974,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247679
    },
    {
        "content": "<p>For numbers, <code>U8</code> is a type alias for some <code>Num a</code> where I can't remember what the <code>a</code> is</p>",
        "id": 407114032,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247747
    },
    {
        "content": "<p>Btw  different  topic ,I have  this problem   something  is returning <br>\n-&gt; Task {}  *</p>\n<p>but I somehow  was not  able to return<br>\nTask.err  \"something\"</p>",
        "id": 407114033,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247751
    },
    {
        "content": "<p>It's time for bed where I live so maybe someone else can answer that one, and I'd suggest making a new topic</p>",
        "id": 407114094,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702247794
    },
    {
        "content": "<p>ok thx  anyway</p>",
        "id": 407114131,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702247832
    },
    {
        "content": "<p>If a function is returning <code>Task {} *</code>, the <code>*</code> means the error part of the <code>Task</code> is empty. With <code>-&gt; Task {} *</code> you could only return <code>Task.ok {}</code> or call a function like <code>Stdout.line \"done\"</code>, which <a href=\"https://www.roc-lang.org/packages/basic-cli/0.7.0/Stdout#line\">also returns</a> <code>Task {} *</code>.</p>\n<p>If you want to return <code>Task.err \"something\"</code> the signature would need to be <code>-&gt; Task &lt;whatever&gt; Str</code>. <code>&lt;whatever&gt;</code> depends on what you want the function to return on success.</p>",
        "id": 407212462,
        "sender_full_name": "Anton",
        "timestamp": 1702291174
    },
    {
        "content": "<p>thx  for  explanation but  what  *  means ?  I was  thinking  it means  anything just  \"*\" coincides with  anything  in my  mind : )</p>",
        "id": 407219456,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702293628
    },
    {
        "content": "<p>It used to confuse me too :)<br>\nWe have a brief section on it <a href=\"https://www.roc-lang.org/tutorial#wildcard-type\">in the tutorial</a>.<br>\nThe <code>*</code> means compatible with any type.<br>\nFor <code>List.len</code> we have the signature <code>len : List * -&gt; Nat</code> because we can pass it a list of <code>Str</code>, <code>U64</code>, ... . To calculate the number of elements in the list, it does not actually matter what an element is.</p>\n<p>When you return something with a wildcard type, it may not be immediately clear what that means. Say we have <code>wildcardList : List *</code>, what could we fill in for <code>wildcardList = ...</code>? The only value that can represent a list of any type is the empty list. So the only option is <code>wildcardList = []</code>.</p>\n<p>With <code>Task</code> it's very similar. If we have the type <code>Task Str *</code>, we have <code>Str</code> for the success value and <code>*</code> for the error value. Similar to <code>List *</code>, the only error type that could satisfy  <code>*</code> is the empty error.</p>",
        "id": 407225577,
        "sender_full_name": "Anton",
        "timestamp": 1702296056
    },
    {
        "content": "<p>What’s the reason for using Task a * rather than Task a []?</p>",
        "id": 407239268,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1702300953
    },
    {
        "content": "<p>Excellent question! I don't know, <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>?</p>",
        "id": 407240379,
        "sender_full_name": "Anton",
        "timestamp": 1702301402
    },
    {
        "content": "<p>There's still some details about Roc's type system that I'm hazy on, but wouldn't the difference be that you can't use <code>Task a *</code> when chaining Tasks with a tagged union error type?<br>\n<code>Task.await</code> has a type of <code>Task a b, (a -&gt; Task c b) -&gt; Task c b</code>, and if I use <code>Task a []</code> for <code>Task a b</code> and <code>Task c [A, B, C]</code> for <code>Task c b</code>, the type system can unify <code>[]</code> and<code>[A, B, C]</code>. But if the error type were say, <code>Task a {}</code> then it couldn't unify those types. Since <code>Task a *</code> my be <code>Task a {}</code> that means we can't necessarily unify those types and thus we would get a type error.</p>",
        "id": 407268105,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1702309677
    },
    {
        "content": "<p>Give return types are open tags by default now, I believe that is correct.</p>",
        "id": 407270201,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702310382
    },
    {
        "content": "<p>In the old days, that would not be the case</p>",
        "id": 407270239,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702310399
    },
    {
        "content": "<p>That said, even with a closed tag they are slightly different. <code>*</code> has no constructable error case. It suggests that someone has handled all errors and made them into successes.</p>\n<p><del><code>[]</code> has an error case with no info in it. So it basically means something failed but we have dropped all information about the failure</del> NVM, tired morning brain. Also unconstructable if it is a closed union.</p>",
        "id": 407270990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702310581
    },
    {
        "content": "<p>I don’t see how [] is an error case with no info given that it is impossible to construct an element of []</p>",
        "id": 407273866,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1702311395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611722\">Isaac Van Doren</span> <a href=\"#narrow/stream/231634-beginners/topic/templates.3F/near/407239268\">said</a>:</p>\n<blockquote>\n<p>What’s the reason for using Task a * rather than Task a []?</p>\n</blockquote>\n<p>the answer varies depending on how it's being used - where are you seeing the type in question? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 407276562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702312251
    },
    {
        "content": "<blockquote>\n<p>I don’t see how [] is an error case with no info given that it is impossible to construct an element of []</p>\n</blockquote>\n<p>Ah wait I forgot that [] is open</p>",
        "id": 407277250,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1702312451
    },
    {
        "content": "<p>The first one that comes to mind is Stdout.line</p>",
        "id": 407277314,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1702312468
    },
    {
        "content": "<p>So Task {} *</p>",
        "id": 407277385,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1702312495
    },
    {
        "content": "<p>Yeah sorry, I think <code>Task {} []</code> and <code>Task {} *</code> are equivalent if <code>[]</code> is a closed union.</p>",
        "id": 407285123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702314899
    },
    {
        "content": "<p>But given roc makes all returned unions into open unions, they quickly become not equivalent.</p>",
        "id": 407285211,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702314927
    },
    {
        "content": "<p>well also even an open <code>[]</code> is more restrictive than <code>*</code> because <code>[]</code> says \"this must be some sort of tag union\"</p>",
        "id": 407285372,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702314978
    },
    {
        "content": "<p>and you can have errors that aren't tag unions</p>",
        "id": 407285395,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702314985
    },
    {
        "content": "<p>Definitely problematic to send an opinion union version of <code>Task {} []</code> back to a platform. It would not have a know layout when generating the platform glue</p>",
        "id": 407285486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702315018
    },
    {
        "content": "<p>so if <code>Stdout.line</code> returned a <code>Task {} []</code> then you couldn't use it with a <code>Task {} Str</code>, for example (e.g. if someone used <code>Task.mapErr</code> to turn an error into a string)</p>",
        "id": 407285522,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702315029
    },
    {
        "content": "<p>ok I can't intellectually follow the  discussion : ) but  I gather  this is the reason why  Task  {} * is used ?</p>\n<div class=\"codehilite\"><pre><span></span><code>That said, even with a closed tag they are slightly different. * has no constructable error case. It suggests that someone has handled all errors and made them into successes.\n</code></pre></div>\n<p>btw what {} stands  for  here, why specifically this value?</p>",
        "id": 407302776,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702321522
    },
    {
        "content": "<p><code>{}</code> is just an empty record.</p>",
        "id": 407304416,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702322200
    },
    {
        "content": "<p>It is common used for kinda a unit type. A concrete type that compiles to nothing.</p>",
        "id": 407304467,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702322225
    },
    {
        "content": "<blockquote>\n<p>and you can have errors that aren't tag unions</p>\n</blockquote>\n<p>Aren't there no possible errors for a <code>Task {} *</code>?</p>\n<p>Regardless, isn't there not much you can do with errors if you don't know what type they are?</p>",
        "id": 407371028,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1702351721
    },
    {
        "content": "<blockquote>\n<p>Aren't there no possible errors for a Task {} *?</p>\n</blockquote>\n<p>This is were it gets confusing depend on how things are worded. Really easy to say something that is easily misinterpreted from what was meant. You are correct that there are no possible constructable errors that match the type <code>Task {} *</code>.</p>\n<p>Richard meant that <code>Task {} *</code> will unify with any error type. That means I can do:<br>\nNote: <code>Stdout.line</code> is a <code>Task {} *</code>. I has a <code>*</code> error case but merges to a <code>Str</code> error case here just fine.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nx\">errStr</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">strErrTask</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">onErr</span>\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"error was: \\(errStr)\"</span>\n\n<span class=\"nv\">strErrTask</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Some text\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n<span class=\"w\">    </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"s\">\"This is a string err\"</span>\n</code></pre></div>\n<p>If I were to redefine <code>Stdout.line</code> to be <code>Task {} []</code>, I would get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ───────────────────────────────────── examples/helloWorld.roc ─\n\nThis 2nd argument to |&gt; has an unexpected type:\n\n11│&gt;      _ &lt;- Stdout.line &quot;Some text&quot; |&gt; Task.await\n12│&gt;      Task.err &quot;This is a string err&quot;\n\nThe argument is an anonymous function of type:\n\n    {} -&gt; Task * Str\n\nBut |&gt; needs its 2nd argument to be:\n\n    {} -&gt; Task * []\n</code></pre></div>",
        "id": 407372882,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702352422
    },
    {
        "content": "<p><code>Task {} []</code> can only unify with other errors that are tags.</p>",
        "id": 407372984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702352463
    },
    {
        "content": "<p>Aha! That makes sense. Thanks for the detailed explanation!</p>",
        "id": 407383900,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1702356721
    }
]