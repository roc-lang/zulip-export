[
    {
        "content": "<p>So whenever a data structure has a ref count of one and is updated Roc can mutate the underlying representation right? However what happens if the ref count is greater than one? Does it degrade to O(n) copy-on-update? And if so does Roc not implement persistent collections?</p>",
        "id": 412698542,
        "sender_full_name": "skykanin",
        "timestamp": 1705143692
    },
    {
        "content": "<p>correct on all counts!</p>",
        "id": 412704203,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705146968
    },
    {
        "content": "<p>we have a hypothesis that in practice refcounts will tend to be 1 when updating, so persistent collections would be a net performance loss in practice</p>",
        "id": 412704232,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705147007
    },
    {
        "content": "<p>the only way to test that hypothesis is to try it out, and so far we haven't found demand in practice for persistent collections yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412704251,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705147027
    },
    {
        "content": "<p>Thanks! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 412704358,
        "sender_full_name": "skykanin",
        "timestamp": 1705147113
    },
    {
        "content": "<p>On second thought it seems that even trivial code will break this assumption. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">example</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Int</span>\n<span class=\"nf\">example</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">  </span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">updated</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">updated</span>\n</code></pre></div>\n<p>Since <code>original</code> is being reused we can't mutate it in <code>updated</code> right? So the <code>List.append</code> call will need to copy on update if I understand correctly.</p>",
        "id": 412706114,
        "sender_full_name": "skykanin",
        "timestamp": 1705148564
    },
    {
        "content": "<p>The assumption is only that the refcount will <em>tend</em> to be 1, not that it will <em>always</em> be 1!</p>",
        "id": 412708402,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705150768
    },
    {
        "content": "<p>We just expect it to be very common.</p>",
        "id": 412708422,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705150799
    },
    {
        "content": "<p>Yes it is very easy to construct examples with refcounts more than 1. The assumption is that those are less common in practice. Because once you create a clone, the refcount of the clone is 1.</p>",
        "id": 412708503,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705150844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/231634-beginners/topic/Question.20about.20oppurtunistic.20mutation.20and.20immutability/near/412708503\">said</a>:</p>\n<blockquote>\n<p>Yes it is very easy to construct examples with refcounts more than 1. The assumption is that those are less common in practice. Because once you create a clone, the refcount of the clone is 1.</p>\n</blockquote>\n<p>so if you're updating a data structure and keeping the intermediate values around half of the updates will be O(n) cloning and half will be constant time in-place mutations</p>",
        "id": 412716132,
        "sender_full_name": "skykanin",
        "timestamp": 1705158110
    },
    {
        "content": "<p>How often do you mutate a data structure and still need the old version? That should be pretty rare.</p>\n<p>If that is the use case, you probably should be thinking about your exact data structure anyway.</p>\n<p>Imagine your code example above in any standard imperative language, you would have to write it as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">updated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">updated</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If you didn't <code>.clone()</code> and instead wrote this, it would give different results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"n\">original</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 412726489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705166522
    }
]