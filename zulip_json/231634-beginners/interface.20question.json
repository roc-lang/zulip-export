[
    {
        "content": "<p>Could I pass Types  defined  in  interface  to be seen in  other  files ? What  is the  syntax  for  that?</p>",
        "id": 407266641,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702309224
    },
    {
        "content": "<p>Hi! Yes you can do that!<br>\nIn your interface file:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">SomeInterface</span>\n<span class=\"w\">  </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">SomeType</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"kt\">SomeType</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">SomeTag</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>in the file you wish to use it you just need to specify in the <code>imports</code> section what you want to use</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"nc\">s</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">SomeInterface</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"kt\">SomeType</span><span class=\"p\">}]</span>\n<span class=\"nf\">...</span>\n<span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">SomeType</span>\n<span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">SomeTag</span>\n</code></pre></div>\n<p>Although you can qualify the type when you use it instead</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"nc\">s</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">SomeInterface</span><span class=\"p\">]</span>\n<span class=\"nf\">...</span>\n<span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">SomeInterface</span><span class=\"nf\">.</span><span class=\"kt\">SomeType</span>\n<span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">SomeTag</span>\n</code></pre></div>\n<p>You can also hide the implementation using opaque types, which you can read more about in the docs-<br>\n<a href=\"https://www.roc-lang.org/tutorial#opaque-types\">https://www.roc-lang.org/tutorial#opaque-types</a></p>\n<p>hope that helped!</p>",
        "id": 407269145,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1702310037
    },
    {
        "content": "<p>btw.  could  you  produce  example  of  that </p>\n<div class=\"codehilite\"><pre><span></span><code>You can prevent that data needs to be checked multiple times. For example, you can create an opaque NonEmptyList from a List after you&#39;ve checked it. Now all functions that you pass this NonEmptyList to do not need to handle the empty list case.\n</code></pre></div>\n<p>I don't get  it</p>",
        "id": 407304242,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702322130
    },
    {
        "content": "<p>It's about implementation hiding- <br>\nif you've ever used an OO language like Java / C# you would use an opaque type for the same reason you use private variables. <br>\nIn Elm it would be like exposing <code>SomeType</code> instead of <code>SomeType(..)</code>. </p>\n<p>The point of an opaque type is that you can only examine it's internals within the file that created it. So if I want to do something with a non-empty list value, I could create an opaque type which can only be interfaced with in safe ways by guaranteeing that the list is never empty, even though a NonEmptyList type would be internally represented as a List.</p>",
        "id": 407376807,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1702353892
    },
    {
        "content": "<p>Elm has a <a href=\"https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty\">nonempty list package</a> that you could copy in Roc. With a package like that you can use the <a href=\"https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty#fromList\"><code>fromList</code></a> function at the start to check if your list is empty. If it's not, you now have a <code>NonEmpty</code> (=list). You can now get for example <a href=\"https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty#last\">the last element</a>, and that function is guaranteed to return an element, so you no longer need to deal with a <code>Result</code> type for the empty list case.</p>",
        "id": 407451715,
        "sender_full_name": "Anton",
        "timestamp": 1702379550
    },
    {
        "content": "<p>I wonder if there's a way to generalise that pattern? There's lots of functions that can error purely because of some degenerate case, where it would be more useful to rule out from the start rather than check at every stage.</p>",
        "id": 407452914,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379985
    },
    {
        "content": "<p>Dependent types is one solution, but that's also complex to implement.</p>",
        "id": 407453415,
        "sender_full_name": "Anton",
        "timestamp": 1702380157
    },
    {
        "content": "<p>I think some long conversation has been had about that, so I knew that was a possibility. If I remember, the answer was a resounding \"maybe, possibly, someday, if a bunch of problems it'd cause could be solved, but not now\". I was just curious if there were some trick that wouldn't require altering the type system.</p>",
        "id": 407454799,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702380660
    },
    {
        "content": "<p>there's a trick involving a type variable trick similar to what we do with <code>Num</code></p>",
        "id": 407460220,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702382583
    },
    {
        "content": "<p>e.g. something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"n\">emptiness</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"o\">...</span>\n\n<span class=\"kt\">PotentiallyEmptyList</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">BaseList</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">CouldBeEmpty</span><span class=\"p\">]</span>\n<span class=\"kt\">NonEmptyList</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"n\">emptiness</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"n\">emptiness</span>\n</code></pre></div>\n<p>but I don't like what that would do to the ergonomics of lists <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 407460549,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702382716
    },
    {
        "content": "<p>Maybe it'd be worth figuring out if there'd be a way to make that ergonomic in the future, because it'd certainly be useful. But that sounds like a future-if-ever-problem.</p>",
        "id": 407465112,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702384338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/interface.20question/near/407451715\">said</a>:</p>\n<blockquote>\n<p>Elm has a <a href=\"https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty\">nonempty list package</a> that you could copy in Roc. With a package like that you can use the <a href=\"https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty#fromList\"><code>fromList</code></a> function at the start to check if your list is empty. If it's not, you now have a <code>NonEmpty</code> (=list). You can now get for example <a href=\"https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty#last\">the last element</a>, and that function is guaranteed to return an element, so you no longer need to deal with a <code>Result</code> type for the empty list case.</p>\n</blockquote>\n<p>I started implementing a type like this. Still a work in progress though: <a href=\"https://github.com/Subtlesplendor/roc-data/blob/main/package/NonEmpty.roc\">https://github.com/Subtlesplendor/roc-data/blob/main/package/NonEmpty.roc</a></p>",
        "id": 407465969,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1702384601
    }
]