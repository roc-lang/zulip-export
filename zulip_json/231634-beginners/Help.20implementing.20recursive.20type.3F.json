[
    {
        "content": "<p>Hey ya'll, I'm trying to implement a recursive type, and seem to have hit a brick wall. The error message for recursive types says:</p>\n<blockquote>\n<p>Recursion in aliases is only allowed if recursion happens<br>\nbehind a tagged union, at least one variant of which is not<br>\nrecursive.</p>\n</blockquote>\n<p>I believe my recursive type meets these requirements - The recursion is within a tag union, and there is a variant in the union which is terminating. Is the problem because the tag union in my recursive type is wrapped in a record (or List), but must actually be a pure tag union?</p>",
        "id": 497704793,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738685745
    },
    {
        "content": "<p>I believe this should be adequate to show my type structure:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Expression</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"ss\">subexpression</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Subexpression</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"ss\">expression</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">        </span><span class=\"no\">Expression</span><span class=\"w\"> </span><span class=\"no\">Expression</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># recursive</span>\n<span class=\"w\">        </span><span class=\"no\">NoExpression</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">]</span>\n<span class=\"p\">}</span>\n<span class=\"no\">Subexpression</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"no\">Match</span><span class=\"w\"> </span><span class=\"no\">Match</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">Group</span><span class=\"w\"> </span><span class=\"no\">Group</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># recursive</span>\n<span class=\"w\">    </span><span class=\"no\">AnchorWordBoundary</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">AnchorNonWordBoundary</span><span class=\"p\">,</span>\n<span class=\"o\">]</span>\n<span class=\"ss\">Group</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"ss\">modifier</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">Capturing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">NonCapturing</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"ss\">expression</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Expression</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># recursive</span>\n<span class=\"w\">    </span><span class=\"ss\">quantifier</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Quantifier</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 497704838,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738685760
    },
    {
        "content": "<p>For context, I am trying to express the syntax tree for the following grammar:</p>\n<div class=\"codehilite\" data-code-language=\"EBNF\"><pre><span></span><code><span class=\"k\">Expression </span><span class=\"err\">::</span><span class=\"o\">=</span> <span class=\"k\">Subexpression </span><span class=\"p\">(</span><span class=\"s2\">\"|\"</span> <span class=\"k\">Expression</span><span class=\"p\">)</span><span class=\"ni\">?</span>\n\n<span class=\"ni\">Subexpression ::= SubexpressionItem+</span>\n<span class=\"ni\">SubexpressionItem</span>\n<span class=\"ni\">    ::= Match</span>\n<span class=\"ni\">      | Group</span>\n<span class=\"ni\">      | Anchor</span>\n\n<span class=\"ni\">Group ::= \"(\" GroupNonCapturingModifier?</span> <span class=\"k\">Expression </span><span class=\"s2\">\")\"</span> <span class=\"k\">Quantifier</span><span class=\"err\">?</span>\n</code></pre></div>",
        "id": 497705592,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738685976
    },
    {
        "content": "<p>Any suggestions on how I could massage this grammar into workable Roc types?</p>",
        "id": 497707045,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738686425
    },
    {
        "content": "<p>In the current roc compiler, recursive types must be tags and they must be defined in one definition.</p>",
        "id": 497708922,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738686954
    },
    {
        "content": "<p>I don't think we ever fixed the one definition restriction</p>",
        "id": 497709057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738686981
    },
    {
        "content": "<p>Ah... so probably the fact that its not one definition is what is catching me up here...</p>",
        "id": 497709104,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738686992
    },
    {
        "content": "<p>Yeah</p>",
        "id": 497709144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738687003
    },
    {
        "content": "<p>And I think you can use <code>as</code> to name subexpression in the single definition if necessary</p>",
        "id": 497709272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738687037
    },
    {
        "content": "<p>Hmm.. so these are part of a greater type called <code>Regex</code>. I tried to inline everything inside Regex, and use <code>as</code>, but <code>as</code> seems to throw an error.</p>",
        "id": 497710917,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738687449
    },
    {
        "content": "<p>Seems like <code>as</code> doesn't work in this context.</p>",
        "id": 497712401,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738687863
    },
    {
        "content": "<p>I think I'm going to have to go back to the drawing board on how to implement this AST. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497712570,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738687920
    },
    {
        "content": "<p>I swear we have a way to name inline....thought it was wrapping in parens and using as.....hmmm</p>",
        "id": 497713677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738688226
    },
    {
        "content": "<p>Hmmm.. yeah, I can't seem to find a way to get the as keyword to work inline.</p>",
        "id": 497731245,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738693932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Help.20implementing.20recursive.20type.3F/near/497709057\">said</a>:</p>\n<blockquote>\n<p>I don't think we ever fixed the one definition restriction</p>\n</blockquote>\n<p>Does this imply it is a goal to permit recursion across multiple definitions? <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span><span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 497768338,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738708011
    },
    {
        "content": "<p>I don't know what the new plan is/how it works. I think the new plan is only recursion through nominal types.</p>",
        "id": 497774030,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710497
    },
    {
        "content": "<p>But yeah, should be multiple definition</p>",
        "id": 497774042,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710507
    },
    {
        "content": "<p>yeah that's the plan!</p>",
        "id": 497774176,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738710575
    },
    {
        "content": "<p>introduce nominal (\"custom\") tag unions, allow them to be recursive (including mutually recursive if desired) and disallow recursion in structural tag unions</p>",
        "id": 497774297,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738710628
    },
    {
        "content": "<p>I forget where we talked about why that change was necessary, but it was important <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497774332,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738710646
    },
    {
        "content": "<p>This sounds promising! Will be great to have more flexible recursion support.</p>",
        "id": 497919067,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738769028
    },
    {
        "content": "<p>Couple of questions - by definition, a nominal tag union would be a closed union, correct? And furthermore, since it is nominal, not structural, then even if NominalA was a subset of NominalB, NominalA could not be given to something which needed NominalB, correct?</p>",
        "id": 497919873,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738769248
    },
    {
        "content": "<p>they're closed and so can't be unioned together</p>",
        "id": 497931260,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738772136
    },
    {
        "content": "<p>they're exactly like algebraic data types in other languages (or enums in Rust)</p>",
        "id": 497931315,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738772156
    },
    {
        "content": "<p>just using the name \"custom tag union\" since that fits our terminology <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497931434,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738772182
    },
    {
        "content": "<p>Okay, that's what I figured.</p>",
        "id": 497939062,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738774353
    },
    {
        "content": "<p>This now tops the list of features I'm looking forward to in Roc!</p>",
        "id": 497939180,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738774386
    }
]