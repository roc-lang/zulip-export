[
    {
        "content": "<p>Can a Roc package also include platform code to share implementation details?</p>\n<p>I was thinking through how to share code between platforms easily. I would like to use Rust code from cli in the tui platform I have been messing around with. Is there a good way to do this? This had me thinking, how will packages share side-effects across platforms in the future? Can we/should we use <code>roc glue</code> to assist with building a Rust crate which provides package specific implementation details? </p>\n<p>This also feels similar to a recent video I watched with the development of WASM. Is there a Roc equivalent to the <a href=\"https://www.youtube.com/watch?v=DkpNqcfuPOM\">component model</a> similar to that being developed for WASM? Does the current Roc platform/package specific integration concept align with this model of software development?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"DkpNqcfuPOM\" href=\"https://www.youtube.com/watch?v=DkpNqcfuPOM\"><img src=\"https://uploads.zulipusercontent.net/556b2d0b46a1b65ea55ca8b95cb294baa0679c52/68747470733a2f2f692e7974696d672e636f6d2f76692f446b704e71636675504f4d2f64656661756c742e6a7067\"></a></div><p>For example; imagine I want to write a library for generating markdown documents. It has a simple API maybe something like this;</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">Markdown</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">writeToFile</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Heading1</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Heading2</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"nv\">writeToFile</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Effect</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would like to generate Rust bindings for this using glue. Then implement the <code>writeToFile</code> side-effect and potentially other processing of the data. For example I might just use <code>std::fs::File::write_all()</code> for example. Then I import my Rust library into tui-platform and integrate with my platform, taking advantage of the new features that I didnâ€™t have to write from scratch. I might vendor the Roc interface module so now any apps developed with my platform can target that and have a simple easy to use experience.</p>\n<p>The above idea needs a lot of work. I can see a lot of rough edges, but I thought I would pose the question anyway to see if there is any prior research or design around this, or advice that will save me some headaches...</p>",
        "id": 311970084,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669280745
    },
    {
        "content": "<blockquote>\n<p>I would like to use Rust code from cli in the tui platform I have been messing around with.</p>\n</blockquote>\n<p>I think publishing a rust lib on <a href=\"http://crates.io\">crates.io</a> (or github to get started) is the way to go here.</p>",
        "id": 311970753,
        "sender_full_name": "Anton",
        "timestamp": 1669281003
    },
    {
        "content": "<p>it's a good question!</p>",
        "id": 311976946,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669283421
    },
    {
        "content": "<p>we've talked about this a lot in the past, and the short answer is that the current plan is to - very intentionally - not introduce any language-level changes to Roc for use cases like this</p>",
        "id": 311976980,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669283436
    },
    {
        "content": "<p>it's already possible to share host code using the host language's code-sharing capabilities (e.g. in Rust's case, splitting out a crate of shared logic and then importing it in both platforms)</p>",
        "id": 311977096,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669283492
    },
    {
        "content": "<p>and then the corresponding Roc code can just be copy/pasted</p>",
        "id": 311977262,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669283548
    },
    {
        "content": "<p>I think we should start with this system, because it's the simplest from a language perspective</p>",
        "id": 311977363,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669283595
    },
    {
        "content": "<p>it's possible that the benefits of a more complex system would outweigh the cost of complexity, but in this particular case I'm very skeptical of that</p>",
        "id": 311977530,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669283650
    },
    {
        "content": "<p>so I want to try sticking to the current set of tools for sharing code between platforms, and watch how the ecosystem evolves!</p>",
        "id": 311977596,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669283687
    },
    {
        "content": "<p>btw rust allows dependencies with a github link, so you don't even need to publish officially to use rust code in multiple projects</p>",
        "id": 311980995,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669284873
    }
]