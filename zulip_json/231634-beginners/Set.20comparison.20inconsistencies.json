[
    {
        "content": "<p>Hi everyone from a long time lurker, first time poster.</p>\n<p>I've been tinkering with Roc for a while now (exercises on <a href=\"http://exercism.org\">exercism.org</a>, Advent of Code etc.) and I've come across an annoying inconsistency in the way Set equality is handled. Everything is fine until you enclose the Set in a tag or record at which point the insertion order suddenly matters and previously equal Sets no longer compare as equal.</p>\n<p>This snippet from a repl session shows the issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>» s1 = [1,2,3,4] |&gt; Set.from_list\n\n@Set (...) : Set (Num *)\n» s2 = [4,3,2,1] |&gt; Set.from_list\n\n@Set (...) : Set (Num *)\n» s1 == s2\n\nBool.true : Bool\n» Ok(s1) == Ok(s2)\n\nBool.false : Bool\n» s3 = [1,2,3,4] |&gt; Set.from_list\n\n@Set (...) : Set (Num *)\n» Ok(s1) == Ok(s2)\n\nBool.false : Bool\n» Ok(s1) == Ok(s3)\n\nBool.true : Bool\n»\n</code></pre></div>\n<p>The same behaviour occurs for records.<br>\nIs this a bug or is this the intended behaviour?</p>",
        "id": 511620349,
        "sender_full_name": "Simon Redding",
        "timestamp": 1744368947
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"898442\">@Simon Redding</span>,<br>\nI think this is a bug, <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> may be most familiar with the implementation of this.</p>",
        "id": 511631070,
        "sender_full_name": "Anton",
        "timestamp": 1744372258
    },
    {
        "content": "<p>Yeah, this is a known bug with how the equality ability is derived</p>",
        "id": 511679327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744385211
    },
    {
        "content": "<p>Some reason the ability derivation is completely structural for anything nested</p>",
        "id": 511679422,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744385239
    },
    {
        "content": "<p>Would this be fixed with static dispatch?</p>",
        "id": 511679506,
        "sender_full_name": "Anton",
        "timestamp": 1744385261
    },
    {
        "content": "<p>The only userland solution I know of is to make the wrapping tag an opaque type and write the implementation of eq</p>",
        "id": 511679641,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744385292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Set.20comparison.20inconsistencies/near/511679506\">said</a>:</p>\n<blockquote>\n<p>Would this be fixed with static dispatch?</p>\n</blockquote>\n<p>I would hope so. At a minimum, the system is a full rewrite that will need to deal with this problem itself.</p>",
        "id": 511680067,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744385372
    },
    {
        "content": "<p>Thanks guys.<br>\nThis is mainly impacting unit tests for me so unpacking the tags/records isn't the end of the world.</p>\n<p>I see that there's already an issue in GitHub for this: <a href=\"https://github.com/roc-lang/roc/issues/7111\">Order matters when sets comparing sets/dicts nested in other types (tags, records, etc) · Issue #7111 · roc-lang/roc</a></p>",
        "id": 511683719,
        "sender_full_name": "Simon Redding",
        "timestamp": 1744386390
    }
]