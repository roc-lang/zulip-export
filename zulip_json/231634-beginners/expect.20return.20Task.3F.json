[
    {
        "content": "<p>Hi friends! I am trying out roc for Advent of Code. When I tried defining an <code>expect</code> test for my input I ran into this issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ────────────────────────────────────────────── day01/main.roc ─\n\nThis `expect` condition needs to be a Bool:\n\n75│&gt;      input &lt;- File.readUtf8 (Path.fromStr &quot;input&quot;) |&gt; Task.await\n76│&gt;\n77│&gt;      part1 input == 232323\n\nThis `Task.await` call produces:\n\n    InternalTask.Task c [\n        FileReadErr Path.Path InternalFile.ReadErr,\n        FileReadUtf8Err Path.Path [BadUtf8 Utf8ByteProblem Nat],\n    ]&gt;\n</code></pre></div>\n<p>I understand that the return value is wrong since I return a <code>Task</code>.  Just wanted to confirm that <code>expect</code> is not made to handle effects, or is there a mistake in the code?</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    input &lt;- File.readUtf8 (Path.fromStr &quot;input&quot;) |&gt; Task.await\n\n    part1 input == 232323\n</code></pre></div>",
        "id": 405346425,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701431956
    },
    {
        "content": "<p>It might be easier to include the text file at compile-time, in your imports like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>imports [ &quot;input&quot; as input : Str ]\n</code></pre></div>",
        "id": 405347403,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701432195
    },
    {
        "content": "<p>Unless your goal is specifically to play with the runtime effect system, or if you're looking to implement a specific API</p>",
        "id": 405347627,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701432236
    },
    {
        "content": "<p>You are absolutely right, I will change the tests. The reason I wasn't using it at first is because I wanted the binary to be able to handle different inputs. Not sure I can make the same case for a test.</p>",
        "id": 405348776,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701432427
    },
    {
        "content": "<p>Just for more context. Long term, we plan to add <code>expect-fx</code> that would enable something like this where you would mock out the results of a task. </p>\n<p>Otherwise, <code>expect</code> is just for pure functions and code. So you would need to add any sort of input to the file. Think of <code>expect</code> as really just for unit tests.</p>",
        "id": 405385288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701444215
    }
]