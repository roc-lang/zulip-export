[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ss\">err</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">err</span>\n\n<span class=\"n\">flat_map</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"n\">flat_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">parser_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a_to_parser_b</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">str</span><span class=\"o\">|</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">parser_a</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s2\">\"TODO\"</span>\n<span class=\"w\">            </span><span class=\"c1\"># Ok(a, rest) -&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\">#     a_to_parser_b(a)(str)</span>\n<span class=\"w\">            </span><span class=\"c1\"># Err err -&gt; Err err</span>\n</code></pre></div>\n<p>My commented out code here was not checking, so I put in a <code>_</code> to view the language servers type inference. According to type inference, <code>when parser_a(str) is</code> produces: <code>Result ( b, Str )* *</code>, as shown in the screenshot. This makes no sense to me, since parser_a's type is <code>Str -&gt; Result (a, Str) _</code>. </p>\n<p><a href=\"/user_uploads/22008/J80SCbUXLSm7PJvex1D305gO/Screenshot-2025-01-31-at-14.26.43.png\">Screenshot 2025-01-31 at 14.26.43.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/J80SCbUXLSm7PJvex1D305gO/Screenshot-2025-01-31-at-14.26.43.png\" title=\"Screenshot 2025-01-31 at 14.26.43.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"824x392\" src=\"/user_uploads/thumbnail/22008/J80SCbUXLSm7PJvex1D305gO/Screenshot-2025-01-31-at-14.26.43.png/840x560.webp\"></a></div><p>Am I just low on coffee, or is there something weird going on with the type inference here?</p>",
        "id": 497083436,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738355479
    },
    {
        "content": "<p>You've applied the <code>str</code> to it though, so isn't this the type after calling the function, which is a <code>Result</code>?</p>",
        "id": 497084045,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738355749
    },
    {
        "content": "<p>Yeah, but I'd expect a <code>Result (a, Str) *</code>, not a <code>Result (b, Str)* *</code>...</p>",
        "id": 497084242,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738355837
    },
    {
        "content": "<p>Ohk, it's the <code>b</code> not <code>a</code> type var you're concerned about.</p>",
        "id": 497084429,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738355897
    },
    {
        "content": "<p>Could it be getting that from the return value? -- and because you're only calling parser_a, it unifies those two type vars as the same thing... but prints out <code>b</code> because it saw that first ... or something like that?</p>",
        "id": 497084451,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738355919
    },
    {
        "content": "<p>Well if I uncomment the commented out code, thus using <code>a_to_parser_b</code> it still doesn't unify the types, so not sure if thats it...</p>",
        "id": 497085859,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738356519
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>flat_map : (Parser a _), (a -&gt; Parser b _) -&gt; Parser b _\nflat_map = |parser_a, a_to_parser_b|\n    |str|\n        when parser_a(str) is\n            Ok(a, _rest) -&gt;\n                a_to_parser_b(a)(str)\n            Err err -&gt; Err err\n</code></pre></div>\n<p>==</p>\n<div class=\"codehilite\"><pre><span></span><code>This 1st argument to a_to_parser_b has an unexpected type:\n\n20â”‚                  a_to_parser_b(a)(str)\n                                   ^\n\nThis a value is a:\n\n    (\n        a,\n        Str,\n    )b\n\nBut a_to_parser_b needs its 1st argument to be:\n\n    a\n</code></pre></div>\n<p>I don't understand how the <code>a</code> in <code>Ok(a, _rest)</code> can be <code>(a, Str)b</code>!</p>",
        "id": 497085951,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738356573
    },
    {
        "content": "<p>I feel like I must be misapplying my functions, but darned if I can figure it out... I think my brain just went caput for the day <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497086169,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738356662
    },
    {
        "content": "<p>Just needed to take a break! My when block needed nested parens. </p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">parser_a</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">    </span><span class=\"no\">Ok</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_rest</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"c1\">#...</span>\n</code></pre></div>",
        "id": 497094698,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738360400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 497094710,
        "sender_full_name": "Notification Bot",
        "timestamp": 1738360406
    }
]