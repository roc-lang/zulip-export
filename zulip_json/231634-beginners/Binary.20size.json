[
    {
        "content": "<p>When compiling a program, how large is the generated binary file? Is it small enough that it would be reasonable to make websites with it? Assuming that it's possible to target WASM in the future.</p>",
        "id": 249419895,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1628892350
    },
    {
        "content": "<p>it should be, it's a bit like Rust or C (and nothing like e.g. haskell, which has to bring along its whole runtime system)</p>",
        "id": 249421610,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628893664
    },
    {
        "content": "<p>in terms of code size it's not as good as the current elm -&gt; wasm project (cc <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> ) because we fully monomorphize while that wasm conversion generates something that is still more dynamic in nature</p>",
        "id": 249421707,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628893750
    },
    {
        "content": "<p>but cool things are already happening with wasm in zig/c/rust so yea it should be feasible</p>",
        "id": 249421728,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628893775
    },
    {
        "content": "<p>That's true, my generated Wasm is pretty much untyped so only one copy of <a href=\"http://List.map\">List.map</a> for example, and that's good for size. (There are other things bloating up the code size at the moment but that will all get removed eventually!)</p>",
        "id": 249422280,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628894273
    },
    {
        "content": "<p>also it might require being careful on the platform side - e.g. there are various special things you have to do to get hello world in Rust wasm down to 2.4k:</p>\n<p><a href=\"https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html\">https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html</a></p>",
        "id": 249422752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628894647
    },
    {
        "content": "<p>Interesting! Yeah the complicated parts of the Wasm platform for me have been about the interface with JS. You need to encode and decode your data structures, you need to write a Wasm stack frame from JS when you call a function, you have different memory managers on each side with cross-references between them (which makes lifetimes complicated), etc. There's some overhead for all of that.</p>",
        "id": 249423595,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628895492
    },
    {
        "content": "<p>is that inherent or just the current state of the wasm stack/browser integration?</p>",
        "id": 249423829,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628895702
    },
    {
        "content": "<p>It's inherently hard but it's possible, and there are proposals in the works. But I first checked the status 3 years ago and it is still in stage 1 today. There's an explainer doc <a href=\"https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md\">here</a> and the list of proposal statuses is <a href=\"https://github.com/WebAssembly/proposals\">here</a></p>",
        "id": 249447012,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628926866
    },
    {
        "content": "<p>It would allow Wasm to refer to values owned by the platform, and the platform would handle the memory management. I think the hard part is that the web standards are not defined in terms of integers and floats, but higher level types like DOMString and Regex and Promise and a hundred other things with implementation-defined memory layout.</p>",
        "id": 249447279,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628927345
    },
    {
        "content": "<p>Cool, sounds like support is a ways off due to both Roc and WASM being in development. Still, I think it would be fantastic if one day I could write code that could be used on the backend as well as web apps, desktop apps, and mobile apps, without needing resort to Electron and Node or something low level like QT.</p>",
        "id": 249451819,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1628935009
    },
    {
        "content": "<p>yea share the vision, lots of work that needs to be done to make that ergonomic, but it all should be possible in theory</p>",
        "id": 249451936,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628935167
    },
    {
        "content": "<p>I actually let go of write once, run anywhere as a goal. Every manifestation seems to be hacky and never respect the platform well enough. It’d be interesting to see if roc can break that. But I imagine it’d still be a separate roc platform for each (mobile, web platform, desktop native graphics) and then for app devs they just use roc</p>",
        "id": 249454245,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628938767
    },
    {
        "content": "<p>For web, I’m also increasingly less excited about wasm with each year that passes. But on the roc side of things a platform for the web could emit javascript and wasm based off functions and types the app dev uses that the platform needs to consume. Instead of roc itself compiling to wasm</p>",
        "id": 249454349,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628938862
    },
    {
        "content": "<p>what makes you less excited for wasm on the web? just the hype dying down or are there technical reasons?</p>",
        "id": 249454368,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628938913
    },
    {
        "content": "<p>seems to be only hype so far</p>",
        "id": 249454406,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628938926
    },
    {
        "content": "<p>i know for a fact that it's used a bunch outside the web</p>",
        "id": 249454409,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628938948
    },
    {
        "content": "<p>then I search for rust web frameworks and find 5 competing frameworks all inspired by Elm architecture</p>",
        "id": 249454410,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628938966
    },
    {
        "content": "<p>my theory: the wasm tooling is built by non-web people</p>",
        "id": 249454412,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628938975
    },
    {
        "content": "<p>And I end up thinking “ok here we go again, frontend framework wars the rust version”</p>",
        "id": 249454414,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628938985
    },
    {
        "content": "<blockquote>\n<p>i know for a fact that it's used a bunch outside the web</p>\n</blockquote>\n<p>nice, any cool examples?</p>",
        "id": 249454465,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939045
    },
    {
        "content": "<p>Also don’t get me wrong. I’m not saying roc shouldn’t compile to wasm</p>",
        "id": 249454471,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939068
    },
    {
        "content": "<p>but I do think a separate Lang just for web and wasm (or a roc platform), with NextJS features sprinkled on top is what the world needs</p>",
        "id": 249454484,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939132
    },
    {
        "content": "<p>it's NDA'd but the vague idea is that you can just send a bunch of code to a remote device and execute it there and be sure that it's safe</p>",
        "id": 249454536,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939173
    },
    {
        "content": "<p>because of the sandboxing</p>",
        "id": 249454539,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939178
    },
    {
        "content": "<p>slick</p>",
        "id": 249454540,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939186
    },
    {
        "content": "<p>and that's really nice if you have a lot of machines in the field and want to make a software update</p>",
        "id": 249454545,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939195
    },
    {
        "content": "<p>seems like a killer feature for IoT stuff</p>",
        "id": 249454555,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939228
    },
    {
        "content": "<p>wasmtime or something to execute I imagine</p>",
        "id": 249454562,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939244
    },
    {
        "content": "<p>yea, so you need a somewhat capable machine for this</p>",
        "id": 249454577,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939265
    },
    {
        "content": "<p>but most machines are in that category these days</p>",
        "id": 249454586,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939282
    },
    {
        "content": "<p>if you can run a botnet on it, then it can run this probably</p>",
        "id": 249454621,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939295
    },
    {
        "content": "<p>so fridges ect <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 249454624,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939306
    },
    {
        "content": "<p>lmao that reminds me of that famous mirai hack</p>",
        "id": 249454628,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939325
    },
    {
        "content": "<p>consumer IOT is very bad...</p>",
        "id": 249454633,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939348
    },
    {
        "content": "<p>b2b though is pretty interesting</p>",
        "id": 249454636,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939357
    },
    {
        "content": "<p>interesting</p>",
        "id": 249454639,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939376
    },
    {
        "content": "<p>well that gives me a more positive outlook</p>",
        "id": 249454644,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939397
    },
    {
        "content": "<p>well the tooling is the hard part here for the web</p>",
        "id": 249454711,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939477
    },
    {
        "content": "<p>plus you have to compensate for bigger binary size</p>",
        "id": 249454726,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939485
    },
    {
        "content": "<p>give me direct DOM access!</p>",
        "id": 249454734,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939507
    },
    {
        "content": "<p>well, yes</p>",
        "id": 249454737,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939521
    },
    {
        "content": "<p>lol I think there’s a proposal but as it was said above that’s tricky</p>",
        "id": 249454776,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939532
    },
    {
        "content": "<p>not sure why that is taking so long, seems pretty fundamental</p>",
        "id": 249454777,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628939534
    },
    {
        "content": "<p>I think Brain said it well.</p>\n<blockquote>\n<p>I think the hard part is that the web standards are not defined in terms of integers and floats, but higher level types like DOMString and Regex and Promise and a hundred other things with implementation-defined memory layout.</p>\n</blockquote>",
        "id": 249454852,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628939657
    },
    {
        "content": "<p>UI is in a strange state of affairs and it doesn’t help that Apple and Android don’t play nice. At least they have react inspired ways of building now with SwiftUI and Jetpack Compose</p>",
        "id": 249455074,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628940038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"357305\">Lucas Rosa</span> <a href=\"#narrow/stream/231634-beginners/topic/Binary.20size/near/249454245\">said</a>:</p>\n<blockquote>\n<p>I actually let go of write once, run anywhere as a goal. Every manifestation seems to be hacky and never respect the platform well enough. It’d be interesting to see if roc can break that. But I imagine it’d still be a separate roc platform for each (mobile, web platform, desktop native graphics) and then for app devs they just use roc</p>\n</blockquote>\n<p>To be clear, I'm interested in being able to reuse some code (but not all). You're right that it is a bad idea to try reusing all code between different devices, but usually there is a chunk of code (shared datastructures, validation, helper functions, etc) that want to be able to use on frontend apps and on the backend.</p>",
        "id": 249471102,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1628964173
    },
    {
        "content": "<p>nice totally makes sense</p>",
        "id": 249480340,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628980282
    },
    {
        "content": "<p>In terms of roc, I imagine there’s a fair bit of helper functions and shared code that can be intentionally platform agnostic. That way no matter how many base platforms you need for various apps as part of your stack, you could still get one of the best code re-use experiences there is out there</p>",
        "id": 249480406,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628980378
    },
    {
        "content": "<p>In a way I think I might be trying to say that maybe roc can be better than wasm for code re-use. Would a world with great roc success even care as much about wasm? Obviously still probably yes but I wanted to be dramatic lol</p>",
        "id": 249480467,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628980502
    },
    {
        "content": "<p>As an example. Maybe I have some app. It has an API, a web frontend, a desktop app, and a CLI interface. Those 4 things could all be a different platform. Maybe the API is a platform for building graphql backends on top of postgres. Maybe the web frontend platform does some fancy ssr and client rendering by emitting JS/wasm at run time. Maybe the desktop app is a UI platform built using native graphics or even just an SDL wrapper. And then the CLI platform handles capturing commands with a nice dsl. All the data types representing your domain and common transformations of these could be stuffed in a platform agnostic shared package to be used across every platform you need.</p>",
        "id": 249480839,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628981216
    }
]