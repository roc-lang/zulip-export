[
    {
        "content": "<p>Can anyone point me to an example of where an inspect ability has been implemented for an opaque type?</p>",
        "id": 438000362,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715354648
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/main/examples/inspect-logging.roc\">https://github.com/roc-lang/roc/blob/main/examples/inspect-logging.roc</a></p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/main/examples/Community.roc\">https://github.com/roc-lang/roc/blob/main/examples/Community.roc</a></p>",
        "id": 438006823,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715357050
    },
    {
        "content": "<p>Or are you looking for an <code>InspectFormatter</code> implementation, like <a href=\"https://github.com/roc-lang/roc/blob/main/examples/GuiFormatter.roc\">https://github.com/roc-lang/roc/blob/main/examples/GuiFormatter.roc</a>?</p>",
        "id": 438006993,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715357121
    },
    {
        "content": "<p>I probably should have posted this in the <a href=\"#narrow/stream/231634-beginners/topic/Http.2Esend.20causes.20exits.20program.20early.20on.20400.20code.3F\">Http.send causes exits program early on 400 code</a> thread for better context.</p>\n<p>I don't know enough to ask my question effectively, but basically I want to implement a type which may vary its inspect behavior depending on certain conditions. IE:</p>\n<div class=\"codehilite\"><pre><span></span><code>ResponseBody := List U8 implements [Inspect]\n\n# made up inspect function - no idea what this might look like in reality:\ninspect : ResponseBody -&gt; f where f implements InspectFormatter\ninspect = \\responseBody -&gt;\n    when responseBody |&gt; List.takeFirst 50 |&gt; Str.fromUtf8 is\n        Ok str -&gt; # inspect returns a string\n        Err _ -&gt; # inspect returns the first 50 bytes\n</code></pre></div>",
        "id": 438016978,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715361027
    },
    {
        "content": "<p>I'm thinking InspectFormatter is what I need to figure out here...</p>",
        "id": 438018565,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715361635
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/cbc0812bb566c99bec2073381433a507b71f14cc/crates/compiler/builtins/roc/Inspect.roc#L106\">This example</a> may help as well.</p>",
        "id": 438018997,
        "sender_full_name": "Anton",
        "timestamp": 1715361808
    },
    {
        "content": "<p>Sidenote; you'll need to wrap what you return in a Tag if you want to return multiple types, e.g. <code>[TagStr Str, TagBytes (List U8)]</code></p>",
        "id": 438019557,
        "sender_full_name": "Anton",
        "timestamp": 1715362021
    },
    {
        "content": "<p>So i'm playing around with some code trying to get a custom Inspect ability for my opaque. I've written a <code>toInspector</code> function, but the language server tells me that I have an illegal specialization for a non-opaque/structural type. I'm confused because my type is definitely defined as an opaque:</p>\n<div class=\"codehilite\"><pre><span></span><code>ResponseBody := List U8 implements [Inspect {toInspector: toInspector}]\n</code></pre></div>\n<p>The error message says its specialized for a <code>List U8</code>.  My toInspector code is as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>toInspector = \\respBody -&gt;\n    when respBody |&gt; List.takeFirst 50 |&gt; Str.fromUtf8 is\n        Ok strBody -&gt; Inspect.inspect (String strBody)\n        Err _ -&gt; Inspect.inspect (Bytes respBody)\n</code></pre></div>",
        "id": 438154249,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715486315
    },
    {
        "content": "<p>Need to unwrap the opaque</p>",
        "id": 438162230,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715495547
    },
    {
        "content": "<p>You are using it as a <code>List U8</code> directly in that function</p>",
        "id": 438162241,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715495568
    },
    {
        "content": "<p><code>\\@ResponseBody respBody -&gt;</code></p>",
        "id": 438162262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715495594
    },
    {
        "content": "<p>Ahh, of course! ü§¶üèª‚Äç‚ôÇÔ∏è</p>",
        "id": 438162266,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715495606
    },
    {
        "content": "<p>Anyone know what I should make of this error message?</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/solve/src/specialize.rs:866:25:\nlambda set region not resolved: (`42.IdentId(11)`, MemberSpecializationInfo { _phase: PhantomData&lt;roc_can::abilities::Resolved&gt;, symbol: `42.IdentId(11)`, specialization_lambda_sets: VecMap { keys: [1], values: [124] } })\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p><a href=\"https://github.com/roc-lang/roc/blob/cbc0812bb566c99bec2073381433a507b71f14cc/crates/compiler/solve/src/specialize.rs#L866\">crates/compiler/solve/src/specialize.rs:866</a></p>\n<p>Not sure what it means by a lambda set 'region' here. It clearly is an issue with my specialization of Inspect/toInspector, but beyond that, I'm lost. </p>\n<p>The code panics in the function <code>find_opaque_specialization_ambient_function</code>, after matching <code>opt_specialization</code> to <code>Some(member_impl)</code> (not <code>None</code>), and matching <code>member_impl</code> to <code>MemberImpl::Impl(spec_symbol)</code>not <code>MemberImpl::Error</code>. </p>\n<p>So it seems that there has been some success in matching my specialization to an ability in the ability store, but when trying to get the \"specialized lambda set\", something goes wrong.</p>",
        "id": 438206692,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715542191
    },
    {
        "content": "<p>These are the scary errors where I generally comment out code til it works and then slowly work myself back. Maybe try a few variants of similar code.</p>",
        "id": 438206815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715542298
    },
    {
        "content": "<p>Oh boy lol. Duly note... <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 438207034,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715542539
    }
]