[
    {
        "content": "<p>Hey, is it possible to write one function that accepts either a Str or a Num and does different things to them... without requiring tag prefixing?</p>",
        "id": 266632245,
        "sender_full_name": "jan kili",
        "timestamp": 1641156557
    },
    {
        "content": "<p>No</p>",
        "id": 266632328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641156704
    },
    {
        "content": "<p>Would need a tag</p>",
        "id": 266632333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641156710
    },
    {
        "content": "<p>Hmmm darn</p>",
        "id": 266632335,
        "sender_full_name": "jan kili",
        "timestamp": 1641156717
    },
    {
        "content": "<p>At least i can't think of a way.</p>",
        "id": 266632378,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641156740
    },
    {
        "content": "<p>Wouldn't expect a way to exist</p>",
        "id": 266632382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641156748
    },
    {
        "content": "<p>What are you trying to do?</p>",
        "id": 266632385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1641156754
    },
    {
        "content": "<p>I'm trying to write a pretty printing library that can accept arbitrary data and converts it to a Str, similar to JS's JSON.stringify</p>",
        "id": 266632391,
        "sender_full_name": "jan kili",
        "timestamp": 1641156767
    },
    {
        "content": "<p>It works for Str and Num if the user provides a prefix tag to indicate which it is</p>",
        "id": 266632416,
        "sender_full_name": "jan kili",
        "timestamp": 1641156804
    },
    {
        "content": "<p>But as soon as you want to stringify a List of strings or numbers... or a Record of anything... The user would have to describe the entire type structure... Which defeats the purpose of a lightweight pretty printer</p>",
        "id": 266632477,
        "sender_full_name": "jan kili",
        "timestamp": 1641156866
    },
    {
        "content": "<p>Is a generic Roc pretty printer impossible?</p>",
        "id": 266632502,
        "sender_full_name": "jan kili",
        "timestamp": 1641156917
    },
    {
        "content": "<p>Yes, trough abilities, aka simplified type classes aka better than interfaces :)</p>",
        "id": 266634923,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1641160647
    },
    {
        "content": "<p>But they are not implemented yet</p>",
        "id": 266634931,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1641160671
    },
    {
        "content": "<p>Could I please see the design doc for abilities? For both library planning and excited curiosity :)</p>",
        "id": 266639423,
        "sender_full_name": "jan kili",
        "timestamp": 1641167301
    },
    {
        "content": "<p>This was Richard's document, for sure we should organize this knowledge better, but it's still open issue so no sweat. </p>\n<p><a href=\"https://docs.google.com/document/d/1kUh53p1Du3fWP_jZp-sdqwb5C9DuS43YJwXHg1NzETY/edit\">https://docs.google.com/document/d/1kUh53p1Du3fWP_jZp-sdqwb5C9DuS43YJwXHg1NzETY/edit</a></p>",
        "id": 266640069,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1641168131
    },
    {
        "content": "<p>This is conversation thread about them:<br>\n<a href=\"#narrow/stream/304641-ideas/topic/Abilities\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Abilities</a></p>",
        "id": 266640080,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1641168150
    },
    {
        "content": "<p>I want to highlight the last section of that Google doc in particular - my biggest worry about abilities, by <em>far</em>, is that they'll become a source of unnecessary complexity by way of being used for things that had simpler solutions which didn't involve abilities <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 266641480,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1641170068
    },
    {
        "content": "<p>Ah, basically OOP leaking in?</p>",
        "id": 266652750,
        "sender_full_name": "jan kili",
        "timestamp": 1641187394
    },
    {
        "content": "<p>Great doc, and it sounds like there won't be as strong of a need for a stringify library in the future, thanks to the power of <code>Encode.str</code>!</p>",
        "id": 266652808,
        "sender_full_name": "jan kili",
        "timestamp": 1641187484
    },
    {
        "content": "<p>Maybe nonstandard pretty printing will still have its use cases, but I was primarily craving that easy debug logging that JS has, as you mention in the doc</p>",
        "id": 266652832,
        "sender_full_name": "jan kili",
        "timestamp": 1641187557
    },
    {
        "content": "<p>Will function definitions be able to use <code>where</code>/<code>has</code> selectors at runtime, similarly to <code>when</code>/<code>is</code> selectors? That might be very helpful.</p>",
        "id": 266652971,
        "sender_full_name": "jan kili",
        "timestamp": 1641187800
    },
    {
        "content": "<p>I assume not, since this abilities sounds like a type-level feature and the doc doesn't really reference introspection</p>",
        "id": 266653045,
        "sender_full_name": "jan kili",
        "timestamp": 1641187914
    }
]