[
    {
        "content": "<p>Hey folks - since custom types are defined instantly and they don't need to be imported I take it they have equality based on value a \"Yes\" value will be the same regardless of the module that is defining it, right? If that is the case how would one defined opaque types?</p>\n<p>Maybe this will be related to the answer but I've seen the <code>:=</code> operator defined in a few places but couldn't find anything regarding it on the tutorial. I feel like I'm missing something that would glue it all together.</p>",
        "id": 299955263,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663766989
    },
    {
        "content": "<p>yes <code>:=</code> is for making opaque types</p>",
        "id": 299955447,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663767044
    },
    {
        "content": "<p>it's a bit like a newtype wrapper in haskell: you wrap a type in an opaque wrapper. so <code>Foo := I64</code> creates a distinct type <code>Foo</code> that is not compatible with <code>I64</code></p>",
        "id": 299955542,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663767079
    },
    {
        "content": "<p>you can (un)wrap these with <code>@Foo</code>, e.g.  <code>@Foo intValue = @Foo 42</code></p>",
        "id": 299955676,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663767119
    },
    {
        "content": "<p>Got it! I was trying to exercise my understanding and stress things out when dealing with opaque and \"public\" types with the same name.</p>\n<p>I came up with this that I believe is wrong in multiple places but it got me thinking. The <code>[Bool, ModuleA.Bool]</code> would work? would a type alias of a custom type usually be spread when part of a larger custom type? or would I need to be explicit like <code>[ True, False, ModuleA.Bool ]</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code># ModuleA.roc\nBool := [True, False]\n\ntruthy : Bool -&gt; Str\ntruthy = \\@Bool bool -&gt;\n  when bool is\n    True -&gt; &quot;True&quot;\n    False -&gt; &quot;False&quot;\n\n# ModuleB.roc\ntruthy : [Bool, ModuleA.Bool] -&gt; Str\ntruthy = \\value -&gt;\n  when value is\n    True -&gt; &quot;True&quot;\n    False -&gt; &quot;False&quot;\n    ModuleA.Bool -&gt; ModuleA.truthy value\n</code></pre></div>",
        "id": 299959670,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663768380
    },
    {
        "content": "<p>you still need tags. so <code>[ Bool, ModuleA.Bool ] </code> does not really make sense, you'd need some <code>[ A Bool, B ModuleA.Bool ]</code></p>",
        "id": 299960125,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663768523
    },
    {
        "content": "<p>ah - got it, so this custom type is not recursive it only takes explicit types inside it (with params or not)</p>\n<div class=\"codehilite\"><pre><span></span><code>[ True, False, Maybe, DontKnow ] âœ…\n\nBool : [ True, False ]\nIndecisiveBool : [ Maybe, DontKow ]\n[ Bool, IndecisiveBool ] ðŸ”´\n\n# since it would evaluate to\n[ [ True, False ], [ Maybe, DontKnow] ]\n\n# same as this wouldn&#39;t work:\n[ Str, Int ]\n\n# non-custom types need to be wrapped:\n[ A Bool, B Indecisive, S Str, I Int ]\n</code></pre></div>",
        "id": 299962573,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663769306
    },
    {
        "content": "<p>kinda obvious now! thanks for clarifying! :)</p>",
        "id": 299962633,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663769330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span> I've been playing with porting elm-units &amp; elm-geometry to Roc and have been using <code>:=</code> quite a bit. If you'd like examples you can check out the code here <a href=\"https://github.com/wolfadex/roc/tree/wolfadex/roc-geometry/examples/roc-geometry\">https://github.com/wolfadex/roc/tree/wolfadex/roc-geometry/examples/roc-geometry</a>. I've had to do a few refactors to not run into cyclic imports too, which makes for code that's definitely a little different from the Elm approach.</p>",
        "id": 299978581,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663773224
    },
    {
        "content": "<p>The main thing being that in Elm you can have <code>type Foo a b = Foo a</code> but that's not allowed in Roc. The closest you can get in Roc is</p>\n<div class=\"codehilite\"><pre><span></span><code>Bar a : [ Bar a ]\n\nFoo a b := Bar a\n</code></pre></div>\n<p>and then you have to wrap/unwrap <code>Foo</code> in many places.</p>",
        "id": 299979031,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663773344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450091\">@Wolfgang Schuster</span> uhnn why can't you <code>Foo a b := [ Bar a ]</code> directly?</p>",
        "id": 299985826,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663775359
    },
    {
        "content": "<p>From my understanding of compiler errors <code>@Foo</code> can only be written in the file it's created in</p>",
        "id": 299987814,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663775884
    },
    {
        "content": "<p>E.g. in my <code>Types.roc</code> I have</p>\n<div class=\"codehilite\"><pre><span></span><code>Point3d a units coordinates := { x : Frac a, y : Frac a, z : Frac a }\n\ntoPoint3d = \\args -&gt; @Point3d args\n\nfromPoint3d = \\@Point3d args -&gt; args\n</code></pre></div>\n<p>I was struggling to find a way to directly create a value of type <code>Point3d</code> outside of that file.</p>",
        "id": 299988311,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663776007
    },
    {
        "content": "<p>Yeah I believe you would need to provide constructor and getter functions like those but I believe it would be the same in Elm, right?</p>\n<p>If you have an opaque <code>type Money currency = Money Int</code> you would only be able to pattern match it inside the module.</p>",
        "id": 299988816,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663776140
    },
    {
        "content": "<p>If you want to create them outside of the file, why are you making them private tags/opaque types with <code>:=</code>? Can you just use <code>:</code>?</p>",
        "id": 299989180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663776279
    },
    {
        "content": "<p>Not exactly. In Elm, taking the example of elm-geometry, I can have</p>\n<div class=\"codehilite\"><pre><span></span><code>module Internal exposing (Money(..))\n\ntype Money currency = Money Int\n--\nmodule External exposing (dollars, Money)\n\nimport Internal exposing (Money(..))\n\ntype alias Money currency = Internal.Money currency\n\ndollars i = Internal.Money i\n</code></pre></div>\n<p>and in my <code>elm.json</code> only expose <code>External.elm</code>. With this, <code>Internal.Money</code> is only available within my package and <code>External.Money</code> is available externally. Within my package, any module can create <code>Internal.Money</code> but users of the package can only create <code>External.Money</code> through functions I've exposed.</p>",
        "id": 299989876,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663776500
    },
    {
        "content": "<p>ooohh got it - is Roc's package ergonomics already in place? Maybe this is just a pain point of working in the current situation where you're basically just importing files local to your project? (I have no idea)</p>",
        "id": 299990846,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663776794
    },
    {
        "content": "<p>Currently everything is scoped to the module (file) and there is no package scope, so yeah, that may be the root cause of the pain point here.</p>",
        "id": 299991170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663776901
    },
    {
        "content": "<p>Partially, but it's easy to pretend for now. The bigger challenge is that in Elm you can do <code>type Money currency = Money Int</code> but that form isn't possible in Roc. I'm not sure it's necessary as writing <code>Money currency := Int</code> plus <code>toMoney : Int -&gt; Money currency</code> and <code>fromMoney : Money currency -&gt; Int</code> is pretty easy to write.</p>",
        "id": 299995222,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663778202
    },
    {
        "content": "<p>so we do have this at the platform level</p>",
        "id": 299998499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779333
    },
    {
        "content": "<p>e.g. this is how we get a phantom type in <code>Task</code> for the effect type</p>",
        "id": 299998539,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779346
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/b081acaf3c21deeff0dc696bfba0230e71c3b051/examples/interactive/cli-platform/Task.roc#L5\">https://github.com/roc-lang/roc/blob/b081acaf3c21deeff0dc696bfba0230e71c3b051/examples/interactive/cli-platform/Task.roc#L5</a></p>",
        "id": 299998585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779359
    },
    {
        "content": "<p>we have an <code>InternalTask</code> module which follows this pattern</p>",
        "id": 299998644,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779366
    },
    {
        "content": "<p>however, we don't have a \"package that's not a platform\" yet</p>",
        "id": 299998683,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779377
    },
    {
        "content": "<p>just because it hasn't been implemented yet!</p>",
        "id": 299998696,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779383
    },
    {
        "content": "<p>but maybe this is the first use case where we actually want that</p>",
        "id": 299998735,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779395
    },
    {
        "content": "<p>and yeah, we just do <code>to</code>/<code>from</code> in the <code>Internal</code> module <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/b081acaf3c21deeff0dc696bfba0230e71c3b051/examples/interactive/cli-platform/InternalTask.roc\">https://github.com/roc-lang/roc/blob/b081acaf3c21deeff0dc696bfba0230e71c3b051/examples/interactive/cli-platform/InternalTask.roc</a></p>",
        "id": 299998968,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663779472
    },
    {
        "content": "<p>This is definitely a case where it doesn't fit a platform and better fits a package. I was definitely going in with the assumption of \"this will change when packages become a thing\"</p>",
        "id": 299999102,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663779514
    },
    {
        "content": "<p>I'm somewhat curious about how common this type of structure is in Elm. My gut says that it's only a thing because of cyclic imports, at least from the packages I use frequently in Elm.</p>",
        "id": 299999790,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663779743
    },
    {
        "content": "<p>I use the \"internal to package only\" strategy extensively for elm-book (and elm-admin). I think these \"applications as libraries\" will use them a lot.</p>",
        "id": 300002595,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663780603
    },
    {
        "content": "<p>I really like it as a strategy</p>",
        "id": 300002683,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663780636
    },
    {
        "content": "<p>it's like an extra layer of modularity</p>",
        "id": 300002703,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663780642
    },
    {
        "content": "<p>in Roc the idea is to be able to import packages locally as part of any project, without publishing them, largely to enable this pattern for application development!</p>",
        "id": 300002785,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663780668
    },
    {
        "content": "<blockquote>\n<p>import packages locally as part of any project, without publishing</p>\n</blockquote>\n<p>Similar to how Deno works?</p>",
        "id": 300011043,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1663783319
    },
    {
        "content": "<p>I dunno how Deno does it, but basically just like how Elm does it except you can specify a local (relative) filesystem path instead of e.g. a published package name like <code>rtfeldman/elm-css</code></p>",
        "id": 300011399,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663783422
    },
    {
        "content": "<p>so I could say like <code>\"./my-package-name/main.roc\"</code> and then that package just gets imported</p>",
        "id": 300011494,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663783445
    }
]