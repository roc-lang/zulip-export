[
    {
        "content": "<p>This had me scratching my head for a while:</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\n\ni = Num.toI32 1\n\n# f1 is all fine\nf1 = \\{ a, b ? &quot;DEFAULT&quot; } -&gt; (a &lt; i, b)\n\nexpect f1 { a: 1 } == (Bool.false, &quot;DEFAULT&quot;)\n\nexpect f1 { a: 1, b: &quot;foo&quot; } == (Bool.false, &quot;foo&quot;)\n\n# for f2, the first expect does not compile if the second expect exists\n# unless the record parameter is open\nf2 : { a : I32, b ? Str } -&gt; (Bool, Str)\nf2 = \\{ a, b ? &quot;DEFAULT&quot; } -&gt; (a &lt; i, b)\n\nexpect f2 { a: 1 } == (Bool.false, &quot;DEFAULT&quot;)\n\nexpect f2 { a: 1, b: &quot;foo&quot; } == (Bool.false, &quot;foo&quot;)\n</code></pre></div>\n<p>gives:</p>\n<div class=\"codehilite\"><pre><span></span><code>This 1st argument to f2 has an unexpected type:\n\n17│  expect f2 { a: 1 } == (Bool.false, &quot;DEFAULT&quot;)\n               ^^^^^^^^\n\nThe argument is a record of type:\n\n    { … }\n\nBut f2 needs its 1st argument to be:\n\n    { b : Str, … }\n\nTip: Looks like the b field is missing.\n</code></pre></div>\n<p>It works if I change the type to open record <code>f2 : { a : I32, b ? Str }* -&gt; (Bool, Str)</code>. This was quite surprising to me based on what the tutorial says about default values.</p>",
        "id": 438692881,
        "sender_full_name": "Lachlan O'Dea",
        "timestamp": 1715737314
    },
    {
        "content": "<p>This is a specialization bug in the compiler</p>",
        "id": 438730285,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715753140
    },
    {
        "content": "<p>...or, it might not technically be specialization, but definitely a compiler bug</p>",
        "id": 438730546,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715753231
    },
    {
        "content": "<p>I think there is an issue filed for this, but would need to do some searchin</p>",
        "id": 438730623,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715753267
    },
    {
        "content": "<p>I had a quick look in the issues and nothing seemed to match, but perhaps I don't know what terminology to look for. Anyway, I'm happy to create an issue if that's useful.</p>",
        "id": 438747246,
        "sender_full_name": "Lachlan O'Dea",
        "timestamp": 1715760309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715733\">Lachlan O'Dea</span> has marked this topic as resolved.</p>",
        "id": 438747269,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715760317
    },
    {
        "content": "<p>Yeah, please make one. Someone can dedupe if there happens to be another match</p>",
        "id": 438747531,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715760406
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6750\">https://github.com/roc-lang/roc/issues/6750</a></p>",
        "id": 438750014,
        "sender_full_name": "Lachlan O'Dea",
        "timestamp": 1715761261
    }
]