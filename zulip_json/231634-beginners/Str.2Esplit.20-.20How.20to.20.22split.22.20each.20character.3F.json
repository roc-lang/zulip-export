[
    {
        "content": "<p>Given <code>Str.split \"1234\" \"\" == [\"1234\"]</code> and not as it is in e.g. JavaScript with <code>\"1234\".split(\"\")' </code>[\"1\",\"2\",\"3\",\"4\"]` what's the recommended way to split a string into it's individual characters when missing a distinct splitting character?</p>",
        "id": 436001777,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1714384576
    },
    {
        "content": "<p>G'day Tobias, if you checkout the <a href=\"https://www.roc-lang.org/builtins/Str\">docs for the builtin Str module</a> there is a fairly detailed walkthrough</p>",
        "id": 436003952,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714385178
    },
    {
        "content": "<p>The short answer is really it depends on what you mean by \"character\". If you are just looking to split into raw utf8 bytes there is <code>Str.toUtf8</code> ... but that wont be very helpful if you are dealing with anything other than <a href=\"https://en.wikipedia.org/wiki/ASCII\">ASCII</a>.</p>",
        "id": 436004387,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714385284
    },
    {
        "content": "<p>As this right now just came from solving some Advent of Code tasks there's not much intention behind it. In this specific tasks given JavaScript I would've split the string '()()' into e.g. '[\"(\",\")\",\"(\",\")\"]' and then used reduce on it. With Roc requiring a specific split character I was looking at other ways to do it. Going via utf8 bytes doesn't really seem to be the most straightforward solution to me, but will take a look.</p>",
        "id": 436006278,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1714385961
    },
    {
        "content": "<p>For Advent of Code, I always use that and it works great <code>Str.toUtf8 \"1234\" == ['1','2','3','4']</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 436006539,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714386043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>¬ª Str.toUtf8 &quot;1234&quot;\n\n[49, 50, 51, 52] : List U8\n</code></pre></div>",
        "id": 436006679,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714386094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>¬ª Str.toUtf8 &quot;1234&quot; |&gt; List.map \\b -&gt; b - &#39;0&#39;\n\n[1, 2, 3, 4] : List U8\n</code></pre></div>",
        "id": 436006724,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714386119
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Okay. Do you happen to know why the default behaviour of Str.split \"\" wasn't implemented in a manner as e.g JavaScript does (meaning split every character)? Does that relate to the Str.length discussion I've seen above?</p>",
        "id": 436007139,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1714386256
    },
    {
        "content": "<p>Just as Luke has indicated - within the context of that particular use-case, the input seems to be indeed ASCII-only, so <code>Str.toUtf8</code> would be the idiomatic way to go about this.</p>\n<p>The name might not be really the first association that comes to mind, when you think about this particular use-case, but what I usually do in such examples is - I read the signatures of the standard-library functions (just as Luke has suggested) and that's been working quite well for me so far.</p>",
        "id": 436007253,
        "sender_full_name": "Hristo",
        "timestamp": 1714386300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513294\">@Tobias Steckenborn</span> to me <a href=\"https://github.com/roc-lang/roc/blob/e424f4bacca17b5e1c2df8ad38d8498c0367d0b0/crates/compiler/builtins/roc/Str.roc#L256-L259\">this</a> portion from the comment section of the <code>Str.roc</code> standard-library file does answer those questions.</p>\n<div class=\"codehilite\"><pre><span></span><code>## * Most often, using `Str` values along with helper functions like [`split`](https://www.roc-lang.org/builtins/Str#split), [`joinWith`](https://www.roc-lang.org/builtins/Str#joinWith), and so on, is the best option.\n## * If you are specifically implementing a parser, working in UTF-8 bytes is usually the best option. So functions like [`walkUtf8`](https://www.roc-lang.org/builtins/Str#walkUtf8), [toUtf8](https://www.roc-lang.org/builtins/Str#toUtf8), and so on. (Note that single-quote literals produce number literals, so ASCII-range literals like `&#39;a&#39;` gives an integer literal that works with a UTF-8 `U8`.)\n## * If you are implementing a Unicode library like [roc-lang/unicode](https://github.com/roc-lang/unicode), working in terms of code points will be unavoidable. Aside from basic readability considerations like `\\u(...)` in string literals, if you have the option to avoid working in terms of code points, it is almost always correct to avoid them.\n## * If it seems like a good idea to split a string into &quot;characters&quot; (graphemes), you should definitely stop and reconsider whether this is really the best design. Almost always, doing this is some combination of more error-prone or slower (usually both) than doing something else that does not require taking graphemes into consideration.\n</code></pre></div>\n<p>Apologies if you've already read that and that hasn't answered your questions.</p>",
        "id": 436008350,
        "sender_full_name": "Hristo",
        "timestamp": 1714386688
    },
    {
        "content": "<p>I guess it boils down to my mental model just not being there yet.</p>\n<p>Imagining to explain to somebody \"Hey, in case you've got a specific character on which you want to split use Str.split, in case you don't, you need to identify the right byte representation and use e.g. given ASCII characters toUtf8`. just still feels weird. But that might be due to me being used to how split works in another language. And I agree that that's most likely not a real world use case.</p>",
        "id": 436008847,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1714386878
    },
    {
        "content": "<p>I think it's not about a mental model per se, but language design choices.</p>\n<p>I recently wrote a similar comment in another thread (please, note I'm a Roc beginner, and this could be partly or fully incorrect) - my undrestanding is that the intention behind such kind of language design choices is to empower the user as much as possible, in terms of understanding the true nature of their use case and understand whether the use case is sufficiently disambiguated. Splitting by an empty string is considered an ambiguous use case, because it can be interpreted in multiple ways, when the underlying strings are allowed to be more than just ASCII.<br>\nIn such cases, Roc opts to invite the user to consider the more granular details about the corresponding use case a bit further, as not doing so potentially exposes the user to a risk of \"shooting oneself in the foot\".</p>",
        "id": 436010108,
        "sender_full_name": "Hristo",
        "timestamp": 1714387261
    },
    {
        "content": "<p>The fact that JavaScript has opted to gloss over some potentially important details, which could then manifest down the line (in hours, days, weeks or even years) as nasty bugs - that shouldn't be generally a measuring stick.</p>",
        "id": 436010347,
        "sender_full_name": "Hristo",
        "timestamp": 1714387343
    },
    {
        "content": "<p>You can split on a specific sub string like </p>\n<div class=\"codehilite\"><pre><span></span><code>¬ª Str.split &quot;1,2,3&quot; &quot;,&quot;\n\n[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;] : List Str\n</code></pre></div>",
        "id": 436011222,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714387622
    },
    {
        "content": "<p>Would the API be more intuitive if <code>toUtf8</code> is renamed to <code>splitToUtf8</code> (or something similar)?</p>",
        "id": 436021384,
        "sender_full_name": "Hristo",
        "timestamp": 1714390924
    },
    {
        "content": "<p>Just to clarify here, <code>Str.split \"1234\" \"\"</code> returning <code>[\"1234\"]</code> is 100% a limitation of the stardard library not supporting unicode string operation. Only a unicode understanding package could give a proper answer to splitting all characters/graphemes/codepoints/whatever.</p>\n<p>If we were to consider everything a match for the empty string,  it would work for ascii, but return broken strings for more complex characters. We would have issues like <code>Str.split \"üòß\" \"\"</code> would return strings that are invalid utf8.</p>\n<p>In JS, they will split into utf16 codepoints. Which is really unexpected in some cases:<br>\n<code>\"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\".split(\"\")</code><br>\n-&gt; <code>['\\uD83D', '\\uDC69', '\\uD83C', '\\uDFFB', '‚Äç', '‚ù§', 'Ô∏è', '‚Äç', '\\uD83D', '\\uDC68', '\\uD83C', '\\uDFFD']</code></p>",
        "id": 436075295,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714404289
    },
    {
        "content": "<p>Note <code>'‚Äç'</code> is not an empty string it is a zero width joiner unicode value.</p>",
        "id": 436075871,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714404437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Str.2Esplit.20-.20How.20to.20.22split.22.20each.20character.3F/near/436075295\">said</a>:</p>\n<blockquote>\n<p>Just to clarify here, <code>Str.split \"1234\" \"\"</code> returning <code>[\"1234\"]</code> is 100% a limitation of the stardard library not supporting unicode string operation. Only a unicode understanding package could give a proper answer to splitting all characters/graphemes/codepoints/whatever.</p>\n</blockquote>\n<p>building on this, if we did want to do that, I'd want to have multiple \"split\" functions whose names specify what they are splitting into - e.g. <code>splitGraphemes : Str -&gt; List Str</code>, etc.</p>",
        "id": 436076105,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714404489
    },
    {
        "content": "<blockquote>\n<p>Do you happen to know why the default behaviour of Str.split \"\" wasn't implemented in a manner as e.g JavaScript does</p>\n</blockquote>\n<p>One other specific comment. In javascript, you have the distinction of passing an empty string <code>\"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\".split(\"\")</code> vs passing nothing <code>\"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\".split()</code>. The api in Roc only has the empty string as an option. So we can't match to both of the functions that exist in JS. We map to the nothing passed split instead of the empty string split.</p>",
        "id": 436076616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714404610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513294\">Tobias Steckenborn</span> <a href=\"#narrow/stream/231634-beginners/topic/Str.2Esplit.20-.20How.20to.20.22split.22.20each.20character.3F/near/436008847\">said</a>:</p>\n<blockquote>\n<p>I guess it boils down to my mental model just not being there yet.<br>\nImagining to explain to somebody \"Hey, in case you've got a specific character on which you want to split use Str.split, in case you don't, you need to identify the right byte representation and use e.g. given ASCII characters toUtf8`. just still feels weird. But that might be due to me being used to how split works in another language. And I agree that that's most likely not a real world use case.</p>\n</blockquote>\n<p>yeah, I think the real problem is that culturally we think of \"splitting on characters\" as a fast, straightforward, and unambiguous thing to do, and unfortunately the combination of Unicode and character encodings mean that in reality it's actually none of those things <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 436076748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714404640
    },
    {
        "content": "<p>or to put it another way, the normal state of affairs in programming language standard libraries is that everything is super convenient until you start using them with emojis or non-Latin characters, at which point everything catches fire and explodes</p>",
        "id": 436077021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714404707
    },
    {
        "content": "<p>and I'd really like to try to change that default with Roc's standard library <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436077070,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714404721
    }
]