[
    {
        "content": "<p>Is there an official reason why roc doesn't support methods?</p>",
        "id": 276041002,
        "sender_full_name": "Philippe",
        "timestamp": 1647864937
    },
    {
        "content": "<p>as in, functions associated with objects?</p>",
        "id": 276041734,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647865314
    },
    {
        "content": "<p>Different languages use the word \"method\" to refer to different things so it would be helpful to know which you mean. It often refers to functions attached to an object, which is an object-oriented concept and Roc is a functional programming language that doesn't have object orientation. Functional languages deliberately separate functions from data.<br>\nRust has a different concept of trait methods.</p>",
        "id": 276041820,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1647865341
    },
    {
        "content": "<p>Just a question I received on Reddit. </p>\n<p>I forgot the FP nature of Roc (of course it is, but slipped my mind). </p>\n<p>I responded more in line of consistency. \"Methods or just functions with a self argument\" and \"pipe operator allow chaining\".</p>",
        "id": 276051041,
        "sender_full_name": "Philippe",
        "timestamp": 1647869782
    },
    {
        "content": "<p>So I looked at the reddit post and I find adhoc polymorphism an interesting goal. iiuc, they want it so that someone could say <code>dict.insert k v</code>. The major thing hidden here from regular Roc is the implementation of the dictionary. I could theoretically use that every time I use a dictionary even if one is array backed and another is actually hashing.</p>\n<p>Currently in Roc, if I wanted to that in the same module, I couldn't write <code>Dict.insert dict k v</code> in both locations. I would have to write <code>FlatDict.insert</code> in one location and <code>HashDict.insert</code> in the other.</p>",
        "id": 276069476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647876955
    },
    {
        "content": "<p>The other goal sounds like it would be a direct alternative to pipeline syntax via function chaining. E.g:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">dict</span><span class=\"p\">.</span><span class=\"nx\">insert</span> <span class=\"nx\">k0</span> <span class=\"nx\">v0</span>\n    <span class=\"p\">.</span><span class=\"nx\">insert</span> <span class=\"nx\">k1</span> <span class=\"nx\">v1</span>\n    <span class=\"p\">.</span><span class=\"nx\">insert</span> <span class=\"nx\">k2</span> <span class=\"nx\">v2</span>\n</code></pre></div>\n<p>Which as I typed I realized has a major problem with parsing due to how args and functions are grouped together.</p>",
        "id": 276069883,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647877108
    },
    {
        "content": "<p>so would Dict be an ability in that case, leveraging builtins like dictInsert?</p>",
        "id": 276071426,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1647877720
    },
    {
        "content": "<p>It seems like part of the value in non-default dict implementations is the exposure of novel capabilities or semantics. Performance is another reason for them, but performance is often obtained through those novel access approaches</p>",
        "id": 276071736,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1647877837
    },
    {
        "content": "<p>If we exposed <code>Dict</code> as an ability, I guess we could make any dictionary use <code>Dict.insert</code>.</p>\n<p>In this cases, I was assuming <code>Dict</code> was just the builtin dictionary and that a user was potentially using other dictionaries that happen to use the same API.</p>",
        "id": 276073081,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647878337
    },
    {
        "content": "<p>Imagine any set of types that have different implementations but would likely have the same interface.</p>",
        "id": 276073349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647878410
    },
    {
        "content": "<p>abilities are ad hoc polymorphism, same as <a href=\"https://pascalbormann.de/asp_book/chap2/2_5.html\">Rust traits</a></p>",
        "id": 276075251,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879047
    },
    {
        "content": "<p>as for the syntax, <code>foo.bar baz</code> already means that <code>foo</code> is a record, it has a <code>bar</code> field which holds a function, and <code>foo.bar baz</code> calls that function passing <code>baz</code></p>",
        "id": 276075511,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879144
    },
    {
        "content": "<p>also, that calling style is the reason Rust has errors of the form \"this doesn't compile...did you forget to import a trait maybe?\"</p>",
        "id": 276075705,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879229
    },
    {
        "content": "<p>fully-qualified calls don't have that problem, which is one reason abilities in Roc are designed to be called that way <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 276075796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879257
    },
    {
        "content": "<p>e.g. <code>Bool.isEq : a, a -&gt; Bool | a supports Equating</code></p>",
        "id": 276075817,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879266
    },
    {
        "content": "<p>the <code>a supports</code> is the ad-hoc polymorphism; the code for <code>isEq</code> changes based on the implementation provided in the definition of <code>a</code> - so it's dispatching to a completely different implementation based on the type</p>",
        "id": 276075925,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879312
    },
    {
        "content": "<p>but you still call it like a normal function, e.g. <code>Bool.isEq foo bar</code></p>",
        "id": 276075964,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879332
    },
    {
        "content": "<p>Sounds about right. Was just trying to give context on the question. I guess this does open questions around the standard library types potentially being abilities as well so that it is easy to make user land drop in replacements.</p>",
        "id": 276076113,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647879382
    },
    {
        "content": "<p>so as long as <code>Bool</code> is imported, we know where to find the definition of <code>isEq</code></p>",
        "id": 276076121,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879385
    },
    {
        "content": "<p>in contrast, if we had <code>foo.isEq bar</code> then it's not immediately clear which module the definition of <code>isEq</code> lives in <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276076164,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879405
    },
    {
        "content": "<p>so if it wasn't already in scope, the compiler would have to give an error</p>",
        "id": 276076197,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879423
    },
    {
        "content": "<p>the current plan is for abilities not to have type parameters</p>",
        "id": 276076241,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879448
    },
    {
        "content": "<p>so you can define an ability <code>Equating</code> but not <code>IsDict k v</code></p>",
        "id": 276076297,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879470
    },
    {
        "content": "<p>because we'd need either higher-kinded types or associated types to allow something like that</p>",
        "id": 276076448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879522
    },
    {
        "content": "<p>e.g. <code>Dict.insert : Dict k v, k, v -&gt; Dict k v</code> works fine if <code>Dict</code> is an opaque type</p>",
        "id": 276076494,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879540
    },
    {
        "content": "<p>but if we want to make it an ability, then it would need to be something like <code>Dict.insert : dict, k v -&gt; d | dict supports IsDict k v</code></p>",
        "id": 276076700,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879616
    },
    {
        "content": "<p>and then <code>map</code> gets kinda weird, e.g. instead of <code>Dict.map : Dict k v1, (k, v1 -&gt; v2) -&gt; Dict k v2</code> we have <code>Dict.map : d1, (k, v1 -&gt; v2) -&gt; d2 | d1 supports IsDict k v1 | d2 supports IsDict k v2</code></p>",
        "id": 276076849,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879688
    },
    {
        "content": "<p>but more to the point, at that point you can do <code>Monad.bind : m1, (a -&gt; m2) -&gt; m2 | m1 supports Monad a | m2 supports Monad b</code></p>",
        "id": 276077233,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879851
    },
    {
        "content": "<p>and there's a whole FAQ entry about why not to support that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 276077346,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647879905
    },
    {
        "content": "<p>ah, didn't think about the higher kinded type part. yeah. makes sense.</p>",
        "id": 276080680,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647881127
    },
    {
        "content": "<p>You could still do</p>\n<div class=\"codehilite\"><pre><span></span><code>dict =\n  Dict.empty\n    . insert k1 v1\n    . insert k2 v2\n</code></pre></div>\n<p>... I guess that technically makes a unique syntax that we could parse. Still has the other naming and higher kindled type problems, but at least doesn't break parsing.</p>",
        "id": 276086772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647883692
    }
]