[
    {
        "content": "<p>I have trouble writing a simple dictionary encoder, would appreciate any help!<br>\nTo avoid X Y problem: I am looking for the most straightforward way to work with dynamic JSON records, e.g. as a <code>Dict Str a</code>. I cannot use JSON list of \"pairs\" instead etc.<br>\nWhat I came up with:</p>\n<p><code>main.roc</code></p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;simple-dictionary&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br&quot;\n    }\n    imports [\n        pf.Stdout,\n        json.Json,\n    ]\n    provides [main] to pf\n\nDictionary a := Dict Str a implements [\n        Encoding { toEncoder: toDictionaryEncoder },\n        Inspect, # auto derive\n        Eq, # auto derive\n    ]\n\ntoDictionaryEncoder : Dictionary val -&gt; Encoder fmt where val implements Encoding, fmt implements EncoderFormatting\ntoDictionaryEncoder = \\@Dictionary val -&gt;\n    bytes, fmt &lt;- Encode.custom\n    Encode.appendWith\n        bytes\n        (fmt.record (\n            (key, value) &lt;- Dict.toList val |&gt; List.map\n            {\n                key,\n                value : Encode.toEncoder value\n            }\n        ))\n        fmt\n\nmain = @Dictionary (Dict.single &quot;a&quot; 0) |&gt; Inspect.toStr |&gt; Stdout.line\n</code></pre></div>\n<p><code>roc check</code> error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/solve/src/specialize.rs:866:25:\nlambda set region not resolved: (`17.IdentId(2)`, MemberSpecializationInfo { _phase: PhantomData&lt;roc_can::abilities::Resolved&gt;, symbol: `17.IdentId(2)`, specialization_lambda_sets: VecMap { keys: [1], values: [144] } })\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 437357836,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715041157
    },
    {
        "content": "<p>Not at all sure it will help, but you could try putting a <code>where</code> on <code>Dictionary a</code> to specify that <code>a has Encoding</code>.</p>",
        "id": 437360871,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715043943
    },
    {
        "content": "<p>Not sure what syntax are you referring to?</p>",
        "id": 437361895,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715044888
    },
    {
        "content": "<p>I think he meant <code>a implements Decoding</code> (the original keyword was <code>has</code> and we later changed it to <code>implements</code>)</p>",
        "id": 437370702,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715051374
    },
    {
        "content": "<p>For</p>\n<div class=\"codehilite\"><pre><span></span><code>Dictionary a where a implements Encoding := Dict Str a implements [\n        Encoding { toEncoder: toDictionaryEncoder },\n        Inspect, # auto derive\n        Eq, # auto derive\n    ]\n</code></pre></div>\n<p>I am getting</p>\n<div class=\"codehilite\"><pre><span></span><code>I was partway through parsing an ability definition, but I got stuck\nhere:\n\n63│  Dictionary a where a implements Encoding := Dict Str a implements [\n                                     ^\n\nI was expecting to see a value signature next.\n</code></pre></div>",
        "id": 437373736,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715053801
    },
    {
        "content": "<p>Should be:<br>\n<code>Dictionary a := Dict Str a where a implements Encoding implements [...]</code></p>",
        "id": 437404183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715070471
    },
    {
        "content": "<p>Got it. Yeah, this doesn't make a difference to the original error</p>",
        "id": 437481306,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715096833
    },
    {
        "content": "<p>One other thought but still a shot in the dark (don't have access to test rn). What happens if you type the number?</p>\n<p>Try typing it in the final line <code>Dict.single \"a\" 0u64</code></p>",
        "id": 437522392,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715112328
    },
    {
        "content": "<p>Did not help. I tried to minimize to the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>test : fmt -&gt; List U8 where fmt implements EncoderFormatting\ntest = \\fmt -&gt; Encode.appendWith\n    []\n    (fmt.record [{key: &quot;a&quot;, value: Encode.toEncoder &quot;&quot;}])\n    fmt\n\nmain = Stdout.line &quot;Ok&quot;\n</code></pre></div>\n<p>And now I am getting a more meaningful error</p>\n<div class=\"codehilite\"><pre><span></span><code>This expression is used in an unexpected way:\n\n89│      (fmt.record [{key: &quot;a&quot;, value: Encode.toEncoder &quot;&quot;}])\n          ^^^^^^^^^^\n\nThis fmt value is a:\n\n    fmt where fmt implements EncoderFormatting\n\nBut you are trying to use it as:\n\n    { record : * }b\n\nNote: The type variable fmt says it can take on any value that\nimplements the ability EncoderFormatting.\n\nBut, I see that the type is only ever used as a a record value. Can\nyou replace fmt with a more specific type?\n</code></pre></div>\n<p>Am I calling the function of the ability wrong?</p>\n<p><a href=\"https://www.roc-lang.org/builtins/Encode#EncoderFormatting\">https://www.roc-lang.org/builtins/Encode#EncoderFormatting</a></p>",
        "id": 437525762,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715113611
    },
    {
        "content": "<p>I realized my mistake. The right question is half the answer :)</p>\n<p>Being member of <code>EncoderFormatting</code>, <code>record</code> function is not a member of <code>fmt</code> value, but is a function luckily exposed in the built-in Encode module. So the call should be <code>Encode.record</code>, and the full implementation looks like</p>\n<div class=\"codehilite\"><pre><span></span><code>toDictionaryEncoder : Dictionary val -&gt; Encoder fmt where val implements Encoding, fmt implements EncoderFormatting\ntoDictionaryEncoder = \\@Dictionary val -&gt;\n    bytes, fmt &lt;- Encode.custom\n    Encode.appendWith\n        bytes\n        (Encode.record (\n            (key, value) &lt;- Dict.toList val |&gt; List.map\n            {\n                key,\n                value : Encode.toEncoder value\n            }\n        ))\n        fmt\n</code></pre></div>",
        "id": 437526932,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715114131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> has marked this topic as resolved.</p>",
        "id": 437530456,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715115753
    },
    {
        "content": "<p>The error message</p>\n<div class=\"codehilite\"><pre><span></span><code>This expression is used in an unexpected way:\n\n89│      (fmt.record [{key: &quot;a&quot;, value: Encode.toEncoder &quot;&quot;}])\n          ^^^^^^^^^^\n\nThis fmt value is a:\n\n    fmt where fmt implements EncoderFormatting\n\nBut you are trying to use it as:\n\n    { record : * }b\n</code></pre></div>\n<p>was much more useful than the original compiler panic message</p>",
        "id": 437530683,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715115863
    }
]