[
    {
        "content": "<p>Is there a proper way to do nested <code>List.map</code>s? Would it be reasonable/possible to add a builtin in the form of <code>List.innermostMap</code> that always runs on the elements of the innermost List. Some times when processing strings I get types like <code>List (List U8)</code>. There have been other cases ase well, but it just seems inconvenient.</p>",
        "id": 303073259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665271894
    },
    {
        "content": "<p><code>List.map l1 \\inner -&gt; List.map inner doInnerItem</code>?</p>",
        "id": 303073364,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665271985
    },
    {
        "content": "<p>I don't think it's too bad</p>",
        "id": 303073519,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665272149
    },
    {
        "content": "<p>Do empathize how it could get annoying after a while though</p>",
        "id": 303073572,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665272165
    },
    {
        "content": "<p>Yeah, That is what I am doing. Just don't like it that much.</p>\n<p>This pipeline just is more eh in my opinion.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">flipBracket</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">scoreClosing</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303075659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665274209
    },
    {
        "content": "<p>But yeah, it does work</p>",
        "id": 303075683,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665274232
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/4139\">https://github.com/roc-lang/roc/issues/4139</a> would mean it wouldn't need parens</p>",
        "id": 303076086,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665274623
    },
    {
        "content": "<p>Which definitely does help a bit. Though still feels less satisfying than I would hope</p>",
        "id": 303081344,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665280443
    },
    {
        "content": "<p>I'd agree that this would come up often enough (especially in data science) to add a builtin for it. Starting the function's name with <code>map</code> may also make it more discoverable so: <code>List.mapInner</code> or <code>list.mapInnermost</code>.</p>",
        "id": 303224498,
        "sender_full_name": "Anton",
        "timestamp": 1665393556
    }
]