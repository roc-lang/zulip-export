[
    {
        "content": "<p>In Roc, function with two arguments have type <code>a, b -&gt; c</code>. Other functional language usually  have <code>a -&gt; b -&gt; c</code> syntax to represent curried function. Is there a specific reason why Roc uses the first syntax for function types?</p>",
        "id": 448076591,
        "sender_full_name": "Cheezone",
        "timestamp": 1719727832
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/faq#curried-functions\">https://www.roc-lang.org/faq#curried-functions</a></p>",
        "id": 448076701,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719727969
    },
    {
        "content": "<p>In short, it can be very easy to write code using currying that's harder for beginners to understand, and there's isn't enough of a benefit to overcome that detriment</p>",
        "id": 448076739,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719728030
    },
    {
        "content": "<p>You could argue that Roc <em>does</em> write function signatures in that curried style, but only if you manually write a curried function, so this function</p>\n<div class=\"codehilite\"><pre><span></span><code>f = \\x -&gt; \\y -&gt; y + x\n</code></pre></div>\n<p>has the type</p>\n<div class=\"codehilite\"><pre><span></span><code>Num a -&gt; (Num a -&gt; Num a)\n</code></pre></div>\n<p>The real difference is that Roc doesn't automatically curry functions</p>",
        "id": 448099968,
        "sender_full_name": "Hannes",
        "timestamp": 1719743016
    },
    {
        "content": "<p>And Roc doesn't automatically curry functions for the reasons that Sam explained and linked to :)</p>",
        "id": 448100028,
        "sender_full_name": "Hannes",
        "timestamp": 1719743052
    },
    {
        "content": "<p>Honestly I must say that currying is one of the FP features I wish I had in every language. In Roc it is not that difficult to write curried functions because the calling syntax doesn't change I assume, but in languages like C# (and other C style languages) you have to type multiple parens  pairs for the required argument lists, for example <code>MyCurriedMethod(a)(b)(c)</code> (looks awful and most people I know even don't know what it means because it seems to by something different than a normal method call) instead of <code>MyCurriedMethod(a, b, c)</code>. Most of the time currying isn't needed, but at times I find it very handy and useful.</p>",
        "id": 448110985,
        "sender_full_name": "Akeshihiro",
        "timestamp": 1719750384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"725565\">@Akeshihiro</span> for us to call a curried function, we couldn't just call <code>foo a b</code>, either <code>foo</code> takes two arguments sans currying or there's a type error. With currying, it'd be either <code>(foo a) b</code> or <code>foo a |&gt; b</code></p>",
        "id": 448111530,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719750911
    },
    {
        "content": "<p>So it may not look as clean as you'd like in Roc</p>",
        "id": 448111548,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719750926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/231634-beginners/topic/I.20have.20a.20question.20about.20function.20types/near/448111530\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"725565\">Akeshihiro</span> for us to call a curried function, we couldn't just call <code>foo a b</code>, either <code>foo</code> takes two arguments sans currying or there's a type error. With currying, it'd be either <code>(foo a) b</code> or <code>foo a |&gt; b</code></p>\n</blockquote>\n<p>Well, then my assumption was wrong, thank you. But even then it is way better than in C style languages :D</p>",
        "id": 448113563,
        "sender_full_name": "Akeshihiro",
        "timestamp": 1719752593
    },
    {
        "content": "<p>I don't think <code>foo a |&gt; b</code> is right..... <code>b |&gt; (foo a)</code> maybe? Though I'm not sure if roc respects the parens there</p>",
        "id": 448141243,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719766632
    }
]