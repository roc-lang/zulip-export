[
    {
        "content": "<p>What is the idiomatic way to use effects from a platform in other modules? I have a module  which is called Api where I would like to use the Http effects from the platform. However that effect in only imported in app module. Is the plan that all effects should be passed as arguments if they are to be used in modules?</p>\n<p>And lets say I have a function called my_send! in the module Api. If this module is to take the cli.Http.send! function as argument I would have to be able to have this signature in my Api module, Request =&gt; Result Response _ but the types Request and Response will not be available either. I am a bit lost here. Looks like all modules should be pure and only the app module should do effects but that is very limiting.</p>",
        "id": 505719868,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1741970293
    },
    {
        "content": "<blockquote>\n<p>Is the plan that all effects should be passed as arguments if they are to be used in modules?</p>\n</blockquote>\n<p>Yes, currently. <del>We originally planned to implement \"module params\"</del> to make this easier but this is no longer in the plans for the new compiler, we now plan to \"pass around small stateful values that can have lots of functions on them without needing to carry around a ton of closures at runtime, and still be used concisely\", I presume with help from static dispatch (not implemented yet) <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 505729600,
        "sender_full_name": "Anton",
        "timestamp": 1741972929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> But how do you solve the type issue, the modules would still have to have access to Request, Response types. If I for example have an Api struct that would be defined in the Api module and on the Api struct I have a key called send!, then I would have to use the type signature Request =&gt; Response but I will not have access to the types?</p>",
        "id": 505730619,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1741973216
    },
    {
        "content": "<blockquote>\n<p><del>We originally planned to implement \"module params\"</del></p>\n</blockquote>\n<p>I forgot we did implement module params, <a href=\"https://github.com/imclerran/roc-ai/blob/3d4e7f1a4a41799bbbb12561ecc2074508200b11/package/Toolkit/WorldTimeApi.roc#L16\">this</a> is probably a helpful example.</p>",
        "id": 505731225,
        "sender_full_name": "Anton",
        "timestamp": 1741973394
    },
    {
        "content": "<blockquote>\n<p>But how do you solve the type issue</p>\n</blockquote>\n<p>let me think about that...</p>",
        "id": 505731315,
        "sender_full_name": "Anton",
        "timestamp": 1741973409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"518883\">@Ian McLerran</span> (in roc-ai) re-created his <a href=\"https://github.com/imclerran/roc-ai/blob/3d4e7f1a4a41799bbbb12561ecc2074508200b11/package/Shared.roc#L51\">own identical type</a>, it contains all the same fields as <a href=\"https://github.com/roc-lang/basic-cli/blob/f2c238d3b3b8f03da5c021aaf6868549759e4507/platform/InternalHttp.roc#L35\">InternalHttp.Response</a>. I think there may not be a more convenient solution for now.</p>",
        "id": 505736910,
        "sender_full_name": "Anton",
        "timestamp": 1741975098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> may know more</p>",
        "id": 505737182,
        "sender_full_name": "Anton",
        "timestamp": 1741975140
    },
    {
        "content": "<p>For Request and Response that works but for example in Tcp.connect! which has a Stream type that is an Opaque type. So the connect function would still cause issues then.</p>",
        "id": 505744062,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1741977478
    },
    {
        "content": "<p>We may also be using structural equality for opaque types, so it could work but yeah, I'm not sure</p>",
        "id": 505745436,
        "sender_full_name": "Anton",
        "timestamp": 1741977982
    },
    {
        "content": "<p>Let me check</p>",
        "id": 505745459,
        "sender_full_name": "Anton",
        "timestamp": 1741977995
    },
    {
        "content": "<p>No, it doesn't work</p>",
        "id": 505746439,
        "sender_full_name": "Anton",
        "timestamp": 1741978369
    },
    {
        "content": "<p>In the original <a href=\"https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?pli=1&amp;tab=t.0\">module params proposal</a> it looks like the opaque types could be imported:</p>\n<blockquote>\n<p>this means all Roc modules become architecturally platform-agnostic by default; the only way to couple them to a specific platform would be by using an effect or opaque type which only that platform offers.</p>\n</blockquote>",
        "id": 505747996,
        "sender_full_name": "Anton",
        "timestamp": 1741978919
    },
    {
        "content": "<p>I just realized that the same problem is for all external dependencies. For example if I depend on roc-json and I want to use Json.utf8 in some other module I need to send that as a parameter. This will be interesting to see how this will evolve since having to send even pure dependencies as parameters on objects (since I have heard that module parameters will be removed) feels messy already in my small code example.</p>",
        "id": 505748050,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1741978925
    },
    {
        "content": "<p>Yeah, looks like you can just import that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<a href=\"https://github.com/imclerran/roc-ai/blob/3d4e7f1a4a41799bbbb12561ecc2074508200b11/package/Chat.roc#L18\">https://github.com/imclerran/roc-ai/blob/3d4e7f1a4a41799bbbb12561ecc2074508200b11/package/Chat.roc#L18</a></p>",
        "id": 505748485,
        "sender_full_name": "Anton",
        "timestamp": 1741979065
    },
    {
        "content": "<p>Forgot to think of the obvious solution :p</p>",
        "id": 505748660,
        "sender_full_name": "Anton",
        "timestamp": 1741979141
    },
    {
        "content": "<p>Interesting, I am getting an error when trying that but I think it has to do with my project layout. </p>\n<p>Do you know how I can use a local platform for my project, currently I am just using the examples folder in basic-cli platform but that is not so nice, I would like to have a local build of basic-cli and import that in my roc project.  However when I try to import from my external project the same way as is done in examples <code>    pf: platform \"&lt;path-to-basic-cli&gt;/platform/main.roc\"</code> this just fails.</p>",
        "id": 505749586,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1741979457
    },
    {
        "content": "<p>I think you need to do the following in your local basic cli folder dirst:</p>",
        "id": 505756378,
        "sender_full_name": "Anton",
        "timestamp": 1741982074
    },
    {
        "content": "<p>./jump-start.sh<br>\nroc build.roc --linker=legacy</p>",
        "id": 505756403,
        "sender_full_name": "Anton",
        "timestamp": 1741982085
    },
    {
        "content": "<p>Can you share the error?</p>",
        "id": 505756610,
        "sender_full_name": "Anton",
        "timestamp": 1741982165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/231634-beginners/topic/How.20to.20use.20effects.20from.20platforms.20in.20other.20modules/near/505748660\">said</a>:</p>\n<blockquote>\n<p>Forgot to think of the obvious solution :p</p>\n</blockquote>\n<p>Your original question immediately made me think of module params</p>",
        "id": 505757134,
        "sender_full_name": "Anton",
        "timestamp": 1741982397
    },
    {
        "content": "<p>Now I got the platform import working, not sure what was wrong before.</p>",
        "id": 505760180,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1741983651
    },
    {
        "content": "<p>Haha yes, it was a very nice discussion, I guess the module params and the sending effects as params are nice patterns for testing your code. But now I am able to import both platform effects and other third part dependency into any module in my project with just<br>\n<code>import cli.Stdout or json.Json</code></p>",
        "id": 505760426,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1741983762
    }
]