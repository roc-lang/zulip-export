[
    {
        "content": "<p>As far as I can tell, you can't have a custom function to use with ! or ?, right? Any reason for this? I feel this feature would be <strong>so</strong> much more powerful if you could have a custom bind function. I wanted to create a monad-based parser package, and having a custom version of ! or ? would make consuming the API much better. Coming from Gleam and being used to its very powerful <code>use</code> feature (backpassing), I was kind of unpleasantly surprised that this wasn't already possible.</p>",
        "id": 474865441,
        "sender_full_name": "MystPi",
        "timestamp": 1728060671
    },
    {
        "content": "<p>We used to have backpassing, but we got rid of it because it was a source of confusion and it increased the Roc learning curve. We've been getting along great so far with just <code>!</code> and <code>?</code> :)</p>",
        "id": 474873893,
        "sender_full_name": "Anton",
        "timestamp": 1728064110
    },
    {
        "content": "<p>Personally, even though I was new to FP when learning Gleam, I was never confused about backpassing. It seemed quite logical since the desugaring rules are always the same.</p>",
        "id": 475010253,
        "sender_full_name": "MystPi",
        "timestamp": 1728155546
    },
    {
        "content": "<p>Anway—back to my original q—will there be a feature enabling custom version of ! and/or ? in Roc, something akin to</p>\n<div class=\"codehilite\" data-code-language=\"Croc\"><pre><span></span><code><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"p\">.</span><span class=\"n\">andThen</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">Parser</span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"p\">!</span><span class=\"w\"> </span><span class=\"p\">...</span>\n<span class=\"w\">    </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">parse_ident</span><span class=\"p\">!</span>\n<span class=\"w\">    </span><span class=\"n\">Parser</span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"p\">!</span><span class=\"w\"> </span><span class=\"p\">...</span>\n<span class=\"w\">    </span><span class=\"n\">Parser</span><span class=\"p\">.</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SomeAst</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 475010623,
        "sender_full_name": "MystPi",
        "timestamp": 1728155705
    },
    {
        "content": "<p>I actually kind of like that syntax that I just made up, haha</p>",
        "id": 475010733,
        "sender_full_name": "MystPi",
        "timestamp": 1728155756
    },
    {
        "content": "<p>There are no such plans currently. Only task and result</p>",
        "id": 475023118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728162498
    },
    {
        "content": "<p>Couldn't you just use tasks for that as-is?</p>",
        "id": 475023137,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728162528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"681650\">@MystPi</span> have you seen the purity inference proposals? </p>\n<p><a href=\"#narrow/stream/304641-ideas/topic/Purity.20inference.20proposal.20v3/near/468289211\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Purity.20inference.20proposal.20v3/near/468289211</a></p>",
        "id": 475026137,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728165611
    },
    {
        "content": "<p>I don't think these are really related to be clear.</p>\n<p>What <span class=\"user-mention\" data-user-id=\"681650\">@MystPi</span> wants is being able to chain no Task/Result types. For example generators, parsers, and the like. This is <code>ident &lt;- Parser.ident |&gt; Parser.andThen</code> in the backpassing world. So any Task or Result solution may not apply. That said, Task may apply if the parser is running Tasks. Most likely the parser is just over a Str, so no Task is wanted at all</p>",
        "id": 475027405,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728166848
    },
    {
        "content": "<p>This is a common monadic pattern</p>",
        "id": 475027417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728166863
    },
    {
        "content": "<p>The closest we have today is record builders</p>",
        "id": 475027422,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728166871
    },
    {
        "content": "<p>Like what is done for weaver</p>",
        "id": 475027424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728166878
    },
    {
        "content": "<p>Otherwise, this all has to be done manually</p>",
        "id": 475027432,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728166887
    },
    {
        "content": "<p>This also can be done pretty well with shadowing (or mutable variables), but is more verbose than implicit state thread like is done with monads.</p>",
        "id": 475027494,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728166928
    },
    {
        "content": "<p>If we get mutable varibles <code>_</code> suffix, the parser could be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">state_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"nv\">state_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">token</span><span class=\"w\"> </span><span class=\"nv\">state_</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"nv\">state_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">ident</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">parse_ident</span><span class=\"w\"> </span><span class=\"nv\">state_</span>\n<span class=\"nv\">state_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">token</span><span class=\"w\"> </span><span class=\"nv\">state_</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"nv\">state_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"nv\">state_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">SomeAst</span><span class=\"w\"> </span><span class=\"nv\">ident</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 475027542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728167001
    },
    {
        "content": "<p>A lot more verbose and less nice than having arbitrary monadic chaining with <code>!</code> or backpassing.</p>\n<p>I think if we get enough demand for it, we may one day open up <code>!</code> like is suggested above (or some other similar solution), but currently there has been minimal demand.</p>",
        "id": 475027617,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728167068
    },
    {
        "content": "<p>Got it—I see that Roc's syntax is still very much in the development stage, which I can def understand</p>",
        "id": 475108396,
        "sender_full_name": "MystPi",
        "timestamp": 1728228769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Generic.20version.20of.20!.20or.20.3F/near/475026137\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"681650\">MystPi</span> have you seen the purity inference proposals? </p>\n<p><a href=\"#narrow/stream/304641-ideas/topic/Purity.20inference.20proposal.20v3/near/468289211\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Purity.20inference.20proposal.20v3/near/468289211</a></p>\n</blockquote>\n<p>No I haven't, though after reading (skimming) it I can't say I really get what it's about, haha. Not sure how it applies to my question either</p>",
        "id": 475108438,
        "sender_full_name": "MystPi",
        "timestamp": 1728228824
    },
    {
        "content": "<blockquote>\n<p>I see that Roc's syntax is still very much in the development stage</p>\n</blockquote>\n<p>Yeah, it has changed a lot over the last year. Generally speaking, we start with the more minimal version of a feature (eg <code>!</code> just for task) before we expand to something more powerful (eg generic <code>!</code>)</p>",
        "id": 475110479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728230687
    }
]