[
    {
        "content": "<p>In Elm, if I were to define a nonempty list I'd probably write this <code>type NonemptyList a = NonemptyList a (List a)</code>. This way it's impossible to accidentally create one that is empty.</p>\n<p>In Roc I could define it the same way but it seems like it would come at a significant performance cost? For example, </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">-- Adding an item to the start of the list is slow</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">cons</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"></span>\n\n<span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">-- Adding an item to the start of the list is slow</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">tempList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">cons</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">tempList</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">-- Removing one item from the end of the list is slow</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">drop</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">tempList</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">-- This should never happen but I don't know how to prove it since we don't have list destructuring</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My question is, would it make more sense to just implement nonempty list unsafely, i.e. <code>type NonemptyList a = NonemptyList (List a)</code> and then write tests to try catching any potential mistakes?</p>",
        "id": 289934921,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658131850
    },
    {
        "content": "<p>Ooh! Interesting idea!</p>",
        "id": 289937663,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658133876
    },
    {
        "content": "<p>It might be possible to express <code>NonemptyList</code> just as \"an array which is guaranteed to not be empty\", which would allow equivalents of the <code>List</code> functions that otherwise have to return a <code>Result</code> to be total (e.g. <code>first</code>, <code>last</code>) to return the success value always.</p>",
        "id": 289938010,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658134142
    },
    {
        "content": "<p>Another thing I was thinking about to try more generally to port  linked list-based algorithms to Roc, is to store the elements in reverse inside the underlying array: Appending is fast as reallocation only happens whenever the list size doubles, whereas prepending always requires moving all elements around.</p>",
        "id": 289938236,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658134304
    },
    {
        "content": "<p>Oh, I didn't realize that appending is fast with Roc arrays. In that case I could define my nonempty list as <code>type NonemptyList a = NonemptyList (List a) a</code></p>",
        "id": 289938818,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658134660
    },
    {
        "content": "<p>yes</p>",
        "id": 289939541,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658135120
    },
    {
        "content": "<p>In that case, why can't Roc have list pattern matching like Elm has, only you'd be taking items off the end of the list instead of the start?</p>",
        "id": 289944024,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658138291
    },
    {
        "content": "<p>It definitely is possible to add pattern matching syntax for lists. It would be syntactic sugar over a combination of <code>List.sublist</code> + <code>List.get</code> where intermediate bounds checks could be removed in many cases.</p>\n<p>There was some talk about this in the past, but no consensus yet. (This is a 'nice to have'; other things have higher priority right now.)<br>\nOne problem with introducing too liberal pattern matching options, is that people will start using them without considering the potential performance characteristics.<br>\nRoc strives for \"abstraction without sacrificing performance\". In certain areas this is a tricky balancing act.</p>",
        "id": 289946130,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658139655
    },
    {
        "content": "<p>Yeah fair enough that it's a low implementation priority. But what do you mean by \"One problem with introducing too liberal pattern matching options, is that people will start using them without considering the potential performance characteristics.\"? You wrote that list pattern matching would remove a bounds check so wouldn't this be faster?</p>",
        "id": 289946332,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658139822
    },
    {
        "content": "<p>For instance, consider <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=baeec729aea945d2cd98387d1333ba8f\">this Rust array-based pattern match example</a>. It is a very elegant-looking implementation of a palindrome checker. However, it is only fast because Rust has a separate abstraction for 'slices' (a cheap view of a subpart of an array using just a pointer + length).</p>",
        "id": 289946339,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658139829
    },
    {
        "content": "<p>Without slices, it would require a lot of copying of the underlying array.</p>",
        "id": 289946395,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658139853
    },
    {
        "content": "<p>So it is more about what you do with the result of matching in the pattern, than about the pattern matching itself.</p>",
        "id": 289946630,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658140030
    },
    {
        "content": "<p>Does that make sense? <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 289946768,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658140127
    },
    {
        "content": "<p>Yeah, that makes sense. I think I'd still prefer to have list pattern matching even if it introduces a performance foot gun, since it only took me ~20 lines of code to end up with an unreachable pattern that I couldn't remove <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 289947009,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658140308
    },
    {
        "content": "<p>Though to be clear, I'm not suggesting the user should be able to destruct a single item from the start of a list, only from the end.</p>",
        "id": 289947104,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658140373
    },
    {
        "content": "<p>Never mind, it occurred to me that my nonempty list example isn’t a good motivating use case for list pattern matching since this would be something where I’d want it to run as fast as possible and therefore I wouldn’t be able to use the list pattern match anyway</p>",
        "id": 289966002,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658151431
    },
    {
        "content": "<p>yes I wanted to ask: can't you (easily?) express the logic in terms of map/keepIf/walk?</p>",
        "id": 289966266,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658151561
    },
    {
        "content": "<p>Also, we do plan to add slices eventually, which would fix the performance foot gun (at least to some extent)</p>",
        "id": 289977613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658156463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Nonempty.20list/near/289966266\">said</a>:</p>\n<blockquote>\n<p>yes I wanted to ask: can't you (easily?) express the logic in terms of map/keepIf/walk?</p>\n</blockquote>\n<p>True, folding over the list would work too. I used List.reverse because I figured it would be super optimised and maybe doing a fold (I'm guessing List.foldl in Elm is List.walk in Roc?) wouldn't be as efficient</p>",
        "id": 289984037,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658159105
    },
    {
        "content": "<p>Hmm. That's an interesting note on API.</p>\n<p>Reverse is actually quite costly because it does the actual work of reversing the list and doesn't just recreate a reverse iterator (or similar).</p>\n<p>Looping over the list with fold or map or etc, would likely be much more efficient.</p>",
        "id": 289992519,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658162942
    },
    {
        "content": "<p>Also, if we don't already have <code>walkReverse</code> we should definitely add it.</p>",
        "id": 289992594,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658162988
    },
    {
        "content": "<p>note here is the definition of reverse </p>\n<div class=\"codehilite\"><pre><span></span><code>reverse : List a -&gt; List a\nreverse = \\list -&gt;\n    reverseHelp list 0 (Num.subSaturated (List.len list) 1)\n\nreverseHelp = \\list, left, right -&gt;\n    if left &lt; right then\n        reverseHelp (List.swap list left right) (left + 1) (right - 1)\n    else\n        list\n</code></pre></div>",
        "id": 289992613,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658162997
    },
    {
        "content": "<p>and <code>walkBackwards</code> is a thing</p>",
        "id": 289992663,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658163006
    },
    {
        "content": "<p>I got Roc running on my Macbook and decided to try writing NonemptyList for real. Here's the result:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>NonemptyList</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"helloZig\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"w\"></span>\n\n\n<span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"></span>\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">OutOfBounds</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropLast</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">error</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">error</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">fromSingle</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n<span class=\"nv\">fromSingle</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n<span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"></span>\n<span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">OutOfBounds</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subSaturated</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n<span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subSaturated</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"></span>\n<span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"></span>\n<span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">dropLast</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"></span>\n<span class=\"nv\">dropLast</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">rest</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n<span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">leftValue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">leftValue</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">rightValue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">rightValue</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n<span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subSaturated</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n<span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"s\">\"D\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"B\"</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"s\">\"A\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"w\"></span>\n</code></pre></div>\n</div></div>\n<p>I couldn't figure out how to add type variables so for now NonemptyList can only contain Str. Also the reverse function probably isn't optimal. It does a lot of unneeded checks.</p>",
        "id": 290081821,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658228244
    },
    {
        "content": "<p>To add type variables you can write the definition as <code>NonemptyList a := { rest: (List a), lastItem: a }</code></p>",
        "id": 290086176,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658230838
    },
    {
        "content": "<p>Some other tips:</p>\n<ul>\n<li>You probably can use <code>List.reverse</code> inside your implementation of <code>reverse</code>.</li>\n<li>Maybe you can build <code>swap</code> on top of <code>get</code> and <code>set</code>. I'm not sure whether there are performance benefits from implementing it directly (I think that it is quite likely that LLVM is able to optimize both versions equally well, but this is only an educated guess).</li>\n</ul>",
        "id": 290086851,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658231223
    },
    {
        "content": "<p>And if you want it to be even more usable, implement <code>iterate</code>. Following that, you can implement <code>walk</code>, <code>walkUntil</code>, <code>find</code>, and many others on top of that. See <a href=\"https://github.com/rtfeldman/roc/blob/trunk/crates/compiler/builtins/roc/List.roc\">the source for List itself</a> for more inspiration. Only the functions which have a type signature without an implementation are implemented as \"native builtins\", the others are built on top of those inside Roc itself.</p>",
        "id": 290087201,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658231443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508003\">Qqwy / Marten</span> <a href=\"#narrow/stream/231634-beginners/topic/Nonempty.20list/near/290086176\">said</a>:</p>\n<blockquote>\n<p>To add type variables you can write the definition as <code>NonemptyList a := { rest: (List a), lastItem: a }</code></p>\n</blockquote>\n<p>That's what I tried but I got an error message that I didn't understand</p>",
        "id": 290087462,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658231613
    },
    {
        "content": "<p>You're welcome to share the error message :)</p>",
        "id": 290087570,
        "sender_full_name": "Anton",
        "timestamp": 1658231687
    },
    {
        "content": "<p>Here's the code with type vars</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"helloZig\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"w\"></span>\n\n\n<span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">OutOfBounds</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropLast</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">error</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">error</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">fromSingle</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">fromSingle</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"></span>\n<span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">OutOfBounds</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subSaturated</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subSaturated</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">lastItem</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">dropLast</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">dropLast</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">rest</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">leftValue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">leftValue</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastIndex</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">rightValue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"err\">@</span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lastItem</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">rightValue</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subSaturated</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NonemptyList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nonempty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">reverseHelp</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">swap</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">nonempty</span><span class=\"w\"></span>\n\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"s\">\"D\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"B\"</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"s\">\"A\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"w\"></span>\n</code></pre></div>\n</div></div>\n<p>and here's the error message</p>\n<div class=\"codehilite\"><pre><span></span><code>./roc examples/hello-world/zig-platform/helloZig.roc\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;index out of bounds: the len is 0 but the index is 0&#39;, compiler/mono/src/ir.rs:9147:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 290087742,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658231840
    },
    {
        "content": "<p>With RUST_BACKTRACE=1 </p>\n<div class=\"codehilite\"><pre><span></span><code>RUST_BACKTRACE=1 ./roc examples/hello-world/zig-platform/helloZig.roc\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;index out of bounds: the len is 0 but the index is 0&#39;, compiler/mono/src/ir.rs:9147:35\nstack backtrace:\n   0: _rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::panicking::panic_bounds_check\n   3: roc_mono::ir::match_on_lambda_set\n   4: roc_mono::ir::with_hole\n   5: roc_mono::ir::from_can\n   6: roc_mono::ir::specialize_variable_help\n   7: roc_mono::ir::specialize_external_help\n   8: roc_mono::ir::specialize_all\n   9: roc_load_internal::file::run_task\n  10: core::ops::function::FnOnce::call_once{{vtable.shim}}\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 290087863,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658231902
    },
    {
        "content": "<p>Can you make an issue for that? The compiler should never panic.<br>\nIf you have the time it would be great if you could minimize the code that reproduces the issue.</p>",
        "id": 290087941,
        "sender_full_name": "Anton",
        "timestamp": 1658231965
    },
    {
        "content": "<p><a href=\"https://github.com/rtfeldman/roc/issues/3584\">https://github.com/rtfeldman/roc/issues/3584</a> I figured out the mistake too. I did a find+replace on Str -&gt; a but that messed up <code>Str.joinWith</code> so it became <code>a.joinWith</code>.</p>",
        "id": 290089009,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658232594
    },
    {
        "content": "<p>Excellent, thanks for making the issue!</p>",
        "id": 290089263,
        "sender_full_name": "Anton",
        "timestamp": 1658232758
    },
    {
        "content": "<p>I've implemented nonempty versions of all the exposed List functions <a href=\"https://github.com/MartinSStewart/Nonempty\">https://github.com/MartinSStewart/Nonempty</a>.</p>\n<p>One exception is <code>List.range</code> which currently returns <code>[]</code> if you call it with something like this: <code>List.range 3 1</code>. I was wondering if it would make more sense to have it instead return <code>[ 3, 2, 1 ]</code>? The reason is that then <code>NonemptyList.range</code> could be guaranteed to always return a nonempty list.</p>",
        "id": 290111537,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658242819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> We discussed <code>List.range</code> boundaries in another stream earlier this month: <a href=\"#narrow/stream/231635-compiler-development/topic/List.2Erange.20boundaries/near/288637840\">https://roc.zulipchat.com/#narrow/stream/231635-compiler-development/topic/List.2Erange.20boundaries/near/288637840</a></p>",
        "id": 290112982,
        "sender_full_name": "jan kili",
        "timestamp": 1658243359
    },
    {
        "content": "<p>That link seems to be broken (or the conversation is private)?</p>",
        "id": 290113067,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658243394
    },
    {
        "content": "<p>Yes that stream is private, and we did not reach a final conclusion. Idk who admins that \"compiler development\" stream, but I think access is granted automatically when you contribute to the compiler.</p>",
        "id": 290113198,
        "sender_full_name": "jan kili",
        "timestamp": 1658243445
    },
    {
        "content": "<p>The topic was a spin-off of another compiler-related discussion, but it probably should be moved out into public - <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a> maybe?</p>",
        "id": 290113271,
        "sender_full_name": "jan kili",
        "timestamp": 1658243474
    },
    {
        "content": "<p>I'm guessing my one github issue doesn't count? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290113305,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658243491
    },
    {
        "content": "<p>Haha I guess not</p>",
        "id": 290113347,
        "sender_full_name": "jan kili",
        "timestamp": 1658243511
    },
    {
        "content": "<p>When my first compiler PR was merged I was invited</p>",
        "id": 290113419,
        "sender_full_name": "jan kili",
        "timestamp": 1658243523
    },
    {
        "content": "<p>The smoky back room where the llvm sausage gets made</p>",
        "id": 290113483,
        "sender_full_name": "jan kili",
        "timestamp": 1658243554
    },
    {
        "content": "<p>I don't understand half the words in there but it's fun to watch</p>",
        "id": 290113510,
        "sender_full_name": "jan kili",
        "timestamp": 1658243568
    },
    {
        "content": "<p>Don't promote it too much or there's going to be hacktoberfest-esque PR spam from people in order to get in <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 290113647,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658243629
    },
    {
        "content": "<p>Can someone with Zulip powers please move that \"<code>List.range</code> boundaries\" topic into the appropriate public stream?</p>",
        "id": 290113649,
        "sender_full_name": "jan kili",
        "timestamp": 1658243629
    },
    {
        "content": "<p>I moved it to ideas</p>",
        "id": 290113832,
        "sender_full_name": "Anton",
        "timestamp": 1658243700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> you rock. <a href=\"#narrow/stream/304641-ideas/topic/List.2Erange.20boundaries/near/290113775\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/List.2Erange.20boundaries/near/290113775</a></p>",
        "id": 290113852,
        "sender_full_name": "jan kili",
        "timestamp": 1658243707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508003\">Qqwy / Marten</span> <a href=\"#narrow/stream/304641-ideas/topic/List.2Erange.20boundaries/near/290117288\">said</a>:</p>\n<blockquote>\n<p>Unfortunately nothing prevents people from passing in ranges which are outside of the srange of the list, say <code>List.range [1,2,3] 20 100</code>.</p>\n</blockquote>\n<p>They meant <code>List.sublist</code>.<br>\nThis is a good point, <span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span>, will you return a <code>Result</code> from functions like <code>List.sublist</code>?</p>",
        "id": 290125893,
        "sender_full_name": "jan kili",
        "timestamp": 1658248332
    },
    {
        "content": "<p><code>sublist : NonemptyList a, { start: Nat, len: Nat } -&gt; List a</code></p>\n<p>In general, any List function that returns a sub list of the original list was converted to <code>NonemptyList a -&gt; List a</code></p>",
        "id": 290126170,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658248453
    },
    {
        "content": "<p>I realized if list pattern matching existed, I would have used it in the demo I'm giving tomorrow: <a href=\"https://gist.github.com/rtfeldman/8c83efd5e9e091254e3f842f2be217b7\">https://gist.github.com/rtfeldman/8c83efd5e9e091254e3f842f2be217b7</a></p>",
        "id": 290169557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658269767
    }
]