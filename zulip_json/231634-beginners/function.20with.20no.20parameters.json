[
    {
        "content": "<p>how can a function that has no parameters be defined? from what i can tell from the tutorial, values become functions when either they have parameters, or call other functions. am I misunderstanding something?</p>",
        "id": 403203276,
        "sender_full_name": "noonien",
        "timestamp": 1700497181
    },
    {
        "content": "<p>It can't. The normal convention is to pass an empty record to the function.</p>",
        "id": 403203889,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700497397
    },
    {
        "content": "<p>So it still has one argument</p>",
        "id": 403203947,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700497416
    },
    {
        "content": "<p>interesting</p>",
        "id": 403204053,
        "sender_full_name": "noonien",
        "timestamp": 1700497443
    },
    {
        "content": "<p>it should be a very rare use case, since Roc functions can't have side effects <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 403204197,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700497488
    },
    {
        "content": "<p>Simple example from builtins: <a href=\"https://www.roc-lang.org/builtins/Dict#empty\">https://www.roc-lang.org/builtins/Dict#empty</a></p>",
        "id": 403204229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700497499
    },
    {
        "content": "<p>well, with no side effects, it would basically be useless, but I'm wondering what happens when calling platform functions that do have side effects</p>",
        "id": 403204312,
        "sender_full_name": "noonien",
        "timestamp": 1700497525
    },
    {
        "content": "<p>maybe something like getting the environment variables</p>",
        "id": 403204353,
        "sender_full_name": "noonien",
        "timestamp": 1700497541
    },
    {
        "content": "<p>or something simpler, like getting the time</p>",
        "id": 403204380,
        "sender_full_name": "noonien",
        "timestamp": 1700497553
    },
    {
        "content": "<p>Getting the environment variables or or time actually ends up not hitting this due to needing to await a task. So it would be something like</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"nx\">Time</span><span class=\"p\">.</span><span class=\"nx\">now</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">...</span>\n</code></pre></div>",
        "id": 403204691,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700497663
    },
    {
        "content": "<p>seems like the reason that function is a task is because of this</p>",
        "id": 403204857,
        "sender_full_name": "noonien",
        "timestamp": 1700497730
    },
    {
        "content": "<p>I don't follow exactly what you mean.</p>",
        "id": 403204927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700497762
    },
    {
        "content": "<p>I don't see any reason for <a href=\"http://Time.now\">Time.now</a> to return a task on most platforms.</p>",
        "id": 403205089,
        "sender_full_name": "noonien",
        "timestamp": 1700497816
    },
    {
        "content": "<p>nor why it would receive a callback</p>",
        "id": 403205158,
        "sender_full_name": "noonien",
        "timestamp": 1700497839
    },
    {
        "content": "<p>Oh, it has to in roc. There is no other option. It is not a pure function. Every I/o primitive in roc has to be wrapped in the effect API.</p>",
        "id": 403205252,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700497877
    },
    {
        "content": "<p>i see, and the effect API only works with tasks?</p>",
        "id": 403205302,
        "sender_full_name": "noonien",
        "timestamp": 1700497900
    },
    {
        "content": "<p>can the platform not supply no-argument functions to roc?</p>",
        "id": 403205331,
        "sender_full_name": "noonien",
        "timestamp": 1700497913
    },
    {
        "content": "<p>Task is built on top of the effect API. It is just used everywhere for convenience of being able to handle errors.</p>",
        "id": 403205472,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700497954
    },
    {
        "content": "<blockquote>\n<p>can the platform not supply no-argument functions to roc?</p>\n</blockquote>\n<p><code>Time.now</code> would be an example of an effect that takes no arguments. <code>Stdout.line</code> would be an example of the reverse. 1 input with no result.</p>",
        "id": 403205671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700498038
    },
    {
        "content": "<p>ah, i see, i read that code wrong, the function was not an argument to <a href=\"http://Time.now\">Time.now</a>, but to task.await</p>",
        "id": 403205935,
        "sender_full_name": "noonien",
        "timestamp": 1700498125
    },
    {
        "content": "<p>Yes, sorry about the confusion.</p>",
        "id": 403206040,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700498160
    },
    {
        "content": "<p>but, how does Task.await call a function with no arguments?</p>",
        "id": 403206101,
        "sender_full_name": "noonien",
        "timestamp": 1700498169
    },
    {
        "content": "<p>Effects aren't technically functions. They are more like futures. So <code>Time.now</code> would actually just be a constant. Eventually, this code will get to builtin effect stuff that the compiler implements internally to connect the platform to the application. I forget the exact function that is call, but it is similar to await and takes an effect and a callback.</p>",
        "id": 403206513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700498304
    },
    {
        "content": "<p>This will then call a <code>roc_fx_TimeNow</code> function that the platform exposes to roc and do what is necessary to wrap that up as an effect.</p>",
        "id": 403206664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700498362
    },
    {
        "content": "<p>i see</p>",
        "id": 403206807,
        "sender_full_name": "noonien",
        "timestamp": 1700498408
    },
    {
        "content": "<p>hmm, are Tags functions? or can they just be called as functions?</p>",
        "id": 403207200,
        "sender_full_name": "noonien",
        "timestamp": 1700498553
    },
    {
        "content": "<p>A tag name is also a function for generating that tag variant.</p>",
        "id": 403207550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700498693
    },
    {
        "content": "<p>Enable you to something like <code>|&gt; List.map Ok</code> which should wrap all of the elements in a list with the <code>Ok</code> tag.</p>",
        "id": 403207710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700498761
    },
    {
        "content": "<p>i'm guessing <code>|&gt; List.map None</code> would not work, requiring <code>|&gt; List.map \\_ -&gt; None</code> instead</p>",
        "id": 403208007,
        "sender_full_name": "noonien",
        "timestamp": 1700498858
    },
    {
        "content": "<p>Correct, if you had a <code>None</code> variant that takes no args, I think it only gets a constant of the variant rather than a function cause there would be no valid way to generate it with a function.</p>",
        "id": 403208411,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499015
    },
    {
        "content": "<p>the convention is that every identifier that starts with an uppercase letter is a tag, right?</p>",
        "id": 403208610,
        "sender_full_name": "noonien",
        "timestamp": 1700499091
    },
    {
        "content": "<p>Uppercase is a Type in general. So you might see </p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>But you would also see uppercase for a tuple or record:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Tup</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">)</span>\n<span class=\"nv\">Person</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">height</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 403209159,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499282
    },
    {
        "content": "<p>Oh, I guess uppercase is also used for module names as in <code>List.map</code></p>",
        "id": 403209499,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499404
    },
    {
        "content": "<p>i was a bit confused about this in the repl</p>\n<div class=\"codehilite\"><pre><span></span><code>» foo = \\n -&gt; &quot;hello \\(n)&quot;\n : Str -&gt; Str\n\n» foo\n : Str -&gt; Str\n\n» Bool\nBool : [Bool]\n\n» Bool.true\nBool.true : Bool\n</code></pre></div>",
        "id": 403209623,
        "sender_full_name": "noonien",
        "timestamp": 1700499455
    },
    {
        "content": "<p>you can refer to identifiers with lowercase first letter, but not with uppercase, because they are turned into tags</p>",
        "id": 403209803,
        "sender_full_name": "noonien",
        "timestamp": 1700499523
    },
    {
        "content": "<p>Yes, all value identifiers are required to start with lower case letters in roc.</p>",
        "id": 403209872,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499554
    },
    {
        "content": "<p>except type identifiers</p>",
        "id": 403209912,
        "sender_full_name": "noonien",
        "timestamp": 1700499572
    },
    {
        "content": "<p>and module identifiers</p>",
        "id": 403209922,
        "sender_full_name": "noonien",
        "timestamp": 1700499577
    },
    {
        "content": "<p>So, roc will automatically infer types. If you just type an uppercase name into code somewhere, it has to be a variant of a tag.</p>",
        "id": 403210073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499617
    },
    {
        "content": "<p>That is what happens when you just type a capital word into the repl.</p>",
        "id": 403210115,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499635
    },
    {
        "content": "<p>yup</p>",
        "id": 403210152,
        "sender_full_name": "noonien",
        "timestamp": 1700499646
    },
    {
        "content": "<p>is there a way to find the definition of a type?</p>",
        "id": 403210223,
        "sender_full_name": "noonien",
        "timestamp": 1700499669
    },
    {
        "content": "<p>say you define the following type:</p>\n<div class=\"codehilite\"><pre><span></span><code>Tup : (Str, U8)\n</code></pre></div>\n<p>Is it possible to find out what a Tup is, in the repl?</p>",
        "id": 403210447,
        "sender_full_name": "noonien",
        "timestamp": 1700499731
    },
    {
        "content": "<p>Hmm... I don't think so</p>",
        "id": 403210581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499776
    },
    {
        "content": "<p>fair enough</p>",
        "id": 403210731,
        "sender_full_name": "noonien",
        "timestamp": 1700499814
    },
    {
        "content": "<p>Good feature idea though</p>",
        "id": 403210784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499837
    },
    {
        "content": "<p>May be hard given we are a fully compiled language and not an interpreter though.</p>",
        "id": 403210896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700499874
    },
    {
        "content": "<p>I'm actually working on a simple language myself, and I'm trying to understand how roc works and what tradeoffs have been made. simplicity always comes at a cost, but the cost can most of the time not be an issue</p>",
        "id": 403210957,
        "sender_full_name": "noonien",
        "timestamp": 1700499902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/function.20with.20no.20parameters/near/403210896\">said</a>:</p>\n<blockquote>\n<p>May be hard given we are a fully compiled language and not an interpreter though.</p>\n</blockquote>\n<p>yes, this would only be a repl feature</p>",
        "id": 403211027,
        "sender_full_name": "noonien",
        "timestamp": 1700499928
    },
    {
        "content": "<p>Yeah this is one thing I miss from lean. Using <code>#eval</code> or <code>#check</code> in the editor and seeing live results in the editor is amazing.</p>",
        "id": 403211067,
        "sender_full_name": "Jacob",
        "timestamp": 1700499945
    }
]