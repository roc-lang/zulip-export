[
    {
        "content": "<p>When I try to decode an aliased opaque type it crashes the compiler<br>\nI made this repro example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">UserName</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Eq</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">isEq</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">userNameEq</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Decoding</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">decoder</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">userNameDecode</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"nv\">userNameEq</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">UserName</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">UserName</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"nv\">userNameDecode</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">bytes</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">fromBytesPartial</span><span class=\"w\"> </span><span class=\"nv\">fmt</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">mapResult</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">UserName</span>\n\n<span class=\"err\">#</span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">fine</span>\n<span class=\"kt\">Alias</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">user</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">UserName</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">prog</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">        {\"</span><span class=\"nv\">user</span><span class=\"s\">\":\"</span><span class=\"nv\">name</span><span class=\"s\">\"}</span>\n<span class=\"s\">        \"\"\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Alias</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">prog</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">fromBytes</span><span class=\"w\"> </span><span class=\"kt\">TotallyNotJson</span><span class=\"nf\">.</span><span class=\"nv\">json</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">user</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">UserName</span><span class=\"w\"> </span><span class=\"s\">\"name\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">will</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">compiler</span>\n<span class=\"kt\">AliasBad</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">UserName</span>\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">prog</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"s\">\"name\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">AliasBad</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">prog</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">fromBytes</span><span class=\"w\"> </span><span class=\"kt\">TotallyNotJson</span><span class=\"nf\">.</span><span class=\"nv\">json</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">UserName</span><span class=\"w\"> </span><span class=\"s\">\"name\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"kt\">Ok</span>\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;ambient functions don&#39;t unify&#39;, /home/eli/Code/roc/roc/crates/compiler/unify/src/unify.rs:201:18\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/std/src/panicking.rs:593:5\n   1: core::panicking::panic_fmt\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/core/src/panicking.rs:67:14\n   2: panic_display&lt;&amp;str&gt;\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/core/src/panicking.rs:150:5\n   3: roc_unify::unify::Unified&lt;M&gt;::expect_success\n             at ./crates/compiler/unify/src/unify.rs:201:18\n   4: compact_lambda_set&lt;roc_late_solve::LatePhase&gt;\n             at ./crates/compiler/solve/src/specialize.rs:577:73\n   5: compact_lambda_sets_of_vars&lt;roc_late_solve::LatePhase&gt;\n             at ./crates/compiler/solve/src/specialize.rs:434:37\n   6: unify\n             at ./crates/compiler/late_solve/src/lib.rs:403:17\n   7: roc_mono::ir::Env::unify\n             at ./crates/compiler/mono/src/ir.rs:1437:33\n   8: specialize_proc_help\n             at ./crates/compiler/mono/src/ir.rs:3506:20\n   9: specialize_variable\n             at ./crates/compiler/mono/src/ir.rs:4049:9\n  10: call_by_name_help\n             at ./crates/compiler/mono/src/ir.rs:8958:31\n  11: call_by_name\n             at ./crates/compiler/mono/src/ir.rs:8671:17\n  12: with_hole\n             at ./crates/compiler/mono/src/ir.rs:5420:21\n  13: assign_to_symbol\n             at ./crates/compiler/mono/src/ir.rs:8486:23\n  14: from_can\n             at ./crates/compiler/mono/src/ir.rs:6949:13\n  15: specialize_proc_help\n             at ./crates/compiler/mono/src/ir.rs:3541:32\n  16: specialize_variable\n             at ./crates/compiler/mono/src/ir.rs:4049:9\n  17: specialize_external_help\n             at ./crates/compiler/mono/src/ir.rs:3198:9\n  18: specialize_external_specializations\n             at ./crates/compiler/mono/src/ir.rs:3178:13\n  19: specialize_all\n             at ./crates/compiler/mono/src/ir.rs:3040:9\n  20: roc_load_internal::file::make_specializations\n             at ./crates/compiler/load_internal/src/file.rs:5745:13\n  21: roc_load_internal::file::run_task\n             at ./crates/compiler/load_internal/src/file.rs:6498:17\n  22: worker_task\n             at ./crates/compiler/load_internal/src/file.rs:2048:34\n  23: roc_load_internal::file::load_multi_threaded::{{closure}}::{{closure}}\n             at ./crates/compiler/load_internal/src/file.rs:1788:25\n  24: crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}}\n             at /home/eli/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.16/src/thread.rs:440:31\n  25: core::ops::function::FnOnce::call_once{{vtable.shim}}\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/core/src/ops/function.rs:250:5\n  26: &lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/alloc/src/boxed.rs:1993:9\n</code></pre></div>\n<p>Interestingly in my original application where this cropped up the error is different, perhaps that's because the opaque type takes type args?:<br>\nCode:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">TT</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">prog</span><span class=\"nf\">=</span><span class=\"s\">\"\"\"{\"</span><span class=\"nv\">prog</span><span class=\"s\">\":\"</span><span class=\"nv\">hi</span><span class=\"s\">\"}\"\"\"</span><span class=\"nf\">|&gt;</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"nf\">:</span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">prog</span><span class=\"nf\">:</span><span class=\"kt\">TT</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"nf\">=</span><span class=\"nv\">prog</span><span class=\"nf\">|&gt;</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">fromBytes</span><span class=\"w\"> </span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">json</span>\n<span class=\"w\">    </span><span class=\"nv\">rec</span><span class=\"nf\">==</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">prog</span><span class=\"nf\">:</span><span class=\"kt\">Union</span><span class=\"nf\">.</span><span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"s\">\"hi\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Makes this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x02\\x00\\x00\\x00%\\x00\\x00\\x00y0za5-\\xc3Y&quot;), definition of value binding ValueId(22): could not find func in module ModName(&quot;UserApp&quot;) with name FuncName(&quot;\\x15\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\xa8,\\xfbK\\xdc\\xea\\xc1\\xe8&quot;)&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5761:19\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/std/src/panicking.rs:593:5\n   1: core::panicking::panic_fmt\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/core/src/panicking.rs:67:14\n   2: build_procedures_help\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:5761:19\n   3: build_procedures_expose_expects\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:5675:25\n   4: expect_mono_module_to_dylib\n             at ./crates/repl_expect/src/run.rs:675:24\n   5: test\n             at ./crates/cli/src/lib.rs:518:43\n   6: main\n             at ./crates/cli/src/main.rs:80:17\n   7: core::ops::function::FnOnce::call_once\n             at /rustc/d5c2e9c342b358556da91d61ed4133f6f50fc0c3/library/core/src/ops/function.rs:250:5\n</code></pre></div>",
        "id": 427263542,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710720657
    },
    {
        "content": "<p>ouch, that’s a nasty bug</p>",
        "id": 427287513,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1710726880
    },
    {
        "content": "<p>I've got a few more for you too ;)</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">optionToEncode</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encoder</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\">  </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Encoding</span><span class=\"p\">,</span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">EncoderFormatting</span>\n<span class=\"nv\">optionToEncode</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nv\">fmt</span>\n<span class=\"w\">        </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">bytes</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">encoded</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">dat</span><span class=\"nf\">:</span><span class=\"p\">{</span><span class=\"nv\">maybe</span><span class=\"nf\">:</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">u8</span><span class=\"p\">,</span><span class=\"nv\">other</span><span class=\"nf\">:</span><span class=\"kt\">Str</span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"nv\">dat</span><span class=\"nf\">=</span><span class=\"p\">{</span><span class=\"nv\">maybe</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">none</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"nv\">other</span><span class=\"nf\">:</span><span class=\"s\">\"hi\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">toBytes</span><span class=\"w\"> </span><span class=\"nv\">dat</span><span class=\"w\"> </span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">json</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"s\">\"{</span><span class=\"se\">\\\"</span><span class=\"s\">other</span><span class=\"se\">\\\"</span><span class=\"s\">:</span><span class=\"se\">\\\"</span><span class=\"s\">hi</span><span class=\"se\">\\\"</span><span class=\"s\">}\"</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">encoded</span>\n</code></pre></div>\n<p>This causes:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;unspecialized lambda sets left over during resolution:\nLambdaSet([] + (&lt;939&gt;FlexAble(fmt, [`Encode.Encoding`]):`Encode.toEncoder`:2), ^&lt;942&gt;),\n UlsOfVar(VecMap { keys: [939, 971], values: [VecSet { elements: [938, 941] }, VecSet { elements: [970, 973] }] })&#39;,\n crates/compiler/mono/src/layout.rs:2065:17\n</code></pre></div>\n<p>Interestingly encoding a <code>Some</code> value works fine.</p>\n<p>I've modified the Core.json record encoder slightly so that it just doesn't include the field if it gets a 0 byte response but even just encoding the Option on it's own fails with the exact same error:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">encoded</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">dat</span><span class=\"nf\">:</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">u8</span>\n<span class=\"w\">        </span><span class=\"nv\">dat</span><span class=\"nf\">=</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"kt\">None</span>\n<span class=\"w\">        </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">toBytes</span><span class=\"w\"> </span><span class=\"nv\">dat</span><span class=\"w\"> </span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">json</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">encoded</span>\n</code></pre></div>",
        "id": 427369744,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710747127
    },
    {
        "content": "<p>Interestingly with some more testing i found that if i remove the encode from the <code>Some</code> encoder I don't get that error.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">optionToEncode</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encoder</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\">  </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Encoding</span><span class=\"p\">,</span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">EncoderFormatting</span>\n<span class=\"nv\">optionToEncode</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"hi\"</span><span class=\"nf\">|&gt;</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"nf\">|&gt;</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I was able to run the tests, but it mostly throws this error depending on how long the list i return in the encoder is.</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;misaligned pointer dereference: address must be a multiple of 0x8 but is 0x7ffff7e2c03c&#39;, crates/repl_expect/src/app.rs:57:45\n</code></pre></div>",
        "id": 427373109,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710747863
    },
    {
        "content": "<blockquote>\n<p><code>thread 'main' panicked at 'misaligned pointer dereference: address must be a multiple of 0x8 but is 0x7ffff7e2c03c', crates/repl_expect/src/app.rs:57:45</code></p>\n</blockquote>\n<p>Does this also happen with <a href=\"https://github.com/roc-lang/roc/issues/6100#issuecomment-1839490568\">a release compiler</a>?</p>",
        "id": 427417462,
        "sender_full_name": "Anton",
        "timestamp": 1710756490
    },
    {
        "content": "<p>Oh, haven't tested that, I can do that shortly though.</p>",
        "id": 427418018,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710756600
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> I got some improvement there. <br>\nThe  version that just returns lists no longer has weird pointer errors.<br>\nHowever if i actually try to encode in the <code>Some</code> branch it still gives me this error.</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, crates/compiler/mono/src/ir.rs:6143:56\n</code></pre></div>\n<p>Which looks like it's the same as the lambda set error from before, it just isn't being caught by the debug asserts</p>",
        "id": 427423286,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710757564
    },
    {
        "content": "<p>The debug asserts probably fail earlier, at the first panic you got</p>",
        "id": 427492502,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1710770802
    },
    {
        "content": "<p>Also, pretty worrying that we get a bad pointer deref in dev but not in release... we should fix the one in dev</p>",
        "id": 427492604,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1710770833
    },
    {
        "content": "<p>Well I figured out what the second set of errors were.. in my type annotations I had u8 instead of U8 <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 427877348,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710924306
    }
]