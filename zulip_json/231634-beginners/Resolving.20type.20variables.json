[
    {
        "content": "<p>I'm getting a type mismatch compiler error that I do not understand... Sorry for the non-minimal example but I don't know how to minimize it. With the following code</p>\n<div class=\"codehilite\"><pre><span></span><code>doesNotCompile: RawStr -&gt; Parser RawStr\ndoesNotCompile = \\rawStr -&gt;\n    chompString rawStr\n        |&gt; mapChompedRawStr (\\s, _ -&gt; s)\n</code></pre></div>\n<p>I get the compiler error (and others of the same kind)</p>\n<div class=\"codehilite\"><pre><span></span><code>This 1st argument to mapChompedRawStr has an unexpected type:\n\n236│      chompString rawStr\n          ^^^^^^^^^^^^^^^^^^\n\nThis chompString call produces:\n\n    Parser {}\n\nBut mapChompedRawStr needs its 1st argument to be:\n\n    Parser a\n\nTip: The type annotation uses the type variable a to say that this\ndefinition can produce any type of value. But in the body I see that\nit will only produce a record value of a single specific type. Maybe\nchange the type annotation to be more specific? Maybe change the code\nto be more general?\n</code></pre></div>\n<p>But should not <code>a</code> resolve to <code>{}</code>? Or am I missunderstanding something?</p>\n<p>If someone wants to try it out, you can clone <a href=\"https://github.com/Subtlesplendor/roc-parser\">roc-parser</a> and uncomment <code>doesNotCompile</code> at the end of file <code>package/Parser/Utf8.roc</code>. Then <br>\n<code>roc check package/Parser/Utf8.roc</code>.</p>",
        "id": 341799737,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678802008
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  definitely looks like a type checker bug to me</p>",
        "id": 341801967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678802483
    },
    {
        "content": "<p>yeah, if you delete the implementation of <code>mapChompedRawStr</code> (so only the <code>mapChompedRawStr :</code> type annotation remains), it type-checks</p>",
        "id": 341802576,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678802616
    },
    {
        "content": "<p>so that means the bug has to do with how the type annotation and the implementation get unified</p>",
        "id": 341802674,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678802638
    },
    {
        "content": "<p>Interesting</p>",
        "id": 341802721,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678802643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> is on vacation right now, but he's an absolute master at zapping type checker bugs, so he'd be the best person to look into this once he gets back <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 341803044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678802699
    },
    {
        "content": "<p>Great then I will wait for his expertise <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 341804922,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678803006
    },
    {
        "content": "<p>Okay, so this is due to some changes we recently made with regard to how (and when) functions can be generalized. In short, the premise is that</p>\n<div class=\"codehilite\"><pre><span></span><code>f = \\x -&gt; x   # f : a -&gt; a for any `a`\n\ng = f   # g : w1 -&gt; w1 for exactly *one* `w1`, not any `w1`\n\ng1 = \\x -&gt; f x   # g1 : b -&gt; b for any `b` again\n</code></pre></div>\n<p>If you update your definition of <code>mapChompedRawStr</code> to</p>\n<div class=\"codehilite\"><pre><span></span><code>mapChompedRawStr : Parser a, (RawStr, a -&gt; b) -&gt; Parser b\nmapChompedRawStr = \\parser, mapper -&gt;\n    Parser.Advanced.Utf8.mapChompedRawStr parser mapper\n</code></pre></div>\n<p>things will work as you expect.</p>\n<p>I have a plan for how to improve error messages in this case, but it hasn't been implemented yet. If you're interested in why things are this way, check out <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Let-generalization.20-.20let.27s.20not.3F\">#ideas &gt; Let-generalization - let's not?</a></p>",
        "id": 343130769,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679321582
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 343137392,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1679322916
    }
]