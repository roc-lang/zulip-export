[
    {
        "content": "<p>Is there a way to control the subtyping behaviour of functions in roc?</p>\n<p>I have the following function which is meant to be an <code>or</code> operator on a decoder. Try <code>decoderA</code> if that fails, then try <code>decoderB</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code>or = \\decoderA, decoderB -&gt;\n    \\data -&gt;\n        when decoderA data is\n            Ok a -&gt; Ok a\n            _ -&gt; decoderB data\n</code></pre></div>\n<p>I want the return type of this function to be <code>c</code>, where:</p>\n<div class=\"codehilite\"><pre><span></span><code>c: [\n    a,\n    b\n]\n</code></pre></div>\n<p>so the type annotation of <code>or</code> to be: <br>\n<code>or: JsonDecoder a, JsonDecoder b -&gt; JsonDecoder c</code></p>\n<p>When I have this type annotation I get an error telling me all my branches of my when must be the same type. Is this possible in roc or am I missing something? Cheers :)</p>\n<p>Other type defs:</p>\n<div class=\"codehilite\"><pre><span></span><code>JsonDecoder t : Json -&gt; Result t DecodingErrors\nJson : [\nString Str,\nNumber U64\n...etc\n]\n</code></pre></div>",
        "id": 455073561,
        "sender_full_name": "Monica",
        "timestamp": 1722330258
    },
    {
        "content": "<p>I think because return types of <code>decoderA</code>  and <code>decoderB</code> are different, the way to go is to use custom tags to distinguish them.<br>\nSo you want the <code>c</code> type to be</p>\n<div class=\"codehilite\"><pre><span></span><code>c: [\n    A a,\n    B b\n]\n</code></pre></div>\n<p>and <code>decoderA</code> returns <code>[A a]</code> and <code>decoderB</code> returns <code>[B b]</code>.</p>",
        "id": 455082931,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722332420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> beat me to it but I'll leave my example here anyway :)</p>\n<p>So, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Go</span>\n<span class=\"w\">    </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stop</span>\n</code></pre></div>\n<p>But this does not:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Go</span>\n<span class=\"w\">    </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n</code></pre></div>\n<p>But that one can be modified to:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Go</span>\n<span class=\"w\">    </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stop</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n</code></pre></div>",
        "id": 455083278,
        "sender_full_name": "Anton",
        "timestamp": 1722332518
    },
    {
        "content": "<p>There isn't subtyping in Roc, tho it can look like it has. if  <code>decoderB data</code> doesn't return the same type as <code>decoderA data</code>, it will be a type mismatch. You generally solve that by wrapping the returned values with a different tag for each different return value, so that the your function returns the union of those tags (tag union). In your example:</p>\n<div class=\"codehilite\"><pre><span></span><code>c: [\n    a,\n    b\n]\n</code></pre></div>\n<p>should be:</p>\n<div class=\"codehilite\"><pre><span></span><code>c: [\n    TagFromDecoderA a,\n    TagFromDecoderB b\n]\n</code></pre></div>\n<p>in the pattern match, you would apply the tag:</p>\n<div class=\"codehilite\"><pre><span></span><code>      when decoderA data is\n            Ok a -&gt;  TagFromDecoderA (Ok a)\n            _ -&gt; TagFromDecoderB (decoderB data)\n</code></pre></div>\n<p>Without the actual tag, you couldn't tell if your function returned type <code>a</code> or <code>b</code>. Other languages solve that by having runtime type information, but in Roc, there isn't such thing.</p>\n<p>I haven't used decoders, but that is the general solution.<br>\nIf you look at the Json tag union you pasted, it has tags \"String\" and \"Number\" (which are not some special Roc types)</p>",
        "id": 455083299,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1722332521
    },
    {
        "content": "<p>Wow, you guys were fast <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 455083533,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1722332560
    },
    {
        "content": "<p>thanks all for your answers! I think I was making it far more complicated than it needed to be...</p>\n<p>What I was really wanting to do and managed to get working was:</p>\n<div class=\"codehilite\"><pre><span></span><code>or : JsonDecoder a, JsonDecoder a -&gt; JsonDecoder a\nor = \\decoderA, decoderB -&gt;\n    \\data -&gt;\n        when decoderA data is\n            Ok _ -&gt; decoderA data\n            _ -&gt; decoderB data\n</code></pre></div>\n<p>the way I call this function is by passing in values like this: </p>\n<div class=\"codehilite\"><pre><span></span><code>decoderA : JsonDecoder A\ndecoderB : JsonDecoder B\n\nC : [\n  A,\n  B\n]\n\nor decoderA decoderB\n</code></pre></div>",
        "id": 455116951,
        "sender_full_name": "Monica",
        "timestamp": 1722344238
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">decoderA</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">decoderA</span><span class=\"w\"> </span><span class=\"nv\">data</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">decoderB</span><span class=\"w\"> </span><span class=\"nv\">data</span>\n</code></pre></div>\n<p>it seems you call <code>decodeA data</code> twice. it would probably be optimized, but I'm not sure</p>\n<p>You can also use <code>Result.onErr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">or</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">JsonDecoder</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">JsonDecoder</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">JsonDecoder</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">or</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">decoderA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">decoderB</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">decoderA</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">onErr</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">decoderB</span><span class=\"w\"> </span><span class=\"nv\">data</span>\n</code></pre></div>",
        "id": 455117767,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722344490
    },
    {
        "content": "<p>nice yeh your optimization works perfectly! cheers</p>",
        "id": 455169762,
        "sender_full_name": "Monica",
        "timestamp": 1722358580
    }
]