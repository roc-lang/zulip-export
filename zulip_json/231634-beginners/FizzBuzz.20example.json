[
    {
        "content": "<p>I was just glossing over some examples <a href=\"https://github.com/roc-lang/examples/blob/main/examples\">here</a>, and I couldn't help but notice, how 'boring' the fizz-buzz example is. The most elegant/expressive/concise implementation I have ever seen is the one below. Does anyone know if such level of elegance and purity can be achieved with Roc? I do understand that Roc doesn't have lazy-sequences, but at the same time I don't mean translate this code line by line - perhaps the core idea can be translated in Roc w/o laziness...<br>\n<a href=\"/user_uploads/22008/xkhLvATGGgWJb1UtQgM_28Jh/Screenshot-from-2024-06-02-21-28-04.png\">Screenshot-from-2024-06-02-21-28-04.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/xkhLvATGGgWJb1UtQgM_28Jh/Screenshot-from-2024-06-02-21-28-04.png\" title=\"Screenshot-from-2024-06-02-21-28-04.png\"><img src=\"/user_uploads/22008/xkhLvATGGgWJb1UtQgM_28Jh/Screenshot-from-2024-06-02-21-28-04.png\"></a></div>",
        "id": 442101484,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717360545
    },
    {
        "content": "<p>Personally, I think I would just go with something simple:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">fizzbuzz</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">%</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">%</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"FizzBuzz\"</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Fizz\"</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Buzz\"</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">i</span>\n</code></pre></div>",
        "id": 442102209,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717360888
    },
    {
        "content": "<p>ok that is nicer, but you're still doing two modulo operations, 4 ifs,  and writing <code>\"FizzBuzz\"</code> by hand</p>",
        "id": 442102467,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361027
    },
    {
        "content": "<p>A more direct translation would be this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"Fizz\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">]</span>\n<span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"Buzz\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">]</span>\n\n<span class=\"nv\">getWrap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">%</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"invalid\"</span>\n\n<span class=\"nv\">fizzbuzz</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getWrap</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getWrap</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">i</span>\n<span class=\"w\">        </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n</code></pre></div>",
        "id": 442103265,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717361472
    },
    {
        "content": "<p>ok now we're talking</p>",
        "id": 442103380,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361528
    },
    {
        "content": "<p>wow this is great</p>",
        "id": 442103396,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361536
    },
    {
        "content": "<p>oh I see - you've basically made up this 'gap-cycle' yourself</p>",
        "id": 442103445,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361571
    },
    {
        "content": "<p>i mean there may be a better way to do this, but the core function certainly reads great</p>",
        "id": 442103516,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361612
    },
    {
        "content": "<p>thanks again!</p>",
        "id": 442103636,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361667
    },
    {
        "content": "<p>but wait - getWrap can crash the program?</p>",
        "id": 442104089,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361909
    },
    {
        "content": "<p>Only is the list is size 0</p>",
        "id": 442104129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717361931
    },
    {
        "content": "<p>So in this case it is impossible</p>",
        "id": 442104143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717361940
    },
    {
        "content": "<p>shouldn't the Err case return the empty string?</p>",
        "id": 442104205,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717361982
    },
    {
        "content": "<p>oooo i see</p>",
        "id": 442104305,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717362011
    },
    {
        "content": "<p>right right</p>",
        "id": 442104335,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717362023
    },
    {
        "content": "<p>so your second version is essentially branch-less - the only conditional is comparing the empty String with the result of <code>Str.concat</code>, which should be super cheap.</p>",
        "id": 442104905,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717362358
    },
    {
        "content": "<p>and <code>List.len</code> I assume is a constant-time operation</p>",
        "id": 442105127,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717362468
    },
    {
        "content": "<p>Yep</p>",
        "id": 442105240,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717362514
    }
]