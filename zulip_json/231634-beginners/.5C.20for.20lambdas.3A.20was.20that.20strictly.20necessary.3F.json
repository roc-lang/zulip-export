[
    {
        "content": "<p>I'm curious about the syntax of lambdas, which like in Haskell requires a \\ symbol.<br>\nI always asked myself if in theory the language could be designed to represent lambdas without \\ without incurring in any ambiguity, i.e., if <code>a -&gt; b</code> was enough.<br>\nI would love to have your take on this.</p>",
        "id": 403250028,
        "sender_full_name": "Arialdo Martini",
        "timestamp": 1700516439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> may have thoughts on this <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 403251247,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700517120
    },
    {
        "content": "<p>Particularly with multiple arguments, or when using pattern matching in arguments, that will make parsing much more difficult (maybe impossible to parse unambiguously).</p>\n<p>Even ignoring the difficulty of parsing, in practice I think this will lead to needing to put parens around the lambda in order to clear up the ambiguity.</p>",
        "id": 403257069,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1700519812
    },
    {
        "content": "<p>I understand it can help readability. But I cannot honestly think of a case where the lack of a prefix symbol could cause ambiguity</p>",
        "id": 403257804,
        "sender_full_name": "Arialdo Martini",
        "timestamp": 1700520196
    },
    {
        "content": "<p>can you share an example of an ambigue expression that would cause problems to the parser?</p>",
        "id": 403257895,
        "sender_full_name": "Arialdo Martini",
        "timestamp": 1700520244
    },
    {
        "content": "<p>There are a couple cases. You can do pattern matching / destructuring in the arguments to a lambda - e.g. <code>\\Foo a b -&gt; a+b</code> - which both destructures a Foo tag, pulls out the two fields, and then binds those as variables in the body.</p>\n<p>Right now you can pass that lambda as an argument to a function like so: <code>myFunc \\Foo a b -&gt; a+b</code>. Without the <code>\\</code>, that becomes: <code>myFunc Foo a b -&gt; a+b</code>. Is that a function call taking a closure as it's only argument? Or is that a function taking the tag <code>Foo</code>, the value <code>a</code>, and a single-argument closure <code>b-&gt;a+b</code> as arguments?</p>",
        "id": 403261100,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1700521775
    },
    {
        "content": "<p>In order to make that unambiguous, you'd have to add parens like so: <code>myFunc (Foo a b -&gt; a+b)</code></p>",
        "id": 403261211,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1700521821
    },
    {
        "content": "<p>The other case is around lambdas accepting multiple arguments - e.g. <code>\\a, b -&gt; a+b</code>.<br>\nThis works fine in the context above (passing it as an argument) - but we run into trouble if we have to put that  _anywhere inside_ parenthesis.</p>\n<p>e.g. <code>(a, b -&gt; a+b)</code> becomes ambiguous whether you mean a tuple with two fields <code>a</code> and <code>b -&gt; a+b</code>, or a parenthesized lambda that takes two arguments. Note that this is true if it's nested anywhere, even deeply inside a parenthesized expression (or a list with <code>[]</code> - same thing).</p>",
        "id": 403262305,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1700522491
    },
    {
        "content": "<p>Also note that there's a closely-related problem around \"multi-backpassing\" - e.g. <code>a, b &lt;- foo</code>, that's been discussed before. That doesn't use an introducer like <code>\\</code>, and so has same problems as above.</p>\n<p>Currently we resolve this ambiguity by saying you can't ever use multi-backpassing anywhere inside a parenthesized expression - and that's mostly fine because needing multiple \"return values\" (which are really arguments) is rare.</p>\n<p>I don't think it would fly if we made the same restriction on lambdas, particularly given that you're going to have to parenthesize them in some new cases you didn't before (see the first point).</p>",
        "id": 403263323,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1700523038
    },
    {
        "content": "<p>Can't comment on the syntactic necessity, but in practice I find it an invaluable visual marker that lets me mentally parse quickly, especially for anonymous lambdas</p>",
        "id": 403320818,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1700552469
    },
    {
        "content": "<p>Very clear! Thank you very much for the insightful explanations!</p>",
        "id": 403333308,
        "sender_full_name": "Arialdo Martini",
        "timestamp": 1700557606
    }
]