[
    {
        "content": "<p>Is there currently a reasonable cross-platform way to read a local file in chunks, e.g. with basic-cli Tcp.readLine?<br>\nOn Ubuntu I will be trying to use <code>netcat</code> program to serve the file and read it in a Tcp stream, but I can't find an analogous built-in tool for e.g. Windows</p>",
        "id": 437337821,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715029666
    },
    {
        "content": "<p>so like Tcp.readLine but for file I/O instead?</p>",
        "id": 437348546,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715035240
    },
    {
        "content": "<p>Yes, essentially - to be able to handle large files<br>\nI realized in my case I probably won't get bottlenecked by the current strict File.readUtf8 for now, but this is a use-case to consider</p>",
        "id": 437348808,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715035367
    },
    {
        "content": "<p>I made <a href=\"https://github.com/roc-lang/basic-cli/issues/205\">https://github.com/roc-lang/basic-cli/issues/205</a> for this</p>",
        "id": 437452299,
        "sender_full_name": "Anton",
        "timestamp": 1715088046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"588760\">@Musab Nazir</span> if you are on Linux, you could try to combine serving your file with <code>netcat</code> and stream process it using the Tcp builtin module<br>\nMaybe<br>\n<a href=\"https://gist.github.com/talwai/d94c71ca09729ac655b4\">https://gist.github.com/talwai/d94c71ca09729ac655b4</a> will be of help, which you can execute with the Cmd builtin module</p>",
        "id": 437560547,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715133155
    },
    {
        "content": "<p>What if we just add a <code>File.readLine</code> similar to Rust's <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_line\">std::io::BufRead read_line method</a>?</p>",
        "id": 437569592,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715138830
    },
    {
        "content": "<p>Then you can just write a task to process lines and call it using <code>Task.loop</code></p>",
        "id": 437569632,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715138869
    },
    {
        "content": "<p>Maybe you call <code>File.openBuffered</code> to get a handle first?</p>",
        "id": 437569896,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715139026
    },
    {
        "content": "<p>That would be ideal<br>\nWith File.readLine, File.readUpTo and File.readExactly to match Tcp builtin</p>\n<p>I can't contribute as I am not familiar with Rust</p>",
        "id": 437570054,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715139149
    },
    {
        "content": "<p>Another idea is maybe these functions can be unified between File and Tcp modules with a single Stream module</p>",
        "id": 437570207,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715139301
    },
    {
        "content": "<p>I have a design somewhere for a general <code>Stream</code> concept</p>",
        "id": 437570720,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715139793
    },
    {
        "content": "<p>maybe now's the time to implement it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 437570732,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715139808
    },
    {
        "content": "<p>Thought I might have a go and see how to implement it. It works, but not sure this is the right direction.</p>\n<p><a href=\"https://github.com/roc-lang/basic-cli/pull/206\">https://github.com/roc-lang/basic-cli/pull/206</a></p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc examples/file-read-buffered.roc\nðŸ”¨ Rebuilding platform...\nRead 119 bytes\nRead 1 bytes\nRead 52 bytes\nRead 1 bytes\nRead 496 bytes\nRead 1 bytes\nRead 22 bytes\nRead 1 bytes\nRead 194 bytes\nRead 1 bytes\nRead 330 bytes\nRead 1 bytes\nRead 52 bytes\nRead 1 bytes\nRead 181 bytes\nRead 1 bytes\nRead 461 bytes\nDone reading, got {bytesRead: 1915, linesRead: 17}\n</code></pre></div>",
        "id": 437577341,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715144715
    },
    {
        "content": "<p>I'm using this to keep track of the buffered file reader</p>\n<div class=\"codehilite\"><pre><span></span><code>thread_local! {\n    static READERS: RefCell&lt;Vec&lt;Rc&lt;RefCell&lt;BufReader&lt;File&gt;&gt;&gt;&gt;&gt; = RefCell::new(Vec::new());\n}\n</code></pre></div>",
        "id": 437577379,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715144745
    },
    {
        "content": "<p>I have another question tangentially related to this. When we use the import sytax to load a file like:</p>\n<div class=\"codehilite\"><pre><span></span><code>import &quot;sample.txt&quot; as sample : Str\n</code></pre></div>\n<p>Is it the same as using <code>File.read</code> or is there extra stuff roc is doing in the import version to the file?</p>",
        "id": 437629347,
        "sender_full_name": "Musab Nazir",
        "timestamp": 1715167284
    },
    {
        "content": "<p>I believe this causes the file to be read at compile time and included in the executable but I'd have to check to make sure.</p>",
        "id": 437631364,
        "sender_full_name": "Anton",
        "timestamp": 1715168191
    },
    {
        "content": "<p>Apologies if this isn't the right place for these questions but I'm trying to find the fastest way I can read the raw contents of a file and my current method is showing non-linear runtime as I feed bigger and bigger files.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">startTime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Utc</span><span class=\"o\">.</span><span class=\"n\">now!</span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readBytes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"s2\">\"measurements.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">attempt</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">endTime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Utc</span><span class=\"o\">.</span><span class=\"n\">now!</span>\n<span class=\"w\">            </span><span class=\"n\">runTime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Utc</span><span class=\"o\">.</span><span class=\"n\">deltaAsMillis</span><span class=\"w\"> </span><span class=\"n\">startTime</span><span class=\"w\"> </span><span class=\"n\">endTime</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span>\n<span class=\"w\">            </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"w\"> </span><span class=\"s2\">\"File read in $(runTime)ms\"</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"w\"> </span><span class=\"s2\">\"Failed to read\"</span>\n</code></pre></div>\n<p>With a 100mil row file (1.5gb) my fastest run was 800ms on the dot<br>\nWith a 200mil row file (3.0gb) I get 5500ms, I might be running into memory limitations cuz I'm on a 8gig m1 machine. </p>\n<p>Is there any low hanging fruit in terms of cutting this time down more?</p>",
        "id": 437662198,
        "sender_full_name": "Musab Nazir",
        "timestamp": 1715178213
    },
    {
        "content": "<p>There are 100%</p>",
        "id": 437662414,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715178284
    },
    {
        "content": "<p>Pretty sure we are duplicating the read in file</p>",
        "id": 437662439,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715178295
    },
    {
        "content": "<p>Also, if we add some for a streamed reading. Please make sure it has either a configurable or very large buffer (4k minimum, 16k probably better)</p>",
        "id": 437662569,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715178346
    },
    {
        "content": "<p>Though personally, I would push for a mmap'ed load directly into a roc list instead. Fast and nice. Don't have to think about buffers at all. Just one magical block (though may not play nice with roc, will explode on the first edit) needs to be specially treated as read only or managed by the platform with more effects.</p>",
        "id": 437662953,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715178475
    },
    {
        "content": "<p>Can we pass a slice into Roc?</p>",
        "id": 437664107,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715178833
    },
    {
        "content": "<blockquote>\n<p>I'm trying to find the fastest way I can read the raw contents of a file and my current method is showing non-linear runtime as I feed bigger and bigger files.</p>\n</blockquote>\n<p>One thing to point out is that I think you will see limitations with <code>basic-cli</code> that is probably just the platform which is pretty primitive, and not necessarily anything specific to roc. So making a fork, or writing another platform implementation that is more suited may be a good idea to consider.</p>",
        "id": 437664514,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715178971
    },
    {
        "content": "<p>Depending on what is it you're trying to do.</p>",
        "id": 437664690,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715179030
    },
    {
        "content": "<blockquote>\n<p>One thing to point out is that I think you will see limitations with <code>basic-cli</code> that is probably just the platform which is pretty primitive, and not necessarily anything specific to roc. So making a fork, or writing another platform implementation that is more suited may be a good idea to consider.</p>\n</blockquote>\n<p>ah right I forget I'm going through a platform. Might look into what basic-cli is doing and see if a local tweak gets me what I'm after.</p>",
        "id": 437668420,
        "sender_full_name": "Musab Nazir",
        "timestamp": 1715180237
    },
    {
        "content": "<p>We can pass slices into roc.</p>",
        "id": 437669440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715180512
    },
    {
        "content": "<p>I think we should really avoid mmap in Roc platform I/O...it would introduce the characteristic \"any other process can now cause your Roc application code to perform undefined behavior\" whereas you don't have that concern if there's no mmap primitive</p>",
        "id": 437674769,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715182188
    },
    {
        "content": "<p>I don't follow. Just mmap private.</p>",
        "id": 437697806,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715189416
    },
    {
        "content": "<p>whoa, TIL that <code>MMAP_PRIVATE</code> protects against that! <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span></p>",
        "id": 437698520,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715189695
    },
    {
        "content": "<p>ok in that case I guess there's no potential for UB?</p>",
        "id": 437698557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715189709
    },
    {
        "content": "<p>Of course, on modification, mmapped slices have an issue in roc. They will be cloned and the original map won't be freed.... Though maybe it could be intercepted if done right....</p>",
        "id": 437699478,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715190099
    },
    {
        "content": "<p>what if we only offered readonly access?</p>",
        "id": 437699787,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715190239
    },
    {
        "content": "<p>like the platform just didn't offer write access to any file that's mmap'd</p>",
        "id": 437699875,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715190257
    },
    {
        "content": "<p>Yeah, would probably do that by offering a seamless slice to the mmap'ed file</p>",
        "id": 437708505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715193378
    },
    {
        "content": "<p>Then, if the user tries to write, it would copy the entire thing.</p>",
        "id": 437708541,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715193396
    }
]