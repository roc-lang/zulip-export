[
    {
        "content": "<p>I found this code doesn't produce any warnings though is clearly dead. It’s probably related to the type system. AFAIU it should be relatively easy to construct a derivation chain at least when there’s no branching (but I guess it might affect compiling performance?). In the example, the closure (it can be an external function) doesn't use the first argument so it should be predictable that the preceding code in the pipeline does nothing</p>\n<div class=\"codehilite\"><pre><span></span><code>x =\n    1\n    |&gt; \\_ -&gt; 3\n</code></pre></div>",
        "id": 416650261,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1705612173
    },
    {
        "content": "<p>Im not sure I understand why it should produce a warning? You are intentionally throwing away the value by using <code>_</code>.</p>",
        "id": 416653734,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705613815
    },
    {
        "content": "<p>if <code>x</code> isn't used elsewhere, <code>x</code> should have a warning.</p>\n<p>Otherwise, for the lambda, idk. Since it is an inline lambda, a warning is probably reasonable, but in general <code>\\_</code> is fine, it is explictly ignoring an arg.</p>",
        "id": 416654197,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705614039
    },
    {
        "content": "<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">createExpensiveThing</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ExpensiveThing</span>\n<span class=\"nf\">createExpensiveThing</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">lazy</span>\n\n<span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">or</span>\n<span class=\"nf\">fnMatchingSomeApi</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">I32</span>\n<span class=\"nf\">fnMatchingSomeApi</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">api</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 416654470,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705614197
    },
    {
        "content": "<p>To rephrase my example:</p>\n<div class=\"codehilite\"><pre><span></span><code>ignoreEverythingAbove = \\_, x-&gt; x\n\ny =\n  1\n  |&gt; expensiveComputation\n  |&gt; ignoreEverythingAbove 42\n</code></pre></div>\n<p>Since there are no side effects - both <code>1</code> and <code>expensiveComputation</code> call are dead.<br>\nCan’t say if it’s a real world problem tho.</p>",
        "id": 416655764,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1705614854
    },
    {
        "content": "<p>Yeah, that's probably reasonable, but we have to be smart about it cause:</p>\n<ol>\n<li>an arg may exist but not be used because of implementation changes, but the same api may be wanted.</li>\n<li><code>{}</code> is often an unused empty arg.</li>\n</ol>",
        "id": 416662789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705618272
    }
]