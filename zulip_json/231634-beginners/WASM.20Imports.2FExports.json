[
    {
        "content": "<p>Hey there.</p>\n<p>Just starting to play around with Roc.<br>\nIt's great to see Webassembly support.</p>\n<p>Is there already a good way to define WASM exports and imports?</p>",
        "id": 300558338,
        "sender_full_name": "theduke",
        "timestamp": 1664036732
    },
    {
        "content": "<p>is that the wasm/JS FFI? I think is is something that the host (so zig/rust/?) code would do</p>",
        "id": 300558565,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664036874
    },
    {
        "content": "<p>It's basically the equivalent of external function definitions or publically exported functions (on a linker level).<br>\nBut they need to be defined in the compiled <code>.wasm</code> file.</p>\n<p>How does the Wasm compilation pipeline work?<br>\nWill both host code and the Roc code be compiled do Wasm and somehow combined?</p>",
        "id": 300559439,
        "sender_full_name": "theduke",
        "timestamp": 1664037313
    },
    {
        "content": "<p>yes</p>",
        "id": 300559801,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664037478
    },
    {
        "content": "<p>Is there an example for writing a custom platform in Rust?</p>",
        "id": 300561729,
        "sender_full_name": "theduke",
        "timestamp": 1664038604
    },
    {
        "content": "<p>The concept of Wasm imports/exports is not really visible inside Roc itself. Rather in the host language you define <code>extern</code>s for whatever you expect to be \"dynamically linked\" with JS at runtime.</p>",
        "id": 300561798,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664038655
    },
    {
        "content": "<p>The <code>examples</code> directory in the repo has several platforms in Rust.</p>",
        "id": 300561882,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664038687
    },
    {
        "content": "<p>in particular <a href=\"https://github.com/roc-lang/roc/tree/main/examples/platform-switching/rust-platform\">https://github.com/roc-lang/roc/tree/main/examples/platform-switching/rust-platform</a></p>",
        "id": 300561894,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664038693
    },
    {
        "content": "<p>which passes a string between the roc and rust code</p>",
        "id": 300561901,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664038706
    },
    {
        "content": "<p>and <a href=\"https://github.com/roc-lang/roc/tree/main/examples/interactive/cli-platform\">https://github.com/roc-lang/roc/tree/main/examples/interactive/cli-platform</a> which does a lot more</p>",
        "id": 300561949,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664038744
    },
    {
        "content": "<p>One of the examples there is a WebAssembly platform and there's an HTML page to run it in, but the host is in Zig rather than Rust.</p>",
        "id": 300561989,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664038782
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/main/examples/false-interpreter/platform/src/lib.rs\">https://github.com/roc-lang/roc/blob/main/examples/false-interpreter/platform/src/lib.rs</a> is perhaps a good intermediate rust platform</p>",
        "id": 300562090,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664038826
    },
    {
        "content": "<p>Yeah, I sort of got that.<br>\nSo I would have to:</p>\n<p>For imports:</p>\n<ul>\n<li>define the extern fn in Rust</li>\n<li>Provide those  to the guest</li>\n</ul>\n<p>For exports:</p>\n<ul>\n<li>Receive the functions form the guest, I guess that would work like with <code>main</code></li>\n<li>Export those functions. I guess I will need some global variables to store function pointers that I can then fill in the platform initialization code.</li>\n</ul>\n<p>Right?</p>",
        "id": 300562135,
        "sender_full_name": "theduke",
        "timestamp": 1664038856
    },
    {
        "content": "<p>The false interpreter doesn't compile to wasm currently though. One of the Rust crates doesn't support that target.</p>",
        "id": 300562136,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664038857
    },
    {
        "content": "<p>we're also working on (more) codegen to make passing stuff across the boundary easier, and making all of the manual weird function signatures go away</p>",
        "id": 300562148,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664038864
    },
    {
        "content": "<p>PS: is there a WASI platform yet?<br>\nIf not I could look into contributing that.</p>",
        "id": 300562188,
        "sender_full_name": "theduke",
        "timestamp": 1664038890
    },
    {
        "content": "<p>I'm not sure your description of exports is right... are you referring to guest as Roc code or JS code?</p>",
        "id": 300562412,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664038992
    },
    {
        "content": "<p>I would imagine Roc</p>",
        "id": 300562436,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664039002
    },
    {
        "content": "<p>But then that's not a Wasm export because both Roc and Rust compile to wasm</p>",
        "id": 300562483,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664039028
    },
    {
        "content": "<p>So you have two boundaries here. There's the Roc app/host boundary and then within the host there's a Rust/JS boundary.</p>",
        "id": 300562557,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664039083
    },
    {
        "content": "<p>Well, I would need to have a Webassembly exported function that then calls into Roc code.</p>",
        "id": 300562564,
        "sender_full_name": "theduke",
        "timestamp": 1664039088
    },
    {
        "content": "<p>But I think with the examples I have enough to work something out.</p>",
        "id": 300562638,
        "sender_full_name": "theduke",
        "timestamp": 1664039139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"547437\">theduke</span> <a href=\"#narrow/stream/231634-beginners/topic/WASM.20Imports.2FExports/near/300562564\">said</a>:</p>\n<blockquote>\n<p>Well, I would need to have a Webassembly exported function that then calls into Roc code.</p>\n</blockquote>\n<p>I don't quite follow what you mean here.<br>\nHmm.. maybe this is a good way to say it: From Rust's point of view, JS code and Roc code are both \"extern C\".</p>",
        "id": 300562947,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664039343
    },
    {
        "content": "<p>Also worth noting that the Roc app and host end up as a single Wasm module, not two separate ones.</p>",
        "id": 300563049,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664039411
    },
    {
        "content": "<blockquote>\n<p>From Rust's point of view, JS code and Roc code are both \"extern C\".</p>\n</blockquote>\n<p>Ah, I see.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_1_exposed_generic\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">roc_main</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So Roc exports are also just extern fns.<br>\nThat makes it easy then to forward those as Wasm-level exports.</p>",
        "id": 300563348,
        "sender_full_name": "theduke",
        "timestamp": 1664039639
    },
    {
        "content": "<p>Right yeah I suppose so!</p>",
        "id": 300563646,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664039822
    },
    {
        "content": "<p>Is there some concept in place or plans around creating alignment between platforms?<br>\nOr make code run on multiple platforms?</p>\n<p>Easy example: file handles</p>",
        "id": 300563876,
        "sender_full_name": "theduke",
        "timestamp": 1664039951
    },
    {
        "content": "<p>Would be very awkward to duplicate code that works with files between WASI and eg the standard CLI.</p>",
        "id": 300563936,
        "sender_full_name": "theduke",
        "timestamp": 1664039995
    },
    {
        "content": "<p>The same Roc platform can compile to many targets.</p>",
        "id": 300564081,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664040059
    },
    {
        "content": "<p>So you can write a Rust platform that supports a WASI target and a Linux target and a Windows target.</p>",
        "id": 300564176,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664040107
    },
    {
        "content": "<p>Currently we don't have one of those though</p>",
        "id": 300564253,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664040133
    },
    {
        "content": "<p>Just linking this in case it is useful as a reference: <a href=\"https://github.com/bhansconnect/functional-mos6502-web-performance/tree/master/implementations/roc-effectful\">https://github.com/bhansconnect/functional-mos6502-web-performance/tree/master/implementations/roc-effectful</a></p>\n<p>This is an emulator for a cpu in Roc that run in the browser using wasm. It is pretty simple, but it shows a full js platform with wasm app. That being said, there is a decent chance the roc is outdated and needs to be update some if you were to directly copy from it.</p>",
        "id": 300564316,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664040205
    },
    {
        "content": "<p>Uh, I just saw <code>wasm3</code> is a dependency.<br>\nIs that somehow for the repl?</p>",
        "id": 300564972,
        "sender_full_name": "theduke",
        "timestamp": 1664040698
    },
    {
        "content": "<p>Or maybe just for tests?</p>",
        "id": 300565020,
        "sender_full_name": "theduke",
        "timestamp": 1664040724
    },
    {
        "content": "<p>just for tests right now I believe</p>",
        "id": 300565080,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664040751
    },
    {
        "content": "<p>repl is planned</p>",
        "id": 300565094,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664040770
    }
]