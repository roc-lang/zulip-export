[
    {
        "content": "<p>Hi there. I have this bug in my program, that only shows up if I run it in it's entirety. It doesn't show up if I write out the individual function calls with static data. It's a bit of a mess and quite a few lines scattered across different files. I don't know the best way to go from here.</p>\n<p>The crash happens when I try to sum an array</p>\n<div class=\"codehilite\"><pre><span></span><code>dbg &quot;Crashes on the next call&quot;\nnewSum = List.sum (List.map my2dArray List.sum)\ndbg &quot;Does never happen&quot;\n</code></pre></div>\n<p>With an <code>integer subtraction overflowed</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[MyProgram.roc:164] &quot;Crashes on the next call&quot; = &quot;Crashes on the next call&quot;\nRoc crashed with:\n\n        Integer subtraction overflowed!\n\nHere is the call stack that led to the crash:\n\n\nOptimizations can make this list inaccurate! If it looks wrong, try running without `--optimize` and with `--linker=legacy`\n</code></pre></div>\n<p>I've tried to print out the 2d array and hardcode it and call the function with the hardcoded array instead of pointing to the variable and that doesn't crash.</p>",
        "id": 430498880,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1711911338
    },
    {
        "content": "<p>So I think we have a bug (no idea the cause) that screws up some of our builtin panic messages. That is probably actually an <code>integer addition overflowed</code></p>",
        "id": 430498990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711911454
    },
    {
        "content": "<p>Due to all of the summing.</p>",
        "id": 430498993,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711911458
    },
    {
        "content": "<p>What are the types? What size are the values?</p>",
        "id": 430499045,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711911486
    },
    {
        "content": "<p>The weird thing is it works when I do the <code>dbg</code> to get the actual array and throw it in, but maybe the type get's changed there. Can I check the type of the array of something? (I haven't explicitly typed anything)</p>",
        "id": 430499163,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1711911614
    },
    {
        "content": "<blockquote>\n<p>So I think we have a bug (no idea the cause) that screws up some of our builtin panic messages.</p>\n</blockquote>\n<p>My response is only tangentially related to the topic (i.e., my example didn't have to do with <code>List.sum</code> per se) - my apologies. Wanted to mention that I've run into a case which confirms this statement. An <code>U64</code> overflow was happening via subtraction, but I was getting a message saying <code>Integer addition overflowed!</code>.</p>",
        "id": 430499222,
        "sender_full_name": "Hristo",
        "timestamp": 1711911672
    },
    {
        "content": "<p>Is it related to <code>--optimize</code> or not?</p>",
        "id": 430499311,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711911741
    },
    {
        "content": "<p>Also, is this code run once or in some form of loop?</p>",
        "id": 430499442,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711911872
    },
    {
        "content": "<p>I just run it with <code>roc dev</code>. I don't know about the <code>--optimize</code> is that something I can turn off?<br>\nIt's run recursively, so yeah in some loop.</p>\n<p>But is it possible to check the type of the list at runtime so I can answer your question regarding the type?</p>",
        "id": 430499496,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1711911962
    },
    {
        "content": "<p><code>dev</code> will have <code>--optimize</code> off.</p>",
        "id": 430499750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711912175
    },
    {
        "content": "<p>The type should be <code>I64</code> if you didn't type anything and it is a number</p>",
        "id": 430499768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711912190
    },
    {
        "content": "<p>Though may not be depending on exactly where the numbers come from and how they are used. There is no runtime reflection or type information in roc. So you can't easily check at runtime.</p>",
        "id": 430499883,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711912261
    },
    {
        "content": "<p>There is definitely a solid chance that this is related to a large bug we have with current tail call optimization and llvm. <a href=\"https://github.com/roc-lang/roc/issues/6434\">#6434</a> tracks a mix of related issues.</p>",
        "id": 430500133,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711912467
    },
    {
        "content": "<p>Any chance you can share the source code? Preferably something minimized that still hits the bug, but the full thing is fine too.</p>",
        "id": 430500156,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711912494
    },
    {
        "content": "<p>I would probably be able to zip it and send it to you, but for now I've at least found out that if I make a list of <code>I8</code> then if I try to sum them, the result tries to stay as the same data type (which might be by design or not). I don't know if that is what my program ends up with.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>my2DArray : List (List I8) # Works fine if commenting out this line\nmy2DArray = [[0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0]]\n\nfirst = List.map my2DArray List.sum\ndbg first\ndbg List.sum first\n</code></pre></div>\n<p>Crashes</p>\n<div class=\"codehilite\"><pre><span></span><code>[main.roc:26] first = [26, 26, 25, 24, 24, 24]\nRoc crashed with:\n\n        Integer addition overflowed!\n\nHere is the call stack that led to the crash:\n</code></pre></div>\n<p>(Side note. Shouldn't there be a call stack in the blank space?)</p>",
        "id": 430500516,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1711912855
    },
    {
        "content": "<p>Yeah, roc won't automatically upcast when summimg</p>",
        "id": 430501764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711913960
    },
    {
        "content": "<p>Try with <code>--linker=legacy</code>, that might get you a call stack.</p>",
        "id": 430501791,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711913993
    }
]