[
    {
        "content": "<p>I read through the tutorial this morning and the record builder example, and I'm left confused about what the left arrow does (<code>&lt;-</code>). Is there more about it that I can read?</p>",
        "id": 445656662,
        "sender_full_name": "Mythmon",
        "timestamp": 1718815460
    },
    {
        "content": "<p>It is just syntax sugar for lambda.</p>\n<div class=\"codehilite\"><pre><span></span><code>x &lt;- Task.await myTask\n# more code\n</code></pre></div>\n<p>Is equivalent to:</p>\n<div class=\"codehilite\"><pre><span></span><code>Task.await myTask \\x -&gt;\n    #more code\n</code></pre></div>",
        "id": 445660527,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718816437
    },
    {
        "content": "<p>Avoids indentation hell. That said, it will likely be removed in favor of only allowing <code>!</code>.</p>",
        "id": 445661583,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718816833
    },
    {
        "content": "<p>Hm, ok. I'm not quite getting it yet. So if you use <code>&lt;-</code> multiple times in one expression (like in the <a href=\"https://www.roc-lang.org/examples/RecordBuilder/README.html\">Record Builder example</a>) it builds a lambda with more than one parameter?</p>",
        "id": 445661739,
        "sender_full_name": "Mythmon",
        "timestamp": 1718816889
    },
    {
        "content": "<p>The <code>: &lt;-</code> and <code>&lt;-</code> work in different ways, others have been confused by it as well, but like Brendan said, we will likely get rid of the (standalone) <code>&lt;-</code>.</p>",
        "id": 445663088,
        "sender_full_name": "Anton",
        "timestamp": 1718817422
    },
    {
        "content": "<p>Ah, ok. I guess I'm asking about <code>: &lt;-</code> then. I hadn't encountered standalone <code>&lt;-</code>.</p>",
        "id": 445663370,
        "sender_full_name": "Mythmon",
        "timestamp": 1718817585
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">initIDCount</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">aliceID</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">incID</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">bobID</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">incID</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">trudyID</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">incID</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">extractState</span>\n</code></pre></div>\n<p>Converts to:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">initIDCount</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">aID</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">bID</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">cID</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">aliceID</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">aID</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bobID</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">bID</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trudyID</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">cID</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">incID</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">incID</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">incID</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">extractState</span>\n</code></pre></div>\n<p>Is there a specific part that does not make sense?</p>",
        "id": 445664117,
        "sender_full_name": "Anton",
        "timestamp": 1718817897
    },
    {
        "content": "<p>Knowing that <code>: &lt;-</code> is a distinct \"operator\" and not just assigning a usage of <code>&lt;-</code>helps. I'm still not quite sure how I can apply it to different situations, but I think I might just need to sit with a bit longer</p>",
        "id": 445664444,
        "sender_full_name": "Mythmon",
        "timestamp": 1718818042
    },
    {
        "content": "<p>Yes, the example is quite artificial, it's <a href=\"https://github.com/agu-z/roc-pg/blob/62725fe3a1d92144a8408aee20f5ede3a89b1a75/examples/store/server.roc#L74\">very useful for use with the Roc postgres library</a></p>",
        "id": 445664958,
        "sender_full_name": "Anton",
        "timestamp": 1718818249
    },
    {
        "content": "<p>Here’s an article about a cool CLI arg parser built using record builders: <a href=\"https://sammohr.dev/blog/announcing-weaver\">https://sammohr.dev/blog/announcing-weaver</a></p>",
        "id": 445665295,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718818381
    },
    {
        "content": "<p>Record Builders are basically syntax sugar for applicatives if you know those from other FP languages</p>",
        "id": 445665469,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718818442
    },
    {
        "content": "<p>Unfortunately I have very little experience with other FP languages. I suspect that an arg parser is actually kind of close to what I'm trying to build though, so I'll read that article. (I'm trying to build something that is sort of like the builder pattern that I've seen in Rust, but with fields that can be defined as delayed functions)</p>",
        "id": 445665978,
        "sender_full_name": "Mythmon",
        "timestamp": 1718818655
    },
    {
        "content": "<p>I have been using roc for a long time, find record builders to still be magic even if I can desugar them</p>",
        "id": 445667549,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718819194
    },
    {
        "content": "<p>I think that applicatives even if written out can be hard to follow.</p>",
        "id": 445667671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718819246
    },
    {
        "content": "<p>Someone(<span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span>?) had a really good animation at the zig milan meetup in a lightning talk. Was super useful cause it showed the unwrapping as the applicatives where used.</p>",
        "id": 445668010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718819337
    },
    {
        "content": "<p>Yeah, we have some ideas on how to simplify them to work in terms of map2 instead of applicatives. I’ll probably look into that later in the year.</p>",
        "id": 445670056,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718819912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"729874\">Mythmon</span> <a href=\"#narrow/stream/231634-beginners/topic/What.20does.20the.20left.20arrow.20.28.3C-.29.20do.3F/near/445665978\">said</a>:</p>\n<blockquote>\n<p>Unfortunately I have very little experience with other FP languages.</p>\n</blockquote>\n<p>My first programming language was functional, and I haven’t wrapped my head around <code>: &lt;-</code> yet. So don’t worry, you’re definitely not alone</p>",
        "id": 445670837,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1718820173
    },
    {
        "content": "<p>That's reassuring. If I could take advantage of the attention here, this is the thing I was trying to use <code>: &lt;-</code> for, written out verbosely. I was trying to understant <code>: &lt;-</code> as something like Rust's <code>?</code>, which I don't think is right now</p>\n<div class=\"codehilite\"><pre><span></span><code>Slot a : [Undefined, Final a, Delayed a]\n\nCharacter : {\n    name : Str,\n    xp : U8,\n    level : U8,\n}\n\nPartialCharacter : {\n    name : Slot Str,\n    xp : Slot U8,\n    level : Slot U8,\n}\n\nfinalize : PartialCharacter -&gt; [Ok Character, Err Str]\nfinalize = \\pc -&gt;\n    when (pc.name, pc.xp, pc.level) is\n        (Final name, Final xp, Final level) -&gt; Ok { name, xp, level }\n        (Undefined, _, _) -&gt; Err &quot;Missing name&quot;\n        (_, Undefined, _) -&gt; Err &quot;Missing xp&quot;\n        (_, _, Undefined) -&gt; Err &quot;Missing level&quot;\n        (Delayed _, _, _) | (_, Delayed _, _) | (_, _, Delayed _) -&gt; Err &quot;TODO Can&#39;t handle delayed values yet&quot;\n</code></pre></div>\n<p>I expect the number of fields on <code>Character</code> to grow a lot (the TypeScript code I'm rewriting already has 20+ fields, and isn't even complete). Is there a better way to structure this that won't require huge when definitions?</p>\n<p>It would be great if finalize could be something like</p>\n<div class=\"codehilite\"><pre><span></span><code>finalize = \\pc -&gt;\n    something {\n        name: &lt;- ensure pc.name &quot;name&quot;,\n        xp: &lt;- ensure pc.xp &quot;xp&quot;,\n        level: &lt;- ensure pc.level &quot;level&quot;,\n    }\n</code></pre></div>",
        "id": 445671732,
        "sender_full_name": "Mythmon",
        "timestamp": 1718820490
    },
    {
        "content": "<p>Yeah, I think that should work. Let me give it a try.</p>",
        "id": 445675600,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718821987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"729874\">@Mythmon</span>  This should work:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">finalize</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">PartialCharacter</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Character</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">finalize</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">pc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">ensure</span><span class=\"w\"> </span><span class=\"nv\">pc</span><span class=\"nf\">.</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"s\">\"name\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">xp</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">ensure</span><span class=\"w\"> </span><span class=\"nv\">pc</span><span class=\"nf\">.</span><span class=\"nv\">xp</span><span class=\"w\"> </span><span class=\"s\">\"xp\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">level</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">ensure</span><span class=\"w\"> </span><span class=\"nv\">pc</span><span class=\"nf\">.</span><span class=\"nv\">level</span><span class=\"w\"> </span><span class=\"s\">\"level\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"nv\">ensure</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Slot</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span>\n<span class=\"nv\">ensure</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">prev</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">prev</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">slot</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">advance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Final</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">advance</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Undefined</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"s\">\"Missing $(name)\"</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Delayed</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"todo\"</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">finalize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Final</span><span class=\"w\"> </span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">xp</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Final</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">level</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Final</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">xp</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">level</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">finalize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Final</span><span class=\"w\"> </span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">xp</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Final</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">level</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Undefined</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"s\">\"Missing level\"</span>\n</code></pre></div>",
        "id": 445676705,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718822404
    },
    {
        "content": "<p>Here's the desugaring animation that <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> mentioned:<br>\n<a href=\"/user_uploads/22008/GGjYA1-q1-1UQK-nHjmGNIcp/record-builder-desugaring.mov\">record-builder-desugaring.mov</a></p>",
        "id": 445676902,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718822483
    },
    {
        "content": "<p>I recommend trying the desugared version yourself and figuring out the types at each level of the pipeline</p>",
        "id": 445677958,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718822844
    },
    {
        "content": "<p>Applicatives can be quite mind bending because the type wraps this curried function that’s applied at each level</p>",
        "id": 445678844,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718823104
    },
    {
        "content": "<p>As I said earlier, I’d like to try a map2 approach later because that’s much easier to grasp</p>",
        "id": 445678996,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718823146
    }
]