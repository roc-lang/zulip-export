[
    {
        "content": "<p>I thought I'd add here some examples of repl interactions that I found surprising and would like to understand them better.</p>\n<p>When I enter <code>1</code> in the repl, I get back <code>1 : Num *      # val1</code><br>\nI next enter    <code>2</code>, I get back                       <code>2 : Num *      #val2</code><br>\nso far so good, nothing unusual.<br>\nI next enter <code>val3 = 3</code> in the repl which gives back <code>3 : Num *   #val3</code> as expected<br>\nI then enter <code>4</code> which gives me <code>4 : Num *     #val3</code> yet typing in <code>val3</code> still gives me back <code>3</code><br>\nObviously the repl doesn't recognize that I already defined <code>val3</code>, clearly it's a bug, nothing really surprising. Not sure if it's already been noticed before?</p>\n<p>Another example that seem to be a bug to me but maybe it's not?<br>\nIf I enter a type declaration and definition<code>x : F32</code> then <code>x = 5</code> really any type would work, it doesn't matter.<br>\nThen I enter <code>\\x -&gt; x</code> I get back a type of <code>* -&gt; F32</code> which seems odd to me. It suggests that the type checker has taken into account the <code>x</code> variable I already defined earlier when inferring <code>\\x -&gt; x</code>'s type but the <code>x</code> in the lambda is just the formal parameter's name, and the <code>x</code> in the lambda's body is bound to the formal parameter. It shouldn't have anything to do with the top-level <code>x</code> variable right?</p>\n<p>Indeed if I enter <code>\\y -&gt; y</code> where <code>y</code> doesn't already exist as a top-level variable, I get back <code>a -&gt; a</code> as expected or <code>\\z -&gt; z + 1</code> gives me <code>Num a -&gt; Num a</code> but <code>\\x -&gt; x + 1</code> or <code>\\x -&gt; x</code> gives me <code>* -&gt; F32</code> which I found surprising. It doesn't seem like it's doing the right thing here?</p>",
        "id": 325503118,
        "sender_full_name": "Alexander McLin",
        "timestamp": 1675374109
    },
    {
        "content": "<p>for that last problem: we don't allow shadowing, but it looks like that is not handled correctly</p>",
        "id": 325503560,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675374300
    },
    {
        "content": "<p>That's what I thought, shall I open an issue about the last problem? Is the first problem already documented?</p>",
        "id": 325503883,
        "sender_full_name": "Alexander McLin",
        "timestamp": 1675374443
    },
    {
        "content": "<p>I don't think it is, but I haven't worked on the repl in a long time. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> you did some recent repl work right?</p>",
        "id": 325504620,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675374726
    },
    {
        "content": "<p>in any case: yes please open issues. We'll deal with any duplicates</p>",
        "id": 325504706,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675374760
    },
    {
        "content": "<p>yeah those both look like bugs to me!</p>",
        "id": 325505439,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675375052
    },
    {
        "content": "<p>Here's a repl session from just now....What am I missing?</p>\n<p>» x = 5<br>\n── MISSING FINAL EXPRESSION ────────────────────────────────────────────────────</p>\n<p>I am partway through parsing a definition, but I got stuck here:</p>\n<p>1│  app \"app\" provides [replOutput] to \"./platform\"<br>\n2│<br>\n3│  replOutput =<br>\n4│      x = 5<br>\n             ^</p>\n<p>This definition is missing a final expression. A nested definition<br>\nmust be followed by either another definition, or an expression</p>\n<div class=\"codehilite\"><pre><span></span><code>x = 4\ny = 2\n\nx + y\n</code></pre></div>",
        "id": 350799670,
        "sender_full_name": "Matthias Toepp",
        "timestamp": 1681828366
    },
    {
        "content": "<p>(That was the online repl)</p>",
        "id": 350800105,
        "sender_full_name": "Matthias Toepp",
        "timestamp": 1681828456
    },
    {
        "content": "<p>I think you're missing indentation on tha tfinal line (line 4)?</p>",
        "id": 350801230,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681828686
    },
    {
        "content": "<p>No, it also happens with indentation, did we not implement our assignment magic in the web repl?</p>",
        "id": 350801600,
        "sender_full_name": "Anton",
        "timestamp": 1681828769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  ...not sure what you mean by missing indentation...I'm only writing: \"x = 5\" into the repl.</p>",
        "id": 350802359,
        "sender_full_name": "Matthias Toepp",
        "timestamp": 1681828929
    },
    {
        "content": "<p>This looks like a bug in the web repl <span class=\"user-mention\" data-user-id=\"494740\">@Matthias Toepp</span>, it does work on the local repl (<code>roc repl</code> using a nightly release)</p>",
        "id": 350802467,
        "sender_full_name": "Anton",
        "timestamp": 1681828954
    },
    {
        "content": "<p>nightlies are <a href=\"https://github.com/roc-lang/roc/releases\">available here</a> btw</p>",
        "id": 350802605,
        "sender_full_name": "Anton",
        "timestamp": 1681828983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> is this a regression in the web repl or do we still have to implement automatic handling of assignments that do not return anything?</p>",
        "id": 350803314,
        "sender_full_name": "Anton",
        "timestamp": 1681829142
    },
    {
        "content": "<p>should i open an issue for this?</p>",
        "id": 350804669,
        "sender_full_name": "Matthias Toepp",
        "timestamp": 1681829432
    },
    {
        "content": "<p>(thanks <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> )</p>",
        "id": 350804967,
        "sender_full_name": "Matthias Toepp",
        "timestamp": 1681829506
    },
    {
        "content": "<blockquote>\n<p>should i open an issue for this?</p>\n</blockquote>\n<p>yes please :)</p>",
        "id": 350805122,
        "sender_full_name": "Anton",
        "timestamp": 1681829536
    },
    {
        "content": "<p>ok...(i'm still impressed that there is an online repl! :)</p>",
        "id": 350805280,
        "sender_full_name": "Matthias Toepp",
        "timestamp": 1681829571
    },
    {
        "content": "<p>opened issue: <a href=\"https://github.com/roc-lang/roc/issues/5301\">https://github.com/roc-lang/roc/issues/5301</a></p>",
        "id": 350807054,
        "sender_full_name": "Matthias Toepp",
        "timestamp": 1681829940
    },
    {
        "content": "<p>I think the web repl has always been more picky about just doing assignment. It doesn't seem to keep state like the local repl. It needs every definition and the final expression all at once.</p>",
        "id": 350819802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681832786
    },
    {
        "content": "<p>Maybe that is a regression. If so, it happened a while ago.</p>",
        "id": 350819964,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681832822
    },
    {
        "content": "<p>It's not a regression or a bug, it was just never implemented</p>",
        "id": 350878421,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1681849470
    },
    {
        "content": "<p>The web repl and cli REPL have separate front ends, handle newlines differently, etc. The web repl currently only takes expressions, not definitions. The logic could be connected up but it hasn't been. Would be a great contribution if someone wants to do it!</p>",
        "id": 350883340,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1681851348
    },
    {
        "content": "<p>I've found panics in the REPL when there are type mismatches:</p>\n<ul>\n<li>Swapped argument order: <code>Str.joinWith \", \" [\"Hi\", \"World\"]</code> produces</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;TODO turn fn_var into a RuntimeError Erroneous&#39;, crates/compiler/mono/src/ir.rs:4654:39\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<ul>\n<li>Type mismatch: <code>Str.joinWith [\"Hi\", \"World\"] 42</code> produces</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Erroneous&#39;, crates/compiler/mono/src/ir.rs:8875:10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>Found in the CLI REPL on ARM MacOS 13.4, using nightly <code>58067f9</code> (2023-06-02). Reproduced on the <a href=\"https://www.roc-lang.org/repl\">web REPL</a> too. Couldn't find issues for these - should I open one?</p>",
        "id": 363265799,
        "sender_full_name": "David Dunn",
        "timestamp": 1685787939
    },
    {
        "content": "<blockquote>\n<p>should I open one?</p>\n</blockquote>\n<p>Go ahead :)</p>",
        "id": 363267246,
        "sender_full_name": "Anton",
        "timestamp": 1685788301
    },
    {
        "content": "<p>There's also a panic in the CLI REPL when using undefined variables:</p>\n<div class=\"codehilite\"><pre><span></span><code>Str.joinWith [greeting, audience] &quot;, &quot;\n&quot;8\\x9e\\xf7\\x05\\x01&quot;\nthread &#39;main&#39; panicked at &#39;Roc hit an error&#39;, crates/repl_cli/src/cli_gen.rs:133:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>This works as expected in the web REPL, printing the friendly <code>UNRECOGNIZED NAME</code> message.</p>",
        "id": 363267925,
        "sender_full_name": "David Dunn",
        "timestamp": 1685788465
    },
    {
        "content": "<p>nice find, would love an issue for that one too! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 363268948,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685788796
    },
    {
        "content": "<p>Then there's a lesser issue where the web REPL inserts a newline before executing code when enter is pressed. This produces an error message when the code before the cursor isn't a valid line for the REPL, eg.<br>\n<code>Str.joinWith [\"greeting\", \"audience\"] \", \"&lt;cursor&gt;</code> runs fine.<br>\n<code>Str.joinWith [\"greeting\", \"&lt;cursor&gt;audience\"] \", \"</code> produces <code>UNFINISHED LIST</code>.<br>\n<code>Str.joinWith [\"greeting\", \"audience\"] \"&lt;cursor&gt;, \"</code> produces <code>ENDLESS STRING</code>.</p>",
        "id": 363270179,
        "sender_full_name": "David Dunn",
        "timestamp": 1685789116
    },
    {
        "content": "<p>Feel free to create issues, we prefer some accidental duplicate issues over unfiled issues</p>",
        "id": 363279021,
        "sender_full_name": "Anton",
        "timestamp": 1685791138
    },
    {
        "content": "<p>Done!</p>\n<ul>\n<li><a href=\"https://github.com/roc-lang/roc/issues/5505\">Type mismatches</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/issues/5506\">Undefined variables</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/issues/5507\">Extra newline</a></li>\n</ul>",
        "id": 363279919,
        "sender_full_name": "David Dunn",
        "timestamp": 1685791403
    }
]