[
    {
        "content": "<p>Is there a way to convert a <code>List (Task a err)</code> into <code>Task (List a) err</code> ? I have seen mention of a <code>chain</code> function in the chat logs but couldn't find an implementation of it.</p>",
        "id": 315128869,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670707595
    },
    {
        "content": "<p>this should do it</p>\n<div class=\"codehilite\"><pre><span></span><code>map2 : Task a err, Task b err, (a, b -&gt; c) -&gt; Task c err\nmap2 = \\task1, task2, mapper -&gt;\n    task1 |&gt; Task.await \\value1 -&gt;\n        task2 |&gt; Task.map \\value2 -&gt;\n            mapper value1 value2\n\ntraverse : List a, (a -&gt; Task b err) -&gt; Task (List b) err\ntraverse = \\list, f -&gt;\n    walker : Task (List b) err, a -&gt; Task (List b) err\n    walker = \\state, element -&gt; map2 state (f element) List.append\n\n    initialState = Task.succeed (List.withCapacity (List.len list))\n    List.walk list initialState walker\n\ncombine : List (Task a err) -&gt; Task (List a) err\ncombine = \\list -&gt; traverse list (\\x -&gt; x)\n</code></pre></div>",
        "id": 315130134,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670708646
    },
    {
        "content": "<p>it is inefficient though, <code>map2</code> could be implemented more efficiently but we don't provide that at the moment</p>",
        "id": 315130175,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670708718
    },
    {
        "content": "<p>Thanks. It works!</p>",
        "id": 315130629,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670709148
    },
    {
        "content": "<p>Welp. It segfaults for a large list.</p>",
        "id": 315131052,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670709558
    },
    {
        "content": "<p>that kind of makes sense? it recursive builds up a task</p>",
        "id": 315131259,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670709708
    },
    {
        "content": "<p>that is the inefficiency</p>",
        "id": 315131321,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670709727
    },
    {
        "content": "<p>how large is large though?</p>",
        "id": 315131360,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670709771
    },
    {
        "content": "<p>90000</p>",
        "id": 315131515,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670709891
    },
    {
        "content": "<p>ok, is that a problem for an actual program you are trying to run?</p>",
        "id": 315131650,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670710016
    },
    {
        "content": "<p>or phrased differently: is this blocking you in practice?</p>",
        "id": 315131705,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670710074
    },
    {
        "content": "<p>I'm writing a raytracer for fun. I wanted to play around with effects and decided to do random numbers using effects but I guess I can seed the rng once and thread the rng around on the Roc side.</p>",
        "id": 315131795,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670710132
    },
    {
        "content": "<p>Anyway, I just pushed the code up to github if anyone wants to take a look: <a href=\"https://github.com/shritesh/raytrace.roc/blob/766c4b8f2d0a0bc9b6669e168ec9f86cded11b21/Raytrace.roc\">https://github.com/shritesh/raytrace.roc/blob/766c4b8f2d0a0bc9b6669e168ec9f86cded11b21/Raytrace.roc</a>. I already have a RNG.roc that used the \"threading the rng\" model and it works as expected. The size of the generated image is defined in Camera.roc. Image width of 100 seems to not overflow the stack.</p>",
        "id": 315132348,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670710588
    },
    {
        "content": "<p>This is all built with optimizations(i assume so, just double checking)? Also, if it is useful (probably outdated), but there is <a href=\"https://github.com/JanCVanB/roc-random\">https://github.com/JanCVanB/roc-random</a></p>",
        "id": 315133926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670711882
    },
    {
        "content": "<p>I did look into that but wanted to do my own as a learning exercise. I have just updated my RNG to take a function with the new RNG and the value as params and it feels very ergonomic.</p>",
        "id": 315136597,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670713740
    }
]