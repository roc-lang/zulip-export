[
    {
        "content": "<p>I've started learning how to write parsers using Roc from the <a href=\"https://github.com/roc-lang/roc/tree/main/examples/parser\">examples </a> for my AoC puzzles and have found it quite enjoyable. </p>\n<p>I began by trying to parse a single character for example the EOL character, or a comma character. e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">eolParser</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"nv\">eolParser</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">buildPrimitiveParser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nf\">'\\</span><span class=\"nv\">n'</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">else</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ParsingFailure</span><span class=\"w\"> </span><span class=\"s\">\"Not a comma\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then started playing around with different combinations of <code>const</code> <code>apply</code> and <code>map</code> to build up more complex parsers.  found it was pretty easy to work my way through and rapidly iterate on ideas. I found it easy to write smaller unit tests (examples below), and use <code>roc check</code> and <code>roc test</code> to build up more complex functionality. </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nv\">eolParser</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"nv\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"s\">\",,,20,03</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">parser</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"nf\">*</span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">oneOrMore</span><span class=\"w\"> </span><span class=\"nv\">commaParser</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"nv\">numberParser</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"nv\">commaParser</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"nv\">numberParser</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"nv\">eolParser</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Still a long way to go, but I thought I would share my experience so far for anyone who may be interested.</p>",
        "id": 313017239,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669800532
    },
    {
        "content": "<p>Also, I'm pretty keen to have functionality like <code>check</code> and <code>test</code> in the roc editor, as I think that would really speed up and improve the experience. I imagine we can get it to the point were after we write a test, it can run it in the background and indicate if it passes or fails in the UI. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 313017831,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669800742
    },
    {
        "content": "<p>btw what is @ meaning  in roc language?</p>",
        "id": 313151194,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669840900
    },
    {
        "content": "<p>It's for <a href=\"https://github.com/roc-lang/roc/blob/main/roc-for-elm-programmers.md#opaque-types\">Opaque Types</a>. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 313153849,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669841799
    },
    {
        "content": "<p>and what is this <code>:=</code>  in  roc  :)</p>",
        "id": 313174065,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1669849365
    },
    {
        "content": "<p>That is a type definition for an opaque type.</p>",
        "id": 313176364,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669850517
    },
    {
        "content": "<p>Very cool! I also wrote a parser derived from Marten's work in examples for the 2021 AoC: <a href=\"https://github.com/ayazhafiz/roc-advent-of-code/blob/main/2021/Parser.roc\">https://github.com/ayazhafiz/roc-advent-of-code/blob/main/2021/Parser.roc</a><br>\nOne useful combinator is <code>dropBefore</code>/<code>dropAfter</code> (<a href=\"https://github.com/ayazhafiz/roc-advent-of-code/blob/28c22ef3a242e9915f22b005fa197aebe1d7971b/2021/day5.roc#L94-L114\">example</a>) which helps eliminate the need for <code>\\_ -&gt; ...</code> patterns in the <code>const</code> combinators.</p>",
        "id": 313195965,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1669863825
    },
    {
        "content": "<p>Heyo. <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>🏻 I participated in the previous Advent of Code and I'm wanting to participate for this month's. This Parser library looks great. Is it available as a Module that I can import into my project? The first in every AoC puzzle is parsing the input, so this library would be great to use.</p>",
        "id": 313738764,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1670105600
    },
    {
        "content": "<p>We're still working on the module import system! For now I think you might have to build your app in the parser platform directory</p>",
        "id": 313742866,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1670108884
    },
    {
        "content": "<p>I think the parser is a standalone interface, so you should be able to copy the file to your app directory and the import it directly.</p>",
        "id": 313742944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670108969
    },
    {
        "content": "<p>Just copy and paste the <code>Parser.roc</code> file next to your app and then import the file directly. <a href=\"https://github.com/lukewilliamboswell/roc-things/tree/main/aoc-2022\">Here</a> is an example of how I am doing it. Works really well. In future I'm sure there will probably be different parser packages which you can import from a URL, but for now I've been doing this. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>FWIW I'm finding AoC really helpful to level up my parser knowledge. It's one thing to read about them; but I have found they are so much simpler to create and use than I imagined. They're almost too simple. I think Roc makes it so easy, that people will use a parser for everything.</p>",
        "id": 313749398,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670114781
    },
    {
        "content": "<p>Where is this Parser platform repo?</p>",
        "id": 313867548,
        "sender_full_name": "Andy Kluger",
        "timestamp": 1670198257
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-things/tree/main/aoc-2022\">my AoC</a> or the example <a href=\"https://github.com/roc-lang/roc/tree/main/examples/parser\">parser platform</a> might be what you are looking for. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 313872183,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670202565
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 313873808,
        "sender_full_name": "Andy Kluger",
        "timestamp": 1670203817
    },
    {
        "content": "<p>For anyone interested I have figured out how to write a <code>skip</code> function for parsing. I renamed <code>apply</code> to <code>keep</code> and re-wrote it without the backpassing so I could follow along with the logic a bit more easily. I've copied the functions I am using below.</p>\n<div class=\"codehilite\"><pre><span></span><code>keep : Parser input (a -&gt; b), Parser input a -&gt; Parser input b\nkeep = \\funParser, valParser -&gt;\n    buildPrimitiveParser \\input -&gt;\n        when parsePartial funParser input is\n            Err msg -&gt; Err msg\n            Ok { val: funVal, input: rest } -&gt;\n                when parsePartial valParser rest is\n                    Err msg2 -&gt; Err msg2\n                    Ok { val: val, input: rest2 } -&gt;\n                        Ok { val: funVal val, input: rest2 }\n\nskip : Parser input a, Parser input * -&gt; Parser input a\nskip = \\funParser, skipParser -&gt;\n    buildPrimitiveParser \\input -&gt;\n        when parsePartial funParser input is\n            Err msg -&gt; Err msg\n            Ok { val: funVal, input: rest } -&gt;\n                when parsePartial skipParser rest is\n                    Err msg2 -&gt; Err msg2\n                    Ok { val: _, input: rest2 } -&gt; Ok { val: funVal, input: rest2 }\n</code></pre></div>\n<p>Using these I can re-write my parser combinators to the following which removes the unecessary <code>\\_ -&gt;</code> curried functions.</p>\n<div class=\"codehilite\"><pre><span></span><code>assignmentPairParser : Parser (List U8) AssignmentPair\nassignmentPairParser =\n    const\n        (\\a -&gt; \\b -&gt; \\c -&gt; \\d -&gt; {\n            startElfA: a,\n            endElfA: b,\n            startElfB: c,\n            endElfB: d,\n        })\n    |&gt; skip (many (codepoint &#39;\\n&#39;))\n    |&gt; keep numberParser\n    |&gt; skip (codepoint &#39;-&#39;)\n    |&gt; keep numberParser\n    |&gt; skip (codepoint &#39;,&#39;)\n    |&gt; keep numberParser\n    |&gt; skip (codepoint &#39;-&#39;)\n    |&gt; keep numberParser\n</code></pre></div>",
        "id": 314158736,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670291870
    },
    {
        "content": "<p>An update on my progress trying to implement a markdown parser in pure Roc. I'm aiming for the Cmark spec, though I am just focussed on getting the bare bones together, and prioritising the basic elements like paragraphs and headings. I would love to get this functional enough for the Roc tutorial and other website content, though there is currently a few things blocking progress. </p>\n<p>I've updated the parser based on what I've learn't so far. I would appreciate any feedback on this. I'm sure there is a lot of room for improvement. I know the parsers are pretty inefficient with a lot of allocations, based on discussion with brendan from his AoC analysis, but I'm hopeful they will play nicely with <a href=\"https://github.com/roc-lang/roc/issues/1361\">seamless slices</a> when they land. </p>\n<p>I've added the following combinators into the <code>Core.roc</code> module specifically for the use case of eating through a line that is whitespace. These feel pretty resource heavy, is there a better way to do this? Might this be something that eventually Roc could automagically parellise under the hood? </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"c1\"># Parser/Core.roc</span><span class=\"w\"></span>\n<span class=\"n\">eatWhile</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">eatWhileNot</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Running <code>roc test</code> on <a href=\"https://github.com/lukewilliamboswell/roc-cmark/blob/main/spec-tests.roc\">spec-tests.roc</a> currently crashes with the below. This is due to the following test. I've not figured what is causing this. Note there is another test failing which is due to <a href=\"https://github.com/roc-lang/roc/issues/4732\">Issue #4732</a> related to the ordering of list pattern matching in a <code>when</code> statement. </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread <span class=\"s1\">'main'</span> panicked at <span class=\"s1\">'internal error: entered unreachable code: Something had a Struct layout, but instead of a Record type, it had: Structure(TagUnion(UnionLabels { length: 5, labels_start: 191, values_start: 1008, _marker: PhantomData }, 3678))'</span>, /Users/luke/Documents/GitHub/roc/crates/repl_eval/src/eval.rs:899:13\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"s2\">\"abc</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parsePartial</span><span class=\"w\"> </span><span class=\"n\">paragraphParser</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Paragraph</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">]}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've been experimenting with different options trying to find an ergonomic and hopefully efficient parser pattern. I've currently settled on the following which feels nice, and I think should handle Utf8 bytes nicely.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">lineEnding</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">lineEnding</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">buildPrimitiveParser</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"nc\">LF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"nc\">CRLF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">...</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, everything explodes when you run <code>roc dev spec-tests.roc</code> at the moment. It gives the following error. I need to investigate this further, but I think it is related to the <code>paragraphParser</code> use of <code>lineEnding</code> with <code>eatWhileNot</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread <span class=\"s1\">'main'</span> panicked at <span class=\"s1\">'There was no entry for `23.IdentId(34)` in scope Scope { symbols: {`23.IdentId(35)`: (Buil</span>\n<span class=\"s1\">----</span>\n<span class=\"s1\">... another 200 lines</span>\n<span class=\"s1\">----</span>\n<span class=\"s1\">No predecessors!\\n  %joinpointarg = phi { [0 x i64], [48 x i8], i8, [7 x i8] }* , !dbg !471\\n\", llvm_type: \"label\" }, [PhiValue { phi_value: Value { name: \"joinpointarg\", address: 0x600003b99598, is_const: false, is_null: false, is_undef: false, llvm_value: \"  %joinpointarg = phi { [0 x i64], [48 x i8], i8, [7 x i8] }* , !dbg !471\", llvm_type: \"{ [0 x i64], [48 x i8], i8, [7 x i8] }*\" } }])} }'</span>, crates/compiler/gen_llvm/src/llvm/build.rs:2746:17\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace\n</code></pre></div>",
        "id": 315174782,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670746836
    }
]