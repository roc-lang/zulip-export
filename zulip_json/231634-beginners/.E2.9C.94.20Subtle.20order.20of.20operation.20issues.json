[
    {
        "content": "<p>I found my code was producing incorrect results, and it wasn't till I experimented w/ argument order, I uncovered the issue.</p>\n<p>I tried implementing tanh and my first function produced data- but I noticed it was subtly off</p>\n<p>Then, I thought \"maybe I misunderstood order of arguments to Num.pow?\" which you can see I tried, but it doesn't compile,</p>\n<p>Which in turn clued me into a subtle order of operation issue, corrected in final version:</p>\n<div class=\"codehilite\"><pre><span></span><code>subtlyIncorrectTanh : Number -&gt; Number\nsubtlyIncorrectTanh = \\x -&gt;\n  ((Num.pow Num.e 2*x) - 1)/((Num.pow Num.e 2*x) + 1)\n\nfailsToCompileTanh : Number -&gt; Number\nfailsToCompileTanh = \\x -&gt;\n  ((Num.pow 2*x Num.e) - 1)/((Num.pow 2*x Num.e) + 1)\n\ncorrectTanh : Number -&gt; Number\ncorrectTanh = \\x -&gt;\n  ((Num.pow Num.e (2*x)) - 1)/((Num.pow Num.e (2*x)) + 1)\n</code></pre></div>",
        "id": 442557326,
        "sender_full_name": "Aaron White",
        "timestamp": 1717514845
    },
    {
        "content": "<p>That was far too subtle for my taste, and I wonder if it could be more aggressive asserting some sort of order of operations ambiguousness error. Dunno</p>",
        "id": 442557574,
        "sender_full_name": "Aaron White",
        "timestamp": 1717514907
    },
    {
        "content": "<p>Lastly, I wanna note the docs using <code>Frac a, Frac a -&gt; Frac a</code> led me to trying Num.pow(e, x) but of course that's incorrect. I find the use of <code>,</code> in the signature but not the application very confusing as a relative new comer. (similarly tripped up on record values using <code>:</code> which everywhere else is used for type signatures)</p>",
        "id": 442557822,
        "sender_full_name": "Aaron White",
        "timestamp": 1717514973
    },
    {
        "content": "<p>Interesting</p>",
        "id": 442604343,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717527939
    },
    {
        "content": "<p>This is cause something like this works:<br>\n<code>List.get x 12 == 8</code></p>",
        "id": 442604538,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717527998
    },
    {
        "content": "<p><code>List.get x 12 * 8</code> is fundamentally the same thing</p>",
        "id": 442604638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717528030
    },
    {
        "content": "<p>And that is what <code>Num.pow Num.e 2 * x</code> is as well</p>",
        "id": 442604673,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717528041
    },
    {
        "content": "<p>That said, we could make a special class for comparison operators vs mathematic operators. Haven't though through any of the caveats of that though</p>",
        "id": 442604797,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717528074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595862\">Aaron White</span> <a href=\"#narrow/stream/231634-beginners/topic/Subtle.20order.20of.20operation.20issues/near/442557822\">said</a>:</p>\n<blockquote>\n<p>I find the use of <code>,</code> in the signature but not the application very confusing as a relative new comer.</p>\n</blockquote>\n<p>yeah this just came up recently in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Comma.20Delimited.20Arguments.20when.20function.20is.20called\">#ideas &gt; Comma Delimited Arguments when function is called</a></p>",
        "id": 442926600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717630889
    },
    {
        "content": "<p>one of the main arguments for the status quo is that it facilitates list-based DSLs along the lines of <code>elm/html</code>, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>[onClick blah, onHover foo]\n</code></pre></div>",
        "id": 442926755,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717630944
    },
    {
        "content": "<p>if commas separate arguments, then that would have to be written as <code>[(onClick blah), (onHover foo)]</code></p>",
        "id": 442926787,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717630964
    },
    {
        "content": "<p>but I think this is the first time that the tradeoff in the opposite direction has been brought up for numeric calculations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 442926851,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717630993
    },
    {
        "content": "<p>that is, <code>Num.pow Num.e (2 * x)</code> vs. <code>Num.pow Num.e, 2 * x</code></p>",
        "id": 442926917,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717631023
    },
    {
        "content": "<p>there's always the OCaml solution of delimiting list elements with semicolons <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>[onClick blah; onHover foo]\n</code></pre></div>",
        "id": 442927195,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717631128
    },
    {
        "content": "<p>but I don't think that's the way to go here</p>",
        "id": 442927337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717631169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595862\">Aaron White</span> has marked this topic as resolved.</p>",
        "id": 443192736,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717725955
    },
    {
        "content": "<p>Does <code>Num.pow Num.e 2 * x</code> evoke a different intuition than <code>Num.pow Num.e 2*x</code>? I wonder if there should be a warning for omitting those spaces because it makes it look like an atomic expression, so it's especially confusing when the atoms on either side of <code>*</code> are in fact not its operands.</p>",
        "id": 443213630,
        "sender_full_name": "timotree",
        "timestamp": 1717737726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> the argument is less about changing the value space, I'm noting incongruities in kinda my \"newcomer mental model\" - docs showed comma, programmers are used to comma meaning multi arg for func tuple style. Other option would be changing doc representation. Again, similar mental model busting (though I'm elm biased obviously, as you know ) around records using <code>:</code> which everywhere else is used for types, and everywhere else <code>=</code> is used for value, except in records. Though if folks coming from other languages don't get tripped on that, I'll survive :)</p>",
        "id": 443302973,
        "sender_full_name": "Aaron White",
        "timestamp": 1717768361
    },
    {
        "content": "<p>You can add opaque types to the list. Theyâ€™re declared with <code>:=</code> but used with <code>@</code> prefix</p>",
        "id": 443414393,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1717815426
    }
]