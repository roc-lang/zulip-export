[
    {
        "content": "<p>Don't Dicts implement Eq-ability? Is there a ticket for it?</p>",
        "id": 513669445,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745343986
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><code>Stdout.line!(Inspect.to_str((Dict.single(&quot;A&quot;, &quot;B&quot;) == Dict.single(&quot;A&quot;, &quot;B&quot;))))\n</code></pre></div>\n<p>Can you provide your code?</p>",
        "id": 513670452,
        "sender_full_name": "Anton",
        "timestamp": 1745344354
    },
    {
        "content": "<p>Oh, it was F64, which doesn't implement <code>Eq</code>. My bad. The error message was confusing presumingly because of other errors. After I fixed other errors I see a better error message even with a great hint about the reasoning around float not implementing <code>Eq</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ./RestApi.roc ──────────────────────────────────────────────\n\nThis expression has a type that does not implement the abilities it&#39;s expected to:\n\n36│      actual == Ok(database)\n         ^^^^^^\n\nI can&#39;t generate an implementation of the Eq ability for\n\n    [\n        Err *,\n        Ok Database,\n    ]\n\nIn particular, an implementation for\n\n    FloatingPoint ?\n\ncannot be generated.\n\nNote: I can&#39;t derive Bool.is_eq for floating-point types. That&#39;s\nbecause Roc&#39;s floating-point numbers cannot be compared for total\nequality - in Roc, `NaN` is never comparable to `NaN`. If a type\ndoesn&#39;t support total equality, it cannot support the Eq ability!\n</code></pre></div>\n<p>The previous error was:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ./RestApi.roc ──────────────────────────────────────────────\n\nThis expression has a type that does not implement the abilities it&#39;s expected to:\n\n36│      actual == Ok(database)\n         ^^^^^^\n\nI can&#39;t generate an implementation of the Eq ability for\n\n    [\n        Err *,\n        Ok Database,\n    ]\n\nIn particular, an implementation for\n\n    ?\n\ncannot be generated.\n</code></pre></div>\n<p>I appritiate the note, but this question mark even here <code>FloatingPoint ?</code> is not easy to read. Why doesn't the compiler write the type variable instead of the question mark?</p>",
        "id": 513674853,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745345688
    },
    {
        "content": "<p>I'm not sure, can you share the related block of code?</p>",
        "id": 513804348,
        "sender_full_name": "Anton",
        "timestamp": 1745395919
    },
    {
        "content": "<p>The compiler uses question mark to point out what is unknown in a type.</p>",
        "id": 513906853,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745423189
    },
    {
        "content": "<p>If no date is known, just a question mark</p>",
        "id": 513906950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745423214
    },
    {
        "content": "<p>If some data is know like they type being a floating point, it adds that info</p>",
        "id": 513907005,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745423230
    },
    {
        "content": "<p>I think it is mostly done for clarity of new learners</p>",
        "id": 513907181,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745423280
    },
    {
        "content": "<p>But I don't actually know the original incentives, so that is just a guess.</p>",
        "id": 513907270,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745423296
    },
    {
        "content": "<p>I'm a bit surprised it is <code>FloatingPoint ?</code> and not <code>F64</code></p>",
        "id": 513907376,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745423330
    },
    {
        "content": "<p>I feel like if I saw <code>FloatingPoint a</code> or <code>FloatingPoint unknown</code>, it wouldn't really be clearer than <code>`FloatingPoint ?</code>. But I guess it would be more familiar as it is still a type variable.</p>",
        "id": 513907707,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745423412
    },
    {
        "content": "<p>The thing is the full type should have been known in my opinion. It was just <code>F64</code>. I'll try to find time today and post the code. I've fixed the error, so would need time to reproduce it.</p>",
        "id": 513913372,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745424856
    },
    {
        "content": "<p><img alt=\":nod-yes:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/a8fe64af.gif\" title=\"nod-yes\"> yeah, I would guess it is a big in the output</p>",
        "id": 513974394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745447220
    },
    {
        "content": "<p>Even is a simple example like this the compiler doesn't seem to recognise the type and references the type variable as <code>?</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    a : List F64\n    a = [1.0]\n    b : List F64\n    b = [1.0]\n\n    a == b\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ./Delme.roc ────────────────────────────────────────────────\n\nThis expression has a type that does not implement the abilities it&#39;s expected to:\n\n11│      a == b\n         ^\n\nI can&#39;t generate an implementation of the Eq ability for\n\n    List (Frac ?)\n\nIn particular, an implementation for\n\n    FloatingPoint ?\n\ncannot be generated.\n\nNote: I can&#39;t derive Bool.is_eq for floating-point types. That&#39;s\nbecause Roc&#39;s floating-point numbers cannot be compared for total\nequality - in Roc, `NaN` is never comparable to `NaN`. If a type\ndoesn&#39;t support total equality, it cannot support the Eq ability!\n</code></pre></div>\n<p>Why not <code>F64</code> or at least something like?</p>\n<div class=\"codehilite\"><pre><span></span><code>FloatingPoint Signed64\n              ^^^^^^^^\n</code></pre></div>",
        "id": 514086344,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745491930
    },
    {
        "content": "<p>I wonder if this was intentional but led to a bad error message accidentally. Like the computer is trying to say it can't generate <code>Eq</code> for any floating point types and just printing that poorly.</p>",
        "id": 514161970,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745509512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Eq.20ability.20for.20Dict/near/514161970\">said</a>:</p>\n<blockquote>\n<p>I wonder if this was intentional but led to a bad error message accidentally. Like the computer is trying to say it can't generate <code>Eq</code> for any floating point types and just printing that poorly.</p>\n</blockquote>\n<p>I doubt so. My initial error, which I struggle to reproduce now was just stating <code>?</code> without any hints, i.e.:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ./RestApi.roc ──────────────────────────────────────────────\n\nThis expression has a type that does not implement the abilities it&#39;s expected to:\n\n36│      actual == Ok(database)\n         ^^^^^^\n\nI can&#39;t generate an implementation of the Eq ability for\n\n    [\n        Err *,\n        Ok Database,\n    ]\n\nIn particular, an implementation for\n\n    ?\n\ncannot be generated.\n</code></pre></div>",
        "id": 514163523,
        "sender_full_name": "Ilya Shmygol",
        "timestamp": 1745510003
    }
]