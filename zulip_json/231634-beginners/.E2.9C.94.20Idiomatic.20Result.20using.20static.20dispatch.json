[
    {
        "content": "<p>With the static dispatch proposal, what is the idiomatic way to return an Err tag using the \"?\" character?<br>\nI'm a little confused by the new pass_to .() syntax.</p>\n<p>Existing code</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">birth_year</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">map_err</span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">to_u16</span><span class=\"p\">(</span><span class=\"nv\">birth_year_str</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">_</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">InvalidBirthYearFormat</span><span class=\"p\">)</span><span class=\"err\">?</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">first_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">last_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">birth_year</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div>\n<p>Is this correct syntax for Static Dispatch with pass to syntax?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">   </span><span class=\"nv\">birth_year</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">to_u16</span><span class=\"p\">(</span><span class=\"nv\">birth_year_str</span><span class=\"p\">)</span><span class=\"nf\">.</span><span class=\"nv\">map_err</span><span class=\"nf\">.</span><span class=\"p\">(</span><span class=\"kt\">InvalidBirthYearFormat</span><span class=\"p\">)</span><span class=\"err\">?</span>\n\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">first_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">last_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">birth_year</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"nf\">.</span><span class=\"kt\">Ok</span><span class=\"p\">()</span>\n</code></pre></div>",
        "id": 500253179,
        "sender_full_name": "Brian Teague",
        "timestamp": 1739816286
    },
    {
        "content": "<p>The first one would be correct, but perhaps could be more idiomatic. (But what idiomatic is, isn't clear because the syntax doesn't even exist yet.)</p>\n<p>Since <code>map_err</code> would be defined within the<code>Result</code> module, you would do</p>\n<div class=\"codehilite\"><pre><span></span><code>birth_year = birth_year_str.to_u16().map_err(|_| InvalidBirthYearFormat)?\n\n{ first_name, last_name, birth_year }.(Ok)\n</code></pre></div>",
        "id": 500254852,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1739817048
    },
    {
        "content": "<p>But with the binary <code>?</code> operator, the first line could become</p>\n<div class=\"codehilite\"><pre><span></span><code>birth_year = birth_year_str.to_u16() ? |_| InvalidBirthYearFormat\n</code></pre></div>",
        "id": 500255057,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1739817125
    },
    {
        "content": "<p>Is there a way to get rid of the empty lambda <code>|_|</code> using pass_to syntax?<br>\n<code>.map_err.(InvalidBirthYearFormat)</code></p>",
        "id": 500255124,
        "sender_full_name": "Brian Teague",
        "timestamp": 1739817154
    },
    {
        "content": "<p>Also, the <code>foo.(bar)</code> syntax isn't set in stone. It could become <code>foo-&gt;bar</code> or something else</p>",
        "id": 500255171,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1739817181
    },
    {
        "content": "<p>So would this be possible?<br>\n<code>birth_year = birth_year_str.to_u16().map_err.(InvalidBirthYearFormat)?</code></p>",
        "id": 500255189,
        "sender_full_name": "Brian Teague",
        "timestamp": 1739817188
    },
    {
        "content": "<p>Not as far as I know. As this would wrap the error in an extra tag</p>",
        "id": 500255349,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1739817247
    },
    {
        "content": "<p>This is the good default because you can define the one you want with the empty lambda, but not the other way around. Also, by default, you keep more context this way which is better most of the times</p>",
        "id": 500255431,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1739817302
    },
    {
        "content": "<p>I don't think the <code>.(fn)</code> relates to error handling really</p>",
        "id": 500259827,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739819444
    },
    {
        "content": "<p>Except for convenient tag wrapping like <code>.(Ok)</code></p>",
        "id": 500259867,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739819469
    },
    {
        "content": "<p>But it don't specific interact with map_err</p>",
        "id": 500259896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739819480
    },
    {
        "content": "<p>Anyway, yeah, the three expected forms of error propagating<br>\nRaw propagation:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">birth_year_str</span><span class=\"o\">.</span><span class=\"n\">to_u16</span><span class=\"p\">()?</span>\n</code></pre></div>\n<p>Wrapping:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">birth_year_str</span><span class=\"o\">.</span><span class=\"n\">to_u16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">WrapperTag</span>\n</code></pre></div>\n<p>New tag:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">birth_year_str</span><span class=\"o\">.</span><span class=\"n\">to_u16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">NewTag</span>\n</code></pre></div>",
        "id": 500260150,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739819612
    },
    {
        "content": "<p>What's the difference with WrapperTag?   Is this just a predefined function that returns a tag?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">WrapperTag</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">_</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">WrappedTag</span>\n<span class=\"nv\">birth_year_str</span><span class=\"nf\">.</span><span class=\"nv\">to_u16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"kt\">WrapperTag</span>\n</code></pre></div>",
        "id": 500260895,
        "sender_full_name": "Brian Teague",
        "timestamp": 1739819982
    },
    {
        "content": "<p>Every tag name is a function that returns a tag</p>",
        "id": 500261061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739820078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676210\">Brian Teague</span> has marked this topic as resolved.</p>",
        "id": 500261091,
        "sender_full_name": "Notification Bot",
        "timestamp": 1739820105
    },
    {
        "content": "<p>So the wrapper tag case leads to <code>WrapperTag [InvalidNumStr]</code> where the new tag case throws away the original error <code>InvalidNumStr</code></p>",
        "id": 500261216,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739820165
    }
]