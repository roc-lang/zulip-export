[
    {
        "content": "<p>Prompted by the session yesterday, I made a cowsay clone, <a href=\"/user_uploads/22008/lX9OVZkr7DQ6ryaIPRsuMDJ-/rocsay.roc\">rocsay.roc</a>. You'll need the template <a href=\"/user_uploads/22008/OmABsS53h4EWlM5Q11PmOIwS/roc.txt\">roc.txt</a> too. Put both of these in <code>examples/interactive</code> in the repo and run <code>roc examples/interactive/rocsay.roc</code> from the repo root. Here's a <a href=\"/user_uploads/22008/PfHaT3yW8X5Nynq3K1zCMX40/Screenshot-2022-09-14-at-09.53.42.png\">screenshot</a> in case you don't want to run it.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/PfHaT3yW8X5Nynq3K1zCMX40/Screenshot-2022-09-14-at-09.53.42.png\" title=\"screenshot\"><img src=\"/user_uploads/22008/PfHaT3yW8X5Nynq3K1zCMX40/Screenshot-2022-09-14-at-09.53.42.png\"></a></div><p>Does the CLI platform allow reading arguments yet? I wanted to make rocsay take a string, like cowsay, but couldn't find anything in the CLI patform in the repo about taking command line args. I know the platform's new so it might not be available yet, but I wanted to check anyway.</p>",
        "id": 298720770,
        "sender_full_name": "David Dunn",
        "timestamp": 1663142444
    },
    {
        "content": "<p>SO COOL! Yes, the example CLI platform should be getting arg parsing soon: <a href=\"https://github.com/roc-lang/roc/pull/3990\">https://github.com/roc-lang/roc/pull/3990</a></p>",
        "id": 298758586,
        "sender_full_name": "jan kili",
        "timestamp": 1663157445
    },
    {
        "content": "<p>love it!!! <span aria-label=\"heart eyes cat\" class=\"emoji emoji-1f63b\" role=\"img\" title=\"heart eyes cat\">:heart_eyes_cat:</span></p>",
        "id": 298767515,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663160904
    },
    {
        "content": "<p>#3990 has landed, so the CLI platform now takes a <code>main</code> function that accepts command-line arguments!</p>",
        "id": 298838203,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663184107
    },
    {
        "content": "<p>We've also added an command-line argument parser to the CLI platform, that you can use for all your CLI parsing needs. There's an example at <a href=\"https://github.com/roc-lang/roc/blob/main/examples/interactive/args.roc\">https://github.com/roc-lang/roc/blob/main/examples/interactive/args.roc</a>. Feel free to send suggest/file issues for feature requests and bugs for the arg parser!</p>",
        "id": 298838406,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663184176
    },
    {
        "content": "<p>Updated! Haven't use the fancy arg parsing yet, but I'll add some flags next. Here's the new <a href=\"/user_uploads/22008/NXiFAJ2j2hbVUNUfQkFKupq3/rocsay.roc\">code</a> &amp; a <a href=\"/user_uploads/22008/dqe-9FSNwKRtdiWQaJD93Vs3/Screenshot-2022-09-15-at-00.01.43.png\">screenshot</a>!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/dqe-9FSNwKRtdiWQaJD93Vs3/Screenshot-2022-09-15-at-00.01.43.png\" title=\"screenshot\"><img src=\"/user_uploads/22008/dqe-9FSNwKRtdiWQaJD93Vs3/Screenshot-2022-09-15-at-00.01.43.png\"></a></div>",
        "id": 298859424,
        "sender_full_name": "David Dunn",
        "timestamp": 1663193074
    },
    {
        "content": "<p>Thanks so much for the work on the args <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> Looking forward to more happy hacking in Roc!</p>",
        "id": 298860517,
        "sender_full_name": "David Dunn",
        "timestamp": 1663193587
    },
    {
        "content": "<p>I love seeing a one-day-old built-in (<code>Str.replaceEach</code>) used for such fun</p>",
        "id": 298881316,
        "sender_full_name": "jan kili",
        "timestamp": 1663198393
    },
    {
        "content": "<p>Hi, I don't know if it's the best place, or if I should create a new channel.<br>\nAfter testing the new \"args\" feature of the \"cli-platform\", I came across this behavior when sending bad arguments:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./examples/interactive/args log --num 3\n[...]\nArgument `--num` is required but was not provided!\n</code></pre></div>\n<p>I thought it would be a good opportunity to get into the implementation a bit more, and try to fix it. But I'm a bit stuck with the <code>expect</code> behavior that panics every time I want to do a failing test. And as I'm not very comfortable with the code yet, I'd like to do some changes in <code>expect</code>s, for example, this will panic (from Arg.go:612):</p>\n<div class=\"codehilite\"><pre><span></span><code># two string parsers complete cases\nexpect\n    parser =\n        succeed (\\foo -&gt; \\bar -&gt; &quot;foo: \\(foo) bar: \\(bar)&quot;)\n        |&gt; withParser (str { long: &quot;foo&quot; })\n        |&gt; withParser (str { long: &quot;bar&quot; })\n\n    cases = [\n        [&quot;--foo&quot;, &quot;true&quot;]\n    ]\n\n    List.all cases \\args -&gt; parseHelp parser args == Ok &quot;foo: true bar: baz&quot;\n</code></pre></div>",
        "id": 299068775,
        "sender_full_name": "Ghislain",
        "timestamp": 1663285259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> for the above, it looks like the <code>ExpectFrame</code> is being read at the wrong address and ends up corrupted - any ideas?</p>",
        "id": 299215978,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663351892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"528453\">@Ghislain</span> in the meantime you can do something like</p>\n<div class=\"codehilite\"><pre><span></span><code># two string parsers complete cases\nexpect\n    parsed =\n        parser =\n            succeed (\\foo -&gt; \\bar -&gt; &quot;foo: \\(foo) bar: \\(bar)&quot;)\n            |&gt; withParser (str { long: &quot;foo&quot; })\n            |&gt; withParser (str { long: &quot;bar&quot; })\n\n        parseHelp parser [&quot;--foo&quot;, &quot;true&quot;]\n\n    parsed == Ok &quot;foo: true bar: baz&quot;\n</code></pre></div>\n<p>however you will notice that the error message is incorrect - it prints out the wrong error value <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so there is some reading of the wrong bytes there too!</p>",
        "id": 299216118,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663351932
    },
    {
        "content": "<p>can we get that snippet down to a self-contained example?</p>",
        "id": 299221576,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663353926
    },
    {
        "content": "<p>the failing one, I mean</p>",
        "id": 299221593,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663353932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> I got it down to </p>\n<div class=\"codehilite\"><pre><span></span><code>Parser a := [\n    Succeed a,\n    Arg Config (List Str -&gt; Result a [NotFound, WrongType]),\n    # TODO: hiding the record behind an alias currently causes a panic\n    SubCommand\n        (List {\n            name : Str,\n            parser : Parser a,\n        }),\n\n    # Constructed during transformations of the above variants\n    WithConfig (Parser a) Config,\n    Lazy ({} -&gt; a),\n]\n\nandMap : Parser a, Parser (a -&gt; b) -&gt; Parser b\nandMap = \\@Parser parser, @Parser mapper -&gt;\n    unwrapped =\n        when mapper is\n            Succeed fn -&gt;\n                when parser is\n                    Succeed a -&gt;\n                        Lazy \\{} -&gt; fn a\n\n                    Lazy thunk -&gt;\n                        Lazy \\{} -&gt; fn (thunk {})\n\n                    WithConfig parser2 config -&gt;\n                        parser2\n                        |&gt; andMap (@Parser mapper)\n                        |&gt; WithConfig config\n\n                    Arg config run -&gt;\n                        Arg config \\args -&gt;\n                            run args\n                            |&gt; Result.map fn\n\n                    SubCommand cmds -&gt;\n                        mapSubParser = \\{ name, parser: parser2 } -&gt;\n                            { name, parser: andMap parser2 (@Parser mapper) }\n\n                        List.map cmds mapSubParser\n                        |&gt; SubCommand\n\n            Arg config run -&gt;\n                when parser is\n                    Succeed a -&gt;\n                        Arg config \\args -&gt;\n                            when run args is\n                                Ok fn -&gt; Ok (fn a)\n                                Err err -&gt; Err err\n\n                    Lazy thunk -&gt;\n                        Arg config \\args -&gt;\n                            when run args is\n                                Ok fn -&gt; Ok (fn (thunk {}))\n                                Err err -&gt; Err err\n\n                    WithConfig parser2 config2 -&gt;\n                        parser2\n                        |&gt; andMap (@Parser mapper)\n                        |&gt; WithConfig config2\n\n                    Arg config2 run2 -&gt;\n                        # Parse first the one and then the other.\n                        combinedParser = Arg config2 \\args -&gt;\n                            when run args is\n                                Ok fn -&gt; run2 args |&gt; Result.map fn\n                                Err err -&gt; Err err\n\n                        # Store the extra config.\n                        @Parser combinedParser\n                        |&gt; WithConfig config\n\n                    SubCommand cmds -&gt;\n                        # For each subcommand, first run the subcommand, then\n                        # push the result through the arg parser.\n                        mapSubParser = \\{ name, parser: parser2 } -&gt;\n                            { name, parser: andMap parser2 (@Parser mapper) }\n\n                        List.map cmds mapSubParser\n                        |&gt; SubCommand\n\n            Lazy thunk -&gt;\n                fn = thunk {}\n\n                when parser is\n                    Succeed a -&gt;\n                        Lazy \\{} -&gt; fn a\n\n                    Lazy innerThunk -&gt;\n                        Lazy \\{} -&gt; fn (innerThunk {})\n\n                    WithConfig parser2 config -&gt;\n                        parser2\n                        |&gt; andMap (@Parser mapper)\n                        |&gt; WithConfig config\n\n                    Arg config run -&gt;\n                        Arg config \\args -&gt;\n                            run args\n                            |&gt; Result.map fn\n\n                    SubCommand cmds -&gt;\n                        mapSubParser = \\{ name, parser: parser2 } -&gt;\n                            { name, parser: andMap parser2 (@Parser mapper) }\n\n                        List.map cmds mapSubParser\n                        |&gt; SubCommand\n\n            WithConfig mapper2 config -&gt;\n                @Parser parser\n                |&gt; andMap mapper2\n                |&gt; WithConfig config\n\n            SubCommand cmds -&gt;\n                mapSubParser = \\{ name, parser: mapper2 } -&gt;\n                    { name, parser: andMap (@Parser parser) mapper2 }\n\n                List.map cmds mapSubParser\n                |&gt; SubCommand\n\n    @Parser unwrapped\n\nwithParser = \\arg1, arg2 -&gt; andMap arg2 arg1\n\nsucceed : a -&gt; Parser a\nsucceed = \\val -&gt; @Parser (Succeed val)\n\n# two string parsers complete cases\nexpect\n    parser =\n        succeed (\\foo -&gt; \\bar -&gt; &quot;foo: \\(foo) bar: \\(bar)&quot;)\n        |&gt; withParser (str { long: &quot;foo&quot; })\n        |&gt; withParser (str { long: &quot;bar&quot; })\n\n    cases = [\n        [&quot;--foo&quot;, &quot;true&quot;]\n    ]\n\n    List.all cases \\args -&gt; parseHelp parser args == Ok &quot;foo: true bar: baz&quot;\n</code></pre></div>\n<p>but when running that with <code>roc test</code> I get </p>\n<div class=\"codehilite\"><pre><span></span><code>── EXPECT PANICKED ──────────────────────── examples/benchmarks/Scratchpad.roc ─\n\nThis expectation crashed while running:\n\n137│&gt;  # two string parsers complete cases\n138│&gt;  expect\n139│&gt;      parser =\n140│&gt;          succeed (\\foo -&gt; \\bar -&gt; &quot;foo: \\(foo) bar: \\(bar)&quot;)\n141│&gt;          |&gt; withParser (str { long: &quot;foo&quot; })\n142│&gt;          |&gt; withParser (str { long: &quot;bar&quot; })\n143│&gt;\n144│&gt;      cases = [\n145│&gt;          [&quot;--foo&quot;, &quot;true&quot;]\n146│&gt;      ]\n147│&gt;\n148│&gt;      List.all cases \\args -&gt; parseHelp parser args == Ok &quot;foo: true bar: baz&quot;\n\nThe crash reported this message:\n\nHit an erroneous type when creating a layout for `#UserApp.succeed`\n</code></pre></div>",
        "id": 299223851,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663354767
    },
    {
        "content": "<p>so what we're seeing may be some interaction between type errors and the expect serialization not working in that case</p>",
        "id": 299223940,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663354797
    },
    {
        "content": "<p>with the full file, there are no type errors but expect still fails. I'll try to cut down a minimal reproduction</p>",
        "id": 299226821,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663355891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"528453\">@Ghislain</span> that bug should be fixed on the <code>main</code> branch now!</p>",
        "id": 299259532,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663374521
    },
    {
        "content": "<p>Are positional arguments not yet supported?<br>\nFor example: <code>./myApp echo 'hello world'</code> instead of <code>./myApp echo --text 'hello world'</code></p>",
        "id": 300711179,
        "sender_full_name": "jan kili",
        "timestamp": 1664161635
    },
    {
        "content": "<p>They are not yet supported</p>",
        "id": 300812121,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664198206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"528453\">Ghislain</span> <a href=\"#narrow/stream/231634-beginners/topic/Args.20for.20CLI.20platform.3F/near/299068775\">said</a>:</p>\n<blockquote>\n<p>...<br>\nAfter testing the new \"args\" feature of the \"cli-platform\", I came across this behavior when sending bad arguments:<br>\n...</p>\n</blockquote>\n<p>Good news - <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> seems to have fixed that!</p>",
        "id": 301570858,
        "sender_full_name": "jan kili",
        "timestamp": 1664513890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544828\">@rocco</span> issue 4129</p>",
        "id": 301570907,
        "sender_full_name": "jan kili",
        "timestamp": 1664513961
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/4129\">https://github.com/roc-lang/roc/issues/4129</a></p>",
        "id": 301570908,
        "sender_full_name": "rocco",
        "timestamp": 1664513962
    }
]