[
    {
        "content": "<p>I've just been reading through the messages in the past few days - have been largely on the outside of Roc, seeing the occasional talk and blog post over the past couple years. Recently I realised I was really quite interested in seeing the development of this language, especially a functional one with such lofty and unique goals. So this is my part \"hello!\" message, but also because I'm really not sure if I've quite understood the following, I'm asking here in beginners.</p>\n<p>It's my understanding that recently accepted semantics of <code>foo() ? bar</code> is to - in the case of an Err - map bar on the contained error value before returning early. What I don't understand is how this will affect the below examples:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"497765\">Kilian Vounckx</span> <a href=\"#narrow/channel/304641-ideas/topic/static.20dispatch.20-.20homepage.20example/near/490600476\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/304641-ideas/topic/static.20dispatch.20-.20homepage.20example/near/490600000\">said</a>:</p>\n<blockquote>\n<p>yeah I think you'd need parens</p>\n</blockquote>\n<p>In a longer pipe that might become more verbose</p>\n<p>With parens:</p>\n<div class=\"codehilite\"><pre><span></span><code>(\n    foo1()\n    .foo2)\n    .foo3() ? MapErr\n)\n.bar()\n.baz()\n</code></pre></div>\n<p>Without parens:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo1()\n.foo2()\n.foo3() ? MapErr\n.bar()\n.baz()\n</code></pre></div>\n<p>With <code>map_err</code> and postfix <code>?</code>:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>foo1()\n.foo2()\n.foo3()\n.map_err(MapErr)?\n.bar()\n.baz()\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is the current consensus that parens will be needed to continue the chain? I.e., for the second option, it's my understanding that SD/methods would lead to (if <code>bar</code> was a valid function that could be applied to the error value) <code>.bar().baz()</code> being applied to the error value before returning. Or is this a case handled by whitespace delimiting the <code>?</code> (which would be very surprising to me)? Furthermore, I'm really quite fond of being able to use multiple <code>?</code> in a chain of method calls, so as to stay on the happy path - would that be facilitated? </p>\n<p>I've been (unsuccessfully) trying to catch up and figure out where current opinions and changes lie, so I apologise if I've completely missed the mark here, but I am curious!</p>",
        "id": 494049562,
        "sender_full_name": "Jonathan",
        "timestamp": 1736991581
    },
    {
        "content": "<p>Welcome! And that is a really good parsing question. Often for these kinds of syntaxes, you have to imagine what it would look like on a single line to see if the parsing makes sense.</p>\n<p>I would assume that this would fail to parse:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">foo1</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">foo2</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">foo3</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">MapErr</span>\n<span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Imagine it on one line:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">foo1</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">foo2</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">foo3</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">MapErr</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Without some form of parens, that really does not make sense.</p>\n<p>That said, making it parse (which would require change precedence or whitespace rules) could be really powerful. It would be nice to facilitate something like:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span>\n<span class=\"o\">.</span><span class=\"n\">stage1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage1Err</span>\n<span class=\"o\">.</span><span class=\"n\">stage2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage2Err</span>\n<span class=\"o\">.</span><span class=\"n\">stage3</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">Stage3Err</span>\n</code></pre></div>\n<p>But I definitely would not expect that to work by default. It would instead be a follow up syntax that we might enable if there is significant demand and it makes sense for the language.</p>\n<p>That is at least my understanding, but someone else who know more about parsing may have corrections.</p>",
        "id": 494051005,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736992293
    },
    {
        "content": "<p>So in a pipeline, you would have to write it out as:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span>\n<span class=\"o\">.</span><span class=\"n\">stage1</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"no\">Stage1Err</span><span class=\"p\">)?</span>\n<span class=\"o\">.</span><span class=\"n\">stage2</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"no\">Stage2Err</span><span class=\"p\">)?</span>\n<span class=\"o\">.</span><span class=\"n\">stage3</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"no\">Stage3Err</span><span class=\"p\">)?</span>\n</code></pre></div>",
        "id": 494051113,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736992347
    },
    {
        "content": "<p>Or I guess add a ton of parens, but that would look really bad</p>",
        "id": 494051139,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736992366
    },
    {
        "content": "<blockquote>\n<p>I've been (unsuccessfully) trying to catch up and figure out where current opinions and changes lie, so I apologise if I've completely missed the mark here, but I am curious!</p>\n</blockquote>\n<p>I generally read ~100% of the messaeges that appear on the roc zulip and lately it has been going to fast for me to keep up. As such I have even skimmed or skipped large sections of discussion. So this is super undestandable</p>",
        "id": 494051522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736992569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"820027\">@Jonathan</span> checkout <a class=\"message-link\" href=\"/#narrow/channel/304902-show-and-tell/topic/roc-realworld.20initial.20exploration/near/491565735\">#show and tell &gt; roc-realworld initial exploration @ ðŸ’¬</a> </p>\n<p>If you would like to see the \"future\" syntax of Roc.</p>",
        "id": 494052100,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736992882
    },
    {
        "content": "<p>I see! So the simplified mapping syntax requires the whitespace, and cannot (as it stands) be used within a chain. For that, you would revert to the unsugared <code>map_err</code> version, with a <code>?</code> and no whitespace? I'm just a little fixated on whitespace because it would mean that </p>\n<div class=\"codehilite\"><pre><span></span><code>x\n.stage1()?\n.stage2()\n</code></pre></div>\n<p>(where <code>stage1</code> returns a Result that we are leaving as-is - no mapping) is semantically different from</p>\n<div class=\"codehilite\"><pre><span></span><code>x\n.stage1() ?\n.stage2()\n</code></pre></div>\n<p>In the latter, could it not be that <code>stage2</code> is being mapped on any Err returned by <code>stage1</code>, whilst the former example early-returns the Err from <code>stage1</code> unaltered, and otherwise unwraps the <code>Ok</code> and passes the contents to <code>stage2</code>?<br>\nI know this is quite a construed example (if it is even right), and would rely on <code>stage2</code> being compatible with both Err and Ok values, but I still find it pretty high in terms of surprise or weirdness.</p>",
        "id": 494052104,
        "sender_full_name": "Jonathan",
        "timestamp": 1736992887
    },
    {
        "content": "<p>Yeah, I'm not sure how we'll handle that. I would hope that we would just automatically reformat that to:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span>\n<span class=\"o\">.</span><span class=\"n\">stage1</span><span class=\"p\">()?</span>\n<span class=\"o\">.</span><span class=\"n\">stage2</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>But I guess it is possible that you really want:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span>\n<span class=\"o\">.</span><span class=\"n\">stage1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"n\">stage2</span><span class=\"p\">()</span>\n</code></pre></div>",
        "id": 494052724,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736993264
    },
    {
        "content": "<blockquote>\n<p>being compatible with both Err and Ok values</p>\n</blockquote>\n<p>Yeah, like if both your Ok and Err value were simply Str.</p>",
        "id": 494052837,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736993316
    },
    {
        "content": "<p>I guess this is an argument for requiring <code>|x| x.stage2()</code> instead of allow <code>.stage2()</code> alone to mean that.</p>",
        "id": 494052878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736993363
    },
    {
        "content": "<p>Though I would assume this is a pretty rare mistake in practice (I mean, maybe a common typo, but very rare that it dosen't fail typechecking)</p>",
        "id": 494052906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736993392
    },
    {
        "content": "<p>I think a lot of the proposed builder behavior strongly relies on having stuff like <code>.stage2()</code>, so I'd be really surprised if that did get implemented</p>",
        "id": 494053342,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736993674
    },
    {
        "content": "<p>(Wouldn't you also have the same issue with shorthand record access functions? (<code>.field</code>))</p>\n<p>I suppose I'm coming at this and seeing PNC proposed (not mainly to be sure, but definitely in no small part) due to its larger scale familiarity, and how Gleam benefited from that, and I'm just wondering if in this case it's worth having two very similar looking ways to do this (<code>.map_err(f)?</code> and <code> ? f</code>) that could quite conceivably confuse someone, no less beginners (for instance, me). I suppose the type checker in this case could provide something like</p>\n<div class=\"codehilite\"><pre><span></span><code>did you mean .stage1()?\n                    ^^^ ~~~ (No whitespace between ? and the ...\n</code></pre></div>",
        "id": 494053690,
        "sender_full_name": "Jonathan",
        "timestamp": 1736993909
    },
    {
        "content": "<p>Yeah, I think the common case won't be long pipelines, but many individual variables that each want to wrap their error.</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">do_foo!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">FooErr</span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">something</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"no\">SomeErr</span>\n<span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n</code></pre></div>",
        "id": 494055627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736995197
    },
    {
        "content": "<p>Or if you don't care about error wrapping, just <code>?</code> alone</p>",
        "id": 494055698,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736995216
    },
    {
        "content": "<p>I do agree that it could just be left to <code>.map_err</code> and that wouldn't be too verbose:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">do_foo!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"no\">FooErr</span><span class=\"p\">)?</span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">something</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"no\">SomeErr</span><span class=\"p\">)?</span>\n<span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_default</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 494055750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736995274
    },
    {
        "content": "<p>I do like that the extra spacing makes it easier to separate the ok from the error path though. Kinda like the after thought was wrapping the error.</p>",
        "id": 494055854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736995335
    },
    {
        "content": "<p>Anyway, I'm sure we'll see how it pans out in practice and there will be multiple iterations on the error messages.</p>",
        "id": 494055882,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736995366
    },
    {
        "content": "<p>I think the idea is to encourage wrapping errors with Tags, to give additional context</p>",
        "id": 494057161,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736996307
    },
    {
        "content": "<p>So this makes it really easy to do that</p>",
        "id": 494057170,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736996317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"820027\">Jonathan</span> has marked this topic as resolved.</p>",
        "id": 495328646,
        "sender_full_name": "Notification Bot",
        "timestamp": 1737564792
    }
]