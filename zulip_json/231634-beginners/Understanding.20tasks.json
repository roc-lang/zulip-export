[
    {
        "content": "<p>I've been thinking about how best to help newcomers with understanding <code>Task</code> and effects. Specifically how with roc we are building up a data structure which describes what to do, and then passing that off to the platform to actually do the thing... so chaining tasks doesn't actually do anything until they are executed.</p>\n<p>It feels to me like this is the most important concept to work effectively with roc.</p>\n<p>I like a good graph or illustration. </p>\n<p>I've been thinking if it would be possible to take a program written for e.g. basic cli, swap out the platform URL, and it generates some kind of graph which shows the task sequencing. </p>\n<p>Has anyone ever seen anything like that? </p>\n<p>Maybe this platform just boots up a webserver and displays on a webpage?</p>",
        "id": 426241400,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710293510
    },
    {
        "content": "<p>I imagine having like an VS Code extension open that displays a window next to my code as I develop it, and I can see in real time what the tasks are doing.</p>",
        "id": 426241678,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710293660
    },
    {
        "content": "<p>hm, I think showing a graph would require language-level integration</p>",
        "id": 426242690,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710294271
    },
    {
        "content": "<p>because as soon as you hit an <code>await</code>, the platform can't possibly know what comes next until the callback function has actually executed</p>",
        "id": 426242721,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710294290
    },
    {
        "content": "<p>the compiler can look at the source code for the callback and analyze which code paths can potentially result in which other tasks, and draw a graph from there</p>",
        "id": 426242776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710294322
    },
    {
        "content": "<p>but the platform can't see the source code, so all it knows is the 1 path that actually got taken, not what the alternatives were</p>",
        "id": 426242841,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710294354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Understanding.20tasks/near/426242690\">said</a>:</p>\n<blockquote>\n<p>hm, I think showing a graph would require language-level integration</p>\n</blockquote>\n<p>Like a language server maybe?</p>",
        "id": 426243382,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710294656
    },
    {
        "content": "<p>could be!</p>",
        "id": 426244851,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710295395
    },
    {
        "content": "<p>Glad to hear it's possible to build. Would that be useful though? Has anyone ever seen anything like that used elsewhere?</p>",
        "id": 426245085,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710295526
    },
    {
        "content": "<p>it might be useful, although I'm not sure how much of a problem this is currently <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 426245276,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710295640
    },
    {
        "content": "<p>it doesn't seem to be something I notice a lot of questions about!</p>",
        "id": 426245296,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710295651
    },
    {
        "content": "<p>I think async is so common nowadays that it isn't too important</p>",
        "id": 426246073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710296098
    },
    {
        "content": "<p>That said, the task mutation is a bit more than simple async in some cases</p>",
        "id": 426246116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710296123
    },
    {
        "content": "<blockquote>\n<p>Specifically how with roc we are building up a data structure which describes what to do, and then passing that off to the platform to actually do the thing... so chaining tasks doesn't actually do anything until they are executed.</p>\n</blockquote>\n<p>Can you add that to the tutorial <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>? I also think that is worth mentioning.</p>",
        "id": 426305166,
        "sender_full_name": "Anton",
        "timestamp": 1710326181
    },
    {
        "content": "<p>Generally it's referred to as \"cold tasks\" it'd be good to mention that c#, JavaScript, and maybe java(I'm not quite sure) all have \"hot tasks\"</p>",
        "id": 426640957,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710455640
    },
    {
        "content": "<p>Is async in rust with Tokio cold tasks? Do you know? I think we theoretically will be compiling to basically the same thing when we switch to effect interpreters.</p>",
        "id": 426641903,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710456142
    },
    {
        "content": "<p>Something that would be really cool is some kind of task tracer:<br>\nOcaml's effect system has a few, one being this: <br>\n<a href=\"https://github.com/ocaml-multicore/eio-trace\">https://github.com/ocaml-multicore/eio-trace</a> <br>\nIt would be pretty cool if roc could generate similar traces that show a kind of flamegraph all the effects that were run.</p>",
        "id": 426642109,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710456257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <br>\nMy brain is telling me yes, but I'm not totally sure. </p>\n<p>If you make an Async block it doesn't do anything until you run it on a thread right? And you can do joins, and awaits and everything inside without actually starting the task, you are just bringing up a big future data type, right? </p>\n<p>Whereas in JS for example, you can only have a promise when a task is actually running.</p>",
        "id": 426642791,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710456618
    },
    {
        "content": "<p>I found this:<br>\n<a href=\"https://users.rust-lang.org/t/similarities-between-c-async-await-and-tasks-and-rust-async-await-and-futures/52771/2\">https://users.rust-lang.org/t/similarities-between-c-async-await-and-tasks-and-rust-async-await-and-futures/52771/2</a></p>",
        "id": 426642801,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710456625
    },
    {
        "content": "<p>They say the same thing, rust has cold Async.</p>",
        "id": 426642840,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710456649
    },
    {
        "content": "<p>I'm trying to research \"hot\" and \"cold\" tasks, but haven't much. Are these similar to hot and cold observables?</p>",
        "id": 426643240,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710456872
    },
    {
        "content": "<p>I'm not sure the observer pattern really fits in this context</p>",
        "id": 426643319,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710456898
    },
    {
        "content": "<p>Found something that looks right;</p>\n<blockquote>\n<p><strong>Understanding tasks and task generators</strong><br>\nIn the paper about asynchronous programming model in F# [1] (written by Don Syme, myself and Dmitry Lomov), we mentioned three possible options that can be used for implementing the asynchronous programming model:</p>\n<ul>\n<li>Hot tasks (used by C#) - in this case, the asynchronous code block returns a task that has been already started and will eventually produce a value.</li>\n<li>Cold tasks - in this model, the code block also returns a task that will eventually produce a value, but it doesn't start the task. The caller is responsible for starting it and may decide not to start it at all.</li>\n<li>Task generators (used by F#) - in this case, the code block returns an object that will generate and start a task when it is provided with a continuation to be called when the operation completes.</li>\n</ul>\n</blockquote>",
        "id": 426643633,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710457076
    },
    {
        "content": "<p>Yeah, maybe it's a more common term in the f# world, but I have heard it mentioned elsewhere. <br>\nI know somewhere I've read a list of examples where what you're used to in hot tasks won't happen with cold tasks<br>\n.<br>\nThe simplest one would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>a=\n  doThing= Stdout.printLine &quot;hi&quot;\n  100\n</code></pre></div>\n<p>In a hot task model, you would expect this to print \"hi\", In a cold task model like rock this does nothing.</p>",
        "id": 426648099,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710459622
    },
    {
        "content": "<p>I'm very used to it now, but I do remember when I was first learning f sharp I had a bunch of times where I thought something should have started and it just didn't run and it was very confusing</p>",
        "id": 426648452,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710459874
    },
    {
        "content": "<p>This is really good context or background to explaining tasks in the tutorial as Anton mentioned. It will be good to reference familiar concepts from other languages.</p>",
        "id": 426649605,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710460664
    },
    {
        "content": "<p>maybe...I have to admit, I have a bit of a concern that we're talking about solving a problem that doesn't have any symptoms <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 426650627,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710461203
    },
    {
        "content": "<p>is there a reason we suspect beginners are currently having trouble understanding how tasks work in Roc?</p>",
        "id": 426650670,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710461223
    },
    {
        "content": "<p>I actually try to minimize referring to features of other languages, for a few reasons:</p>\n<ul>\n<li>if the learner doesn't know that feature, it can be a negative experience - even if only briefly (\"I don't know what that is...<em>should</em> I know what that is? Is this being mentioned because it's some common knowledge I'm missing?\")</li>\n<li>it can distract focus from what's being taught (\"hot and cold tasks...interesting! Now I wonder what the difference is between the two. Does Roc have hot tasks too?\")</li>\n<li>if the learner does know the feature in the other language, but there are subtle differences, they might build an inaccurate mental model that takes even more time to unlearn later (this can be mitigated with qualifiers like \"it's kind of like...\" but still has its risks)</li>\n</ul>",
        "id": 426651575,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710461738
    },
    {
        "content": "<p>I think the most useful ways to refer to things in other languages are for really broad things that appear in multiple languages, e.g. \"tasks are kind of like Promises, but they don't do anything right when you create them\" or \"platforms are kind of like frameworks but they are in charge of more things, such as memory management and all I/O operations\"</p>",
        "id": 426651745,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710461833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Understanding.20tasks/near/426650670\">said</a>:</p>\n<blockquote>\n<p>maybe...I have to admit, I have a bit of a concern that we're talking about solving a problem that doesn't have any symptoms</p>\n<p>is there a reason we suspect beginners are currently having trouble understanding how tasks work in Roc?</p>\n</blockquote>\n<p>I should have provided more background to explain why I think it would be beneficial to explore this idea. I'm not trying to highlight a specific issue; I wanted to explore if there is an opportunity to improve and help people build a mental model.</p>\n<p>Getting comfortable putting the lego's together <code>await</code> <code>attempt</code> <code>try</code> <code>loop</code> <code>map</code> <code>fromResult</code> <code>ok</code> <code>err</code> has taken me a while. The first time I wrote two <code>Stdout.line</code> to print to the screen, I was confused about how/why to chain the Tasks together. </p>\n<p>Understanding Tasks is fundemental to using roc, and I had to build up a mental model and gradually refine what I understand a Task is and how it works.</p>\n<p>My thought was how can I help others to get to a working mental model without needing to spend as much time as I have.</p>\n<p>I think the design of Tasks is great - they are really good to work with - so I don't think there is a problem with the design.</p>\n<p>I'll sit on these ideas for now and come back to this another time.</p>",
        "id": 426661046,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710468290
    },
    {
        "content": "<p>I do think that <code>!</code>, better compiler errors, and some bug fixes around requiring <code>Task.loop</code> will greatly reduce the overhead here. So I think as time passes, there will be less and less to explain.</p>",
        "id": 426661801,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710468778
    },
    {
        "content": "<p>I actually mostly agree with you <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>. I would say in this case people coming from almost any mainstream language would only have experience with hot tasks, and therefore have incorrect assumptions. I do think that it's worth highlighting, that there is a fundamental difference in how they execute. I can obviously only speak to my one experience learning this (if only we could try learning things again) but I would have benefited from being told up front \"your assumptions about what a task is doing are likely wrong\"</p>",
        "id": 426663773,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710470193
    },
    {
        "content": "<p>that all makes sense! <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 426663856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710470276
    },
    {
        "content": "<p>Ah, this conversation is making me feel better already: I'm having trouble understanding how tasks work in Roc. In my attempts I get the wrong results most of the time, which shows that my mental model of Tasks (and Results and their relationship?) is not good at all.</p>\n<p>So, for me at least, it has been a pain point. A fun one, but still <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 430413679,
        "sender_full_name": "Noel R",
        "timestamp": 1711826301
    },
    {
        "content": "<p>As a Roc/Elm beginner (that I still am), my initial encounter with <code>Tasks</code> was not straightforward, so I'll try to share my perspective, in case it might be of help.</p>\n<p>Initially, the crude mental model that I leaned towards was a parallel to how async-await works in languages like Python and JavaScript in terms of being able to chain multiple async functions together, and then do error-handling on top of that correspondingly. In Roc, my conceptual (yet quite far from perfect) understanding is that tasks are currently only platform-specific concepts. Basically, by defining a task (or a chain of tasks), one indicates to the platform <em>what</em> the tasks constitutes of, <em>ahead</em> of execution time. The execution itself happens at a <em>later</em> point in time that's relevant from the perspective of the platform itself, which is <em>after</em> the Roc code has handed over the instructions; and the platform itself implements the lower-level details, pertaining to the <em>how</em> of execution, including scheduling, result gathering etc.</p>\n<p>I happened to listen to what I believe is quite a relevant Software Unscripted podcast <a href=\"https://castbox.fm/episode/Teaching-Functional-Programming-id4744222-id461777514?country=gb\">episode</a> yesterday, and I hope the admins wouldn't mind my posting an excerpt from the <a href=\"https://sites.google.com/noredink.com/podcast-transcriptions/1-2-teaching-functional-programming\">transcript</a> here (the excerpt is from page 5/20). I believe this is a much better summary than what my attempt could've made justice to tasks, but I decided to offer my beginner's perspective nevertheless, as a juxtaposition (and also, in case, it'd be helpful to the thread if more experienced Roc/Elm programmers would have time to indicate inaccuracies in my particular perspective):</p>\n<blockquote>\n<p><strong>Richard Feldman:</strong><br>\nWhereas an Elm, I might do the same thing with a task. Like I have a function<br>\nthat returns a task and just like promises, tasks can be chained together. They<br>\ncan represent like, I want to do an HTP request and then I want to do this other<br>\nthing, yada, yada. But the difference is that in the Elm function, when I return it,<br>\nyeah, it's going to return this task, and that task sort of represents the HTTP<br>\nrequest that I want to have done. The difference is just that if I call the<br>\nJavaScript function a hundred times, it's going to fire off 100 HTTP requests.<br>\nIf I call the Elm function 100 times, it's still just going to return this value that<br>\ndescribes, \"Hey, I want an HTTP request to happen here.\" It's not going to fire<br>\noff 100 times. It's still just going to be, well, I got this task back. So the<br>\ndifference between task and promise is really just a question of side effects<br>\nversus managed effects. Side effects being right when you make it, it does the<br>\neffect. Managed effect being, this is just a description of the effect that I want<br>\nthe run time to do in the future.<br>\n...<br>\nAnd the follow-up to that is that I think people might have an idea in their<br>\nhead that doing pure functional programming is going to be radically different in<br>\nterms of what it feels like day-to-day than something like imperative<br>\nprogramming when it comes to effects. But actually it's really not that different.<br>\nYou see a lot of things that instead of returning promise, they return task, but<br>\nyou chain them together in basically the same kinds of ways. The only difference<br>\nis when they actually get executed by the run time versus immediately.</p>\n</blockquote>",
        "id": 430566065,
        "sender_full_name": "Hristo",
        "timestamp": 1711962780
    },
    {
        "content": "<p>Thank you @Hristo for sharing the link to that episode; it was helpful.</p>\n<p>Going back to what I said about having trouble understanding Tasks: as I make progress, I've been reflecting on the errors I made before, and the beliefs that led to them.</p>\n<p><em>Thinking imperatively</em><br>\nMy head kept reading patterns such as <code>result &lt;- (someFunction \"arg\")</code> as \"ah! we're assigning the result of the task to <code>result</code>, so we should have a string there, right?\".</p>\n<p>It took some time to understand that I'm writing a recipe to handle the result of something that will run in a parallel universe (the platform). What comes out of that portal is not a string: it's _something_ that could be a string, but all possible cases must be considered.</p>\n<p><em>Syntax</em><br>\nThe backpassing and pipe operators in particular were confusing to me. In my first attempts, I did all sorts of weird stuff that resulted in wrong arguments passed, type mismatches and panics. Writing the same fragments in sweet / sugar-free versions helped a lot.</p>\n<p>I think I would have benefited from having more examples in both sugary and desugared versions, considering that the docs are written with syntax sugar.</p>\n<p><em>Overconfidence</em><br>\nAlthough I was familiar with the concepts of functional programming, I didn't have hands-on experience —and yet I expected to understand things just from glancing at examples. I was wrong.</p>",
        "id": 431991168,
        "sender_full_name": "Noel R",
        "timestamp": 1712588174
    },
    {
        "content": "<p>Thank you for sharing <span class=\"user-mention\" data-user-id=\"678767\">@Noel R</span>. Have you seen the <a href=\"https://docs.google.com/document/d/1mTEZlOKqtMonmVsIGEC1A9ufs1TQHhVgZ52Vn-13GeU/edit?usp=drivesdk\">Chaining Syntax design proposal</a>? You may find that interesting, and I would be keen to know what you think. </p>\n<p>I've been working on implementing it recently and I think it will be a nice improvement to not use backpassing and have a more direct statement loooking syntax for Tasks.</p>",
        "id": 431992827,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712588461
    },
    {
        "content": "<p>I hadn't! I really like that proposal. Reading it, I realized that the visual noise added by the <code>{} &lt;-</code> fragments is significant. The eyes cannot simply scan vertically to understand the outline of the code, so additional effort must be made to first decide where the line starts, and then decode its meaning. For a single line it's trivial but when scanning code my eyes really appreciate the clean edge.</p>\n<p>A concern I'd have with using the assignment operator <code>=</code> for two purposes (backpassing and assignment) is that, if I understand correctly, it would be impossible for someoneone reading code to desugar just from the text on screen without fully understanding the code —this could be an issue for beginners like myself.</p>\n<p>So, I'm wondering if we can get the best of both worlds by keeping the backpassing operator (not sure if operator is the right word <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ), while applying the rest of the proposal.</p>\n<p>For example:<br>\n<code>content &lt;- File.readUtf8! path</code> instead of<br>\n<code>content = File.readUtf8! path</code></p>",
        "id": 432090797,
        "sender_full_name": "Noel R",
        "timestamp": 1712623552
    },
    {
        "content": "<p>I think a main goal of <code>!</code> is accepting that generally speaking, users don't really need to think about the await and it's underlying closure.</p>\n<p>They just need to know that <code>!</code> means async function.</p>",
        "id": 432095743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712626104
    },
    {
        "content": "<p>Backpassing is a fundamentally more powerful syntax, while <code>!</code> is simpler and hides more to avoid confusion and details that many users don't need.</p>",
        "id": 432095838,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712626150
    },
    {
        "content": "<p>As for desugaring. <code>&lt;-</code> vs <code>=</code> should make no difference. The desugaring happens due to the <code>!</code>. So if you scan for those, you can desugar anything.</p>",
        "id": 432096004,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712626216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Understanding.20tasks/near/431992827\">said</a>:</p>\n<blockquote>\n<p>Thank you for sharing <span class=\"user-mention silent\" data-user-id=\"678767\">Noel R</span>. Have you seen the <a href=\"https://docs.google.com/document/d/1mTEZlOKqtMonmVsIGEC1A9ufs1TQHhVgZ52Vn-13GeU/edit?usp=drivesdk\">Chaining Syntax design proposal</a>? You may find that interesting, and I would be keen to know what you think. </p>\n<p>I've been working on implementing it recently and I think it will be a nice improvement to not use backpassing and have a more direct statement loooking syntax for Tasks.</p>\n</blockquote>\n<p>That's awesome!<br>\nFits perfectly into \"let me write core of the $thing in pure functional way, and glue it synchronously using similar syntax\".<br>\nI'm also for retiring &lt;- syntax.</p>\n<p>The only change I will suggest: instead of taking <code>?</code> character for something that typical code will not do, consider changing it so you have <code>(! SomeTask.await)</code>, aka the same <code>!</code>, but with parens and argument.</p>",
        "id": 432107670,
        "sender_full_name": "Przemek Kitszel",
        "timestamp": 1712631770
    },
    {
        "content": "<p>Can you explain your suggestion more? Maybe give an example with args?</p>",
        "id": 432108759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712632677
    },
    {
        "content": "<p>(in my suggestion)<code>main = Stdout.line! \"Hello, World\"</code> could be rewritten as <code>main = Stdout.line (! Task.await) \"Hello, World\"</code>. Parenthesis makes it more obvious, but could not be removed (same arguments that go against curring).</p>\n<p>Looks bloatier that <code>? Task.await</code> - just a bit, but we don't spend the valuable <code>?</code> character that could be used for future extensions.</p>",
        "id": 432136448,
        "sender_full_name": "Przemek Kitszel",
        "timestamp": 1712643873
    },
    {
        "content": "<p>I kind of like having the more concise syntax that is in the proposal. Here is an example I've been looking at earlier.</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"c1\"># today's syntax w/o backpassing</span>\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"Ahoy\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"there\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"c1\"># with chaining syntax</span>\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Ahoy\"</span>\n<span class=\"w\">    </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"There\"</span>\n\n<span class=\"w\">    </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>Both of these print out <code>Ahoy There</code> to stdio, but I think the second is much easier to follow at a glance.</p>",
        "id": 432154838,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712648608
    },
    {
        "content": "<p>The former will still be valid as the <code>!</code> is just syntax sugar and unwrap to the exact same code.</p>",
        "id": 432155058,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712648656
    },
    {
        "content": "<blockquote>\n<p>I think a main goal of <code>!</code> is accepting that generally speaking, users don't really need to think about the await and it's underlying closure.</p>\n</blockquote>\n<p>I'm not sure if I would actually want the existence of the await and underlying closure to be hidden: it seems to me that async code and task handling are fundamental to the language.</p>\n<p>As a learner, I'd rather keep that in mind, but having a syntax alternative that's nicer to write and read is great. I'm not sure I understand the power of backpassing so I can't comment on that.</p>\n<p>This example can be found in the proposal:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n        Stdout.line! &quot;one&quot;\n        Stdout.line! &quot;two&quot;\n</code></pre></div>\n<p>Would that be valid? From Luke's example above, and considering that it's just syntax sugar, I think it wouldn't: the last line should not have the <code>!</code> or it should be followed by something that produces a task. </p>\n<p>If that's correct, then it's one of those cases that make me think that we can't hide the existence of tasks and async behavior from users. The readability can improve for sure and, in that line, I really like this proposal <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span> </p>\n<p>I'm pretty new to Roc and have zero experience in language design, so take all of this as newbie opinion.</p>",
        "id": 432265202,
        "sender_full_name": "Noel R",
        "timestamp": 1712674754
    },
    {
        "content": "<p>That is allowed. It is a special exception to the sugar. A <code>!</code> on the final task of a function is just ignored. It enables users to write consistent code.</p>",
        "id": 432265881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712674919
    },
    {
        "content": "<p>Also, by hide, I mostly mean we can teach the simple thing first and if that is enough for users, they can just play with the language. If not, we can dive in and explain the sugar to give them more understanding.</p>",
        "id": 432266276,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712675010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Understanding.20tasks/near/432265881\">said</a>:</p>\n<blockquote>\n<p>That is allowed. It is a special exception to the sugar. A <code>!</code> on the final task of a function is just ignored. It enables users to write consistent code.</p>\n</blockquote>\n<p>as a minor note, I'd like to try not allowing this at first and seeing how it goes (maybe with a nice compiler error if you include it but shouldn't; that's a very easy scenario to detect)</p>",
        "id": 432269112,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712675762
    },
    {
        "content": "<p>a downside of optionally allowing it that I hadn't thought of originally is that there's no way for <code>roc format</code> to enforce the convention that you should always have it</p>",
        "id": 432269268,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712675786
    },
    {
        "content": "<p>because <code>roc format</code> doesn't know the types of the program, so it can't know what is and isn't a task</p>",
        "id": 432269374,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712675814
    },
    {
        "content": "<p>and it certainly can't go around adding <code>!</code> to every function call at the end of defs, because that would not work out most of the time <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 432269468,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712675838
    },
    {
        "content": "<p>so I think we should do the experiment of not allowing the optional <code>!</code> at the end and see how it goes</p>",
        "id": 432269529,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712675856
    },
    {
        "content": "<p>because it's trivial to have a consistent style with that design</p>",
        "id": 432269603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712675873
    },
    {
        "content": "<p>actually we could have it be a warning, come to think of it</p>",
        "id": 432271463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712676318
    },
    {
        "content": "<p>(with a helpful message)</p>",
        "id": 432271513,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712676329
    },
    {
        "content": "<p>I get the reasons, but it does lose a solid chunk of the benefit of <code>!</code> in my opinion. Will make people question it more and pull back the covers sooners.</p>",
        "id": 432275762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712677342
    },
    {
        "content": "<p>hm that's a good point</p>",
        "id": 432279254,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712678253
    },
    {
        "content": "<p>I guess a related question is: how much of a concern is it if people use it inconsistently? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 432279347,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712678276
    },
    {
        "content": "<p>like how annoyed would I be if a code base formatted using <code>roc format</code> sometimes did and sometimes didn't use the trailing <code>!</code></p>",
        "id": 432279620,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712678341
    },
    {
        "content": "<p>hm, maybe the better experiment to run is whether <code>roc format</code> not enforcing it is actually a problem in practice</p>",
        "id": 432280120,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712678450
    },
    {
        "content": "<p>Also, I guess we have 3 possible styles:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n   Stdout.line! &quot;A&quot;\n   Stdout.line &quot;B&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>main =\n   Stdout.line! &quot;A&quot;\n   Stdout.line! &quot;B&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>main =\n   Stdout.line! &quot;A&quot;\n   Stdout.line! &quot;B&quot;\n   Task.ok {}\n</code></pre></div>",
        "id": 432280804,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712678613
    },
    {
        "content": "<p>First and last valid for sure. Middle depends on the optional last <code>!</code></p>",
        "id": 432281008,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712678661
    },
    {
        "content": "<p>yeah whenever I write out nontrivial examples I prefer the middle style</p>",
        "id": 432286000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712679929
    },
    {
        "content": "<p>it's kinda like how in Rust I always put <code>;</code> at the end of things that return <code>()</code> even when it's at the end of the expression and I don't need to</p>",
        "id": 432286330,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712680014
    },
    {
        "content": "<p>Same. I think I actually like the first example the least. Even though I know it isn't inconsistent, it feels inconsistent.</p>",
        "id": 432286332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712680014
    },
    {
        "content": "<p>and I guess actually that's an interesting precedent; <code>rustfmt</code> doesn't enforce trailing semicolon consistency (probably because that would also require type information) and it seems totally fine in practice</p>",
        "id": 432286479,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712680062
    },
    {
        "content": "<blockquote>\n<p>as a minor note, I'd like to try not allowing this at first and seeing how it goes (maybe with a nice compiler error if you include it but shouldn't; that's a very easy scenario to detect)</p>\n</blockquote>\n<p>I like not having the exception since having an exception adds a conditional meaning to <code>!</code>.</p>\n<p>From the three styles, I'd lean towards 3 since it's more explicit (and 1 looks weird...)</p>",
        "id": 432300141,
        "sender_full_name": "Noel R",
        "timestamp": 1712683939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Understanding.20tasks/near/432275762\">said</a>:</p>\n<blockquote>\n<p>I get the reasons, but it does lose a solid chunk of the benefit of <code>!</code> in my opinion. Will make people question it more and pull back the covers sooners.</p>\n</blockquote>\n<p>This could be a good thing though. It's convenient for the common case, but still encourages people to understand \"why do I need to add the Task.ok {}?\"?</p>\n<p>I've had a couple of cracks at supporting the optional last place thing. It's probably doable, but it will require some changes in the parser. I think the issue is where does an expression end, at the moment an expression can continue across a newline at the same indent, but that means it's hard to detect a final expression like this.</p>",
        "id": 432352305,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712701358
    },
    {
        "content": "<p>So the PR I'm working on doesn't have that feature yet.</p>",
        "id": 432352331,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712701381
    },
    {
        "content": "<p>Personally, I have no issues with either of these syntaxes:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n   Stdout.line! &quot;A&quot;\n   Stdout.line! &quot;B&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>main =\n   Stdout.line! &quot;A&quot;\n   Stdout.line! &quot;B&quot;\n   Task.ok {}\n</code></pre></div>\n<p>This is the only syntax that I think will be inconsistent/confusing:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n   Stdout.line! &quot;A&quot;\n   Stdout.line &quot;B&quot;\n</code></pre></div>",
        "id": 432353962,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712702395
    },
    {
        "content": "<p>For completeness, could somebody provide an example of how (a relatively non-trivial chain of) error handling might look like (in case there'd be distinctive differences) with the proposed alternative syntax?<br>\nThanks!</p>",
        "id": 432356348,
        "sender_full_name": "Hristo",
        "timestamp": 1712703692
    },
    {
        "content": "<p>I don't think the<code>Task.ok {}</code> design is nice in longer examples <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 432356862,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712703985
    },
    {
        "content": "<p>it looks fine here but not in a big chunk of code that's doing a bunch of I/O</p>",
        "id": 432356881,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712704002
    },
    {
        "content": "<p>I agree, I think it will be nicer. Just wanted to add that it may not be so bad. </p>\n<p><span class=\"user-mention\" data-user-id=\"693045\">@Hristo</span></p>",
        "id": 432357160,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712704188
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">onErr</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"ERROR: $(Inspect.toStr err)\"</span>\n\n<span class=\"c1\"># task that bundles errors</span>\n<span class=\"c1\"># into a single tag union</span>\n<span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span>\n\n<span class=\"w\">    </span><span class=\"c1\"># a couple of statements</span>\n<span class=\"w\">    </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Ahoy\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"There\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"w\">    </span><span class=\"c1\"># check jq is available</span>\n<span class=\"w\">    </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"s\">\"jq\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"s\">\"--version\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">status</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">UnableToCheckJQVersion</span>\n</code></pre></div>",
        "id": 432357717,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712704540
    },
    {
        "content": "<p>8 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Error.20handling.20with.20tasks\">#beginners &gt; Error handling with tasks</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 432366989,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712709921
    },
    {
        "content": "<p>To be complete, here are the three versions of a more complex example from the design proposal. I just added in error handling. I internationally made the error handling more explicit to show the apis. Also, I made one function where there is no way to end all branches with bang.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Unnecessary ! at end</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span>\n<span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">task</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">toResult!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">                </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">withRetries!</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToReadUrl</span>\n<span class=\"w\">    </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"nc\">Json</span><span class=\"o\">.</span><span class=\"n\">codec</span>\n<span class=\"w\">    </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToLoadUser</span>\n\n<span class=\"w\">    </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"$(user.name).txt\"</span>\n<span class=\"w\">    </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToStoreEmail</span>\n\n<span class=\"w\">    </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"w\"> </span><span class=\"s2\">\"Wrote email to $(dest)\"</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Minimal ! possible</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span>\n<span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">task</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">toResult!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">                </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToReadUrl</span>\n<span class=\"w\">    </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"nc\">Json</span><span class=\"o\">.</span><span class=\"n\">codec</span>\n<span class=\"w\">    </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToLoadUser</span>\n\n<span class=\"w\">    </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"$(user.name).txt\"</span>\n<span class=\"w\">    </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToStoreEmail</span>\n\n<span class=\"w\">    </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"Wrote email to $(dest)\"</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Explicit result at the end</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span>\n<span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">task</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">toResult!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">                </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">withRetries!</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">out</span>\n\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToReadUrl</span>\n<span class=\"w\">    </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"nc\">Json</span><span class=\"o\">.</span><span class=\"n\">codec</span>\n<span class=\"w\">    </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToLoadUser</span>\n\n<span class=\"w\">    </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"$(user.name).txt\"</span>\n<span class=\"w\">    </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToStoreEmail</span>\n\n<span class=\"w\">    </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"w\"> </span><span class=\"s2\">\"Wrote email to $(dest)\"</span>\n<span class=\"w\">    </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n</div></div>",
        "id": 432369404,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712711013
    },
    {
        "content": "<p>If anything, this makes me realize that consistantly sticking to any one approach on all functions is unlikely to work well.</p>",
        "id": 432369462,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712711042
    },
    {
        "content": "<p>I would use the unnecessary <code>!</code> for <code>storeEmail</code> and would avoid it in <code>withRetries</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>my perference</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span>\n<span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">task</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">toResult!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">                </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToReadUrl</span>\n<span class=\"w\">    </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"nc\">Json</span><span class=\"o\">.</span><span class=\"n\">codec</span>\n<span class=\"w\">    </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToLoadUser</span>\n\n<span class=\"w\">    </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"$(user.name).txt\"</span>\n<span class=\"w\">    </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr!</span><span class=\"w\"> </span><span class=\"nc\">FailedToStoreEmail</span>\n\n<span class=\"w\">    </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"w\"> </span><span class=\"s2\">\"Wrote email to $(dest)\"</span>\n</code></pre></div>\n</div></div>",
        "id": 432369653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712711125
    },
    {
        "content": "<p>For completeness:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>current syntax</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span>\n<span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">task</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">attempt</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">                </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"n\">storeEmail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"nc\">FailedToReadUrl</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"nc\">Json</span><span class=\"o\">.</span><span class=\"n\">codec</span>\n<span class=\"w\">    </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"n\">withRetries</span><span class=\"w\"> </span><span class=\"n\">loadUser</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"nc\">FailedToLoadUser</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n\n<span class=\"w\">    </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"$(user.name).txt\"</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"nc\">FailedToStoreEmail</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"Wrote email to $(dest)\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n</code></pre></div>\n</div></div>",
        "id": 432370227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712711364
    },
    {
        "content": "<p>This reminds me of the discussion of \"<code>Ok</code>-wrapping\" for Rust's <code>try {}</code> blocks feature. With <code>Ok</code>-wrapping, the final expression in a <code>try</code> block is automatically wrapped in <code>Ok()</code>. (And if it's omitted, then it defaults to <code>Ok(())</code>, the equivalent of Roc's <code>Task.ok {}</code>.) If Roc were to adopt some kind of <code>Task.ok</code>-wrapping, I think it would force a more consistent style where you always use <code>!</code> for trailing function calls.</p>",
        "id": 432378432,
        "sender_full_name": "timotree",
        "timestamp": 1712714569
    },
    {
        "content": "<p>With ok-wrapping, Brendan's example might look like this</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>withRetries : Task ok err, U64 -&gt; Task ok err\nwithRetries = \\task, attempts -&gt;\n    res = Task.toResult! task\n    when res is\n        Ok x -&gt; x\n        Err e -&gt;\n            if attempts == 0 then\n                Task.err! e\n            else\n                withRetries! task (attempts - 1)\n</code></pre></div>",
        "id": 432379328,
        "sender_full_name": "timotree",
        "timestamp": 1712715019
    },
    {
        "content": "<p>Interesting. So it makes the <code>!</code> required on all paths even the error path.</p>",
        "id": 432382079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712716136
    },
    {
        "content": "<p>Ah, though it has <code>Ok x -&gt; x</code> as well. Cause <code>x</code> is of the ok result type and will be wrapped automatically.</p>",
        "id": 432382220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712716191
    },
    {
        "content": "<p>Exactly. And if <code>Task.err!</code> reads weirdly, you might create an alias like <code>throw!</code> or <code>bail!</code> to make it read more like an imperative command</p>",
        "id": 432385138,
        "sender_full_name": "timotree",
        "timestamp": 1712717398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Understanding.20tasks/near/431992827\">said</a>:</p>\n<blockquote>\n<p>Thank you for sharing <span class=\"user-mention silent\" data-user-id=\"678767\">Noel R</span>. Have you seen the <a href=\"https://docs.google.com/document/d/1mTEZlOKqtMonmVsIGEC1A9ufs1TQHhVgZ52Vn-13GeU/edit?usp=drivesdk\">Chaining Syntax design proposal</a>? You may find that interesting, and I would be keen to know what you think. </p>\n</blockquote>\n<p>This is so impressive! I'd like to add that F# has gone similar way, but with one distinct difference: the meaning of the <code>!</code> syntax (it is kind of similar to the new syntax design proposal above) can vary depending on the <a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions\">computation expressions</a> and there are some included in the standard library and also by 3rd parties.</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code>let doThingsAsync url =\n    async { // &lt;-------- this is the computation expression defining the meaning of ! within\n        let! data = getDataAsync url\n        do! sendDataAsync data\n    }\n</code></pre></div>\n<p>So, the <code>!</code> is for chaining async tasks, but in other environment they do other things, basically it all revolves around chaining monads and/or applicatives. </p>\n<p>I am not suggesting the Roc should have something similar, but F# is not very popular, but it has lots of interesting (i.e. inspiring) stuff, sometimes I can't help but feel obliged to share it to wider audience :)</p>\n<blockquote>\n<p>Computation expressions in F# provide a convenient syntax for writing computations that can be sequenced and combined using control flow constructs and bindings. Depending on the kind of computation expression, they can be thought of as a way to express monads, monoids, monad transformers, and applicative functors. However, unlike other languages (such as do-notation in Haskell), they are not tied to a single abstraction, and do not rely on macros or other forms of metaprogramming to accomplish a convenient and context-sensitive syntax.</p>\n</blockquote>",
        "id": 432444882,
        "sender_full_name": "witoldsz",
        "timestamp": 1712737439
    },
    {
        "content": "<p>additional reason for allowing (and preferring) a trailing <code>!</code> is usage with git, when you add a new action as a new last, it's best when you don't touch previous line (think git blame).</p>\n<p>sometimes it would be beneficial to remove the trailing <code>!</code>, which would mean 'no more code expected after this line'</p>\n<p>Such convention works fine for C <code>enum</code>s, you always add a <code>,</code> at the end, but don't if it's something intended to be the last one (size/count/max).</p>",
        "id": 432449806,
        "sender_full_name": "Przemek Kitszel",
        "timestamp": 1712738663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515922\">@witoldsz</span> I think the original discussion and design was actually more similar to the F# version.</p>\n<p>Something like</p>\n<div class=\"codehilite\"><pre><span></span><code>with Task.await\n    Stdout.line!\n    ...\n</code></pre></div>\n<p>I think in the end the preference leaned more towards it probably only being needed for a few types with Roc's current design (Task and Result for example). So it would be nicer to make it less noisy and just work. There was also discussion of making it just work with any <code>andThen</code> style function that is specified for a type. But that would only be added with significant demand due to the extra complexity.</p>\n<p>For now it is just being added as special magic for Task.</p>",
        "id": 432517845,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712759535
    },
    {
        "content": "<p>Yes, I do find it attractive that the current proposal focuses on <code>!</code> as a specialized construct just for <code>Task.await</code>, so the entry point is so low that pure-fp Roc stands up to an even fight with folks like Ruby or Python in scripting capabilities.</p>\n<p>Now, I do notice the <code>with ...</code> syntax is more like computation expressions of F# but as far as I can see the Roc proposition is not as powerful, especially when it comes to applicatives. Applicatives are superb for example when you want to validate a form and do not want to stop on a single error, but continue with all checks and collect errors. In F# you can do it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>        validate {\n            let! country = Check.optional (asString &gt;=&gt; isCountryCode) $&quot;{field}.country&quot; (decode json &quot;country&quot;)\n            and! city = Check.optional (asString &gt;=&gt; Check.String.betweenLen 2 100) $&quot;{field}.city&quot; (decode json &quot;city&quot;)\n            and! postCode = Check.optional (asString &gt;=&gt; isPostCode) $&quot;{field}.postCode&quot; (decode json &quot;postCode&quot;)\n\n            and! streetAndNumber =\n                Check.optional\n                    (asString &gt;=&gt; Check.String.betweenLen 1 250)\n                    $&quot;{field}.streetAndNumber&quot;\n                    (decode json &quot;streetAndNumber&quot;)\n\n            return\n                { Country = country\n                  City = city\n                  PostCode = postCode\n                  StreetAndNumber = streetAndNumber }\n        }\n</code></pre></div>\n<p>Notice: <code>validate</code> CE comes from 3rd party library. The result is either a record or a collection of errors.</p>",
        "id": 432526056,
        "sender_full_name": "witoldsz",
        "timestamp": 1712761559
    },
    {
        "content": "<p>That is very similar to our record builder syntax, which I think was built for this purpose. Recently there was an example of it in <a class=\"stream-topic\" data-stream-id=\"304902\" href=\"/#narrow/stream/304902-show-and-tell/topic/Weaver.3A.20record.20builder.20CLI.20parsing.20library\">#show and tell &gt; Weaver: record builder CLI parsing library</a></p>",
        "id": 432533637,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712763679
    },
    {
        "content": "<p>Wait, clarifying question: is record builder syntax it's own thing, separate from backpassing?</p>",
        "id": 432546591,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1712767809
    },
    {
        "content": "<p>Yes</p>",
        "id": 432548905,
        "sender_full_name": "Anton",
        "timestamp": 1712768552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477725\">@Jasper Woudenberg</span> we ended up changing the syntax slightly, but here is the original design doc: <a href=\"https://docs.google.com/document/d/1Jo9nZCekkoF6SaDcRqPqoPcgPaAAvlNZC7v3kgVQ3Tc/edit?usp=sharing\">https://docs.google.com/document/d/1Jo9nZCekkoF6SaDcRqPqoPcgPaAAvlNZC7v3kgVQ3Tc/edit?usp=sharing</a></p>",
        "id": 432972488,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712951681
    },
    {
        "content": "<p>I'm really excited to see the new language constructs introduced in the latests version. looks like there's no pushback operator anymore for Task.await right</p>",
        "id": 443303039,
        "sender_full_name": "Vinicius Ataide",
        "timestamp": 1717768385
    },
    {
        "content": "<p>I think you mean the \"backpassing\" (<code>&lt;-</code>) operator?<br>\nIt's still there but we would like to remove it in the future</p>",
        "id": 443304522,
        "sender_full_name": "Anton",
        "timestamp": 1717768826
    }
]