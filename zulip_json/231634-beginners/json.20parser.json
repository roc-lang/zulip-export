[
    {
        "content": "<p>Thinking about tackling a json parser library for roc; does that seem overly ambitious at this point? Any tips on the best way to lay out the interface? For instance, I see <code>packages/parser</code>; would it be appropriate to base things on that?</p>",
        "id": 264797154,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639447150
    },
    {
        "content": "<p>You should be fine. I think you just need stuff from the Str module for that</p>",
        "id": 264802401,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639451181
    },
    {
        "content": "<p>it could also be a good stress test and uncover some more bugs</p>",
        "id": 264802446,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639451216
    },
    {
        "content": "<p>I remember some discussion around encoders and decoders but I forget where that went.</p>",
        "id": 264802480,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639451255
    },
    {
        "content": "<p>Fun times! Pretty sure I hit a compiler bug already.<br>\nHere's the code:</p>\n<div class=\"codehilite\"><pre><span></span><code>#!/usr/bin/env roc\n\napp &quot;json&quot;\n    packages { base: &quot;platform&quot;, }\n    imports [\n        base.Task.{ Task, await },\n        base.Stdout,\n    ]\n    provides [ main ] to base\n\nmain : Task {} *\nmain =\n    {} &lt;- await (Stdout.line &quot;ready&quot;)\n\n    parsed = Number (42)\n    serialized = formatJson parsed\n\n    # If instead of the above two lines, I do the following, things work fine:\n    # serialized = formatJson (Number (42))\n\n    Stdout.line serialized\n\nJsonValue : [\n    Number I64,\n    String Str,]\n\nformatJson: JsonValue -&gt; Str\nformatJson = \\value -&gt;\n    when value is\n        Number n -&gt; Num.toStr n\n        String s -&gt; Str.concat &quot;\\&quot;&quot; (Str.concat (escape s) &quot;\\&quot;&quot;)\n\nescape: Str -&gt; Str\nescape = \\text -&gt; text # TODO\n</code></pre></div>\n<p>Here's the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>joshw@Joshuas-MacBook-Air ~/s/g/r/roc (joshuawarner32/extract-spaced-enum-2) [101]&gt; cargo run -- examples/cli/Json.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.38s\n     Running `target/debug/roc examples/cli/Json.roc`\n[compiler/load/src/file.rs:2606] loc_package_entry = |L 3-3, C 15-31| PackageEntry {\n    shorthand: &quot;base&quot;,\n    spaces_after_shorthand: [],\n    package_or_path: |L 3-3, C 21-31| Path(\n        PlainLine(\n            &quot;platform&quot;,\n        ),\n    ),\n}\n[compiler/load/src/file.rs:2608] existing_package = &quot;base&quot;\nthread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00}\\x0b\\x1fU\\xbe,v\\x90&quot;), definition of value binding ValueId(4): expected type &#39;(union { ((),), ((heap_cell,),) },)&#39;, found type &#39;((),)&#39;&#39;, compiler/gen_llvm/src/llvm/build.rs:4051:19\nstack backtrace:\n🔨 Rebuilding host... Done!\n   0: rust_begin_unwind\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:517:5\n   1: std::panicking::begin_panic_fmt\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/std/src/panicking.rs:460:5\n   2: roc_gen_llvm::llvm::build::build_procedures_help\n             at ./compiler/gen_llvm/src/llvm/build.rs:4051:19\n   3: roc_gen_llvm::llvm::build::build_procedures\n             at ./compiler/gen_llvm/src/llvm/build.rs:4024:5\n   4: roc_build::program::gen_from_mono_module_llvm\n             at ./compiler/build/src/program.rs:301:5\n   5: roc_build::program::gen_from_mono_module\n             at ./compiler/build/src/program.rs:207:50\n   6: roc_cli::build::build_file\n             at ./cli/src/build.rs:181:27\n   7: roc_cli::build\n             at ./cli/src/lib.rs:312:27\n   8: roc::main\n             at ./cli/src/main.rs:30:21\n   9: core::ops::function::FnOnce::call_once\n             at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c/library/core/src/ops/function.rs:227:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 264809041,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639455733
    },
    {
        "content": "<p>Also I've learned that the compiler panics if you try to call <code>List.map</code> with the arguments reversed, e.g. <code>List.map formatJson items</code>. (rather than showing a type error)</p>",
        "id": 264810442,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639456785
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> Been running into a non-stop stream of internal compiler errors. Some of them _might_ be my fault, not super clear based on the error messages.</p>",
        "id": 264811294,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639457418
    },
    {
        "content": "<p>The most recent is: </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;TODO layout_from_flat_type for Apply(`#UserApp.Pair`, [])&#39;, compiler/mono/src/layout.rs:1483:21\n</code></pre></div>",
        "id": 264811447,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639457524
    },
    {
        "content": "<p>It’s never the users fault!</p>",
        "id": 264812572,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639458348
    },
    {
        "content": "<p>^^^ 100% agreed. What I meant by that was, \"Maybe I wrote code that wasn't technically valid Roc, and the compiler is still learning how to express its emotions\" <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 264812843,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639458555
    },
    {
        "content": "<p>For bugs in places like <code>compiler/unify/src/unify.rs</code> and <code>compiler/solve/src/solve.rs</code>, what's the best way to figure the things in the error message map back to source locations in the input program?</p>",
        "id": 264814096,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639459362
    },
    {
        "content": "<p>For sure, I understand :p. I was just being silly :)</p>",
        "id": 264820894,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639466962
    },
    {
        "content": "<p>I think the exprs are usually wrapped in Loc which should carry source info</p>",
        "id": 264820985,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639467019
    },
    {
        "content": "<p>I have to double check though or maybe I misunderstood your question</p>",
        "id": 264821033,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1639467089
    },
    {
        "content": "<p>you get panics in type checking? Also are you using <code>roc check</code> or <code>cargo run -- check</code> ? that will usually show the (type) errors</p>",
        "id": 264848368,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639484389
    },
    {
        "content": "<p>the real problem is that we panic before those errors can be shown</p>",
        "id": 264848379,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639484398
    },
    {
        "content": "<p>or I mean the real real problem is that we're not correctly handling incorrect programs, but for now a quick fix might be just running the type checker until it is satisfied, and then hopefully codegen just works at that point</p>",
        "id": 264848483,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639484447
    },
    {
        "content": "<p><code>cargo run -- check</code> is definitely better. I came back to the problem with fresh eyes and realized I was missing a <code>,</code> between variants in my tag union / enum.</p>",
        "id": 264951088,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639529500
    },
    {
        "content": "<p>It definitely seems like the parser _should_ have yelled at me in that condition.</p>",
        "id": 264951167,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639529526
    },
    {
        "content": "<p>Ok, I think I'm past the main problems, but encountering some new interesting challenges.</p>\n<p>Is it possible to use a self-referential type? e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>JsonValue :\n    [\n        Number I64,\n        String Str,\n        Array (List JsonValue),\n        Object (List { key: Str, value: JsonValue}),\n    ]\n</code></pre></div>\n<p>When I try to construct a literal of that type (<code>Object [ { key: \"testing\", value: Number (42) }]</code>) and serialize it, I'm getting this compiler error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── CIRCULAR TYPE ───────────────────────────────────────────────────────────────\n\nI&#39;m inferring a weird self-referential type for printKeyValue:\n\n46│  printKeyValue = \\{key, value} -&gt;\n     ^^^^^^^^^^^^^\n\nHere is my best effort at writing down the type. You will see ∞ for\nparts of the type that repeat something already printed out\ninfinitely.\n\n    { key : Str, value : [ Array (List a), Number I64,\n    Object (List ∞), String Str ] as a } -&gt; Str\n</code></pre></div>",
        "id": 264951618,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639529863
    },
    {
        "content": "<p>it _should_ work, but recursive types with just aliases are tricky</p>",
        "id": 264951859,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639530019
    },
    {
        "content": "<p>we have plans for proper newtypes</p>",
        "id": 264951879,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639530027
    },
    {
        "content": "<p>which should make all this much more reliable</p>",
        "id": 264951888,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639530035
    },
    {
        "content": "<p>Is there a hacky way I can make this work for now?</p>",
        "id": 264951911,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1639530059
    },
    {
        "content": "<p>Hello. I'm having fun learning while (attempting to) make a json parser with roc.  Is this a good place to ask questions?</p>",
        "id": 302268157,
        "sender_full_name": "Travis",
        "timestamp": 1664892322
    },
    {
        "content": "<p>Hi Travis,<br>\nI've moved your question to a new topic, ask away :)</p>",
        "id": 302268955,
        "sender_full_name": "Anton",
        "timestamp": 1664892571
    },
    {
        "content": "<p>Hi Anton. Thanks for making a topic.  I wonder is there a way to debug what type the compiler is expecting akin to 'holes' in haskell? Forgive me if thats the wrong term.  The compiler does a pretty good job of explaining type errors.  But it might be nice sometime to force it to stop and just output what the type of something is.</p>",
        "id": 302270660,
        "sender_full_name": "Travis",
        "timestamp": 1664893086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span></p>",
        "id": 302272397,
        "sender_full_name": "Anton",
        "timestamp": 1664893633
    },
    {
        "content": "<p>We don't have typed holes exposed in the surface syntax. I think it would be useful to add, but there are some implications regarding syntax that would need to be figured out - for example, we may not be able to use <code>_</code>, since that is used commonly for other purposes already</p>",
        "id": 302274470,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664894228
    },
    {
        "content": "<p>a quick trick: replace whatever type you're curious about with <code>[]</code> so it will fail type checking, and then look at the error message to see what the compiler inferred</p>",
        "id": 302275160,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664894426
    },
    {
        "content": "<p>thats pretty handy. i hadn't thought of using <code>[]</code>. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 302276412,
        "sender_full_name": "Travis",
        "timestamp": 1664894788
    },
    {
        "content": "<p>how can i format code? ```roc doesn't seem to work</p>",
        "id": 302565070,
        "sender_full_name": "Travis",
        "timestamp": 1665014915
    },
    {
        "content": "<p>and ```haskell doesn't look great either</p>",
        "id": 302565158,
        "sender_full_name": "Travis",
        "timestamp": 1665014948
    },
    {
        "content": "<p>I tend to use ```coffee</p>\n<p>or ```elixir</p>",
        "id": 302565377,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665015016
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 302565733,
        "sender_full_name": "Travis",
        "timestamp": 1665015259
    },
    {
        "content": "<p>elixir looks passable</p>",
        "id": 302565798,
        "sender_full_name": "Travis",
        "timestamp": 1665015316
    },
    {
        "content": "<p>any ideas on how i could allow for a leading minus in manyDigitsP?  i'm relying on examples/parser/Parser/{Core,Str}.roc but haven't shown their imports.  thinking i need a slightly different approach but not sure. </p>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">The argument is an anonymous function of type:</span>\n<span class=\"go\">    [Err [Nothing], Ok Str] -&gt; [Ok Str]a</span>\n<span class=\"go\">But map needs its 2nd argument to be:</span>\n<span class=\"go\">    Result U8 [Nothing] -&gt; [Ok Str]a</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">minus</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">codeunit</span><span class=\"w\"> </span><span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"c1\"># '-'</span><span class=\"w\"></span>\n<span class=\"n\">maybeMinus</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">maybe</span><span class=\"w\"> </span><span class=\"n\">minus</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># &lt;-- Here is the problem line</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"></span>\n\n<span class=\"n\">manyDigitsP</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"w\"> </span><span class=\"nc\">RawStr</span><span class=\"w\"> </span><span class=\"nc\">RawStr</span><span class=\"w\"></span>\n<span class=\"n\">manyDigitsP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sepBy1</span><span class=\"w\"> </span><span class=\"n\">maybeMinus</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">oneOrMore</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">codeunitSatisfies</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">59</span><span class=\"w\"> </span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"n\">u64P</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"w\"> </span><span class=\"nc\">RawStr</span><span class=\"w\"> </span><span class=\"nc\">Value</span><span class=\"w\"></span>\n<span class=\"n\">u64P</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">manyDigitsP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">rawStr</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">strFromRaw</span><span class=\"w\"> </span><span class=\"n\">rawStr</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">JsonNumber</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"s2\">\"`\\(str)` is not a I64\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">flatten</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302565817,
        "sender_full_name": "Travis",
        "timestamp": 1665015339
    },
    {
        "content": "<p>seems like i just need to map a non-minus to an empty list</p>",
        "id": 302565986,
        "sender_full_name": "Travis",
        "timestamp": 1665015479
    },
    {
        "content": "<p>try changing</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-            Ok m -&gt; Ok m</span><span class=\"w\"></span>\n<span class=\"gi\">+            Ok _ -&gt; Ok \"-\"</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302566033,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665015489
    },
    {
        "content": "<p>ah. thank you. so that gets rid of one error. now just this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">43│  manyDigitsP : Parser RawStr RawStr</span>\n<span class=\"go\">44│  manyDigitsP =</span>\n<span class=\"go\">45│      sepBy1 maybeMinus (oneOrMore (codeunitSatisfies (\\c -&gt; 48 &lt;= c &amp;&amp; c &lt;= 59 )))</span>\n<span class=\"go\">         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n\n<span class=\"go\">This Parser.Core.sepBy1 call produces:</span>\n\n<span class=\"go\">    Parser RawStr (List [Ok Str]a) ?</span>\n\n<span class=\"go\">But the type annotation on manyDigitsP says it should be:</span>\n\n<span class=\"go\">    Parser RawStr (List U8) ?</span>\n</code></pre></div>",
        "id": 302566282,
        "sender_full_name": "Travis",
        "timestamp": 1665015701
    },
    {
        "content": "<p>maybe <a href=\"http://List.map\">List.map</a>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 302566378,
        "sender_full_name": "Travis",
        "timestamp": 1665015761
    },
    {
        "content": "<p>think i just need to get change that type annotation and handle the result of manyDigitsP differently - as a List instead of as a raw string.</p>",
        "id": 302566745,
        "sender_full_name": "Travis",
        "timestamp": 1665016175
    },
    {
        "content": "<p>any advice on how to transform a <code>List [Ok Str]</code> to a <code>Str</code>?</p>",
        "id": 302567805,
        "sender_full_name": "Travis",
        "timestamp": 1665017102
    },
    {
        "content": "<p>is there maybe a List.mapConcat or something?</p>",
        "id": 302567814,
        "sender_full_name": "Travis",
        "timestamp": 1665017107
    },
    {
        "content": "<p>nevermind. i think i'm onto something.</p>",
        "id": 302568038,
        "sender_full_name": "Travis",
        "timestamp": 1665017310
    },
    {
        "content": "<p>found a solution.  now returning <code>List U8</code> rather than <code>Ok Str</code> from maybeMinus and just doing <code>List.join</code> on its result to get a raw str.</p>",
        "id": 302568738,
        "sender_full_name": "Travis",
        "timestamp": 1665017866
    },
    {
        "content": "<p>now i've discovered that <code>Str.toI64</code> doesn't allow for a leading minus which is what i was hoping for... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 302568876,
        "sender_full_name": "Travis",
        "timestamp": 1665017975
    },
    {
        "content": "<p>or wait. no it looks like perhaps <code>sepBy1</code> isn't doing what i thought it was. i expected to get '-123' but actually getting just '-'. hmm not sure why.</p>",
        "id": 302569341,
        "sender_full_name": "Travis",
        "timestamp": 1665018369
    },
    {
        "content": "<p><code>While reading: </code>-123<code> or </code>-<code> is not a I64</code></p>",
        "id": 302569368,
        "sender_full_name": "Travis",
        "timestamp": 1665018416
    },
    {
        "content": "<p>Probably <code>-</code> does not parse to an i64</p>",
        "id": 302569464,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665018484
    },
    {
        "content": "<p>yeah i was confused what the error message meant.  but i think its actually passing just '-' to <code>Str.toI64</code></p>",
        "id": 302570009,
        "sender_full_name": "Travis",
        "timestamp": 1665019017
    },
    {
        "content": "<p>yep. this prints <code>-123</code>:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"></span>\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toStr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI64</span><span class=\"w\"> </span><span class=\"s\">\"-123\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302570046,
        "sender_full_name": "Travis",
        "timestamp": 1665019065
    },
    {
        "content": "<p>so it looks like i'm not getting the full result from <code>sepBy1</code></p>",
        "id": 302570136,
        "sender_full_name": "Travis",
        "timestamp": 1665019110
    },
    {
        "content": "<p>well i'm taking a break. heres my code if anyone is curious. <a href=\"https://pastebin.com/VQjVetHt\">https://pastebin.com/VQjVetHt</a><br>\nalso let me know if there is a better place to paste code.</p>",
        "id": 302570703,
        "sender_full_name": "Travis",
        "timestamp": 1665019699
    },
    {
        "content": "<p>also any critiques are welcome <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  i'm very new and likely making lots of mistakes.</p>",
        "id": 302570845,
        "sender_full_name": "Travis",
        "timestamp": 1665019848
    },
    {
        "content": "<p>incase anyone wants to try running it. i've been running it like this from the roc repo's root directory :<br>\n<code>$ roc examples/parser/parse-json.roc</code></p>",
        "id": 302571224,
        "sender_full_name": "Travis",
        "timestamp": 1665020251
    },
    {
        "content": "<p>this is super cool!!</p>",
        "id": 302571409,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665020422
    },
    {
        "content": "<p>Nice work! <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 302693208,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1665073895
    },
    {
        "content": "<p>so i figured out how to allow a leading minus.  i was infact using <code>sepBy1</code> incorrectly.  the solution i found uses <code>const</code> and <code>apply</code>.  it also disallows leading zeroes. here it is:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">minus</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"c1\"># '-'</span><span class=\"w\"></span>\n<span class=\"nv\">maybeMinusP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"></span>\n<span class=\"nv\">maybeMinusP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">maybe</span><span class=\"w\"> </span><span class=\"nx\">minus</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">res</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">res</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">45</span><span class=\"nx\">u8</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"nv\">oneToNineP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">codeunitSatisfies</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">59</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c1\"># '1'..'9'</span><span class=\"w\"></span>\n<span class=\"nv\">zeroToNineP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">codeunitSatisfies</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">59</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># '0'..'9'</span><span class=\"w\"></span>\n\n<span class=\"nv\">rawIntP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"></span>\n<span class=\"nv\">rawIntP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">vals0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">val1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">vals</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">vals0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">val1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nx\">vals</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">maybeMinusP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">oneToNineP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">many</span><span class=\"w\"> </span><span class=\"nx\">zeroToNineP</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"nv\">intP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">intP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">rawIntP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">rawStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">strFromRaw</span><span class=\"w\"> </span><span class=\"nx\">rawStr</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI64</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"s\">\"`\\(str)` is not a I64\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">flatten</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302775923,
        "sender_full_name": "Travis",
        "timestamp": 1665113556
    },
    {
        "content": "<p>and now i'm trying to move to parsing arrays.  but i can't understand what this error message needs me to do</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">── TYPE MISMATCH ────────────────────────────── examples/parser/parse-json.roc ─</span>\n\n<span class=\"go\">Something is off with the body of the arrayP definition:</span>\n\n<span class=\"go\">82│   arrayP : Parser RawStr Value</span>\n<span class=\"go\">83│   arrayP =</span>\n<span class=\"go\">84│&gt;      string \"[]\"</span>\n<span class=\"go\">85│&gt;      |&gt; map (\\_ -&gt; Ok (Array emptyArray))</span>\n\n<span class=\"go\">This Parser.Core.map call produces:</span>\n\n<span class=\"go\">    Parser RawStr [Ok [Array (List Value)]b]c ?</span>\n\n<span class=\"go\">But the type annotation on arrayP says it should be:</span>\n\n<span class=\"go\">    Parser RawStr [Array (List a), Boolean Bool, Null, Number I64,</span>\n<span class=\"go\">    String Str] as a ?</span>\n\n<span class=\"go\">────────────────────────────────────────────────────────────────────────────────</span>\n</code></pre></div>",
        "id": 302776128,
        "sender_full_name": "Travis",
        "timestamp": 1665113773
    },
    {
        "content": "<p>here is the relevant code:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">Null</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Boolean</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Number</span><span class=\"w\"> </span><span class=\"nx\">I64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Array</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"c1\">#...</span><span class=\"w\"></span>\n\n<span class=\"nv\">emptyArray</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">emptyArray</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\"># dummy impl just trying to get typing right</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\"[]\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"w\"> </span><span class=\"nx\">emptyArray</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302776231,
        "sender_full_name": "Travis",
        "timestamp": 1665113904
    },
    {
        "content": "<p>am i perhaps missing a type specifier somewhere?</p>",
        "id": 302776428,
        "sender_full_name": "Travis",
        "timestamp": 1665114107
    },
    {
        "content": "<p>it looks like there's an <code>Ok</code> somewhere that shouldn't be there</p>",
        "id": 302776687,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665114371
    },
    {
        "content": "<p>so maybe <code>|&gt; map (\\_ -&gt; Ok (Array emptyArray))</code> shouldn't have the <code>Ok</code> there?</p>",
        "id": 302776716,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665114416
    },
    {
        "content": "<p>I think that because I'm seeing in the error message that it produces <code>Parser RawStr [Ok [Array ...</code> but expects <code>Parser RawStr [Array ...</code> (without the <code>Ok</code>)</p>",
        "id": 302776738,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665114448
    },
    {
        "content": "<p>I'm guessing this is because <code>map</code> already takes care of unwrapping and re-wrapping the <code>Result</code> for you maybe?</p>",
        "id": 302776792,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665114487
    },
    {
        "content": "<p>hmm yeah i think you're right.  I've been using Ok elsewhere and copied it. <br>\nbut now when i remove the <code>Ok</code> i get a segfault. here is what triggered it:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\"[]\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Array</span><span class=\"w\"> </span><span class=\"nx\">emptyArray</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302777078,
        "sender_full_name": "Travis",
        "timestamp": 1665114850
    },
    {
        "content": "<p>does <code>roc check</code> give you any errors?</p>",
        "id": 302777132,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665114922
    },
    {
        "content": "<p>nope.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc check examples/parser/parse-json.roc\n<span class=\"go\">0 errors and 0 warnings found in 17 ms.</span>\n</code></pre></div>",
        "id": 302777200,
        "sender_full_name": "Travis",
        "timestamp": 1665114978
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc version\n<span class=\"go\">roc nightly pre-release, built from commit 2b91154 on Sa 01 Okt 2022 09:15:07 UTC</span>\n</code></pre></div>",
        "id": 302777247,
        "sender_full_name": "Travis",
        "timestamp": 1665115042
    },
    {
        "content": "<p>here is all the code if you need a repro: <a href=\"https://gist.github.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c\">https://gist.github.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c</a></p>",
        "id": 302777765,
        "sender_full_name": "Travis",
        "timestamp": 1665115521
    },
    {
        "content": "<p>gotcha - is there anyplace this code is pushed, so we can try to reproduce?</p>",
        "id": 302777767,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665115526
    },
    {
        "content": "<p>perfect!</p>",
        "id": 302777769,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665115527
    },
    {
        "content": "<p>that segfaults. the offending line is line 90</p>",
        "id": 302777845,
        "sender_full_name": "Travis",
        "timestamp": 1665115577
    },
    {
        "content": "<p>does <code>roc build</code> succeed?</p>",
        "id": 302777856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665115588
    },
    {
        "content": "<p>yes it does</p>",
        "id": 302777875,
        "sender_full_name": "Travis",
        "timestamp": 1665115617
    },
    {
        "content": "<p>ok, created an issue to track this: <a href=\"https://github.com/roc-lang/roc/issues/4233\">https://github.com/roc-lang/roc/issues/4233</a></p>",
        "id": 302777898,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665115659
    },
    {
        "content": "<p>thanks for the concise reproductoin!</p>",
        "id": 302777904,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665115665
    },
    {
        "content": "<p>*reproduction</p>",
        "id": 302777905,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665115667
    },
    {
        "content": "<p>interesting. i thought it was a compiler segfault. no its a runtime fault.</p>",
        "id": 302777909,
        "sender_full_name": "Travis",
        "timestamp": 1665115675
    },
    {
        "content": "<p>no problem. thanks for the help</p>",
        "id": 302777911,
        "sender_full_name": "Travis",
        "timestamp": 1665115681
    },
    {
        "content": "<p>not sure if this is relevant, but does roc perhaps require a specific clang version? i've symlinked clang -&gt; system installed clang-14 on debian</p>",
        "id": 302778174,
        "sender_full_name": "Travis",
        "timestamp": 1665115968
    },
    {
        "content": "<p>oh yes - we need 13</p>",
        "id": 302778542,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665116372
    },
    {
        "content": "<p>upgrading to 14 will be a significant project unfortunately <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 302778557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665116400
    },
    {
        "content": "<p>although - do other examples work for you?</p>",
        "id": 302778649,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665116481
    },
    {
        "content": "<p>that's the type of thing where I'd expect either everything works or nothing works; I wouldn't expect it to cause project-specific segfaults</p>",
        "id": 302778709,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665116527
    },
    {
        "content": "<p>yeah i everything else has worked so far. <br>\ni'll check back later on. gotta run. thanks! o/</p>",
        "id": 302778969,
        "sender_full_name": "Travis",
        "timestamp": 1665116879
    },
    {
        "content": "<p>can anyone else perhaps try running this file to see if they get a segfault too?  i just want to make sure its not a local setup problem like using clang-14.</p>",
        "id": 302782241,
        "sender_full_name": "Travis",
        "timestamp": 1665120191
    },
    {
        "content": "<p><a href=\"https://gist.github.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c\">https://gist.github.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c</a></p>",
        "id": 302782245,
        "sender_full_name": "Travis",
        "timestamp": 1665120194
    },
    {
        "content": "<p>there are instructions at the top for running it</p>",
        "id": 302782251,
        "sender_full_name": "Travis",
        "timestamp": 1665120205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[jan@framey parser]$ roc run parse-json.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\n🔨 Rebuilding platform...\n\n── UNRECOGNIZED NAME ────────────────────────────────────────── parse-json.roc ─\n\nThe Parser.Str module does not expose anything by the name strToRaw.\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 13 warnings found in 744 ms.\n\nRunning program anyway…\n\n────────────────────────────────────────────────────────────────────────────────\nSegmentation fault (core dumped)\n[jan@framey parser]$\n</code></pre></div>",
        "id": 302782387,
        "sender_full_name": "jan kili",
        "timestamp": 1665120359
    },
    {
        "content": "<p>ah thanks. i just noticed that. forgot i edited a file. updated now.</p>",
        "id": 302782913,
        "sender_full_name": "Travis",
        "timestamp": 1665120733
    },
    {
        "content": "<p>here's a one liner if you like. </p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span><span class=\"nb\">cd</span> /tmp <span class=\"o\">&amp;&amp;</span> git clone git@github.com:roc-lang/roc.git <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> roc <span class=\"o\">&amp;&amp;</span> wget https://gist.github.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c/raw/a1fcbbd67e4fadc1d938303d192b022cfdd0da64/parse-json.roc -O examples/parser/parse-json.roc <span class=\"o\">&amp;&amp;</span> roc examples/parser/parse-json.roc\n</code></pre></div>",
        "id": 302783001,
        "sender_full_name": "Travis",
        "timestamp": 1665120803
    },
    {
        "content": "<p>i'm expecting a segfault</p>",
        "id": 302783028,
        "sender_full_name": "Travis",
        "timestamp": 1665120821
    },
    {
        "content": "<p>here's what i see</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc examples/parser/parse-json.roc\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">Segmentation fault</span>\n</code></pre></div>",
        "id": 302783111,
        "sender_full_name": "Travis",
        "timestamp": 1665120873
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[jan@framey parser]$ cd /tmp &amp;&amp; git clone git@github.com:roc-lang/roc.git &amp;&amp; cd roc &amp;&amp; wget https://gist.github.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c/raw/a1fcbbd67e4fadc1d938303d192b022cfdd0da64/parse-json.roc -O examples/parser/parse-json.roc &amp;&amp; roc examples/parser/parse-json.roc\nCloning into &#39;roc&#39;...\nremote: Enumerating objects: 165051, done.\nremote: Counting objects: 100% (1076/1076), done.\nremote: Compressing objects: 100% (494/494), done.\nremote: Total 165051 (delta 617), reused 1002 (delta 573), pack-reused 163975\nReceiving objects: 100% (165051/165051), 64.41 MiB | 6.44 MiB/s, done.\nResolving deltas: 100% (111974/111974), done.\n--2022-10-06 23:34:13--  https://gist.github.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c/raw/a1fcbbd67e4fadc1d938303d192b022cfdd0da64/parse-json.roc\nResolving gist.github.com (gist.github.com)... 140.82.112.3\nConnecting to gist.github.com (gist.github.com)|140.82.112.3|:443... connected.\nHTTP request sent, awaiting response... 301 Moved Permanently\nLocation: https://gist.githubusercontent.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c/raw/a1fcbbd67e4fadc1d938303d192b022cfdd0da64/parse-json.roc [following]\n--2022-10-06 23:34:14--  https://gist.githubusercontent.com/travisstaloch/7add1274a085f1e6cba59ca93d991d9c/raw/a1fcbbd67e4fadc1d938303d192b022cfdd0da64/parse-json.roc\nResolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.110.133, 185.199.109.133, 185.199.108.133, ...\nConnecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.110.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 3208 (3.1K) [text/plain]\nSaving to: ‘examples/parser/parse-json.roc’\n\nexamples/parser/parse-j 100%[============================&gt;]   3.13K  --.-KB/s    in 0s\n\n2022-10-06 23:34:14 (23.7 MB/s) - ‘examples/parser/parse-json.roc’ saved [3208/3208]\n\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Core.sepBy1 is not used in this module.\n\n9│              parsePartial, ignore, between, many, flatten, oneOrMore, maybe, sepBy1, oneOrMore, alt },\n                                                                                ^^^^^^\n\nSince Parser.Core.sepBy1 isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Core.alt is not used in this module.\n\n9│              parsePartial, ignore, between, many, flatten, oneOrMore, maybe, sepBy1, oneOrMore, alt },\n                                                                                                   ^^^\n\nSince Parser.Core.alt isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Str.parseStr is not used in this module.\n\n11│              codeunitSatisfies, strFromRaw, digits, digit, parseRawStr, parseStr }\n                                                                            ^^^^^^^^\n\nSince Parser.Str.parseStr isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Str.parseRawStr is not used in this module.\n\n11│              codeunitSatisfies, strFromRaw, digits, digit, parseRawStr, parseStr }\n                                                               ^^^^^^^^^^^\n\nSince Parser.Str.parseRawStr isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Core.parse is not used in this module.\n\n8│          Parser.Core.{ Parser, parse, map, apply, const, buildPrimitiveParser, Result, oneOf,\n                                  ^^^^^\n\nSince Parser.Core.parse isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Str.stringRaw is not used in this module.\n\n10│          Parser.Str.{ string, stringRaw, RawStr, parseStrPartial, anyString, codeunit,\n                                  ^^^^^^^^^\n\nSince Parser.Str.stringRaw isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Str.digits is not used in this module.\n\n11│              codeunitSatisfies, strFromRaw, digits, digit, parseRawStr, parseStr }\n                                                ^^^^^^\n\nSince Parser.Str.digits isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Core.ignore is not used in this module.\n\n9│              parsePartial, ignore, between, many, flatten, oneOrMore, maybe, sepBy1, oneOrMore, alt },\n                              ^^^^^^\n\nSince Parser.Core.ignore isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Str.anyString is not used in this module.\n\n10│          Parser.Str.{ string, stringRaw, RawStr, parseStrPartial, anyString, codeunit,\n                                                                      ^^^^^^^^^\n\nSince Parser.Str.anyString isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Core.parsePartial is not used in this module.\n\n9│              parsePartial, ignore, between, many, flatten, oneOrMore, maybe, sepBy1, oneOrMore, alt },\n                ^^^^^^^^^^^^\n\nSince Parser.Core.parsePartial isn&#39;t used, you don&#39;t need to import\nit.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Core.buildPrimitiveParser is not used in this module.\n\n8│          Parser.Core.{ Parser, parse, map, apply, const, buildPrimitiveParser, Result, oneOf,\n                                                            ^^^^^^^^^^^^^^^^^^^^\n\nSince Parser.Core.buildPrimitiveParser isn&#39;t used, you don&#39;t need to\nimport it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Str.digit is not used in this module.\n\n11│              codeunitSatisfies, strFromRaw, digits, digit, parseRawStr, parseStr }\n                                                        ^^^^^\n\nSince Parser.Str.digit isn&#39;t used, you don&#39;t need to import it.\n\n\n── UNUSED IMPORT ────────────────────────────── examples/parser/parse-json.roc ─\n\nParser.Core.oneOrMore is not used in this module.\n\n9│              parsePartial, ignore, between, many, flatten, oneOrMore, maybe, sepBy1, oneOrMore, alt },\n                                                                                        ^^^^^^^^^\n\nSince Parser.Core.oneOrMore isn&#39;t used, you don&#39;t need to import it.\n\n────────────────────────────────────────────────────────────────────────────────\n\n0 errors and 13 warnings found in 50 ms.\n\nYou can run the program anyway with roc run examples/parser/parse-json.roc\n[jan@framey roc]$\n</code></pre></div>",
        "id": 302783122,
        "sender_full_name": "jan kili",
        "timestamp": 1665120888
    },
    {
        "content": "<p>oh boy. i don't see those ununsed imports locally. could you try <code>roc run ...</code>?</p>",
        "id": 302783290,
        "sender_full_name": "Travis",
        "timestamp": 1665121012
    },
    {
        "content": "<p><code>$ roc run examples/parser/parse-json.roc</code></p>",
        "id": 302783312,
        "sender_full_name": "Travis",
        "timestamp": 1665121029
    },
    {
        "content": "<p>i'm just curious to see if the segfault is reproducible</p>",
        "id": 302783369,
        "sender_full_name": "Travis",
        "timestamp": 1665121078
    },
    {
        "content": "<p>Same output with the segfault after:</p>\n<div class=\"codehilite\"><pre><span></span><code>Segmentation fault (core dumped)\n</code></pre></div>",
        "id": 302783478,
        "sender_full_name": "jan kili",
        "timestamp": 1665121154
    },
    {
        "content": "<p>ok thanks. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  good to know its not just on my system.</p>",
        "id": 302783511,
        "sender_full_name": "Travis",
        "timestamp": 1665121191
    },
    {
        "content": "<p>:)</p>",
        "id": 302783535,
        "sender_full_name": "jan kili",
        "timestamp": 1665121197
    },
    {
        "content": "<p>i'll clean up those unused imports. wonder why i'm not seeing them <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 302783651,
        "sender_full_name": "Travis",
        "timestamp": 1665121271
    },
    {
        "content": "<p>i wonder if this segfault is related to the recursive type?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\"># ...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Array</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302786809,
        "sender_full_name": "Travis",
        "timestamp": 1665123576
    },
    {
        "content": "<p>encountered a different compiler error while attempting float parsing. created issue <a href=\"https://github.com/roc-lang/roc/issues/4236\">https://github.com/roc-lang/roc/issues/4236</a></p>",
        "id": 302807482,
        "sender_full_name": "Travis",
        "timestamp": 1665133449
    },
    {
        "content": "<p>what OS are you running on? (I'm guessing Linux?)</p>",
        "id": 302810098,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665134487
    },
    {
        "content": "<p>yes this is a debian based distro</p>",
        "id": 302814949,
        "sender_full_name": "Travis",
        "timestamp": 1665136459
    },
    {
        "content": "<p>Yeah, that issue is known. It is an edge case in the surgical linker that is hit by some builtins. Mostly the float to/from string ones (but i am sure there are others). To be unblocked, user <code>--linker=legacy</code> for now</p>",
        "id": 302853794,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665149956
    },
    {
        "content": "<p>yep can confirm i'm able to successfully run the reproduction using the <code>--linker=legacy</code> flag.</p>",
        "id": 302861045,
        "sender_full_name": "Travis",
        "timestamp": 1665152024
    },
    {
        "content": "<p>now i'm seeing a different build error. goes away if i remove intP from this line.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">valueP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">valueP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">nullP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">trueP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">falseP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">strP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">intP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">floatP</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>intP and floatP are very similar</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">rawIntP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"></span>\n<span class=\"nv\">rawIntP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">mminus</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">digit0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">digits</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">mminus</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">digit0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nx\">digits</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">maybeMinusP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">oneToNineP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">many</span><span class=\"w\"> </span><span class=\"nx\">zeroToNineP</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"nv\">intP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">intP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">rawIntP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">rawStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">strFromRaw</span><span class=\"w\"> </span><span class=\"nx\">rawStr</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI64</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"s\">\"`\\(str)` is not a valid I64\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">flatten</span><span class=\"w\"></span>\n\n<span class=\"nv\">rawFloatP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"></span>\n<span class=\"nv\">rawFloatP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"nx\">mminus</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">dig0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">digs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"nx\">ddot</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">digsRhs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">mminus</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">dig0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nx\">digs</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">ddot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">digsRhs</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">maybeMinusP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">oneToNineP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">many</span><span class=\"w\"> </span><span class=\"nx\">zeroToNineP</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">maybeDotP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">many</span><span class=\"w\"> </span><span class=\"nx\">zeroToNineP</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"nv\">floatP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">floatP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">rawFloatP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">rawStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">strFromRaw</span><span class=\"w\"> </span><span class=\"nx\">rawStr</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toF64</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Float</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"s\">\"`\\(str)` is not a valid F64\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">flatten</span><span class=\"w\"></span>\n</code></pre></div>\n<p>here's the error trace:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">stack backtrace:</span>\n<span class=\"go\">   0: rust_begin_unwind</span>\n<span class=\"go\">             at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/std/src/panicking.rs:584:5</span>\n<span class=\"go\">   1: core::panicking::panic_fmt</span>\n<span class=\"go\">             at /rustc/fe5b13d681f25ee6474be29d748c65adcd91f69e/library/core/src/panicking.rs:143:14</span>\n<span class=\"go\">   2: roc_mono::borrow::ParamMap::get_param_offset</span>\n<span class=\"go\">   3: roc_mono::borrow::BorrowInfState::collect_expr</span>\n<span class=\"go\">   4: roc_mono::borrow::BorrowInfState::collect_stmt</span>\n<span class=\"go\">   5: roc_mono::borrow::BorrowInfState::collect_stmt</span>\n<span class=\"go\">   6: roc_mono::borrow::BorrowInfState::collect_stmt</span>\n<span class=\"go\">   7: roc_mono::borrow::infer_borrow</span>\n<span class=\"go\">   8: roc_mono::ir::Proc::insert_refcount_operations</span>\n<span class=\"go\">   9: roc_load_internal::file::update</span>\n<span class=\"go\">  10: roc_load_internal::file::state_thread_step</span>\n<span class=\"go\">  11: roc_load_internal::file::load_multi_threaded</span>\n<span class=\"go\">  12: roc_load_internal::file::load</span>\n<span class=\"go\">  13: roc_load::load_and_monomorphize</span>\n<span class=\"go\">  14: roc_cli::build::build_file</span>\n<span class=\"go\">  15: roc_cli::build</span>\n<span class=\"go\">  16: roc::main</span>\n</code></pre></div>",
        "id": 302864608,
        "sender_full_name": "Travis",
        "timestamp": 1665153086
    },
    {
        "content": "<p>maybe i'll try do de-dupe some of this and see what happens.</p>",
        "id": 302865067,
        "sender_full_name": "Travis",
        "timestamp": 1665153213
    },
    {
        "content": "<p>Does <code>roc check</code> give a better error at all?</p>",
        "id": 302865369,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665153303
    },
    {
        "content": "<p><code>roc check</code> shows  0 errors 0 warnings</p>",
        "id": 302865869,
        "sender_full_name": "Travis",
        "timestamp": 1665153446
    },
    {
        "content": "<p>same error when </p>\n<ol>\n<li>moving floatP before intP</li>\n<li>reusing rawIntP in rawFloatP</li>\n</ol>",
        "id": 302866408,
        "sender_full_name": "Travis",
        "timestamp": 1665153591
    },
    {
        "content": "<p>ended up working around the above issue by moving intP and floatP from the top-level <code>oneOf</code> to  an <code>alt</code> parser:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">numberP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">numberP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">alt</span><span class=\"w\"> </span><span class=\"nx\">floatP</span><span class=\"w\"> </span><span class=\"nx\">intP</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc  examples/parser/parse-json.roc --linker<span class=\"o\">=</span>legacy\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">null</span>\n<span class=\"go\">true</span>\n<span class=\"go\">false</span>\n<span class=\"go\">\"null\"</span>\n<span class=\"go\">123</span>\n<span class=\"go\">-123</span>\n<span class=\"go\">-1.23</span>\n</code></pre></div>",
        "id": 302876106,
        "sender_full_name": "Travis",
        "timestamp": 1665155988
    },
    {
        "content": "<p>good news here. somehow the errors related to arrays i was getting earlier (<a href=\"#narrow/stream/231634-beginners/topic/json.20parser/near/302777078\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/json.20parser/near/302777078</a>) seem to have ceased.  i did a bunch of refactoring and i think roc is telling me i'm on the right track <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 302923408,
        "sender_full_name": "Travis",
        "timestamp": 1665171864
    },
    {
        "content": "<p>so now i'm able to use my recursive array type and i think i need to use <code>examples/parsing/Parser/Core.roc#lazy</code></p>",
        "id": 302923595,
        "sender_full_name": "Travis",
        "timestamp": 1665171938
    },
    {
        "content": "<p>does anyone have advice on how i can use it?  i've searched and found some strange syntax i don't understand like this: <code>lazy (\\{} -&gt; fn)</code></p>",
        "id": 302923803,
        "sender_full_name": "Travis",
        "timestamp": 1665172024
    },
    {
        "content": "<p>here is the error i'm running into</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">── CIRCULAR DEFINITION ──────────────────────── examples/parser/parse-json.roc ─</span>\n\n<span class=\"go\">The arrayP definition is causing a very tricky infinite loop:</span>\n\n<span class=\"go\">163│  arrayP =</span>\n<span class=\"go\">      ^^^^^^</span>\n\n<span class=\"go\">The arrayP value depends on itself through the following chain of</span>\n<span class=\"go\">definitions:</span>\n\n<span class=\"go\">    ┌─────┐</span>\n<span class=\"go\">    │     arrayP</span>\n<span class=\"go\">    │     ↓</span>\n<span class=\"go\">    │     valueP</span>\n<span class=\"go\">    └─────┘</span>\n\n<span class=\"go\">────────────────────────────────────────────────────────────────────────────────</span>\n</code></pre></div>",
        "id": 302924039,
        "sender_full_name": "Travis",
        "timestamp": 1665172114
    },
    {
        "content": "<p>here is my attempt to use <code>lazy</code> which yields the error above</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">elements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">sepBy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">lazy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">valueP</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"nx\">commaC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\"># ...</span><span class=\"w\"></span>\n\n<span class=\"nv\">valueP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">nullP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">trueP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">falseP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">strlitP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">numberP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">lazy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">arrayP</span><span class=\"p\">)]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302924618,
        "sender_full_name": "Travis",
        "timestamp": 1665172376
    },
    {
        "content": "<p>You're using it correctly except you only need it once, not twice.</p>",
        "id": 302931775,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665175543
    },
    {
        "content": "<p>Try getting rid of one of the lazy calls</p>",
        "id": 302931857,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665175563
    },
    {
        "content": "<p><code>{}</code> is the empty record. The equivalent in C or JavaScript would be calling a function with no arguments.</p>",
        "id": 302931994,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665175616
    },
    {
        "content": "<p>The point of using lazy is to break the recursion cycle so it doesn't blow up. But you only need to break the cycle in one place.</p>",
        "id": 302932181,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665175684
    },
    {
        "content": "<p>Thanks. That syntax does seem strange.  Having someone explain its meaning helps a lot. <br>\nTo your suggestion, thats what I thought at first and tried using lazy once at each location and got the same error before trying both locations as shown above.</p>",
        "id": 302934162,
        "sender_full_name": "Travis",
        "timestamp": 1665176535
    },
    {
        "content": "<p>So perhaps this means its something else?   Here is the full arrayP - after moving the lazy call to valueP below - incase it's relevant</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">elements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">sepBy</span><span class=\"w\"> </span><span class=\"nx\">valueP</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"nx\">commaC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">vals</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">vals</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"nx\">lbraceC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">wsP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">elements</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">wsP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"nx\">rbraceC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">vals</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Array</span><span class=\"w\"> </span><span class=\"nx\">vals</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302934654,
        "sender_full_name": "Travis",
        "timestamp": 1665176761
    },
    {
        "content": "<p>otherwise it seems like i'm either using <code>lazy</code> incorrectly or missing some detail of how its used.</p>",
        "id": 302935477,
        "sender_full_name": "Travis",
        "timestamp": 1665177138
    },
    {
        "content": "<p>maybe it doesn't work or works differently than expected?  i couldn't find any uses of it in the roc repo.</p>",
        "id": 302935591,
        "sender_full_name": "Travis",
        "timestamp": 1665177211
    },
    {
        "content": "<p>here are two of the functions being used from examples/parser/Parser/Core.roc</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># Internal utility function. Not exposed to users, since usage is discouraged!</span><span class=\"w\"></span>\n<span class=\"c1\">#</span><span class=\"w\"></span>\n<span class=\"c1\"># Runs `firstParser` and (only) if it succeeds,</span><span class=\"w\"></span>\n<span class=\"c1\"># runs the function `buildNextParser` on its result value.</span><span class=\"w\"></span>\n<span class=\"c1\"># This function returns a new parser, which is finally run.</span><span class=\"w\"></span>\n<span class=\"c1\">#</span><span class=\"w\"></span>\n<span class=\"c1\"># `andThen` is usually more flexible than necessary, and less efficient</span><span class=\"w\"></span>\n<span class=\"c1\"># than using `const` with `map` and/or `apply`.</span><span class=\"w\"></span>\n<span class=\"c1\"># Consider using those functions first.</span><span class=\"w\"></span>\n<span class=\"nv\">andThen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">input</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">(a -&gt; Parser input b) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">input</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"></span>\n<span class=\"nv\">andThen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">firstParser</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">buildNextParser</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">firstVal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">parsePartial</span><span class=\"w\"> </span><span class=\"nx\">firstParser</span><span class=\"w\"> </span><span class=\"nx\">input</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">nextParser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">buildNextParser</span><span class=\"w\"> </span><span class=\"nx\">firstVal</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nx\">parsePartial</span><span class=\"w\"> </span><span class=\"nx\">nextParser</span><span class=\"w\"> </span><span class=\"nx\">rest</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nx\">buildPrimitiveParser</span><span class=\"w\"> </span><span class=\"nx\">fun</span><span class=\"w\"></span>\n\n<span class=\"c1\">## Runs a parser lazily</span><span class=\"w\"></span>\n<span class=\"c1\">##</span><span class=\"w\"></span>\n<span class=\"c1\">## This is (only) useful when dealing with a recursive structure.</span><span class=\"w\"></span>\n<span class=\"c1\">## For instance, consider a type `Comment : { message: String, responses: List Comment }`.</span><span class=\"w\"></span>\n<span class=\"c1\">## Without `lazy`, you would ask the compiler to build an infinitely deep parser.</span><span class=\"w\"></span>\n<span class=\"c1\">## (Resulting in a compiler error.)</span><span class=\"w\"></span>\n<span class=\"c1\">##</span><span class=\"w\"></span>\n<span class=\"nv\">lazy</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nf\">({} -&gt; Parser input a) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">input</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"></span>\n<span class=\"nv\">lazy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">thunk</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">andThen</span><span class=\"w\"> </span><span class=\"nx\">thunk</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302935864,
        "sender_full_name": "Travis",
        "timestamp": 1665177324
    },
    {
        "content": "<p>could you add type annotations to <code>arrayP</code> and <code>valueP</code>? What are their types exactly?</p>",
        "id": 302938817,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665178970
    },
    {
        "content": "<p>It's possible this is a type checker bug, I made it do some trickery so that if it sees an infinitely-sized type, you get that error. But it's possible it's overly conservative</p>",
        "id": 302938889,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665179007
    },
    {
        "content": "<p>(As an aside - we recently landed some changes so that where you have <code>codeunit commaC</code>, you should be able to just use <code>codeunit ','</code> now)</p>",
        "id": 302939032,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665179069
    },
    {
        "content": "<p>oh cool. glad to hear char literals are happening. i'll have to get a new compiler soon.</p>",
        "id": 302939720,
        "sender_full_name": "Travis",
        "timestamp": 1665179461
    },
    {
        "content": "<p>here they are with type annotations:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">arrayP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">elements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">sepBy</span><span class=\"w\"> </span><span class=\"nx\">valueP</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"nx\">commaC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">vals</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">vals</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"nx\">lbraceC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">wsP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">elements</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">wsP</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunit</span><span class=\"w\"> </span><span class=\"nx\">rbraceC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">vals</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Array</span><span class=\"w\"> </span><span class=\"nx\">vals</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n\n<span class=\"nv\">valueP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">RawStr</span><span class=\"w\"> </span><span class=\"nx\">Value</span><span class=\"w\"></span>\n<span class=\"nv\">valueP</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">nullP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">trueP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">falseP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">strlitP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">numberP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">lazy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">arrayP</span><span class=\"p\">)]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302939841,
        "sender_full_name": "Travis",
        "timestamp": 1665179525
    },
    {
        "content": "<p>i can post the whole file somewhere if you want too</p>",
        "id": 302940084,
        "sender_full_name": "Travis",
        "timestamp": 1665179658
    },
    {
        "content": "<p>Hm. Yeah this might be a compiler bug, unless I'm misunderstanding the program. Could you please file a bug report with a link to the whole file? If possible, we'd appreciate minimizing the file to a minimal reproduction of the error. I can take a look at this early next week.</p>",
        "id": 302940321,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665179820
    },
    {
        "content": "<p>yes certainly will do. i'll work on whittling down to a smaller repro a bit later. will post back here then.</p>",
        "id": 302940467,
        "sender_full_name": "Travis",
        "timestamp": 1665179906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> here is the issue. <a href=\"https://github.com/roc-lang/roc/issues/4246\">https://github.com/roc-lang/roc/issues/4246</a> let me know if the repro looks ok.</p>",
        "id": 302976446,
        "sender_full_name": "Travis",
        "timestamp": 1665214256
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 303028936,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665240659
    },
    {
        "content": "<p>In that repro, though, the error makes sense - because you can't build <code>a</code> without having to inline it an infinite number of times</p>",
        "id": 303028985,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665240690
    },
    {
        "content": "<p>which makes me think, maybe the way to solve your problem is like this?</p>",
        "id": 303029009,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665240703
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>arrayP : Parser RawStr Value\narrayP =\n    lazy (\\{} -&gt;\n    elements = sepBy valueP (codeunit commaC)\n    const (\\_ -&gt; \\_ -&gt; \\vals -&gt; \\_ -&gt; \\_ -&gt; vals)\n    |&gt; apply (codeunit lbraceC)\n    |&gt; apply wsP\n    |&gt; apply elements\n    |&gt; apply wsP\n    |&gt; apply (codeunit rbraceC)\n    |&gt; map (\\vals -&gt; Array vals)\n    )\n\n\nvalueP : Parser RawStr Value\nvalueP = oneOf [nullP, trueP, falseP, strlitP, numberP, arrayP]\n</code></pre></div>",
        "id": 303029129,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665240742
    },
    {
        "content": "<p>(sorry for the terrible formatting, can't tab-indent in Zulip</p>",
        "id": 303029158,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665240759
    },
    {
        "content": "<p>Or, conversely,</p>\n<div class=\"codehilite\"><pre><span></span><code>arrayP : Parser RawStr Value\narrayP =\n    elements = sepBy valueP (codeunit commaC)\n    const (\\_ -&gt; \\_ -&gt; \\vals -&gt; \\_ -&gt; \\_ -&gt; vals)\n    |&gt; apply (codeunit lbraceC)\n    |&gt; apply wsP\n    |&gt; apply elements\n    |&gt; apply wsP\n    |&gt; apply (codeunit rbraceC)\n    |&gt; map (\\vals -&gt; Array vals)\n\n\nvalueP : Parser RawStr Value\nvalueP = lazy (\\{} -&gt; oneOf [nullP, trueP, falseP, strlitP, numberP, arrayP])\n</code></pre></div>",
        "id": 303029191,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665240780
    },
    {
        "content": "<p>So that the whole parser is forced to be lazy, rather a subpart</p>",
        "id": 303029254,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665240817
    },
    {
        "content": "<p>oh nevermind</p>",
        "id": 303030013,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665241147
    },
    {
        "content": "<p>The parser is a function so it's fine</p>",
        "id": 303030035,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665241160
    },
    {
        "content": "<p>okay, it's a compiler bug. I'll make a PR</p>",
        "id": 303030672,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665241452
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/4257\">https://github.com/roc-lang/roc/pull/4257</a> should fix it</p>",
        "id": 303031611,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665241919
    },
    {
        "content": "<p>Wow very cool. Thanks for the quick response.  Hope this gets merged so i can try it out.</p>",
        "id": 303071552,
        "sender_full_name": "Travis",
        "timestamp": 1665270336
    },
    {
        "content": "<p>i don't have a proper dev setup yet and relying on download assets.  no rust / cargo install here.</p>",
        "id": 303071613,
        "sender_full_name": "Travis",
        "timestamp": 1665270378
    },
    {
        "content": "<p>just merged it!</p>",
        "id": 303072550,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665271273
    },
    {
        "content": "<p>so it'll be included in tonight's nightly release</p>",
        "id": 303072561,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665271284
    },
    {
        "content": "<p>looks like the new character literals are <code>U32</code>s not <code>U8</code>s.  is this correct?</p>",
        "id": 303148914,
        "sender_full_name": "Travis",
        "timestamp": 1665331792
    },
    {
        "content": "<p>i tried yesterday's nightly and seeing this new error</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">── TYPE MISMATCH ────────────────────────────── examples/parser/Parser/Str.roc ─</span>\n\n<span class=\"go\">This 2nd argument to map has an unexpected type:</span>\n\n<span class=\"go\">181│&gt;          |&gt; List.map \\digitNum -&gt;</span>\n<span class=\"go\">182│&gt;              digitNum</span>\n<span class=\"go\">183│&gt;              |&gt; codeunit</span>\n<span class=\"go\">184│&gt;              |&gt; map (\\_ -&gt; digitNum)</span>\n\n<span class=\"go\">The argument is an anonymous function of type:</span>\n\n<span class=\"go\">    U8 -&gt; Parser RawStr U8 ?</span>\n\n<span class=\"go\">But map needs its 2nd argument to be:</span>\n\n<span class=\"go\">    Int Unsigned32 -&gt; Parser RawStr U8 ?</span>\n\n<span class=\"go\">────────────────────────────────────────────────────────────────────────────────</span>\n</code></pre></div>",
        "id": 303148927,
        "sender_full_name": "Travis",
        "timestamp": 1665331802
    },
    {
        "content": "<p>oops nevermind. the above uses Oct 7 release, not Oct 8</p>",
        "id": 303149114,
        "sender_full_name": "Travis",
        "timestamp": 1665331918
    },
    {
        "content": "<p>and the error is gone in Oct 8 release</p>",
        "id": 303149634,
        "sender_full_name": "Travis",
        "timestamp": 1665332244
    },
    {
        "content": "<p>character literals working now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"rock on\" class=\"emoji emoji-1f918\" role=\"img\" title=\"rock on\">:rock_on:</span></p>",
        "id": 303149838,
        "sender_full_name": "Travis",
        "timestamp": 1665332370
    },
    {
        "content": "<p>seems that the 2022-10-10-07ceabc build has problems. it no longer catches the cyclic dependency when i don't do the lazy calls.</p>",
        "id": 303305683,
        "sender_full_name": "Travis",
        "timestamp": 1665425472
    },
    {
        "content": "<p>and it crashes trying to build if i do the lazy calls</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc build examples/parser/parse-json.roc\n\n<span class=\"go\">thread '&lt;unknown&gt;' has overflowed its stack</span>\n<span class=\"go\">fatal runtime error: stack overflow</span>\n<span class=\"go\">Aborted</span>\n</code></pre></div>",
        "id": 303305869,
        "sender_full_name": "Travis",
        "timestamp": 1665425538
    },
    {
        "content": "<p>I think your implementation was right all along because parsers are functions, so you may not strictly need <code>lazy</code> in your use case</p>",
        "id": 303305932,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665425570
    },
    {
        "content": "<p>well.. that's no good</p>",
        "id": 303305961,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665425579
    },
    {
        "content": "<p>does it build if you do it without lazy</p>",
        "id": 303306148,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665425653
    },
    {
        "content": "<p>yep. it also crashes with the same message on build without the lazy calls</p>",
        "id": 303306219,
        "sender_full_name": "Travis",
        "timestamp": 1665425692
    },
    {
        "content": "<p>Do you have lldb or gdb on your machine?</p>",
        "id": 303306481,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665425821
    },
    {
        "content": "<p>just gdb atm. shall i try for a backtrace? last time i tried it was garbled.</p>",
        "id": 303306601,
        "sender_full_name": "Travis",
        "timestamp": 1665425880
    },
    {
        "content": "<p>Yes please</p>",
        "id": 303306670,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665425895
    },
    {
        "content": "<p>this is an error in the compiler so it should be better I think</p>",
        "id": 303306695,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665425907
    },
    {
        "content": "<p>yes its better now. here is the first page</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>gdb -args roc build examples/parser/parse-json.roc\n<span class=\"go\">GNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git</span>\n<span class=\"go\">Copyright (C) 2021 Free Software Foundation, Inc.</span>\n<span class=\"go\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span>\n<span class=\"go\">This is free software: you are free to change and redistribute it.</span>\n<span class=\"go\">There is NO WARRANTY, to the extent permitted by law.</span>\n<span class=\"go\">Type \"show copying\" and \"show warranty\" for details.</span>\n<span class=\"go\">This GDB was configured as \"x86_64-linux-gnu\".</span>\n<span class=\"go\">Type \"show configuration\" for configuration details.</span>\n<span class=\"go\">For bug reporting instructions, please see:</span>\n<span class=\"go\">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span>\n<span class=\"go\">Find the GDB manual and other documentation resources online at:</span>\n<span class=\"go\">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span>\n\n<span class=\"go\">For help, type \"help\".</span>\n<span class=\"go\">Type \"apropos word\" to search for commands related to \"word\"...</span>\n<span class=\"go\">Reading symbols from roc...</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">run</span>\n<span class=\"go\">Starting program: /home/travis/.local/bin/roc build examples/parser/parse-json.roc</span>\n<span class=\"go\">[Thread debugging using libthread_db enabled]</span>\n<span class=\"go\">Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".</span>\n<span class=\"go\">[New Thread 0x7ffff75ff700 (LWP 163044)]</span>\n<span class=\"go\">[New Thread 0x7fffeffff700 (LWP 163045)]</span>\n<span class=\"go\">[New Thread 0x7ffff6dfe700 (LWP 163046)]</span>\n<span class=\"go\">[New Thread 0x7ffff65fd700 (LWP 163047)]</span>\n<span class=\"go\">[New Thread 0x7ffff5dfc700 (LWP 163048)]</span>\n<span class=\"go\">[New Thread 0x7ffff55fb700 (LWP 163049)]</span>\n<span class=\"go\">[New Thread 0x7ffff4dfa700 (LWP 163050)]</span>\n<span class=\"go\">[New Thread 0x7fffef7fe700 (LWP 163051)]</span>\n<span class=\"go\">[New Thread 0x7fffeeffd700 (LWP 163052)]</span>\n<span class=\"go\">[New Thread 0x7fffee7fc700 (LWP 163053)]</span>\n<span class=\"go\">[New Thread 0x7fffedffb700 (LWP 163054)]</span>\n\n<span class=\"go\">Thread 5 \"roc\" received signal SIGSEGV, Segmentation fault.</span>\n<span class=\"go\">[Switching to Thread 0x7ffff65fd700 (LWP 163047)]</span>\n<span class=\"go\">0x00005555562eee34 in roc_mono::layout::layout_from_flat_type ()</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">bt</span>\n<span class=\"gp\">#</span><span class=\"m\">0</span>  0x00005555562eee34 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">1</span>  0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">2</span>  0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">3</span>  0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">4</span>  0x000055555630381f <span class=\"k\">in</span> roc_mono::layout::list_layout_from_elem <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">5</span>  0x00005555562f3ea4 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">6</span>  0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">7</span>  0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">8</span>  0x00005555562f2e41 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">9</span>  0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">10</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">11</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">12</span> 0x000055555630381f <span class=\"k\">in</span> roc_mono::layout::list_layout_from_elem <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">13</span> 0x00005555562f3ea4 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">14</span> 0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">15</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">16</span> 0x00005555562f2e41 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">17</span> 0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">18</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">19</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">20</span> 0x000055555630381f <span class=\"k\">in</span> roc_mono::layout::list_layout_from_elem <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">21</span> 0x00005555562f3ea4 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">22</span> 0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">23</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">24</span> 0x00005555562f2e41 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">25</span> 0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">26</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">27</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">28</span> 0x000055555630381f <span class=\"k\">in</span> roc_mono::layout::list_layout_from_elem <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">29</span> 0x00005555562f3ea4 <span class=\"k\">in</span> roc_mono::layout::layout_from_flat_type <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">30</span> 0x00005555562ed57f <span class=\"k\">in</span> roc_mono::layout::Layout::new_help <span class=\"o\">()</span>\n<span class=\"gp\">#</span><span class=\"m\">31</span> 0x00005555562edeca <span class=\"k\">in</span> roc_mono::layout::Layout::from_var <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 303306827,
        "sender_full_name": "Travis",
        "timestamp": 1665425996
    },
    {
        "content": "<p>looks like similar repeated many times</p>",
        "id": 303306977,
        "sender_full_name": "Travis",
        "timestamp": 1665426078
    },
    {
        "content": "<p>yeah we're very familiar with this one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> happens a lot these days</p>",
        "id": 303307019,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665426118
    },
    {
        "content": "<p>and <code>roc check</code> passes?</p>",
        "id": 303307043,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665426124
    },
    {
        "content": "<p>yeah roc check passed on both (lazy and no lazy). there is one warning but thats just unused warning</p>",
        "id": 303307204,
        "sender_full_name": "Travis",
        "timestamp": 1665426213
    },
    {
        "content": "<p>I'm really sorry you're blocked again right after the other fix <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 303307420,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665426314
    },
    {
        "content": "<p>Would you mind trying to whittle down a smaller reproduction and filing a bug report again?</p>",
        "id": 303307470,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665426342
    },
    {
        "content": "<p>In the meantime, you could try removing all type annotations from your program - that might actually fix the compiler bug</p>",
        "id": 303307510,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665426363
    },
    {
        "content": "<p>sure. no problem. understood that lots of development going on, young lang etc.</p>",
        "id": 303307717,
        "sender_full_name": "Travis",
        "timestamp": 1665426464
    },
    {
        "content": "<p>sure i'll reopen the last issue. should work on repro pretty soon</p>",
        "id": 303307849,
        "sender_full_name": "Travis",
        "timestamp": 1665426526
    },
    {
        "content": "<p>will let you know if removing type annotations works</p>",
        "id": 303307890,
        "sender_full_name": "Travis",
        "timestamp": 1665426545
    },
    {
        "content": "<p>thanks!</p>",
        "id": 303307957,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665426578
    },
    {
        "content": "<p>looks like the end of that trace is different if you want to see it. i forgot to let it run out before.</p>",
        "id": 303308002,
        "sender_full_name": "Travis",
        "timestamp": 1665426596
    },
    {
        "content": "<p>It's okay, the trace you showed tells us enough about what the problem is. I'll dig deeper into it with a debug build of the compiler which provides more stack trace info</p>",
        "id": 303308486,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665426783
    },
    {
        "content": "<p>ok. i'm seeing a different error after removing the annotations</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\"># </span>with lazy call\n<span class=\"gp\">$ </span>roc build examples/parser/parse-json.roc\n<span class=\"go\">thread '&lt;unnamed&gt;' panicked at 'not yet implemented: recursive closures', crates/compiler/mono/src/layout.rs:1524:61</span>\n<span class=\"go\">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span>\n</code></pre></div>",
        "id": 303309065,
        "sender_full_name": "Travis",
        "timestamp": 1665427052
    },
    {
        "content": "<p>okay, that is a lot more promising</p>",
        "id": 303309206,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665427107
    },
    {
        "content": "<p>without lazy calls i see the same error message</p>",
        "id": 303309207,
        "sender_full_name": "Travis",
        "timestamp": 1665427107
    },
    {
        "content": "<p>*as before</p>",
        "id": 303309242,
        "sender_full_name": "Travis",
        "timestamp": 1665427119
    },
    {
        "content": "<p>this one</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\"># </span>no lazy calls and no annotations\n<span class=\"gp\">$ </span>roc build examples/parser/parse-json.roc\n\n<span class=\"go\">thread '&lt;unknown&gt;' has overflowed its stack</span>\n<span class=\"go\">fatal runtime error: stack overflow</span>\n<span class=\"go\">Aborted</span>\n</code></pre></div>",
        "id": 303309293,
        "sender_full_name": "Travis",
        "timestamp": 1665427152
    },
    {
        "content": "<p>sorry that sentence was ambiguous</p>",
        "id": 303309380,
        "sender_full_name": "Travis",
        "timestamp": 1665427197
    },
    {
        "content": "<p>all good</p>",
        "id": 303309560,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665427275
    },
    {
        "content": "<p>shoot i can't reopen it. will make a new one w/ reference</p>",
        "id": 303318594,
        "sender_full_name": "Travis",
        "timestamp": 1665431974
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/4288\">https://github.com/roc-lang/roc/issues/4288</a></p>",
        "id": 303320427,
        "sender_full_name": "Travis",
        "timestamp": 1665432954
    },
    {
        "content": "<p>let me know if the repro needs any changes</p>",
        "id": 303320506,
        "sender_full_name": "Travis",
        "timestamp": 1665432984
    },
    {
        "content": "<p>wasn't sure wether to include the last two which have annotations</p>",
        "id": 303320635,
        "sender_full_name": "Travis",
        "timestamp": 1665433080
    },
    {
        "content": "<p>is it known or expected that '\\b' and '\\f' aren't legal char literals?</p>",
        "id": 303322297,
        "sender_full_name": "Travis",
        "timestamp": 1665433944
    },
    {
        "content": "<p>I forget - what do those do?</p>",
        "id": 303326107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665436292
    },
    {
        "content": "<p>backspace and form feed</p>",
        "id": 303326655,
        "sender_full_name": "Travis",
        "timestamp": 1665436640
    },
    {
        "content": "<p>i forget if they're legal in json but happened to have them being escaped for some reason</p>",
        "id": 303326712,
        "sender_full_name": "Travis",
        "timestamp": 1665436678
    },
    {
        "content": "<p>oh yeah if I remember right, I think I evaluated those and concluded they probably weren't a good idea to have first class support for</p>",
        "id": 303327408,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665437045
    },
    {
        "content": "<p>sounds good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> . just checking to make sure it was intended.</p>",
        "id": 303327564,
        "sender_full_name": "Travis",
        "timestamp": 1665437163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"551275\">Travis</span> <a href=\"#narrow/stream/231634-beginners/topic/json.20parser/near/303320427\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/roc-lang/roc/issues/4288\">https://github.com/roc-lang/roc/issues/4288</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> did you see this?</p>",
        "id": 303353444,
        "sender_full_name": "Travis",
        "timestamp": 1665457618
    },
    {
        "content": "<p>Yes - thanks for the report. I don't know when I'll get to it but it's definitely on my radar!</p>",
        "id": 303354013,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665458266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"551275\">@Travis</span> do you have the current code for your json parser posted anywhere?</p>",
        "id": 303864967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665675490
    },
    {
        "content": "<p>not yet. i'll create a new gist incase the old one is of use for #4233.</p>",
        "id": 303867342,
        "sender_full_name": "Travis",
        "timestamp": 1665676164
    },
    {
        "content": "<p>thanks! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 303867377,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665676173
    },
    {
        "content": "<p>here you go. <a href=\"https://gist.github.com/travisstaloch/acae64ec4d8346597f1aaecfe8c401e4\">https://gist.github.com/travisstaloch/acae64ec4d8346597f1aaecfe8c401e4</a></p>",
        "id": 303867408,
        "sender_full_name": "Travis",
        "timestamp": 1665676182
    },
    {
        "content": "<p>no problem. as is, its using <code>lazy</code> in one place, the main <code>valueP</code> parser</p>",
        "id": 303867596,
        "sender_full_name": "Travis",
        "timestamp": 1665676235
    },
    {
        "content": "<p>oh yeah i forgot i also removed all the type annotations trying to repro.  i think there is a different error if they are added back.</p>",
        "id": 303879628,
        "sender_full_name": "Travis",
        "timestamp": 1665679513
    }
]