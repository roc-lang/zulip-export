[
    {
        "content": "<p>If you read an element from a List or Dict, is Roc's ref-counting able to avoid having to copy the data?</p>\n<div class=\"codehilite\"><pre><span></span><code>doSomething = \\list -&gt;\n    result = List.get list 0\n    list2 =\n        when result is\n            Ok item -&gt; List.set list 0 {item &amp; value : 0}\n            _ -&gt; list\n    list2\n</code></pre></div>\n<p>will the above have to create a copy of <code>item</code> on get and on set, or will it all happen in-place?</p>",
        "id": 481355101,
        "sender_full_name": "Jared Cone",
        "timestamp": 1731085965
    },
    {
        "content": "<p>More or less same answer as the other thread. For recounted type (list, str, box, recursive tag), it will just take a reference. For the rest it will be a copy.</p>",
        "id": 481383116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731098342
    },
    {
        "content": "<p>As a note there is technically some room for improvement here if we analyze that some list data is guaranteed to be unmodified during a section of code. In that case we could take a raw reference to the data. This would mostly see gains in the gigantic record/tuple case. For other cases, the copy is cheap and it isn't even worth considering skipping it. We also already do this analysis for refcounted types to reduce the number of refcount increments and decrements.</p>",
        "id": 481383571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731098554
    }
]