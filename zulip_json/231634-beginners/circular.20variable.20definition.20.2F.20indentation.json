[
    {
        "content": "<p>Hi,<br>\nIs this an expected behaviors?</p>\n<ol>\n<li>With this <code>total</code> variable, I get the error of \"CIRCULAR DEFINITION\", the variables cannot conflict though.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>    total =\n        []\n        |&gt; List.walk { total: &quot;&quot; } \\{ total }, _ -&gt;\n            { total }\n</code></pre></div>\n<ol start=\"2\">\n<li>With the naming change, if after the <code>List.walk</code> I want to <code>|&gt; .total</code>, I can't find how the indent it. The compiler always think I'm still in the <code>List.walk</code> callback.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>    res =\n        []\n        |&gt; List.walk { total: &quot;&quot; } \\{ total }, _ -&gt;\n            { total }\n        |&gt; .total\n</code></pre></div>",
        "id": 300684370,
        "sender_full_name": "Ghislain",
        "timestamp": 1664134354
    },
    {
        "content": "<p>Regarding #2, what happens if you put parentheses around your function?</p>",
        "id": 300684770,
        "sender_full_name": "jan kili",
        "timestamp": 1664134731
    },
    {
        "content": "<p>Parentheses often fix scope/indentation issues for me</p>",
        "id": 300684811,
        "sender_full_name": "jan kili",
        "timestamp": 1664134778
    },
    {
        "content": "<p>For the first, that error happens because Roc does not allow variable shadowing, and <code>total</code> is shadowed in the inner lambda. That error message should be made better though.</p>",
        "id": 300685032,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664134958
    },
    {
        "content": "<p>In my mind, the variable did not exist before the assignement (<code>total =</code>)</p>",
        "id": 300685152,
        "sender_full_name": "Ghislain",
        "timestamp": 1664135085
    },
    {
        "content": "<p>I didn't see it as shadowing</p>",
        "id": 300685188,
        "sender_full_name": "Ghislain",
        "timestamp": 1664135136
    },
    {
        "content": "<p>it is this way because “total” could be defined as recursive, that is, you could do something like “total = \\_ -&gt; total {}”</p>",
        "id": 300685699,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664135633
    }
]