[
    {
        "content": "<p>Tags look interesting, but they also look mistake-prone. What happens if I have a tag union type, and then add a new tag to that union? Does the code just... compile normally? Is there no way for me to make it all fail?</p>",
        "id": 452461864,
        "sender_full_name": "Katie And",
        "timestamp": 1721348217
    },
    {
        "content": "<p>I think the short answer is that they aren't error-prone in the way it sounds like you're worried they are, but of course it does depend on the specific situation <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 452462516,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348496
    },
    {
        "content": "<p>so for example, let's say I have a <code>when</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">    </span><span class=\"no\">Bar</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># ...</span>\n<span class=\"w\">    </span><span class=\"no\">Baz</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"c1\"># ...</span>\n</code></pre></div>",
        "id": 452462637,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348535
    },
    {
        "content": "<p>if there's any code path where <code>foo</code> could end up being <code>Stuff</code>, I'll get a compile-time error</p>",
        "id": 452462687,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348566
    },
    {
        "content": "<p>saying that this <code>when</code> needs a <code>Stuff</code> branch, because there are code paths where it might have that value</p>",
        "id": 452462723,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348583
    },
    {
        "content": "<p>however, if you do this instead...</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">    </span><span class=\"no\">Bar</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># ...</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"c1\"># ...</span>\n</code></pre></div>",
        "id": 452462765,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348607
    },
    {
        "content": "<p>then now there's a catch-all branch, which means that if you give <code>foo</code> a new possible tag, then it will just go to the catch-all branch</p>",
        "id": 452462853,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348638
    },
    {
        "content": "<p>so by default the recommendation is to list each option explicitly, and only to use <code>_ -&gt;</code> catch-all branches if you actually want any new additions to the tag union to be handled in that way</p>",
        "id": 452462973,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348689
    },
    {
        "content": "<p>a thing that makes this easier is that you can match multiple tags at once with <code>|</code> , e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">    </span><span class=\"no\">Bar</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># ...</span>\n<span class=\"w\">    </span><span class=\"no\">Baz</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Stuff</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Other</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"c1\"># ...</span>\n</code></pre></div>",
        "id": 452463087,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348735
    },
    {
        "content": "<p>does that clarify?</p>",
        "id": 452463187,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721348773
    },
    {
        "content": "<p>ohh</p>",
        "id": 452463679,
        "sender_full_name": "Katie And",
        "timestamp": 1721349167
    },
    {
        "content": "<p>that's... interesting</p>",
        "id": 452463681,
        "sender_full_name": "Katie And",
        "timestamp": 1721349171
    },
    {
        "content": "<p>i'm not sure i like it, but it's cool</p>",
        "id": 452463686,
        "sender_full_name": "Katie And",
        "timestamp": 1721349178
    },
    {
        "content": "<p>i could live with this i think</p>",
        "id": 452463697,
        "sender_full_name": "Katie And",
        "timestamp": 1721349186
    },
    {
        "content": "<p>Definitely mess around with it. It is very similar to the powerful enums in rust.</p>",
        "id": 452464694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721349965
    },
    {
        "content": "<p>Is there a way to <em>limit</em> what a variable can be?</p>",
        "id": 452465438,
        "sender_full_name": "Katie And",
        "timestamp": 1721350609
    },
    {
        "content": "<p>So that I can never under any circumstance <code>when</code> it with a tag i don't want it to ever be?</p>",
        "id": 452465471,
        "sender_full_name": "Katie And",
        "timestamp": 1721350636
    },
    {
        "content": "<p>For sure</p>",
        "id": 452465929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721350971
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">MyTag</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"p\">]</span>\n\n<span class=\"nv\">someFunc</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">MyTag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"nv\">someFunc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">thisWillOnlyBeABorC</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">thisWillOnlyBeABorC</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"w\">        </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"w\">        </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"w\">        </span><span class=\"kt\">D</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">possible</span><span class=\"w\"> </span><span class=\"kr\">case</span>\n</code></pre></div>",
        "id": 452466006,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721351043
    },
    {
        "content": "<p>Things like that work just fine</p>",
        "id": 452466031,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721351048
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 452466040,
        "sender_full_name": "Katie And",
        "timestamp": 1721351058
    },
    {
        "content": "<p>Also, if you really need restrictions, opaque types exist as well, but they are not very common for tags.</p>",
        "id": 452466063,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721351079
    },
    {
        "content": "<p>Okay yeah, tags seem perfect for what I need to do</p>",
        "id": 452466648,
        "sender_full_name": "Katie And",
        "timestamp": 1721351595
    },
    {
        "content": "<p>Can't wait for this lang to be available in windows</p>",
        "id": 452466686,
        "sender_full_name": "Katie And",
        "timestamp": 1721351617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> is now a good time to bring up the idea of Windows nightlies again?</p>",
        "id": 452467855,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721352593
    },
    {
        "content": "<p>Well, the upgrade to basic-cli 0.13.0 includes the refactor-host changes, which will make it much easier to add <code>cfg</code>'s in the platform for Windows implementation of effects.</p>\n<p>For the actual linking, I still haven't been able get a minimal rust platform working -- even manually. For some reason when compiling a static-library using rust on Windows it doesn't include symbols which are needed. So when roc goes to link the host with the app we have to link additional libraries and I haven't found the right combination that makes it happy. I don't think this is necessarily a roc specific issue, but definitely needs someone motivated to investigate how to build a rust static library on windows and then link that to produce an executable. Should be really simple in theory, we have all the parts there, just haven't figured that final bit out. </p>\n<p>Zig hosts work no problems.</p>\n<p>Also, we have a critical bug in the Windows surgical linker (which is still the default), so you need to use <code>--linker=legacy</code> to avoid an instant segfault.</p>\n<p>Basically, we are 95% of the way there. 4% customising/testing the basic-cli effects for Windows, and 1% finding what libraries roc needs to link with to produce an executable.</p>",
        "id": 452468678,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721353263
    },
    {
        "content": "<p>If anyone feels motivated to explore this I have a minimal rust platform <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust\">https://github.com/lukewilliamboswell/roc-platform-template-rust</a></p>\n<p>You can test out linking manually by;</p>\n<ul>\n<li>build the host into a <code>host.lib</code> using <code>cargo build</code></li>\n<li>build an (unlinked) app using <code>roc build --no-link app.roc</code></li>\n<li>link the two parts using zig, i.e. <code>zig build-exe .\\example\\main.lib .\\target\\release\\host.lib -lc -lws2_32 -lkernel32 -ladvapi32 -lntdll -luserenv -lmsvcrt</code> plus some unkown combination of other libraries I think are needed</li>\n</ul>",
        "id": 452468912,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721353500
    },
    {
        "content": "<p>This was my last attempt using basic-ssg <a href=\"#narrow/stream/395097-compiler-development/topic/Windows.20basic-ssg/near/450349587\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Windows.20basic-ssg/near/450349587</a></p>",
        "id": 452468964,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721353542
    },
    {
        "content": "<p>uhh</p>",
        "id": 452470213,
        "sender_full_name": "Katie And",
        "timestamp": 1721354441
    },
    {
        "content": "<p>Yeah, this is a case where effect interpreter and passed in allocators would fix our issues</p>",
        "id": 452475122,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721358059
    },
    {
        "content": "<p>Cause our linking inverts some dependencies in a way that linkers don't like</p>",
        "id": 452475171,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721358095
    },
    {
        "content": "<p>Dynamic loading might also work around the issue</p>",
        "id": 452475253,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721358129
    },
    {
        "content": "<p>This thread has gone very far off topic but i feel like once roc becomes available on windows it'll become my favorite programming language</p>",
        "id": 452928524,
        "sender_full_name": "Katie And",
        "timestamp": 1721529996
    },
    {
        "content": "<p>Genuinely kinda can't wait for y'all to solve these issues</p>",
        "id": 452928545,
        "sender_full_name": "Katie And",
        "timestamp": 1721530012
    },
    {
        "content": "<p>I'll probably be following the development of it!</p>",
        "id": 452928593,
        "sender_full_name": "Katie And",
        "timestamp": 1721530032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"737408\">Katie And</span> has marked this topic as resolved.</p>",
        "id": 452930258,
        "sender_full_name": "Notification Bot",
        "timestamp": 1721531050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20How.20do.20tags.20work.3F/near/452468678\">said</a>:</p>\n<blockquote>\n<p>Well, the upgrade to basic-cli 0.13.0 includes the refactor-host changes, which will make it much easier to add <code>cfg</code>'s in the platform for Windows implementation of effects.</p>\n<p>For the actual linking, I still haven't been able get a minimal rust platform working -- even manually. For some reason when compiling a static-library using rust on Windows it doesn't include symbols which are needed. So when roc goes to link the host with the app we have to link additional libraries and I haven't found the right combination that makes it happy. I don't think this is necessarily a roc specific issue, but definitely needs someone motivated to investigate how to build a rust static library on windows and then link that to produce an executable. Should be really simple in theory, we have all the parts there, just haven't figured that final bit out. </p>\n<p>Zig hosts work no problems.</p>\n<p>Also, we have a critical bug in the Windows surgical linker (which is still the default), so you need to use <code>--linker=legacy</code> to avoid an instant segfault.</p>\n<p>Basically, we are 95% of the way there. 4% customising/testing the basic-cli effects for Windows, and 1% finding what libraries roc needs to link with to produce an executable.</p>\n</blockquote>\n<p>This is extremely good news, if I'm correct in my understanding Windows support is just behind the corner?</p>",
        "id": 462804350,
        "sender_full_name": "Marko Vujanic",
        "timestamp": 1723820543
    },
    {
        "content": "<p>I think it's fair to say Windows is just around the corner. It already works fine for zig platforms, like roc-wasm4.</p>\n<p>We don't include Windows in the nightlies because it wouldn't be the experience we want people to have. However, if you're happy compiling roc from source, and working around a few sharp edges you could use Windows today.</p>\n<p>Ideally we need a roc contributor who uses Windows and is familiar with it to help iron out the edge cases. I've been coming back to it every month or so and trying to push it along a bit. I'm planning to have another crack at it after the build-host and llvm upgrade PR's land. Just juggling things and trying to help wherever I can.</p>",
        "id": 462943092,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723875769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"737408\">Katie And</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20How.20do.20tags.20work.3F/near/452928524\">said</a>:</p>\n<blockquote>\n<p>This thread has gone very far off topic but i feel like once roc becomes available on windows it'll become my favorite programming language</p>\n</blockquote>\n<p>you could try running the linux build of roc on windows subsystem for linux. It should be good enough for basic things like CLI and sockets.</p>",
        "id": 465405084,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724755210
    }
]