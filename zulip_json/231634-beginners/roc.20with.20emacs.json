[
    {
        "content": "<p>I was starting to code some roc code and I do feel confortable with emacs (doom emacs), so I was thinking that maybe there is someone that already fall in this problem and has some starting guide for me?</p>",
        "id": 313834587,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1670173756
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"529266\">@Vincenzo Palazzo (vincenzopalazzo)</span>, I'm not sure what you meant precisely. Are you looking for a roc emacs plugin?</p>",
        "id": 313909906,
        "sender_full_name": "Anton",
        "timestamp": 1670228630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/roc.20with.20emacs/near/313909906\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"529266\">Vincenzo Palazzo (vincenzopalazzo)</span>, I'm not sure what you meant precisely. Are you looking for a roc emacs plugin?</p>\n</blockquote>\n<p>Sorry if I was not clear, I would like configigure roc syntax hightlight with doom emacs but I was not able to find nothing arond</p>",
        "id": 314275309,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1670344804
    },
    {
        "content": "<p>I'm not aware of any syntax highlighting for emacs but perhaps <a href=\"https://github.com/benjamin-thomas/vscode-roc-lang-extension\">this solution for vscode</a> could be easily adapted.</p>",
        "id": 314279233,
        "sender_full_name": "Anton",
        "timestamp": 1670345919
    },
    {
        "content": "<p>An extra note, coffee script and elixir syntax highlighting work ok (and I assume exists for emacs). So you can try those and see if it works for you.</p>",
        "id": 314280595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670346242
    },
    {
        "content": "<p>Now we have <a href=\"https://github.com/ayazhafiz/roc/blob/lang-srv/crates/lang_srv/README.md\">language server</a> and <a href=\"https://github.com/faldor20/tree-sitter-roc\">tree-sitter parser</a> for Roc, so the «roc-mode» for Emacs can be defined relatively easy. After <a href=\"https://emacs.stackexchange.com/questions/79633/how-to-use-tree-sitter-parser-for-syntax-highlighting/\">some problems with tree-sitter configuration</a> I got a mode with syntax highlighting and type inference (smart autocompletion is unfortunately don't supported by Roc language server yet):</p>\n<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"c1\">;;; Roc</span>\n\n<span class=\"p\">(</span><span class=\"nb\">define-derived-mode</span><span class=\"w\"> </span><span class=\"nv\">roc-mode</span><span class=\"w\"> </span><span class=\"nv\">fundamental-mode</span><span class=\"w\"> </span><span class=\"s\">\"Roc\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">add-to-list</span><span class=\"w\"> </span><span class=\"ss\">'auto-mode-alist</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">\"\\\\.roc\\\\'\"</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"nv\">roc-mode</span><span class=\"p\">))</span>\n<span class=\"c1\">;; LSP</span>\n<span class=\"p\">(</span><span class=\"nb\">require</span><span class=\"w\"> </span><span class=\"ss\">'lsp</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">with-eval-after-load</span><span class=\"w\"> </span><span class=\"ss\">'lsp-mode</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">add-to-list</span><span class=\"w\"> </span><span class=\"ss\">'lsp-language-id-configuration</span>\n<span class=\"w\">    </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">roc-mode</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"s\">\"roc\"</span><span class=\"p\">))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">lsp-register-client</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">make-lsp-client</span><span class=\"w\"> </span><span class=\"nb\">:new-connection</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lsp-stdio-connection</span><span class=\"w\"> </span><span class=\"s\">\"roc_ls\"</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"nb\">:activation-fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lsp-activate-on</span><span class=\"w\"> </span><span class=\"s\">\"roc\"</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"nb\">:server-id</span><span class=\"w\"> </span><span class=\"ss\">'theme-check</span><span class=\"p\">)))</span>\n<span class=\"c1\">;; tree-sitter</span>\n<span class=\"p\">(</span><span class=\"nb\">require</span><span class=\"w\"> </span><span class=\"ss\">'treesit</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nb\">defun</span><span class=\"w\"> </span><span class=\"nv\">roc-mode-setup</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">interactive</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">defvar</span><span class=\"w\"> </span><span class=\"nv\">roc-font-lock-rules</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">treesit-font-lock-rules</span>\n<span class=\"w\">     </span><span class=\"nb\">:language</span><span class=\"w\"> </span><span class=\"ss\">'roc</span>\n<span class=\"w\">     </span><span class=\"nb\">:feature</span><span class=\"w\"> </span><span class=\"ss\">'string</span>\n<span class=\"w\">     </span><span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">@font-lock-string-face</span><span class=\"p\">)</span>\n\n<span class=\"w\">     </span><span class=\"nb\">:language</span><span class=\"w\"> </span><span class=\"ss\">'roc</span>\n<span class=\"w\">     </span><span class=\"nb\">:feature</span><span class=\"w\"> </span><span class=\"ss\">'comment</span>\n<span class=\"w\">     </span><span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">line_comment</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">@font-lock-comment-face</span><span class=\"p\">)</span>\n\n<span class=\"w\">     </span><span class=\"nb\">:language</span><span class=\"w\"> </span><span class=\"ss\">'roc</span>\n<span class=\"w\">     </span><span class=\"nb\">:feature</span><span class=\"w\"> </span><span class=\"ss\">'definition</span>\n<span class=\"w\">     </span><span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">value_declaration_left</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">identifier_pattern</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nv\">long_identifier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">@font-lock-constant-face</span><span class=\"p\">))))</span>\n\n<span class=\"w\">     </span><span class=\"nb\">:language</span><span class=\"w\"> </span><span class=\"ss\">'roc</span>\n<span class=\"w\">     </span><span class=\"nb\">:feature</span><span class=\"w\"> </span><span class=\"ss\">'function</span>\n<span class=\"w\">     </span><span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">application_expression</span>\n<span class=\"w\">        </span><span class=\"nv\">caller:</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">long_identifier_or_op</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nv\">long_identifier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">@font-lock-function-name-face</span><span class=\"p\">))))))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">setq-local</span><span class=\"w\"> </span><span class=\"nv\">treesit-font-lock-settings</span>\n<span class=\"w\">              </span><span class=\"nv\">roc-font-lock-rules</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\">setq-local</span><span class=\"w\"> </span><span class=\"nv\">treesit-font-lock-feature-list</span>\n<span class=\"w\">              </span><span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">string</span><span class=\"w\"> </span><span class=\"nv\">comment</span><span class=\"w\"> </span><span class=\"nv\">definition</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"nv\">variable</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">treesit-major-mode-setup</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">add-hook</span><span class=\"w\"> </span><span class=\"ss\">'roc-mode-hook</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">lambda</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"w\">                           </span><span class=\"p\">(</span><span class=\"nv\">roc-mode-setup</span><span class=\"p\">)</span>\n<span class=\"w\">                           </span><span class=\"p\">(</span><span class=\"nv\">lsp</span><span class=\"p\">)</span>\n<span class=\"w\">                           </span><span class=\"p\">(</span><span class=\"k\">setq</span><span class=\"w\"> </span><span class=\"nv\">treesit-font-lock-level</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 405215301,
        "sender_full_name": "Yuriy Al. Shirokov",
        "timestamp": 1701382051
    },
    {
        "content": "<p>Would you mind putting this into a gist or something shareable? I would love to add this to <a href=\"https://github.com/lukewilliamboswell/roc-awesome\">roc-awesome</a> for others to find.</p>",
        "id": 405218276,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701382970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> It's not a full-functional Emacs mode, just a proof of concept. I assume it will always be edited by other Emacs users. So I'm afraid gist will not be self-explanatory enough. I believe the link to my answer to myself on Emacs StackExchange with the links to documentation and some explanations would be better: <a href=\"https://emacs.stackexchange.com/a/79675/27177\">https://emacs.stackexchange.com/a/79675/27177</a><br>\nP.S. Thank you for roc-awesome!</p>",
        "id": 405318945,
        "sender_full_name": "Yuriy Al. Shirokov",
        "timestamp": 1701422205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"670275\">@Yuriy Al. Shirokov</span> </p>\n<p>I think <span class=\"user-mention\" data-user-id=\"663757\">@Tad Lispy</span> was working on something similar for doom emacs.<br>\n<a href=\"https://discourse.doomemacs.org/t/private-module-for-the-roc-programming-language-major-mode-lsp-support/4254\">https://discourse.doomemacs.org/t/private-module-for-the-roc-programming-language-major-mode-lsp-support/4254</a></p>\n<p>I don't know enough about emacs to say smart things about this. But I'm gonna try messing with the doom module once I've completed today's AoC :)</p>",
        "id": 405353898,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701434188
    },
    {
        "content": "<p>I got <code>roc-mode</code> installed using:</p>\n<div class=\"codehilite\"><pre><span></span><code>(use-package roc-mode :elpaca (roc-mode :host gitlab :repo &quot;tad-lispy/roc-mode&quot;))\n</code></pre></div>\n<p>and after I installed the treesitter grammar (by adding <code>(roc \"https://github.com/faldor20/tree-sitter-roc\")</code> to my <code>treesit-language-source-alist</code> and doing <code>M-x treesit-install-language-grammar</code>), I'm successfully in roc-mode and getting syntax highlighting.</p>\n<p>Should automatically tabbing to the right indent and re-indenting regions work?</p>",
        "id": 406405357,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1701904171
    },
    {
        "content": "<p>(Although I've used emacs for many years, I've never really learned the elisp APIs… it took me quite a bit of bludgeoning to find the right incantation to install <code>roc-mode</code> using <code>elpaca</code>)</p>",
        "id": 406405546,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1701904260
    },
    {
        "content": "<p>Oooh I didn't see that <span class=\"user-mention\" data-user-id=\"663757\">@Tad Lispy</span> put up a proper repo for roc-mode.<br>\nI was just using a file copy-pasted from their nixos repo into mine <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 406540476,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701955058
    },
    {
        "content": "<p>I also installed the tree sitter grammar in the same way from the same place as you.</p>\n<p>There are a few bugs for me as well. Expressions like this <code>(\"foo: \\(bar) baz\")</code> gets confused about escaping delimiters and mis-colors until EOF.</p>",
        "id": 406540974,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701955221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"669074\">@Asbjørn Olling</span> could you make an issue on the repo: <a href=\"https://github.com/faldor20/tree-sitter-roc\">https://github.com/faldor20/tree-sitter-roc</a> and I'll get it fixed :)</p>",
        "id": 406998296,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1702175342
    },
    {
        "content": "<p>Hi there! Been reading through Roc's documentation past couple of days and am ready to dive in the real thing. My google-fu is failing to find existing stuff, hence reaching out.</p>\n<p>Is there something in-progress for Emacs? I am also on NixOS, so any instructions there would also help. I see there is a flake.nix, will check it out</p>",
        "id": 407975476,
        "sender_full_name": "Payas",
        "timestamp": 1702565135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672355\">mkrieger1</span> has marked this topic as unresolved.</p>",
        "id": 407978358,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702565933
    },
    {
        "content": "<p><a href=\"#narrow/stream/231634-beginners/topic/roc.20with.20emacs/near/407975476\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/.E2.9C.94.20Most.20basic.20way.20to.20split.20code.20across.20files\">#beginners &gt; ✔ Most basic way to split code across files</a> by <span class=\"user-mention silent\" data-user-id=\"672355\">mkrieger1</span>.</p>",
        "id": 407978359,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702565934
    }
]