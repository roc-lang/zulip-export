[
    {
        "content": "<p>I'm curious. Is <code>@MyOpaqueType 42</code> a no-op? What about <code>List.map @MyOpaqueType items</code>?</p>",
        "id": 341941184,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678844424
    },
    {
        "content": "<p>Yes, it is the same as if the opaque type was unwrapped to the underlying type.</p>",
        "id": 341941505,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1678844694
    },
    {
        "content": "<p>yeah so all of these have no runtime overhead:</p>\n<ul>\n<li>wrapping something in an opaque type</li>\n<li>a single-tag tag union</li>\n<li>a record with a single field</li>\n</ul>",
        "id": 341950189,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678849176
    },
    {
        "content": "<p>they all get compiled down to the unwrapped version of the thing</p>",
        "id": 341950209,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678849184
    },
    {
        "content": "<p>and the unwrapping nests, so if you have an opaque wrapper around a record with one field and that one field is a single tag union with a payload of a string, all of that will be just a string at runtime</p>",
        "id": 341950354,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678849228
    },
    {
        "content": "<p>That’s awesome</p>",
        "id": 341951998,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678850541
    },
    {
        "content": "<p>also: records, tag union payloads, and tuples all have the exact same runtime representation</p>",
        "id": 341952311,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678850777
    },
    {
        "content": "<p>so there's no perf advantage to choosing a record, a single-tag union, or a tuple, as long as they all have the same number of fields</p>",
        "id": 341952337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678850811
    },
    {
        "content": "<p>Will <code>List.map</code> still walk through the list in my example above? Or can it somehow tell the function I passed is basically identity at runtime?</p>",
        "id": 341952342,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678850818
    },
    {
        "content": "<p>Wait, I thought Roc didn’t really have tuples. I’ve been using tags for that. Did I miss something?</p>",
        "id": 341952396,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678850875
    },
    {
        "content": "<p>they're WIP</p>",
        "id": 341952455,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678850899
    },
    {
        "content": "<p>like they parse but don't make it all the way through the pipeline yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 341952474,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678850916
    },
    {
        "content": "<p>Nice! Have somewhere that I can check them out?</p>",
        "id": 341952485,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678850929
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> may have a branch with more somewhere?</p>",
        "id": 341952486,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678850930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/231634-beginners/topic/Opaque.20types.20perf.20question/near/341952342\">said</a>:</p>\n<blockquote>\n<p>Will <code>List.map</code> still walk through the list in my example above? Or can it somehow tell the function I passed is basically identity at runtime?</p>\n</blockquote>\n<p>it will still walk through the list at the moment...I'd definitely like to optimize that away in the future if possible, but we don't have the optimization infrastructure in place to detect a pattern like that right now</p>",
        "id": 341952605,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678851008
    },
    {
        "content": "<p>That makes sense!</p>",
        "id": 341953405,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678851569
    },
    {
        "content": "<p>Great, thanks for the explanation</p>",
        "id": 341953414,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678851582
    },
    {
        "content": "<p>Love all this zero-overhead stuff</p>",
        "id": 341953479,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678851612
    },
    {
        "content": "<p>yeah part of the design goal with those is to remove the tension between choosing the nicest representation and choosing the fastest representation</p>",
        "id": 341953718,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678851843
    },
    {
        "content": "<p>ideally the contenders for nicest are all equally fast, so you only have that one axis to think about <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 341953763,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678851865
    },
    {
        "content": "<p>Tuples should work; please file bugs if they don't!</p>",
        "id": 341954613,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1678852536
    },
    {
        "content": "<p>Are there docs on tuples somewhere? I would love to try them out</p>",
        "id": 341954914,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678852764
    },
    {
        "content": "<p>Or even just a quick example of the syntax</p>",
        "id": 341954937,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678852784
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>f : I64 -&gt; (I64, I64)\nf = \\x -&gt; (x, x + 1)\n\nf 42\n</code></pre></div>",
        "id": 341992881,
        "sender_full_name": "Anton",
        "timestamp": 1678870610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/231634-beginners/topic/Opaque.20types.20perf.20question/near/341954613\">said</a>:</p>\n<blockquote>\n<p>Tuples should work; please file bugs if they don't!</p>\n</blockquote>\n<p>found one! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/5148\">https://github.com/roc-lang/roc/issues/5148</a></p>",
        "id": 342405319,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678994962
    }
]