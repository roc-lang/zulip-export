[
    {
        "content": "<p>hi I am a bit stuck in my  current  project  but for the next one, I will be definitely in need to create my  own platform. I want  to  start gather information  ahead  to  have  relatively  smooth start. Could you  point me to  simplest possible example  of  Roc platform  done  in \"C\" or \"C++\" ( I don't want to learn  Rust or Zig just  for  that )</p>",
        "id": 407318480,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702328243
    },
    {
        "content": "<p>host.c - Put this file into ./platform</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid *roc_alloc(size_t size)\n{\n    return malloc(size);\n}\n\nvoid *roc_realloc(void *ptr, size_t new_size, size_t old_size, unsigned int alignment)\n{\n    return realloc(ptr, new_size);\n}\n\nvoid roc_dealloc(void *ptr, unsigned int alignment)\n{\n    free(ptr);\n}\n\nvoid *roc_memset(void *str, int c, size_t n)\n{\n    return memset(str, c, n);\n}\n\n\nstruct RocStr { char *bytes; size_t len; size_t capacity; };\n\nint main()\n{\n    struct RocStr str1;\n    //roc__mainForHost_1_exposed_generic(&amp;str1);\n    roc__mainForHost_1_exposed(&amp;str1); // identical!\n\n    for (int i=0; i&lt;str1.len &amp;&amp; i&lt;30; ++i)\n        putchar(str1.bytes[i]);\n    printf(&quot;\\n&quot;);\n}\n</code></pre></div>\n<p>main.roc - Also put this file into ./platform</p>\n<div class=\"codehilite\"><pre><span></span><code>platform &quot;simple-c-test&quot;\n    requires {} { main : Str }\n    exposes []\n    packages {}\n    imports []\n    provides [mainForHost]\n\nmainForHost : Str\nmainForHost = main\n</code></pre></div>\n<p>Finally:  app.roc - put this file into ./</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;app&quot;\n    packages { pf: &quot;platform/main.roc&quot; }\n    imports []\n    provides [main] to pf\n\nzahl = 234\n\nmain : Str\nmain = &quot;simple c example (this string must be long cuz we dont have sso!) \\(Num.toStr zahl)&quot;\n</code></pre></div>\n<p>1) Compile host.c: <code>gcc -c platform/host.c </code><br>\n2) Compile app: <code>./roc build --no-link  --optimize app.roc</code><br>\n3) Link all: <code>gcc -o app app.o host.o</code></p>\n<p>Edit:<br>\n4) Run: <code>./app</code></p>",
        "id": 407321522,
        "sender_full_name": "Shaiden Spreitzer",
        "timestamp": 1702329502
    },
    {
        "content": "<p>this  statement , I don't get  it </p>\n<div class=\"codehilite\"><pre><span></span><code>main = &quot;simple c example (this string must be long cuz we dont have sso!) \\(Num.toStr zahl)&quot;\n</code></pre></div>",
        "id": 407332208,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702334488
    },
    {
        "content": "<p>is this possible  to  expose more  then just one  object from  Roc  platform  to  \"C\" ,  let say  provides [a1,a2,a3,a4] ??</p>",
        "id": 407333982,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702335475
    },
    {
        "content": "<p>Currently not: <a href=\"https://github.com/roc-lang/roc/issues/6115\">https://github.com/roc-lang/roc/issues/6115</a></p>",
        "id": 407334447,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1702335677
    },
    {
        "content": "<p>You can only expose one function currently, but it can return anything, even a record of functions (though this does add some complexity for platform development)</p>",
        "id": 407338927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702338100
    },
    {
        "content": "<p>if I want  to expose  some interface  from \"C\"  to  roc,  let say there is  some  array  with data  on C side  and I want  to  give Roc  API to access those data how to  do that ?</p>",
        "id": 422798162,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708601770
    },
    {
        "content": "<p>Let  say  I have  char [1000]  buffer on  \"C\"  side  and I want to read write  to it</p>",
        "id": 422798374,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708601874
    },
    {
        "content": "<p>I also  want  to  expose  to Roc  normal  C  functions  like  for  side effects how  to  do that</p>",
        "id": 422804832,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708604443
    },
    {
        "content": "<p>There are a few options here:</p>\n<ol>\n<li>Add effects to read and write a single byte in the buffer. That will give direct mutable access to the buffer in roc.</li>\n<li>Copy the bytes into a roc list (can avoid the copy by using a seamless slice), pass that into roc, update it as necessary, return a roc list, and finally copy the result into the c buffer.</li>\n<li>Avoid using a C type for the buffer. Use a roc list instead. Then just pass that into roc directly. Return a roc list and use that from that point forward.</li>\n</ol>",
        "id": 422870449,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708623858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> all great but what are exact syntax to pass anything from \"C\" to Roc</p>",
        "id": 422914417,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708640370
    },
    {
        "content": "<p>in context of  example provided by Shaiden Spreitzer</p>",
        "id": 422914517,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708640419
    },
    {
        "content": "<p>If you are fine with just passing everything and then getting a result back (as opposed to using an effect). It would mean changing <code>main</code>/<code>mainForHost</code> to be a function in Roc. Then <code>roc__mainForHost_1_exposed_generic</code> would be passed args in the order <code>(&amp;output, in1, in2, in3, ...)</code>. So the location to write the output then each of the inputs.</p>",
        "id": 422916118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708641220
    },
    {
        "content": "<p>ok but  how  exactly  syntax in \"C\"  and  .roc platform  file  looks like , what I should  type there ?</p>",
        "id": 423161683,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708773427
    },
    {
        "content": "<p>So I would personally advise using rust or zig, or maybe c++. Rust and zig have a well tested roc library for the types like RocStr. C++ has <a href=\"https://github.com/roc-lang/roc/pull/6230\">a newer library in a PR</a> that isn't really tested, but may work. Zig would probably give you the simplest experience close to C with significantly more support and examples.</p>\n<p>If you use C++ and the new library, I think that you can just import a fully working <code>RocStr</code>. Not 100% sure this code is correct, but something like this:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">\"roc_std.h\"</span>\n\n<span class=\"c1\">// Other roc_alloc and such functions from above</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Fill this as normal.</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">Roc</span><span class=\"o\">::</span><span class=\"n\">Str</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">Roc</span><span class=\"o\">::</span><span class=\"n\">Str</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">in</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// out.content() should give you a `char *` if the output data. With out.length() as the length.</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This assumes a <code>Str -&gt; Str</code> main function.<br>\nSo <code>mainForHost : Str -&gt; Str</code> and</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nf\">...</span>\n</code></pre></div>",
        "id": 423279117,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708882606
    },
    {
        "content": "<p>hi I will consider  switching  later one but when I do \"C\"  for now I can't link for some reason</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid *roc_alloc(size_t size)\n{\n    return malloc(size);\n}\n\nvoid *roc_realloc(void *ptr, size_t new_size, size_t old_size, unsigned int alignment)\n{\n    return realloc(ptr, new_size);\n}\n\nvoid roc_dealloc(void *ptr, unsigned int alignment)\n{\n    free(ptr);\n}\n\nvoid *roc_memset(void *str, int c, size_t n)\n{\n    return memset(str, c, n);\n}\n\n\nstruct RocStr { char *bytes; size_t len; size_t capacity; };\n\nint main()\n{\n    struct RocStr str1;\n    struct RocStr str2;\n\n    roc__mainForHost_1_exposed(&amp;str1, &amp;str2);\n\n    for (int i=0; i&lt;str1.len &amp;&amp; i&lt;300; ++i)\n        putchar(str1.bytes[i]);\n    printf(&quot;\\n&quot;);\n}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>platform &quot;simple-c-test&quot;\n    requires {} { main :  Str -&gt; Str }\n    exposes []\n    packages {}\n    imports []\n    provides [mainForHost]\n\nmainForHost : Str -&gt; Str\nmainForHost = main\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;app&quot;\n    packages { pf: &quot;platform/main.roc&quot; }\n    imports []\n    provides [main] to pf\n\n\nmain : Str  -&gt; Str\nmain = \\ lst -&gt;\n    &quot;simple c example (this string must be long cuz we dont have sso!)&quot;\n</code></pre></div>",
        "id": 423477624,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708979162
    },
    {
        "content": "<p>regardless if \"C\" struct is correct here or not ,  at least I expect it  to link,  btw. I want  to pass list  of  floats  as  input  not  Str, but  I want  to  make that work  first</p>",
        "id": 423478186,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708979407
    },
    {
        "content": "<p>Can't you expand on can't link?</p>",
        "id": 423478693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708979638
    },
    {
        "content": "<p>sorry  I messed up   my cmake  and warnings in custom   roc command  were treated as errors</p>",
        "id": 423480218,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708980227
    },
    {
        "content": "<p>so  it works  , what  is the syntax  when I want  to pass list of  floats ,  can I  just  pass</p>",
        "id": 423480334,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708980279
    },
    {
        "content": "<p>the code I provided is malfunctioning  I am  not  able to pass  return  value  from  function. For  some reason  I am getting  garbage in  str1,  but  when I pass it  as in example  provided  by   Shaiden Spreitzer  it  works</p>",
        "id": 423483811,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708981785
    },
    {
        "content": "<p>maybe  I will  check this  C++  library</p>",
        "id": 423483947,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708981844
    },
    {
        "content": "<p>Sure, this should be what is required to pass a seamless slice of floats to roc. This avoids an extra allocation and copy of the list of floats.</p>\n<p>This is not tested, I just typed it out and hopefully it is correct. Then on the roc side, just change the input to <code>List F32</code>.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">SLICE_BIT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">REFCOUNT_MAX</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Initialize this however you want with whatever length.</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocStr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocList</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">in</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">in</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// This is not actually the capacity but something special for seamless slices.</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">REFCOUNT_MAX</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">slice_bits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(((</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">rc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SLICE_BIT</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">in</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice_bits</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">roc__mainForHost_1_exposed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">in</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Everything else</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 423484186,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708981951
    },
    {
        "content": "<p>Is your planned output still a string?</p>",
        "id": 423484472,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708982083
    },
    {
        "content": "<p>I don't know  yet it may be  list of  float</p>",
        "id": 423503243,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708990217
    },
    {
        "content": "<p>I am still working  on my example  and although I initialized input with  something</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid *roc_alloc(size_t size)\n{\n    return malloc(size);\n}\n\nvoid *roc_realloc(void *ptr, size_t new_size, size_t old_size, unsigned int alignment)\n{\n    return realloc(ptr, new_size);\n}\n\nvoid roc_dealloc(void *ptr, unsigned int alignment)\n{\n    free(ptr);\n}\n\nvoid *roc_memset(void *str, int c, size_t n)\n{\n    return memset(str, c, n);\n}\n\n\nstruct RocStr { char *bytes; size_t len; size_t capacity; };\n\nint main()\n{\n    struct RocStr str1;\n    char *zink  =&quot;ankeanank&quot;;\n    struct RocStr  str2 = { zink, 10, 10 };\n\n    roc__mainForHost_1_exposed(&amp;str1, &amp;str2);\n\n    for (int i=0; i&lt;str1.len &amp;&amp; i&lt;300; ++i)\n        putchar(str1.bytes[i]);\n    printf(&quot;\\n&quot;);\n}\n\nplatform &quot;simple-c-test&quot;\n    requires {} { main :  Str -&gt; Str }\n    exposes []\n    packages {}\n    imports []\n    provides [mainForHost]\n\nmainForHost : Str -&gt; Str\nmainForHost = main\n\napp &quot;app&quot;\n    packages { pf: &quot;platform/main.roc&quot; }\n    imports []\n    provides [main] to pf\n\n\nmain : Str  -&gt; Str\nmain = \\ lst -&gt;\n    &quot;simple c example (this string must be long cuz we dont have sso!)&quot;\n</code></pre></div>\n<p>after  running  I am getting  garbage in str1<br>\nbasically  function is not returning  anything</p>\n<p>this is influence of str2 because as I mentioned if I create function which is just returning everything works just fine</p>",
        "id": 423504490,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708990941
    },
    {
        "content": "<p>This is not a valid initialization of a RocStr:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">zink</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"s\">\"ankeanank\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocStr</span><span class=\"w\">  </span><span class=\"n\">str2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">zink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>You could copy what I did above for a seamless slice, otherwise, RocStr is a more complex type. To initialize a big string, roc expects that the value is allocated on the heap and has the refcount stored on the heap before it. There is also an inline small string that is possible. This is why I don't really advise just hacking on things without a standard library.</p>\n<p>With this current form, I am pretty sure that roc is attempting to modify the refcount of <code>str2</code>. This would live before <code>*zink</code>. As such, it is probably mutating and messing up <code>str1</code> on the stack because that is what comes right before <code>*zink</code>. That is at least my guess as to why you get garbage.</p>",
        "id": 423505363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708991468
    },
    {
        "content": "<p>in your example you are using  stack  this is ok for  list  ?? float inputs[100];</p>",
        "id": 423505582,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708991619
    },
    {
        "content": "<p>In my example I make it a seamless slice with this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">REFCOUNT_MAX</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">slice_bits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(((</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">rc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SLICE_BIT</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">in</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice_bits</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If you do the same to your string, it should work.</p>",
        "id": 423506165,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708991962
    },
    {
        "content": "<p>in  your  example  I don't  see crash  but  I am not getting  result  in  out is empty</p>",
        "id": 423506625,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708992155
    },
    {
        "content": "<p>Hmm. I guess I'll need to take a deeper look.</p>",
        "id": 423506690,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708992187
    },
    {
        "content": "<p>it does not work either  </p>\n<div class=\"codehilite\"><pre><span></span><code>    char *zink  = (char*)malloc(10);\n    size_t rc = REFCOUNT_MAX;\n    size_t slice_bits = (((size_t)&amp;rc) &gt;&gt; 1) | SLICE_BIT;\n\n\n    struct RocStr  str2 = { zink, 10, slice_bits };\n</code></pre></div>",
        "id": 423507091,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708992407
    },
    {
        "content": "<p>Oh, this is a different bug. No idea what actually causes this. In the platform main, try this:</p>\n<div class=\"codehilite\"><pre><span></span><code>mainForHost : Str -&gt; Str\nmainForHost = \\x -&gt; main x\n</code></pre></div>",
        "id": 423507169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708992447
    },
    {
        "content": "<p>memory  violation on  both  my  and your  example</p>",
        "id": 423508137,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708992948
    },
    {
        "content": "<p>I will  try c++ library</p>",
        "id": 423508362,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708993063
    },
    {
        "content": "<p>Oh, minor typo:<br>\n<code>roc__mainForHost_1_exposed</code> should be <code>roc__mainForHost_1_exposed_generic</code>. I think that gets it working</p>",
        "id": 423508743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708993246
    },
    {
        "content": "<p>still crashing  , I tried c++ version  in meantime  and there is  problem  with name  mangling  for  example it can't  find \"roc__mainForHost_1_exposed_generic\"  ,  could you  point out  zig  example  but  zig is unfortunate because I have to  use C anyway  for  other  reasons so there will be mess</p>",
        "id": 423510984,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708994452
    },
    {
        "content": "<p>Hmm....I ran it just fine</p>",
        "id": 423511941,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708994961
    },
    {
        "content": "<p>could you  copy  paste  your  entire  thing  maybe  I messed up something <br>\nand linking  command  would  be nice to have too maybe I messed up something there</p>",
        "id": 423512101,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708995052
    },
    {
        "content": "<p>This works for me letting roc handle the linking: <a href=\"https://gist.github.com/bhansconnect/f5445239cd0e614514c9f49333e24e10\">https://gist.github.com/bhansconnect/f5445239cd0e614514c9f49333e24e10</a></p>",
        "id": 423513101,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708995713
    },
    {
        "content": "<p>Note, github doesn't let me put <code>/</code> in the names so have to put <code>platform-main.roc</code> as <code>platform/main.roc</code></p>",
        "id": 423513180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708995749
    },
    {
        "content": "<p>Then just <code>roc build app.roc</code></p>",
        "id": 423513202,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708995769
    },
    {
        "content": "<p>It also works to build manually by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>roc<span class=\"w\"> </span>build<span class=\"w\"> </span>--no-link<span class=\"w\"> </span>app.roc\ngcc<span class=\"w\"> </span>-o<span class=\"w\"> </span>app<span class=\"w\"> </span>platform/host.c<span class=\"w\"> </span>app.o\n</code></pre></div>",
        "id": 423513323,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708995844
    },
    {
        "content": "<p>thx I will look</p>",
        "id": 423516721,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708998306
    },
    {
        "content": "<p>ok I had  short  Str and for some reason it was crashing  entire thing  thx for  help</p>",
        "id": 423517430,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708998896
    },
    {
        "content": "<p>now I looked at your  example and everything works fine  short  and long</p>",
        "id": 423518638,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1708999801
    },
    {
        "content": "<p>Awesome</p>",
        "id": 423518764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708999895
    }
]