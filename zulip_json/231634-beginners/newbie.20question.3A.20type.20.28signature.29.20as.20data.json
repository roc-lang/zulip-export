[
    {
        "content": "<p>Hi, I have not really tried roc yet and I hope this is the right place for my question. <br>\nI wanted to ask if it is possible to ouput one variable's type as data <br>\n<code>TypeOf = / x -&gt; typeOfX</code><br>\n<code>TypeOf \"a string\" //output Str</code><br>\nI tried to look for the answer in vain. It feels that it would belong to the dark meta programming side of the force that roc does not want to mingle with; but I wanted to be sure of that.</p>",
        "id": 430300275,
        "sender_full_name": "fulverin",
        "timestamp": 1711737153
    },
    {
        "content": "<p>you can do a limited form of this with the Encode ability, but by design runtime type introspection isn't part of the language</p>",
        "id": 430302632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711738274
    },
    {
        "content": "<p>I'm curious if there's a specific program (or feature) you wanted to build using that though!</p>",
        "id": 430302688,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711738306
    },
    {
        "content": "<p>Thanks for the reply.<br>\nIt is just an idea of a toy project.<br>\nBuilding \"function-like\" nodes  and seeing if I can generate a graph that acts like a big function , or a sort of neural network.<br>\nLinking (more or <strong><em>less</em></strong> randomly) nodes by checking input/output types.<br>\nI could rewrite by hand an equivalent of the type signature into a struct for each function but I would rather not...<br>\nI am not sure if it is a smart idea or if it already exists or if that meta step could be accomplished only at compile time or if it has to be runtime.</p>",
        "id": 430304302,
        "sender_full_name": "fulverin",
        "timestamp": 1711739043
    }
]