[
    {
        "content": "<p>I'm working on <a href=\"https://adventofcode.com/2023/day/1\">day 1 of advent of code 2023</a> and it requires me to loop through a string, find the first and last numbers characters of the string, and combine them.</p>\n<p>So for example if I had the string \"x1dsdf425dk79dd\" the result should be 19. The code I have below works, but it's pretty hacky. I was wondering if there's a better way to loop through a string. I also don't like how I did <code>char = Result.withDefault (Str.fromUtf8 [byte]) \"\"</code> to get the character, but it didn't seem like there was any other way to do it.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>firstAndLastDigits = \\s -&gt;\n    {first, last} = Str.walkUtf8 s { first: \"\", last: \"\" } \\state, byte -&gt;\n        char = Result.withDefault (Str.fromUtf8 [byte]) \"\"\n        isNumber = Result.isOk(Str.toU8 char)\n        if Bool.and (Str.isEmpty state.first) isNumber then\n            { first: char, last: char }\n        else if isNumber then\n            { state &amp; last: char }\n        else\n            state\n    Str.concat first last |&gt; Str.toU64 |&gt; Result.withDefault 0\n</code></pre></div>",
        "id": 441984280,
        "sender_full_name": "John Konecny",
        "timestamp": 1717285537
    },
    {
        "content": "<p>For advent of code, I would generally advise using <code>List U8</code> as your default data type instead of string</p>",
        "id": 441984440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717285630
    },
    {
        "content": "<p>For anything pure ascii with lots of character based manipulation (like advent of code) that is generally better.</p>",
        "id": 441984465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717285658
    },
    {
        "content": "<p>Also, there is <a class=\"stream-topic\" data-stream-id=\"358903\" href=\"/#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201\">#Advent of Code &gt; 2023 Day 1</a> with discussion on this problem and multiple solutions</p>",
        "id": 441984478,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717285675
    },
    {
        "content": "<p>Also for advent of code, where you really don't care to handle errors, I prefer to write an unwrap helper function:</p>\n<div class=\"codehilite\"><pre><span></span><code>unwrap = \\res -&gt;\n  when res is\n    Ok v -&gt; v\n    Err e -&gt; crash e\n</code></pre></div>",
        "id": 441984693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717285812
    },
    {
        "content": "<p>Sweet, thanks for the quick reply! I'll take a look at that thread.</p>",
        "id": 441985386,
        "sender_full_name": "John Konecny",
        "timestamp": 1717286373
    },
    {
        "content": "<p>Oh, actually, unwrap should be:</p>\n<div class=\"codehilite\"><pre><span></span><code>unwrap = \\res -&gt;\n   when res is\n     Ok v -&gt; v\n     Err e -&gt; crash (Inspect.toStr e)\n</code></pre></div>",
        "id": 441985843,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717286699
    },
    {
        "content": "<p>I would encourage using AoC problems as a good way to learn proper error handling in Roc. It takes a bit of a mind shift, but once you wrap your head around it, it's really nice!</p>",
        "id": 441986410,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717287147
    },
    {
        "content": "<p>Thanks for all the help! This is much cleaner!</p>\n<p>I avoided crashing for the extra challenge.</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\nimport &quot;example1.txt&quot; as example1 : Str\nimport &quot;example2.txt&quot; as example2 : Str\nimport &quot;real.txt&quot; as real : Str\n\n\nisDigit = \\b -&gt;\n    b == &#39;0&#39; ||\n    b == &#39;1&#39; ||\n    b == &#39;2&#39; ||\n    b == &#39;3&#39; ||\n    b == &#39;4&#39; ||\n    b == &#39;5&#39; ||\n    b == &#39;6&#39; ||\n    b == &#39;7&#39; ||\n    b == &#39;8&#39; ||\n    b == &#39;9&#39;\n\nfirstAndLastDigits = \\s -&gt;\n    numbers = s\n        |&gt; Str.toUtf8\n        |&gt; List.keepIf isDigit\n        |&gt; List.keepOks (\\x -&gt; [x] |&gt; Str.fromUtf8)\n    first = List.first numbers\n    last = List.last numbers\n    when (first, last) is\n        (Ok f, Ok l) -&gt; Str.toU64 &quot;$(f)$(l)&quot;\n        _ -&gt;\n            dbg &quot;\\&quot;$(s)\\&quot; has no numbers???&quot;\n            Err NoNumberChars\n\nsolution1 = \\fileContents -&gt;\n    fileContents\n        |&gt; Str.split &quot;\\n&quot;\n        |&gt; List.keepOks firstAndLastDigits\n        |&gt; List.sum\n\nsolution2 = \\fileContents -&gt;\n    fileContents\n        |&gt; Str.split &quot;\\n&quot;\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;one&quot; &quot;one1one&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;two&quot; &quot;two2two&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;three&quot; &quot;three3three&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;four&quot; &quot;four4our&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;five&quot; &quot;five5five&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;six&quot; &quot;six6six&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;seven&quot; &quot;seven7seven&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;eight&quot; &quot;eight8eight&quot;)\n        |&gt; List.map (\\x -&gt; Str.replaceEach x &quot;nine&quot; &quot;nine9nine&quot;)\n        |&gt; List.keepOks firstAndLastDigits\n        |&gt; List.sum\n\nexpect solution1 example1 == 142\nexpect solution1 real == 54605\nexpect solution2 example2 == 281\nexpect solution2 real == 55429\n</code></pre></div>",
        "id": 441988327,
        "sender_full_name": "John Konecny",
        "timestamp": 1717288332
    },
    {
        "content": "<p>Optionally, your <code>isDigit</code> could be made a bit less error prone like so:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">isDigit</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">9</span><span class=\"nf\">'</span>\n</code></pre></div>",
        "id": 442012726,
        "sender_full_name": "Hristo",
        "timestamp": 1717309306
    },
    {
        "content": "<p>Quick plug for my package <a href=\"https://github.com/Hasnep/roc-ascii\">roc-ascii</a> which might be useful for AoC :)</p>",
        "id": 442024856,
        "sender_full_name": "Hannes",
        "timestamp": 1717317961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span></p>\n<p>What's the difference between Ascii and String in Roc?</p>",
        "id": 443289895,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1717763985
    },
    {
        "content": "<p>Glancing at the package, it is a string type that assumes fixed-width (ascii) characters, whereas Roc builtin strings are utf8 encoded, which is a variable-length encoding. The big difference is that you can index into an ascii string (like in most of the languages) and can expect to get a valid ascii character, while the same can't be said to an utf8 string, cause you can index into the middle of a \"character that actually spreads multiple bytes and shouldn't be called a character\". Like emojies. <br>\nIf you are sure you will not need to handle utf8 strings, using the ascii package will give you more functions on (ascii) strings than what is available in the builtin String module, since ascii doesn't have the limitation of variable-length encoding.</p>",
        "id": 443303080,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1717768404
    },
    {
        "content": "<p>Couldn't have said it better myself Norbert! I might borrow some of that explanation for roc-ascii's readme!</p>",
        "id": 443304315,
        "sender_full_name": "Hannes",
        "timestamp": 1717768776
    },
    {
        "content": "<p>Glad to help! Sure, do so!</p>",
        "id": 443304919,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1717768923
    }
]