[
    {
        "content": "<p>Ok, so I would like to get familiar with roc by tweaking the examples and make them do different stuff!<br>\nBut I am a spoiled JS / Elm dev who is used to having a watch command on my files or a tool like nodemon, etc. <br>\nWhen I tried to tweak the <code>examples/cli/Echo.roc</code> and ran <code>cargo run ...</code> it still outputs the same as before. Obviously I need to rebuild it. But I know nothing about Rust and Cargo. Could I get some tips what I need to learn to write my own example / platform?<br>\nDo I need to learn Rust / Cargo, or learn Zig? <br>\nNot asking for a step by step guide but just some pointers so that I don't sit completely in the dark with trial and error  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258700095,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634903364
    },
    {
        "content": "<p>just <code>cargo run examples/cli/Echo.roc</code> will rebuild it every time, then run the fresh binary</p>",
        "id": 258700278,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634903467
    },
    {
        "content": "<p>it will also rebuild the platform, if changes occured</p>",
        "id": 258700293,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634903478
    },
    {
        "content": "<p>platforms must be written in something that supports the C abi. we currently have C, rust and zig examples, but e.g. c#, python or swift would also work fine</p>",
        "id": 258700342,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634903510
    },
    {
        "content": "<p>I also really need to write some documentation for this! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258702004,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634904415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> <br>\nOne thing I am curious about with roc:<br>\nWhat happens if firstName await returns an \"Result err\" ? How is this handled without a \"try catch\" ? <br>\nIn JS either I use &lt;promise&gt;.catch or wrap things in a try catch. <br>\nBut if firstName was a http request, how would this proceed? Would it just return the function right there at the error, returning some form of Result error? Or what would happen?</p>\n<div class=\"codehilite\"><pre><span></span><code>main : Task {} *\nmain =\n    {} &lt;- await (Stdout.line &quot;What&#39;s your first name???&quot;)\n\n    firstName &lt;- await Stdin.line\n\n    {} &lt;- await (Stdout.line &quot;What&#39;s your last name???&quot;)\n\n    lastName &lt;- await Stdin.line\n\n    Stdout.line &quot;Hi, \\(firstName) \\(lastName)!&quot;\n</code></pre></div>",
        "id": 258702951,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634905024
    },
    {
        "content": "<p>you can always translate <code>a &lt;- f b</code> into <code>f b \\a -&gt;</code></p>",
        "id": 258704091,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634905660
    },
    {
        "content": "<p>so it \"just\" works like <code>andThen</code> in elm</p>",
        "id": 258704161,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634905685
    },
    {
        "content": "<p>Ah ok!<br>\nSo a function that does http requests using await would have a \"Result error value \" return type? And just nicely sugars it?</p>",
        "id": 258704389,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634905820
    },
    {
        "content": "<p>it would return a task most likely?</p>",
        "id": 258705194,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634906278
    },
    {
        "content": "<p>Yeah sorry, I just meant something that maybe has a result but roc does not have maybe. I still I got the gist of things, I just dont not know the types yet hehe</p>",
        "id": 258705388,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634906357
    },
    {
        "content": "<p>ah, we use <code>Result a {}</code> , so empty record for the \"error\" value</p>",
        "id": 258705760,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634906555
    }
]