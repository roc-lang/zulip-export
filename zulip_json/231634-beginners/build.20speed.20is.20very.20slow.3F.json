[
    {
        "content": "<p>I thought I'd use roc for some january generative art hacking, but the hello world compile time is looking like it'll be prohibitive. I'm seeing ~4 seconds to run <code>roc dev</code>, with nothing more than the basic \"I'm a roc application\" cli file from the tutorial. Is this expected? Do I have something wrong with my setup?</p>",
        "id": 318911985,
        "sender_full_name": "Jared",
        "timestamp": 1672612153
    },
    {
        "content": "<p>No, that doesn't sound normal at all. The compiler is so fast that sometimes I double check to see if it's showing me cached data, but it's not. Can you say more about your setup? Like is it a release or development build of the compiler itself?</p>",
        "id": 318914583,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1672614555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>genuary on  main ➜ ./roc version\nroc nightly pre-release, built from commit faaa466 on Sat Dec 17 09:07:43 UTC 2022\n</code></pre></div>\n<p>are the nightlies a dev build or something?</p>",
        "id": 318985810,
        "sender_full_name": "Jared",
        "timestamp": 1672663520
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    Code Generation\n           53.487 ms   Generate Assembly from Mono IR\n\nFinished compilation and code gen in 87 ms\n\nProduced a app.o file of size 4744\n\nFinished linking in 3674 ms\n</code></pre></div>\n<p>wow lol what's up with linking</p>",
        "id": 318986360,
        "sender_full_name": "Jared",
        "timestamp": 1672663748
    },
    {
        "content": "<p>I'm on an intel MBP monterey fwiw</p>",
        "id": 318986480,
        "sender_full_name": "Jared",
        "timestamp": 1672663793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404111\">Jared</span> <a href=\"#narrow/stream/231634-beginners/topic/build.20speed.20is.20very.20slow.3F/near/318985810\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>genuary on  main ➜ ./roc version\nroc nightly pre-release, built from commit faaa466 on Sat Dec 17 09:07:43 UTC 2022\n</code></pre></div>\n<p>are the nightlies a dev build or something?</p>\n</blockquote>\n<p>Nope! They're release builds.</p>",
        "id": 318986772,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1672663911
    },
    {
        "content": "<p>Wow that link time is crazy. I'm not the best person to investigate but I'm sure someone will. Thanks for bringing it up!</p>",
        "id": 318987028,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1672663999
    },
    {
        "content": "<p>For what it's worth linking is a bottleneck for some of the other languages that I explore.</p>",
        "id": 318990282,
        "sender_full_name": "Named-entity",
        "timestamp": 1672665332
    },
    {
        "content": "<p>Yes, that's true for us too, but this still seems well outside the normal range.</p>",
        "id": 318990813,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1672665510
    },
    {
        "content": "<p><del>Can you share a gist of the exact code you are running?</del> I can take a look. Though there is a chance I won't be able to repro if it depends on running on an Intel Mac.</p>",
        "id": 319020866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672676073
    },
    {
        "content": "<p>Actually, I think I was able to repro. Though not to the same extent. On an M1 mac. linking takes about 1.6 seconds. Which is still super slow for a hello world app</p>",
        "id": 319033978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672682237
    },
    {
        "content": "<p>Ok. So I think I know the root cause, but I am not sure how we will want to go about fixing it.</p>\n<p>For <code>ld</code> almost all of the time is spent in writing the output file: <code>write output:    1.3 seconds (  82.8%)</code><br>\nThis is because the output file is about 32 megabytes.</p>\n<p>The reason for this is 2 fold:</p>\n<ol>\n<li>we add the reqwest library to the cli platform (this pulls in a ton of dependencies like tokio).</li>\n<li>when rust generates a <code>staticlib</code>, it seems to link everything even if it isn't used (I have not figured out a way to stop this).</li>\n</ol>\n<p>As such, the staticlib is about 32 megabytes. On the other hand, when directly linking an executable and cleaning up dead code, the total size is about 0.5 megabytes.</p>",
        "id": 319079679,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672684296
    },
    {
        "content": "<p>Possible fixes:</p>\n<ul>\n<li>remove http requests from the cli platform or hide them behind a feature flag.</li>\n<li>find some lightweight alternative library to reqwest (maybe ureq?).</li>\n<li>get surgical linking working on macos so that dead code elimination works correctly.</li>\n<li>figure out why rust <code>staticlib</code> seems to link in everything/how to fix that.</li>\n</ul>",
        "id": 319079995,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672684448
    },
    {
        "content": "<p>I think switching to from <code>reqwest</code> to <code>ureq</code> will be the easiest short term solution.</p>",
        "id": 319081341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672685257
    },
    {
        "content": "<p>though it only cuts from ~30MB to ~20MB...so not a big win actually....</p>",
        "id": 319081409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672685289
    },
    {
        "content": "<p>hmmm</p>",
        "id": 319081411,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672685292
    },
    {
        "content": "<p>Oh, though it cuts link time from 1.6s to 0.6s for me. So that is a solid win.</p>",
        "id": 319081590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672685410
    },
    {
        "content": "<p>how long is the link time on Linux with the surgical linker?</p>",
        "id": 319086173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1672688125
    },
    {
        "content": "<p>~0ms</p>",
        "id": 319087858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672689120
    },
    {
        "content": "<p><del>That or the the timing is broken for the surgical linker.</del> The timing seems to a be accurate, but I am not 100% convinced that includes dumping to file. That said, the entire process runs in ~200ms while compilation takes ~190ms. The last ~10ms would include loading the roc application itself and maybe dumping to file.</p>",
        "id": 319088010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672689196
    },
    {
        "content": "<p>Yeah, on my Linux machine, the legacy linker takes ~4s. So that matches the slow macos timing pretty well. It is linking ~35MB. The surgical linker only has to link ~7MB. Though obviously is faster for other reasons as well.</p>",
        "id": 319088530,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672689508
    },
    {
        "content": "<p>nice! So presumably surgical linking the fix we really want on macOS <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 319103175,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1672699718
    },
    {
        "content": "<p>Yep</p>",
        "id": 319105172,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672701315
    },
    {
        "content": "<p>how far off is surgical for mac?</p>",
        "id": 319120947,
        "sender_full_name": "Jared",
        "timestamp": 1672715191
    },
    {
        "content": "<p>That's a hard question to answer. Theoretically the code is pretty close, but:</p>\n<ol>\n<li>No one is actively working on it</li>\n<li>Connecting the final pieces and getting things working in practice can be a ton of time and debugging</li>\n<li>Documentation for macos linking is sparse and we could be missing some complicated piece or minor detail that makes everything a lot more painful to finish</li>\n</ol>",
        "id": 319127123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672721070
    }
]