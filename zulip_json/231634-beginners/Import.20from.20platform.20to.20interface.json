[
    {
        "content": "<p>Can an interface import anything from the app's platform?</p>",
        "id": 300715304,
        "sender_full_name": "jan kili",
        "timestamp": 1664165485
    },
    {
        "content": "<p>I want to use interfaces as a tool for breaking up complex apps into multiple files, but that often requires referencing platform-defined types. Is this a sign that I'm misusing interfaces?</p>",
        "id": 300715363,
        "sender_full_name": "jan kili",
        "timestamp": 1664165544
    },
    {
        "content": "<p>I'm pretty sure the answer is no. :/</p>",
        "id": 300717220,
        "sender_full_name": "jan kili",
        "timestamp": 1664167472
    },
    {
        "content": "<p>Importing effects would be very nice, too... though I suppose I can always wrap interface functions in a wrapper function and pass in effects that way...</p>",
        "id": 300718193,
        "sender_full_name": "jan kili",
        "timestamp": 1664168438
    },
    {
        "content": "<p>I've tried this, and it works, but there are caveats.</p>\n<p>I'm working on the Advent of Code, and the way they structure their puzzles is that there are two daily puzzles. They share the same input, so I wrote a <code>main.roc</code> <strong>interface</strong> that reads, parses, and outputs the data and another <code>mainA.roc</code> and <code>mainB.roc</code> <strong>apps</strong> that did the pure puzzle-solving. Given this structure, most of my code interacting with the platform lives in <code>main.roc</code>.</p>\n<p>When I run <code>roc test mainA.roc</code> or <code>roc dev mainB.roc</code> everything works well. If I run <code>roc test</code> or <code>roc dev main.roc</code>, I get errors. By running <code>roc check</code> by itself, I get the error that the file has an unexpected name. If I change the name according to the error, <code>roc check</code> runs seemingly forever.</p>\n<p>I don't know if the expectation is to have all the code interacting with the platform in one file and only have code that solely depends on Roc's Standard Library in the interface file?</p>",
        "id": 303324016,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665434955
    },
    {
        "content": "<p>Sample code:<br>\n<a href=\"/user_uploads/22008/9apUBcrfBS5FhxV3fMDb4MbH/main.roc\">main.roc</a><br>\n<a href=\"/user_uploads/22008/_1sSuZmSUetWZrldOcBOdoSP/mainA.roc\">mainA.roc</a></p>",
        "id": 303324499,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665435266
    },
    {
        "content": "<p>Hello, I have a platform that requires a type called <code>Model</code> that the user specifies.<br>\nThis is in a file called <code>Platform.roc</code></p>\n<div class=\"codehilite\"><pre><span></span><code>platform &quot;platform&quot;\n    requires { Model } { init : App.Application }\n    exposes [ Model ]\n    packages {}\n    imports [ App ]\n    provides [mainForHost]\n\nmainForHost = init\n</code></pre></div>\n<p>My <code>App.roc</code> file needs to import the type from <code>Platform.roc</code></p>\n<div class=\"codehilite\"><pre><span></span><code>interface App\n    exposes [...]\n    imports [Platform]\n</code></pre></div>\n<p>When I try to run this code I get an error saying that the <code>App.roc</code> file does not exist. I think this is because of a circular import.<br>\nIs there any way to avoid this problem?</p>",
        "id": 317365188,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671715729
    },
    {
        "content": "<p>Seems to be the same sort of issue as the other thing in this thread but the fix doesn't seem possible, or I am misunderstanding.</p>",
        "id": 317365485,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671715810
    },
    {
        "content": "<p>I don't think you need to import your app there</p>",
        "id": 317366439,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716104
    },
    {
        "content": "<p>the model type is already passed along. I think you can use <code>{ init : _ }</code> (the underscore is a type hole, meaning the compiler will figure out that type)</p>",
        "id": 317366657,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716175
    },
    {
        "content": "<p>Now I don't get an error roc check is hanging.</p>",
        "id": 317367030,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716284
    },
    {
        "content": "<p>hmm wait. is <code>App</code> not your app module?</p>",
        "id": 317367426,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716399
    },
    {
        "content": "<p>you need some module that has a header similar to this</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;breakout&quot;\n    packages { pf: &quot;platform/main.roc&quot; }\n    imports [pf.Game.{ Bounds, Elem, Event }]\n    provides [program] { Model } to pf\n\nprogram = ...\n</code></pre></div>\n\n<p>which is then used in the platform as</p>\n<div class=\"codehilite\"><pre><span></span><code>platform &quot;gui&quot;\n    requires { Model } { program : _ }\n    exposes [Game]\n    packages {}\n    imports [Game.{ Bounds, Elem, Event }]\n    provides [programForHost]\n</code></pre></div>",
        "id": 317367825,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716507
    },
    {
        "content": "<p>My file strucure is:</p>\n<div class=\"codehilite\"><pre><span></span><code>main.roc\n    /platform\n        /App.roc  # imports Platform\n        /Platform.roc  # Named `Platform.roc` instead of `main.roc` like the examples\n</code></pre></div>",
        "id": 317367857,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716517
    },
    {
        "content": "<p>I see</p>",
        "id": 317368149,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716581
    },
    {
        "content": "<p>Im trying to get the <code>{ Model }</code> in the second code block from the gui example to be accessible from a different file</p>",
        "id": 317368155,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716583
    },
    {
        "content": "<p>to be clear: it is available in <code>Platform.roc</code> but you want it to be available in <code>App.roc</code>?</p>",
        "id": 317368458,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716653
    },
    {
        "content": "<p>Yes</p>",
        "id": 317368480,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716659
    },
    {
        "content": "<p>I want the user to import things from the <code>App.roc</code> file that will be typed with the <code>Model</code> type they are providing to me. Namely a record with a function with <code>Model</code> in the type signature.</p>",
        "id": 317368672,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716718
    },
    {
        "content": "<p>right, that does not work (today). The problem is circular dependencies. The app uses the platform, so then it would be circular if the platform could use types defined in the app. The <code>Platform.roc</code> module is special, because it is really the highest module. the app module (and other user modules) are in the middle, and then the other modules of the platform are below that in the hierarchy</p>",
        "id": 317368743,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716749
    },
    {
        "content": "<p>the workaround here is to use type variables I think</p>",
        "id": 317368828,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716765
    },
    {
        "content": "<p>so your <code>App.roc</code> would define an <code>Application model := ...</code>, so it is generic over whatever model the user provides</p>",
        "id": 317369017,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1671716827
    },
    {
        "content": "<p>ty for the explanation.</p>",
        "id": 317369040,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716832
    },
    {
        "content": "<p>thanks i think i get it</p>",
        "id": 317369085,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716852
    },
    {
        "content": "<p>i think</p>",
        "id": 317369121,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671716860
    },
    {
        "content": "<p>I ended up needed to do a record like this</p>\n<div class=\"codehilite\"><pre><span></span><code>Application model : {\n    routes : List (Route.Route model),\n}\n</code></pre></div>\n<p>works perfectly <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 317374656,
        "sender_full_name": "Lunarmagpie",
        "timestamp": 1671718321
    }
]