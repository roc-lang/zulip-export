[
    {
        "content": "<p>This program terminates without printing or panicking or anything. I would have expected it to hang. The weird thing is that if I remove either of the unused record fields it hangs as expected. Any idea what's going on here? I'm using <code>roc nightly pre-release, built from commit e91b50a on Sat Sep 23 09:15:02 UTC 2023</code> on apple silicon.</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;main&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.5.0/Cufzl36_SnJ4QbOoEmiJ5dIpUxBvdB3NEySvuH82Wio.tar.br&quot;}\n    imports [pf.Stdout]\n    provides [main] to pf\n\nmain =\n    _ = func {\n        val: &quot;foo&quot;,\n        index: 0,\n        result: 0\n    }\n    Stdout.line &quot;the end&quot;\n\nfunc = \\r -&gt; func { r &amp; index: r.index }\n</code></pre></div>",
        "id": 394260851,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696192823
    },
    {
        "content": "<p>Just stack overflows?</p>",
        "id": 394265993,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696196305
    },
    {
        "content": "<p>Also, optimized or dev build if the app?</p>",
        "id": 394266015,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696196333
    },
    {
        "content": "<p>hmm...program segfaults for me on apple silicon. Still not great. But it is just an infinite recursive loop. Funiliy enough, it breaks morphic when trying to optimize</p>",
        "id": 394266303,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696196723
    },
    {
        "content": "<p>Just curious, was there a goal with this function?</p>",
        "id": 394266601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696196985
    },
    {
        "content": "<p>Also the reason the function works when you comment out <code>val</code> is because it no longer has a <code>Str</code>. <code>Str</code> potentally cause memory allocations and llvm's reasoning falls over. Without <code>val</code>, it realizes that there is nothing to do and just creates an infinite jump cycle.</p>",
        "id": 394266773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696197161
    },
    {
        "content": "<p>Should still be an infinite loop either way (both that should tail recurse and not stack overflow), but somehow is hitting another issues. I guess when copying data around.</p>",
        "id": 394266948,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696197277
    },
    {
        "content": "<p>Ah yeah I stack overflow makes sense. Is there a clear way to tell when a roc program has stack overflowed? I assumed there would be some kind of error message but I see now that that may not be the case.</p>\n<p>I was just using <code>roc main.roc</code>. Also, is that the equivalent to <code>roc dev main.roc</code>?</p>\n<p>I was writing a parser for a little stack based language and I accidentally made an infinite recursion but then couldn't figure out why it crashed instantly instead of hanging. The example I showed is pretty much just the smallest example I could come to that had the same behavior.</p>\n<blockquote>\n<p>Also the reason the function works when you comment out <code>val</code> is because it no longer has a <code>Str</code>. </p>\n</blockquote>\n<p>It also hangs if I comment out <code>result</code> but leave <code>val</code> in. Do you have a guess why that would be given that it still contains the <code>Str</code>? Maybe the record update is causing some issue? It behaves as expected if I just pass in <code>r</code> instead of (pointlessly) updating <code>r</code>.</p>",
        "id": 394284319,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696207053
    },
    {
        "content": "<p>To be clear, I think this is hitting a weird compiler bug related to copying around data cause it can segfault too. It actually should be tail recursive and just hang without ever stack overflowing either.</p>",
        "id": 394286093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696207965
    },
    {
        "content": "<p>Also, really strange, that removing result also fixes it. Something funky is going on with types and copying around data. Maybe an alignment issue. I am going to file an issue. All of these should just hang forever (not a great results, but the correct behavior currently).</p>",
        "id": 394286380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696208094
    },
    {
        "content": "<p>Okay cool, sounds good!</p>",
        "id": 394286635,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696208199
    },
    {
        "content": "<p>Filed:  <a href=\"https://github.com/roc-lang/roc/issues/5874\">#5874</a></p>",
        "id": 394286857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696208294
    }
]