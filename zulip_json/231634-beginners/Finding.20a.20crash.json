[
    {
        "content": "<p>I'm trying to isolate a bug that is causing the roc app to crash using my experimental <a href=\"https://github.com/lukewilliamboswell/roc/tree/tui\">tui platform</a>. It's tricky to isolate the bug as I haven't found a good way to capture information when Roc panics. Is there are good way to capture the information or debug something like this? I guess it may be complicated by the fact I am capturing stdout to render the terminal ui. I feel like a debugger would assist, but I'm not sure that will work when I am also rendering text to the terminal.</p>\n<p>Any assistance here would be most appreciated. I'm really close to having a working Todo app using Roc tui! </p>\n<div class=\"codehilite\"><pre><span></span><code>Model : {\n    text : Str,\n    todos : List Str,\n    scroll : U16,\n    bounds : { height : U16, width : U16 },\n}\n# Handle events from the platform\nupdate : Model, Event -&gt; Model\nupdate = \\model, event -&gt;\n    #newTodos = List.append model.todos model.text\n    when event is\n        KeyPressed code -&gt;\n            when code is\n                Scalar char -&gt; { model &amp; text: Str.concat model.text char } # adding too many characters in the model&#39;s text also crashes\n                Delete | Backspace -&gt; { model &amp; text: removeLastCharacter model.text }\n                Left -&gt; Model.updateScroll model Left\n                Right -&gt; Model.updateScroll model Right\n                Up -&gt; Model.updateScroll model Up\n                Down -&gt; Model.updateScroll model Down\n                Enter -&gt;\n                    { model &amp; text: &quot;&quot;, todos : [&quot;newTodos&quot;, &quot;asd&quot;] } # appending anything to todos crashes\n                _ -&gt; model\n\n        Resize newBounds -&gt;\n            { model &amp; bounds: newBounds }\n\n        _ -&gt;\n            model\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/qKRTtLfkWvuiNo4Vk1HqoY_t/Screen-Shot-2022-11-28-at-21.28.06.png\">Screen-Shot-2022-11-28-at-21.28.06.png</a><br>\n<a href=\"/user_uploads/22008/07Y1z7oUT2GlLo_BmSTp1BUN/Screen-Shot-2022-11-28-at-21.26.18.png\">Screen-Shot-2022-11-28-at-21.26.18.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/qKRTtLfkWvuiNo4Vk1HqoY_t/Screen-Shot-2022-11-28-at-21.28.06.png\" title=\"Screen-Shot-2022-11-28-at-21.28.06.png\"><img src=\"/user_uploads/22008/qKRTtLfkWvuiNo4Vk1HqoY_t/Screen-Shot-2022-11-28-at-21.28.06.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/07Y1z7oUT2GlLo_BmSTp1BUN/Screen-Shot-2022-11-28-at-21.26.18.png\" title=\"Screen-Shot-2022-11-28-at-21.26.18.png\"><img src=\"/user_uploads/22008/07Y1z7oUT2GlLo_BmSTp1BUN/Screen-Shot-2022-11-28-at-21.26.18.png\"></a></div>",
        "id": 312599028,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669632450
    },
    {
        "content": "<p>can you try the <code>RUST_BACKTRACE=1</code> suggestion</p>",
        "id": 312599427,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669632579
    },
    {
        "content": "<p>that should give a better stacktrace for the first panic</p>",
        "id": 312599474,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669632597
    },
    {
        "content": "<p>most likely some invalid string makes it into the rust code</p>",
        "id": 312599570,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669632617
    },
    {
        "content": "<p>but it's useful to know where it comes from</p>",
        "id": 312599603,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669632629
    },
    {
        "content": "<p>the second one is trickier, certainly on mac</p>",
        "id": 312599751,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669632668
    },
    {
        "content": "<p>but they might be the same issue in reality</p>",
        "id": 312599783,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669632676
    },
    {
        "content": "<p>otherwise I can try it on linux if you have a branch (and this is supposed to work on linux)</p>",
        "id": 312599848,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669632696
    },
    {
        "content": "<p>It should work ok linux <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> I should definitely try that next time. RUST_BACKTRACE didn't give me much. It's just a segfault now. My current logic is that I ha e changed the Model without completely regenerating glue, and because my workaround for glue has the Model in the plaftorm API that may have changed the memory layout. I'll try regenerating it again tomorrow, and I'll have a go with my linux machine. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 312601172,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669633165
    },
    {
        "content": "<p>on linux, <code>valgrind</code> is a good way to figure out if something is wrong</p>",
        "id": 312602088,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669633438
    },
    {
        "content": "<p>It's on the tui branch. I will likely follow basic-cli's example and pull out into its own repo soon.</p>",
        "id": 312602343,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669633491
    },
    {
        "content": "<p>I think I am getting closer to finding this bug. Can someone more experienced with Rust have a look at the below and let me know if there is anything wrong here? Rust analyzer is happy, but I think there must be something going on in the KeyCodes I'm getting from crossterm and then translating to RocStr's.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">crossterm</span>::<span class=\"n\">event</span>::<span class=\"n\">KeyCode</span>::<span class=\"n\">Char</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">roc_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocStr</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">crate</span>::<span class=\"n\">glue</span>::<span class=\"n\">KeyCode</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">roc_string</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"nc\">Scalar</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"ss\">text</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\"># if I remove the Str.concat then this works properly</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 312930870,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669753426
    },
    {
        "content": "<p>It's strange behaviour, because it works well for 23 characters, and then crashes on the 24th. Without the <code>Str.concat</code> in the model you can type characters in indefinitely. The other thing I was thinking is that maybe the <code>text</code> RocStr in the Model is only a fixed size and doesn't expand to fit enough characters in it.</p>",
        "id": 312932099,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669753848
    },
    {
        "content": "<p>that makes sense in a way: we store strings from 24 characters and up in a different way</p>",
        "id": 312936912,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669755561
    },
    {
        "content": "<p>Cool, I'll dig into glue a bit more and see if I can figure it out.</p>",
        "id": 312951600,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669761539
    },
    {
        "content": "<p>I pulled your branch and am trying to take a look, but immediately, I hit a crash when trying to compile. Do you see this on your system?</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo run -- examples/tui/hello.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.49s\n     Running `target/debug/roc examples/tui/hello.roc`\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;`pf.Elem.IdentId(109)` is inserted as a partial proc twice: that&#39;s a bug!&#39;, crates/compiler/mono/src/ir.rs:197:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 312957988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669763785
    },
    {
        "content": "<p>Update: no idea why the compiler is panicking here. I just commented out the debug asserts and it compiles fine <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> (guess I could have just built in release mode)</p>\n<p>As for the crash. It is a use after free bug.</p>",
        "id": 312964767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669767603
    },
    {
        "content": "<p>The text is being freed and then rendered.</p>",
        "id": 312964814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669767642
    },
    {
        "content": "<p>This is probably something that glue generation should more properly fix, before render, you want to increment the refcount of the entire <code>Model</code>. Currently the <code>Model</code> is passed into render and essentially consumed. Thus, the next time it is used, the string is pointing to freed memory and hits bugs quickly.</p>",
        "id": 312964957,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669767728
    },
    {
        "content": "<p>With current roc, I think there are two simple fixes.</p>\n<ol>\n<li>Change render to also return the model. That way the model's fields will not be freed.</li>\n<li>Manually increment the refcounts before calling render with:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>unsafe {\n    std::mem::forget((*model).text.clone());\n    std::mem::forget((*model).todos.clone());\n};\n</code></pre></div>",
        "id": 312965053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669767804
    },
    {
        "content": "<p>This is a essentially no-op that just increments the refcount and should otherwise have no major cost.</p>",
        "id": 312965086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669767828
    },
    {
        "content": "<p>Oh, I guess the third option would be to expose a function that given a model returns the model twice in a record. That would increment the refcount of all fields when called. Then just <code>std::mem::forget</code> one of the models and keep the other.</p>",
        "id": 312966040,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669768411
    },
    {
        "content": "<p>I think changing render to return the model is the way to go, because it means morphic can optimize away unnecessary refcounts better</p>",
        "id": 312967556,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669769442
    },
    {
        "content": "<p>but importantly, I don't think you want to change the user-facing API at all</p>",
        "id": 312967596,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669769475
    },
    {
        "content": "<p>just have an internal-only wrapper around render which calls the application-provided render, and then returns to the host a record containing both what was rendered as well as the original (unchanged) model it was given</p>",
        "id": 312967762,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669769563
    },
    {
        "content": "<p>that way it shouldn't try to decrement the refcount!</p>",
        "id": 312967785,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669769588
    },
    {
        "content": "<p>I don't think that would change anything. Both cases when passing the model into the render function, we are holding a reference which means we will increment the refcount of everything it contains. I don't think morphic would have any wins here. Am I missing something it can do?</p>",
        "id": 312971125,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669772090
    },
    {
        "content": "<p>Thank you for looking into this. I really appreciate it. I've got some things to work on now. For reference I should have mentioned that I've moved into a new repo <a href=\"https://github.com/lukewilliamboswell/roc-tui\">roc tui</a>, but its still the same issue on that branch.</p>",
        "id": 312974166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669774509
    }
]