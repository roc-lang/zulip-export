[
    {
        "content": "<p>When I have a function that takes a while (not because of IO or whatever, just computation), is it possible to output something to the console when that function runs? I know about \"dbg\", but that doesn't do anything when running the binary, only when running \"roc dev\".</p>\n<p>Something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>processRange: Nat, Nat -&gt; Nat\nprocessRange = \\start, length -&gt;\n  Stdout.line &quot;Processing range: \\(start) - \\(start+length-1)&quot;\n  somethingThatTakesLongToCompute start length\n</code></pre></div>\n<p>I haven't been able to find any syntax that makes Stdout.line work in a function other than main, maybe it's not possible? Am I doing this wrong? There should be some way to indicate to the user that the program is still running, just working on whatever task it's been given, right?</p>",
        "id": 406185057,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701823115
    },
    {
        "content": "<p>We want debug to work in this case...It just doesn't currently.</p>",
        "id": 406186666,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701823751
    },
    {
        "content": "<p>For <code>Stdout.line</code> to work in an arbitrary function, that function would need to be changed to return a <code>Task</code></p>",
        "id": 406186732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701823777
    },
    {
        "content": "<p>Then you would need to await that task</p>",
        "id": 406186757,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701823787
    },
    {
        "content": "<p>It is a solid bit of extra juggling</p>",
        "id": 406186781,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701823798
    },
    {
        "content": "<p>specifically, you could do something like this</p>\n<div class=\"codehilite\"><pre><span></span><code>processRange: Nat, Nat -&gt; Task Nat *\nprocessRange = \\start, length -&gt;\n    {} &lt;- Stdout.line &quot;Processing range: \\(start |&gt; Num.toStr) - \\(start + length - 1 |&gt; Num.toStr)&quot; |&gt; Task.await\n    somethingThatTakesLongToCompute start length |&gt; Task.ok\n</code></pre></div>",
        "id": 406186919,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1701823845
    },
    {
        "content": "<p>Then you also have to change the caller to await the returned task</p>",
        "id": 406187010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701823886
    },
    {
        "content": "<p>Yes, that would be some extra juggling since there is really no <em>other</em> need to change the type of that function than to be able to report progress to a user waiting for the result. It would just be nice to be able to provide an ETA or some indication that something is still happening while long computations run.</p>",
        "id": 406187166,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701823939
    },
    {
        "content": "<p>For example, right now I'm running something that might take minutes, hours or days and I have no idea which unless I can see some progress. In \"roc dev\" it will take days, for sure, but --optimize speeds things up a lot so it may be only hours in that case but I have no way of knowing.</p>\n<p>I'll try and see if I can type-juggle that Task into the function. What I'm doing is probably wrong since I didn't expect it to take anywhere near this long, I was hoping for seconds.</p>",
        "id": 406188213,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701824359
    },
    {
        "content": "<p>I would break the input into chunks and print an update after each chunk is processed.</p>",
        "id": 406193603,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701826695
    },
    {
        "content": "<p>So now I have a <code>List (Task Nat *)</code> that I'd like to each await, get the result and do something with the resulting list of results. I'm trying to <code>List.map</code> using <code>Task.await</code> and I'm not getting anywhere. Probably because that's not how things are done in Roc.</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    ranges\n    |&gt; List.map \\range -&gt; searchRange range\n    |&gt; List.map \\task -&gt; await task ???\n    |&gt; List.min\n    |&gt; Task.ok\n\nsearchRange : Range -&gt; Task Nat *\nsearchRange = range -&gt;\n      {} &lt;- (Stdout.line &quot;Searching range \\(Num.toStr range.start) \\(Num.toStr range.length)&quot;) |&gt; await\n    somethingThatTakesALongTime range |&gt; Task.ok\n</code></pre></div>\n<p>Is it possible to wrap the awaiting of a bunch of tasks into another task that can then process the results of each of the smaller tasks?</p>",
        "id": 406194658,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701827344
    },
    {
        "content": "<p>You need something like <a href=\"https://www.roc-lang.org/packages/basic-cli/Task#loop\">https://www.roc-lang.org/packages/basic-cli/Task#loop</a></p>",
        "id": 406195097,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701827610
    },
    {
        "content": "<p>Took me a while and I had to sprinkle <code>await</code> and <code>Task.ok</code> everywhere until it compiled, but I finally did manage to get it working with Task.loop, thanks! It's still taking way too long, but that's just because my implementation is slow. I did manage to print status updates while the computation is running.</p>",
        "id": 406208746,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701831924
    }
]