[
    {
        "content": "<p>I'm trying to write an SGF-parser for an Exercism exercise. I'd like to use the roc-parser library.<br>\nThe grammar is recursive. Simplifying a bit, suppose we just want to parse nested expressions like these: <code>(AA;BB;CC(DD;EE(FF;GG)(HH)))</code>.</p>\n<p>I have most of the grammar working, except for the recursive part: it won't compile because the compiler thinks it's an infinite recursion:</p>\n<div class=\"codehilite\"><pre><span></span><code>gameTree =\n    P.const (\\nodes -&gt; \\subTrees -&gt; (nodes, subTrees))\n    |&gt; P.skip (S.utf8 [&#39;(&#39;])\n    |&gt; P.keep (P.oneOrMore node)\n    |&gt; P.keep (P.lazy \\_ -&gt; P.many gameTree)\n    |&gt; P.skip (S.utf8 [&#39;)&#39;])\n</code></pre></div>\n<p>Any idea how to solve this?</p>\n<p>I looked at the <a href=\"https://github.com/lukewilliamboswell/roc-parser/blob/a0060e411db88a4f74e433f880e3f29a6bbdf8ea/package/Xml.roc#L436\">recursive part of the XMLparser</a>, and I don't see how its recursion is any different.</p>\n<p>Thanks for your help!</p>",
        "id": 477403507,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729158746
    },
    {
        "content": "<p>I added some <code>;</code>'s to make the grammar more regular, but here's a solution <a href=\"https://gist.github.com/drewolson/1c4cace8d0afaf4baab4c71e6a7427dc\">https://gist.github.com/drewolson/1c4cace8d0afaf4baab4c71e6a7427dc</a></p>",
        "id": 477456016,
        "sender_full_name": "drew",
        "timestamp": 1729174978
    },
    {
        "content": "<p>you need some kind of terminal in your parser -- a parser that doesn't recur. in my example, <code>parseLiteral</code> is the parser that doesn't recur</p>",
        "id": 477456162,
        "sender_full_name": "drew",
        "timestamp": 1729175020
    },
    {
        "content": "<p>Got it, thanks so much <span class=\"user-mention\" data-user-id=\"463085\">@drew</span> !</p>",
        "id": 477496418,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729187788
    },
    {
        "content": "<p>I finally got the SGF parser to work! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\nIf you're interested, here's <a href=\"https://github.com/exercism/roc/pull/159/files#diff-4076f00e7c5b1031627866424c04b8e043c22d5cfab7a891d69736ff95341072\">the code</a>.</p>",
        "id": 477535926,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729205520
    },
    {
        "content": "<p>awesome</p>",
        "id": 477536146,
        "sender_full_name": "drew",
        "timestamp": 1729205643
    },
    {
        "content": "<p>Nice, looks sufficiently challenging for an exercism exercise. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 477537564,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729206569
    },
    {
        "content": "<p>Yeah, it's the highest difficulty level on the site (level 9)</p>",
        "id": 477553139,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729217580
    },
    {
        "content": "<blockquote>\n<p>I have most of the grammar working, except for the recursive part: it won't compile because the compiler thinks it's an infinite recursion:</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> What kind of error did you get? A compiler crash or compiler error?</p>\n<p>When I compile my solution the compiler crashes with stack overflow:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc check SgfParsing.roc\n0 errors and 0 warnings found in 22 ms\n\n$  roc build  SgfParsing.roc\n\nthread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\nzsh: abort      roc build SgfParsing.roc\n</code></pre></div>\n<p>I'm a little bit hesitant to look at your code to not spoil the solution. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 477893641,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1729429220
    },
    {
        "content": "<p>Mmh, I think my error was more explicit: it told me that it ran into an infinitely recursive type. The trick was to use <code>lazy</code> to break the infinite recursion, you can take a look at the XML parser in the roc-parser package for inspiration. Hope this helps.</p>",
        "id": 477914782,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729447409
    },
    {
        "content": "<p>I have tried using lazy in multiple places without luck. The compiler does not like the code at all... <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>For example this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>gameTreeP : SgfParser GameTree\ngameTreeP =\n    const \\nodes -&gt; \\children -&gt; createGameTree nodes children\n    |&gt; skip (string &quot;(&quot;)\n    |&gt; keep sequenceP\n    |&gt; keep (lazy foo)\n    |&gt; skip (string &quot;)&quot;)\n\nfoo : {} -&gt; SgfParser (List GameTree)\nfoo = \\_ -&gt; many gameTreeP\n</code></pre></div>\n<p>Results in this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build main.roc\n\nthread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5748:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;.\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x19\\x89\\x91\\&#39;%J\\xdf\\xf9&quot;), definition of value binding ValueId(3): expected type &#39;(&quot;UserApp&quot;::&quot;G\\xbb\\xc5\\xe4\\xc8\\xe1F\\xfd&quot;,)&#39;, found type &#39;((((((((heap_cell,), (heap_cell, bag&lt;()&gt;)), ()), ((((((heap_cell,), (heap_cell, bag&lt;()&gt;)), ()), (((((((((heap_cell,), (heap_cell, bag&lt;()&gt;)), ()), ((), ())), ((heap_cell,), (heap_cell, bag&lt;()&gt;))), ()), (((((heap_cell,), (heap_cell, bag&lt;()&gt;)), ()), ((), ())), ((heap_cell,), (heap_cell, bag&lt;()&gt;)))), ((), ((), (((), ()), ())))), ())), ()), ((((heap_cell,), (heap_cell, bag&lt;()&gt;)), ()), (((((((((heap_cell,), (heap_cell, bag&lt;()&gt;)), ()), ((), ())), ((heap_cell,), (heap_cell, bag&lt;()&gt;))), ()), (((((heap_cell,), (heap_cell, bag&lt;()&gt;)), ()), ((), ())), ((heap_cell,), (heap_cell, bag&lt;()&gt;)))), ((), ((), (((), ()), ())))), ())))), ((), ())), (heap_cell, bag&lt;&quot;UserApp&quot;::&quot;\\x0e\\x08IH\\xc7\\x89n\\x88&quot;&gt;)), ((heap_cell,), (heap_cell, bag&lt;()&gt;))),)&#39;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>But if I inline the foo-lambda:</p>\n<div class=\"codehilite\"><pre><span></span><code>gameTreeP : SgfParser GameTree\ngameTreeP =\n    const \\nodes -&gt; \\children -&gt; createGameTree nodes children\n    |&gt; skip (string &quot;(&quot;)\n    |&gt; keep sequenceP\n    |&gt; keep (lazy \\_ -&gt; many gameTreeP)\n    |&gt; skip (string &quot;)&quot;)\n\nfoo : {} -&gt; SgfParser (List GameTree)\nfoo = \\_ -&gt; many gameTreeP\n</code></pre></div>\n<p>another error is produced:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build main.roc\n\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nI thought a non-nullable-unwrapped variant for a lambda set was impossible: how could such a lambda set be created without a base case?\nLocation: crates/compiler/mono/src/layout.rs:1705:61\n</code></pre></div>\n<p>And if I comment the (unused) foo function: </p>\n<div class=\"codehilite\"><pre><span></span><code>gameTreeP : SgfParser GameTree\ngameTreeP =\n    const \\nodes -&gt; \\children -&gt; createGameTree nodes children\n    |&gt; skip (string &quot;(&quot;)\n    |&gt; keep sequenceP\n    |&gt; keep (lazy \\_ -&gt; many gameTreeP)\n    |&gt; skip (string &quot;)&quot;)\n\n# foo : {} -&gt; SgfParser (List GameTree)\n# foo = \\_ -&gt; many gameTreeP\n</code></pre></div>\n<p>I get yet another error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build main.roc\n\nthread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\nzsh: abort      roc build main.roc\n</code></pre></div>\n<p>I'm really not sure what I'm doing wrong here. Any help appreciated. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 478120351,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1729533877
    },
    {
        "content": "<p>Oh no, that's not great. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span><br>\nPerhaps you can try running my solution just to see whether it might be a compiler bug linked to your platform (I'm on MacOS, and the tests also pass on Ubuntu, but perhaps there's an issue on Windows). Also, what character encoding are you using in your Roc file? The function name in the first error message starts with a bunch of zeroes, I'm not sure that's normal.</p>",
        "id": 478595506,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729723724
    },
    {
        "content": "<p><a href=\"https://github.com/exercism/roc/blob/main/exercises/practice/sgf-parsing/.meta/Example.roc\">https://github.com/exercism/roc/blob/main/exercises/practice/sgf-parsing/.meta/Example.roc</a></p>",
        "id": 478595570,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729723773
    },
    {
        "content": "<p>Also, maybe try <code>lazy \\_ -&gt; foo</code> in your first code example</p>",
        "id": 478595876,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729723969
    },
    {
        "content": "<p>With <code>lazy foo</code>, the compiler will probably inspect <code>foo</code> right away, leading to a loop and stack overflow, whereas <code>lazy \\_ -&gt; foo</code> might not</p>",
        "id": 478596055,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729724082
    }
]