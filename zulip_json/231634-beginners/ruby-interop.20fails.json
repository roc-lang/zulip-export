[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[nix-shell:~/dev/roc/examples]$ cd ruby-interop/ &amp;&amp; ../../target/release/roc build --lib\n0 errors and 0 warnings found in 194 ms while successfully building:\n\n    libhello\n\n[nix-shell:~/dev/roc/examples/ruby-interop]$ ruby extconf.rb\nchecking for -lhello... no\ncreating extconf.h\ncreating Makefile\n\n[nix-shell:~/dev/roc/examples/ruby-interop]$ make\ncompiling demo.c\nlinking shared-object demo.so\n\n[nix-shell:~/dev/roc/examples/ruby-interop]$ irb\nirb(main):001:0&gt; require_relative &#39;demo&#39;\nTraceback (most recent call last):\n        5: from /nix/store/2xvc6i6dnar93p1wvh335jjsgmmjqg5c-ruby-2.7.7/bin/irb:23:in `&lt;main&gt;&#39;\n        4: from /nix/store/2xvc6i6dnar93p1wvh335jjsgmmjqg5c-ruby-2.7.7/bin/irb:23:in `load&#39;\n        3: from /nix/store/2xvc6i6dnar93p1wvh335jjsgmmjqg5c-ruby-2.7.7/lib/ruby/gems/2.7.0/gems/irb-1.2.6/exe/irb:11:in `&lt;top (required)&gt;&#39;\n        2: from (irb):1\n        1: from (irb):1:in `require_relative&#39;\nLoadError (/home/dankey/dev/roc/examples/ruby-interop/demo.so: undefined symbol: roc__mainForHost_1_exposed_generic - /home/dankey/dev/roc/examples/ruby-interop/demo.so)\n</code></pre></div>\n<p>I think i did everything right?</p>\n<div class=\"codehilite\"><pre><span></span><code>ruby 2.7.7p221 (2022-11-24 revision 168ec2b1e5) [x86_64-linux]\nclang version 13.0.1\nGNU Make 4.3\n</code></pre></div>\n<p>i actually am not sure how that's supposed to work<br>\nboth host.c and demo.c are declaring an external <code>roc__mainForHost_1_exposed_generic</code>,  but who implements it? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 327660265,
        "sender_full_name": "dank",
        "timestamp": 1676328323
    },
    {
        "content": "<p>The Roc app implements it. In the Roc code it would just be called <code>mainForHost</code></p>",
        "id": 327661456,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1676328879
    },
    {
        "content": "<p>hm, so it looks like <code>extconf.rb</code> isn't finding <code>libhello</code></p>",
        "id": 327671926,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676334134
    },
    {
        "content": "<p>when I run it, I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ruby extconf.rb\nchecking for -lhello... yes\ncreating extconf.h\ncreating Makefile\n</code></pre></div>",
        "id": 327671934,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676334139
    },
    {
        "content": "<p>so <code>yes</code> instead of <code>no</code> after <code>checking for -lhello</code></p>",
        "id": 327671960,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676334150
    },
    {
        "content": "<p>admittedly I haven't tried it on NixOS</p>",
        "id": 327671980,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676334166
    },
    {
        "content": "<p>so maybe <code>extconf.rb</code> is passing <code>-lhello</code> to <code>clang</code> or <code>ld</code> or something, and on NixOS it doesn't look in the current directory for a <code>libhello</code>?</p>",
        "id": 327672049,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676334206
    },
    {
        "content": "<p>or maybe it needs a different file extension on <code>libhello</code>?</p>",
        "id": 327672072,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676334217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/ruby-interop.20fails/near/327672072\">said</a>:</p>\n<blockquote>\n<p>or maybe it needs a different file extension on <code>libhello</code>?</p>\n</blockquote>\n<p>yea that's what i suspected. there's <code>libhello.so.1.0</code>. not sure how to validate that that's what wrong</p>\n<p>also it might be a nixos thing, yes</p>",
        "id": 327716954,
        "sender_full_name": "dank",
        "timestamp": 1676363687
    },
    {
        "content": "<p>BTW full discretion I actually barely know ruby at all, but I figured if i can get it working and understand how it works, I might be able to replicate your work for a python-interop, which shouldn't be that hard</p>",
        "id": 327717205,
        "sender_full_name": "dank",
        "timestamp": 1676363795
    },
    {
        "content": "<p>in the meantime I'll maybe test on my debian machine to see if it actually is just a nixos thing</p>",
        "id": 327717465,
        "sender_full_name": "dank",
        "timestamp": 1676363887
    },
    {
        "content": "<p>also changing the extension to <a href=\"http://libhello.so\">libhello.so</a> etc doesn't make a difference ruby still doesn't get it<br>\ni figured maybe playing with <code>dir_config</code> would solve it but doesnt seem so <br>\n(even creating a lib dir and moving <a href=\"http://libhello.so\">libhello.so</a> there, weird stuff)</p>",
        "id": 327721177,
        "sender_full_name": "dank",
        "timestamp": 1676365095
    },
    {
        "content": "<p>doesn't work on debian either<br>\n(as in nixos it says no after checking for -lhello)</p>",
        "id": 327731306,
        "sender_full_name": "dank",
        "timestamp": 1676368160
    },
    {
        "content": "<p>I assume <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> you're using macos?</p>",
        "id": 327731399,
        "sender_full_name": "dank",
        "timestamp": 1676368184
    },
    {
        "content": "<p>yup, interesting</p>",
        "id": 327776608,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676381735
    },
    {
        "content": "<p>one of my coworkers get it working at NoRedInk on Linux, but I forget what the trick was</p>",
        "id": 327776730,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676381768
    },
    {
        "content": "<p>I think it had to do with file extension though - did you try <code>libhello.so.1</code>?</p>",
        "id": 327776794,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676381790
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"524658\">@Juliano</span></p>",
        "id": 327776883,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676381816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/ruby-interop.20fails/near/327776794\">said</a>:</p>\n<blockquote>\n<p>I think it had to do with file extension though - did you try <code>libhello.so.1</code>?</p>\n</blockquote>\n<p>yes. no change</p>",
        "id": 327784142,
        "sender_full_name": "dank",
        "timestamp": 1676383749
    },
    {
        "content": "<p>i don't remember hitting this <code>mainForHost</code> problem specifically</p>",
        "id": 327791661,
        "sender_full_name": "Juliano",
        "timestamp": 1676385613
    },
    {
        "content": "<p>lemme look at our setup to see what extra we got compared to dank's stuff</p>",
        "id": 327791847,
        "sender_full_name": "Juliano",
        "timestamp": 1676385658
    },
    {
        "content": "<p>we had to <code>ln -sf libhello.so.1.0 libhello.so.1</code> and <code>ln -sf libhello.so.1 libhello.so</code>, else <code>demo.so</code> wouldn't be properly linked (different error tho)</p>",
        "id": 327792299,
        "sender_full_name": "Juliano",
        "timestamp": 1676385770
    },
    {
        "content": "<p>On Linux, for this to work we also needed to set either <code>LD_LIBRARY_PATH</code> to this directory or <code>LD_PRELOAD</code> to the absolute path of <code>libhello.so</code></p>",
        "id": 327792530,
        "sender_full_name": "Juliano",
        "timestamp": 1676385836
    },
    {
        "content": "<p>i think patchelf could've helped avoid <code>LD_LIBRARY_PATH</code> stuff, but i was lazy</p>",
        "id": 327792782,
        "sender_full_name": "Juliano",
        "timestamp": 1676385881
    },
    {
        "content": "<p>it might be some difference in <code>demo.c</code>? also we're using a pretty old version of roc (3-4mo old?)</p>",
        "id": 327793384,
        "sender_full_name": "Juliano",
        "timestamp": 1676386022
    },
    {
        "content": "<p>this is my demo.c <a href=\"https://gist.github.com/omnibs/e6c09b8fee711549d7009e234c34f438\">https://gist.github.com/omnibs/e6c09b8fee711549d7009e234c34f438</a></p>",
        "id": 327793511,
        "sender_full_name": "Juliano",
        "timestamp": 1676386063
    },
    {
        "content": "<p>might also be something with your roc lib's platform? our PoC used this: <a href=\"https://gist.github.com/omnibs/8cd4eedae5f4c645fc857c86bc213d6a\">https://gist.github.com/omnibs/8cd4eedae5f4c645fc857c86bc213d6a</a></p>",
        "id": 327794400,
        "sender_full_name": "Juliano",
        "timestamp": 1676386243
    },
    {
        "content": "<p>then you use it in your lib's <code>main.roc</code> like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;libhello&quot;\n    packages { pf: &quot;platform/main.roc&quot; }\n    imports []\n    provides [makeItRoc] to pf\n\nmakeItRoc : Str -&gt; Str\nmakeItRoc = \\str -&gt;\n    if Str.isEmpty str then\n        &quot;I need a string here!&quot;\n    else\n        &quot;\\(str), OH YEAH!!! ðŸ¤˜ðŸ¤˜&quot;\n</code></pre></div>",
        "id": 327794516,
        "sender_full_name": "Juliano",
        "timestamp": 1676386267
    },
    {
        "content": "<p>the other stuff mentioned didnt seem to make a difference but</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>nix-shell:~/dev/roc/examples/ruby-interop<span class=\"o\">]</span>$<span class=\"w\"> </span><span class=\"nv\">LD_PRELOAD</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span><span class=\"s2\">/libhello.so.1.0\"</span><span class=\"w\"> </span>ruby<span class=\"w\"> </span>extconf.rb\nruby:<span class=\"w\"> </span>symbol<span class=\"w\"> </span>lookup<span class=\"w\"> </span>error:<span class=\"w\"> </span>/home/dankey/dev/roc/examples/ruby-interop/libhello.so.1.0:<span class=\"w\"> </span>undefined<span class=\"w\"> </span>symbol:<span class=\"w\"> </span>roc_alloc\n</code></pre></div>",
        "id": 327853391,
        "sender_full_name": "dank",
        "timestamp": 1676401701
    },
    {
        "content": "<p>good news bad news<br>\nbad news is that the ruby-interop doesn't work and idk how to make it work</p>\n<p>good news:</p>",
        "id": 328128102,
        "sender_full_name": "dank",
        "timestamp": 1676503781
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/PFgeg1Y1QxjW2wFklE_G-cMS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/PFgeg1Y1QxjW2wFklE_G-cMS/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/PFgeg1Y1QxjW2wFklE_G-cMS/image.png\"></a></div>",
        "id": 328128129,
        "sender_full_name": "dank",
        "timestamp": 1676503801
    },
    {
        "content": "<p>gottem</p>",
        "id": 328128178,
        "sender_full_name": "dank",
        "timestamp": 1676503806
    },
    {
        "content": "<p>haha. cool</p>",
        "id": 328129094,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1676504325
    },
    {
        "content": "<p>yooooo awesome!!!</p>",
        "id": 328132248,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676506118
    },
    {
        "content": "<p>want to make a PR to add that to <code>examples</code>?</p>",
        "id": 328132262,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676506124
    },
    {
        "content": "<p>that would be our second dynamic language interop example ever!</p>",
        "id": 328132281,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676506141
    },
    {
        "content": "<p>Wow, this is very cool!!</p>",
        "id": 328157857,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1676526216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/ruby-interop.20fails/near/328132262\">said</a>:</p>\n<blockquote>\n<p>want to make a PR to add that to <code>examples</code>?</p>\n</blockquote>\n<p>PR's up :)</p>",
        "id": 328272582,
        "sender_full_name": "dank",
        "timestamp": 1676562682
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/4TOjtwlDHYy_VUSvYizDcfPl/image.png\">image.png</a> <br>\nwhy does it say it like that<br>\nsounds so rude lol</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/4TOjtwlDHYy_VUSvYizDcfPl/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/4TOjtwlDHYy_VUSvYizDcfPl/image.png\"></a></div>",
        "id": 328355604,
        "sender_full_name": "dank",
        "timestamp": 1676589702
    },
    {
        "content": "<p>in any case <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> I added zulip link + some readme cleanup bc it seemed not great + some key notes on the demo.c implementation<br>\nhope that's better</p>",
        "id": 328355730,
        "sender_full_name": "dank",
        "timestamp": 1676589752
    },
    {
        "content": "<p>looks great, thank you - approved!</p>",
        "id": 328363209,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676593655
    },
    {
        "content": "<p>the ruby interop example is/was broken. I'm not sure it ever really worked</p>",
        "id": 328536270,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1676658192
    },
    {
        "content": "<p>it definitely did on a M1 Mac (I haven't tried recently though; it may have regressed), and Juliano and I used it to get Ruby interop working on NixOS</p>",
        "id": 328543778,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676660659
    },
    {
        "content": "<p>good thing I stumbled upon that ruby-interop example though</p>\n<p><a href=\"/user_uploads/22008/2PXX6R4kdBeVLo7YjEdjnhMd/image.png\">image.png</a> <br>\nI'm no expert, but I'd say that's pretty dank</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/2PXX6R4kdBeVLo7YjEdjnhMd/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/2PXX6R4kdBeVLo7YjEdjnhMd/image.png\"></a></div>",
        "id": 328579223,
        "sender_full_name": "dank",
        "timestamp": 1676675011
    },
    {
        "content": "<p>Lots of languages can speak c. Though some may make it hard to deal with more complex roc types</p>",
        "id": 328592708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1676683502
    },
    {
        "content": "<p>yoooo that's awesome!!!</p>",
        "id": 328599290,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676689339
    },
    {
        "content": "<p>is that using JNI?</p>",
        "id": 328599321,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676689358
    },
    {
        "content": "<p>yes indeed<br>\ngotta say JNI is much nicer to work with than I anticipated</p>",
        "id": 328629682,
        "sender_full_name": "dank",
        "timestamp": 1676711092
    },
    {
        "content": "<p>actually panama might be better for us<br>\ncause jextract can auto generate the java glue</p>\n<p>meaning the user wouldn't need to write any java (including the static load and native method decls)</p>\n<p>so that he could, from any jvm lang at all (be it clojure scala or whatnot), build the deps and import functions from the java glue</p>",
        "id": 328650068,
        "sender_full_name": "dank",
        "timestamp": 1676720097
    },
    {
        "content": "<p>also that would make it work for jshell<br>\nbc jshell and JNI do not play nice as it turns out</p>",
        "id": 328652176,
        "sender_full_name": "dank",
        "timestamp": 1676720869
    },
    {
        "content": "<p>interesting! Would any of the JNI alternatives require a third-party dependency?</p>",
        "id": 328705091,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676741755
    },
    {
        "content": "<p>when it comes to interop, I generally try to avoid third-party deps if possible</p>",
        "id": 328705173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676741788
    },
    {
        "content": "<p>damn i thought it wouldn't but it seems that openjdk, even 19 only contains only the api for it, <br>\nand the  jextract binary ships separately <br>\nso it is kinda third party dep <a href=\"https://jdk.java.net/panama/\">https://jdk.java.net/panama/</a></p>",
        "id": 328708927,
        "sender_full_name": "dank",
        "timestamp": 1676743686
    },
    {
        "content": "<p>btw are you ok with having <a href=\"https://github.com/sheredom/json.h\">https://github.com/sheredom/json.h</a> ?<br>\njava doesn't have a json parser</p>",
        "id": 328708993,
        "sender_full_name": "dank",
        "timestamp": 1676743742
    },
    {
        "content": "<p>yeah seems reasonable as a starting point</p>",
        "id": 328709044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676743784
    },
    {
        "content": "<p>eventually JSON shouldn't be necessary, it's just a really convenient way to get interop with a given language up and running <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 328709128,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676743805
    },
    {
        "content": "<p>you mean for an <code>examples/</code> entry, yeah?</p>",
        "id": 328709151,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676743818
    },
    {
        "content": "<p>yea</p>",
        "id": 328709159,
        "sender_full_name": "dank",
        "timestamp": 1676743823
    },
    {
        "content": "<p>yeah sounds good!</p>",
        "id": 328709169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1676743829
    },
    {
        "content": "<p>just letting u know  i haven't forgot about the jvm-interop, just ran into some issues trying to generalize to langs like clojure<br>\nright now kinda waiting for the headless release to come out so my mate who's a jvm god will help smooth out some rough jvm edges</p>",
        "id": 340237880,
        "sender_full_name": "dank",
        "timestamp": 1678233395
    },
    {
        "content": "<p>nice, thanks for the update - looking forward to it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 340251499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678240032
    },
    {
        "content": "<p>What OS is your friend using <span class=\"user-mention\" data-user-id=\"583319\">@dank</span>? I'll make sure to test the headless release on that OS once it's ready</p>",
        "id": 340303198,
        "sender_full_name": "Anton",
        "timestamp": 1678266714
    },
    {
        "content": "<p>debian</p>",
        "id": 340303521,
        "sender_full_name": "dank",
        "timestamp": 1678266799
    },
    {
        "content": "<p>hello hello<br>\ni think jvm-interop is ready<br>\n<a href=\"https://github.com/dankeyy/roc/tree/jvm-interop/examples/jvm-interop\">https://github.com/dankeyy/roc/tree/jvm-interop/examples/jvm-interop</a></p>\n<p>tested on java kotlin and scala</p>\n<p>couldn't get clojure to work because its import system is weird. <br>\npeople suggested all kinda import tools and deps which i didn't want to dive into. <br>\nif anyone here though got a simple solution that'd be great</p>\n<p>also i kinda ditched the json encoding part, hope that's ok (?)<br>\nWas kinda trivial to just grab the bytes, but tell me if that's bad somehow and we can switch back</p>\n<p>also have to say jvm Strings are an absolute meme <a href=\"https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html#wp16542\">https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html#wp16542</a><br>\nspent way too long trying to find a way around it that wouldn't require rewriting utf8 lmao, but i did find a pretty nice simple solution which is to convert it first into a java byte array, then to string. by that \"outsourcing\" the conversion to the jvm </p>\n<p>so yea pretty fun.  tell me what you think, and ill pr if it's ready</p>",
        "id": 341179735,
        "sender_full_name": "dank",
        "timestamp": 1678564799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583319\">dank</span> <a href=\"#narrow/stream/231634-beginners/topic/ruby-interop.20fails/near/341179735\">said</a>:</p>\n<blockquote>\n<p>also i kinda ditched the json encoding part, hope that's ok (?)</p>\n</blockquote>\n<p>yeah totally! That was just a way to quickly get a more useful proof-of-concept than just sending (for example) strings or bytes across, without having to go as far as to write translations for all the target language's datatypes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 341179958,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678564961
    },
    {
        "content": "<p>of course if you want a fully-featured interop, you'd need to actually do that (e.g. in the Ruby one, converting not just Ruby strings to/from Roc strings, but also Roc Lists to Ruby Arrays...etc)</p>",
        "id": 341179992,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678564989
    },
    {
        "content": "<p>but you gotta start somewhere, and these examples that just demonstrate the interop with one datatype are still super useful!</p>",
        "id": 341180016,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678565016
    },
    {
        "content": "<p>that totally looks ready to PR to me</p>",
        "id": 341180217,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678565211
    },
    {
        "content": "<p>wow, I'm impressed by how little code it takes on the JVM side</p>",
        "id": 341180233,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678565227
    },
    {
        "content": "<p>I was expecting a lot more!</p>",
        "id": 341180237,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678565230
    },
    {
        "content": "<p>yeaa, was really surprised by jni here<br>\nalso in the beginning the bridge function was more involved but i managed to cut some stuff out which was great</p>",
        "id": 341180778,
        "sender_full_name": "dank",
        "timestamp": 1678565632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/ruby-interop.20fails/near/341180016\">said</a>:</p>\n<blockquote>\n<p>but you gotta start somewhere, and these examples that just demonstrate the interop with one datatype are still super useful!</p>\n</blockquote>\n<p>yea it'd be nice if we'd have that but i feel like a break from jvm lol</p>\n<p>so i say we pr it and if anyone here want to interop arrays too, build on it !</p>",
        "id": 341180939,
        "sender_full_name": "dank",
        "timestamp": 1678565749
    },
    {
        "content": "<p>yeah totally!</p>",
        "id": 341181081,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678565836
    },
    {
        "content": "<p>happy to say clojure example works aswell<br>\nturns out in clojure u need to mention the path like so <code>clj -Sdeps '{:paths [\".\"]}'</code></p>",
        "id": 341186565,
        "sender_full_name": "dank",
        "timestamp": 1678570201
    },
    {
        "content": "<p>ooo nice!</p>",
        "id": 341186923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678570450
    },
    {
        "content": "<p>so i wanna make the interops more complete and i have a couple questions</p>\n<ol>\n<li>\n<p>what do you think are compelling function examples for interops?<br>\nneeds to be cool, but not too complex as to not distract from the subject<br>\nsomething like take this java array + scalar and return a new java array with all elements multipled by the scalar?</p>\n</li>\n<li>\n<p>to pass the platform a List &lt;N&gt;, I need a RocBytes+init_rocbytes of appropriate size, right?<br>\nbut what if i have a couple of those<br>\nlike i want List U8 and also List U32<br>\nRocBytes can only have one definition <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</li>\n</ol>",
        "id": 341889866,
        "sender_full_name": "dank",
        "timestamp": 1678823240
    },
    {
        "content": "<p>oh wait i might be dense<br>\nThe \"RocBytes\" name isn't demanded by the platform</p>\n<p>yea nvm about the second point then<br>\nI can just make RocBytesN structs and populate them however i want from roc side,  i think</p>",
        "id": 341892266,
        "sender_full_name": "dank",
        "timestamp": 1678823994
    },
    {
        "content": "<p>i also understand host.c serves no purpose in my impl. kinda carried over from ruby interop (looking back im not even sure why it has a main)</p>\n<p>like all of the necessary logic is in bridge.c<br>\n<span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> you know what im saying?</p>",
        "id": 341912578,
        "sender_full_name": "dank",
        "timestamp": 1678831058
    },
    {
        "content": "<p>and if no decoding is necessary, then the indirection between platform/main.roc and main.roc is redundant (all the platform/main.roc) does it call the app's function</p>",
        "id": 341913357,
        "sender_full_name": "dank",
        "timestamp": 1678831351
    },
    {
        "content": "<p>rather it's not that the platform is redundant<br>\nit's that the app isn't really an app, it just serves like a proxy here</p>\n<p>it might just be that a language interop is a special case but it seems to me that here, all logic is platform logic</p>",
        "id": 341913579,
        "sender_full_name": "dank",
        "timestamp": 1678831460
    },
    {
        "content": "<p>to make a long story short i feel like all that is needed here is one .c file and one .roc file</p>",
        "id": 341913704,
        "sender_full_name": "dank",
        "timestamp": 1678831532
    }
]