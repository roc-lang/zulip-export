[
    {
        "content": "<p>hey folks - I was trying to implement something like andMap in Elixir and I was kinda stuck since there is no currying (the primitive typespec there won't help me tho I _can_ make it work just not in the type level atm).</p>\n<p>I was wondering if there was already something available for Roc since it is a language with a proper typesystem but no currying as well.</p>",
        "id": 289665897,
        "sender_full_name": "Georges Boris",
        "timestamp": 1657843026
    },
    {
        "content": "<p>I'm not 100% clear on what the exact problem is. Can you write out an example of how you wish it worked then we can suggest how to get it working?<br>\nThe way to  do currying in general is to return a function from a function. In other words we don't have _automatic_ currying but you can do it yourself. So that's the same as Elixir, I believe, isn't it?</p>",
        "id": 289695621,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1657871141
    },
    {
        "content": "<p>What exactly do you want the semantics to <code>andMap</code> to be? <br>\nSomething similar to <code>Result.after</code> perhaps?</p>\n<p>Which function or behaviour from which Elixir library/module are you trying to port? I have quite a bit of experience with Elixir so I might be able to help with the difference and similarities between Elixir's and Roc's semantics.</p>",
        "id": 289709206,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657880376
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> Wait. Do you want to port an Elixir snippet to Roc? Or a Roc snippet to Elixir?</p>",
        "id": 289709312,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657880446
    },
    {
        "content": "<p>I'm actually trying to \"port\" something from Elm to Elixir and I think the trouble is similar because it is related to partial application.</p>\n<p>but say I have something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>a = Result a\nb = Result b\nc = Result c\n</code></pre></div>\n<p>and I want to create a function similar to <code>mapN</code> <code>map3 myFn a b c</code></p>\n<p>I can create various map map2 map3 etc but what is really useful is creating an <code>andMap</code> function, right?<br>\nI'm having trouble in defining such a function without relying on partial application.</p>",
        "id": 289711268,
        "sender_full_name": "Georges Boris",
        "timestamp": 1657881906
    },
    {
        "content": "<p>also... this is super useful for creating extensible type safe API's... not just mapping functors. so I'm curious on how to solve it without partial application.</p>\n<p>e.g.<br>\nI've recently created an API for creating forms that look like this using the same pattern:</p>\n<div class=\"codehilite\"><pre><span></span><code>formFor User\n|&gt; string .name\n|&gt; int .age\n|&gt; select .role [ Admin, Editor, Viewer ]\n</code></pre></div>",
        "id": 289715386,
        "sender_full_name": "Georges Boris",
        "timestamp": 1657884992
    },
    {
        "content": "<p>Ah!</p>",
        "id": 289719711,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657887972
    },
    {
        "content": "<p>Yes, this is really difficult without automatic currying</p>",
        "id": 289719730,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657887987
    },
    {
        "content": "<p>I'm writing a Roc parser right now, and stumbled across the same thing.<br>\nCurrently, the best design seems to be to manually curry the function:</p>\n<div class=\"codehilite\"><pre><span></span><code>a = Ok &quot;John&quot;\nb = Ok &quot;Doe&quot;\nc = Ok 42\n\nResult (\\a -&gt; \\b -&gt; \\c -&gt; myFn a b c)\n|&gt; apply a\n|&gt; apply b\n|&gt; apply c\n</code></pre></div>\n<p>Where for Result, <code>apply</code> would look like:</p>\n<div class=\"codehilite\"><pre><span></span><code>apply : (Result (a -&gt; b) *) x, Result a x-&gt; Result b x\napply = \\funResult, valResult -&gt;\n  when funResult is\n    Err problem -&gt;\n      Err problem\n    Ok fun -&gt;\n      when valResult is\n        Err problem -&gt;\n          Err problem\n        Ok val -&gt;\n          (fun val)\n</code></pre></div>",
        "id": 289720278,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657888369
    },
    {
        "content": "<p>The Elixir <a href=\"https://hexdocs.pm/witchcraft/readme.html\">Witchcraft</a> library, for instance, curries functions you pass in to the analogous <code>map</code>/<code>apply</code>/<code>const</code> automatically for you (courtesy of a dynamic type system).</p>",
        "id": 289720581,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657888595
    },
    {
        "content": "<p>I wrote the Elixir library <a href=\"https://github.com/Qqwy/elixir-currying\">Currying</a> a while back to do (only) currying for you when desired.</p>",
        "id": 289720688,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657888673
    },
    {
        "content": "<p>If you want to write your own thing.</p>",
        "id": 289720698,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657888680
    },
    {
        "content": "<p>As for Roc: What we _do_ have builtin right now is the backpassing syntax and e.g. <code>Result.after</code> (and <code>Task.after</code>, <code>List.joinMap</code> etc) which work with it.<br>\nThis is fine for types for which there is no difference in how they work 'monadically' vs 'applicatively'. (Which is not all of them; applicative implementations can be more efficient and more flexible.)</p>\n<p>But for those you can write e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>aVal &lt;- Result.after a\nbVal &lt;- Result.after b\ncVal &lt;- Result.after c\nmyFun aVal bVal cVal\n</code></pre></div>\n<p>in Roc</p>",
        "id": 289721079,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657888899
    },
    {
        "content": "<p>Yeah – in Roc the manually curried function is not that bad… in Elixir is kinda crazy how verbose the lambdas are.</p>\n<p>But we do have the <code>Kernel.apply</code> that can use a list of values to a given function arguments and call it.<br>\nI've found <a href=\"https://cdsmithus.medium.com/applicative-without-currying-f4c3bd9f1552\">this article</a> that talks about \"Tuplicative\" and I wonder if  it could be of any value to this discussion…</p>\n<p>I wonder what would the API for something like <a href=\"https://package.elm-lang.org/packages/NoRedInk/elm-json-decode-pipeline/latest/\">Json.Decode.Pipeline</a> look like in Roc.</p>",
        "id": 289723304,
        "sender_full_name": "Georges Boris",
        "timestamp": 1657890144
    },
    {
        "content": "<p>my thinking was always to do it with backpassing, e.g. porting <a href=\"https://package.elm-lang.org/packages/NoRedInk/elm-json-decode-pipeline/latest/\">the example from the docs</a></p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">userDecoder</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Decoder</span><span class=\"w\"> </span><span class=\"nc\">User</span><span class=\"w\"></span>\n<span class=\"n\">userDecoder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"s2\">\"id\"</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">email</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"s2\">\"email\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">optional</span><span class=\"w\"> </span><span class=\"s2\">\"name\"</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"s2\">\"(fallback if name is `null` or not present)\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nc\">Decode</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">email</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">percentExcited</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 289723841,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657890409
    },
    {
        "content": "<p>of course the types of <code>required</code> and <code>optional</code> would be different in that design</p>",
        "id": 289724037,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1657890513
    },
    {
        "content": "<p>Just doing a mock design here - but maybe this could also work for my form example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">int</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">select</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">option</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">option</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Form</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n\n<span class=\"nv\">form</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fields</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"kt\">Fields</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"c1\">-- a : { a &amp; name : String }</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fields1</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">int</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"nv\">age</span><span class=\"w\"> </span><span class=\"nv\">fields</span><span class=\"w\"> </span><span class=\"c1\">-- a : { a &amp; name: String, age: Int }</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fields2</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">select</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"nv\">role</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Admin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Editor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Viewer</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">fields1</span><span class=\"w\"> </span><span class=\"c1\">-- a : { a &amp; name: String, age: Int, role: [ Admin, Editor, Viewer ]  }</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">formFor</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"name\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">age</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">role</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Admin</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">fields2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Would that work as expected? With extensible records I think(?) order would be irrelevant tho the backpassing would make passing the previous values explicitly a lil bit verbose. Not a deal breaker. (does Roc support shadowing?) if so the 1 2 3 could be simplified a bit.</p>",
        "id": 289746158,
        "sender_full_name": "Georges Boris",
        "timestamp": 1657900522
    }
]