[
    {
        "content": "<p>With backpassing gone, I feel like I have to rearrange the <code>!</code> often when pipelining tasks (make sure it's only on the last task). Is there like an \"identity\" task or something I can throw on the end of a task chain just to always act as the final task to await on? So instead of:</p>\n<div class=\"codehilite\"><pre><span></span><code>            |&gt; Task.fromResult\n            |&gt; Task.mapErr! (\\_ -&gt; &quot;Failed to find enum $(enumName)&quot;)\n</code></pre></div>\n<p>something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>            |&gt; Task.fromResult\n            |&gt; Task.mapErr (\\_ -&gt; &quot;Failed to find enum $(enumName)&quot;)\n            |&gt; Task.do!\n</code></pre></div>",
        "id": 474951165,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728109336
    },
    {
        "content": "<p>The issue I run in to is I'll write a single task, then realize I need to pipe it into another task like Task.mapError, but I forget to move the ! and it takes a while to figure out what the compiler is complaining about</p>",
        "id": 474951723,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728109627
    },
    {
        "content": "<p>I haven't tried it, but I believe just the identity function would work!</p>",
        "id": 474956731,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1728113763
    }
]