[
    {
        "content": "<p>What's the intended/ideal multi-line formatting for the following?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">d</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271231969,
        "sender_full_name": "jan kili",
        "timestamp": 1644383735
    },
    {
        "content": "<p>I can't write multi-line records in the repl, but in a module the above fails to parse while the below doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">d</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That seems a little weird :/</p>",
        "id": 271232196,
        "sender_full_name": "jan kili",
        "timestamp": 1644383985
    },
    {
        "content": "<p>I feel like the first example failing to parse is a bug... or maybe the second example successfully parsing is a bug instead! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 271232298,
        "sender_full_name": "jan kili",
        "timestamp": 1644384077
    },
    {
        "content": "<p>This way works and looks nice:</p>\n<div class=\"codehilite\"><pre><span></span><code>a =\n    {\n        b: c,\n        d: {\n            e: f,\n        },\n    }\n</code></pre></div>\n<p>I do think the first one not parsing is a bug.</p>",
        "id": 271246316,
        "sender_full_name": "Anton",
        "timestamp": 1644396938
    },
    {
        "content": "<p>Ooh, that's pretty and practical, thank you!<br>\nI'll report that parsing bug, then.</p>",
        "id": 271268637,
        "sender_full_name": "jan kili",
        "timestamp": 1644409467
    },
    {
        "content": "<p>it's actually not a bug, unless we want to make the parser more complicated <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 271271461,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644411139
    },
    {
        "content": "<p>which I guess we've never fully explored, so I'll post about it in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/outdent.20parsing\">#ideas &gt; outdent parsing</a></p>",
        "id": 271271508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1644411164
    }
]