[
    {
        "content": "<p>I saw <span class=\"user-mention\" data-user-id=\"726142\">@Ray Myers</span> shared a lisp interpreter recently, which reminded me of a half finished lisp interpreter I started a while ago. It's currently a one-to-one translation of <a href=\"https://github.com/gleam-lang/example-lisp-interpreter\">this Gleam example repo</a> to try and have a fair performance comparison, but I would like to translate it to more idiomatic Roc once it's working.</p>\n<p>The repo is <a href=\"https://github.com/Hasnep/roc-lisp\">here</a>, and running <code>roc check src/lib/main.roc</code> results in</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre></div>\n<p>I know I had a compiling project a while ago, but now that I've come back to it I've forgotten what I was working on when it broke <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I think the type definitions broke it, replacing type aliases with their defintions seems to help. e.g. replacing every occurence of <code>Procedure</code> with its definition <code>List Expr, State -&gt; Evaluated</code> helps reduce the crashes.</p>\n<p>I did a binary search commenting out half of the code from the bottom up and this line was the one that changed from a crash to an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Scope : Dict Str Expr\n</code></pre></div>",
        "id": 455636193,
        "sender_full_name": "Hannes",
        "timestamp": 1722515767
    },
    {
        "content": "<p>I have a MWE now, this code has a recursive alias error, but the compiler crashes before it can show the error</p>\n<div class=\"codehilite\"><pre><span></span><code>Expr : [\n    # ListExpr (List Expr),\n    # BoolExpr Bool,\n    # IntExpr I64,\n    ProcedureExpr Procedure,\n]\n\nScope : Dict Str Expr\n\nState : { globalScope : Scope, localScope : Scope }\n\nProcedure : List Expr, State-&gt; Evaluated\n</code></pre></div>\n<p>Replacing <code>Procedure</code> with it's definition like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Procedure : List Expr, { globalScope : Dict Str Expr, localScope : Dict Str Expr } -&gt; Evaluated\n</code></pre></div>\n<p>fixes the compiler crash and shows the error</p>",
        "id": 455830686,
        "sender_full_name": "Hannes",
        "timestamp": 1722574853
    },
    {
        "content": "<p>I think there is a known bug where recursive unions have to be defined in one type.</p>",
        "id": 455834041,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722576500
    },
    {
        "content": "<p>I don't properly understand it, but maybe this help you find a solution?</p>",
        "id": 455834406,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722576594
    },
    {
        "content": "<p>I also ran into that, and what Luke suggested was how I got around it - I re-organized my types to make it only recursive not mutually recursive. I think this is the tracked <a href=\"https://github.com/roc-lang/roc/issues/3216\">issue</a> for it if you want to upvote or add info.</p>",
        "id": 455837137,
        "sender_full_name": "Ray Myers",
        "timestamp": 1722577330
    },
    {
        "content": "<p>Ah thank you both, I'll see if i can get it to compile now</p>",
        "id": 455838421,
        "sender_full_name": "Hannes",
        "timestamp": 1722578030
    }
]