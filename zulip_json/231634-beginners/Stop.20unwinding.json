[
    {
        "content": "<p>Quick question: Roc has <code>crash</code> (similarly to <code>panic!</code> in Rust), but does it also have an equivalent to <code>catch_unwind</code>?</p>",
        "id": 473142561,
        "sender_full_name": "Kasper Møller Andersen",
        "timestamp": 1727452050
    },
    {
        "content": "<p>no, and the explicit plan is to never introduce anything like that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 473144111,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727452308
    },
    {
        "content": "<p>Alright, thanks :D</p>",
        "id": 473144443,
        "sender_full_name": "Kasper Møller Andersen",
        "timestamp": 1727452358
    },
    {
        "content": "<p>to elaborate, <code>crash</code> is intended to be used only when there is no possible way to gracefully recover, and exiting the program is the only option - or when you're in a branch that you think should never be reachable (and there's no reasonable way to rule out that branch at compile time)</p>",
        "id": 473144700,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727452402
    },
    {
        "content": "<p>Yup, that was my assumption. I'm still just mulling over error handling in general, so I just wanted to check before I go off on some irrelevant tangent <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 473145266,
        "sender_full_name": "Kasper Møller Andersen",
        "timestamp": 1727452487
    }
]