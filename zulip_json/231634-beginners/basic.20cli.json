[
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/blob/main/platform/InternalHttp.roc#L14\">https://github.com/roc-lang/basic-cli/blob/main/platform/InternalHttp.roc#L14</a></p>",
        "id": 445413501,
        "sender_full_name": "Albert",
        "timestamp": 1718730035
    },
    {
        "content": "<p><code>Header : [Header Str Str]</code> is this a recursive type definition?</p>",
        "id": 445413598,
        "sender_full_name": "Albert",
        "timestamp": 1718730065
    },
    {
        "content": "<p>Why is header defined this way? Why not just <code>headers:  List {name: Str, value: Str}</code>? <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 445413895,
        "sender_full_name": "Albert",
        "timestamp": 1718730143
    },
    {
        "content": "<p>Not sure if I have the correct syntax, but I meant a list of key value pairs</p>",
        "id": 445413974,
        "sender_full_name": "Albert",
        "timestamp": 1718730171
    },
    {
        "content": "<blockquote>\n<p><code>Header : [Header Str Str]</code></p>\n</blockquote>\n<p>This is not recursive</p>",
        "id": 445416164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718730816
    },
    {
        "content": "<p>What's the meaning?</p>",
        "id": 445416224,
        "sender_full_name": "Albert",
        "timestamp": 1718730834
    },
    {
        "content": "<p>This is a tag union called <code>Header</code> with a single variant called <code>Header</code>.</p>",
        "id": 445416227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718730835
    },
    {
        "content": "<p>What will a tag union with &gt;=2 variants look like?</p>",
        "id": 445416359,
        "sender_full_name": "Albert",
        "timestamp": 1718730869
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Header : [\n  WithVal Str Str,\n  NoVal Str,\n]\n</code></pre></div>",
        "id": 445416466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718730905
    },
    {
        "content": "<p>It probably should be defined as either <code>(Str, Str)</code> or <code>{name: Str, value: Str}</code></p>\n<p>I would guess that this code was written before we had tuples. <code>Header : [Header Str Str]</code> is kinda a weird tuple</p>",
        "id": 445416562,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718730941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Header: [\n  WithVal Str Str,\n  NoVal Str,\n]\n``` with or without the `:`?\n</code></pre></div>",
        "id": 445416597,
        "sender_full_name": "Albert",
        "timestamp": 1718730954
    },
    {
        "content": "<p>oh sorry, with the <code>:</code></p>",
        "id": 445416714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718730976
    },
    {
        "content": "<p>Do you mean that <code>Header: [Header Str Str]</code> is effective the same as <code>Header: (Str, Str)</code>?</p>",
        "id": 445417139,
        "sender_full_name": "Albert",
        "timestamp": 1718731126
    },
    {
        "content": "<p>They are different types in Roc, but will they be compiled to the same code?</p>",
        "id": 445417246,
        "sender_full_name": "Albert",
        "timestamp": 1718731153
    },
    {
        "content": "<p>yeah this is just old code I think; we used to have a different syntax for opaque types (basically; the feature worked a bit differently) that looked more like <code>Header : [@Header Str Str]</code> and my guess is that when we changed to the current design for opaque types ,we just dropped the <code>@</code> as a quick fix there and it's just stayed that way ever since <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 445468643,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718747863
    },
    {
        "content": "<p>another possible explanation is that there was a long time where we had tag unions but not tuples, so you couldn't write <code>Header : (Str, Str)</code></p>",
        "id": 445468766,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718747898
    },
    {
        "content": "<p>but yeah, there's no reason it needs to be <code>[Header Str Str]</code> and it seems reasonable to change it to something more sensible - either an opaque type or a tuple, most likely <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 445468803,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718747923
    }
]