[
    {
        "content": "<p>With the new ! syntax, what would be the recommended way to convert from a task to a result?</p>\n<div class=\"codehilite\"><pre><span></span><code>result &lt;- Task.attempt task\nuseResult result\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>result = Task.result! task\nuseResult result\n</code></pre></div>\n<p>I assume the new way is going to be more idiomatic. Are there any differences, both functionally as performance?</p>",
        "id": 445883363,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718898061
    },
    {
        "content": "<p>I'm very new to Roc myself, but yesterday I was told that usage of the left arrow <code>&lt;-</code> is probably going to be removed from the language. So your second example is probably the preferred syntax</p>",
        "id": 445894338,
        "sender_full_name": "Mythmon",
        "timestamp": 1718901244
    },
    {
        "content": "<p>Yep, second example is preferred</p>",
        "id": 445938554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718912478
    },
    {
        "content": "<p>I didn't now <code>&lt;-</code> was going to be removed completely. Does this mean we won't be able to (ab)use it anymore with functions like <code>List.map</code>?</p>",
        "id": 445945741,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718914834
    },
    {
        "content": "<p>It's really bittersweet to me... But assuming <code>!</code> goes well and uses of <code>&lt;-</code> are pretty low, the plan is to eventually fully remove it.</p>",
        "id": 445951109,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718916493
    },
    {
        "content": "<p>Personally, I like <code>&lt;-</code> for generators and results.</p>",
        "id": 445951161,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718916512
    },
    {
        "content": "<p>Yeah, I use it for result a lot too. But the extended <code>!</code> syntax could cover that</p>",
        "id": 445951335,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718916572
    },
    {
        "content": "<p>But I understand that <code>!</code> causes a ton of confusion for new users and turns people away from the language so we want to remove it if possible. Personally, I wish I could define <code>!</code> on any opaque type. That would make me happy.</p>",
        "id": 445951364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718916583
    },
    {
        "content": "<blockquote>\n<p>But the extended <code>!</code> syntax could cover that</p>\n</blockquote>\n<p>We just need to record enough friction/demand that it actually gets added. Our default is to wait on adding that type of stuff. Makes sure it has clear value.</p>",
        "id": 445951571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718916639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.2Eattempt.20vs.20Task.2Eresult/near/445951364\">said</a>:</p>\n<blockquote>\n<p>Personally, I wish I could define <code>!</code> on any opaque type. That would make me happy.</p>\n</blockquote>\n<p>That would become something like a Monad ability then?</p>",
        "id": 445951709,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718916684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.2Eattempt.20vs.20Task.2Eresult/near/445951571\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But the extended <code>!</code> syntax could cover that</p>\n</blockquote>\n<p>We just need to record enough friction/demand that it actually gets added. Our default is to wait on adding that type of stuff. Makes sure it has clear value.</p>\n</blockquote>\n<p>Makes sense to wait!</p>",
        "id": 445951726,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718916692
    },
    {
        "content": "<p>It would be a <code>andThen</code> ability. Is that enough to be consider a monad ability? But yeah, roughly that.</p>",
        "id": 445952021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718916839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.2Eattempt.20vs.20Task.2Eresult/near/445952021\">said</a>:</p>\n<blockquote>\n<p>It would be a <code>andThen</code> ability. Is that enough to be consider a monad ability? But yeah, roughly that.</p>\n</blockquote>\n<p>I am totally against calling it Monad by the way.<br>\nMonad needs a <code>return</code> too. Like <code>Ok</code> in Result, <code>Task.ok</code> in Task, <code>Core.const</code> in the roc-parser package etc. But explicitly using these functions at the end of a block works just as well. Doesn't need to be part of the ability</p>",
        "id": 445952366,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718916987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.2Eattempt.20vs.20Task.2Eresult/near/445951364\">said</a>:</p>\n<blockquote>\n<p>But I understand that <code>!</code> causes a ton of confusion for new users and turns people away from the language so we want to remove it if possible. Personally, I wish I could define <code>!</code> on any opaque type. That would make me happy.</p>\n</blockquote>\n<p>if <code>!</code> causes confusion and is removed, but <code>&lt;-</code> is also removed, what is left over? Or was this a typo and would only <code>&lt;-</code> be removed? I haven't seen people saying <code>!</code> is confusing</p>",
        "id": 445952515,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718917079
    },
    {
        "content": "<p>Sorry, typo</p>",
        "id": 445953994,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718917693
    },
    {
        "content": "<p>no problem</p>",
        "id": 445954113,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1718917726
    },
    {
        "content": "<p><code>&lt;-</code>: deprecated and likely to be removed<br>\n<code>!</code> for <code>Task</code>: Here to staty<br>\n<code>!</code> for other types: might happen one day if there is enough demand and it isn't considered too confusing.<br>\n<code>?</code> for <code>Result</code>: Was another floated idea...probably won't happen.</p>",
        "id": 445954247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718917784
    },
    {
        "content": "<p>20 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/early.20return.20operator.20for.20Result\">#ideas &gt; early return operator for Result</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 445987851,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718937016
    },
    {
        "content": "<p>I gotta say, I’m going to miss the <code>&lt;-</code> back passing syntax too… <code>!</code> await covers a lot of use cases, but it is really nice to be able to pull nested lambdas down to one indentation level.</p>\n<p>I was in the camp of people who found it confusing at first, but I actually just wonder if the tutorial section on that needed a little reworking, as now it seems like a totally straightforward concept.</p>",
        "id": 446011550,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718949997
    }
]