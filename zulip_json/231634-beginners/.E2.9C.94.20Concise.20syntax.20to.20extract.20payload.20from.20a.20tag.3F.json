[
    {
        "content": "<p>Is there a concise way to extract a payload from a tag result?</p>\n<p>For example, suppose I have the following code:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\">## Convert a list of string represented values (ordered by level) into a binary tree</span>\n<span class=\"c1\">## values may be a string represented integer, or \"null\"</span>\n<span class=\"nv\">listToTree</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">NodeOrNull</span>\n<span class=\"nv\">listToTree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">lst</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"nx\">lst</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"nv\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">NodeOrNull</span>\n<span class=\"nv\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">lst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">len</span><span class=\"w\"> </span><span class=\"nx\">lst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"nx\">Null</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">strVal</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">lst</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">                </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">str</span>\n<span class=\"w\">                </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">strVal</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nx\">strVal</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"nx\">Null</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">strVal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">                    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">num</span>\n<span class=\"w\">                    </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">InvalidNumStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">            </span><span class=\"nv\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"nx\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nv\">lhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"nx\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nx\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">lhs</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I would like to do something like <code>val = Str.toI64 (List.get lst index)</code> but of course both <code>Str.toI64</code> and <code>List.get</code> return their values as payloads in a tag union.</p>\n<p>Is there a more concise way to express this so I can chain functions together, instead of having to create temporary variables to store values?</p>",
        "id": 412181290,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704905071
    },
    {
        "content": "<p>Generally checking length explicitly leads to extra branching/more explicit code :<code>if (List.len lst) &lt;= index then</code></p>\n<p>Instead, just use the result of <code>List.get</code> for checking that</p>",
        "id": 412181664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704905202
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NodeOrNull</span>\n<span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">lst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">Null</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">                </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">                    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">num</span>\n<span class=\"w\">                        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">InvalidNumStr</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">                </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"kt\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Null</span>\n</code></pre></div>",
        "id": 412181790,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704905259
    },
    {
        "content": "<p>Next, you can use the <a href=\"https://www.roc-lang.org/builtins/Result\">Result helpers</a> here.</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NodeOrNull</span>\n<span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">lst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">Null</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">                </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">                </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"kt\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Null</span>\n</code></pre></div>",
        "id": 412182103,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704905369
    },
    {
        "content": "<p>You also can use guards in when blocks:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NodeOrNull</span>\n<span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">lst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">            </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"kt\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Null</span>\n</code></pre></div>",
        "id": 412182458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704905494
    },
    {
        "content": "<p>A general note:</p>\n<p>If you have multiple results functions in a row and don't want to check each and every one, that is what <a href=\"https://www.roc-lang.org/builtins/Result#try\">Result.try</a> and <a href=\"https://www.roc-lang.org/builtins/Result#map\">Result.map</a> are for. It would enable chaining multiple result functions together. You could instead write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NodeOrNull</span>\n<span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">lst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">nodeRes</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">        </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span>\n\n<span class=\"w\">        </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"kt\">Note</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">reject</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"n\">general</span>\n<span class=\"w\">        </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span>\n<span class=\"w\">        </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kt\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"n\">nodeRes</span><span class=\"w\"> </span><span class=\"kt\">Null</span>\n</code></pre></div>",
        "id": 412183580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704905886
    },
    {
        "content": "<p>Wow, this is great. I'm still in progress learning language features and syntax, so your code examples here are a huge help in fleshing out some of these ideas. Really appreciate your answers here.</p>\n<p>Everything here makes sense up to the last example using Result.try -- I've been trying to understand the back passing syntax, but the more I puzzle over the tutorial section on back passing, the more confused I get. </p>\n<p>As I understand it, <code>str &lt;-</code> defines an anonymous function with an argument named <code>str</code>, much like <code>\\str -&gt;</code> would. But where is the body of the function written? </p>\n<p>Also the <code>|&gt;</code> operator will pass the return of one function on to the following function. It makes sense that Since Result.try expects a Result and a function to transform the Result as arguments, and that since <code>List.get</code> returns a result, this result could be passed on as the first argument to <code>Result.try</code>, but how does the <code>&lt;-</code> operator interact with <code>|&gt;</code>? Where is the body of the function being passed to Result.try? I assume that this function is also the same as the body of the function defined by <code>str &lt;-</code>...</p>\n<p>Why not:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># return val from `List.get` piped to `Result.try `as first argument, anon func `str &lt;- some code` passed as second arg:</span>\n<span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">lst</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">some</span><span class=\"p\">.</span><span class=\"nx\">func</span><span class=\"w\"> </span><span class=\"nx\">body</span><span class=\"w\"> </span><span class=\"nx\">code</span><span class=\"w\"> </span><span class=\"nx\">which</span><span class=\"w\"> </span><span class=\"nx\">operates</span><span class=\"w\"> </span><span class=\"kc\">on</span><span class=\"w\"> </span><span class=\"nx\">str</span>\n</code></pre></div>\n<p>Not sure why this back passing is seeming so incomprehensible to me... seems like I should be able to figure out the syntax just from your code snippet here.</p>",
        "id": 412212205,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704917514
    },
    {
        "content": "<p>backpassing fundamentally removes indentation</p>",
        "id": 412213115,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704917953
    },
    {
        "content": "<p>The body of the function is all of the lines of the code after that line on the same indentation level</p>",
        "id": 412213138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704917970
    },
    {
        "content": "<p>Without backpassing it would be:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NodeOrNull</span>\n<span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">lst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">nodeRes</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n\n<span class=\"w\">            </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"kt\">Note</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">reject</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"n\">general</span>\n<span class=\"w\">            </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"kt\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"n\">nodeRes</span><span class=\"w\"> </span><span class=\"kt\">Null</span>\n</code></pre></div>",
        "id": 412213273,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704918029
    },
    {
        "content": "<p>Okay, this makes sense. Seems counterintuitive based on my understanding of the pipe <code>|&gt;</code> operator passing everything preceding the pipe as the first argument to the function after the pipe. Thanks again though. That does straighten out the confusion. <span aria-label=\"saluting face\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"saluting face\">:saluting_face:</span></p>",
        "id": 412216311,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704919336
    },
    {
        "content": "<p>It is doing that. If you desugar the pipe as well:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NodeOrNull</span>\n<span class=\"nf\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">lst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">nodeRes</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n\n<span class=\"w\">            </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"kt\">Note</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">reject</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"n\">general</span>\n<span class=\"w\">            </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">listToTreeRecur</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"kt\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"n\">nodeRes</span><span class=\"w\"> </span><span class=\"kt\">Null</span>\n</code></pre></div>",
        "id": 412216721,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704919551
    },
    {
        "content": "<p>Yeah, I see that... just throws me off that the <code>str &lt;-</code> precedes the <code>|&gt;</code> even though the function it is defining will be the <em>second</em> argument to <code>Result.try</code> or the <code>val &lt;-</code> function will be the <em>second</em> argument to <code>Result.map</code>.</p>\n<p>Seems like the <code>&lt;-</code> operator modifies the expected behavior of <code>|&gt;</code>. This is something one can learn and remember, just a little annoying that it <em>appears</em> to break the rules.</p>",
        "id": 412217082,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704919722
    },
    {
        "content": "<p>Yeah, desugaring has an order, so makes sense that it can be a bit confusing.</p>",
        "id": 412217976,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704920157
    },
    {
        "content": "<p>Yeah, guess you're right, that's what it boils down to.</p>",
        "id": 412218180,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1704920243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 412218225,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704920275
    }
]