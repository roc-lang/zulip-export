[
    {
        "content": "<p>It seems  that I want to call function recursively, one parameter being a record, I want to alter this record as I pass it down the line (by adding field etc.) like  it was  list. At the  end I wanted to make  certain  action depending  on  pattern matched on specific record produced by this  function. Apparently  entire  scheme is impossible because function seems  to accept  very specific  record and I can't alter that. This  harms  flexibility  since I don't  know  what  kind of  record I need before  running  function. This  restrictions seems artificial, what harm it can cause, to add such capability. How to overcome it using existing  syntax</p>",
        "id": 350302179,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1681646848
    },
    {
        "content": "<p>you cannot add fields to records. Records are static, you cannot dynamically add fields. Something like a <code>Dict</code> might be a better fit</p>",
        "id": 350302656,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681646975
    },
    {
        "content": "<p>ok can I pattern match on dict ?  for example if  it has specific keys in place, if so what is the syntax</p>",
        "id": 350304632,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1681647576
    },
    {
        "content": "<p>you can match on <code>Dict.get yourDict yourKey</code></p>",
        "id": 350305076,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681647675
    },
    {
        "content": "<p>but in a dict, all fields must have the same type, that is a restriction there</p>",
        "id": 350305122,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681647688
    },
    {
        "content": "<p>ok  I can use  dict , but I will require tweaking. It seems weird  though, in some other  languages I can throw garbage I have at hand to any structure or  class using  polymorphism, or  if this is not possible, there exist some  kind of  structure  like python dict  working with various  types. Lacking that  capability is  limiting  (in serious  way)  is there any roadmap to create  some  kind of garbage  friendly  structure like  dict in  python?</p>",
        "id": 350309880,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1681649123
    },
    {
        "content": "<p>No. It sounds like you're used to dynamically typed languages. Statically typed languages require you to learn different ways to write your programs. You can still do everything you can do in dynamic languages, you just need to approach it differently. The reward is faster code and easier refactoring.<br>\nAs I mentioned in one of the other threads, you can use tagged unions to combine different types into one type. They're covered in the tutorial.</p>",
        "id": 350313006,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1681650479
    },
    {
        "content": "<p>ok I used  unions and  it  works but still weird : )</p>",
        "id": 350316723,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1681652067
    },
    {
        "content": "<p>incidentally, dynamic languages like Python use tags under the hood - they're just syntactically invisible</p>",
        "id": 350317936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681652574
    },
    {
        "content": "<p>like in Python when you write <code>[\"foo\", 5, someBoolean]</code> in Roc you would write <code>[Str \"foo\", Num 5, Bool someBoolean]</code></p>",
        "id": 350318021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681652626
    },
    {
        "content": "<p>but Python is tagging them behind the scenes; that's <code>type()</code> and <code>isinstance()</code> know at runtime what the type is (they look at the hidden tag)</p>",
        "id": 350318241,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681652664
    },
    {
        "content": "<p>whereas in Roc instead of using <code>type()</code> or <code>isinstance()</code> you'd do a pattern match like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">myListElement</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># do something with this string</span>\n<span class=\"w\">    </span><span class=\"nx\">Num</span><span class=\"w\"> </span><span class=\"nx\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># do something with this number</span>\n<span class=\"w\">    </span><span class=\"nx\">Bool</span><span class=\"w\"> </span><span class=\"nx\">bool</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># do something with this bool</span>\n</code></pre></div>",
        "id": 350318336,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681652711
    },
    {
        "content": "<p>the pros/cons as I see them are:</p>\n<ul>\n<li>the python way is more concise to define the data structure (but usually not more concise to access it, since you'll probably still need to use <code>type()</code> or <code>isinstance()</code> somewhere in order to do something different based on what you had in there)</li>\n<li>the Roc way is less concise to define, but in return it gives you exhaustiveness checking; the compiler can tell you if you forgot to handle a particular type that could be in the list, and it can also tell you if you have dead code that's checking for something that couldn't possibly be in the list</li>\n</ul>",
        "id": 350318570,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681652806
    },
    {
        "content": "<p>tradeoffs! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 350318585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681652811
    }
]