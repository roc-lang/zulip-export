[
    {
        "content": "<p>As i come from Haskell, typeclasses seem crucial for proper polymorphic functions. I read the roc for elm programmers file, and the Num type seems much like Haskell's Num, but all of the instances are just phantoms holding some <code>a</code>.</p>\n<ol>\n<li>How do the phantom types work for Num's \"instances\" (is there a proper term for these aliases?)</li>\n<li>Is it possible for the programmer to create something akin to Num and create those style of \"instances\"?</li>\n<li>If #2 either isnt possible or not idiomatic, what is? how does one limit the types that a polymorphic function can accept? overloading like in Java exists, but is that really the only good way?</li>\n</ol>",
        "id": 275073105,
        "sender_full_name": "Thomas Dwyer",
        "timestamp": 1647054342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  or <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>  are probably most qualified to answer especially in the type theoretical sense, but I think I know the general answer.</p>\n<p>Currently, <code>Num a</code> is special. It is built into the compiler with special restrictions that a <code>Num a</code> must be either a <code>Float a</code> or <code>Int a</code>. Those must then become specific types <code>F32</code>, <code>I8</code>, etc.</p>\n<p>Currently if I were to make <code>Foo a</code> that <code>a</code> could be anything at all. I have no way to constrain it. (well I could make it <code>Foo (Num a)</code>, but that is just relying on <code>Num a</code>).</p>\n<p>In the future this will be changing. We will be adding abilities. You can think of abilities as java interfaces or rust traits or something of that nature. They enable me to say <code>Foo a where a supports Equality</code>. Now that <code>a</code> must be a type that has <code>==</code>. This will enable regular users to define something akin to <code>Num a</code>.</p>\n<p>More info on abilities in this chat: <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Abilities\">#ideas &gt; Abilities</a></p>",
        "id": 275073407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647054806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484835\">@Thomas Dwyer</span> check out <a href=\"https://github.com/rtfeldman/roc/issues/2463\">this issue</a>!</p>",
        "id": 275074360,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647056356
    },
    {
        "content": "<p>very interesting. i have a few comments on the problems and various discussions (perhaps this belongs in a different thread?)</p>\n<p>syntax. the qualification of abilities <em>at the end</em> feels weird. I see (Num a) as a preface to the type rather than a clarification at the end. this is a minor gripe with the syntax though. perhaps something like <code>f : a is (Addable, Divisible, Multiplicative) in a, a -&gt; a</code>. really, i just find it at the end to be weird. maybe it just takes some getting used to.</p>\n<p>functionlessness in docs. this is a hard one. the \"it wasnt before but now is\" could be extended to give examples of usages which are now broken and ways to mitigate them in a seemless fashion. in documentation, there could be a section on function attributes? i imagine on the side there would be stuff like asymptotics and the usual with some other miscellanea, which seems like it would fit right into. </p>\n<p>custom arithmetic operators. my comment on this is more a side comment. i think we should avoid an overarching Num ability that requires (+), (-), (*) etc. These should definitely be split into their own components. I say this because many things would like to have the ability to be concatenated, but wouldnt make sense to have a division function or even worse some square root function. there could be ability tags, where one can define <code>Num a : [Addable a, Subtractable a, ...]*</code> as an alias like how haskell's -XConstraintKinds allows for kind aliases; i kinda like this approach, as it doesnt seem like a bunch of complexity to an existing system, and the syntax is nearly identical to current tag aliases.</p>",
        "id": 275078464,
        "sender_full_name": "Thomas Dwyer",
        "timestamp": 1647062706
    },
    {
        "content": "<blockquote>\n<p>functionlessness</p>\n</blockquote>\n<p>oh I need to revise the docs - that was before the Abilities design...functionless is not a thing anymore post-Abilities!</p>",
        "id": 275097080,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647091761
    },
    {
        "content": "<p>regarding the <code>Num</code> ability - we talked about that and I think <code>Num</code> is the way to go.</p>\n<p>I agree with James Gosling when he decided not to support operator overloading in Java based on how he saw it being used in C++, and although I want custom numeric types to exist (e.g. a user-defined <code>Fraction</code> or <code>Complex</code> type, or numbers with units of measure), I think it's a step in the wrong direction to have <code>+</code> being used in arbitrary DSLs or overloaded for something like concatenation of strings or other collections.</p>\n<p>I think it makes it much clearer that arithmetic operators should only be used for numbers if it's required to implement all the numeric operations in order to use them!</p>",
        "id": 275098601,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647093874
    },
    {
        "content": "<p>After some thought I'd axe infix <code>+  -  /  *</code> operators all together!</p>\n<p>People are used to write mathematical operations, but this is not strictly math, it's programming which start's pretty low level (you have to choose between <code>I32</code> and <code>I64</code>, which is by it self not a math problem)</p>",
        "id": 275101972,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647098355
    },
    {
        "content": "<p>I think they introduce ambiguity that is hard to get rid off</p>",
        "id": 275102123,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647098550
    },
    {
        "content": "<blockquote>\n<p>I think they introduce ambiguity that is hard to get rid off</p>\n</blockquote>\n<p>What specially are you thinking of?<br>\nOperating ordering? Other?</p>",
        "id": 275102726,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647099359
    },
    {
        "content": "<p>Mostly interplay of Number like things that we have built-in, abilities and number like things that people might want to build eg. matrices.</p>",
        "id": 275109291,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108294
    },
    {
        "content": "<p>I think the percentage of people who wouldn't use Roc exclusively because it didn't have infix math operators is unacceptably high</p>",
        "id": 275109345,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647108362
    },
    {
        "content": "<p>If we remove them, we set the expectations. No infix things.</p>",
        "id": 275109364,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108367
    },
    {
        "content": "<p>I know that assumption, but I'd like to measure it.</p>",
        "id": 275109379,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108402
    },
    {
        "content": "<p>Like, if there is a reason to be hyped for other things about Roc: platforms, purity, sexiness, I mean speed ...</p>",
        "id": 275109403,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108451
    },
    {
        "content": "<p>I don't know, I totally get it, but at the same time, people are spoiled.</p>",
        "id": 275109465,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108495
    },
    {
        "content": "<p>I get where you're coming from because I've had similar thoughts myself over the years <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 275109474,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647108519
    },
    {
        "content": "<p>it would be nice if we had all grown up being taught arithmetic using prefix function calls instead of infix symbols, but unfortunately... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275109505,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647108592
    },
    {
        "content": "<p>you know, if you enumerate all the great thing that language has to offer, and like, yeah you are calling a function to add two numbers, because math operations cost too.</p>",
        "id": 275109507,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108593
    },
    {
        "content": "<p>it's the wrong place to spend our weirdness budget</p>",
        "id": 275109555,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647108620
    },
    {
        "content": "<p>I know. We first publish a book! <br>\nInfix Math is Backwards :)</p>",
        "id": 275109557,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108625
    },
    {
        "content": "<p>:D</p>",
        "id": 275109559,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108628
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 275109560,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647108630
    },
    {
        "content": "<p>I agree, just this whole subject wouldn't exist the axe chopped at that place. :)</p>",
        "id": 275109571,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108665
    },
    {
        "content": "<p>Since Roc will have an AST based IDE, couldn't it in theory have a mode where all the infix math is replaced with the underlying add/sub/div/etc function calls?</p>",
        "id": 275109587,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647108715
    },
    {
        "content": "<p>yep! Definitely possible</p>",
        "id": 275109661,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647108794
    },
    {
        "content": "<p>Yes</p>",
        "id": 275109662,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647108796
    },
    {
        "content": "<p>on this topic, i was using roc and was wondering, with no HKTs, how would roc express something akin to Haskell's functor? is it really necessary for each type to define its own <code>map</code>? it doesnt seem very easy to write generic code to map over something that can be mapped over. functors arent even particularly complicated, but it is very useful. and what about Traversable and Foldable? i know list has List.walk, but what about a generic walk?</p>",
        "id": 275360066,
        "sender_full_name": "Thomas Dwyer",
        "timestamp": 1647343778
    },
    {
        "content": "<p>the tradeoff we make is to keep the language simple and not have the (inevitable, if you add HKTs) functor/applicative/monad hierarchy. It  hurts a bit, but elm proves that it's fine in practice</p>",
        "id": 275360291,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647343936
    },
    {
        "content": "<p>i understand the simplicity argument, im just confused what the alternative is for this kind of expression. what if i want a function to work on anything mappable? or anything foldable?</p>",
        "id": 275360480,
        "sender_full_name": "Thomas Dwyer",
        "timestamp": 1647344069
    },
    {
        "content": "<p>the idea is that in practice you don't. <code>List</code> is effectively the common denominator of data structures, it is what most api's would use. There are particular cases where a <code>Set</code> or <code>Dict</code> is useful, they come with a full and specific api (we've had a whole thread on what ordering guarantees such a structure must have. e.g. <code>Set</code> is not a lawful functor)</p>",
        "id": 275361533,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647344795
    },
    {
        "content": "<p>wait is it a functor? it's not a monad, I know that</p>",
        "id": 275361620,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647344869
    },
    {
        "content": "<p>ah here we go <a href=\"https://www.reddit.com/r/haskell/comments/2090x3/ask_rhaskell_why_is_there_no_functor_instance_for/\">https://www.reddit.com/r/haskell/comments/2090x3/ask_rhaskell_why_is_there_no_functor_instance_for/</a></p>",
        "id": 275361684,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647344893
    },
    {
        "content": "<p>didnt think about it that way, i guess it makes sense since recursive ADTs are less common in Roc than Haskell, so there is more emphasis on the actual underlying representation rather than an abstract tree of types. given that i can see why its not particularly necessary. im guessing this would also aid in efficiency, since the computer likes arrays more than a node with pointers?</p>",
        "id": 275362622,
        "sender_full_name": "Thomas Dwyer",
        "timestamp": 1647345551
    },
    {
        "content": "<p>yes absolutely that is one of the major reasons to choose an array as the underlying representation</p>",
        "id": 275362942,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647345712
    },
    {
        "content": "<p>though to be fair we can only do that because we have opportunistic in-place mutation</p>",
        "id": 275363002,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647345735
    },
    {
        "content": "<p>I wanted to ask a similar question to this thread from a year ago... if abilities are a language feature in Roc, why not go whole hog on abilities and abstract over kinds?</p>",
        "id": 397748771,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697821555
    },
    {
        "content": "<p>E.g. I always have this gripe with Rust's stdlib.. what is <em>bind</em> on the effect type I'm working with? It's called \"flat_map\" on Vec/Iterator, \"and_then\" on Result, (~await + ?) on Future, and so on. It just feels more organized and ergonomic to unify semantic concepts under canonical terminology.</p>",
        "id": 397749289,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697821801
    },
    {
        "content": "<p>Definitely understand that the category theoretic hierarchy from Haskell is arcane to the average developer</p>",
        "id": 397749474,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697821900
    },
    {
        "content": "<p>Someone may have a better answer, but from my view, the question is reversed:</p>\n<p>What do we gain from making abilities more complex and adding higher kinded types?</p>\n<p>Relatedly, are those gains worth it and do they fit the language well? Those features add to the language complexity, compiler complexity, and increase overall learnability burden.</p>\n<p>Features have to earn a place to be worth adding to the language. Abilities happened to pass that threshold due to a few specific use cases (like serialization). As such, they got a minimal implementation to meet those specific use cases.</p>\n<p>We want a clean and simple language, so generally we avoid adding features (especially large ones) until there is a compelling reason.</p>",
        "id": 397752551,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697823593
    },
    {
        "content": "<p>This is a great answer. I've been trying to deduce what the language's design philosophy is outside of the obvious (be functional, embed easily, performance) and this explains it well.</p>",
        "id": 397754178,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697824392
    },
    {
        "content": "<p>also here's a related FAQ entry! <a href=\"https://github.com/roc-lang/roc/blob/main/FAQ.md#higher-kinded-polymorphism\">https://github.com/roc-lang/roc/blob/main/FAQ.md#higher-kinded-polymorphism</a></p>",
        "id": 397756086,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697825377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> As a veteran of the Scala Wars <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> I get this</p>",
        "id": 397775886,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697835778
    }
]