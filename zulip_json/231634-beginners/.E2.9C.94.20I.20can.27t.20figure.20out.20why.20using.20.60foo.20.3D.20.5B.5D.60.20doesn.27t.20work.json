[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  This works:</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\n\nexpect [] |&gt; List.append 42 == [42]\n\nexpect [] |&gt; List.append &quot;A&quot; == [&quot;A&quot;]\n</code></pre></div>\n<p>but not this:</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\n\nfoo = []\n\nexpect foo |&gt; List.append 42 == [42]\n\nexpect foo |&gt; List.append &quot;A&quot; == [&quot;A&quot;]\n</code></pre></div>\n<p>gives:</p>\n<div class=\"codehilite\"><pre><span></span><code>This 2nd argument to |&gt; has an unexpected type:\n\n5â”‚  expect foo |&gt; List.append 42 == [42]\n                              ^^\n\nThe argument is a number of type:\n\n    Num *\n\nBut |&gt; needs its 2nd argument to be:\n\n    Str\n</code></pre></div>\n<p>why the difference?</p>",
        "id": 438085014,
        "sender_full_name": "Lachlan O'Dea",
        "timestamp": 1715409822
    },
    {
        "content": "<p>I'm not sure if it is behaving correctly or if this is a bug. But my guess is that both of those expects are in the same scope as foo. I wonder if it works if you make a separate function for the different usages of foo, and then use in an expect? Maybe the that would prevent the typesfrom being the same for both?</p>",
        "id": 438085241,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715410095
    },
    {
        "content": "<p>I don't know much about type system design, but this kind of usage (in the second example) feels like \"cheating\" the type system a bit.</p>\n<p>I could be wrong, but conceptually, I imagine that the type of <code>foo</code> will be resolved by the compiler to just one of these (where the question concerning <em>which one</em> will be implementation-specific), but can't be both.<br>\nBasically, what the compiler does for you is letting you optionally not type-annotate <code>foo</code> by yourself.</p>\n<p>In your first example, the two instances of <code>[]</code> are separate objects in memory (e.g., could be thought of as <code>foo</code> and <code>bar</code>) and their types are inferred accordingly.</p>",
        "id": 438089717,
        "sender_full_name": "Hristo",
        "timestamp": 1715415119
    },
    {
        "content": "<p>Yeah, I'm not sure if this is a bug though because I think the foo function can be inferred both ways and given two different annotations, but maybe it's not working here for some reason?</p>",
        "id": 438091068,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715416232
    },
    {
        "content": "<blockquote>\n<p>I imagine that the type of <code>foo</code> will be resolved by the compiler to just one of these (where the question concerning <em>which one</em> will be implementation-specific), but can't be both.</p>\n</blockquote>\n<p>I would also expect this to be the case, I don't think it's a bug</p>",
        "id": 438095707,
        "sender_full_name": "Anton",
        "timestamp": 1715419895
    },
    {
        "content": "<p>Yeah, this is intentional</p>",
        "id": 438101195,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715424788
    },
    {
        "content": "<p>That use of foo is a type mismatch</p>",
        "id": 438101199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715424799
    },
    {
        "content": "<p>If you want it to be polymorphic like that you would need to:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo = \\{} -&gt; []\n\nexpect foo {} |&gt; List.append 42 == [42]\nexpect foo {} |&gt; List.append &quot;A&quot; == [&quot;A&quot;]\n</code></pre></div>",
        "id": 438101264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715424893
    },
    {
        "content": "<p>If you were to type the original program:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : List a\nfoo = []\n\n# List.append is List a -&gt; List a\n# So this is List (Num *) -&gt; List (Num *)\n# So `a` is Num *\nexpect foo |&gt; List.append 42 == [42]\n\n# here, we are requesting that `a` also be Str.\n# So type mismatch.\nexpect foo |&gt; List.append &quot;A&quot; == [&quot;A&quot;]\n</code></pre></div>",
        "id": 438101872,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715425681
    },
    {
        "content": "<p>Oh, one final note on using <code>[]</code>, each <code>[]</code> gets its own type variable.</p>\n<p>So</p>\n<div class=\"codehilite\"><pre><span></span><code># [] is `List a` is `List (Num *)`\nexpect [] |&gt; List.append 42 == [42]\n\n# [] is `List b` is `List Str`\nexpect [] |&gt; List.append &quot;A&quot; == [&quot;A&quot;]\n</code></pre></div>",
        "id": 438102767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715426737
    },
    {
        "content": "<p>Cool, thanks for explaining, that's making sense. I think what threw me is the idea that <code>[]</code> has type <code>List *</code>. But I think you're saying it's actually polymorphic, and <code>List *</code> is just what we get if there's no specific type required. Because adding <code>foo : List *</code> didn't help, it just changed the error message slightly.</p>",
        "id": 438109108,
        "sender_full_name": "Lachlan O'Dea",
        "timestamp": 1715433574
    },
    {
        "content": "<p>Yeah, <code>List *</code> can be a bit confusing. Only the empty list can truly be <code>List *</code> as a defined variable. <code>foo : List *</code> can't actually merge with anything. It is a useless list that can't be appended to.</p>",
        "id": 438118394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715443664
    },
    {
        "content": "<p>yeah we should really special-case that error message!</p>",
        "id": 438118641,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715443950
    },
    {
        "content": "<p>do we have an issue for that already?</p>",
        "id": 438118650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715443959
    },
    {
        "content": "<p>Not that I know of</p>",
        "id": 438118810,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715444141
    },
    {
        "content": "<p>This surprises me! In Elm the equivalent code compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">Html</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Html</span><span class=\"nf\">.</span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"Hello!\"</span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"nv\">baz</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"hi\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>If we go back to the Roc example:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : List a\nfoo = []\n</code></pre></div>\n<p>Should I consider the <code>List a</code> in the Roc code above a not-fully-resolved type signature, given that using <code>foo</code> elsewhere in the code narrows the type signature further?</p>\n<p>It feels a bit unintuitive to me that a type signature I add to a top level definition is not the final word on what the type of a value is (If I don't explicitly leave holes in the signature using <code>_</code>).</p>",
        "id": 438132071,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1715458990
    },
    {
        "content": "<p>I realize that the equivalent of <code>List a</code> in Elm is <code>List *</code> in Roc, so I guess my intuition related to <code>List *</code>.</p>\n<p>I'll try a bit harder to put into words below why the behavior Lachlan raises feels unintuive to me.</p>\n<hr>\n<p>Argument 1</p>\n<p>In Lachlan's examples above both <code>[]</code> and <code>foo</code> have the same type (<code>List *</code>) and value. What's _different_ about these that makes one type-check but not the other?</p>\n<hr>\n<p>Argument 2</p>\n<p>Suppose I have a package A that exports <code>foo = []</code><br>\nSuppose I have a package B that defines <code>bar = List.append foo 3</code><br>\nSuppose I have a package C that defines <code>bar = List.append foo \"hi\"</code></p>\n<p>What should happen in a project with a direct dependency on both package B and C?</p>",
        "id": 438134842,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1715461874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477725\">@Jasper Woudenberg</span> important context on this: <a href=\"https://rwx.notion.site/Let-generalization-Let-s-not-742a3ab23ff742619129dcc848a271cf#0929c77b98ab47b0be4f534d7ec4dc04\">https://rwx.notion.site/Let-generalization-Let-s-not-742a3ab23ff742619129dcc848a271cf#0929c77b98ab47b0be4f534d7ec4dc04</a></p>",
        "id": 438134914,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715461944
    },
    {
        "content": "<p>One extra note, this is only a special case for empty containers (which maybe we could open let generalization to support). Cause empty containers don't yet know what they might contain.</p>\n<p>Definitely a discussion that could be worth having at some point, but not clearly worthwhile.</p>\n<p>I think elm is innately able to be more flexible due to being built on JS.</p>",
        "id": 438135615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715462805
    },
    {
        "content": "<p>That said, at least for containers based on lists, there is no difference until an allocation is made. So a truly empty list is identical. But the moment you add a capacity of some sort (even without elements) there are differences.</p>",
        "id": 438135660,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715462867
    },
    {
        "content": "<p>For any polymorphic type based on tags or records, there are always differences from the very beginning (due to space requirements on stack/heap).</p>",
        "id": 438135714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715462907
    },
    {
        "content": "<p>yeah the fundamental thing that makes this trickier for Roc than it is for Elm is that Roc monomorphizes instead of keeping type information around at runtime (which JS does whether you want it to or not)</p>",
        "id": 438135962,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715463221
    },
    {
        "content": "<p>Ah, thanks for sharing, super interesting, and very cool that Roc is able to catch me doing something that would lead to performance difficulties under the hood.</p>\n<p>Also, I appreciate how the error messages in that doc would reject an annotation <code>foo : List *</code>, and so it would stop looking like Roc is \"overruling\" your manual type signatures.</p>",
        "id": 438136330,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1715463694
    },
    {
        "content": "<p>well, a perhaps surprising thing is that it would only reject the annotation if you used the value in multiple places where the <code>*</code> would become different types</p>",
        "id": 438136803,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715464279
    },
    {
        "content": "<p>or if you exposed it from the module</p>",
        "id": 438136807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715464286
    },
    {
        "content": "<p>It's worth noting that <code>foo : List _</code> is the more accurate type annotation. <code>foo</code> is a list of some specific type of elements which will be inferred later. In general <code>*</code>s become <code>_</code>s when you refer to a polymorphic definition.</p>",
        "id": 438145743,
        "sender_full_name": "timotree",
        "timestamp": 1715475847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636541\">timotree</span> <a href=\"#narrow/stream/231634-beginners/topic/I.20can't.20figure.20out.20why.20using.20.60foo.20.3D.20.5B.5D.60.20doesn't.20work/near/438145743\">said</a>:</p>\n<blockquote>\n<p>It's worth noting that <code>foo : List _</code> is the more accurate type annotation. <code>foo</code> is a list of some specific type of elements which will be inferred later. In general <code>*</code>s become <code>_</code>s when you refer to a polymorphic definition.</p>\n</blockquote>\n<p>Yeah, I like this. The Notion doc Richard links suggests something similar, that certain type annotations should not be allowed. For instance, it suggests the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>piApprox : Frac *\npiApprox = 22 / 7\n</code></pre></div>\n<p>Should fail to of compile with this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>-- NUMBER IS NOT POLYMORPHIC --\n\nThe type annotation on `piApprox` suggests that it can be used polymorphically:\n\n1 | piApprox : Frac *\n2 | piApprox = 22 / 7\n\nUnfortunately, I can&#39;t use `piApprox` as any fractional type! I can only use it\nas exactly one of `Dec`, `F32`, or `F64`.\n\nIf you want me to infer the fractional type that should be used, you can use an\ninference annotation instead of `*`:\n\n  piApprox : Frac _\n\nIf you explicitly want `piApprox` to be able to be used polymorphically, consider\nmaking it a thunk:\n\n  piApprox : {} -&gt; Frac *\n  piApprox = \\{} -&gt; 22 / 7\n</code></pre></div>\n<p>(taken from below the 'programs that are no longer allowed section' in <a href=\"https://rwx.notion.site/Let-generalization-Let-s-not-742a3ab23ff742619129dcc848a271cf?pvs=25#0929c77b98ab47b0be4f534d7ec4dc04\">this doc</a>)</p>\n<p>I think if we have a similar compiler error as soon as the programs contains the annotation <code>foo : List *</code>, rather than only when the value is used in incompatible ways in two places, that removes the confusion you describe, Richard.</p>",
        "id": 438181085,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1715516339
    },
    {
        "content": "<p>Note that this is tracked here <a href=\"https://github.com/roc-lang/roc/issues/5536\">https://github.com/roc-lang/roc/issues/5536</a></p>",
        "id": 438204135,
        "sender_full_name": "timotree",
        "timestamp": 1715539631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715733\">Lachlan O'Dea</span> has marked this topic as resolved.</p>",
        "id": 438531799,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715677312
    }
]