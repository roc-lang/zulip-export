[
    {
        "content": "<p>Hi everyone, I've just got around to playing with Roc, but I can't run hello-world or rocLovesRust/rocLovesZig/rocLovesC without getting a segfault. I've tried running different versions of the nightly build as well as installing nix and building roc from source. I'm running Manjaro (an Arch Linux derivative) on an x86-64 laptop.</p>\n<p>Any ideas?</p>",
        "id": 298973802,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663250090
    },
    {
        "content": "<p>maybe try <code>cargo run -- run --linker=legacy examples/platformSwitching/rocLovesZig.roc</code></p>",
        "id": 298976304,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663250214
    },
    {
        "content": "<p>if nothing else that should give better debug info, my next step would be to see what a debugger says about that segfault</p>",
        "id": 298976361,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663250235
    },
    {
        "content": "<p>Oh that worked, thanks <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>! It seems <code>-- run --linker=legacy</code> is what I needed. Do you know why?</p>",
        "id": 298978332,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663250907
    },
    {
        "content": "<p>it uses your system linker, rather than our custom surgical linker. Your OS must do/expect something that our linker does not currently support</p>",
        "id": 298978458,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663250954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> what should we do in this case? open an issue for later? collect the elf files that cause issues, or is this a known issue?</p>",
        "id": 298978639,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663251013
    },
    {
        "content": "<p>Yeah, an issue with elf files would be great as a starting point. Might have to get them to run the surgical linker in verbose mode as well (though I don't think we currently have a way to toggle that without editing source code)</p>",
        "id": 298979815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663251418
    },
    {
        "content": "<p>ok, let's see if we can do this. To get verbose output, find in  <code>crates/linker/src/lib.rs </code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dynhost</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">preprocessed_host_path</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">dummy_lib</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">link_preprocessed_host</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">target</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Triple</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">host_input_path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">roc_app_obj</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">binary_path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">metadata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">host_input_path</span><span class=\"p\">.</span><span class=\"n\">with_file_name</span><span class=\"p\">(</span><span class=\"s\">\"metadata\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">surgery</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">roc_app_obj</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">binary_path</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and just change those  4 <code>false</code> bools to <code>true</code>. Then do <code>cargo run -- run examples/platformSwitching/rocLovesZig.roc</code> again, without the <code>linker=legacy</code> this time. It should print a lot of stuff related to linking. Can you put that in a gist and share it here?</p>",
        "id": 298981227,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663251888
    },
    {
        "content": "<p>here we go: <a href=\"https://gist.github.com/nickgravgaard/fddeecf3b34d4d05d93404e3463aa8d6\">https://gist.github.com/nickgravgaard/fddeecf3b34d4d05d93404e3463aa8d6</a></p>",
        "id": 298982873,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663252415
    },
    {
        "content": "<p>thanks, I made <a href=\"https://github.com/roc-lang/roc/issues/4042\">https://github.com/roc-lang/roc/issues/4042</a>. Can you maybe add there the files </p>\n<div class=\"codehilite\"><pre><span></span><code>examples/platform-switching/rocLovesZig\nexamples/platform-switching/zig-platform/preprocessedhost\n</code></pre></div>",
        "id": 298984377,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663252859
    },
    {
        "content": "<p>Done <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Now I have another problem. I can run various command line examples by specifying the linker as you suggested above, but I have a problem with the GUI example. Here's what I get from inside a nix shell:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -- run --linker=legacy examples/gui/Hello.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/roc run --linker=legacy examples/gui/Hello.roc`\nðŸ”¨ Rebuilding platform...\n/nix/store/vhf2cr6immz4qdxd83y025fnxim8mmfg-binutils-2.38/bin/ld: examples/gui/platform/host.o:(.data._rust_extern_with_linkage___dso_handle+0x0): undefined reference to `__dso_handle&#39;\n/nix/store/vhf2cr6immz4qdxd83y025fnxim8mmfg-binutils-2.38/bin/ld: /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/libc_nonshared.a(pthread_atfork.oS): in function `__pthread_atfork&#39;:\n(.text+0x7): undefined reference to `__dso_handle&#39;\n/nix/store/vhf2cr6immz4qdxd83y025fnxim8mmfg-binutils-2.38/bin/ld: examples/gui/hello-gui: hidden symbol `__dso_handle&#39; isn&#39;t defined\n/nix/store/vhf2cr6immz4qdxd83y025fnxim8mmfg-binutils-2.38/bin/ld: final link failed: bad value\n1 error and 0 warnings found in 37699 ms.\n\nRunning program anywayâ€¦\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nthread &#39;main&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }&#39;, crates/cli/src/lib.rs:639:61\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace```\n</code></pre></div>",
        "id": 298986554,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663253481
    },
    {
        "content": "<p>thanks. Clearly something is not right with the linker on your system. <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> does this look familiar at all?</p>",
        "id": 299001240,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663257653
    },
    {
        "content": "<p>I wonder if it might be easier to fix the surgical linking bug than to debug what's wrong with <code>ld</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 299002161,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663257900
    },
    {
        "content": "<p>maybe with a pair programming session?</p>",
        "id": 299002204,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663257909
    },
    {
        "content": "<p>I've got to go now, but I'll be around tomorrow from 9am to 4pm UK time if you need me</p>",
        "id": 299006254,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663259154
    },
    {
        "content": "<p>The <code>undefined reference to __dso_handle</code> is a known issue when we use a GUI and the legacy linker, we always ended up using the surgical linker instead. I will write up an issue.</p>",
        "id": 299097405,
        "sender_full_name": "Anton",
        "timestamp": 1663308888
    },
    {
        "content": "<p>Here's the new issue: <a href=\"https://github.com/roc-lang/roc/issues/4049\">https://github.com/roc-lang/roc/issues/4049</a></p>\n<p>Can anyone give me some pointers about how I might try to fix it? I'm happy to pair as <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> suggested.</p>",
        "id": 299166098,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663336700
    },
    {
        "content": "<p>I'm going to take a look today, but pointers around fixing may be hard. Just a lot of potential problems. Likely starting with objdump and gdb to see what they say.</p>",
        "id": 299175436,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663339582
    },
    {
        "content": "<p>Yeah #4049 may be difficult and since the surgical linker is the default it may be best to attempt to fix #4042 first.</p>",
        "id": 299182059,
        "sender_full_name": "Anton",
        "timestamp": 1663341294
    },
    {
        "content": "<p>For #4042 it would be helpful to add the output of <code>valgrind --leak-check=full --track-origins=yes ./examples/hello-world/helloWorld</code> to the issue.</p>",
        "id": 299182393,
        "sender_full_name": "Anton",
        "timestamp": 1663341372
    },
    {
        "content": "<p>Oh, i just realized this is a different issue than #4042....oops. I guess I mixed up the threads.</p>",
        "id": 299188929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663343255
    },
    {
        "content": "<p>This is strange. It looks like the helloWorld binary works when run through valgrind but not when run directly:</p>\n<div class=\"codehilite\"><pre><span></span><code>[nick@nick-x270 roc]$ cargo run examples/hello-world/main.roc\n&lt;lots of debug info snipped&gt;\nSegmentation fault\n[nick@nick-x270 roc]$ ./examples/hello-world/helloWorld\nSegmentation fault\n[nick@nick-x270 roc]$ valgrind --leak-check=full --track-origins=yes ./examples/hello-world/helloWorld\n==60130== Memcheck, a memory error detector\n==60130== Copyright (C) 2002-2022, and GNU GPL&#39;d, by Julian Seward et al.\n==60130== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\n==60130== Command: ./examples/hello-world/helloWorld\n==60130==\nHello, World!\n==60130==\n==60130== HEAP SUMMARY:\n==60130==     in use at exit: 0 bytes in 0 blocks\n==60130==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==60130==\n==60130== All heap blocks were freed -- no leaks are possible\n==60130==\n==60130== For lists of detected and suppressed errors, rerun with: -s\n==60130== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n</code></pre></div>\n<p>Am I doing something wrong?</p>",
        "id": 299191643,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663343937
    },
    {
        "content": "<p><del>The executable by itself will also work, we've seen this stuff before, I'll write up an issue.</del></p>",
        "id": 299192238,
        "sender_full_name": "Anton",
        "timestamp": 1663344102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> what do you mean by \"The executable by itself will also work\". Isn't that what I'm doing when I run \"./examples/hello-world/helloWorld\"? (which segfaults when I do it on line 4 of the console output above)</p>",
        "id": 299192855,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663344254
    },
    {
        "content": "<p>Oops, yes this is different</p>",
        "id": 299192968,
        "sender_full_name": "Anton",
        "timestamp": 1663344289
    },
    {
        "content": "<p>Yeah, this makes no sense :p</p>",
        "id": 299193041,
        "sender_full_name": "Anton",
        "timestamp": 1663344312
    },
    {
        "content": "<p>Yeah, i was just doing some testing and realized the same. Executable is valid</p>",
        "id": 299196456,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663345253
    },
    {
        "content": "<p>What happens if you run directly? What is the actual output?</p>",
        "id": 299196517,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663345272
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[nick@nick-x270 roc]$ ./examples/hello-world/helloWorld\nSegmentation fault\n</code></pre></div>\n<p>If I run it using <code>cargo run -- run examples/hello-world/main.roc</code>I get this output: <a href=\"https://gist.github.com/nickgravgaard/56f1bb23ff088df8aaada11930cbf90a\">https://gist.github.com/nickgravgaard/56f1bb23ff088df8aaada11930cbf90a</a></p>",
        "id": 299243943,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663363762
    },
    {
        "content": "<p>so the \"running\" part produces no output whatsoever?</p>",
        "id": 299244240,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663363913
    },
    {
        "content": "<p>that gist mostly shows the verbose surgical linker output</p>",
        "id": 299244297,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663363926
    },
    {
        "content": "<p>That's right, I don't see anything except the <code>Segmentation fault</code> text</p>",
        "id": 299244352,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663363965
    },
    {
        "content": "<p>Can you run it with gdb or lldb?</p>",
        "id": 299246042,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663364850
    },
    {
        "content": "<p>Also, could you share the output of <code>ldd &lt;segfaulting executable&gt;</code></p>",
        "id": 299246375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663365031
    },
    {
        "content": "<p>Here's the output from <code>ldd</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[nick@nick-x270 roc]$ ldd ./examples/hello-world/helloWorld\n    linux-vdso.so.1 (0x00007f44fd90f000)\n    libm.so.6 =&gt; /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/libm.so.6 (0x00007f44fd7ec000)\n    libpthread.so.0 =&gt; /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/libpthread.so.0 (0x00007f44fd7e7000)\n    libdl.so.2 =&gt; /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/libdl.so.2 (0x00007f44fd7e0000)\n    librt.so.1 =&gt; /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/librt.so.1 (0x00007f44fd7db000)\n    libutil.so.1 =&gt; /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/libutil.so.1 (0x00007f44fd7d6000)\n    libc.so.6 =&gt; /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/libc.so.6 (0x00007f44fd5cc000)\n    /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib/ld-linux-x86-64.so.2 =&gt; /nix/store/6f66prpgx1qx4n6k450sxs3d157ia1ps-glibc-2.35-163/lib64/ld-linux-x86-64.so.2 (0x00007f44fd911000)\n</code></pre></div>",
        "id": 299246800,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663365244
    },
    {
        "content": "<p><code>gdb</code>complains, and I don't have <code>lldb</code> installed in this nix shell:</p>\n<div class=\"codehilite\"><pre><span></span><code>[nick@nick-x270 roc]$ gdb\ngdb: /nix/store/cs16l9whsq2mgydlg0j4x517z4qr861k-gcc-11.3.0-lib/lib/libstdc++.so.6: version `GLIBCXX_3.4.30&#39; not found (required by gdb)\ngdb: /nix/store/cs16l9whsq2mgydlg0j4x517z4qr861k-gcc-11.3.0-lib/lib/libstdc++.so.6: version `GLIBCXX_3.4.30&#39; not found (required by /usr/lib/libsource-highlight.so.4)\ngdb: /nix/store/cs16l9whsq2mgydlg0j4x517z4qr861k-gcc-11.3.0-lib/lib/libstdc++.so.6: version `GLIBCXX_3.4.30&#39; not found (required by /usr/lib/libboost_regex.so.1.79.0)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>[nick@nick-x270 roc]$ lldb\nbash: lldb: command not found\n</code></pre></div>",
        "id": 299247069,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663365385
    },
    {
        "content": "<p>I'm available to pair now if it helps</p>",
        "id": 299247134,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663365438
    },
    {
        "content": "<p>I'm installing lldb now</p>",
        "id": 299247338,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663365565
    },
    {
        "content": "<p>I am going to guess that it is a versioning issue between nix versions of those libraries and your system versions of the libraries. Not sure a fix at the moment, but that is my base guess.</p>",
        "id": 299247829,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663365854
    },
    {
        "content": "<p>Also, sadly can't pair now.</p>",
        "id": 299247856,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663365869
    },
    {
        "content": "<p>As in, the platform is pulling in system libraries when it builds, but when the app runs the dynamic library resolution pulls in the nix versions. Some libc call or setup or something has versioning issues that lead to the segfault.</p>",
        "id": 299248070,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663365998
    },
    {
        "content": "<p>One test would be: completely out of anything nix, run the precompiled nightly build of roc on a cleaned hello world.</p>",
        "id": 299248158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663366079
    },
    {
        "content": "<p>No, that doesn't work. I had segfaults running hello-world using the precompiled nightly build before I installed nix.</p>",
        "id": 299249801,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663366914
    },
    {
        "content": "<p>Interesting. Can you run <code>ldd</code> outside of nix on that? It shouldn't point to nix store stuff.</p>",
        "id": 299250131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663367074
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ ldd examples/hello-world/helloWorld\n    linux-vdso.so.1 =&gt; linux-vdso.so.1 (0x00007ffccad5c000)\n    libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007f11fbae3000)\n    libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f11fb8fc000)\n    /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f11fbc37000)\n</code></pre></div>",
        "id": 299250814,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663367535
    },
    {
        "content": "<p>Here's lldb too</p>\n<div class=\"codehilite\"><pre><span></span><code>$ lldb examples/hello-world/helloWorld\n/home/nick/.nix-profile/bin/lldb: error while loading shared libraries: liblzma.so.5: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 299250974,
        "sender_full_name": "Nick Gravgaard",
        "timestamp": 1663367671
    },
    {
        "content": "<p>Wait...error loading a shared library that the executable didn't even request?</p>",
        "id": 299253440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663369266
    },
    {
        "content": "<p>I guess you can try seeing what it takes to install liblzma on arch?</p>",
        "id": 299253483,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663369307
    }
]