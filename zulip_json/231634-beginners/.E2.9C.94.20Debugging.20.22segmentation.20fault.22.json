[
    {
        "content": "<p>I have a program for AoC day 5 that uses the parser library to grab its input. It works fine on the test input, but fails with \"segmentation fault\" when running the larger puzzle input. There doesn't seem to be any information associated with this fault. No stack trace, no better error message, nothing I can grab on to and debug.</p>\n<p>Through some experimentation I have been able to tell that it's the input parsing causing the error, rather than anything that happens later but that's where I get stuck. Are there any known problems in either \"parser\" or Roc itself that could explain this behavior?</p>\n<div class=\"codehilite\" data-code-language=\"parser\"><pre><span></span><code>inputParser : Parser (List U8) Puzzle\ninputParser =\n    listOfSeeds =\n        const \\seeds -&gt; seeds\n        |&gt; skip (string \"seeds:\")\n        |&gt; skip whitespace\n        |&gt; keep listOfNumbers\n\n    almanacMap =\n        const\n            (\\dstStart -&gt; \\srcStart -&gt; \\length -&gt;\n                        range 0 length\n                        |&gt; List.walk (Dict.empty {}) \\dict, n -&gt; Dict.insert dict (srcStart + n) (dstStart + n))\n        |&gt; keep digits\n        |&gt; skip whitespace\n        |&gt; keep digits\n        |&gt; skip whitespace\n        |&gt; keep digits\n        |&gt; skip whitespace\n\n    combineDicts = \\dicts -&gt;\n        dicts |&gt; List.walk (Dict.empty {}) Dict.insertAll\n\n    almanac =\n        const \\s2s -&gt; \\s2f -&gt; \\f2w -&gt; \\w2l -&gt; \\l2t -&gt; \\t2h -&gt; \\h2l -&gt; {\n                                    seedToSoil: s2s,\n                                    soilToFertilizer: s2f,\n                                    fertilizerToWater: f2w,\n                                    waterToLight: w2l,\n                                    lightToTemperature: l2t,\n                                    temperatureToHumidity: t2h,\n                                    humidityToLocation: h2l,\n                                }\n        |&gt; skip (string \"seed-to-soil map:\")\n        |&gt; skip whitespace\n        |&gt; keep (map (many almanacMap) combineDicts)\n        |&gt; skip (string \"soil-to-fertilizer map:\")\n        |&gt; skip whitespace\n        |&gt; keep (map (many almanacMap) combineDicts)\n        |&gt; skip (string \"fertilizer-to-water map:\")\n        |&gt; skip whitespace\n        |&gt; keep (map (many almanacMap) combineDicts)\n        |&gt; skip (string \"water-to-light map:\")\n        |&gt; skip whitespace\n        |&gt; keep (map (many almanacMap) combineDicts)\n        |&gt; skip (string \"light-to-temperature map:\")\n        |&gt; skip whitespace\n        |&gt; keep (map (many almanacMap) combineDicts)\n        |&gt; skip (string \"temperature-to-humidity map:\")\n        |&gt; skip whitespace\n        |&gt; keep (map (many almanacMap) combineDicts)\n        |&gt; skip (string \"humidity-to-location map:\")\n        |&gt; skip whitespace\n        |&gt; keep (map (many almanacMap) combineDicts)\n\n    const \\se -&gt; \\al -&gt; { seeds: se, almanac: al }\n    |&gt; keep listOfSeeds\n    |&gt; keep almanac\n\nwhitespace : Parser (List U8) _\nwhitespace =\n    const \\a -&gt; a\n    |&gt; skip (many (oneOf [codeunit ' ', codeunit '\\t', codeunit '\\n']))\n\nlistOfNumbers : Parser (List U8) (List Nat)\nlistOfNumbers =\n    const \\r -&gt; r\n    |&gt; skip whitespace\n    |&gt; keep (sepBy digits whitespace)\n    |&gt; skip whitespace\n</code></pre></div>",
        "id": 406170974,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701815858
    },
    {
        "content": "<p>No issues that I am aware of, this is a compiler bug. I would put my money on List.walk with a Dict</p>",
        "id": 406172309,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701816565
    },
    {
        "content": "<p>I suspect it may have something to do with being out of memory. In the code, I'm expanding dozens of ranges that turn out to be tens millions of elements long in the full test input and I don't have that much memory in my computer. The code compiles and runs just fine with a smaller input.</p>",
        "id": 406172327,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701816578
    },
    {
        "content": "<p>Wouldnt that be a stack overflow though?</p>",
        "id": 406173280,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701817033
    },
    {
        "content": "<p>I dont know</p>",
        "id": 406173294,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701817041
    },
    {
        "content": "<p>my guess. it is out of memory, but instead it returns a bad pionter which roc reads that leads to a segfault...but really need to open it with a debugger</p>",
        "id": 406174876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701817734
    },
    {
        "content": "<p>Updating the code to not expand the ranges anymore did solve the problem, so I'm thinking out of memory was the correct conclusion.</p>",
        "id": 406175117,
        "sender_full_name": "Gerco Dries",
        "timestamp": 1701817886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671693\">Gerco Dries</span> has marked this topic as resolved.</p>",
        "id": 406184452,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701822862
    }
]