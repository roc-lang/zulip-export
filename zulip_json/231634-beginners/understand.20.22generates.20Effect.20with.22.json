[
    {
        "content": "<p>Hi, trying to understand what is under the hood, I fell on the missing definition of:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">hosted</span><span class=\"w\"> </span><span class=\"kt\">Effect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nf\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">generates</span><span class=\"w\"> </span><span class=\"kt\">Effect</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">after</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">always</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">forever</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">loop</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It seems to come from <code>compiler/can/src/effect_module.rs</code> where I found a good definition and documentation.<br>\nBut how <code>generates</code> work? I didn't find other call of it. Are <code>loop</code>, <code>after</code> etc.. generic functions? Why are they implemented in the compiler instead of the platform?</p>",
        "id": 302434111,
        "sender_full_name": "Ghislain",
        "timestamp": 1664968404
    },
    {
        "content": "<p>I would also be very interested in this. I want to try my hand at a simple zig-based platform for aoc input fetching, but there is a lot of what seems like magic going on in the platform definitions I found.</p>",
        "id": 314582658,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670458463
    },
    {
        "content": "<p>we're in the process of hopefully getting rid of all this, such that the entire <code>hosted</code> module concept would no longer be necessary, but it's not ready yet!</p>",
        "id": 314582847,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670458587
    },
    {
        "content": "<p>sounds like some good progress, I'm looking forward to seeing it. in the meantime, is there anything to read up on here? I'm particularly interested in how the whole <code>roc__mainForHost_1__Init_caller</code> stuff gets created. Specifically</p>\n<ul>\n<li>Where does the <code>1</code> come from</li>\n<li>Why do these functions take an additional argument (It seems this should contain closure data, and is initialized to <code>undefined</code> for top level function?)</li>\n<li>How do complex types in roc get exposed to the platform? For example creating a sum type</li>\n<li>Do I somehow get the app name in the platform?</li>\n</ul>\n<p>I know this is a lot of questions, especially when some of this is going to change very soon <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 314583345,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670458967
    },
    {
        "content": "<blockquote>\n<p>Where does the <code>1</code> come from</p>\n</blockquote>\n<p><code>1</code> is the specialization number. For exposed functions, they will always use concrete types and that should always be <code>1</code>.</p>\n<blockquote>\n<p>Why do these functions take an additional argument</p>\n</blockquote>\n<p>Yep flags and closure data. It is sometimes used from the host, but that is pretty rare and generally not needed.</p>\n<blockquote>\n<p>How do complex types in roc get exposed to the platform?</p>\n</blockquote>\n<p>It's complicated. We can work through types one at a time, but it is a huge time sync full of segfaults that often greatly slows down platform development. Currently <code>roc glue</code> only works for rust. That generates everything for the platform developer. The long term goal is make it pluggable such that it can be used for any language. I would honestly advise just sticking wit rust as the platform language for now if you are ok with that, but if you want to use zig, will help you as you run into issues.</p>\n<blockquote>\n<p>Do I somehow get the app name in the platform?</p>\n</blockquote>\n<p>Nope. Though you could either make the app pass it to you or use the executable name to get it.</p>",
        "id": 314585618,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670460466
    },
    {
        "content": "<p>I generally have more experience in rust than zig, so Iâ€™d be fine with that. It just seemed that currently there is more overhead involved in the rust bindings because zig has an easier time arbitrarily allocating memory and exposing functions c-style.<br>\nOf course in the future having something like bindgen for creating rust-based platforms would be amazing</p>",
        "id": 314586360,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670461076
    },
    {
        "content": "<p>Yeah, I would agree that zig is a better fit for this kind of binding. But having some form of <code>roc glue</code>, even if not fully functional, is huge for iteration and small correctness bugs that lead to segfaults.</p>",
        "id": 314586493,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670461180
    }
]