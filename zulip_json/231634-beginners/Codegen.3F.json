[
    {
        "content": "<p>Inspired by a current thread on ECS complexities in Roc, I wonder... How common will it be in Roc appdev to encounter platform-agnostic overhead that can't be alleviated by a zero-cost abstraction library? If common, should we invest in a first-party (or third-party) codegen tool to help generate boilerplate/scaffolding for various patterns?</p>",
        "id": 276423049,
        "sender_full_name": "jan kili",
        "timestamp": 1648084529
    },
    {
        "content": "<p>I suspect a lot of “polymorphic” problems will be best solved via code generators. With the editor, those should be able to look almost like macros — the editor can surface a button to generate some boilerplate specific code from a general template based on some configuration. </p>\n<p>E.g. I’ve been thinking about a query builder library and one example is defining the columns of a table and its relationships in a data structure, at which point the editor would auto generate a bunch of various querying functions for that table</p>",
        "id": 276426101,
        "sender_full_name": "Tommy Graves",
        "timestamp": 1648088201
    },
    {
        "content": "<p>I would love to see this integrated in the editor in a sane well formed way. That would be really awesome.</p>\n<p>Would also be cool if it was integrated in the language like rust macros, but I 100% understand if that is beyond the scope of the language.</p>",
        "id": 276428371,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1648091382
    }
]