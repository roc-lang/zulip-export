[
    {
        "content": "<p>I'm trying to wrap my head around roc concepts and best practices, and I don't understand what Roc would have a programmer do in place of the \"iterator\" concept that Rust or Python have.</p>\n<p>I haven't seen any mention of \"iterators\" in the new roc docs (they look great btw!). I understand that Roc makes available the <code>List</code> type through the standard library, which in terms of functionality does all the things iterators might  do. but it seems like this is more similar to Python's <code>list</code> or Rust's <code>Vec</code>, and the downside of these compared to an \"iterator\" is an increase in memory usage. However, I've also watched that one talk by Our Lord And Savior about how the compiler makes use of \"pure-functional\"-ness to do things that can't be done in non-pure-functional languages; and since I don't know any better, it seems possible to me that <code>List</code>s used in specific ways (i.e., each element accessed once and in order from front to back) could just get compiled into \"iterators\" in the resulting binary. but I haven't seen any evidence or suggestion of this.</p>\n<p>so my questions:</p>\n<ul>\n<li>does Roc have an explicit user-facing \"iterators\" mechanism? if not, is this planned?</li>\n<li><code>List</code> doesn't get magic performance benefits in Roc, does it? (aside from the general \"one reference? then no copies, just mutate in-place!\" rule that all objects follow)</li>\n</ul>",
        "id": 407639269,
        "sender_full_name": "Becker A.",
        "timestamp": 1702444032
    },
    {
        "content": "<p>I believe the current design goal is to not have iterators but there's a few other threads going on about potential special cased optimizations for list/range iteration I think</p>",
        "id": 407639804,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1702444416
    },
    {
        "content": "<p>I think currently it stands in a weird spot between<br>\n1) need<br>\n2) simplicity focus of the language<br>\n3) future chance to make optimizations of this form automatically.</p>\n<p>I would say explicit iterators aren't a goal currently, but if there was a large enough need, maybe they would be added. At the same time I would guess implicit designs or suggestions to build up the iterator manually with a recursive function are much more likely aligned with roc style.</p>",
        "id": 407640843,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702445102
    },
    {
        "content": "<p>Generally iterators are pretty easy to do manually by just grouping functions smartly, but it is not as nice as an automatic chaining when just using a list like type.</p>",
        "id": 407640969,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702445190
    },
    {
        "content": "<p>Do you have any specific examples? Real examples of something you want to do in roc but is either really bad in terms of ergonomics or performance tend to be big motivators for design. (Best with actual roc code to look at not just an idea from another language)</p>",
        "id": 407641054,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702445268
    },
    {
        "content": "<p>More chat in: <a href=\"#narrow/stream/304641-ideas/topic/Rust.20like.20iterators.20for.20List.20fn.20piping\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Rust.20like.20iterators.20for.20List.20fn.20piping</a></p>",
        "id": 407650424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702449374
    },
    {
        "content": "<p>Best practice is to use functions like <a href=\"http://List.map\">List.map</a> and List.walk. You can do most things with those, and other similar functions in the standard library.<br>\nIf you need something more custom, use recursion. Roc optimises tail calls to loops so this is efficient <br>\n<a href=\"https://en.m.wikipedia.org/wiki/Tail_call\">https://en.m.wikipedia.org/wiki/Tail_call</a></p>",
        "id": 407662888,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702453759
    },
    {
        "content": "<p>I guess something like <a href=\"https://v2.ocaml.org/api/Seq.html\">OCaml's Seq</a> might be possible? I'm not sure how well the compiler would optimise this compared to how well Rust optimises its iterator though. (disclaimer: I'm very new to Roc and haven't finished the tutorial yet)</p>",
        "id": 407711741,
        "sender_full_name": "Oli",
        "timestamp": 1702469105
    },
    {
        "content": "<p>From what I understand the main advantage of iterators like rust is that I can chain lots of them together and then it's pull based so it only actually computes what is needed for the final result. In roc I'd need to collapse it all into one walk to get that behavior I think.</p>",
        "id": 407723958,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1702473251
    },
    {
        "content": "<p>So something like .map.filter.any won't ever actually make a new allocation and potentially only actually processes one item through the iterators</p>",
        "id": 407724373,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1702473388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/roc.20concepts.3A.20iterators.3F/near/407641054\">said</a>:</p>\n<blockquote>\n<p>Do you have any specific examples? Real examples of something you want to do in roc but is either really bad in terms of ergonomics or performance tend to be big motivators for design. (Best with actual roc code to look at not just an idea from another language)</p>\n</blockquote>\n<p>Good constructive question! tbh I don't have an actual real-world need (I'm using Roc mostly for AoC atm). but <strong>anything that deals with sequential data and several cascaded sequence operations (i.e., several .map or .filter operations)</strong>. so maybe something like these?:</p>\n<ul>\n<li><strong>lexing/parsing a string</strong> - e.g. if you were searching for a specific token in a string, you would have to first tokenize the string and then find the desired token.<ul>\n<li>using <code>List</code>s you'd lex the whole string into an array of tokens (O(n) memory), <em>and then</em> search the array.</li>\n<li>with iterators you can perform the lex and check in the same step, without storing undesired tokens (O(1) memory) -&gt; this means the operation uses less memory and can short-circuit which can save execution time in the general case. <em>Note that here the lex and check code would also stay modular and decoupled.</em></li>\n</ul>\n</li>\n<li><strong>digital signal processing</strong> (DSP) - often a DSP filter will be made up of several (~10's of) stages of data transforms (e.g., biquad filters) on sequential data (e.g., a voltage over time from some arbitrary sensor, an audio signal, etc.).<ul>\n<li>using <code>List.map</code> for each of the 10 stages means I'd be making 10 arrays; 9 arrays for each of the intermediate results and 1 array for the output I care about. </li>\n<li>with iterators, you can simply allocate space for the 1 output array and compute each output item incrementally.</li>\n</ul>\n</li>\n</ul>\n<p>to me it seems like such a generic, commonplace opportunity for optimization that I'm having a hard time justifying it, if that makes sense <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 407778424,
        "sender_full_name": "Becker A.",
        "timestamp": 1702488978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673471\">Oli</span> <a href=\"#narrow/stream/231634-beginners/topic/roc.20concepts.3A.20iterators.3F/near/407711741\">said</a>:</p>\n<blockquote>\n<p>I guess something like <a href=\"https://v2.ocaml.org/api/Seq.html\">OCaml's Seq</a> might be possible? I'm not sure how well the compiler would optimise this compared to how well Rust optimises its iterator though. (disclaimer: I'm very new to Roc and haven't finished the tutorial yet)</p>\n</blockquote>\n<p>yeah exactly! I've also heard people talk about \"lazy execution\" in Haskell, maybe that's what I mean here?</p>",
        "id": 407779052,
        "sender_full_name": "Becker A.",
        "timestamp": 1702489216
    },
    {
        "content": "<p>also Brendan, this isn't necessarily a pitch for <em>explicit</em> iterators. this would all still be useful if the roc compiler magically did this sort of thing under-the-hood on Lists when deemed possible</p>",
        "id": 407780801,
        "sender_full_name": "Becker A.",
        "timestamp": 1702489893
    },
    {
        "content": "<p>Yeah, that all makes senses. Roc has no laziness, so doesn't just get iterators like haskel.</p>\n<p>That said, automatic iterators gets really complex. For example, if you look at most high performance compiler lexing and parsing pipelines. They no longer use iterators. They will generate a full list of tokens. Why? Data oriented design. Many hot tight loops over sequential memory is what cpus perfer. At the cost of creating the list, lexing and parsing run much much faster.</p>",
        "id": 407782270,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702490385
    },
    {
        "content": "<p>So in that lexing and parsing case, iterators are actually generally a disadvantage. In fact, as long as you can keep your data dense, it is often faster to have multiple tight loops over data. That said, this is most pronouced when an iterator has some form of conditional logic (that can ruin loop perf). If the iterator is just combining a bunch of straight logic, it can often be much more performant.</p>",
        "id": 407782675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702490492
    },
    {
        "content": "<p>My point in all of this is that there is a lot of nuance to when you actually want iterators.</p>",
        "id": 407782768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702490514
    },
    {
        "content": "<blockquote>\n<p>using <a href=\"http://List.map\">List.map</a> for each of the 10 stages means I'd be making 10 arrays; 9 arrays for each of the intermediate results and 1 array for the output I care about. </p>\n</blockquote>\n<p>So just use one map and a pipeline of stage functions?<br>\ninstead of</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">data</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"nx\">stage1</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"nx\">stage2</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"nx\">stage3</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"nx\">stage4</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"nx\">stage5</span>\n</code></pre></div>\n<p>do:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">data</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"nx\">runAllStages</span>\n\n<span class=\"nv\">runAllStages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">x</span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">x</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">stage1</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">stage2</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">stage3</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">stage4</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">stage5</span>\n</code></pre></div>",
        "id": 407783229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702490619
    },
    {
        "content": "<p>The second example is almost identical to what iterators would generate (though it assumes and input and output list, have to be a bit fancier to avoid those)</p>",
        "id": 407783513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702490674
    },
    {
        "content": "<p>fwiw I'd like to optimize things like consecutive <code>List.map</code>s to remove the intermediate allocation</p>",
        "id": 407785955,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702491658
    },
    {
        "content": "<p>in general this is an optimization called \"deforestation\" in e.g. Haskell</p>",
        "id": 407785982,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702491669
    },
    {
        "content": "<p>Yeah the consecutive <code>List.map</code> refactor makes sense as an appropriate fix.</p>\n<p>-&gt; given that, I think the examples that would be of more interest would be those that:</p>\n<ul>\n<li>don’t start computations from an existing <code>List</code> (e.g. something like “generate the first N fibonacci numbers, then map each one”)</li>\n<li>do something other than just <code>List.map</code> (e.g., <code>List.keepIf</code>, <code>List.joinMap</code>, etc.)</li>\n</ul>",
        "id": 407796389,
        "sender_full_name": "Becker A.",
        "timestamp": 1702495987
    },
    {
        "content": "<p>Yeah, that has to be done as a recursive function with accumulator. Maybe one day it could use automatic iterators too, but would probably only work with builtin lists and not other wrapping types.</p>",
        "id": 407796869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702496182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> re: the parsing example, what about chunk iteration, as a middle-ground between single-item iteration and bulk processing? At a high-level it sounds like a nice “best of both worlds” approach, but idk how well it would work in practice</p>",
        "id": 407796871,
        "sender_full_name": "Becker A.",
        "timestamp": 1702496183
    },
    {
        "content": "<p>(Not to make you repeat yourself, you did mention that automatic decisions would be tough. Just mentioning the thought <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 407797072,
        "sender_full_name": "Becker A.",
        "timestamp": 1702496282
    },
    {
        "content": "<p>Specifically talking about the parsing and lexing context:</p>\n<p>Yeah, chunked works for sure. It gives you a mix of the high performance and low memory. I think it is ignored often cause it is more complex and generally low gain (computers have so much memory that allocating the full array tends not to matter).</p>",
        "id": 407797124,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702496290
    },
    {
        "content": "<p>To clarify my comment about automatic iterators:</p>\n<p>I personally care a bit too much about low level details. So I am not a fan of automatic conversions of that nature, but if we do end up adding it, we might as well expand support.</p>\n<p>So personally I think I would prefer essentially a decorator or some other special function to tell the compiler to enable iterators for a pipeline, but I don't think that is likely to fit roc.</p>",
        "id": 407797510,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702496438
    },
    {
        "content": "<p>Otherwise, it can always be done with a recursive function and accumulator</p>",
        "id": 407797573,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702496467
    },
    {
        "content": "<p>Will roc ever have intermediate allocations for a series of chained maps? Won't the first one allocate a new list and then the ref count is 1 so the rest will be in place mutations and return that first allocation?</p>",
        "id": 407882655,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1702533184
    },
    {
        "content": "<p>Only if the element is the same size (or smaller). Otherwise you need a new allocation to fit the larger elements. Also, not 100% sure we support smaller yet, but definitely can add the optimization if it is missing</p>",
        "id": 407882817,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702533299
    }
]