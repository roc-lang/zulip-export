[
    {
        "content": "<p>For AoC, I need to call <code>List.sum</code> on a list of <code>U8</code>. But it crash with an \"integer addition overflowed\". How can I avoid it and force the <code>List.sum</code> to return a <code>U32</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>» a : List U8\n… a = [127, 127, 127, 127]\n\n[127, 127, 127, 127] : List U8\n                             # a\n» List.sum a\nThis Roc code crashed with: &quot;integer addition overflowed!&quot;\n\n&lt;function&gt; : U8           # val1\n</code></pre></div>",
        "id": 313707673,
        "sender_full_name": "Ghislain",
        "timestamp": 1670084037
    },
    {
        "content": "<p>You can do a <code>List.map</code> with <code>Num.toU32</code> on the list before doing the <code>List.sum</code></p>",
        "id": 313708557,
        "sender_full_name": "Anton",
        "timestamp": 1670084493
    },
    {
        "content": "<p>We should improve the \"integer addition overflowed!\" error message.</p>",
        "id": 313708672,
        "sender_full_name": "Anton",
        "timestamp": 1670084561
    },
    {
        "content": "<p>Yes, that's what I found, but I was wondering if there was a way to do it otherwise (force the output of <code>List.sum</code> to be something else).</p>",
        "id": 313708699,
        "sender_full_name": "Ghislain",
        "timestamp": 1670084579
    },
    {
        "content": "<p>The definition is clear though: <code>List (Num a) -&gt; Num a</code></p>",
        "id": 313708833,
        "sender_full_name": "Ghislain",
        "timestamp": 1670084641
    },
    {
        "content": "<p>It is possible to make a builtin for that but it seems like a very niche use case. The <code>List.map</code> solution is pretty clear. I don't think trying to make this whole operation shorter would be nicer.</p>",
        "id": 313709167,
        "sender_full_name": "Anton",
        "timestamp": 1670084830
    },
    {
        "content": "<p>The <code>a</code> in <code>List (Num a) -&gt; Num a</code> is used in input and output of the function so the input number type has to be the same as the output number type. But perhaps that's what you meant with <code>The definition is clear though</code>.</p>",
        "id": 313709680,
        "sender_full_name": "Anton",
        "timestamp": 1670085083
    },
    {
        "content": "<p>Can always manually write a <code>List.walk</code> with the conversion in it. Shouldn't be too complex, but definitely less convenient.</p>",
        "id": 313710706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670085640
    },
    {
        "content": "<p>Something like:<br>\n<code>List.walk listU8 0, \\accum, elem -&gt; accum + Num.toU32 elem</code></p>",
        "id": 313710882,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670085728
    }
]