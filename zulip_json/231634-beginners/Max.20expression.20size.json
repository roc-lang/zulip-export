[
    {
        "content": "<p>Is there a limit on the size of an expression? If I write a function which includes an expression with thousands of boolean and arithnetic operations? </p>\n<p>I'm looking to write a function <code>List U32 -&gt; List [A,B,C,D]</code> that is efficient and I figured branchless would give a fixed number of calculations per U32. The use case is mapping unicode code points into graphmeme cluster break classes.</p>\n<p>The other idea was to create a top level <code>Dict U32 [A,B,C,...]</code> but not sure if that would be more efficient? </p>\n<p>I can write a benchmark, but thought I might ask here first and save myself in case there is an obvous solution to reach for.</p>",
        "id": 397019618,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697514650
    },
    {
        "content": "<p>Like a when expression?</p>",
        "id": 397020253,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697514906
    },
    {
        "content": "<p>Just need something more concrete to understand?</p>",
        "id": 397020307,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697514944
    },
    {
        "content": "<p>Or a doc with some technical info on what you want to do would be good</p>",
        "id": 397020662,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697515160
    },
    {
        "content": "<p>Yeah, I could explain that better. I mean like a huge sequence of comparisons, like <code>isControlClass = (u32 &gt; 0x0 &amp;&amp; u32 &lt;= 0x9) || (u32 &gt;= 0xB &amp;&amp; u32 &lt;= 0xC) || (u32 == 0x61C) || ...</code></p>",
        "id": 397021418,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697515461
    },
    {
        "content": "<p>I might be mixing operators there... but I mean boolean.</p>",
        "id": 397021659,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697515642
    },
    {
        "content": "<p>I have wondered if it would be efficient to use some kind of lookup table, but that seems like a lot of memory. I've done some research on that and maybe it can be reduced by using multple lookups in sequence. The goal is <code>U32 -&gt; [A,B,C,...N]</code>.</p>",
        "id": 397022032,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697515887
    },
    {
        "content": "<p>I can imagine creating the lookup tables by sampling every possible value from 0x0 to 0x10FFFF, and then generating the equivalent roc <code>List [A,B,C,...]</code>.</p>",
        "id": 397022289,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697516033
    },
    {
        "content": "<p><a href=\"https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\">https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt</a></p>",
        "id": 397022902,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697516394
    },
    {
        "content": "<p>This doc maps the unicode code points to a graphmeme cluster break property. The rules for when to split up into extended graphmeme clusters are determined using these property values.</p>",
        "id": 397022999,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697516449
    },
    {
        "content": "<p>Ah yeah, I would do the giant Boolean expression and not waste the memory on something that big</p>",
        "id": 397023991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697517198
    },
    {
        "content": "<p>That said, if it can be represented as a chain of very small lookups or a few medium lookups, that could be faster.</p>",
        "id": 397024021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697517233
    },
    {
        "content": "<p>Depends mostly on the size of the lookup and what it optimized to</p>",
        "id": 397024079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697517251
    },
    {
        "content": "<p>The Boolean expression should optimize just fine</p>",
        "id": 397024121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697517291
    },
    {
        "content": "<p>If it is faster than the lookup mostly depends on if the lookup will be in cache and just how many instructions it becomes</p>",
        "id": 397024159,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697517321
    }
]