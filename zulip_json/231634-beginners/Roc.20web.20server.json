[
    {
        "content": "<p>How does one read request headers while using the simple webserver  platform?</p>\n<div class=\"codehilite\"><pre><span></span><code>main : Request -&gt; Task Response []\nmain = \\req -&gt;\n\n    date = Utc.now! |&gt; Utc.toIso8601Str\n    Stdout.line! &quot;$(date) $(Http.methodToStr req.method) $(req.url)&quot;\n\n    isHxRequest = Bool.true\n\n    if isHxRequest then\n        routeHx req\n    else\n        routeReq req\n</code></pre></div>\n<p>I want to check if the incoming request  has \"Hx-Request\": \"true\" header.</p>\n<p>I've checked the web server examples and web server docs but didn't find anything<br>\n<a href=\"https://github.com/roc-lang/basic-webserver/tree/main/examples\">https://github.com/roc-lang/basic-webserver/tree/main/examples</a><br>\n<a href=\"https://roc-lang.github.io/basic-webserver/Http/#Header\">https://roc-lang.github.io/basic-webserver/Http/#Header</a></p>",
        "id": 455030504,
        "sender_full_name": "Chris Vouga",
        "timestamp": 1722316662
    },
    {
        "content": "<p>Yeah, unfortunately there is a bug preventing the generated docs from displaying the inner parts. </p>\n<p>You can see the relevant impl in the platform package <a href=\"https://github.com/roc-lang/basic-webserver/blob/fda606b6c8b4ad105792680596664aba6e705ee1/platform/InternalHttp.roc#L14\">here</a></p>\n<p>Basically you can use <code>req.headers</code> which will be a <code>List { name : Str, value : List U8 }</code>.</p>\n<p>In the next update the <code>value</code> is changed to a <code>Str</code>, but that's the current API</p>",
        "id": 455031243,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722316971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> That worked. Thank you</p>\n<div class=\"codehilite\"><pre><span></span><code>main : Request -&gt; Task Response []\nmain = \\req -&gt;\n\n    date = Utc.now! |&gt; Utc.toIso8601Str\n    Stdout.line! &quot;$(date) $(Http.methodToStr req.method) $(req.url)&quot;\n\n    isHxRequest = List.any req.headers (\\header -&gt; header.name == &quot;hx-request&quot;)\n\n    headerKeys = List.map req.headers (\\header -&gt; header.name) |&gt; \\s -&gt; Str.joinWith s &quot;, &quot;\n    Stdout.line! headerKeys\n\n    if isHxRequest then\n        routeHx req\n    else\n        routeReq req\n</code></pre></div>",
        "id": 455031835,
        "sender_full_name": "Chris Vouga",
        "timestamp": 1722317242
    },
    {
        "content": "<p>I also made a quick example just to check it out myself </p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    pf: platform &quot;https://github.com/roc-lang/basic-webserver/releases/download/0.6.0/LQS_Avcf8ogi1SqwmnytRD4SMYiZ4UcRCZwmAjj1RNY.tar.gz&quot;,\n}\n\nimport pf.Task exposing [Task]\nimport pf.Http exposing [Request, Response]\n\nmain : Request -&gt; Task Response []\nmain = \\req -&gt;\n\n    hxRequest = req.headers |&gt; getHeader &quot;hx-request&quot;\n\n    when hxRequest is\n        Ok value -&gt;\n            Task.ok { status: 200, headers: [], body: Str.toUtf8 &quot;Found, got value $(value)\\n&quot; }\n        Err NotFound -&gt;\n            Task.ok { status: 400, headers: [], body: Str.toUtf8 &quot;Bad request, got headers $(Inspect.toStr req.headers)\\n&quot; }\n\n\ngetHeader : List {name: Str, value: Str}, Str -&gt; Result Str [NotFound]\ngetHeader = \\headers, search -&gt;\n    List.keepOks headers \\header -&gt;\n        if header.name == search then\n            Ok header.value\n        else\n            Err NotFound\n    |&gt; List.first\n    |&gt; Result.mapErr \\ListWasEmpty -&gt; NotFound\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ curl --header &quot;HX-Request: true&quot; localhost:8000\n\nFound, got value true\n</code></pre></div>",
        "id": 455032346,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722317571
    },
    {
        "content": "<p>I'm running on latest main though. I'm not sure if the nightly works with basic-webserver 0.6.0, it may require the TESTING nightly. Just in case you try and run this and it breaks</p>",
        "id": 455032525,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722317685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  Thank you for the help. <br>\nAnother problem I'm having is I'm looking to deploy a roc webserver to <a href=\"https://railway.app/\">https://railway.app/</a> using a Dockerfile.</p>\n<p>I haven't been able to create a working dockerfile for a roc webserver yet. </p>\n<p>Is there anywhere online where I can find a starter dockerfile for roc webserver? Any resources for this?</p>",
        "id": 455033690,
        "sender_full_name": "Chris Vouga",
        "timestamp": 1722318173
    },
    {
        "content": "<p>I had something I shared recently in <a href=\"#narrow/stream/304902-show-and-tell/topic/basic-webserver.20docker.20container/near/440962511\">https://roc.zulipchat.com/#narrow/stream/304902-show-and-tell/topic/basic-webserver.20docker.20container/near/440962511</a></p>",
        "id": 455038549,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722319985
    },
    {
        "content": "<p>If you improve on that I'd love to know how.</p>\n<p>In theory we should be able to build a much smaller final image, but I haven't spent the time to really map out what the roc binary requires to run ok.</p>",
        "id": 455038784,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722320125
    },
    {
        "content": "<p>One thing that might be worth exploring is the use of <a href=\"https://nixpacks.com/docs\">https://nixpacks.com/docs</a><br>\nIt looks like that is what railway uses, and the best support for basic-webserver is using our nix flake -- as that is what is most thoroughly tested in our CI.</p>",
        "id": 455039536,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722320566
    },
    {
        "content": "<p>I'm not sure how to set all this up. I'm basically a complete nix beginner... I just know how to run <code>nix develop</code> and <code>nix flake update</code> and that's about the limit of my knowledge rn.</p>",
        "id": 455039626,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722320623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  That dockerfile you gave worked for me. Its working in <a href=\"http://railway.app\">railway.app</a> now. Thank you! </p>\n<p>I just had to tweak somethings to match my project structure</p>\n<div class=\"codehilite\"><pre><span></span><code># Builder state using the roclang/nightly-ubuntu-latest image\nFROM roclang/nightly-debian-bookworm as builder\n\n# Copy the source code\nCOPY ./src /src\n\n# Build the roc app\nRUN [&quot;roc&quot;, &quot;build&quot;, &quot;/src/Main.roc&quot;]\n\n# Check if the binary is present\nRUN [&quot;ls&quot;, &quot;/src/Main&quot;]\n\n# Use a smaller image for running the app\nFROM bitnami/minideb:bookworm as final\n\n# Set environment variables\nENV ROC_BASIC_WEBSERVER_HOST=0.0.0.0\nENV ROC_BASIC_WEBSERVER_PORT=8000\n\n# Copy the binary from the builder container\nCOPY --from=builder /src/Main .\n\n# Run the app binary\nCMD [&quot;./Main&quot;]\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code># Makefile\n\n# Image name\nIMAGE_NAME = roc-app\n\n# Build the Docker image\nbuild:\n    docker build --platform linux/amd64 -t $(IMAGE_NAME) .\n\n# Run the Docker container\nrun:\n    docker run --platform linux/amd64 --rm $(IMAGE_NAME)\n</code></pre></div>",
        "id": 455192104,
        "sender_full_name": "Chris Vouga",
        "timestamp": 1722364444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"650973\">@Chris Vouga</span> -- I'm thinking about how we might capture this and share it for others in future. </p>\n<p>I'm wondering where you would expect to find this next time you come along to do this with basic-webserver? </p>\n<p>Like would an example in <a href=\"https://www.roc-lang.org/examples\">https://www.roc-lang.org/examples</a> be helpful? </p>\n<p>Or would an example with a Dockerfile and some instructions in the basic-webserver  repo be more helpful?</p>\n<p>Or maybe even a blog post that is linked from those places?</p>",
        "id": 455336634,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722419849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> Any of those places would be great. The best place would be within the basic web server docs. A section on deploying. The current docs look auto generated and more of an API reference so it may be out place there.</p>",
        "id": 455466778,
        "sender_full_name": "Chris Vouga",
        "timestamp": 1722454197
    }
]