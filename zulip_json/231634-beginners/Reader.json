[
    {
        "content": "<p>Does <code>roc</code> have something like <code>Reader</code> in haskell? I find I almost always want something to \"inject\" values in my programs once they're larger than a trivial size. It would be a tough one to give up.</p>",
        "id": 359959089,
        "sender_full_name": "drew",
        "timestamp": 1684617279
    },
    {
        "content": "<p>I'm not familiar with <code>Reader</code> but I wonder if <a href=\"#narrow/stream/231634-beginners/topic/PSA.3A.20import.20files.20as.20Str.2FList.20U8/near/348507136\">importing files as Str</a> would help you here?</p>",
        "id": 359968903,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1684624423
    },
    {
        "content": "<p>I don't think they are related at all.</p>",
        "id": 359972159,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684627298
    },
    {
        "content": "<p>Reader is a monad pattern for piping constant data around</p>",
        "id": 359972173,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684627316
    },
    {
        "content": "<p>I don't know it well enough to be confident to comment. Not sure if it requires higher kinded types or not. I think it or something similar should be doable in roc, but we definitely don't have it in the standard.</p>",
        "id": 359972255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684627378
    },
    {
        "content": "<p>Would injecting values through the platform and/or through code generation suffice?</p>",
        "id": 359980774,
        "sender_full_name": "Georges Boris",
        "timestamp": 1684635131
    },
    {
        "content": "<p>not currently, but I'm partway through writing up a proposal that happens to cover similar use cases to <code>Reader</code></p>",
        "id": 360027101,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684663673
    },
    {
        "content": "<p>at least in terms of this:</p>\n<blockquote>\n<p>something to \"inject\" values in my programs once they're larger than a trivial size</p>\n</blockquote>",
        "id": 360054409,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684674403
    },
    {
        "content": "<p>great! it's not <code>Reader</code> i care about, specifically, but this \"lightweight injection\" is soooo hard to give up in real purely-functional programs</p>",
        "id": 360055723,
        "sender_full_name": "drew",
        "timestamp": 1684674930
    },
    {
        "content": "<p>what are some of the things you inject in this way?</p>",
        "id": 360056051,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684675060
    },
    {
        "content": "<p>Considering that <code>Reader</code> can be implemented on functions and that we have backpassing, i'm guessing there's some way to make it \"just work\", but I haven't tried.</p>",
        "id": 360056082,
        "sender_full_name": "drew",
        "timestamp": 1684675076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> generally program-wide configuration. I'll have an effectful \"setup\" phase and then outputs of this are passed around.</p>",
        "id": 360056191,
        "sender_full_name": "drew",
        "timestamp": 1684675103
    },
    {
        "content": "<p>yeah I'm just wondering specifically what types of configuration</p>",
        "id": 360056235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684675123
    },
    {
        "content": "<p>things like db connections on the back end, or \"setters\" to avoid prop-drilling on the front end</p>",
        "id": 360056327,
        "sender_full_name": "drew",
        "timestamp": 1684675163
    },
    {
        "content": "<p>(this is in haskell on the back end and purescript on the front end)</p>",
        "id": 360056371,
        "sender_full_name": "drew",
        "timestamp": 1684675184
    },
    {
        "content": "<p>one sec, looking at my front end source</p>",
        "id": 360056399,
        "sender_full_name": "drew",
        "timestamp": 1684675200
    },
    {
        "content": "<p>so, as a simple example, on <a href=\"http://drewolson.org\">drewolson.org</a> (which is just my little playground for experimenting with the front end), i include the initial path and the push-state navigation handle in the environment</p>",
        "id": 360056627,
        "sender_full_name": "drew",
        "timestamp": 1684675271
    },
    {
        "content": "<p>so any component can create a push-state link</p>",
        "id": 360056663,
        "sender_full_name": "drew",
        "timestamp": 1684675287
    },
    {
        "content": "<p>(btw, really enjoying your podcast! also i'm friends with the some of the RWX folks, super excited they're supporting your work)</p>",
        "id": 360057033,
        "sender_full_name": "drew",
        "timestamp": 1684675428
    },
    {
        "content": "<p>thanks! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 360076191,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684682365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Reader/near/359972255\">said</a>:</p>\n<blockquote>\n<p>Not sure if it requires higher kinded types or not.</p>\n</blockquote>\n<p>it doesn't have to: <a href=\"https://package.elm-lang.org/packages/Punie/elm-reader/latest/\">https://package.elm-lang.org/packages/Punie/elm-reader/latest/</a></p>",
        "id": 360099058,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684691450
    },
    {
        "content": "<p>Yeah, I think you can translate any Haskell monad to a Roc type + functions. What you can't have is Monad Transformers, as they do require HKTs.</p>",
        "id": 360100258,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684691958
    },
    {
        "content": "<p>You would want the ability to interleave effects in <code>Reader</code>, but I guess you get that for free given that effects are handled by the platform, right? Maybe <code>Reader</code> is actually an ability but also I know nothing about Roc abilities at this point.</p>",
        "id": 360112471,
        "sender_full_name": "drew",
        "timestamp": 1684697718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/231634-beginners/topic/Reader/near/360100258\">said</a>:</p>\n<blockquote>\n<p>What you can't have is Monad Transformers, as they do require HKTs.</p>\n</blockquote>\n<p>I implemented <code>ReaderT</code> and other monad transformers in Elm (in order to experiment with some Haskell code samples). It works, but you have to pass the specific monad functions as parameters, though. (For example, you have to pass the monad's <code>pure</code> function to the <code>ReaderT</code> <code>asks</code> function.)</p>",
        "id": 360361138,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1684784472
    },
    {
        "content": "<p>That's good a point. It's technically possible, just more explicit.</p>",
        "id": 360361468,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684784613
    }
]