[
    {
        "content": "<p>I'm writing a function that calls several other functions that each return a <code>Result</code>. If any of them return an <code>Err</code>, I'd like to exit the function with an <code>Err</code>. Is there a simple way to do that?</p>\n<p>I can use <code>Result.map</code>, but it feels a bit cumbersome, and harder to read. Ideally, I would just like an equivalent of the <code>!</code> syntax sugar that exists for <code>Task</code>, but applied to <code>Result</code>.</p>\n<p>Specifically, I'm trying to parse some text that looks like this: <code>\"1-3 a: blabla\"</code> and produce a tuple like <code>(1, 3, 'a', \"blabla\")</code>. It's just 3 calls to <code>Str.split</code> and 2 calls to <code>Str.toU64</code>, but the function doesn't look very clear right now. Here's a simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">testthis</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">aStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">bStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">aRes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"w\"> </span><span class=\"nv\">aStr</span>\n<span class=\"w\">    </span><span class=\"nv\">bRes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"w\"> </span><span class=\"nv\">bStr</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">aRes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">bRes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">BadInputs</span>\n</code></pre></div>\n<p>This works, but it's a bit heavy, and it gets worse the more you have function calls returning <code>Result</code>.</p>\n<p>I'm hoping for something simpler, in the following spirit (not this syntax, but this kind of spirit):</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">testthis</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">aStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">bStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nv\">aStr</span>\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nv\">bStr</span>\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n</code></pre></div>",
        "id": 455347087,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1722422814
    },
    {
        "content": "<p>So we have had discussions on Zulip about providing syntax sugar a la Rust to do what you're asking for already, let me get you a link</p>",
        "id": 455347672,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722423051
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6828\">https://github.com/roc-lang/roc/issues/6828</a></p>",
        "id": 455347673,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722423052
    },
    {
        "content": "<p>There's work in progress for <code>Result.try</code> sugar: <a href=\"https://github.com/roc-lang/roc/pull/6844\">https://github.com/roc-lang/roc/pull/6844</a><br>\nIt will be <code>?</code> for <code>Result</code> as <code>!</code> for <code>Task</code>.</p>\n<p>Otherwise you can use backpassing</p>",
        "id": 455347676,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722423054
    },
    {
        "content": "<p>So in short, your <code>testthis</code> function will work once the <code>Result.try</code> sugar is finished being implemented</p>",
        "id": 455347781,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722423104
    },
    {
        "content": "<p>Fantastic, thanks a lot! Perhaps that would be worth mentionning on the Error handling page in the docs?</p>",
        "id": 455348439,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1722423392
    },
    {
        "content": "<p>I believe with backpassing it would look like this. The backpassing syntax would probably be removed, but I think it's still worth mentioning it to have more opinions when the last discussion of removal is brought up:</p>\n<div class=\"codehilite\"><pre><span></span><code>testthis = \\aStr, bStr -&gt;\n    a &lt;- Str.toI32 aStr |&gt; Result.try\n    b &lt;- Str.toI32 bStr |&gt; Result.try\n    Ok (a + b)\n</code></pre></div>",
        "id": 455348507,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722423420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> yeah, it's definitely gonna be added once the feature is implemented, but it could definitely be added as a \"future feature\" tip!</p>",
        "id": 455348880,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722423555
    },
    {
        "content": "<p>Thanks Sam &amp; Kiryl, that's super helpful. I'll submit a PR for a future feature tip.</p>",
        "id": 455469906,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1722455109
    },
    {
        "content": "<p>Feel free to add me as a PR reviewer!</p>",
        "id": 455491573,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462661
    },
    {
        "content": "<p>Looks like Github is down right now. <span aria-label=\"sick\" class=\"emoji emoji-1f912\" role=\"img\" title=\"sick\">:sick:</span></p>",
        "id": 455491741,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1722462729
    },
    {
        "content": "<p>I've pushed 3 PRs:</p>\n<ul>\n<li><a href=\"https://github.com/roc-lang/roc/pull/6952\">#6952</a>: clarify the documentation regarding chaining functions that return <code>Result</code>s</li>\n<li><a href=\"https://github.com/roc-lang/roc/pull/6949\">#6949</a>: remove the stale reference to backpassing on the home page</li>\n<li><a href=\"https://github.com/roc-lang/roc/pull/6951\">#6951</a> (unrelated): ensure the REPL ignores empty commands (including commands with only comments and whitespace).</li>\n</ul>",
        "id": 455517786,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1722474944
    }
]