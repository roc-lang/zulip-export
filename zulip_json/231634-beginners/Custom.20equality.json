[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304641-ideas/topic/Hash.20Maps.20.26.20Sets/near/275032449\">said</a>:</p>\n<blockquote>\n<p>If a user makes a custom equality method, would it work with <code>==</code></p>\n</blockquote>\n<p>Continuing in a new thread:<br>\nWhat kinds of use cases do people have in mind for overriding <code>==</code>? I think often instead of custom equality it's better to normalize the data so that the default <code>==</code> works. For example a rational value type defined as <code>{ numerator : Int, denominator : Int }</code> has a constructor that makes sure the numerator and denominator are lowest common multiples so that 4/6 and 2/3 are equal.</p>\n<p>The only situation I've personally found where custom equality is needed is with HashDict and HashSet since you'd want two dicts with the same contents to be equal even if the insertion order is different and normalizing the data isn't possible if the keys aren't comparable.</p>\n<p>Are there other use cases for custom equality where just normalizing the data isn't possible?</p>",
        "id": 275036251,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647034211
    },
    {
        "content": "<p>Maybe in cases where equivalency is enough?<br>\n<code>black == veryDarkGray</code><br>\nIdk, maybe using <code>==</code> for equivalency is an anti-pattern.</p>",
        "id": 275036574,
        "sender_full_name": "jan kili",
        "timestamp": 1647034421
    },
    {
        "content": "<blockquote>\n<p>What kinds of use cases do people have in mind for overriding <code>==</code>?</p>\n</blockquote>\n<p>basically just custom collections</p>",
        "id": 275036731,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647034506
    },
    {
        "content": "<p>e.g. a red-black tree, where insertion order results in a different internal structure but not a different ordering for traversals or lookups</p>",
        "id": 275036777,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647034545
    },
    {
        "content": "<p>normalizing would make equality a lot more expensive</p>",
        "id": 275036834,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647034564
    },
    {
        "content": "<p>Are there a lot of different collections that people will need? For example, if HashDict, RedBlackTree, and maybe 2-3 more data structures are what people need, maybe it would make more sense to have those as part of a standard library?</p>",
        "id": 275037017,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647034688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/stream/231634-beginners/topic/Custom.20equality/near/275036574\">said</a>:</p>\n<blockquote>\n<p>Maybe in cases where equivalency is enough?<br>\n<code>black == veryDarkGray</code><br>\nIdk, maybe using <code>==</code> for equivalency is an anti-pattern.</p>\n</blockquote>\n<p>I mean no offense but this is one of the reasons I get nervous when I hear there's custom equality <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275037120,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647034757
    },
    {
        "content": "<p>people can mess up equality regardless of whether there's custom equality</p>",
        "id": 275037239,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647034831
    },
    {
        "content": "<p>for example, making a custom red-black tree in Elm results in <code>==</code> returning false sometimes for trees that are identical in every observable way <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275037278,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647034863
    },
    {
        "content": "<p>I think equality is just innately susceptible to bugs from userspace</p>",
        "id": 275037319,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647034898
    },
    {
        "content": "<p>I'm guessing you agree though that there's more chance of getting things wrong by allowing custom equality than there's ways to get things wrong if it's not allowed? Deciding whether to include custom equality is a question of if there's enough use cases to make it still worthwhile.</p>",
        "id": 275037684,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647035129
    },
    {
        "content": "<p>I'm actually not sure honestly</p>",
        "id": 275037779,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035174
    },
    {
        "content": "<p>like I've used Rust and Java, both of which have custom equality, and I haven't seen it be a problem in practice</p>",
        "id": 275037811,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035199
    },
    {
        "content": "<p>but I have seen in Elm and JS it (very rarely) come up that <code>==</code> works in a surprising way because there's no custom equality, and you just have to know to call a <code>.equals</code> function or something instead</p>",
        "id": 275037858,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035236
    },
    {
        "content": "<p>separately, in this case it would make the language more complex to disallow it</p>",
        "id": 275038035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035326
    },
    {
        "content": "<p>because by default, adding abilities to things is just a thing you can do</p>",
        "id": 275038086,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035339
    },
    {
        "content": "<p>so we'd have to make a separate compiler rule where if you tried to do it for equality (or hashing, since equality and hashing have to stay in sync, so if you can't do one, you shouldn't be allowed to do the other) then you got a compiler error</p>",
        "id": 275038220,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035376
    },
    {
        "content": "<p>Sorry this is a bit off topic but how do you ensure equality and hashing stay in sync if there's custom equality? I'm assuming you mean that <code>x == y</code> implies <code>hash x == hash y</code>?</p>",
        "id": 275038761,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647035557
    },
    {
        "content": "<p>That should be true. Though I guess it may not be 100% guaranteed.</p>",
        "id": 275038849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647035618
    },
    {
        "content": "<p>Probably an implementation bug when not true.</p>",
        "id": 275038942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647035668
    },
    {
        "content": "<blockquote>\n<p>how do you ensure equality and hashing stay in sync if there's custom equality?</p>\n</blockquote>\n<p>it's not possible in the general case</p>",
        "id": 275039064,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035760
    },
    {
        "content": "<p>also something that I haven't seen being a problem in practice in Java and Rust, although it theoretically could be!</p>",
        "id": 275039128,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035782
    },
    {
        "content": "<p>I have seen it in practice, generally when someone adds a record to a struct and fails to update the hashing function.</p>",
        "id": 275039219,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647035867
    },
    {
        "content": "<p>If someone to overrides <code>==</code> without overriding hash and then insert something into a HashDict, isn't it possible for that value to become unreachable? Maybe I'm misremembering how HashDict works but I vaguely remember this being something I had to keep in mind when overriding equality in C#</p>",
        "id": 275039236,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647035877
    },
    {
        "content": "<p>it's also not quite the case that <code>x == y</code> should imply <code>hash x == hash y</code> but rather the other way around, <code>hash x == hash y</code> should imply <code>x == y</code></p>\n<p>edit: nm, other way around <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 275039294,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035896
    },
    {
        "content": "<p>I think your backwards, Richard</p>",
        "id": 275039330,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647035929
    },
    {
        "content": "<p>Hash collisions happen</p>",
        "id": 275039340,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647035935
    },
    {
        "content": "<p>oh right, oops haha</p>",
        "id": 275039348,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035944
    },
    {
        "content": "<p>So you still have to check for equality even if hashes match</p>",
        "id": 275039353,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647035946
    },
    {
        "content": "<p>yeah of course haha</p>",
        "id": 275039369,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035961
    },
    {
        "content": "<p>dunno why I was thinking that</p>",
        "id": 275039381,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647035969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> an important thing to keep in mind is that I think in practice, overriding default equality would be something done extremely extremely rarely in Roc</p>",
        "id": 275039483,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036019
    },
    {
        "content": "<p>because equality is automatically derived for records, tag unions, etc.</p>",
        "id": 275039554,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036048
    },
    {
        "content": "<p>as is hashing</p>",
        "id": 275039559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036051
    },
    {
        "content": "<p>so I don't know what might motivate someone to go out of their way to override that implementation, aside from making a custom collection <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275039618,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036080
    },
    {
        "content": "<p>and of course the docs for both the equality and hashing abilities would emphasize \"if you're overriding this, you must override the other one too!\"</p>",
        "id": 275039650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036109
    },
    {
        "content": "<p>heh, in fact we could even have a warning for overriding one and not the other</p>",
        "id": 275039703,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036124
    },
    {
        "content": "<p>for what it's worth, for a long time I had this concern too and was like \"we're never gonna have custom equality in Roc, people will just mess it up!\"</p>",
        "id": 275039760,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036161
    },
    {
        "content": "<p>but I had trouble reconciling that in my head with the knowledge that I haven't seen it actually be a problem in practice with languages that support it</p>",
        "id": 275039789,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036184
    },
    {
        "content": "<p>kinda similar to list overflow panicking</p>",
        "id": 275039809,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036201
    },
    {
        "content": "<p>like theoretically <code>List.concat</code> could panic if you added two gigantic lists together, so you could say it ought to return a <code>Result</code> to be safe, but in practice it's not really a thing that comes up in enough real-world cases to be worth the cost of having it return <code>Result</code></p>",
        "id": 275039926,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036267
    },
    {
        "content": "<p>Fair enough. I guess you're not a fan of the approach of adding data structures that really do need this to the standard library or only allowing for certain packages to use it? (I don't blame you if you don't like that second approach, it seems prone to controversy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>\n<p>I have one last concern about custom equality making it harder to support a elm-review type of tool but I'm having trouble giving a concrete example of why that would be the case. Maybe <span class=\"user-mention\" data-user-id=\"458713\">@Jeroen Engels</span> has input there.</p>",
        "id": 275041007,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647036636
    },
    {
        "content": "<blockquote>\n<p>I guess you're not a fan of the approach of adding data structures that really do need this to the standard library or only allowing for certain packages to use it? </p>\n</blockquote>\n<p>yeah I definitely wouldn't want to do the \"only certain packages can use it\" and I think there's a pretty long tail of useful custom data structures that matter for certain use cases to run fast <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 275041235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647036750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Custom.20equality/near/275039219\">said</a>:</p>\n<blockquote>\n<p>I have seen it in practice, generally when someone adds a record to a struct and fails to update the hashing function.</p>\n</blockquote>\n<p>This kind of error would be my biggest worry for when comparing two elements of the same type. Allowing to override <code>==</code> for 2 different types sounds like opening Pandora's box to me. It would be quite nice if the compiler/language provided automatic ways of making sure that the implementation is correct and reaonsable, but that sounds super hard.</p>\n<p>But if we consider that this is always used well (big if?) in order to make two things that are in any otherwise observable way considered equal, I can't think of any issues off the top of my head.</p>",
        "id": 275042637,
        "sender_full_name": "Jeroen Engels",
        "timestamp": 1647037354
    },
    {
        "content": "<blockquote>\n<p>Allowing to override <code>==</code> for 2 different types sounds like opening Pandora's box to me. </p>\n</blockquote>\n<p>oh yeah that wouldn't happen - it'll always be <code>isEq : a, a -&gt; Bool</code></p>",
        "id": 275043517,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647037894
    },
    {
        "content": "<p>types have to be the same</p>",
        "id": 275043539,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647037904
    },
    {
        "content": "<blockquote>\n<p>It would be quite nice if the compiler/language provided automatic ways of making sure that the implementation is correct and reaonsable, but that sounds super hard.</p>\n</blockquote>\n<p>it's probably pretty easy to write a property-based test for it</p>",
        "id": 275043777,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647038035
    },
    {
        "content": "<p>Maybe even some kind of roc-review rule <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 275043929,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1647038127
    },
    {
        "content": "<p>that's a sweet idea!</p>",
        "id": 275044227,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647038325
    },
    {
        "content": "<blockquote>\n<p>If someone to overrides == without overriding hash and then insert something into a HashDict, isn't it possible for that value to become unreachable?</p>\n</blockquote>\n<p>That shouldn't be a problem (besides potentially suboptimal performance, because of more hash collisions)</p>",
        "id": 275044318,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1647038397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Custom.20equality/near/275043777\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It would be quite nice if the compiler/language provided automatic ways of making sure that the implementation is correct and reaonsable, but that sounds super hard.</p>\n</blockquote>\n<p>it's probably pretty easy to write a property-based test for it</p>\n</blockquote>\n<p>Sure, but that property-based test would have to be written by the user right? If the way the type is built (like trees) impacts the data structure, I can imagine even that not catching everything. But yeah, good docs and tooling assistance would help quite a bit here.</p>",
        "id": 275047517,
        "sender_full_name": "Jeroen Engels",
        "timestamp": 1647040579
    },
    {
        "content": "<p>Would it be possible to make <code>something == something</code> return <code>False</code> by overriding the equal function to always return False? Or would there be a cheap reference check (<code>===</code>) always anyway?<br>\nIf that's possible, would there be use-cases ever?</p>",
        "id": 275047722,
        "sender_full_name": "Jeroen Engels",
        "timestamp": 1647040695
    },
    {
        "content": "<p>You keep saying 'override', but I don't think that's what's going on here.<br>\nWhen you define a new type, is when you would define a custom equality</p>",
        "id": 275048114,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1647040928
    },
    {
        "content": "<p>Doesn't defining a custom equality equal overriding the == operation for that type?<br>\n(I don't know the original context of the discussion, sorry)</p>",
        "id": 275062240,
        "sender_full_name": "Jeroen Engels",
        "timestamp": 1647041536
    },
    {
        "content": "<p>I don't think there necesarrily is an equality that automatically exists.</p>",
        "id": 275062739,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1647041956
    },
    {
        "content": "<p>If you define a custom tag, especially if it's an opaque type, I wouldn't expect equality to work without defining how</p>",
        "id": 275062873,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1647042044
    },
    {
        "content": "<blockquote>\n<p>I don't think there necesarrily is an equality that automatically exists.</p>\n</blockquote>\n<p>there is, actually! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 275063741,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647042764
    },
    {
        "content": "<p>I stand corrected</p>",
        "id": 275063789,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1647042804
    }
]