[
    {
        "content": "<p>Let's say I have a function with the signature <code>Result a aError, Result a bError -&gt; Result a [DidNotMatch]???</code><br>\nHow can I extend the possible errors by with both <code>aError</code> and <code>bError</code>? (This is a reduced example from a parser combinator thing I'm trying)</p>",
        "id": 313966297,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670247936
    },
    {
        "content": "<p>I haven't tried it, but I'd expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">DidNotMatch</span><span class=\"p\">]</span><span class=\"nv\">err</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 313991772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670251961
    },
    {
        "content": "<p>if you give it two <code>Result</code>s with different error types, they should get unioned</p>",
        "id": 313991839,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670251981
    },
    {
        "content": "<p>aah, did not think of that, but that makes sense. thank you :)</p>",
        "id": 313992959,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670252287
    },
    {
        "content": "<p>Hmm, this does not quite work. When I write the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>hardcoded : Str, (Str -&gt; Parser b err) -&gt; Parser b [ExpectedStr Str]err\nhardcoded = \\value, callback -&gt;\n    @Parser \\input -&gt;\n        if Str.startsWith input value then\n            when Str.splitFirst input value is\n                Ok {after} -&gt;\n                    @Parser next = callback value\n                    next after\n                Err NotFound -&gt; crash &quot;Did not find item that was just found&quot;\n        else\n            ParseFailed (ExpectedStr value)\n</code></pre></div>\n<p>I get an error message that <code>[ParseFailed [ExpectedStr Str], Parsed b Str]</code> and <code>[ParseFailed err, Parsed b Str]</code> cannot be unified. If I instead use the signature</p>\n<div class=\"codehilite\"><pre><span></span><code>hardcoded : Str, (Str -&gt; Parser b [ExpectedStr Str]err) -&gt; Parser b [ExpectedStr Str]err\nhardcoded = \\value, callback -&gt;\n    @Parser \\input -&gt;\n        if Str.startsWith input value then\n            when Str.splitFirst input value is\n                Ok {after} -&gt;\n                    @Parser next = callback value\n                    next after\n                Err NotFound -&gt; crash &quot;Did not find item that was just found&quot;\n        else\n            ParseFailed (ExpectedStr value)\n</code></pre></div>\n<p>this works, but seems wrong, since I am requesting that the callback might <em>also</em> return <code>ExpectedStr Str</code> and I'm doubling up the type in the type signature</p>",
        "id": 314067840,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670256373
    },
    {
        "content": "<p>(the signature of <code>Parser</code> is <code>Parser a err := Str -&gt; [Parsed a Str, ParseFailed err]</code> right now)</p>",
        "id": 314068019,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670256432
    }
]