[
    {
        "content": "<p>I am playing around with opaque types. I was able to find out how to implement the Equal ability. But I can not figure out, how to implement the inspect ability.</p>\n<p>Here is an example type for a rational number:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Rational a := (Int a, Int a)\n    implements [\n        Eq { isEq: qEq },\n        # Inspect {\n        #     toInspector: toInspectorRational,\n        # },\n    ]\n\nqEq = \\@Rational (a, b), @Rational (c, d) -&gt;\n    a * d == c * b\n\nqToStr = \\@Rational (a, b) -&gt;\n    \"\\(a |&gt; Num.toStr) / \\(b |&gt; Num.toStr)\"\n</code></pre></div>\n<p>How do I implement the <code>toInspectorRational</code> function, that it calls qToStr?</p>",
        "id": 410059716,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703619150
    },
    {
        "content": "<p>It has to be defined based on the inspect primitives listed here: <a href=\"https://www.roc-lang.org/builtins/Inspect#InspectFormatter\">https://www.roc-lang.org/builtins/Inspect#InspectFormatter</a></p>",
        "id": 410061726,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703620716
    },
    {
        "content": "<p>This is an example implementation: <a href=\"https://github.com/roc-lang/roc/blob/2e7343e857f6ab73793cef2ad6c8e4a20dba30cb/examples/Community.roc#L93\">https://github.com/roc-lang/roc/blob/2e7343e857f6ab73793cef2ad6c8e4a20dba30cb/examples/Community.roc#L93</a></p>",
        "id": 410061907,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703620832
    },
    {
        "content": "<p>I guess with autoderiving of inspect, we removed our only example of implementing this.</p>",
        "id": 410061986,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703620866
    },
    {
        "content": "<p>Thank you. That was helpful.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Rational a := (Int a, Int a)\n    implements [\n        Eq { isEq: qEq },\n        Inspect {\n            toInspector: toInspectorRational,\n        },\n    ]\n\ntoInspectorRational = \\@Rational (a, b) -&gt;\n    f0 &lt;- Inspect.custom\n    \"\\(a |&gt; Num.toStr) / \\(b |&gt; Num.toStr)\"\n    |&gt; Inspect.str\n    |&gt; Inspect.apply f0\n</code></pre></div>\n<p>This works. It prints the value as <code>\"5 / 1\"</code></p>\n<p>When I use the type in another type and inspect that, I get some not so nice quotation marks:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>toInspectorOtherType = \\@OtherType (x, y, z) -&gt;\n    f0 &lt;- Inspect.custom\n    \"\\(x |&gt; Inspect.toStr), \\(y |&gt; Inspect.toStr), \\(z |&gt; Inspect.toStr)\"\n    |&gt; Inspect.str\n    |&gt; Inspect.apply f0\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>v = &quot;&quot;1 / 1&quot;, &quot;2 / 1&quot;, &quot;3 / 1&quot;&quot;\n</code></pre></div>\n<p>How would you do it?</p>",
        "id": 410066946,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703624620
    },
    {
        "content": "<p>Yeah, we may need to expand primitives for inspect. One for escaped string and one for arbitrary strings</p>",
        "id": 410070782,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703627662
    },
    {
        "content": "<p>An important note is that inspect is not guaranteed to output in a string format at all. So it is super flexible which makes defining the exact API a bit more nebulous</p>",
        "id": 410070850,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703627749
    },
    {
        "content": "<p>The reason for this is that inspect can then generate a tree structure that can be understood more thoroughly than. Be used in generating a GUI with collapsible lists, etc.</p>",
        "id": 410070957,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703627835
    },
    {
        "content": "<p>Aside, should other type render as a tuple or list?</p>",
        "id": 410076190,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703632307
    },
    {
        "content": "<p>Not everything needs to be strings</p>",
        "id": 410076205,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703632321
    },
    {
        "content": "<p>Could you give me an example with tuple?</p>\n<p>when I write:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>toInspectorOtherType= \\@OtherType (x, y, z) -&gt;\n    f0 &lt;- Inspect.custom\n    [x, y, z]\n    |&gt; Inspect.tuple\n    |&gt; Inspect.apply f0\n</code></pre></div>\n<p>I get the error, that <code>[x,y,z]</code> is <code>List (Rational a)</code>, and not <code>List Inspector f where f implements InspectFormatter</code>. But I don't know how to convert <code>x</code>, <code>y</code> and <code>z</code> to an <code>Inspector</code>. I tried <code>Inspect.inspect</code> an <code>Inspect.apply f0</code>, but this did not work.</p>",
        "id": 410198353,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703708753
    },
    {
        "content": "<p>Inspect.inspect x</p>",
        "id": 410198979,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703709216
    },
    {
        "content": "<p>Just do that to each value in the list</p>",
        "id": 410198989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703709227
    },
    {
        "content": "<p>If I write:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>toInspectorOtherType = \\@OtherType (x, y, z) -&gt;\n    f0 &lt;- Inspect.custom\n    [x, y, z]\n    |&gt; List.map \\v -&gt; Inspect.inspect v\n    |&gt; Inspect.tuple\n    |&gt; Inspect.apply f0\n</code></pre></div>\n<p>I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>This expression has a type that does not implement the abilities it&#39;s expected to:\n\n341│&gt;      [x, y, z]\n342│&gt;      |&gt; List.map \\v -&gt; Inspect.inspect v\n\nThe type Inspector does not fully implement the ability\nInspectFormatter.\n</code></pre></div>",
        "id": 410199776,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703709839
    },
    {
        "content": "<p>Does it work if you leave out the redundant lambda around Inspect.inspect?</p>\n<div class=\"codehilite\"><pre><span></span><code>|&gt; List.map Inspect.inspect\n</code></pre></div>",
        "id": 410200486,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1703710346
    },
    {
        "content": "<p>No. Its the same error.</p>\n<p>I also get the same error, if I write:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>f0 &lt;- Inspect.custom\nInspect.tuple [Inspect.inspect 5]\n|&gt; Inspect.apply f0\n</code></pre></div>",
        "id": 410200642,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703710502
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>This expression has a type that does not implement the abilities it's expected to:\n\n354│      Inspect.tuple [Inspect.inspect 5]\n                        ^^^^^^^^^^^^^^^^^^^\n\nThe type Inspector does not fully implement the ability\nInspectFormatter.\n</code></pre></div>",
        "id": 410200690,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703710548
    },
    {
        "content": "<p>I must have something mixed up...one second</p>",
        "id": 410200930,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703710736
    },
    {
        "content": "<p>If I use Inspect.inspect in the repl, it crashes:</p>\n<div class=\"codehilite\"><pre><span></span><code>roc repl\n\n  The rockin&#39; roc repl\n────────────────────────\n\nEnter an expression, or :help, or :q to quit.\n\n» Inspect.inspect 5\nthread &#39;main&#39; panicked at &#39;[Abilities] not yet implemented. Tracking issue: https://github.com/roc-lang/roc/issues/2463.\nAdditional information: Not reachable yet&#39;, crates/compiler/mono/src/layout.rs:511:55\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 410201002,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703710803
    },
    {
        "content": "<p>The error seems outdated. The issue is closed.</p>\n<p>I have build roc from source at commit 613c6c4e29ac37f2adcf724fe31af3557eadcdc4 (two days ago)</p>",
        "id": 410201160,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703710869
    },
    {
        "content": "<p>Try <code>Inspect.toInspector</code></p>",
        "id": 410201255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703710917
    },
    {
        "content": "<p>That worked! Thanks!</p>\n<p>Here is the working code, if other need it:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>toInspectorOtherType = \\@OtherType (x, y, z) -&gt;\n    f0 &lt;- Inspect.custom\n    [x, y, z]\n    |&gt; List.map Inspect.toInspector\n    |&gt; Inspect.tuple\n    |&gt; Inspect.apply f0\n</code></pre></div>",
        "id": 410201726,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703711132
    },
    {
        "content": "<p>Note, if x, y, and z are not the same type, you won't be able to generate the original list and will have to manually call toInspector on each arg.</p>",
        "id": 410202252,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703711503
    },
    {
        "content": "<p>Cause tuples can be heterogenous</p>",
        "id": 410202276,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703711520
    },
    {
        "content": "<p>Also, if you can autoderive the inspect implementation of opaque types. They will print out as <code>@OpaqueName innerPrintout</code></p>\n<p>So in this case, something like:<br>\n<code>@OtherType (\"1 / 1\", \"2 / 1\", \"3 / 1\")</code></p>",
        "id": 410202557,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703711709
    },
    {
        "content": "<p>Autoderive is like:</p>\n<div class=\"codehilite\"><pre><span></span><code>OtherType a := (Rational a, Rational a, Rational a)\n    implements [Inspect]\n</code></pre></div>",
        "id": 410202720,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703711843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20inspect.20an.20opaque.20type/near/410202557\">said</a>:</p>\n<blockquote>\n<p>Also, if you can autoderive the inspect implementation of opaque types. They will print out as <code>@OpaqueName innerPrintout</code></p>\n<p>So in this case, something like:<br>\n<code>@OtherType (\"1 / 1\", \"2 / 1\", \"3 / 1\")</code></p>\n</blockquote>\n<p>Ahh. I did not know this. This is useful.</p>",
        "id": 410215470,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703721803
    },
    {
        "content": "<p>Yeah, can also autoderive other abilities (like Eq and Hash). Probably we need to put that in docs somewhere</p>",
        "id": 410230043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703732247
    }
]