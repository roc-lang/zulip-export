[
    {
        "content": "<p>I'm trying to create a <code>concat</code> function that can accept either a string or a function as its second argument. Here's what I have:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>main! = |_args|\n    Stdout.write!? (\"hey\" |&gt; concat(Fn Ansi.cr))\n    Ok({})\n\nconcat = |str, str_or_thunk|\n    when str_or_thunk is\n        Str s -&gt; Str.concat(str, s)\n        Fn f -&gt; Str.concat(str, f(\"\"))\n</code></pre></div>\n<p>This works, but I have a few questions:</p>\n<ol>\n<li>\n<p><strong>Why do I need to explicitly tag functions with <code>Fn</code>?</strong> I noticed that <code>Str</code> works as both a tag name and type, but function types like <code>(Str -&gt; Str)</code> can't be used as tag names. Is there a technical reason for this?</p>\n</li>\n<li>\n<p><strong>Is there a cleaner/more idiomatic way to achieve this in Roc?</strong> Coming from other languages, I'm used to function overloading or polymorphic functions. What's the Roc way to handle this pattern?</p>\n</li>\n<li>\n<p><strong>What's the general preference in the Roc community</strong> for cases where you want a function to accept different types? Should I:</p>\n<ul>\n<li>Use tag unions like above?</li>\n<li>Create separate functions (<code>concat_str</code> and <code>concat_fn</code>)?</li>\n<li>Always normalize to one type (e.g., always use functions)?</li>\n<li>Something else?</li>\n</ul>\n</li>\n</ol>\n<p>My use case is building ANSI escape sequences where sometimes I want to concatenate a literal string and sometimes I want to concatenate the result of a function call (like <code>Ansi.cr</code> which returns carriage return).</p>\n<p>Thanks!<br>\np.s. I used ai to help me formulate this, sorry. my brain melts a bit cause it's 10pm</p>",
        "id": 535572198,
        "sender_full_name": "Ruby",
        "timestamp": 1755807262
    },
    {
        "content": "<p>Oh. It seems like I need to also use Str as well.<br>\n<code>Stdout.write!? (\"hey\" |&gt; concat(Str \"you\")</code></p>\n<p>okay, maybe that is not that bad, it looks clear</p>",
        "id": 535572417,
        "sender_full_name": "Ruby",
        "timestamp": 1755807367
    },
    {
        "content": "<ol>\n<li>If we allowed tag unions without tag names it would add a bunch of complexity. For example, pattern matching with tag names is very simple. Without tag names the type would have to be determined at runtime.</li>\n</ol>",
        "id": 535656911,
        "sender_full_name": "Anton",
        "timestamp": 1755859335
    },
    {
        "content": "<p>2+3. I would also use tag unions here. For function overloading we plan on adding <a href=\"https://docs.google.com/document/d/1OUd0f4PQjH8jb6i1vEJ5DOnfpVBJbGTjnCakpXAYeT8/edit?tab=t.0#heading=h.8z01597oqp4u\">static dispatch</a>, but for this case I would probably still use tag unions.</p>",
        "id": 535669394,
        "sender_full_name": "Anton",
        "timestamp": 1755864392
    }
]