[
    {
        "content": "<p>If I have a function, that returns a tag like <code>[A,B,C]</code>, and I want to compare it with a tag like this <code>[A, B]</code>,  is that possible?</p>\n<p>For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>func : {} -&gt; [A, B, C]\nfunc = \\_ -&gt; C\n\notherFunc : [A, B] -&gt; Bool\notherFunc = \\ab -&gt;\n  func {} == ab\n</code></pre></div>\n<p>If I run this, I get an error like</p>\n<div class=\"codehilite\"><pre><span></span><code>This ab value is a:\n\n    […]\n\nBut == needs its 2nd argument to be:\n\n    [C, …]\n</code></pre></div>",
        "id": 473766927,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1727709207
    },
    {
        "content": "<p>Ah. I found a solution. I can use <code>[A, B]_</code> instead of <code>[A, B]</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>otherFunc : [A, B]_ -&gt; Bool\notherFunc = \\ab -&gt;\n  func {} == ab\n</code></pre></div>\n<p>But is this really necessary? If the argument to <code>otherFunc</code> should only be <code>A</code> or <code>B</code>, then the <code>_</code> seems wrong. Would it be possible to compare any tags and just return <code>Bool.false</code>, if they do not intersect?</p>",
        "id": 473768051,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1727709467
    },
    {
        "content": "<p>My understanding is that equality checks via <code>==</code> are derived for specific types, and return true for things that are \"structurally\" the same</p>",
        "id": 473791290,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727714155
    },
    {
        "content": "<p>So as much as the code makes the types <code>[A, B]</code> and <code>[A, B, C]</code> look the same because two of the variants have the same name, the overall types are actually different</p>",
        "id": 473791499,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727714205
    },
    {
        "content": "<p>The <code>_</code> is actually just a type hole, not a generic parameter, so it'll resolve to a <em>specific type</em> here, meaning that <code>[A, B]_</code> is resolving to <code>[A, B]</code> only, and not <code>[A, B, C]</code> as well.</p>",
        "id": 473792078,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727714383
    },
    {
        "content": "<p>For us to implement equality checks between different types is a bit of a rabbit hole... Do we only allow it for tag unions where one is a subset of the other? What if each union has variants missing from the other?</p>",
        "id": 473792758,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727714600
    },
    {
        "content": "<p>So for now, we'd probably expect you to do one of two things:</p>",
        "id": 473792926,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727714651
    },
    {
        "content": "<p>Write a match expression:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">abc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n</code></pre></div>",
        "id": 473793059,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727714701
    },
    {
        "content": "<p>Or keep the <code>[A, B]</code> variant in a parent to make the <code>[A, B]</code> type equal:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">MyType</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AB</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"p\">]</span>\n\n<span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">myType</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">AB</span><span class=\"w\"> </span><span class=\"nv\">myAb</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">myAb</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">ab</span>\n<span class=\"w\">    </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n</code></pre></div>",
        "id": 473793508,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727714810
    },
    {
        "content": "<p>It's both not so nice. I think I will stay with [A, B]_ for the moment, even when it's not correct</p>",
        "id": 473796423,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1727715301
    },
    {
        "content": "<blockquote>\n<p>So for now, we'd probably expect you to do one of two things:</p>\n</blockquote>\n<p>This is a contrived example, so it is hard to say for sure, but I think the recommendation today would be to not try and compare two different types. Instead architect the code differently.</p>",
        "id": 473828949,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727723249
    },
    {
        "content": "<p>This is kinda like trying to compare two different c++ enums that happen to have some tags with the same names.</p>",
        "id": 473829092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727723286
    },
    {
        "content": "<p>When I think about it, I get it. If I had this types: <code>[A, B, C]</code> and <code>[B, C]</code>. In memory, the <code>B</code>from the first type is represented as <code>1</code> and the one from the second tag as <code>0</code>.  If you write <code>B == B</code> it would look like <code>1 == 0</code> in memory. If roc should be able to compare them, roc would need to convert the types.</p>\n<p>I get, that this is something, that should be avoided. But when I just look at the roc code, it is strange at first, that <code>B == B</code> is a type error.</p>",
        "id": 473836885,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1727725369
    },
    {
        "content": "<p>Yeah, totally agree with that being strange. The issue with not namespacing or qualifying our tags in some way</p>",
        "id": 473880866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727737451
    },
    {
        "content": "<p>Cause it really should be: <code>Union1::B == Union2::B</code></p>",
        "id": 473880920,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727737471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Compare.20different.20Tags/near/473880866\">said</a>:</p>\n<blockquote>\n<p>Yeah, totally agree with that being strange. The issue with not namespacing or qualifying our tags in some way</p>\n</blockquote>\n<p>A cost that is <em>totally</em> worth opting into, but is definitely a cost</p>",
        "id": 473886643,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727739979
    }
]