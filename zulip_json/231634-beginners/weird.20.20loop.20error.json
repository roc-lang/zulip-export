[
    {
        "content": "<p>hi, I am getting following weird error </p>\n<div class=\"codehilite\"><pre><span></span><code>The andMode value depends on itself through the following chain of\ndefinitions:\n\n    ┌─────┐\n    │     andMode\n    │     ↓\n    │     commandsToHandlers\n    │     ↓\n    │     commandAnalysis\n    │     ↓\n    │     recoverConfigFromInput\n    └─────┘\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>it is strange because  this  loop is exactly what I want to achieve (something perfectly feasible in  all languages I know of but Roc)</p>",
        "id": 411993696,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704826401
    },
    {
        "content": "<p>this error should be about something that's only supported in lazy language like Haskell</p>",
        "id": 411994776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704826827
    },
    {
        "content": "<p>for example, of course this can't work:</p>\n<div class=\"codehilite\"><pre><span></span><code>x = x\n</code></pre></div>\n<p>because <code>x</code> can't be defined in terms of itself unless <code>x</code> is a function and it's referring to itself in the body</p>",
        "id": 411995097,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704826947
    },
    {
        "content": "<p>similarly, this can't possibly work:</p>\n<div class=\"codehilite\"><pre><span></span><code>a = b\nb = a\n</code></pre></div>",
        "id": 411995163,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704826977
    },
    {
        "content": "<p>or this:</p>\n<div class=\"codehilite\"><pre><span></span><code>a = b\nb = c\nc = a\n</code></pre></div>",
        "id": 411995191,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704826992
    },
    {
        "content": "<p>so this compile error is saying the code has something like one of these, where in order to complete <code>a = ...</code> the compiler has to already know what <code>a</code> is, which isn't possible</p>",
        "id": 411995331,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704827046
    },
    {
        "content": "<p>lazy languages like Haskell can do this because they automatically wrap all definitions in function calls, so they end up in the \"a function can refer to itself in the body\" situation every time even though it doesn't look like it syntactically</p>",
        "id": 411995484,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704827119
    },
    {
        "content": "<p>ok I get that, it happens most likely  because the  function, which is calling indirectly itself, enters  the game  as value(handler) and  its called in similar fashion as \"C\" handlers frequently are. ok I will find workaround somehow</p>",
        "id": 411996100,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704827364
    },
    {
        "content": "<p>if this was \"normal\" function I think I can  do  f -&gt; h -&gt; f ?  I think I have  done that in the past, am I correct ?</p>",
        "id": 411996517,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704827534
    },
    {
        "content": "<p>yeah, that should work fine!</p>",
        "id": 411996701,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704827627
    },
    {
        "content": "<p>btw. is this possible for  Roc in the future  to recognize that <br>\na = f(.. , c ) <br>\nb = g(.. , a )<br>\nc = h(.. ,b) <br>\n a, b and  c are in reality functions  so it is perfectly  ok to have this structure  or this will be always  limitation ?</p>",
        "id": 411998082,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704828192
    },
    {
        "content": "<p>so <code>f</code> is returning a function here?</p>",
        "id": 411998949,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704828533
    },
    {
        "content": "<p>yes  all  functions , I don't know  if I have  described  correctly (in terms of math annotation) but I hope you get the point</p>",
        "id": 411999997,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704828953
    },
    {
        "content": "<p>I have got  over my problem  this  time  but at some point  handlers may be the easiest way to solve some other problems. I could  try  something different but still intuitively expectation is that  is should  work</p>",
        "id": 412000471,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704829156
    },
    {
        "content": "<p>ah, so if they're all functions, then I think you should be able to make it work by explicitly wrapping them in lambdas, e.g. if the function returned by <code>f</code> takes 2 argument, then:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">arg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg2</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">arg1</span><span class=\"w\"> </span><span class=\"n\">arg2</span>\n</code></pre></div>\n<p>I think that should work</p>",
        "id": 412002517,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704830068
    },
    {
        "content": "<p>if I remember right, there was some detail that led us to decide we should require explicit lambdas in that situation, but I don't remember the reasoning anymore</p>",
        "id": 412002611,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704830115
    },
    {
        "content": "<p>ok, I will check if  this tip works for  me, thx</p>",
        "id": 412011044,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704833912
    },
    {
        "content": "<p>ok  in my case  things  aren't  as simple  as I initially presented <br>\n<a href=\"https://github.com/salarii/peek/blob/main/Commands.roc\">https://github.com/salarii/peek/blob/main/Commands.roc</a><br>\n275   #|&gt; Dict.insert \"dsdsa\"  andMode</p>",
        "id": 412031395,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1704843815
    },
    {
        "content": "<p>Interesting... I can try to look at this today</p>",
        "id": 412107387,
        "sender_full_name": "Anton",
        "timestamp": 1704881800
    },
    {
        "content": "<p>I won't make it for today, I should be able to take a look on Friday if no one else is available until then.</p>",
        "id": 412205474,
        "sender_full_name": "Anton",
        "timestamp": 1704914676
    },
    {
        "content": "<p>Today's tasks took longer then expected, I should have time tomorrow</p>",
        "id": 412613844,
        "sender_full_name": "Anton",
        "timestamp": 1705090552
    },
    {
        "content": "<p>So this is the infinite loop:</p>\n<ul>\n<li><code>addMode</code> can call <code>recoverConfigFromInput</code></li>\n<li><code>recoverConfigFromInput</code> can call <code>commandAnalysis</code></li>\n<li><code>commandAnalysis</code> calls <code>commandsToHandlers</code></li>\n<li><code>commandsToHandlers</code> calls <code>andMode</code></li>\n</ul>",
        "id": 412721171,
        "sender_full_name": "Anton",
        "timestamp": 1705162156
    },
    {
        "content": "<p>This is the simplified version that creates the same error as your code:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;helloWorld&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.7.1/Icc3xJoIixF3hCcfXrDwLCu4wQHtNdPyoJkEbkgIElA.tar.br&quot; }\n    imports [pf.Stdout]\n    provides [main] to pf\n\nmain =\n    Stdout.line &quot;Hello, World!&quot;\n\nandMode : I64 -&gt; List Str\nandMode = \\num -&gt; recoverConfigFromInput num\n\nrecoverConfigFromInput : I64 -&gt; List Str\nrecoverConfigFromInput = \\num -&gt; commandAnalysis num\n\ncommandAnalysis : I64 -&gt; List Str\ncommandAnalysis = \\_num -&gt;\n    Dict.keys (commandsToHandlers)\n\ncommandsToHandlers : Dict Str ( I64 -&gt; List Str )\ncommandsToHandlers =\n    Dict.empty {}\n    |&gt; Dict.insert &quot;dsdsa&quot;  andMode\n</code></pre></div>",
        "id": 412721207,
        "sender_full_name": "Anton",
        "timestamp": 1705162197
    },
    {
        "content": "<p>Further simplified:</p>\n<div class=\"codehilite\"><pre><span></span><code>andMode : I64 -&gt; List Str\nandMode = \\num -&gt; commandAnalysis num\n\ncommandAnalysis : I64 -&gt; List Str\ncommandAnalysis = \\_num -&gt;\n    Dict.keys (commandsToHandlers)\n\ncommandsToHandlers : Dict Str ( I64 -&gt; List Str )\ncommandsToHandlers =\n    Dict.empty {}\n    |&gt; Dict.insert &quot;dsdsa&quot;  andMode\n</code></pre></div>",
        "id": 412721265,
        "sender_full_name": "Anton",
        "timestamp": 1705162223
    },
    {
        "content": "<p>Even further:</p>\n<div class=\"codehilite\"><pre><span></span><code>andMode : I64 -&gt; List Str\nandMode = \\num -&gt; Dict.keys (commandsToHandlers)\n\ncommandsToHandlers : Dict Str ( I64 -&gt; List Str )\ncommandsToHandlers =\n    Dict.empty {}\n    |&gt; Dict.insert &quot;dsdsa&quot;  andMode\n</code></pre></div>",
        "id": 412721287,
        "sender_full_name": "Anton",
        "timestamp": 1705162256
    },
    {
        "content": "<p>But this code can actually be run:</p>\n<div class=\"codehilite\"><pre><span></span><code>main = Stdout.line (Inspect.toStr (andMode 0))\n\nandMode : I64 -&gt; List Str\nandMode = \\num -&gt; Dict.keys (commandsToHandlers)\n\ncommandsToHandlers : Dict Str ( I64 -&gt; List Str )\ncommandsToHandlers =\n    Dict.empty {}\n    |&gt; Dict.insert &quot;dsdsa&quot;  andMode\n</code></pre></div>",
        "id": 412721498,
        "sender_full_name": "Anton",
        "timestamp": 1705162445
    },
    {
        "content": "<p>That prints [\"dsdsa\"]</p>",
        "id": 412721569,
        "sender_full_name": "Anton",
        "timestamp": 1705162539
    },
    {
        "content": "<p>Building does still yield the error:<br>\n<a href=\"/user_uploads/22008/S00Irm25baNk_Du2ZokqGSQ3/Screenshot_20240113_171612.png\">Screenshot_20240113_171612.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/S00Irm25baNk_Du2ZokqGSQ3/Screenshot_20240113_171612.png\" title=\"Screenshot_20240113_171612.png\"><img src=\"/user_uploads/22008/S00Irm25baNk_Du2ZokqGSQ3/Screenshot_20240113_171612.png\"></a></div>",
        "id": 412721645,
        "sender_full_name": "Anton",
        "timestamp": 1705162611
    },
    {
        "content": "<p>So the code works because it does not rely on any value of the Dict, only on the keys.</p>",
        "id": 412721677,
        "sender_full_name": "Anton",
        "timestamp": 1705162666
    },
    {
        "content": "<p>I'm not sure what we should do about this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 412721954,
        "sender_full_name": "Anton",
        "timestamp": 1705162926
    },
    {
        "content": "<p><code>commandsToHandlers</code> never executes <code>andMode</code>. What does \"depends on\" (from the error message) mean in this context? I thought it meant \"executes\", which would lead to the mentioned infinite loop.</p>",
        "id": 416645026,
        "sender_full_name": "David Dunn",
        "timestamp": 1705609958
    },
    {
        "content": "<p>I think depends on means requires a definition of.</p>",
        "id": 416646363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705610552
    }
]