[
    {
        "content": "<p>Is it possible to implement <code>Decoding</code> for a <code>List Bool</code>? I've been scratching my head on this one for a little while now...</p>\n<div class=\"codehilite\"><pre><span></span><code> ── TYPE MISMATCH ──────────────────────────────────────────────────── Json.roc ─\n\n  This expression has a type that does not implement the abilities it&#39;s expected to:\n\n  536│      actual = Decode.fromBytes input fromUtf8\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  I can&#39;t generate an implementation of the Decoding ability for\n\n      List Bool\n\n  In particular, an implementation for\n\n      Bool\n\n  cannot be generated.\n\n  Tip: Bool does not implement Decoding.\n</code></pre></div>",
        "id": 342485043,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679037247
    },
    {
        "content": "<p>This is the test I am looking at,</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"c1\"># Test decode bool</span>\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"s2\">\"[ true,false ,true, false ]\"</span>\n\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Decode</span><span class=\"o\">.</span><span class=\"n\">fromBytes</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">fromUtf8</span>\n\n<span class=\"w\">    </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 342485179,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679037324
    },
    {
        "content": "<p>Hmm. Since it is an opaque type, i would guess the definition would need to be directly in the bool module. Since that wouldn't make sense for every encoding and decoding format, i think bool would need to be added as a primitive to the decodeformating ability.</p>",
        "id": 342486348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679037898
    },
    {
        "content": "<p>That is at least my understanding.</p>",
        "id": 342486420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679037940
    },
    {
        "content": "<p>Both <code>Bool</code> and <code>List</code> have <code>DecoderFormatting</code></p>\n<div class=\"codehilite\"><pre><span></span><code>bool : Decoder Bool fmt | fmt has DecoderFormatting\nlist : Decoder elem fmt -&gt; Decoder (List elem) fmt | fmt has DecoderFormatting\n</code></pre></div>",
        "id": 342486647,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679038044
    },
    {
        "content": "<p>Yeah I think there is something up with <code>Bool</code></p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ─────────────────────── crates/compiler/builtins/roc/Json.roc ─\n\nThis expression has a type that does not implement the abilities it&#39;s expected to:\n\n536│      actual = Decode.fromBytes input fromUtf8\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe type Bool does not fully implement the ability Decoding.\n</code></pre></div>",
        "id": 342486790,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679038094
    },
    {
        "content": "<p>What is the difference between decoder and decoding abilities?</p>",
        "id": 342571409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679062011
    },
    {
        "content": "<p>Oh, also, i think i have a guess as to what is happening. I'll take a look when I get the chance</p>",
        "id": 342571616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679062064
    },
    {
        "content": "<p>I'm still stumped on this issue. I haven't been able to figure out why <code>Bool</code> doesn't fully implement <code>Decoding</code>. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 342906016,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679220162
    },
    {
        "content": "<p>Oh, I meant to look into this early. I think the reason <code>Bool</code> doesn't work is that we never added the code to the roc compiler to auto derive <code>Decode/Hash/etc</code> for <code>Bool</code>.</p>",
        "id": 343016765,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679281743
    },
    {
        "content": "<p>I'm not sure I know exactly how to add it, but I think that is fundamentally the issue. Maybe <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> has some insights?</p>",
        "id": 343016869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679281827
    },
    {
        "content": "<p>Oh, actually, now that I think about it, <code>Bool</code> is an opaque type defined in Roc.</p>",
        "id": 343017127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282056
    },
    {
        "content": "<p>I think we just need to add the definitions <a href=\"https://github.com/roc-lang/roc/blob/00f1ca14c88b001e1a5f4d66d5a62591eb8a5109/crates/compiler/builtins/roc/Bool.roc#L37\">here</a>.</p>",
        "id": 343017160,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282098
    },
    {
        "content": "<p><code>Bool</code> should have the <code>Decoding</code> and <code>Encoding</code> abilities. It's methods should just call directly into the bool method.</p>",
        "id": 343017212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282160
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">True</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">False</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nx\">has</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Eq</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">isEq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">boolIsEq</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nx\">Decoding</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">decoder</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">boolDecoder</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"nv\">boolDecoder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Decode</span><span class=\"p\">.</span><span class=\"nx\">bool</span><span class=\"w\"> </span><span class=\"nx\">bytes</span><span class=\"w\"> </span><span class=\"nx\">fmt</span>\n</code></pre></div>",
        "id": 343017655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282480
    },
    {
        "content": "<p>Then need to add in any need imports and pipe it through like other builtin functions.</p>",
        "id": 343017690,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282497
    },
    {
        "content": "<p>Of course also adding it for <code>Encoding</code>.</p>",
        "id": 343017703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282513
    },
    {
        "content": "<p>Hmm...though this has a chicken and egg problem. <code>Decode</code> imports <code>Bool</code> and <code>Bool</code> imports <code>Decode</code>.....</p>",
        "id": 343018050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282814
    },
    {
        "content": "<p>This is why <code>Eq</code> had to be defined in <code>Bool.roc</code>. That doesn't seem reasonable for <code>Decode</code> though.</p>",
        "id": 343018098,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679282879
    },
    {
        "content": "<p>ill take care of this today</p>",
        "id": 343131891,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679321827
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/5166\">https://github.com/roc-lang/roc/pull/5166</a> should take care of this</p>",
        "id": 343216386,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679342787
    },
    {
        "content": "<p>Thank you Ayaz <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 343223300,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679345281
    }
]