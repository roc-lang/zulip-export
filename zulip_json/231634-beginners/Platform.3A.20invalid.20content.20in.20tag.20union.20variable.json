[
    {
        "content": "<p>Hi! Trying my hand at writing a platform, based on the existing examples. Even with the simplest example, I run into a compiler panic and can't figure out what's wrong.</p>\n<p>The setup is simple: export a <code>sayHello</code> function from Rust (well, <code>roc_fx_sayHello</code>) that returns a <code>RocStr</code>, and wrap it in a nice <code>File.sayHello</code> interface for platform users. Then, simply call it from main.</p>\n<p>The error I get:<br>\n<code>thread '&lt;unnamed&gt;' panicked at 'invalid content in tag union variable: (113, Structure(Apply(`3.IdentId(0)`, SubsSlice { start: 50, length: 0 })))', compiler/mono/src/layout.rs:1776:23</code></p>\n<p>It seems related to the use of <code>Effect.sayHello</code>, since the error goes away if I just use a regular Roc function in <code>File.sayHello</code></p>\n<p>Here's a repo with my code: <a href=\"https://github.com/erwinkn/advent-of-code-2021\">https://github.com/erwinkn/advent-of-code-2021</a><br>\n(yes I'm catching up on AoC and yes I got sidetracked into writing a platform <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> )</p>",
        "id": 264275739,
        "sender_full_name": "Erwin Kuhn",
        "timestamp": 1639042402
    },
    {
        "content": "<p>in the package config <code> sayHello : {} -&gt; Str</code> must be <code> sayHello : {} -&gt; Effect Str</code></p>",
        "id": 264276459,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639042840
    },
    {
        "content": "<p>functions from the platform must always return an <code>Effect</code></p>",
        "id": 264276469,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639042849
    },
    {
        "content": "<p>(to roc)</p>",
        "id": 264276477,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639042858
    },
    {
        "content": "<p>no changes are needed on the rust side</p>",
        "id": 264276496,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639042869
    },
    {
        "content": "<p>OK, got it! I'll have to propagate the <code>Effect</code> to <code>main</code> to <code>File.sayHello</code> and <code>main</code> then I guess</p>",
        "id": 264277275,
        "sender_full_name": "Erwin Kuhn",
        "timestamp": 1639043329
    },
    {
        "content": "<p>exactly. That's required for purity: your rust code could do whatever sideeffects, and we have to manage that on the roc side somehow</p>",
        "id": 264277333,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639043371
    },
    {
        "content": "<p>On that note, is there any documentation somewhere regarding the difference in the Rust functions exposed in the <code>hello-X</code> examples (where only <code>roc_main</code> is exposed in the \"linked\" block) vs other examples like the CLI platform, where you also have <code>roc_main_size</code>, <code>call_Fx</code>, <code>size_Fx</code> and <code>size_Fx_Result</code>?</p>",
        "id": 264277482,
        "sender_full_name": "Erwin Kuhn",
        "timestamp": 1639043452
    },
    {
        "content": "<p>no, that is still very unstable. Right now host-exposed functions get a <code>_size</code> constant, and aliases defined in its signature also get a bunch of size constants and if it's a closure type it also gets a caller</p>",
        "id": 264277691,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639043598
    },
    {
        "content": "<p>but, the best place to learn about that right now is looking at that working code. We will be changing things there in the future</p>",
        "id": 264277720,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639043621
    },
    {
        "content": "<p>So, I should probably copy / paste the code from the CLI platform, to make sure the size constants and callers are handled correctly?</p>",
        "id": 264277855,
        "sender_full_name": "Erwin Kuhn",
        "timestamp": 1639043693
    },
    {
        "content": "<p>that's a good starting point, yes</p>",
        "id": 264277936,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639043741
    },
    {
        "content": "<p>Alright, thanks!</p>",
        "id": 264278258,
        "sender_full_name": "Erwin Kuhn",
        "timestamp": 1639043892
    },
    {
        "content": "<p>Last thing: would there be an interest in a documented platform example, kinda like a \"platform author starter pack\"? Basically one of the existing examples, with comments to explain what's happening, what is compiler boilerplate and where your code should go<br>\nOr is it too early for this?</p>",
        "id": 264278349,
        "sender_full_name": "Erwin Kuhn",
        "timestamp": 1639043962
    },
    {
        "content": "<p>it is early, and it will change. But it could be helpful right now, and show us where the current approach is lacking</p>",
        "id": 264278774,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1639044158
    },
    {
        "content": "<p>I'd be interested in writing this, to learn myself! I'll crosspost this in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a></p>",
        "id": 264278842,
        "sender_full_name": "Erwin Kuhn",
        "timestamp": 1639044213
    }
]