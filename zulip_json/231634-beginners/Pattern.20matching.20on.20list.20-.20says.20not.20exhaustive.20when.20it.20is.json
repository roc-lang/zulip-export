[
    {
        "content": "<p>I'm attempting to pattern match on a pair of lists. I believe that I have covered all possible permutations, but the compiler says I have not. Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nf\">([], _) -&gt;</span><span class=\"w\">  </span><span class=\"c1\">#1</span>\n<span class=\"w\">        </span><span class=\"nf\">(_, []) -&gt;</span><span class=\"w\">  </span><span class=\"c1\">#2</span>\n<span class=\"w\">        </span><span class=\"nf\">([l], [r]) -&gt;</span><span class=\"w\">  </span><span class=\"c1\">#3</span>\n<span class=\"w\">        </span><span class=\"nf\">([l], [r, .. as rs]) -&gt;</span><span class=\"w\"> </span><span class=\"c1\">#4</span>\n<span class=\"w\">        </span><span class=\"nf\">([l, .. as ls], [r]) -&gt;</span><span class=\"w\"> </span><span class=\"c1\">#5</span>\n<span class=\"w\">        </span><span class=\"nf\">([l, .. as ls], [r, .. as rs]) -&gt;</span><span class=\"w\"> </span><span class=\"c1\">#6</span>\n</code></pre></div>\n<p>So, since I have a pair of lists, each list may be 0,1..N elements. So the permutations are:</p>\n<p>0,0 : covered by <a href=\"https://github.com/roc-lang/roc/issues/1\">#1</a><br>\n0,1 : covered by <a href=\"https://github.com/roc-lang/roc/issues/1\">#1</a><br>\n0,N : covered by <a href=\"https://github.com/roc-lang/roc/issues/1\">#1</a><br>\n1,0 : covered by <a href=\"https://github.com/roc-lang/roc/issues/2\">#2</a><br>\n1,1 : covered by <a href=\"https://github.com/roc-lang/roc/issues/3\">#3</a><br>\n1,N : covered by <a href=\"https://github.com/roc-lang/roc/issues/4\">#4</a><br>\nN,0 : covered by <a href=\"https://github.com/roc-lang/roc/issues/2\">#2</a><br>\nN,1 : covered by <a href=\"https://github.com/roc-lang/roc/issues/5\">#5</a><br>\nN,N : covered by <a href=\"https://github.com/roc-lang/roc/issues/6\">#6</a></p>\n<p>Yet compiler says:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">cover</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">possibilities</span><span class=\"p\">:</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">Other</span><span class=\"w\"> </span><span class=\"n\">possibilities</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The case described by the compiler would be covered by # 2, 5, and 6. - [(N,0), (N,1), (N,N)], which is exhaustive for the cases described in the error.</p>",
        "id": 443849821,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718048448
    },
    {
        "content": "<p>I can't help more, but to say yes, this seem exhaustive.</p>",
        "id": 443853210,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1718049732
    },
    {
        "content": "<p>I threw a (_, _) -&gt; crash \"...\" on my code, and it compiles, but that makes me pretty squeamish.. <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 443854236,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718050060
    },
    {
        "content": "<p>Maybe exhaustiveness checking struggles with overlapping patterns? Right now the patterns are not disjoint since <code>[42]</code> would be matched by both <code>[x]</code> and <code>[x, .. as xs]</code> (with <code>xs = []</code>). What happens if you change the length=N cases to use a pattern that matches on the first two elements?</p>",
        "id": 443856750,
        "sender_full_name": "timotree",
        "timestamp": 1718050892
    },
    {
        "content": "<p>Yeah, I think bug</p>",
        "id": 443858562,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718051521
    },
    {
        "content": "<p>As far as the <code>[x]</code> overlapping with <code>[x, ..]</code> goes, I need to differentiate between <code>[x]</code> and <code>[x, ..]</code>. Originally, I didn't have cases 2, 3, or 4. They were only added because the compiler was the same error message and I though, oh, maybe Roc doesn't match <code>..</code> on empty lists...</p>\n<p>I can try throwing in an extra var in the <code>N</code> cases, but since originally I didn't have the <code>1</code> cases, I don't expect a change.</p>",
        "id": 443895338,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718068762
    },
    {
        "content": "<p>I'll try to find a min repro for this tomorrow. My guess would be its struggling to determine exhaustiveness on a tuple of lists.</p>",
        "id": 443898964,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718071309
    },
    {
        "content": "<p>Yeah, that makes sense. Not sure what we did for exhaustiveness of records and if it is fully implemented. A tuple is just a weird record</p>",
        "id": 443900261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718071858
    },
    {
        "content": "<p>Right.. makes sense. Just a record with place-value identifiers instead of names. Hmm... be interesting to see if I can break things with records too.</p>",
        "id": 443901612,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718072663
    },
    {
        "content": "<p>Thats a good point too... assuming records don't break in this way, that would be a much better work around than the <code>(_, _) -&gt; crash</code> I threw on the end of my when block.</p>",
        "id": 443901800,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718072767
    },
    {
        "content": "<p>Actually... do records have any kind of equivalent pattern matching? I can't even imagine what that syntax would look like... </p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"c1\">#... ?</span>\n</code></pre></div>",
        "id": 443902331,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718073136
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">when</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span>\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span>\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"eh\"</span>\n<span class=\"w\"> </span><span class=\"p\">```</span>\n</code></pre></div>",
        "id": 443902821,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718073540
    },
    {
        "content": "<p>Ahhh, of course! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 443902864,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718073584
    },
    {
        "content": "<p>Okay, I can confirm that records are subject to the exact same exhaustiveness checking bug, plus one more:</p>\n<p>In the following example the compiler says that the second pattern is redundant, when it is obviously not.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">lhs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rhs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">lhs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">right</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">rhs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">left</span>\n<span class=\"w\">        </span><span class=\"c1\"># ...</span>\n</code></pre></div>",
        "id": 444003999,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718113612
    },
    {
        "content": "<p>Can you make an issue for that <span class=\"user-mention\" data-user-id=\"518883\">@Ian McLerran</span>?</p>",
        "id": 444012384,
        "sender_full_name": "Anton",
        "timestamp": 1718115446
    },
    {
        "content": "<p>Yep, sure can!</p>",
        "id": 444022717,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718117714
    },
    {
        "content": "<p>Okay, issue filed <a href=\"https://github.com/roc-lang/roc/issues/6802\">here</a>.</p>",
        "id": 444043281,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1718122494
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 444043576,
        "sender_full_name": "Anton",
        "timestamp": 1718122549
    }
]