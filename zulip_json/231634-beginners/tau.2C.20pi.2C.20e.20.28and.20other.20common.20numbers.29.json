[
    {
        "content": "<p>Is it just me or are there no constants yet in the Num module? At the moment I use <code>Num.acos -1</code> for pi and <code>Num.exp 1</code> for e. If not, I definitely think they should be exposed in the Num module. I am also partial to tau over pi so I wouldn't mind seeing that one in Num as well <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> (rust and zig both already have it in their stdlibs as well)</p>",
        "id": 365976290,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686685772
    },
    {
        "content": "<p>definitely open to adding pi, tau, and e!</p>",
        "id": 365976852,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686685923
    },
    {
        "content": "<p>there is a bit of a design question though</p>",
        "id": 365977001,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686685965
    },
    {
        "content": "<p>for example, if the type of <code>pi</code> is <code>Frac *</code> (which seems like a reasonable choice to me) then what specific number do we use?</p>",
        "id": 365977064,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686685983
    },
    {
        "content": "<p>it sounds nice to store as many digits as will fit in whatever size you end up with (e.g. if you're using <code>F32</code>, you get as many digits of pi as will fit in an <code>F32</code>, but also if you're using <code>F64</code>, you get as many digits as will fit in that) - but that means we can't implement it as a normal roc number literal</p>",
        "id": 365977381,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686686071
    },
    {
        "content": "<p>for that we'd need to get a bit fancier under the hood</p>",
        "id": 365977411,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686686079
    },
    {
        "content": "<p>which is doable, but maybe worth discussing if it's the design we want <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 365977465,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686686096
    },
    {
        "content": "<p>Couldn't you just define it in roc? Like so:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>pi : Frac *\npi = 3.1415...\n</code></pre></div>",
        "id": 365992721,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686690526
    },
    {
        "content": "<p>Or would that not work for some reason?</p>",
        "id": 365992749,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686690537
    },
    {
        "content": "<p>I think the default <code>Frac *</code> is <code>F64</code> and roc will automatically convert it if used in an <code>F32</code> context. So I don't see why it wouldn't work. I might be completely wrong however</p>",
        "id": 365992990,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686690619
    },
    {
        "content": "<p>I'm pretty sure you wouldnt be able to use it in multiple contexts. So you couldn't use it as an F32 in one library and as an F64 in another.</p>",
        "id": 366006294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686695351
    },
    {
        "content": "<p>Would need to unify to one specific type</p>",
        "id": 366006347,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686695378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497765\">Kilian Vounckx</span> <a href=\"#narrow/stream/231634-beginners/topic/tau.2C.20pi.2C.20e.20.28and.20other.20common.20numbers.29/near/365992749\">said</a>:</p>\n<blockquote>\n<p>Or would that not work for some reason?</p>\n</blockquote>\n<p>sure, it works, but if you replace the <code>...</code> with actual digits the problem becomes clearer <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<ul>\n<li>if you pick a number of digits that's the most you can fit in <code>F64</code>, then it will overflow <code>F32</code>.</li>\n<li>if you pick a number of digits that's the most you can fit in <code>F32</code>, then it's a shorter number of digits than it could have been for <code>F64</code></li>\n</ul>",
        "id": 366013185,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686698486
    },
    {
        "content": "<p>it's also entirely possible that nobody would miss the extra digits of precision and a number literal is fine <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 366013209,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686698506
    },
    {
        "content": "<p>Actually, that isn't the case. apparently this works and we just cut it shorter: <code>3.141592653589793238462643383279502884197169399375105820974944592f32</code></p>",
        "id": 366028844,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686707675
    },
    {
        "content": "<p>is that good? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 366031058,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686708967
    },
    {
        "content": "<p>that feels like a bug, although in this very specific case it's helpful haha</p>",
        "id": 366031073,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686708979
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I could see an argument for auto-truncating if the type is generic, e.g. <code>Frac *</code>, but with <code>f32</code> on the end it definitely seems like it should give an error</p>",
        "id": 366031141,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686709028
    },
    {
        "content": "<p>Idk if it is good. Just pointing it out</p>",
        "id": 366032124,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686709616
    },
    {
        "content": "<p>Either way, it doesn't solve the issue that without extra compiler magic, <code>pi : Frac *</code> can't resolve to more than one type. So if a library you depend on uses <code>pi</code> as <code>F32</code> and you use it as <code>F64</code>, it wouldn't type check. Or do we do something special with numbers? I know this is a problem with <code>List a</code>.</p>",
        "id": 366032468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686709829
    },
    {
        "content": "<p>Oh, nvm, this seems to just work with numbers.</p>",
        "id": 366032760,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686710000
    },
    {
        "content": "<p>I guess they are special already.</p>",
        "id": 366032770,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686710008
    },
    {
        "content": "<p>In programs I've written I could use numbers in different contexts differently. E.g. in a small ray tracer I could use a width variable defined as <code>width = 400</code> (without type annotation) as both a <code>Nat</code> and as an <code>F64</code></p>",
        "id": 366054224,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686721410
    },
    {
        "content": "<p>It felt a bit like zig's comptime_int</p>",
        "id": 366054321,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686721443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/tau.2C.20pi.2C.20e.20.28and.20other.20common.20numbers.29/near/366031073\">said</a>:</p>\n<blockquote>\n<p>that feels like a bug, although in this very specific case it's helpful haha</p>\n</blockquote>\n<p>But you say it should be a bug? I think it is a nice feature!</p>",
        "id": 366054409,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686721492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497765\">Kilian Vounckx</span> <a href=\"#narrow/stream/231634-beginners/topic/tau.2C.20pi.2C.20e.20.28and.20other.20common.20numbers.29/near/366054409\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/tau.2C.20pi.2C.20e.20.28and.20other.20common.20numbers.29/near/366031073\">said</a>:</p>\n<blockquote>\n<p>that feels like a bug, although in this very specific case it's helpful haha</p>\n</blockquote>\n<p>But you say it should be a bug? I think it is a nice feature!</p>\n</blockquote>\n<p>specifically because of the<code>f32</code> at the end - <code>3.141592653589793238462643383279502884197169399375105820974944592f32</code></p>\n<p>like this is explicitly saying both \"this is a number literal for an <code>F32</code>\" and also \"this is a number literal that is too big to fit in an <code>F32</code>\", and in that situation I'd want the compiler to tell me \"hey this number literal is too big for <code>F32</code>; here's the truncated versionâ€”put that in your source code so you can actually see what you're getting at runtime\"</p>",
        "id": 366122287,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686737470
    },
    {
        "content": "<p>I get what you mean<br>\nI don't know if it matters to me though. Whatever literal you put there, it will be in decimal. So it will always be rounded to fit in binary. Rounding to F32 will just cut of more. I don't think this should be an error for fractional literals</p>",
        "id": 366159151,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686744356
    },
    {
        "content": "<p>yeah it seems reasonable to auto-truncate if you don't specify a concrete type</p>",
        "id": 366162166,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686744975
    },
    {
        "content": "<p>Is something else needed than adding the literal in roc (and the symbols in rust)? If not, I would like to tackle this</p>",
        "id": 366372374,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686809650
    },
    {
        "content": "<p>Also, do we want other numbers as well? A lot of languages expose <code>sqrt2</code> and others for example</p>",
        "id": 366372464,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686809688
    },
    {
        "content": "<p>I think that is all that is needed</p>",
        "id": 366494351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686834674
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/5555\">PR submitted</a></p>",
        "id": 366592525,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686854171
    },
    {
        "content": "<p>I see this message has been there for a few days:</p>\n<div class=\"codehilite\"><pre><span></span><code> 10 workflows awaiting approval\nThis workflow requires approval from a maintainer. Learn more. 8 expected checks\n</code></pre></div>\n<p>Is there something else that needs to be done on my side?</p>",
        "id": 367073820,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686985201
    },
    {
        "content": "<p>I approved the workflows and reviewed the PR :)<br>\nGithub does not support notifications for these \"workflows awaiting approval\" so we need to remember to manually check.<br>\nWe should make a zulip bot for that, I'll make an issue.</p>",
        "id": 367100838,
        "sender_full_name": "Anton",
        "timestamp": 1686992557
    },
    {
        "content": "<p>Oh I see. I'm glad I checked then<br>\nThank you!</p>",
        "id": 367101994,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686992819
    },
    {
        "content": "<p>well, failing already <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nwill check later today</p>",
        "id": 367102377,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1686992907
    },
    {
        "content": "<p>I think the fix will be very similar to this one: <a href=\"https://github.com/roc-lang/roc/pull/5534/commits/47a78a8f249aa21b6352ddf1bf93df07f1c92b02\">https://github.com/roc-lang/roc/pull/5534/commits/47a78a8f249aa21b6352ddf1bf93df07f1c92b02</a></p>",
        "id": 367103467,
        "sender_full_name": "Anton",
        "timestamp": 1686993176
    },
    {
        "content": "<p>It was indeed a similar error. To be honest, I only ran the mono tests. If I had ran them all, I could have found the error. My bad</p>",
        "id": 367176316,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687009348
    },
    {
        "content": "<p>Thanks for the help</p>",
        "id": 367176341,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687009358
    },
    {
        "content": "<p>I updated the pr</p>",
        "id": 367176349,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687009361
    },
    {
        "content": "<p>Great, tests are running :)</p>",
        "id": 367177547,
        "sender_full_name": "Anton",
        "timestamp": 1687009674
    },
    {
        "content": "<p>What was the snap file you removed?</p>",
        "id": 367179926,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687010273
    },
    {
        "content": "<p>I saw it being added after running the tests</p>",
        "id": 367180026,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687010289
    },
    {
        "content": "<p>Is it some file that should be in gitignore?</p>",
        "id": 367180113,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687010306
    },
    {
        "content": "<p>Yeah, I put it in gitignore, it's some temporary artifact created by the snapshot tests.</p>",
        "id": 367182733,
        "sender_full_name": "Anton",
        "timestamp": 1687010951
    }
]