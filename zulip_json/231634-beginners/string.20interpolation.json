[
    {
        "content": "<p>Is there plan to support expressions in string interpolation? For example, I would expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"s\">\"I have \\(Num.toStr(2)) apples\"</span>\n</code></pre></div>\n<p>But I get <code>I was expecting an identifier, like \\u(message) or \\u(LoremIpsum.text).</code></p>",
        "id": 326914367,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1675975972
    },
    {
        "content": "<p>I believe it's a deliberate choice designed to avoid large expressions in interpolated strings which can be hard to read in other languages.<br>\nThe idea being that if it doesn't work out well it's easy to relax the rules later. But it's hard to start relaxed and make them stricter later.</p>",
        "id": 326916032,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1675976571
    },
    {
        "content": "<p>Gotcha, that makes sense. Is there plan to add an ability similar to the <code>Display</code> trait in Rust? Then you could avoid complex expressions but still allow something like <code>\"I have \\(2) apples\"</code>.</p>",
        "id": 326917683,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1675977244
    },
    {
        "content": "<p>yes</p>",
        "id": 326931727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1675983168
    },
    {
        "content": "<p>It has been discussed a few times and is almost certainly something we want to add in the future</p>",
        "id": 326931809,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1675983200
    }
]