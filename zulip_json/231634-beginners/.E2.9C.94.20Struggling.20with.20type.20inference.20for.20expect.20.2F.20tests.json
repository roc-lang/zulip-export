[
    {
        "content": "<p>I'm a bit struggling with creating an interface for a \"generic Stack\" (regardless of whether it already exists in a package or not, I'm trying to create my own for educational purposes)</p>\n<p>If I have the two <code>expect</code> at the bottom uncommented at the same time, <code>roc check</code> stops being my friend.<br>\nAnd if I have one of the <code>expect</code> uncommented, and I add the type signature to <code>empty</code> (I think the type would be <code>empty : Stack *</code>, then roc check also stops being my friend.</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Stack\n    exposes [\n        Stack,\n        empty,\n        withCapacity,\n        isEmpty,\n        top,\n        put,\n        pop,\n    ]\n    imports []\n\nStack a := List a\n\n# 游녢 If I uncoment this type annotation (together with one of the tests below), then roc check is no longer happy\n\n#empty : Stack *\nempty = fromList []\n\nfromList : List a -&gt; Stack a\nfromList = \\list -&gt; @Stack list\n\nwithCapacity : Nat -&gt; Stack a\nwithCapacity = \\elements -&gt;\n    @Stack (List.withCapacity elements)\n\nisEmpty : Stack * -&gt; Bool\nisEmpty = \\@Stack stack -&gt;\n    stack |&gt; List.isEmpty\n\ntop : Stack a -&gt; Result a [StackWasEmpty]\ntop = \\@Stack stack -&gt;\n    stack |&gt; List.last |&gt; Result.mapErr (\\_ -&gt; StackWasEmpty)\n\nput : Stack a, a -&gt; Stack a\nput = \\@Stack stack, elem -&gt;\n    @Stack (stack |&gt; List.append elem)\n\npop : Stack a -&gt; Result { elem : a, stack : Stack a } [StackWasEmpty]\npop = \\@Stack stack -&gt;\n    when (stack |&gt; List.last) is\n        Ok elem -&gt; Ok { elem, stack: @Stack (stack |&gt; List.dropLast) }\n        Err ListWasEmpty -&gt; Err StackWasEmpty\n\nexpect (empty |&gt; isEmpty) == Bool.true\n\n## 游녢 I can&#39;t have these two uncommented at the same time 游땠\n\nexpect (empty |&gt; put 1 |&gt; put 2 |&gt; pop |&gt; Result.map .elem) == Ok 2\n#expect (empty |&gt; put &quot;A&quot; |&gt; put &quot;B&quot; |&gt; pop |&gt; Result.map .elem) == Ok &quot;B&quot;\n</code></pre></div>\n<p>This is the nightly version of roc. Am I doing something impossible, or is this a well-known issue?</p>",
        "id": 364356557,
        "sender_full_name": "F치bio Beir칚o",
        "timestamp": 1686160554
    },
    {
        "content": "<p>Empty needs to be a function</p>",
        "id": 364358947,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686161049
    },
    {
        "content": "<p>Then it would be used as <code>empty {}</code></p>",
        "id": 364359023,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686161073
    },
    {
        "content": "<p>To create a new empty stack</p>",
        "id": 364359063,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686161081
    },
    {
        "content": "<p>Yeah, I'm looking at Dict, and indeed, Dict.empty is also used as <code>Dict.empty {}</code></p>",
        "id": 364359089,
        "sender_full_name": "F치bio Beir칚o",
        "timestamp": 1686161086
    },
    {
        "content": "<p>Ok, let me make some adjustments :D <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 364359259,
        "sender_full_name": "F치bio Beir칚o",
        "timestamp": 1686161126
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> As a wise man used to say, \"There's nothing like speaking with those who know\". Thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  that was the solution <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span><span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 364359764,
        "sender_full_name": "F치bio Beir칚o",
        "timestamp": 1686161226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620083\">F치bio Beir칚o</span> has marked this topic as resolved.</p>",
        "id": 364359781,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686161231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> do you think there is a way for the compiler to give a better error message related to this and <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Let-generalization.20-.20let.27s.20not.3F\">#ideas &gt; Let-generalization - let's not?</a> ? Should we file an issue for clarity in the error message here or would that not really be possible?</p>",
        "id": 364360437,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686161390
    },
    {
        "content": "<p>yeah, we should definitely give better error messages. There's a section in the \"Let's not?\" doc that describes how we can do it, so that can be referenced in the issue</p>",
        "id": 364362122,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1686161809
    },
    {
        "content": "<p>Can you write up the issue since you have more context?</p>",
        "id": 364363066,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686162090
    },
    {
        "content": "<p>sure, will do</p>",
        "id": 364364495,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1686162485
    }
]