[
    {
        "content": "<p>I have discovered what appears to be a bug in compiling modules which require params. Not sure exactly what is causing it but:</p>\n<p>I have a module which depends on two parameters. The code in this module is verified to be compilable/runnable by copy-pasting it directly into a roc application. The only modifications are to rename the functions imported through module params to their basic-cli names. </p>\n<p>However, when running <code>roc check</code> on the module, I get a compiler panic.</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/can/src/pattern.rs:917:18:\ninternal error: entered unreachable code: Any other pattern should have given a parse error\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nThere was an unrecoverable error in the Roc compiler. The `roc check` command can sometimes give a more helpful error report than other commands.\n</code></pre></div>",
        "id": 471801244,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726856684
    },
    {
        "content": "<p>The module code is as follows (note that the only changes between the exported code and the code that works inside a roc app is that <code>sendHttpReq</code> and <code>getEnvVar</code> were replaced with <code>Http.send</code> and <code>Env.var</code> respectively.)</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sendHttpReq</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">getEnvVar</span><span class=\"p\">,</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">serperTool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">serper</span><span class=\"o\">]</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"no\">InternalTools</span>\n\n<span class=\"n\">serperTool</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">queryParam</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"q\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"The search query to send to the serper.dev API\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">required</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Bool</span><span class=\"o\">.</span><span class=\"n\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"no\">InternalTools</span><span class=\"o\">.</span><span class=\"n\">buildTool</span><span class=\"w\"> </span><span class=\"s2\">\"serper\"</span><span class=\"w\"> </span><span class=\"s2\">\"Access to the serper.dev google search API\"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">queryParam</span><span class=\"o\">]</span>\n\n<span class=\"n\">serper</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"n\">serper</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">\\</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">apiKey</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getEnvVar!</span><span class=\"w\"> </span><span class=\"s2\">\"SERPER_API_KEY\"</span>\n<span class=\"w\">    </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Post</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">key</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"X-API-KEY\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">apiKey</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">]</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">url</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://google.serper.dev/search\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">mimeType</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"application/json\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">timeout</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">NoTimeout</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">sendHttpReq</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">result!</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"no\">Ok</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">fromUtf8</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"s2\">\"Failed to decode API response\"</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span>\n<span class=\"w\">        </span><span class=\"no\">Err</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"s2\">\"Failed to get response from serper.dev\"</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span>\n</code></pre></div>",
        "id": 471801743,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726856804
    },
    {
        "content": "<p>Interesting. Iâ€™ll take a look in a bit.</p>",
        "id": 471803482,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726857292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span>  Looks like I jumped the gun here on assuming it has to do with module params. Seems that for some reason it doesn't like using my InternalTools import, even though I'm importing and using it in other modules.</p>",
        "id": 471805119,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726857656
    },
    {
        "content": "<p>Okay, definitely a weird bug here though - if I do <code>import InternalTools exposing [buildTool]</code> and call <code>buildTool</code> unqualified, it checks just fine.</p>",
        "id": 471805772,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726857792
    },
    {
        "content": "<p>I copied the header into a module and replaced the body of the functions with <code>crash</code>, and I still run into it</p>",
        "id": 471806159,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726857873
    },
    {
        "content": "<p>Forgot to say, I removed the <code>import InternalTools</code> line and it still failed</p>",
        "id": 471806225,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726857892
    },
    {
        "content": "<p>This seems to be enough to cause it:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">sendHttpReq</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">getEnvVar</span><span class=\"p\">,</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">serper</span><span class=\"p\">]</span>\n\n<span class=\"nv\">serper</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"todo\"</span>\n</code></pre></div>",
        "id": 471806383,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726857918
    },
    {
        "content": "<p>Wow... thats interesting. Thats pretty minimal.</p>",
        "id": 471806559,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726857958
    },
    {
        "content": "<p>I think we are not handling <code>SpaceBefore</code> nodes in that specific function in can</p>",
        "id": 471806658,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726857971
    },
    {
        "content": "<p>I'm surprised about this because I just reused an existing one</p>",
        "id": 471806710,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726857983
    },
    {
        "content": "<p>it might expect those to be removed by an earlier pass, though</p>",
        "id": 471806783,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726857997
    },
    {
        "content": "<p>After getting <code>roc check</code> to pass on the module (with unqualified buildTool), I imported the module to my app and got the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>internal error: entered unreachable code:\n        No borrow signature for LambdaName { name: `54.IdentId(0)`, niche: Niche(Captures([])) } layout.\n\n        Tip 1: This can happen when you call a function with less arguments than it expects.\n        Like `Arg.list!` instead of `Arg.list! {}`.\n\n                            Tip 2: `roc check yourfile.roc` can sometimes give you a helpful error.\n</code></pre></div>",
        "id": 471806790,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726857998
    },
    {
        "content": "<p>Hm, that seems like a separate issue</p>",
        "id": 471807148,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726858081
    },
    {
        "content": "<p>Can you try removing the newlines in the params pattern?</p>\n<div class=\"codehilite\"><pre><span></span><code>module { sendHttpReq, getEnvVar } -&gt; [serperTool, serper]\n</code></pre></div>",
        "id": 471807527,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726858163
    },
    {
        "content": "<p>I think the first issue was only caused by that</p>",
        "id": 471807638,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726858196
    },
    {
        "content": "<p>I have tests for multiline params, but only for the parser which don't go through canonicalization</p>",
        "id": 471807906,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726858282
    },
    {
        "content": "<p>Ok yeah, I can confirm multiline module param patterns break in canonicalization because they don't go through desugaring like the other patterns do. I'm on it!</p>",
        "id": 471809180,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726858609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/231634-beginners/topic/Compiler.20panic.20with.20module.20params/near/471807527\">said</a>:</p>\n<blockquote>\n<p>Can you try removing the newlines in the params pattern?</p>\n</blockquote>\n<p>Yes, that is passing <code>roc check</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 471811463,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726859160
    },
    {
        "content": "<p>but you still get that mysterious \"borrow signature\" error when you run, right?</p>",
        "id": 471811680,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726859210
    },
    {
        "content": "<p>Correct. I have a second module with different params that produces the identical error as well.</p>",
        "id": 471811854,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726859268
    },
    {
        "content": "<p>Ok, that one seems to be something going wrong in lowering, which won't be as easy of a fix. I'm probably going to need the whole project (as much as needed to reproduce) to find where it's going wrong.</p>",
        "id": 471812331,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726859461
    },
    {
        "content": "<p>If you can share that a branch, or a gist where this is reproducible, that'd be great!</p>",
        "id": 471812547,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726859561
    },
    {
        "content": "<p>Full code base is here: <a href=\"https://github.com/imclerran/roc-openrouter/tree/prefab-tools\">https://github.com/imclerran/roc-openrouter/tree/prefab-tools</a> (prefab-tools branch)</p>",
        "id": 471812581,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726859582
    },
    {
        "content": "<p>awesome, thanks!</p>",
        "id": 471812681,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726859635
    },
    {
        "content": "<p>hangon, I'm gonna create a new static branch so I don't mess with anything you're looking at.</p>",
        "id": 471812699,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726859641
    },
    {
        "content": "<p><a href=\"https://github.com/imclerran/roc-openrouter/tree/lowering-bug\">https://github.com/imclerran/roc-openrouter/tree/lowering-bug</a></p>",
        "id": 471812987,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726859721
    },
    {
        "content": "<p>Oh and this may be apparent, but its the examples/tools.roc file which can reproduce the bug.</p>",
        "id": 471813919,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1726860062
    },
    {
        "content": "<p>I looked deeply into this issue today. </p>\n<p>At first I thought it had to do with putting <code>ai.PrefabTools.Serper.serper</code> (a function that uses params) inside a <code>Dict</code>, but that seems to be handled properly by the lower params step. It correctly wraps the reference in a closure that captures the params so that it can be passed around. I tested doing something similar in a smaller example, and it worked just fine.</p>\n<p>After that, I tried removing all params in the example and pass <code>sendHttpReq</code> directly as an argument to <code>Tools.handleToolCall</code>, and I found I still run into the panic! <strong>So this appears to be an unrelated compiler bug</strong>. I thought it was caused by passing <code>sendHttpReq</code> as an argument/param, but even if we don't do this (and replace its call with a <code>crash</code>), we run into a similar panic.</p>\n<p>My guess is that there's a type error somewhere in the program that we aren't catching by the time we reach borrow inference. Unfortunately, there's a lot of code involved (including packages), and it's pretty hard to find the root cause. I think the next step should be to try to find the smallest example that can reproduce the issue.</p>",
        "id": 471972598,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1726950706
    },
    {
        "content": "<p>Thanks for looking at this Agus. I'm working on breaking this down to a minimum reproduction. I've stripped it down a bit, but have a long way to go to be any where near a minimum reproduction.</p>\n<p>One interesting finding so far is that moving the call to <code>Tools.handleToolCalls</code> out of the loop eliminates the error.</p>",
        "id": 472520718,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1727191861
    },
    {
        "content": "<p>Alright, I've got a min repro:</p>\n<h3>main.roc</h3>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">main</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"ss\">cli</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"no\">Module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">task</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">loop!</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kp\">loop</span>\n\n<span class=\"kp\">loop</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">\\{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">Step</span><span class=\"w\">  </span><span class=\"no\">Module</span><span class=\"o\">.</span><span class=\"n\">effect!</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>Module.roc</h3>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">effect</span><span class=\"o\">]</span>\n\n<span class=\"n\">effect</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">task</span>\n</code></pre></div>",
        "id": 472538565,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1727197772
    },
    {
        "content": "<p>Issue filed at <a href=\"https://github.com/roc-lang/roc/issues/7116\">#7116</a></p>",
        "id": 472544257,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1727199807
    },
    {
        "content": "<p>One additional finding:</p>\n<p>if I inline the loop as an anonymous function, the issue does not occur.</p>\n<p>IE the follwing does not cause the panic:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">loop!</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">\\{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">Step</span><span class=\"w\"> </span><span class=\"no\">Module</span><span class=\"o\">.</span><span class=\"n\">effect!</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 472545047,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1727200104
    },
    {
        "content": "<p>Thank you so much for breaking this down, this is way more workable!</p>",
        "id": 472546064,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1727200490
    },
    {
        "content": "<p>Interestingly, I was able to reproduce the panic on the original code without using params. However, at least in your example, it looks like the issue goes away if the task is passed as an argument, so there does seem to be an issue with params after all.</p>",
        "id": 472546244,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1727200558
    },
    {
        "content": "<p>That is interesting... sounds like there may be two potential issues at play here? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 472546595,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1727200668
    },
    {
        "content": "<p>Yeah, maybe. I'll try to fix this and we'll see if that solves the issue in <code>roc-openrouter</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 472546830,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1727200740
    },
    {
        "content": "<p>I had forgotten you mentioned hitting the panic with sendHttpReq sent directly as an function argument... I guess if the panic was the same, its probably the same bug. Funny that passing the task as an argument to the function doesn't work in the min repro though...</p>",
        "id": 472548586,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1727201355
    }
]