[
    {
        "content": "<p>I've been struggling to understand what' s wrong here. I get that <code>Int Natural</code> isn't a <code>Nat</code>, but don't understand why. Any insights would be appreciated.</p>\n<p>Also, with these kind of errors, I've had some success by giving named functions signatures like <code>x : I16</code> to communicate intent. Then, the compiler gives me a clearer answer. I'm not sure how to do that with anonymous functions though.</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ──────────────────────────────────────────────────── day3.roc ─\n\nThis 3rd argument to walkWithIndex has an unexpected type:\n\n120│&gt;    List.walkWithIndex identifiedParts [] \\state, cell, index -&gt;\n121│&gt;      when cell.cell is\n122│&gt;        Part num -&gt;\n123│&gt;          adjacentSymbols =\n124│&gt;            List.map adjacentCellIndexes \\relativeIndex -&gt; (Num.add relativeIndex (Num.toI16 index))\n125│&gt;            |&gt; List.keepIf \\absoluteIndex -&gt; absoluteIndex &gt;= 0\n126│&gt;            |&gt; List.map Num.toNat\n127│&gt;            |&gt; List.keepOks \\absoluteIndex -&gt; List.get identifiedParts absoluteIndex\n128│&gt;            |&gt; List.keepIf \\adjacentCell -&gt;\n129│&gt;                  when adjacentCell.cell is\n130│&gt;                    Symbol -&gt; Bool.true\n131│&gt;                    _ -&gt; Bool.false\n132│&gt;\n133│&gt;          List.append state {\n134│&gt;            cell &amp;\n135│&gt;            type: if List.isEmpty adjacentSymbols then Extra else Correct\n136│&gt;          }\n137│&gt;\n138│&gt;        _ -&gt; List.append state {\n139│&gt;                cell &amp;\n140│&gt;                type: NotAPart\n141│&gt;              }\n\nThe argument is an anonymous function of type:\n\n    List { … }d, {\n        cell : […]*,\n        type : [\n            Correct,\n            Extra,\n            NotAPart,\n        ]*,\n        …\n    }d, Int Natural -&gt; List { … }d\n\nBut walkWithIndex needs its 3rd argument to be:\n\n    List { … }d, { cell : […], … }, Nat -&gt; List { … }d\n</code></pre></div>",
        "id": 405687419,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701628276
    },
    {
        "content": "<p>You can't annotate anonymous functions unfortunately. If I had this problem I'd probably give it a name (either as a local variable or at top level). You could make it anonymous again after debugging it. But if it needed debugging I usually take that as a sign that it really needs the signature.</p>",
        "id": 405688435,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701629111
    },
    {
        "content": "<p>Is there a way to alias types? I haven't been able to figure that out yet either.</p>\n<p>Color = Red | Green | Blue<br>\nState = { some: [ Big, TypeDefinition ] }</p>",
        "id": 405688730,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701629372
    },
    {
        "content": "<p>I think the Nat thing is a red herring. The error is saying that the type for the anonymous function is not consistent</p>",
        "id": 405688744,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701629397
    },
    {
        "content": "<p><code>Color : [Red]</code> etc</p>",
        "id": 405688797,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701629410
    },
    {
        "content": "<p>The clue that's a bit hard to see is the polymorphic record variable <code>d</code>.<br>\n<code>List { ... }d, { cell : [...], ... }</code></p>",
        "id": 405688958,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701629556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586417\">Elias Mulhall</span> <a href=\"#narrow/stream/231634-beginners/topic/walkWithIndex.20needs.20its.203rd.20argument.20to.20be/near/405688958\">said</a>:</p>\n<blockquote>\n<p>The clue that's a bit hard to see is the polymorphic record variable <code>d</code>.<br>\n<code>List { ... }d, { cell : [...], ... }</code></p>\n</blockquote>\n<p>Yeah,  that's not even a clue to me, yet. Does that hint at anything specific to you?</p>",
        "id": 405689031,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701629629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460629\">Jason Hobbs</span> <a href=\"#narrow/stream/231634-beginners/topic/walkWithIndex.20needs.20its.203rd.20argument.20to.20be/near/405688730\">said</a>:</p>\n<blockquote>\n<p>Is there a way to alias types? I haven't been able to figure that out yet either.</p>\n<p>Color = Red | Green | Blue<br>\nState = { some: [ Big, TypeDefinition ] }</p>\n</blockquote>\n<p>you're almost there! You just need <code>:</code> instead of <code>=</code> for these</p>",
        "id": 405689154,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701629726
    },
    {
        "content": "<p>(if the syntax for type aliases was <code>Color = ...</code>, it would be ambiguous with a pattern match on a tag)</p>",
        "id": 405689202,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701629763
    },
    {
        "content": "<p>Still troubleshooting here, but I think I found my mistake... The docs say \"Note that &amp; can't introduce new fields to a record\", which is what I was trying to do</p>",
        "id": 405689282,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701629837
    },
    {
        "content": "<p>Sorry, I was on my phone, switched to a real keyboard <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>Yes!</p>\n<div class=\"codehilite\"><pre><span></span><code>    List { … }d, {\n        cell : […]*,\n        type : [\n            Correct,\n            Extra,\n            NotAPart,\n        ]*,\n        …\n    }d, Int Natural -&gt; List { … }d\n</code></pre></div>\n<p>has a <code>d</code> at the end of each record, while</p>\n<div class=\"codehilite\"><pre><span></span><code>List { … }d, { cell : […], … }, Nat -&gt; List { … }d\n</code></pre></div>\n<p>Is missing the <code>d</code>.</p>\n<p>This indicates that the record types are not all the same.</p>",
        "id": 405689400,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701629924
    },
    {
        "content": "<p>I'd start with Brian's advice and factor out a <code>walker</code> helper function to give it a type, that should make the error more friendly.</p>",
        "id": 405689541,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701630031
    },
    {
        "content": "<p>The type aliases have made this much better! Also, the trick of moving the anonymous function up and naming it (to provide it type hints) was excellent. All of that got me unstuck. I'm compiling again!</p>\n<p>And yes, <span class=\"user-mention\" data-user-id=\"586417\">@Elias Mulhall</span> , the record types were the problem. I was trying to add an element with the <code>&amp;</code> operator</p>",
        "id": 405690024,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701630338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460629\">Jason Hobbs</span> has marked this topic as resolved.</p>",
        "id": 405690120,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701630408
    }
]