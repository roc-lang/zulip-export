[
    {
        "content": "<p>Yeah, I'm across all that. I think the real question which i kind of failed to ask is, why is it not accumulating errors in a <code>Task(Result a [A,B,C])</code> instead of <code>Task a [A,B,C]</code>?</p>",
        "id": 411827270,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704752953
    },
    {
        "content": "<p>Oh, it's because it returns a result! and you'd end up with a function signature that returns <code>Task [Result a A, Result b [B]]</code> right?</p>",
        "id": 411827529,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704753057
    },
    {
        "content": "<p>I'm not sure I follow the question. Is the question for current roc code or for this proposal specifically?</p>",
        "id": 411827851,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753180
    },
    {
        "content": "<p>Sorry I've strayed off topic a little. I was actually talking about current roc code, but this syntax just brought to mind that Tasks kind of being a copy of result is a little weird on the surface.</p>",
        "id": 411828064,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704753266
    },
    {
        "content": "<p>Can you just remove those messages?</p>",
        "id": 411828175,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704753311
    },
    {
        "content": "<p>5 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/chaining.20but.20with.20.02klzzwxh.3A0000.03.20and.20.02klzzwxh.3A0001.03.20for.20error.20returns\">#ideas &gt; chaining but with <code>Task.attempt</code> and <code>?</code> for error returns</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 411828316,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704753380
    },
    {
        "content": "<p>Moved them here, hopefully that is good</p>",
        "id": 411828341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753399
    },
    {
        "content": "<p>So <code>Task</code> is actually defined as <code>Effect (Result ok err)</code></p>",
        "id": 411828386,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753425
    },
    {
        "content": "<p>So a task is just an effect that can fail.</p>",
        "id": 411828402,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753437
    },
    {
        "content": "<p>How platforms are designed today, essentially all <code>Effects</code> map to a <code>Task</code> and the <code>Task</code> is given to the end user so that they always get a consistent type. It is just always a <code>Task</code>.</p>",
        "id": 411828551,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753491
    },
    {
        "content": "<p>That said, in many cases, we could theoretically cut out the middle man. We could just have an <code>Effect x</code> and return that to the user. They would never need to deal with error cases cause there would be none</p>",
        "id": 411828645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753537
    },
    {
        "content": "<p>They would just:</p>\n<div class=\"codehilite\"><pre><span></span><code>x &lt;- cantFail 123 |&gt; Effect.after\n</code></pre></div>\n<p>I think <code>after</code> is the correct name for the <code>Effect</code> type.</p>",
        "id": 411828825,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753621
    },
    {
        "content": "<p>Of course, if you have some values as <code>Effect</code> and some as <code>Task</code>, you would have type errors if you missed the two.</p>",
        "id": 411828940,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704753692
    }
]