[
    {
        "content": "<p>So I was chasing a problem which boiled down to what I think is a bug in the implementation of <code>Num.shiftRightZfBy</code>. When I do shift right by 128 on a U128 number, instead of getting 0, it seems I’m getting the original number. Weirder, this behavior is inconsistent between <code>roc repl</code> and <code>roc test</code>. Here is a screenshot of the repl and the test.</p>",
        "id": 443071224,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717683359
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/8JhLZDoriNGVcAMCofO5nZK7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/8JhLZDoriNGVcAMCofO5nZK7/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/8JhLZDoriNGVcAMCofO5nZK7/image.png\"></a></div>",
        "id": 443071340,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717683386
    },
    {
        "content": "<p>I’m using macos with an M3 chip</p>",
        "id": 443072047,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717683585
    },
    {
        "content": "<p>Difference between llvm and the dev backend</p>",
        "id": 443075528,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717684500
    },
    {
        "content": "<p>I guess we have to pick the functionality we actually want</p>",
        "id": 443075591,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717684517
    },
    {
        "content": "<p>I think we want the repl behaviour</p>",
        "id": 443075661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717684540
    },
    {
        "content": "<p>the repl behavior (0) I think is the only correct one no?</p>",
        "id": 443075769,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717684563
    },
    {
        "content": "<p>I mean it’s not a wrapping shift</p>",
        "id": 443075913,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717684604
    },
    {
        "content": "<p>hum ... actually, for 64 bit integers, the repl behaves like <code>roc test</code> for 128, and not like the repl for 128</p>\n<div class=\"codehilite\"><pre><span></span><code>» Num.shiftRightZfBy 7_u64 63\n\n0 : U64\n» Num.shiftRightZfBy 7_u64 64\n\n7 : U64\n</code></pre></div>",
        "id": 443076675,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717684807
    },
    {
        "content": "<p>And for 32, and lower it’s back to behaving \"normally\" (returning 0)</p>\n<div class=\"codehilite\"><pre><span></span><code>» Num.shiftRightZfBy 7_u32 31\n\n0 : U32\n» Num.shiftRightZfBy 7_u32 32\n\n0 : U32\n» Num.shiftRightZfBy 7_u16 15\n\n0 : U16\n» Num.shiftRightZfBy 7_u16 16\n\n0 : U16\n</code></pre></div>",
        "id": 443077114,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717684908
    },
    {
        "content": "<p>So basically, in the repl, the behavior is consistently returning 0 for a shift the size of the integer, except for 64bit, where it’s returning the number itself.</p>",
        "id": 443077516,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717685016
    },
    {
        "content": "<p>And in tests (llvm backend?) its more inconsistent:</p>\n<div class=\"codehilite\"><pre><span></span><code>[U256.roc:36] Num.shiftRightZfBy 7_u128 128 = 7\n[U256.roc:38] Num.shiftRightZfBy 7_u64 64 = 7\n[U256.roc:40] Num.shiftRightZfBy 7_u32 32 = 7\n[U256.roc:42] Num.shiftRightZfBy 7_u16 16 = 0\n[U256.roc:44] Num.shiftRightZfBy 7_u8 8 = 0\n</code></pre></div>",
        "id": 443077939,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717685157
    },
    {
        "content": "<p>I can open an issue on the repo if you want.</p>",
        "id": 443078387,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717685282
    },
    {
        "content": "<p>llvm considers it undefined behavior to shift equal to more than the bit width.</p>",
        "id": 443080263,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717685756
    },
    {
        "content": "<p>They do whatever is fastest and move on with life</p>",
        "id": 443080370,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717685779
    },
    {
        "content": "<p>Technically the dev backend does the same (bit with different instructions)</p>",
        "id": 443080434,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717685798
    },
    {
        "content": "<p>Changing target or optimizing the build can change results</p>",
        "id": 443080526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717685825
    },
    {
        "content": "<p>Damn ok. I got bitten by that because I was implementing shifts for a custom U256.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U256</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U256</span>\n<span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">high</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">high</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">high</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">high</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightZfBy</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"p\">)),</span>\n<span class=\"w\">            </span><span class=\"nv\">low</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I guess I got to special case 0 then because otherwise the right part of my <code>high</code> is shifting by 128 - 0 == 128.</p>",
        "id": 443080984,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717685952
    },
    {
        "content": "<p>For roc, we probably want it to always return zero, but kinda sucks to add a conditional and cmov around every bitshift.</p>\n<p>This is why llvm makes in undefined behaviour. They will do whatever is fastest on the specific platform and ignore the \"obvious bug\" of bitshifting by the bit width or greater.</p>",
        "id": 443080987,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717685953
    },
    {
        "content": "<p>Okay, so what’s your take, should I open an issue with my problem and our discussion? or keep it in zulip.</p>",
        "id": 443082063,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717686207
    },
    {
        "content": "<p>Haha....llvm: <a href=\"https://godbolt.org/z/qsMncer9W\">https://godbolt.org/z/qsMncer9W</a><br>\nJust doesn't emit any instructions for a shift right that is too large. This is with optimizations.</p>\n<hr>\n<p>gcc explicitly zeros: <a href=\"https://godbolt.org/z/h5bGdsoMo\">https://godbolt.org/z/h5bGdsoMo</a></p>\n<hr>\n<p>Of coures, for both, if they can't figure out the shift value at compile time will always emit the instructions, like <code>shr     rdx, cl</code>.</p>\n<p>The semantics of that is to mask to the right number of bits (throwing away all the higher bits) and then shift. So <code>U64 &gt;&gt; 64</code> is equivalent to <code>U64 &gt;&gt; 0</code>, <code>U64 &gt;&gt; 70</code> is equivalent to <code>U64 &gt;&gt; 6</code>.</p>",
        "id": 443088960,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717687523
    },
    {
        "content": "<p>Just kinda noting the existing semantics.....not really sure what roc should do.</p>",
        "id": 443089029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717687543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> any thoughts on perf vs correctness and undefined behaviour for bit shifting?</p>",
        "id": 443089249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717687589
    },
    {
        "content": "<blockquote>\n<p>I guess I got to special case 0 then because otherwise the right part of my <code>high</code> is shifting by 128 - 0 == 128.</p>\n</blockquote>\n<p>Just to note, this is actually the assembly that llvm or clang have to generate for this. They need condition and cmov if the shift amount is equal to the max. That said, they also don't handle if you overshift a U128 or U256. <code>U128 &gt;&gt; 128</code> is still undefined behaviour for both and will likely return \"wrong\" results.</p>",
        "id": 443090610,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717687901
    },
    {
        "content": "<p>yeah we should not have UB in Roc</p>",
        "id": 443105837,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717691474
    },
    {
        "content": "<p>so I think we need the conditional, but I'd expect it to often (usually?) get optimized away anyway, right?</p>",
        "id": 443105916,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717691491
    },
    {
        "content": "<p>As long as the shift is by a constant it should get optimized away</p>",
        "id": 443111272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717692930
    },
    {
        "content": "<p>Aside: this is a case where I really like what zig does. They allow for arbitrarily sized int and then require the correct sized int when shifting. <code>U32 &gt;&gt; U5</code> is the signiture for 32bit. You literally can't pass in a shift that is too large. And requiring to convert to U5 forces the user to explicitly think about the behaviour they want.</p>",
        "id": 443111732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717693076
    },
    {
        "content": "<p>yeah that's super cool</p>",
        "id": 443121961,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717695946
    },
    {
        "content": "<p>speaking of that. does it make sense for roc to support arbitrary sized ints?</p>",
        "id": 443122372,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1717696088
    },
    {
        "content": "<p>I wrote up some thoughts on that! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p><a href=\"https://www.roc-lang.org/faq#arbitrary-numbers\">https://www.roc-lang.org/faq#arbitrary-numbers</a></p>",
        "id": 443155444,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717705887
    },
    {
        "content": "<p>I opened an issue: <a href=\"https://github.com/roc-lang/roc/issues/6789\">https://github.com/roc-lang/roc/issues/6789</a></p>",
        "id": 443162351,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717708248
    },
    {
        "content": "<p>I meant like in zig, not bigints specifically. e.g. U3, U5</p>",
        "id": 443219959,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1717741295
    }
]