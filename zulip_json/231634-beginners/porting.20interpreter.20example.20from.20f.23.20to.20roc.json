[
    {
        "content": "<p>Hey everyone, I'm toying around with roc and I'm trying to write a unit testable i/o example and thought I could port <a href=\"https://blog.ploeh.dk/2017/08/07/f-free-monad-recipe/\">Seemans free monad recipe</a> which I've used before, but I'm struggling with the pattern matching on the instructions in the map function:</p>\n<div class=\"codehilite\"><pre><span></span><code>In1: U8\nOut1: Str\nIn2: U16\nOut2: U32\n\nInstruction a: [\n  Member1 (In1, Out1 -&gt; a),\n  Member2 (In2, Out2 -&gt; a)\n]\n\nmapI: (a -&gt; b), (Instruction a) -&gt; (Instruction b)\nmapI = \\f,i -&gt; when i is\n    Member1 (a, next) -&gt; Member1 (a, \\y -&gt; f (next y))\n    Member2 (a, next) -&gt; Member2 (a, \\y -&gt; f (next y))\n</code></pre></div>\n<p>Compiler error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in main.roc ────────────────────────────────────────────\n───────\n\nThe branches of this when expression don&#39;t match the condition:\n\n23│&gt;  mapI = \\f,i -&gt; when i is\n24│       Member1 (a, next) -&gt; Member1 (a, \\y -&gt; f (next y))\n25│       Member2 (a, next) -&gt; Member2 (a, \\y -&gt; f (next y))\n\nThis i value is a:\n\n    [\n        Member1 (In1, Out1 -&gt; a),\n        Member2 (In2, Out2 -&gt; a),\n    ]\n\nBut the branch patterns have type:\n\n    [\n        Member1 (\n            *,\n            *,\n        )c,\n        Member2 (\n            *,\n            *,\n        )f,\n    ]\n\nThe branches must be cases of the when condition&#39;s type!\n\n\n── TYPE MISMATCH in main.roc ────────────────────────────────────────────\n───────\n\nSomething is off with the body of the mapI definition:\n\n22│   mapI: (a -&gt; b), (Instruction a) -&gt; (Instruction b)\n23│&gt;  mapI = \\f,i -&gt; when i is\n24│&gt;      Member1 (a, next) -&gt; Member1 (a, \\y -&gt; f (next y))\n25│&gt;      Member2 (a, next) -&gt; Member2 (a, \\y -&gt; f (next y))\n\nThis when expression produces:\n\n    [\n        Member1 (\n            a,\n            a -&gt; b,\n        )b,\n        Member2 (\n            *,\n            * -&gt; b,\n        )b,\n    ]d\n\nBut the type annotation on mapI says it should be:\n\n    [\n        Member1 (In1, Out1 -&gt; b),\n        Member2 (In2, Out2 -&gt; b),\n    ]\n\n────────────────────────────────────────────────────────────────────────────────\n\n2 errors and 1 warning found in 24 ms\n</code></pre></div>\n<p>Not set on using that pattern really, other tips for more idiomatically achieving the same kind of testable separation that hexagonal design would get me in OOP would be appreciated.</p>",
        "id": 462567380,
        "sender_full_name": "Krys",
        "timestamp": 1723733556
    },
    {
        "content": "<p>I think the parens are incorrect and that is the root issue here.</p>\n<p>In the code above, currently Member1 contains a single value that is the lambda that take an <code>In1</code> and an <code>Out1</code>. It returns an <code>a</code>.</p>",
        "id": 462570054,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723734175
    },
    {
        "content": "<p>Try something like:<br>\n<code>Member1 In1 (Out1 -&gt; a)</code></p>\n<p>Then match as:<br>\n<code>Member1 a next -&gt; </code></p>",
        "id": 462570474,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723734243
    },
    {
        "content": "<p>I think that should work.</p>",
        "id": 462570540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723734258
    },
    {
        "content": "<p>If you specifically want a tuple in Member1, you could also go for this instead:<br>\n<code>Member1 (In1, (Out1 -&gt; a))</code></p>\n<p>But I would advise dropping the tuple and doing the above instead</p>",
        "id": 462571239,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723734412
    },
    {
        "content": "<p>All that said, no comment on hexagonal design and how to do that in Roc/what the correct thing to do in roc instead is. Not sure what hexagonal design is.</p>",
        "id": 462571680,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723734532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/porting.20interpreter.20example.20from.20f.23.20to.20roc/near/462571239\">said</a>:</p>\n<blockquote>\n<p>But I would advise dropping the tuple and doing the above instead</p>\n</blockquote>\n<p>Thank you, dropping the tuple compiles and simplifies it <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 462576494,
        "sender_full_name": "Krys",
        "timestamp": 1723735777
    },
    {
        "content": "<p>woopsie, now I'm getting a compiler error when I implement <code>Pure a -&gt; f a</code>. If replace that line with <code>_ -&gt; crash \"TODO\"</code> it compiles.</p>\n<div class=\"codehilite\"><pre><span></span><code>In1: U8\nOut1: Str\nIn2: U16\nOut2: U32\n\nInstruction a: [\n  Member1 In1 (Out1 -&gt; a),\n  Member2 In2 (Out2 -&gt; a)\n]\n\nmapI: (a -&gt; b), (Instruction a) -&gt; (Instruction b)\nmapI = \\f,i -&gt; when i is\n    Member1 a next -&gt; Member1 a \\y -&gt; f (next y)\n    Member2 a next -&gt; Member2 a \\y -&gt; f (next y)\n\nProgram a : [\n  Free (Instruction (Program a)),\n  Pure a\n]\n\nbind: (a -&gt; Program b), Program a -&gt; Program b\nbind = \\f, p -&gt; when p is\n  Free x -&gt; (mapI (\\a -&gt; bind f a) x) |&gt; Free\n  Pure a -&gt; f a\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre></div>",
        "id": 462587861,
        "sender_full_name": "Krys",
        "timestamp": 1723739136
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"744048\">@Krys</span>, can you <a href=\"https://github.com/roc-lang/roc/issues/new\">make an issue</a> for that?</p>",
        "id": 462749642,
        "sender_full_name": "Anton",
        "timestamp": 1723800495
    }
]