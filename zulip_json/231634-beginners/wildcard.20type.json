[
    {
        "content": "<p>I'm not quite understanding the difference between these two:</p>\n<div class=\"codehilite\"><pre><span></span><code>Num a -&gt; Bool\nNum * -&gt; Bool\n</code></pre></div>\n<p>What exactly does the * indicate here? I'm also slightly confused about why numbers are of the type <code>Num *</code> instead of <code>Num</code> by default</p>",
        "id": 302920439,
        "sender_full_name": "Prajwal S N",
        "timestamp": 1665170637
    },
    {
        "content": "<p>In a vacuum, those two lines are equivalent</p>",
        "id": 302920663,
        "sender_full_name": "jan kili",
        "timestamp": 1665170724
    },
    {
        "content": "<p>The second half of that type (whether it's <code>*</code> or <code>a</code> or <code>apples</code> or <code>Integer</code>) describes what kind of number (<code>Num</code>) it is - it's like a type adjective</p>",
        "id": 302920947,
        "sender_full_name": "jan kili",
        "timestamp": 1665170851
    },
    {
        "content": "<p>If it's lowercase or <code>*</code>, it's a placeholder for a specific adjective like <code>Integer</code></p>",
        "id": 302921126,
        "sender_full_name": "jan kili",
        "timestamp": 1665170930
    },
    {
        "content": "<p>The lowercase letters/words are for referencing it and keeping track of matches, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Num a, Num *, Num b -&gt; { foo: Num b, bar: Num a }\n</code></pre></div>",
        "id": 302921221,
        "sender_full_name": "jan kili",
        "timestamp": 1665170996
    },
    {
        "content": "<p>The asterisk means it doesn't have to match any others in the signature</p>",
        "id": 302921313,
        "sender_full_name": "jan kili",
        "timestamp": 1665171019
    },
    {
        "content": "<p>Got it <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> thank you!</p>",
        "id": 302921442,
        "sender_full_name": "Prajwal S N",
        "timestamp": 1665171079
    },
    {
        "content": "<p>TLDR, the way to write \"any kind of number\" is <code>Num x</code>, where x is <code>*</code> or any identifier that starts with a lowercase letter</p>",
        "id": 302921606,
        "sender_full_name": "jan kili",
        "timestamp": 1665171143
    },
    {
        "content": "<p>I think <code>Int *</code> is a shorthand/alias for <code>Num (Integer *)</code>, because there are subtypes of integers, too (I think size &amp; signedness, like U8 vs. I128)</p>",
        "id": 302921875,
        "sender_full_name": "jan kili",
        "timestamp": 1665171263
    },
    {
        "content": "<p>Adding new question about wildcard type to this stream, the tutorial says <code>List *</code> is the type for the empty list <code>[]</code> so  it make me think that a function with the type <code>List * -&gt; List *</code> would only accept and return an empty list. But the tutorial seem to imply that if <code>List *</code> is the type of a function argument than it means a list of any type but if it is used for a return value then it means only the empty list. I find this confusing, why would <code>List *</code> in one context mean an arbitrary list but the empty list in another context?</p>\n<p>Additionally, when testing out in the repl, it says <code>List.isEmpty</code>'s type is <code>List a -&gt; Bool</code> instead of <code>List * -&gt; Bool</code> in the tutorial. Is the difference significant?</p>",
        "id": 325499194,
        "sender_full_name": "Alexander McLin",
        "timestamp": 1675372629
    },
    {
        "content": "<p>naming the type variable (so using <code>a</code> instead of <code>*</code>) can be helpful when there are multiple type variables at play</p>",
        "id": 325499527,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675372767
    },
    {
        "content": "<p>if I said to you: make me a list of an arbitrary type, how would you go about it?</p>",
        "id": 325499543,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675372780
    },
    {
        "content": "<p>the problem is: you don't know what the element type will be, so you cannot actually create any elements</p>",
        "id": 325499634,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675372807
    },
    {
        "content": "<p>hence the only list you can make, from scratch, that has an arbitrary element type, is the empty list</p>",
        "id": 325499664,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675372823
    },
    {
        "content": "<p>so in this way, the element list and \"a list with elements of an arbitrary type\" are related</p>",
        "id": 325499762,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675372871
    },
    {
        "content": "<p>but as you notice, they are not the same: in the input of a function, we can say we make no assumptions about the element type. This is what <code>isEmpty</code> does: it does not matter what the element type is if all we want to do is see whether the list is empty</p>",
        "id": 325499941,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675372926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/wildcard.20type/near/325499527\">said</a>:</p>\n<blockquote>\n<p>naming the type variable (so using <code>a</code> instead of <code>*</code>) can be helpful when there are multiple type variables at play</p>\n</blockquote>\n<p>I see, that sort of make sense to me, my take away from your comment is that it's about describing what a type can be versus being able to construct a value satisfying the type which are two different things.</p>",
        "id": 325503678,
        "sender_full_name": "Alexander McLin",
        "timestamp": 1675374358
    }
]