[
    {
        "content": "<p>Hello everyone :)</p>\n<p>I've written a BF interpreter in Roc that works (in that it runs scripts correctly), but it's incredibly slow. I picked  the first implemtation that I could find online (one that's written in Go) and benchmarked it against mine, it was 9000 times faster on a benchmark script. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Here's a link to the repo: <a href=\"https://github.com/Hasnep/brainroc\">https://github.com/Hasnep/brainroc</a> the interpreter is in <code>src/Interpreter.roc</code>. I'm pretty new to FP, so I'm sure my algorithm is very inefficient. It's very recursive which might be causing some problems, I tried rewriting it using <code>List.walk</code> insread of recursion, but I struggled with how to handle loops.</p>\n<p>Any suggestions to optimise or just improve overall code quality would be very helpful, thanks!</p>",
        "id": 374839792,
        "sender_full_name": "Hannes",
        "timestamp": 1689236267
    },
    {
        "content": "<p>A bit tangential (because it's not about FP but Rust implementation of BF interpreter/compiler), but maybe it can give some insights. Brilliant series of articles (adapted from C++ but anyway)<br>\n<a href=\"https://rodrigodd.github.io/\">https://rodrigodd.github.io/</a></p>",
        "id": 374865827,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1689241879
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span>, I'm reading the first post now and it's really cleanly explained, I'm glad to see some of the same ideas I've had appearing there. That'll be really useful when I get round to some more fine grained optimisations, but I think I still have some more fundamental problems with my code at the moment that I want to tackle first <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 374872632,
        "sender_full_name": "Hannes",
        "timestamp": 1689243208
    },
    {
        "content": "<p>My guess is that this function <a href=\"https://github.com/Hasnep/brainroc/blob/f54d9ee71332e36ea4342abb2054bc80fb0aa484/src/Interpreter.roc#L56-L77\">https://github.com/Hasnep/brainroc/blob/f54d9ee71332e36ea4342abb2054bc80fb0aa484/src/Interpreter.roc#L56-L77</a></p>\n<p>is not tail recursive so roc compiler cannot apply the optimization. But I didn't check it</p>",
        "id": 374876058,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1689243804
    },
    {
        "content": "<p>it should be because we desugar <code>|&gt;</code></p>",
        "id": 374876704,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689243895
    },
    {
        "content": "<p>but I'd need to check it too. Another potential problem could be if the input program list is not unique (and hence cloned a bunch)</p>",
        "id": 374876842,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689243920
    },
    {
        "content": "<p>but would desugared call bubble up above the <code>when</code>?</p>",
        "id": 374877313,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1689243973
    },
    {
        "content": "<p>after desugaring the <code>|&gt;</code>, the recursive call is in tail position, right?</p>",
        "id": 374877538,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689244019
    },
    {
        "content": "<p>ah, yes, my bad</p>",
        "id": 374877961,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1689244086
    },
    {
        "content": "<p>Do you have a link to the original source as well?</p>\n<p>Also, when I get the chance, I have some ideas, but want to verify them first.</p>",
        "id": 374958755,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689259417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452200\">Logan Lowder</span> has marked this topic as resolved.</p>",
        "id": 375043563,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689277188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452200\">Logan Lowder</span> has marked this topic as unresolved.</p>",
        "id": 375043577,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689277191
    },
    {
        "content": "<p>Whoops miss-click, sorry</p>",
        "id": 375043676,
        "sender_full_name": "Logan Lowder",
        "timestamp": 1689277210
    },
    {
        "content": "<p>Here's the script I used to benchmark the interpreters, run from the root of the <code>brainroc</code> repo:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Download benchmark script</span>\ncurl<span class=\"w\"> </span>-C<span class=\"w\"> </span>-<span class=\"w\"> </span>https://raw.githubusercontent.com/fabianishere/brainfuck/master/examples/bench/bench-1.bf<span class=\"w\"> </span>--output<span class=\"w\"> </span>examples/bench/bench-1.bf<span class=\"w\"> </span>--create-dirs\n\n<span class=\"c1\"># Build Go interpreter</span>\ngit<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/kgabis/brainfuck-go.git<span class=\"w\"> </span>/tmp/bf-go\n<span class=\"nb\">pushd</span><span class=\"w\"> </span>/tmp/bf-go\ngo<span class=\"w\"> </span>build<span class=\"w\"> </span>bf.go\n<span class=\"nb\">popd</span>\ncp<span class=\"w\"> </span>/tmp/bf-go/bf<span class=\"w\"> </span>./bf-go\n\n<span class=\"c1\"># Build Roc interpreter</span>\nroc<span class=\"w\"> </span>build<span class=\"w\"> </span>--optimize<span class=\"w\"> </span>src/main.roc\n\n<span class=\"c1\"># Benchmark the two interpreters</span>\n<span class=\"nv\">SCRIPT</span><span class=\"o\">=</span>examples/bench/bench-1.bf<span class=\"w\"> </span>hyperfine<span class=\"w\"> </span><span class=\"s2\">\"./bf-go </span><span class=\"nv\">$SCRIPT</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"s2\">\"./src/brainroc </span><span class=\"nv\">$SCRIPT</span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>And this is the output I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark #1: ./bf-go examples/bench/bench-1.bf\n  Time (mean ± σ):       1.2 ms ±   0.2 ms    [User: 1.1 ms, System: 0.4 ms]\n  Range (min … max):     0.8 ms …   2.1 ms    1378 runs\n\n  Warning: Command took less than 5 ms to complete. Results might be inaccurate.\n\nBenchmark #2: ./src/brainroc examples/bench/bench-1.bf\n  Time (mean ± σ):     11.128 s ±  0.040 s    [User: 11.123 s, System: 0.002 s]\n  Range (min … max):   11.073 s … 11.182 s    10 runs\n\nSummary\n  &#39;./bf-go examples/bench/bench-1.bf&#39; ran\n 9343.95 ± 1669.68 times faster than &#39;./src/brainroc examples/bench/bench-1.bf&#39;\n</code></pre></div>",
        "id": 375102069,
        "sender_full_name": "Hannes",
        "timestamp": 1689298193
    },
    {
        "content": "<p>So fundamentally, the app is spending all its time in memcpy.</p>",
        "id": 375343342,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689356784
    },
    {
        "content": "<p>So definitely a uniqueness issue. There is something you would hope never gets copied, but it is getting copied (probably every iteration of run)</p>",
        "id": 375343459,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689356815
    },
    {
        "content": "<p>Haven't figured out the root cause of the coping yet.</p>",
        "id": 375343740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689356883
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>, that's a very useful place for me to start finding some performance improvements</p>",
        "id": 375430050,
        "sender_full_name": "Hannes",
        "timestamp": 1689386966
    },
    {
        "content": "<p>Hopefully it helps. I tried a few things I thought would help this morning and got quite confused when none of them worked.</p>",
        "id": 375432789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689388356
    },
    {
        "content": "<p>Won't have time this weekend to look at it more</p>",
        "id": 375432849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689388392
    },
    {
        "content": "<p>I'm looking into this a bit now. Bunch of things going on. First of all, combining all of the state into one record does not play well with our RC mechanism.</p>",
        "id": 375784390,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689520418
    },
    {
        "content": "<p>inlining the helpers and splitting out some fields brings me down to ~ 4s. Still terrible, but a bit better</p>",
        "id": 375784633,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689520469
    },
    {
        "content": "<p>record updates (when some fields are reference-counted) are still a problem</p>",
        "id": 375785064,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689520569
    },
    {
        "content": "<p>by working around some increments/decrements with hacks (exposing unsafe functions) I can get it down to 1s ish. Still terrible though</p>",
        "id": 375785378,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689520649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> how did you figure out that the majority of the time is spent in memcpy? I still suspect that that is going on, but I don't see it in my perf output, and also we're not clearly cloning very long lists (using the zig code we have for that, anyway)</p>",
        "id": 375791496,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689522323
    },
    {
        "content": "<p>So I am not 100% sure I was correct cause in release build with the legacy link the stack got cut off too early for me to be fully sure. With debug build and legacy linker, profile seemed similar but the stack would go deeper. In that case, almost all time at the deepest stack level was in the new Facebook memcpy assembly code.</p>\n<p>So not complete convinced or sure but seemed reasonable. That said, given none of my optimization tests really worked, I am definitely confused and unsure.</p>",
        "id": 375792058,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689522542
    },
    {
        "content": "<p>ah, I guess I'm working with a platform without debug info, because I see none of that</p>",
        "id": 375792139,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689522587
    },
    {
        "content": "<p>I think I had to update the platform to get it to compile on my Linux machine.</p>",
        "id": 375792626,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689522762
    },
    {
        "content": "<p>Also, had to change the app not to use the args module cause it wasn't working on my Linux machine for some reason</p>",
        "id": 375792679,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689522783
    },
    {
        "content": "<p>I made this change <a href=\"https://github.com/roc-lang/roc/pull/5667\">https://github.com/roc-lang/roc/pull/5667</a>. I don't think it really helps here, but I noticed this missed opportunity while looking at the IR</p>",
        "id": 375814425,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689531003
    },
    {
        "content": "<p>well I mean it brings down memory consumption, but for the runtime it's not a huge improvement</p>",
        "id": 375814499,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689531026
    },
    {
        "content": "<p>Wow, thanks for looking into this <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> and <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> :) I'm not able to contribute directly to the compiler much, so I'm glad my bad code can help improve it indirectly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 375865434,
        "sender_full_name": "Hannes",
        "timestamp": 1689557796
    },
    {
        "content": "<p>I also had trouble with the argument parsing on Linux, I think the legacy linker messes up the commandline arguments passed to the program so that the binary isn't the first argument.</p>",
        "id": 375865468,
        "sender_full_name": "Hannes",
        "timestamp": 1689557819
    },
    {
        "content": "<p>I started re-writing the interpreter to try to not pass around such a big struct all the time, if I get it working I'll update this thread with the benchmark</p>",
        "id": 375865685,
        "sender_full_name": "Hannes",
        "timestamp": 1689557912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20optimising.20my.20BF.20interpreter/near/375865468\">said</a>:</p>\n<blockquote>\n<p>I also had trouble with the argument parsing on Linux, I think the legacy linker messes up the commandline arguments passed to the program so that the binary isn't the first argument.</p>\n</blockquote>\n<p>This is a known issue, but I haven't been able to investigate it deeply yet</p>",
        "id": 375940288,
        "sender_full_name": "Anton",
        "timestamp": 1689584299
    },
    {
        "content": "<p>See <a href=\"https://github.com/roc-lang/basic-cli/issues/82\">https://github.com/roc-lang/basic-cli/issues/82</a></p>",
        "id": 375940349,
        "sender_full_name": "Anton",
        "timestamp": 1689584309
    },
    {
        "content": "<p>I am taking a look at this, and one thing that is significantly different between the two interpreters is that the go version does not use a recursive datatype for representing the ast nodes, whereas the Roc version does (<a href=\"https://github.com/Hasnep/brainroc/blob/f54d9ee71332e36ea4342abb2054bc80fb0aa484/src/Parser.roc#L3-L10\">https://github.com/Hasnep/brainroc/blob/f54d9ee71332e36ea4342abb2054bc80fb0aa484/src/Parser.roc#L3-L10</a>). I suspect if you can eliminate this, the runtime will drop significantly, since the recursive structure forces a ton of allocations (even with Folkert's change)</p>\n<p>posting some other observations in <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development-.28public.29/topic/bf.20interpreter.20analysis\">#compiler development (public) &gt; bf interpreter analysis</a></p>",
        "id": 376460958,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689710316
    },
    {
        "content": "<p>here is a more direct port of the go code <a href=\"https://gist.github.com/folkertdev/ef1970afe9f00048f163f4d71d5f03f7\">https://gist.github.com/folkertdev/ef1970afe9f00048f163f4d71d5f03f7</a>. it however still takes 4 seconds on my machine</p>",
        "id": 376639474,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689768356
    },
    {
        "content": "<p>replacing the lookup with a version of get that does not perform inc/dec halves the execution time</p>\n<div class=\"codehilite\"><pre><span></span><code>    if pc &lt; List.len instructions then\n        { operator, operand } = List.getUnsafe instructions pc\n</code></pre></div>",
        "id": 376643001,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689769010
    },
    {
        "content": "<p>replacing the other <code>List.get</code> operations with their unsafe counterparts halves execution time again.</p>",
        "id": 376643895,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689769182
    },
    {
        "content": "<p>hm, but go does bounds checks too, right? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 376661892,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689772478
    },
    {
        "content": "<p>sure, but not inc/dec</p>",
        "id": 376663085,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689772751
    },
    {
        "content": "<p>got it down to 400ms with more unsafe</p>",
        "id": 376663154,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689772763
    },
    {
        "content": "<p>this might be a good place to try an idea I once had that seems silly but maybe might help: <code>List.getWrap : List a, Nat -&gt; Result a [ListWasEmpty]</code> - same as <code>List.get</code> except:</p>\n<ul>\n<li>it does a modulo on the index so it wraps around instead of going over bounds</li>\n<li>instead of the bounds check it just checks if the list was empty</li>\n</ul>",
        "id": 376664081,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689772947
    },
    {
        "content": "<p>this does not help</p>",
        "id": 376664441,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689773018
    },
    {
        "content": "<p>the hypothesis is that maybe the length = 0 branch is easier for llvm to optimize away in some scenarios than the comparson to a variable #</p>",
        "id": 376664451,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689773020
    },
    {
        "content": "<p>oh you already tried something similar?</p>",
        "id": 376664665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689773049
    },
    {
        "content": "<p>the problem is refcount operations, not the bounds check</p>",
        "id": 376714085,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689781740
    },
    {
        "content": "<p>oh I was responding to this part:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20optimising.20my.20BF.20interpreter/near/376643895\">said</a>:</p>\n<blockquote>\n<p>replacing the other <code>List.get</code> operations with their unsafe counterparts halves execution time again.</p>\n</blockquote>",
        "id": 376725523,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689783993
    },
    {
        "content": "<p>I assumed that was bounds check, but do the unsafe ones also not do RC?</p>",
        "id": 376725706,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689784024
    },
    {
        "content": "<p>yes that is the crucial difference. <code>getUnsafe</code> does not do any inc/dec operations on the list</p>",
        "id": 376730292,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689784991
    },
    {
        "content": "<p>I made a second version that uses tail calls instead of a switch <a href=\"https://gist.github.com/folkertdev/3212e3ed7ac124d4b6e9db920cf05099\">https://gist.github.com/folkertdev/3212e3ed7ac124d4b6e9db920cf05099</a>. Sadly it runs into this error in mono </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;function symbol `#UserApp.incrementPointer` not in set LambdaSet { set: [], args: [InLayout(U64), InLayout(48), InLayout(U64), InLayout(LIST_U8), InLayout(U64), InLayout(LIST_U8)], ret: InLayout(LIST_U8), representation: InLayout(VOID), full_layout: InLayout(62) }&#39;, crates/compiler/mono/src/layout.rs:1576:9\n</code></pre></div>\n<p>(cc <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> )</p>",
        "id": 376730792,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689785094
    },
    {
        "content": "<p>hmm, this does not work anyway because llvm tail calls are lies</p>",
        "id": 376760217,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689792050
    },
    {
        "content": "<p>what is extremely disappointing is that this LLVM </p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"vg\">@\"#UserApp_incrementPointer_3bbacd33228bca14fe5573efe7278cde33c78fe9028ba98810cff368dece\"</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%instructions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%dataPtr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%\"108\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%output</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%call</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"vg\">@Num_addWrap_c852b6d75d2364d70d094699f8a9cda9129d5310ed82ea45564f47a9</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nv\">%call1</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"vg\">@Num_addWrap_c852b6d75d2364d70d094699f8a9cda9129d5310ed82ea45564f47a9</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%dataPtr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nv\">%call2</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"vg\">@\"#UserApp_next_4afec3b1b615e34b46f852dc4576722a03d82d96cc27deb38d7b350ecaf31\"</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%instructions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%call1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%output</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%call2</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>does not result in an actual tail call</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">000000000011</span><span class=\"nf\">f110</span><span class=\"w\"> </span><span class=\"err\">&lt;</span><span class=\"c1\">#UserApp_incrementPointer_3bbacd33228bca14fe5573efe7278cde33c78fe9028ba98810cff368dece&gt;:</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f110:</span><span class=\"w\">   </span><span class=\"err\">55</span><span class=\"w\">                      </span><span class=\"nf\">push</span><span class=\"w\">   </span><span class=\"nv\">%rbp</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f111:</span><span class=\"w\">   </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">57</span><span class=\"w\">                   </span><span class=\"nf\">push</span><span class=\"w\">   </span><span class=\"nv\">%r15</span>\n<span class=\"w\">  </span><span class=\"na\">...</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f16a:</span><span class=\"w\">   </span><span class=\"nf\">ff</span><span class=\"w\"> </span><span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">68</span><span class=\"w\">             </span><span class=\"no\">pushq</span><span class=\"w\">  </span><span class=\"mi\">0x68</span><span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f16e:</span><span class=\"w\">   </span><span class=\"nf\">e8</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"no\">d</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"no\">b</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"no\">callq</span><span class=\"w\">  </span><span class=\"mi\">11</span><span class=\"no\">fd00</span><span class=\"w\"> </span><span class=\"err\">&lt;</span><span class=\"c1\">#UserApp_next_4afec3b1b615e34b46f852dc4576722a03d82d96cc27deb38d7b350ecaf31&gt;</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f173:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">83</span><span class=\"w\"> </span><span class=\"nf\">c4</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"w\">             </span><span class=\"no\">add</span><span class=\"w\">    </span><span class=\"no\">$0x38</span><span class=\"p\">,</span><span class=\"nv\">%rsp</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f177:</span><span class=\"w\">   </span><span class=\"err\">5</span><span class=\"nf\">b</span><span class=\"w\">                      </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f178:</span><span class=\"w\">   </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">5</span><span class=\"nf\">c</span><span class=\"w\">                   </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%r12</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f17a:</span><span class=\"w\">   </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">5</span><span class=\"nf\">d</span><span class=\"w\">                   </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%r13</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f17c:</span><span class=\"w\">   </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">5</span><span class=\"nf\">e</span><span class=\"w\">                   </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%r14</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f17e:</span><span class=\"w\">   </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">5</span><span class=\"nf\">f</span><span class=\"w\">                   </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%r15</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f180:</span><span class=\"w\">   </span><span class=\"err\">5</span><span class=\"nf\">d</span><span class=\"w\">                      </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f181:</span><span class=\"w\">   </span><span class=\"nf\">c3</span><span class=\"w\">                      </span><span class=\"no\">retq</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f182:</span><span class=\"w\">   </span><span class=\"err\">66</span><span class=\"w\"> </span><span class=\"err\">2</span><span class=\"nf\">e</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">nopw</span><span class=\"w\">   </span><span class=\"nv\">%cs</span><span class=\"p\">:</span><span class=\"mi\">0x0</span><span class=\"p\">(</span><span class=\"nv\">%rax</span><span class=\"p\">,</span><span class=\"nv\">%rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f189:</span><span class=\"w\">   </span><span class=\"err\">00</span><span class=\"w\"> </span><span class=\"err\">00</span><span class=\"w\"> </span><span class=\"err\">00</span>\n<span class=\"w\">  </span><span class=\"err\">11</span><span class=\"nl\">f18c:</span><span class=\"w\">   </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"no\">nopl</span><span class=\"w\">   </span><span class=\"mi\">0x0</span><span class=\"p\">(</span><span class=\"nv\">%rax</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>In clang you can force tail calls with <code>musttail</code>. We may need something equivalent to force LLVM to apply the optimization here</p>",
        "id": 376761253,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689792295
    },
    {
        "content": "<p>llvm has the <code>musttail</code> attribute, but in mono we can't really know whether applying it is correct.</p>",
        "id": 376761412,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689792336
    },
    {
        "content": "<p>Oh, we're doing recursive list refcount updates to all of the nested AST notes inside of blocks?</p>",
        "id": 376761657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689792394
    },
    {
        "content": "<p>in the original code, yes. Not any more in the version that I'm talking about (which without cheats still takes 4 seconds)</p>",
        "id": 376761950,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689792481
    },
    {
        "content": "<p>wow with optimizations LLVM messes this up completely. it does a bunch of inlining, but cannot turn it into a loop, instead just creating a recursive function that blows the stack very quickly</p>",
        "id": 376764781,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689793208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> What happens if you try to make the tail call extremely obvious to LLVM by making the instruction functions <code>State -&gt; State</code> functions (where <code>State</code> == <code>(Nat, List Instruction, Nat, List U8, List U8)</code>) and turning <code>next</code> into something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><code>run : State -&gt; List U8\nrun = \\(pc, instructions, dataPtr, data, output) -&gt;\n    if pc &lt; List.len instructions then\n        nextInstruction = List.getUnsafe instructions pc\n        f = lookup nextInstruction.operator\n        next_state = f pc instructions dataPtr data nextInstruction.operand output\n        run next_state\n    else\n        output\n</code></pre></div>\n<p>?</p>",
        "id": 376782029,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1689797846
    },
    {
        "content": "<p>combining the state into one structure is generally not better</p>",
        "id": 376782401,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689797966
    },
    {
        "content": "<p><a href=\"https://gist.github.com/ayazhafiz/b1c54e04c9c06ba14d2a980ad921654a\">Here's the IR for Folkert's version</a><br>\n<a href=\"https://gist.github.com/ayazhafiz/88c088755acf4193b35859b44a0e9a0a\">For the go version</a></p>",
        "id": 376990891,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689861940
    },
    {
        "content": "<p>optimizations go performs that we don't</p>\n<div class=\"codehilite\"><pre><span></span><code>./bf.go:51:17: input does not escape\n./bf.go:53:19: make([]uint16, 0) does not escape\n./bf.go:73:27: &amp;errors.errorString{...} escapes to heap\n./bf.go:85:25: &amp;errors.errorString{...} escapes to heap\n./bf.go:90:17: program does not escape\n./bf.go:91:14: make([]int16, data_size) escapes to heap\n./bf.go:93:27: new(bufio.Reader) does not escape\n./bf.go:93:27: make([]byte, bufio.size) escapes to heap\n</code></pre></div>",
        "id": 376994411,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689862468
    },
    {
        "content": "<p>i.e. it is able to allocate some structures on the stack?</p>",
        "id": 376994939,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689862574
    },
    {
        "content": "<p>yeah. For program and input, if we had that, presumably we could eliminate all RC</p>",
        "id": 376996279,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689862814
    },
    {
        "content": "<p>also they definitely hoist the bounds check</p>",
        "id": 376996340,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689862822
    },
    {
        "content": "<p>well you could eliminate RC, but you'd also need to know that the data always says unique</p>",
        "id": 376997115,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689862969
    },
    {
        "content": "<p>which morphic might be able to tell us statically sometimes, but in general the refcount is also crucial for us to allow in-place updates</p>",
        "id": 376997256,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689862994
    },
    {
        "content": "<p>if it doesn't escape in the function we don't need to bump refcounts on each loop</p>",
        "id": 376997953,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689863108
    },
    {
        "content": "<p>we do. What if each loop iteration appends the value to some list</p>",
        "id": 376998089,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689863140
    },
    {
        "content": "<p>(I know it's not needed in this example, but in general RC is not just about memory safety in our case)</p>",
        "id": 376998507,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689863216
    },
    {
        "content": "<p>likewise, to hoist the bounds check, we'd need to know that the list length is a constant</p>",
        "id": 376998958,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689863286
    },
    {
        "content": "<p>well, that is what i'm saying about escape analysis</p>",
        "id": 376999028,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689863296
    },
    {
        "content": "<p>my assumption was that go performs escape analysis on a function level</p>",
        "id": 376999123,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689863315
    },
    {
        "content": "<p>you'd need to do it on the scope level here, and even then you'd need to check that there is no mutation I think?</p>",
        "id": 376999431,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689863359
    },
    {
        "content": "<p>well in order to see it on a function level, we must also see it on a per-scope level?</p>",
        "id": 377007218,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689864295
    },
    {
        "content": "<p>anyway maybe this is a red herring if we are still lower after removing refcounts</p>",
        "id": 377007337,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689864310
    },
    {
        "content": "<p>yeah,  I got that version down to ~400ms. In the original benchmarks go was at 1.2ms. (I did not run that locally though)</p>",
        "id": 377013431,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689865197
    },
    {
        "content": "<p>does anyone have an idea for how the <code>musttail</code> attribute is actually added? <a href=\"https://llvm.org/docs/LangRef.html#id328\">https://llvm.org/docs/LangRef.html#id328</a>. there is a special fucntion in the LLVM C api to add a normal tail call, but <code>musttail</code> does not really seem to be supported there</p>",
        "id": 377030279,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689867917
    },
    {
        "content": "<p>there is also the tailcc calling convention, which may or may not be relevant</p>",
        "id": 377030637,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689867981
    },
    {
        "content": "<p>lol wth, so there is <code>tailcc</code> which will perform tail calls when a call is in tail position. But llvm \"optimizes\" the code in such a way that my syntactic tail calls are no longer tail calls</p>",
        "id": 377068995,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689876135
    },
    {
        "content": "<p>and this, I think, is why I need to use <code>musttail</code>, but there does not seem to be a way to do it ...</p>",
        "id": 377069048,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689876153
    },
    {
        "content": "<p>hold up</p>",
        "id": 377132226,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689895367
    },
    {
        "content": "<p>are we sure this go bf interpreter is correct?</p>",
        "id": 377132242,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689895378
    },
    {
        "content": "<p>when I run it with <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> 's original sample program, <a href=\"https://raw.githubusercontent.com/fabianishere/brainfuck/master/examples/bench/bench-1.bf\">https://raw.githubusercontent.com/fabianishere/brainfuck/master/examples/bench/bench-1.bf</a>, it seems to spit out incorrect values (the null byte and then byte 13, rather than OK as a correct interpreter would)</p>",
        "id": 377132309,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689895432
    },
    {
        "content": "<p>when I try it with the hello world program</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;++++[&lt;+++++++&gt;-]&lt;+.+++++++..+++.&gt;&gt;++++++[&lt;+++++++&gt;-]&lt;+\n+.------------.&gt;++++++[&lt;+++++++++&gt;-]&lt;+.&lt;.+++.------.--------.&gt;&gt;&gt;++++[&lt;++++++++&gt;-\n]&lt;+.\n</code></pre></div>\n<p>inlined into both programs here are the results</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ hyperfine ./brainfuck-go/bf ./brainroc\nBenchmark 1: ./brainfuck-go/bf\n  Time (mean ± σ):       7.1 ms ±   0.9 ms    [User: 2.9 ms, System: 2.0 ms]\n  Range (min … max):     5.6 ms …   9.8 ms    253 runs\n\nBenchmark 2: ./brainroc\n  Time (mean ± σ):       4.3 ms ±   0.7 ms    [User: 2.4 ms, System: 1.0 ms]\n  Range (min … max):     3.3 ms …   8.1 ms    293 runs\n</code></pre></div>",
        "id": 377132388,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689895464
    },
    {
        "content": "<p>Wow <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> you're right! I tried the Go interpreter with the hello world program and some others like serpinski's triangle and it worked fine for all of them, but when I ran that benchmark script hyperfine supressed the output, so I didn't see that it was producing incorrect output!</p>",
        "id": 377153931,
        "sender_full_name": "Hannes",
        "timestamp": 1689904845
    },
    {
        "content": "<p>Here's some benchmarks that do actually produce the same output</p>\n<p>Hello world:</p>\n<div class=\"codehilite\"><pre><span></span><code>              COMMAND              │ MEAN [MS] │ MIN [MS] │ MAX [MS] │  RELATIVE\n───────────────────────────────────┼───────────┼──────────┼──────────┼──────────────\n  ./bf-go examples/hello.bf        │ 1.2 ± 0.1 │      0.8 │      1.8 │        1.00\n  ./src/brainroc examples/hello.bf │ 1.3 ± 0.1 │      1.2 │      2.5 │ 1.12 ± 0.15\n</code></pre></div>\n<p>Serpinski's triangle:</p>\n<div class=\"codehilite\"><pre><span></span><code>              COMMAND            │ MEAN [MS] │ MIN [MS] │ MAX [MS] │  RELATIVE\n─────────────────────────────────┼───────────┼──────────┼──────────┼──────────────\n  ./bf-go        triangle.bf     │ 3.0 ± 0.3 │      2.7 │      4.7 │        1.00\n  ./src/brainroc triangle.bf     │ 9.1 ± 0.3 │      8.7 │     10.2 │ 3.07 ± 0.29\n</code></pre></div>\n<p>Benchmark 2:</p>\n<div class=\"codehilite\"><pre><span></span><code>              COMMAND        │    MEAN [S]    │ MIN [S] │ MAX [S] │   RELATIVE\n────────────────────────────┼────────────────┼─────────┼─────────┼───────────────\n  ./bf-go        bench-2.bf │ 1.364 ± 0.026  │   1.348 │   1.413 │         1.00\n  ./src/brainroc bench-2.bf │ 54.819 ± 0.135 │  54.579 │  55.057 │ 40.18 ± 0.76\n</code></pre></div>",
        "id": 377159491,
        "sender_full_name": "Hannes",
        "timestamp": 1689907735
    },
    {
        "content": "<p>You may want to compare to another interpreter that works in all cases. Even if these produce the same results, the roc version may be doing more work/tracking more things. So the go version may have a structural advantage that leads to much faster execution. If it was handling whatever case it is missing that fails bench 1, it might slow down all other cases (not sure of this, but it is a pretty common benchmarking issue)</p>",
        "id": 377162363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689909327
    },
    {
        "content": "<p>Good point, I picked this Go implementation because it's the first straightforward implementation I found which is more comparable to mine than some of the bigger ones. I'll try a few and see how they compare, making sure to check the output is correct this time! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 377180598,
        "sender_full_name": "Hannes",
        "timestamp": 1689918359
    },
    {
        "content": "<p>alright, interesting. Here is my time for my \"vanilla\" interpreter for the <code>bench-2</code> benchmark</p>\n<div class=\"codehilite\"><pre><span></span><code>Executed in   16.75 secs   fish           external \n   usr time   16.75 secs  598.00 micros   16.75 secs \n   sys time    0.00 secs   51.00 micros    0.00 secs\n</code></pre></div>\n\n<p>and the time with unsafe cheats</p>\n<div class=\"codehilite\"><pre><span></span><code>Executed in    1.27 secs   fish           external \n   usr time  1271.84 millis  571.00 micros  1271.27 millis \n   sys time    0.07 millis   66.00 micros    0.00 millis\n</code></pre></div>\n\n<p>so that would mean that without the overhead of the list operations, we're in the same order of magnitude at least</p>",
        "id": 377206946,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689926659
    },
    {
        "content": "<p>I wrote my own version of a BF interpreter.<br>\nOn one hand to dust off my own Roc skills since it's been a while I programmed in Roc.<br>\nOn the other because I've become a liiitle bit nerdsniped by the issue we are facing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 377613791,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690035570
    },
    {
        "content": "<p><a href=\"https://github.com/Qqwy/roc-bf_example\">https://github.com/Qqwy/roc-bf_example</a></p>",
        "id": 377613802,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690035575
    },
    {
        "content": "<p>This implementation splits up the interpreter in</p>\n<ul>\n<li>a <code>runOne</code> which performs a single instruction's interpreter State -&gt; State transformation.</li>\n<li>a <code>run</code> which wraps it and performs the desired recursion to run a program to completion.</li>\n</ul>\n<p>(And besides this, it is very similar to Folkert's vanilla implementation, with no unsafe cheats)</p>",
        "id": 377613821,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690035584
    },
    {
        "content": "<p>It seemed like a good idea to be able to look at these two parts in isolation.<br>\nHowever... it results in a program that segfaults on larger BF programs (?!)</p>",
        "id": 377613846,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690035591
    },
    {
        "content": "<p>I've tried adding <code>dbg</code> statements, so the intermediate <code>state</code> after each executed instruction can be seen.<br>\nOddly, running <code>roc dev</code> stops the program after 249 <code>dbg</code> lines are printed.</p>",
        "id": 377613885,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690035601
    },
    {
        "content": "<p>I'm very confused by this. It seems like the crash during <code>dbg</code> happens much earlier than the segfault if you don't run in <code>dev</code> mode.</p>",
        "id": 377613952,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690035608
    },
    {
        "content": "<p>How to continue debugging something like this?<br>\nCould it be the case that here too that something that is a tailcall in the source does not actually result in a tailcall in the binary<br>\n?</p>",
        "id": 377614064,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690035640
    },
    {
        "content": "<p>I have definitely seen the dbg issues where after x dbgs, crashes</p>",
        "id": 377618425,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690036774
    },
    {
        "content": "<p>Tends to vary a bit by system, but no idea why it happens. Dbg is over shared memory with the compiler, so we probably have a bug there</p>",
        "id": 377618642,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690036812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20optimising.20my.20BF.20interpreter/near/377618425\">said</a>:</p>\n<blockquote>\n<p>I have definitely seen the dbg issues where after x dbgs, crashes</p>\n</blockquote>\n<p>I'm running it in <code>lldb</code> now. Seems like a call to <code>roc dev ./brainroc ./examples/some_program.bf</code> just exits with status code 0 after 249 iterations <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 377620962,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690037455
    },
    {
        "content": "<p>Running the program compiled using <code>roc build</code> in lldb shows that the segfault happens inside <code>malloc</code> so it might be an out-of-memory issue maybe? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 377621165,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690037512
    },
    {
        "content": "<p>Output from <code>lldb</code>:</p>\n<p>For <code>bottles.bt</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=2, address=0x16f603ff0)\n    frame #0: 0x000000010000d6f4 brainroc`decrement_refcounted_ptr_8\nbrainroc`decrement_refcounted_ptr_8:\n-&gt;  0x10000d6f4 &lt;+0&gt;:  stp    x29, x30, [sp, #-0x10]!\n    0x10000d6f8 &lt;+4&gt;:  ldr    x8, [x0]\n    0x10000d6fc &lt;+8&gt;:  cbz    x8, 0x10000d71c           ; &lt;+40&gt;\n    0x10000d700 &lt;+12&gt;: mov    x10, #-0x8000000000000000\n(lldb) bt\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=2, address=0x16f603ff0)\n  * frame #0: 0x000000010000d6f4 brainroc`decrement_refcounted_ptr_8\n    frame #1: 0x000000010000d8a0 brainroc`___lldb_unnamed_symbol333506 + 40\n    frame #2: 0x000000010000a638 brainroc`List_get_53eef38977ca9e3af29e8b6fc9f50f557be9bbd173abd2118eb5488f19fb2 + 100\n    frame #3: 0x00000001000095b4 brainroc`List_update_82d12b6b12b8099eecd17c66fbb6ef41a8137f8c1ef74478e7bee978be8f9 + 64\n    frame #4: 0x000000010000a6e8 brainroc`#UserApp_dec_ca98df76e744faeef21fb76918295997c9c1b552a2e623d6fc162a11de8fae + 84\n    frame #5: 0x0000000100007144 brainroc`#UserApp_runOne_5250a04b6d2518751b896097c7387fb10ff97b95f3e08a2795e163ade21ee + 240\n    frame #6: 0x0000000100009f48 brainroc`#UserApp_run_618af7379dc962a8e685497132e67d82737289278bf8d7fadc9a49f2d03ce7 + 44\n    frame #7: 0x0000000100003744 brainroc`#UserApp_36_789661f33c6ea1791479ecf1f52dd93e21b779364a5197d9de3459113903b9c + 68\n    frame #8: 0x0000000100004380 brainroc`Task_39_5cbbff1635f59ae21a02af6cfe0157283a05fb77d9b6ef4377a9133a78ffbe5 + 164\n    frame #9: 0x00000001000043d8 brainroc`Effect_effect_after_inner_935229af12e1c6ee752a73f7b73add5a7c7a22cfba9e577e778e240ed627a + 72\n    frame #10: 0x000000010000b944 brainroc`Effect_effect_after_inner_1b6b9e2f2c8025d6941d1d79426973c1ba899598ef8eecc9bea3f5f3657b4477 + 84\n    frame #11: 0x000000010000e2e8 brainroc`roc__mainForHost_0_caller + 12\n    frame #12: 0x0000000100034d60 brainroc`host::call_the_closure::h2bc8f279b028add5 + 160\n    frame #13: 0x0000000100034c9c brainroc`rust_main + 132\n    frame #14: 0x000000010000f4d4 brainroc`main + 20\n    frame #15: 0x00000001a79fff28 dyld`start + 2236\n</code></pre></div>\n<p>For <code>sierpinski.bt</code>, <code>bench1.bt</code>, <code>bench2.bt</code></p>\n<div class=\"codehilite\"><pre><span></span><code>* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=2, address=0x16f603ff0)\n    frame #0: 0x00000001a7b946b8 libsystem_malloc.dylib`nanov2_malloc_zero_on_alloc + 4\nlibsystem_malloc.dylib`nanov2_malloc_zero_on_alloc:\n-&gt;  0x1a7b946b8 &lt;+4&gt;:  stp    x20, x19, [sp, #-0x20]!\n    0x1a7b946bc &lt;+8&gt;:  stp    x29, x30, [sp, #0x10]\n    0x1a7b946c0 &lt;+12&gt;: add    x29, sp, #0x10\n    0x1a7b946c4 &lt;+16&gt;: add    x8, x1, #0xf\n(lldb) bt\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=2, address=0x16f603ff0)\n  * frame #0: 0x00000001a7b946b8 libsystem_malloc.dylib`nanov2_malloc_zero_on_alloc + 4\n    frame #1: 0x0000000100034134 brainroc`roc_alloc + 24\n    frame #2: 0x0000000100009c40 brainroc`List_replaceUnsafe_8256d790c99390129cd6628d4d43bc44f55cfb83af722d8248666b192be24d65 + 176\n    frame #3: 0x0000000100003584 brainroc`List_update_9aea80b84c2f1cf95fb346d143d7e8d50c7bf2b25952d5f8f5db3c06a669b1a + 104\n    frame #4: 0x0000000100009a84 brainroc`#UserApp_inc_ab6bf482529beb271842e34a3922217532b2f57565d72aea510e9edbdcef6 + 84\n    frame #5: 0x0000000100007158 brainroc`#UserApp_runOne_5250a04b6d2518751b896097c7387fb10ff97b95f3e08a2795e163ade21ee + 260\n    frame #6: 0x0000000100009f48 brainroc`#UserApp_run_618af7379dc962a8e685497132e67d82737289278bf8d7fadc9a49f2d03ce7 + 44\n    frame #7: 0x0000000100003744 brainroc`#UserApp_36_789661f33c6ea1791479ecf1f52dd93e21b779364a5197d9de3459113903b9c + 68\n    frame #8: 0x0000000100004380 brainroc`Task_39_5cbbff1635f59ae21a02af6cfe0157283a05fb77d9b6ef4377a9133a78ffbe5 + 164\n    frame #9: 0x00000001000043d8 brainroc`Effect_effect_after_inner_935229af12e1c6ee752a73f7b73add5a7c7a22cfba9e577e778e240ed627a + 72\n    frame #10: 0x000000010000b944 brainroc`Effect_effect_after_inner_1b6b9e2f2c8025d6941d1d79426973c1ba899598ef8eecc9bea3f5f3657b4477 + 84\n    frame #11: 0x000000010000e2e8 brainroc`roc__mainForHost_0_caller + 12\n    frame #12: 0x0000000100034d60 brainroc`host::call_the_closure::h2bc8f279b028add5 + 160\n    frame #13: 0x0000000100034c9c brainroc`rust_main + 132\n    frame #14: 0x000000010000f4d4 brainroc`main + 20\n    frame #15: 0x00000001a79fff28 dyld`start + 2236\n</code></pre></div>\n<p>(<code>helloworld.bt</code> and <code>print0to999.bt</code> run fine).</p>",
        "id": 377628884,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690039536
    },
    {
        "content": "<p>in the platform, you can make <code>roc_alloc</code> print e.g. how many bytes it wants to allocate. That might be helpful</p>",
        "id": 377629980,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690039772
    },
    {
        "content": "<p>the problem here is the <code>dbg</code> btw, or does this always happen?</p>",
        "id": 377630321,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690039852
    },
    {
        "content": "<p>also something I've found often helpful is to put lldb backtraces and/or .ll bytecode into gpt4 and say what symptom I'm seeing and ask if it sees anything - I've had good success with that in the past!</p>",
        "id": 377633432,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690040792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20optimising.20my.20BF.20interpreter/near/377630321\">said</a>:</p>\n<blockquote>\n<p>the problem here is the <code>dbg</code> btw, or does this always happen?</p>\n</blockquote>\n<p>This is the output you get after running a program compiled using a normal <code>roc build</code> which IIRC strips all <code>dbg</code> calls.<br>\n(To be precise, I run <code>cargo run -- build --debug ../bf/main.roc</code>; the <code>roc</code> directory containing the roc repo and the <code>bf</code> directory containing the bf interpreter project are sibling directories)</p>",
        "id": 377633763,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690040890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20optimising.20my.20BF.20interpreter/near/377629980\">said</a>:</p>\n<blockquote>\n<p>in the platform, you can make <code>roc_alloc</code> print e.g. how many bytes it wants to allocate. That might be helpful</p>\n</blockquote>\n<p>It looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code># ... many more similar lines here\nAllocating 1008...\nPtr: 0x102904440\nDeallocating 0x102904830\nAllocating 1008...\nPtr: 0x102904830\nDeallocating 0x102904440\nAllocating 1008...\nPtr: 0x102904440\nDeallocating 0x102904830\nAllocating 1008...\nPtr: 0x102904830\nDeallocating 0x102904440\nAllocating 1008...\nPtr: 0x102904440\nDeallocating 0x102904830\nAllocating 1008...\nPtr: 0x102904830\nDeallocating 0x102904440\nAllocating 1008...\nPtr: 0x102904440\nDeallocating 0x102904830\nAllocating 1008...\nPtr: 0x102904830\nDeallocating 0x102904440\nAllocating 930...\nPtr: 0x102904440\nDeallocating 0x102904f70\nAllocating 1008...\nPtr: 0x102904c20\nDeallocating 0x102904830\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904c20\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nPtr: 0x1029047f0\nDeallocating 0x102904be0\nAllocating 1008...\nPtr: 0x102904be0\nDeallocating 0x1029047f0\nAllocating 1008...\nProcess 41816 stopped\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=2, address=0x16f603fd0)\n    frame #0: 0x00000001008c1f8c brainroc`_$LT$std..io..stdio..StdoutLock$u20$as$u20$std..io..Write$GT$::write_all::hd86c4a41d5107153 at stdio.rs:735 [opt]\n(lldb) bt\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=2, address=0x16f603fd0)\n  * frame #0: 0x00000001008c1f8c brainroc`_$LT$std..io..stdio..StdoutLock$u20$as$u20$std..io..Write$GT$::write_all::hd86c4a41d5107153 at stdio.rs:735 [opt]\n    frame #1: 0x00000001008c4af8 brainroc`_$LT$std..io..Write..write_fmt..Adapter$LT$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h968df0371a4b9768 at mod.rs:1671:23 [opt]\n    frame #2: 0x00000001009197a0 brainroc`core::fmt::Formatter::pad_integral::hb214d8a54e5b3e5f at mod.rs:0 [opt]\n    frame #3: 0x000000010091bb00 brainroc`core::fmt::pointer_fmt_inner::hb0b335e6a5beaa1d [inlined] core::fmt::num::GenericRadix::fmt_int::hd198a0fe668a9d31 at num.rs:110:9 [opt]\n    frame #4: 0x000000010091ba98 brainroc`core::fmt::pointer_fmt_inner::hb0b335e6a5beaa1d [inlined] core::fmt::num::_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$::fmt::h338abe56eabf0dc0 at num.rs:155:17 [opt]\n    frame #5: 0x000000010091ba98 brainroc`core::fmt::pointer_fmt_inner::hb0b335e6a5beaa1d at mod.rs:2503:15 [opt]\n    frame #6: 0x0000000100822a88 brainroc`_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$::fmt::h88e433855bb7f807(self=0x000000016f6041b8, f=0x000000016f604200) at mod.rs:2475:9\n    frame #7: 0x0000000100822a48 brainroc`_$LT$$BP$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$::fmt::heda03ebd385f5e29(self=0x000000016f6043f0, f=0x000000016f604200) at mod.rs:2514:9\n    frame #8: 0x0000000100822a0c brainroc`_$LT$$BP$mut$u20$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc2e87981d6756b50(self=0x000000016f6043f0, f=0x000000016f604200) at mod.rs:2543:9\n    frame #9: 0x0000000100919434 brainroc`core::fmt::write::hd33da007f7a27e39 at mod.rs:1208:17 [opt]\n    frame #10: 0x00000001008c1ab8 brainroc`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::h881b8d60b2402de3 [inlined] std::io::Write::write_fmt::hc2f28f6e637fac24 at mod.rs:1682:15 [opt]\n    frame #11: 0x00000001008c1a90 brainroc`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::h881b8d60b2402de3 at stdio.rs:716:9 [opt]\n    frame #12: 0x00000001008c38dc brainroc`std::io::stdio::_print::h8769d5b8d07b47a7 [inlined] _$LT$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::h687f60646da13c0c at stdio.rs:690:9 [opt]\n    frame #13: 0x00000001008c38b8 brainroc`std::io::stdio::_print::h8769d5b8d07b47a7 [inlined] std::io::stdio::print_to::h68985b56676cff12 at stdio.rs:1008:21 [opt]\n    frame #14: 0x00000001008c387c brainroc`std::io::stdio::_print::h8769d5b8d07b47a7 at stdio.rs:1075:5 [opt]\n    frame #15: 0x00000001000265d8 brainroc`roc_alloc(size=1008, _alignment=8) at lib.rs:43:5\n    frame #16: 0x000000010000ae14 brainroc`List_replaceUnsafe_dbbb614026929029a924a622e5a645206e5e1277bd8c25cb7b78527df1a8c + 176\n    frame #17: 0x000000010000a780 brainroc`List_update_b7f585fd6f82cd9d725cedb302bc1875b5e7bb83a5ac59033a7d4152c1447 + 104\n    frame #18: 0x000000010000b874 brainroc`#UserApp_dec_ca98df76e744faeef21fb76918295997c9c1b552a2e623d6fc162a11de8fae + 84\n    frame #19: 0x000000010000830c brainroc`#UserApp_runOne_5250a04b6d2518751b896097c7387fb10ff97b95f3e08a2795e163ade21ee + 240\n    frame #20: 0x000000010000b11c brainroc`#UserApp_run_618af7379dc962a8e685497132e67d82737289278bf8d7fadc9a49f2d03ce7 + 44\n    frame #21: 0x00000001000047c4 brainroc`#UserApp_36_66a53c5bb7482a7975e058b703753a62aee74dcb3ed8c2fbfc227399ea738e + 68\n    frame #22: 0x0000000100005400 brainroc`Task_39_f2eb2e65858ef9a081c444e7b9b2cef1ed51b5a1e38027833034b9f057aa3131 + 164\n    frame #23: 0x0000000100007e74 brainroc`Effect_effect_after_inner_3bfae27b50cc70419dec89ef8da341b1287d7bb7b3c4bb2481ba28b17a8ec4 + 72\n    frame #24: 0x000000010000cd98 brainroc`Effect_effect_after_inner_4f1fdebc72623b7987dfbf57d7b81537b885c9e4ce317a63dbf262856adf + 84\n    frame #25: 0x000000010000f3d4 brainroc`roc__mainForHost_0_caller + 12\n    frame #26: 0x0000000100027198 brainroc`host::call_the_closure::h337ad65c516ada9b(closure_data_ptr=&quot;A BF interpreter.&quot;) at lib.rs:234:5\n    frame #27: 0x0000000100027110 brainroc`rust_main at lib.rs:223:9\n    frame #28: 0x0000000100010554 brainroc`main + 20\n    frame #29: 0x00000001a79fff28 dyld`start + 2236\n(lldb)\n</code></pre></div>\n<p>The size of the allocations is all as large as the <code>dataSize</code> (+ 8 for the refcount I assume). So I think the program is not changing the data list in place.<br>\nHowever, what is strange is that it looks to me like these allocations are all short-lived. And the error we get is not an OOM error but a 'BAD ACCESS' error</p>",
        "id": 377640309,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690042877
    },
    {
        "content": "<p>Counting how many allocations are alive by keeping track in a local static variable, shows that there are only <code>4</code> allocs alive during the main inner loop (and during the time of the segfault)</p>",
        "id": 377640918,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690043078
    },
    {
        "content": "<p>yeah, I'm not sure how alloc could cause a bad access</p>",
        "id": 377641171,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690043184
    },
    {
        "content": "<p>so I wonder if maybe the real cause is something else</p>",
        "id": 377641221,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690043197
    },
    {
        "content": "<p>the tool to find the actual issue is valgrind, which does not run on mac sadly</p>",
        "id": 377641290,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690043219
    },
    {
        "content": "<p>(how do mac developers get anything done???)</p>",
        "id": 377641356,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690043242
    },
    {
        "content": "<p>you can try using macos's debug malloc to tell you if it's actually a badaccess</p>",
        "id": 377662707,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690051216
    },
    {
        "content": "<p><code>DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib</code></p>",
        "id": 377662767,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690051249
    }
]