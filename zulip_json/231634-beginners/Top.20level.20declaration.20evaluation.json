[
    {
        "content": "<p>I have a top level declaration that does some heavy computation in the body to generate the result, but it takes no arguments and is fully \"constant\". Does Roc guarantee that this value is cached/memoized/comptime evaluated/something else? Or is the value re-computed every time it is used somewhere?</p>",
        "id": 317882508,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1672007166
    },
    {
        "content": "<p>Today it is compiled as if it is re-computed every time it is used. Optimization by the LLVM backend may make it truly constant, but that is not guaranteed</p>",
        "id": 317882608,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1672007281
    },
    {
        "content": "<p>Thanks. Can/should this change in the future?</p>",
        "id": 317882880,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1672007459
    },
    {
        "content": "<p>It is definitely a goal that this will change.</p>",
        "id": 317883516,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672007943
    },
    {
        "content": "<p>Not sure about comp time vs memoized when first called vs memoized during app start up, but it will always be easy to opt out by wrapping a top level value in a lambda that takes no arguments.</p>",
        "id": 317883764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672008131
    },
    {
        "content": "<p>I want to do comptime in the future</p>",
        "id": 317885201,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1672009137
    },
    {
        "content": "<p>at least of top-level values, and probably also of anything that can be hoisted to there (e.g. it's declared in the middle of a function, but it doesn't depend on any of that function's arguments)</p>",
        "id": 317885272,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1672009200
    }
]