[
    {
        "content": "<p>Heard recently that there's a new plan for how Roc will be handling effects, essentially moving away from Tasks entirely. </p>\n<p>One of the best things IMO about haivng a concrete type to represent \"an effect that will be executed by the runtime\" is that it makes testing so much easier. Instead of having to set up mocks, or do some complicated dependency injection, you can just assert that your code returns a certain kind of task with the payload that you expect. Testing the code that handles this result is usually really easy too, because you can just pass in some data that you expect the runtime to give you back.   </p>\n<p>When you have code that can call an effect anywhere inside, it becomes much harder to test (even if you have the guarantees from the type checker about pure functions vs effectful functions). If you can directly call an effect, now it's up to the author to minimize the other code surrounding the effect. For example, if you have a function that transforms its arguments in some way, then calls some effect, and then transforms the result in some way, this is much harder to test. </p>\n<p>I'm curious what the thoughts are here - is this something that's considered? Am I just misunderstanding the way this will work?</p>",
        "id": 496251620,
        "sender_full_name": "Unshipped9094",
        "timestamp": 1738035353
    },
    {
        "content": "<p>Tasks where not reasonably testable before, so I don't think this makes much of a difference on that front. Unlike elm where you return a message that is easily concrete for testing, tasks have never been that way. So I don't think we lost anything there</p>",
        "id": 496251912,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738035583
    },
    {
        "content": "<p>I do agree that it still leaves a hole around testing. A number ideas exist for making that nice, but nothing implemented currently.</p>",
        "id": 496252000,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738035658
    },
    {
        "content": "<p>I'd say the only difference between Tasks and effectful functions is laziness. They literally compile to the same thing, except one is <code>\\{} -&gt; run effect</code> and the other is <code>run! effect</code>.</p>",
        "id": 496253377,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738036688
    },
    {
        "content": "<p>So any problems with one apply to the other, except for all the lambda set bugs we've avoided by not using a bunch of thunks.</p>",
        "id": 496253831,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738037001
    },
    {
        "content": "<p>Yeah I guess I'm mainly comparing it to Elm, where you would just really test your main update function with some inputs and assert that the return value is the state you expect and the effect you expect to run, as well as your update function with the next state and result of the previous <code>Cmd</code>.</p>",
        "id": 496257414,
        "sender_full_name": "Unshipped9094",
        "timestamp": 1738039566
    },
    {
        "content": "<p>Effects are still tracked though. If a function has an effect, it has a different type to a function which doesn't. And a function which doesn't have effects cannot call a function which does (kind of like async in other languages). So you always know when effects happen. And you are encouraged to minimize effect usage</p>",
        "id": 496262592,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1738043538
    },
    {
        "content": "<p>the same as elm could be done in roc, but it would be very limiting. You would make a platform that takes a union of commands as output. So it would have no effects. Everything would go through that one tag. It would actually be 100% pure. Would make it a lot more directly testable like in elm.</p>",
        "id": 496265742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738045646
    },
    {
        "content": "<p>This is basically the exact design of the platform I hope to build once I have time. The language I designed and was trying to build before I came to Roc was basically Roc with Actors, managed effect runtime, and less sugar and no ad hoc polymorphism.</p>\n<p>So building a platform that just defines a Cmd tag union and expects a function that returns an Actor type (maybe tag union as well) would allow me to test building apps using the same basic design.</p>",
        "id": 496308839,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738062244
    },
    {
        "content": "<p>I love actors :) Did you use akka in the past as well?</p>",
        "id": 496309200,
        "sender_full_name": "Anton",
        "timestamp": 1738062364
    },
    {
        "content": "<p>I had contact with Akka, I think I only really helped on one ETL system that used it when I was at a Scala shop for 4 years.</p>",
        "id": 496309410,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738062438
    },
    {
        "content": "<p>But I really nerded out on Elixir/Erlang for awhile after learning about the concept</p>",
        "id": 496309441,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738062456
    },
    {
        "content": "<p>And in late 2018/early 2019 I even <em>tried</em> to contribute to <a href=\"http://ponylang.io\">Pony</a>  (a very performant, but very complicated Actor-oriented language)</p>",
        "id": 496309665,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738062516
    },
    {
        "content": "<p>Combine that with a love of Elm, and you get Chakra (my language)</p>",
        "id": 496309938,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738062615
    },
    {
        "content": "<p>But Chakra will probably never be now that there is Roc.</p>",
        "id": 496310033,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738062658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497765\">Kilian Vounckx</span> <a href=\"#narrow/channel/231634-beginners/topic/Purity.20Inference.20and.20Testing/near/496262592\">said</a>:</p>\n<blockquote>\n<p>Effects are still tracked though. If a function has an effect, it has a different type to a function which doesn't. And a function which doesn't have effects cannot call a function which does (kind of like async in other languages). So you always know when effects happen. And you are encouraged to minimize effect usage</p>\n</blockquote>\n<p>Yup, I watched the the Functional Purity Inference Plan talk, so I'm aware of the plan with <code>A =&gt; B</code> vs <code>A -&gt; B</code>. I imagine the feel will be similar to Haskell, where you try to minimize the code that needs to be in any kind of  <code>IO</code> code.</p>",
        "id": 496453568,
        "sender_full_name": "Unshipped9094",
        "timestamp": 1738114359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Purity.20Inference.20and.20Testing/near/496265742\">said</a>:</p>\n<blockquote>\n<p>the same as elm could be done in roc, but it would be very limiting. You would make a platform that takes a union of commands as output. So it would have no effects. Everything would go through that one tag. It would actually be 100% pure. Would make it a lot more directly testable like in elm.</p>\n</blockquote>\n<p>Basically making a platform that's using the Elm Architechture? That might be limited but I can see it being great for things like command line apps.</p>",
        "id": 496453719,
        "sender_full_name": "Unshipped9094",
        "timestamp": 1738114484
    },
    {
        "content": "<p>Yeah, definitely can have its uses. TEA can be amazing when designed well for a domain</p>",
        "id": 496454637,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738115123
    }
]