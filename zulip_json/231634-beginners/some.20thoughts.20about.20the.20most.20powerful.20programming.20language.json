[
    {
        "content": "<p>It would be nice if there is a programming language with types that depend on terms (like Idris) and strict effect tracking (like Koka).</p>\n<p>In that way, we can compile all programs humankind can ever make into that language and vice versa, and refactoring would be easier.</p>\n<p>Right now, refactoring is a pain, especially for new languages without IDE support, and the intermediate thing all languages compile to (like LLVM IR or object file) are painful to work with.</p>",
        "id": 260094294,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1635921314
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/bytecodealliance/wizer\">this hack</a> exists because some language's compiler isn't powerful enough, or the language itself isn't powerful enough to <strong>express pure functions</strong>. That's also the reason why in some languages you have to write SIMD by hand because another thread may write to the target location and the compiler refuses to do the boilerplate for you.</p>",
        "id": 260094579,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1635921687
    },
    {
        "content": "<p>And also, there is Halide, which decouples algorithm from implementation (for array manipulation). This is a good idea: optimization should be separate from description of the program (what it does). I think it's better to let the compiler decide whether to use linked list or growable contiguous memory for dynamic array by tuning with test data, rather than letting the programmers do their wishful thinking for most of the time.</p>",
        "id": 260094933,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1635922107
    }
]