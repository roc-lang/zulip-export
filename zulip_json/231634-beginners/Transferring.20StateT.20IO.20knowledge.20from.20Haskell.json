[
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> thanks for the UChicago MPCS guest lecture in December, I was there for that, I asked about how you would define FP, you said purity and immutability and that settled that question for me. </p>\n<p>I am looking to learn Roc by translating <a href=\"https://github.com/ataha322/typing\">my friend's typing test command line app</a> from Go into Roc. In that FP class, we used the <a href=\"https://hackage.haskell.org/package/transformers-0.6.1.2/docs/Control-Monad-Trans-State-Lazy.html\">StateT monad transformer</a> applied to the IO monad for the stateful apps we built that communicated with the command line. I scrolled through the <a href=\"https://www.roc-lang.org/tutorial\">Roc tutorial</a> and I didn't see a way to maintain state in between iterations, i.e. one round of Stdin.line-&gt;processing-&gt;Stdout.line. What does Roc have to support this kind of app, besides reading and writing the state to disk at each iteration?</p>",
        "id": 506018179,
        "sender_full_name": "Tristan Romanov",
        "timestamp": 1742173119
    },
    {
        "content": "<p>This might help? .. <a href=\"https://github.com/lukewilliamboswell/roc-ansi\">https://github.com/lukewilliamboswell/roc-ansi</a></p>",
        "id": 506018688,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742173453
    },
    {
        "content": "<p>I implemented a simple text editor using roc</p>",
        "id": 506018706,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742173476
    },
    {
        "content": "<p>Ok thanks for the example, indeed the Go code uses ANSI escape codes.</p>",
        "id": 506019590,
        "sender_full_name": "Tristan Romanov",
        "timestamp": 1742174108
    }
]