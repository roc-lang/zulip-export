[
    {
        "content": "<p>Heyyo, I was looking at how elm-units manages to make a type safe way to do units of measure stuff, but I've never done any Elm, so I'm having trouble converting it to Roc.</p>\n<p>I've simplified down elm-units by removing all the type aliases and renaming the types and tags to have distinct names and confirmed that it still typechecks as you'd expect, i.e. you can add metres and feet but not metres and kilograms.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">TypeQuantity</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nv\">units</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">TagQuantity</span><span class=\"w\"> </span><span class=\"nv\">number</span>\n<span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">TypeMeters</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">TagMeters</span>\n<span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">TypeKilograms</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">TagKilograms</span>\n\n<span class=\"nv\">meters</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">TypeQuantity</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"w\"> </span><span class=\"kt\">TypeMeters</span>\n<span class=\"nv\">meters</span><span class=\"w\"> </span><span class=\"nv\">numMeters</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">TagQuantity</span><span class=\"w\"> </span><span class=\"nv\">numMeters</span>\n\n<span class=\"nv\">feet</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">TypeQuantity</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"w\"> </span><span class=\"kt\">TypeMeters</span>\n<span class=\"nv\">feet</span><span class=\"w\"> </span><span class=\"nv\">numFeet</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">meters</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"mi\">3048</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">numFeet</span><span class=\"p\">)</span>\n\n<span class=\"nv\">kilograms</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">TypeQuantity</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"w\"> </span><span class=\"kt\">TypeKilograms</span>\n<span class=\"nv\">kilograms</span><span class=\"w\"> </span><span class=\"nv\">numKilograms</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">TagQuantity</span><span class=\"w\"> </span><span class=\"nv\">numKilograms</span>\n\n<span class=\"nv\">plus</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">TypeQuantity</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nv\">units</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">TypeQuantity</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nv\">units</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">TypeQuantity</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nv\">units</span>\n<span class=\"nv\">plus</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">TagQuantity</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">TagQuantity</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">TagQuantity</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span>\n\n<span class=\"nv\">heightA</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">meters</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"nv\">heightB</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">feet</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"nv\">weightA</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">kilograms</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n\n<span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">plus</span><span class=\"w\"> </span><span class=\"nv\">heightA</span><span class=\"w\"> </span><span class=\"nv\">heightB</span><span class=\"w\"> </span><span class=\"c1\">-- Type checks</span>\n<span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">plus</span><span class=\"w\"> </span><span class=\"nv\">heightA</span><span class=\"w\"> </span><span class=\"nv\">weightA</span><span class=\"w\"> </span><span class=\"c1\">-- Doesn't type check</span>\n</code></pre></div>\n<p>Here's my attempt at converting to Roc:</p>\n<div class=\"codehilite\"><pre><span></span><code>TypeQuantity number units : [TagQuantity number]\nTypeMeters : [TagMeters]\nTypeKilograms : [TagKilograms]\n\nmeters : F64 -&gt; TypeQuantity F64 TypeMeters\nmeters = \\numMeters -&gt; TagQuantity numMeters\n\nfeet : F64 -&gt; TypeQuantity F64 TypeMeters\nfeet = \\numFeet -&gt; meters (numFeet * 0.3048)\n\nkilograms : F64 -&gt; TypeQuantity F64 TypeKilograms\nkilograms = \\numKilograms -&gt; TagQuantity numKilograms\n\nplus : TypeQuantity number units, TypeQuantity number units -&gt; TypeQuantity number units\nplus = \\TagQuantity x, TagQuantity y -&gt; TagQuantity (x + y)\n</code></pre></div>\n<p>I think part of the problem is that in Elm the <code>type</code> keyword creates a new type, but in Roc the <code>:</code> only creates a type alias, so I tried converting <code>Quantity</code> to an opaque type, but opaque types can only have one type parameter, so I'm stumped <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>Any help would be great, thank youuuuuu :)</p>",
        "id": 439142932,
        "sender_full_name": "Hannes",
        "timestamp": 1715918350
    },
    {
        "content": "<blockquote>\n<p>but in Roc the <code>:</code> only creates a type alias, so I tried converting <code>Quantity</code> to an opaque type, but opaque types can only have one type parameter</p>\n</blockquote>\n<p>They can have many. For example, dict has 2</p>",
        "id": 439155514,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715925782
    },
    {
        "content": "<p>Oh! Then I've probably misunderstood this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>MyOpaqueType a b := [MyTag a b]\n\nf : a, b -&gt; MyOpaqueType a b\nf = \\x, y -&gt; @MyOpaqueType x y\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>29â”‚  f = \\x, y -&gt; @MyOpaqueType x y\n                  ^^^^^^^^^^^^^^^^^\n\nNote: Opaque types always wrap exactly one argument!\n</code></pre></div>\n<p>What is the compiler trying to tell me?</p>",
        "id": 439156082,
        "sender_full_name": "Hannes",
        "timestamp": 1715926079
    },
    {
        "content": "<p><code>@MyOpaqueType (MyTag x y)</code></p>",
        "id": 439157223,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715926620
    },
    {
        "content": "<p>Ah, thank you! Managed to get it to work now!</p>",
        "id": 439161207,
        "sender_full_name": "Hannes",
        "timestamp": 1715928466
    },
    {
        "content": "<p>Here's my code in case someone else finds this thread and was wondering:</p>\n<div class=\"codehilite\"><pre><span></span><code>Quantity number units := number\nMeters := [Meters]\nKilograms := [Kilograms]\n\nmeters : F64 -&gt; Quantity  F64 Meters\nmeters = \\numMeters -&gt; @Quantity numMeters\n\nfeet : F64 -&gt; Quantity  F64 Meters\nfeet = \\numFeet -&gt; meters (numFeet * 0.3048)\n\nkilograms : F64 -&gt; Quantity  F64 Kilograms\nkilograms = \\numKilograms -&gt; @Quantity numKilograms\n\nplus : Quantity _ units, Quantity _ units -&gt; Quantity _ units\nplus = \\@Quantity a, @Quantity b -&gt; @Quantity (a + b)\n\nheightA = meters 2\nheightB = feet 6\nweightA = kilograms 100\n</code></pre></div>",
        "id": 439161299,
        "sender_full_name": "Hannes",
        "timestamp": 1715928505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> has marked this topic as resolved.</p>",
        "id": 439170110,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715932128
    }
]