[
    {
        "content": "<p>Hi! I'm experimenting with building a simple elm-like library for rendering &amp; updating TUI apps, e.g. vim-like text editors, etc.</p>\n<p>I'm trying to model Signal's  something like the following (haskell), but unsure how to express that in Roc:</p>\n<div class=\"codehilite\"><pre><span></span><code>data Signal a where\n    KeyPressed :: char -&gt; Signal char\n    Map        :: Signal b -&gt; (b -&gt; a) -&gt; Signal a\n</code></pre></div>\n<p>So, a couple questions:</p>\n<ul>\n<li>Is this possible in Roc? (I don't think so, but want to confirm)</li>\n<li>How would you go about modeling this instead?</li>\n</ul>",
        "id": 479606962,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1730263685
    },
    {
        "content": "<p>No, it's not possible in Roc. If you require the type <code>b</code> to be well known I'm not sure you can model this directly without type erasure. Can you pull out <code>map</code> so that it's a function over Signal rather than a constructor? Guessing not, but curious what the code is like.</p>",
        "id": 479607599,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1730264232
    },
    {
        "content": "<p>I don't think I need it, strictly speaking. I was mostly trying to avoid exposing myself to the unbridled power that is Task.</p>",
        "id": 479608256,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1730264563
    },
    {
        "content": "<p>In fact yeah; I should just be using Task here. I'm making things unnecessarily difficult for myself :eyeroll:</p>",
        "id": 479608329,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1730264641
    },
    {
        "content": "<p>It would be nice to e.g. guarantee that random code that's trying to render editor state can't also be printing to the console except thru sanctioned means (returning a new Node)</p>",
        "id": 479608474,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1730264740
    },
    {
        "content": "<p>I don't suppose GADTs have been discussed? On the table for the future? Too complicated to be worth it?</p>",
        "id": 479608994,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1730265172
    },
    {
        "content": "<p>I don't think they've been discussed.</p>",
        "id": 479695242,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1730298590
    },
    {
        "content": "<p>re: limiting task<br>\nwe didn't end up doing it in roc-ray, but an approach I/we thought about was stubbing in fake error types to make, eg, draw calls not compile during init</p>",
        "id": 479708225,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1730302020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/231634-beginners/topic/Modeling.20GADTs.20in.20Roc.3F/near/479608994\">said</a>:</p>\n<blockquote>\n<p>I don't suppose GADTs have been discussed? On the table for the future? Too complicated to be worth it?</p>\n</blockquote>\n<p>they haven't been discussed because I think they require <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/nominal.20types\">#ideas &gt; nominal types</a> - which is in the stage of \"vague idea\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 479712776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303238
    },
    {
        "content": "<p>but I think the <code>Signal b -&gt; (b -&gt; a) -&gt; Signal a</code> part of that would require type-erased closures, right <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>?</p>",
        "id": 479713097,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303336
    },
    {
        "content": "<p>that's one option. it requires existentials or that</p>",
        "id": 479713199,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1730303364
    },
    {
        "content": "<p>can existentials be compiled to first-order functions? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 479713410,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303424
    },
    {
        "content": "<p>I thought they had the same problems in common with rank-N types</p>",
        "id": 479713450,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303438
    },
    {
        "content": "<p>they can be yes</p>",
        "id": 479714095,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1730303608
    },
    {
        "content": "<p>hm, so why would this work with our compilation models when rank-N types wouldn't?</p>",
        "id": 479714157,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303627
    },
    {
        "content": "<p>rank N types can work</p>",
        "id": 479714198,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1730303639
    },
    {
        "content": "<p>hm I must be missing something haha</p>",
        "id": 479714300,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303653
    },
    {
        "content": "<p>I thought we concluded they couldn't work</p>",
        "id": 479714360,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303668
    },
    {
        "content": "<p>if I understand correctly, <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2009/09/implication_constraints.pdf?from=https://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/implication_constraints.pdf&amp;type=exact\">https://www.microsoft.com/en-us/research/wp-content/uploads/2009/09/implication_constraints.pdf?from=https://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/implication_constraints.pdf&amp;type=exact</a> says GADTs can be implemented in way that preserves principal decidable type inference</p>",
        "id": 479714650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303758
    },
    {
        "content": "<p>so that wouldn't be a blocker</p>",
        "id": 479715085,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730303891
    },
    {
        "content": "<p>in theory itâ€™s doable</p>",
        "id": 479787806,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1730336740
    },
    {
        "content": "<p>the question probably should be is it worth doing</p>",
        "id": 479787812,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1730336756
    },
    {
        "content": "<p>it occurred to me that I believe GADTs would make it possible from a types perspective to do Elm Architecture</p>",
        "id": 482800792,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731789765
    },
    {
        "content": "<p>without needing multiple type parameters like you would today</p>",
        "id": 482800825,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731789795
    },
    {
        "content": "<p>but Elm's <code>Html.lazy</code> still relies on persistent data structures to be fast, which remains the thing that would scare me away from using a Roc rendering system based on the Elm Architecture on a large UI</p>",
        "id": 482800987,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731789956
    },
    {
        "content": "<p>Why does lazy need a persistent data structure and not just a dictionary?</p>",
        "id": 482812145,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731800773
    },
    {
        "content": "<p>what <code>Html.lazy</code> does in Elm is:</p>\n<ol>\n<li>I call it passing a 1-arg function and also the argument</li>\n<li>If this is the first time <code>lazy</code> has been called with that function and that argument, it calls the function passing the argument, and returns the return value.</li>\n<li>However, it <em>also</em> writes down the function address, a clone of the argument, and a clone of the return value</li>\n<li>The next time it's called, if it sees the same function address and same argument, then it skips calling the function and returns the return value directly.</li>\n</ol>\n<p>with persistent data structures, it can do a \"shallow equality check\" of the cloned argument - that is, assuming it's a persistent data structure (where you can have a different outermost node, but inside it are all the same addresses as the one that was stored, so you don't have to recursively go traverse the entire data structure to see if it's equal), then you can have a very fast equality check as long as you're okay with false negatives (where it says they are unequal but actually if you traversed the entire data structure, you'd discover they were actually equal).</p>",
        "id": 482812809,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801539
    },
    {
        "content": "<p>with shallow equality, it doesn't really matter if the argument is big nested data structure because it's not traversing the whole thing</p>",
        "id": 482812844,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801601
    },
    {
        "content": "<p>e.g. in a long linked list (which is what Elm uses for <code>List</code>) you only compare the first elem</p>",
        "id": 482812925,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801623
    },
    {
        "content": "<p>and if they point to the same next elem, you're done; they're definitely equal</p>",
        "id": 482812946,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801636
    },
    {
        "content": "<p>if not, then they <em>might</em> not be equal, and rather than traversing the entire thing to find out, you just assume they're unequal and re-evaluate the function</p>",
        "id": 482812964,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801657
    },
    {
        "content": "<p>but \"shallow equality\" isn't a thing if you have opportunistic mutation instead of persistent data structures</p>",
        "id": 482812988,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801682
    },
    {
        "content": "<p>so our only options would be to deeply clone the entire arg, and then deeply compare for equality every time</p>",
        "id": 482812995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801695
    },
    {
        "content": "<p>which could potentially wipe out the performance improvement that <code>lazy</code> brings (especially because the happy path is potentially much more expensive), which is a scary prospect to me because <code>lazy</code> was by far the most effective tool I ever had for addressing performance problems in the Elm Architecture</p>",
        "id": 482813126,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801806
    },
    {
        "content": "<p>without that, I would be afraid that I'd get to a certain point where performance problems were just unsolvable</p>",
        "id": 482813137,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801826
    },
    {
        "content": "<p>maybe that wouldn't happen in practice, but the only way to really be sure is to build a big complicated application and find out the hard way, which is not something I'd personally be interested in <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 482813199,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731801858
    },
    {
        "content": "<p>Oh, I understand. Yeah, that does make it harder by default</p>",
        "id": 482825699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731815056
    },
    {
        "content": "<p>Would need to be more carefully applieds</p>",
        "id": 482825709,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731815072
    },
    {
        "content": "<p>May want to make persistent data structures with tags if this kinda structure is needed.</p>",
        "id": 482825860,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731815238
    },
    {
        "content": "<p>I think it just means we need to find a UI architecture that's a better fit for Roc</p>",
        "id": 482829653,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731819221
    },
    {
        "content": "<p>after all, the reason Evan named it \"The Elm Architecture\" was based on his view that it's the architecture that naturally emerges if you have Elm's design constraints, but Roc has some relevantly different design decisions <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 482829715,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731819271
    },
    {
        "content": "<p>Fair enough, but lazy is a much more general concept than TEA. Similar things are all over the place, like <code>@cache</code> in python</p>",
        "id": 482834977,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731824489
    },
    {
        "content": "<p>Also, TRA isn't as awesome of an acronym....</p>",
        "id": 482835035,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731824528
    },
    {
        "content": "<p>on the topic of TEA, I recently came across <a href=\"https://sutil.dev/#documentation-about-sutil\">https://sutil.dev/#documentation-about-sutil</a></p>\n<p>which is essentially svelte but F#, and has a optional module that \"recreates\" TEA</p>\n<p>I didn't dive deep but I think it's a better approach than the Elm one since we can't really do pointer equality</p>",
        "id": 482919459,
        "sender_full_name": "Pei Yang Ching",
        "timestamp": 1731897998
    }
]