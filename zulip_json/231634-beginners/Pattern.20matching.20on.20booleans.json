[
    {
        "content": "<p>I went down a rabbit hole trying to pattern match on booleans. I'm trying to implement a function that satisfies this type:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Missing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Missing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I started by doing the following:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"></span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm not surprised that I got the following error in hindsight since <code>Bool.false</code> is a value, not a tag:</p>\n<div class=\"codehilite\"><pre><span></span><code>── SYNTAX PROBLEM ──────────────────────────────────────────────────────────────\n\nThis pattern is malformed:\n\n8│          Present Bool.false -&gt; Present Bool.true\n                    ^^^^^^^^^^\n</code></pre></div>\n<p>It would be great to see a suggestion here on how to remedy this. Without guidance, I tried the next thing:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">False</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">False</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">True</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">True</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"></span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With the following error, I discover that <code>Bool</code> is an opaque type, so I can't use their tags in my module:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nThe branches of this when expression don&#39;t match the condition:\n\n6│&gt;        when value is\n7│           Missing -&gt; Present False\n8│           Present False -&gt; Present True\n9│           Present True -&gt; Missing\n\nThis value value is a:\n\n    [Missing, Present Bool]\n\nBut the branch patterns have type:\n\n    [Missing, Present [False, True]]\n\nThe branches must be cases of the when condition&#39;s type!\n</code></pre></div>\n<p>It would be great to see some guidance here on the proper way to pattern match booleans. I remembered that I can use <code>if</code> expressions in the pattern match, so I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">possibleValue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">possibleValue</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"></span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The error this time surprised me:</p>\n<div class=\"codehilite\"><pre><span></span><code>── UNSAFE PATTERN ──────────────────────────────────────────────────────────────\n\nThis when does not cover all the possibilities:\n\n6│&gt;        when possibleValue is\n7│&gt;          Missing -&gt; Present Bool.false\n8│&gt;          Present value if Bool.not value -&gt; Present Bool.true\n9│&gt;          Present value if value -&gt; Missing\n\nOther possibilities include:\n\n    Present _    (note the lack of an if clause)\n\nI would have to crash if I saw one of those! Add branches for them!\n</code></pre></div>\n<p>Logically, all the cases are covered, so I wonder if the compiler can't possibly determine that this would work in the general case.</p>\n<p>Is there a way that I can pattern match on booleans, or will I have to follow the compilers advice and just ignore the content of <code>Present</code> in the third branch?</p>",
        "id": 303171942,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665349469
    },
    {
        "content": "<p>I believe that's an upcoming feature/implementation!</p>",
        "id": 303172098,
        "sender_full_name": "jan kili",
        "timestamp": 1665349679
    },
    {
        "content": "<p>Nice! Is there a Zulip topic or a GitHub issue I can follow?</p>",
        "id": 303172192,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665349768
    },
    {
        "content": "<p>I'm not sure, but I can find when I was told this</p>",
        "id": 303172410,
        "sender_full_name": "jan kili",
        "timestamp": 1665350025
    },
    {
        "content": "<p><a href=\"#narrow/stream/231634-beginners/topic/Am.20I.20doing.20something.20silly.3F/near/302380580\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/Am.20I.20doing.20something.20silly.3F/near/302380580</a></p>",
        "id": 303172583,
        "sender_full_name": "jan kili",
        "timestamp": 1665350177
    },
    {
        "content": "<p>You can extract the Boolean variable out of the pattern match, and then do a separate <code>if</code> expression in that branch.</p>",
        "id": 303202865,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665382919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303203188,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665383160
    },
    {
        "content": "<p>Just ran into this. Looks like it's tracked here: <a href=\"https://github.com/roc-lang/roc/issues/4152\">https://github.com/roc-lang/roc/issues/4152</a></p>\n<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> do you have any thoughts following <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> 's comment there?</p>\n<p>This (or something like it) would be really nice to have!</p>",
        "id": 326275007,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675738406
    },
    {
        "content": "<p>it's a great point! I updated the description based on Ayaz's comment</p>",
        "id": 326275997,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675739302
    },
    {
        "content": "<p>I think there's a pretty clear answer in this case <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 326275998,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675739308
    },
    {
        "content": "<p>That seems like quite a shame that booleans are not considered exhaustive!</p>",
        "id": 326277150,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675740476
    },
    {
        "content": "<p>Why are bools behind an opaque type in the first place? It would seem obvious to me that you'd want bool to just be <code>Bool : [True, False]</code></p>",
        "id": 326277710,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675740885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/231634-beginners/topic/Pattern.20matching.20on.20booleans/near/326277150\">said</a>:</p>\n<blockquote>\n<p>That seems like quite a shame that booleans are not considered exhaustive!</p>\n</blockquote>\n<p>I think that's true in the abstract sense, but I've spent a lot of time writing with languages that support this and the total number of times I can recall it ever coming up is 0 <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 326277772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675740961
    },
    {
        "content": "<p>bools used to be defined exactly that way!</p>",
        "id": 326277841,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675740998
    },
    {
        "content": "<p>here's the background on why we ended up changing it: <a href=\"https://docs.google.com/document/d/1a51n7eIEbPjCWnGaL-pWbZBsRfi55GVQwIdPQTUu49Q/edit\">https://docs.google.com/document/d/1a51n7eIEbPjCWnGaL-pWbZBsRfi55GVQwIdPQTUu49Q/edit</a></p>",
        "id": 326277860,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741015
    },
    {
        "content": "<blockquote>\n<p>This is the but I've spent a lot of time writing with languages that support this and the total number of times I can recall it ever coming up is 0 <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>Interesting! But judging from this thread, I'm the third person here to be surprised by this.</p>",
        "id": 326277909,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741063
    },
    {
        "content": "<p>an option we always have is to make <code>true</code> and <code>false</code> be language keywords</p>",
        "id": 326277967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741094
    },
    {
        "content": "<p>which desugar to <code>Bool.true</code> and <code>Bool.false</code>, plus have special exhaustiveness checking properties</p>",
        "id": 326277986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741126
    },
    {
        "content": "<p>but as noted in that document, I'd rather continue running the experiment of fully-qualified before considering that - because we all know what <code>true</code> and <code>false</code> feel like, but there's no precedent I'm aware of for what <code>Bool.true</code> and <code>Bool.false</code> feel like!</p>",
        "id": 326278041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741184
    },
    {
        "content": "<p>this is definitely a point worth considering in that analysis, but I don't think it crosses the line of \"ok, experiment over, let's go with <code>true</code> and <code>false</code> keywords\" at this point</p>",
        "id": 326278129,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741209
    },
    {
        "content": "<p>I feel like there's maybe also room for \"opaque type, but with some 'exhaustive' annotations sprinkled around\"...</p>",
        "id": 326278160,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741254
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> hm, at that point what would be the difference between it just not being opaque?</p>",
        "id": 326278208,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741308
    },
    {
        "content": "<p>I guess that it's nominal</p>",
        "id": 326278212,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741317
    },
    {
        "content": "<p>Yeah; it avoids the downsides outlined in the doc you linked</p>",
        "id": 326278262,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741331
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>## The boolean true value.\ntrue : Bool\ntrue = @Bool True\n\n## The boolean false value.\nfalse : Bool\nfalse = @Bool False\n\n@require_exhaustive (Bool.true, Bool.false)\n</code></pre></div>\n<p>(syntax pending some bikeshedding...)</p>",
        "id": 326278293,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741372
    },
    {
        "content": "<p>interesting, although I think for a language feature like that we'd want more motivating use cases than just <code>Bool</code> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 326278295,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741375
    },
    {
        "content": "<p>Fair :)</p>",
        "id": 326278304,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741386
    },
    {
        "content": "<p>Could be something _only_ allowed in the standard library for now</p>",
        "id": 326278311,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741400
    },
    {
        "content": "<p>I think that could be confusing though - fully-qualified pattern matching works one way for every other type, and then a different way for <code>Bool</code></p>",
        "id": 326278323,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741429
    },
    {
        "content": "<p>True true</p>",
        "id": 326278380,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741458
    },
    {
        "content": "<p>pun intended? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 326278398,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741479
    },
    {
        "content": "<p>Haha actually no - but that would have been good</p>",
        "id": 326278409,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741501
    },
    {
        "content": "<p>Ok - so on the assumption that we've implemented pattern matching on qualified constants, one thing that would seem weird to me is: why can I not match on constants in the current module?</p>",
        "id": 326278615,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741710
    },
    {
        "content": "<p>you can!</p>",
        "id": 326278657,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741758
    },
    {
        "content": "<p>you can already qualify with the current module</p>",
        "id": 326278661,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741763
    },
    {
        "content": "<p>e.g. if I'm in <code>Foo</code> I can write <code>Foo.bar</code></p>",
        "id": 326278665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741769
    },
    {
        "content": "<p>Oh wow</p>",
        "id": 326278671,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741780
    },
    {
        "content": "<p>that was actually designed to be supported exactly for this</p>",
        "id": 326278674,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741784
    },
    {
        "content": "<p>back in 2019 haha</p>",
        "id": 326278676,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741788
    },
    {
        "content": "<p>not for bool - it was that I always wanted to pattern match on constants like HTTP status codes</p>",
        "id": 326278687,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741805
    },
    {
        "content": "<p>in other languages</p>",
        "id": 326278698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741811
    },
    {
        "content": "<p>and it was always impossible because in the current module they're lowercase and therefore interpreted as identifiers in patterns</p>",
        "id": 326278749,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741827
    },
    {
        "content": "<p>Rust solves this by requiring constnats to be <code>SCREAMING_SNAKE_CASE</code> but I don't want to require that for obvious reasons <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 326278781,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741843
    },
    {
        "content": "<p>Rust isn't totally immune - if you don't have a constant named <code>SCREAMING_SNAKE_CASE</code> in scope, it becomes a bound variable</p>",
        "id": 326278839,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741893
    },
    {
        "content": "<p>I got bit by that in some production code a while back</p>",
        "id": 326278847,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741908
    },
    {
        "content": "<p>ouch</p>",
        "id": 326278913,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741948
    },
    {
        "content": "<p>well this would be immune to that fortunately haha!</p>",
        "id": 326278928,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675741966
    },
    {
        "content": "<p>Anyway; I like this design</p>",
        "id": 326278933,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741973
    },
    {
        "content": "<p>:hat_tip:</p>",
        "id": 326278938,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1675741978
    },
    {
        "content": "<p>awesome! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 326279048,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675742092
    },
    {
        "content": "<blockquote>\n<p>why can I not match on constants in the current module?</p>\n</blockquote>\n<p>Should this work? I think I misunderstood this feature. </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"nc\">Thing</span><span class=\"w\"> </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n\n<span class=\"n\">abc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Thing</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"Three\"</span>\n<span class=\"w\">        </span><span class=\"nc\">Thing</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"Four\"</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"Other\"</span>\n\n<span class=\"n\">expect</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">\"Three\"</span>\n</code></pre></div>",
        "id": 326296238,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1675754881
    },
    {
        "content": "<p>Sounds like it's intended to work, yes. What are you seeing?</p>",
        "id": 326332152,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1675767133
    },
    {
        "content": "<p>that's the design, but pattern matching on qualified things hasn't been implemented yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 326357146,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675775021
    }
]