[
    {
        "content": "<p>How will roc handle functions without arguments? <br>\n(I'm considering this in the context of generating automated library bindings)</p>\n<p>Will this be the only way?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 329664945,
        "sender_full_name": "Niclas Overby",
        "timestamp": 1677144084
    },
    {
        "content": "<p>You can just write</p>\n<div class=\"codehilite\"><pre><span></span><code>f = 1\n</code></pre></div>\n<p>It can be thought of as a function that always returns 1. But if the goal is to prevent the value from being eagerly computed (maybe the value is expensive to compute) then yes you'd write <code>f = \\{} -&gt; 1</code></p>",
        "id": 329670799,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1677145774
    },
    {
        "content": "<p>Yeah, in languages without side effects, the concept of a function without arguments is not as useful as it is in imperative languages. Functions always return the same value for the same arguments. So if it has no arguments, it's the same as a constant!</p>",
        "id": 329685310,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677149620
    },
    {
        "content": "<p>Actually right now there's a key difference between a function and a constant, in that the function is allowed to be polymorphic but the constant isn't. That leads to the current weird syntax for creating new collections - e.g. <code>myDict = Dict.empty {}</code>. The <code>{}</code> is not a dict literal or anything - that's just an empty record, there for the purposes of turning what would have been a zero argument function (aka constant) into a one argument function.</p>\n<p>In that respect, a zero-argument function is logically very similar to a function that takes an argument but ignores it.</p>",
        "id": 329767535,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1677170577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20will.20roc.20handle.20functions.20without.20arguments.3F/near/329767535\">said</a>:</p>\n<blockquote>\n<p>Actually right now there's a key difference between a function and a constant, in that the function is allowed to be polymorphic but the constant isn't.</p>\n</blockquote>\n<p>So this means it's not possible to write</p>\n<div class=\"codehilite\"><pre><span></span><code>a = 1\n\nb : Int64\nb = a\n\nc : Float64\nc = a\n</code></pre></div>\n<p>?</p>",
        "id": 329768560,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1677170845
    },
    {
        "content": "<p>the rule is</p>\n<ul>\n<li>integer literals and syntactic functions (things that look like <code>f = \\x -&gt; x</code>) are allowed to be polymorphic when assigned to a variable</li>\n<li>everything else isn't</li>\n</ul>\n<p>so in the case above, that would actually work! but for example, these two wouldn't</p>\n<div class=\"codehilite\"><pre><span></span><code>a = 1 + 2\n\nb : I64\nb = a\n\nc : F64\nc = a\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>a = A\n\nb : [A, B]\nb = a\n\nc : [A, C]\nc = a\n</code></pre></div>",
        "id": 329768974,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677170952
    },
    {
        "content": "<p><a href=\"https://rwx.notion.site/Let-generalization-Let-s-not-742a3ab23ff742619129dcc848a271cf\">here's the motivation</a></p>",
        "id": 329769083,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677170983
    },
    {
        "content": "<p>also, the plan is to loosen the restriction in the future. The infrastructure needed to do so just isn't there yet.</p>",
        "id": 329769364,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677171040
    }
]