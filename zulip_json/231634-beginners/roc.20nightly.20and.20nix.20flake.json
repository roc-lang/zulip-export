[
    {
        "content": "<p>I am trying to import roc language in a small template to get started with roc for side project in the weekend,<br>\nbut I am not able to make it working.</p>\n<p>So my current error is the following one</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  nix-roc git:(main) nix develop\nerror:\n       … while calling the &#39;derivationStrict&#39; builtin\n\n         at //builtin/derivation.nix:9:12: (source not available)\n\n       … while evaluating derivation &#39;nix-shell&#39;\n         whose name attribute is located at /nix/store/z5gdynjj3h25xvdqpxski061qcvrpdik-source/pkgs/stdenv/generic/make-derivation.nix:300:7\n\n       … while evaluating attribute &#39;buildInputs&#39; of derivation &#39;nix-shell&#39;\n\n         at /nix/store/z5gdynjj3h25xvdqpxski061qcvrpdik-source/pkgs/stdenv/generic/make-derivation.nix:347:7:\n\n          346|       depsHostHost                = lib.elemAt (lib.elemAt dependencies 1) 0;\n          347|       buildInputs                 = lib.elemAt (lib.elemAt dependencies 1) 1;\n             |       ^\n          348|       depsTargetTarget            = lib.elemAt (lib.elemAt dependencies 2) 0;\n\n       error: Dependency is not of a valid type: element 2 of buildInputs for nix-shell\n</code></pre></div>\n<p>looks like that I am importing in the wrong way the roc-lang, but I do not know how to fix the problem (maybe because I am also new with nix)<br>\nThis is my flake.nix <a href=\"https://github.com/vincenzopalazzo/nix-roc/blob/main/flake.nix\">https://github.com/vincenzopalazzo/nix-roc/blob/main/flake.nix</a></p>",
        "id": 388676493,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693649989
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"529266\">@Vincenzo Palazzo (vincenzopalazzo)</span>,<br>\nYou probably want to use the nightly binary release as described <a href=\"https://github.com/roc-lang/roc/tree/main/getting_started#installation\">here</a>, instead of trying to make a new flake. I'm happy to help with any further questions :)</p>",
        "id": 388676946,
        "sender_full_name": "Anton",
        "timestamp": 1693650281
    },
    {
        "content": "<p>I see it and this procedure works, but there is no way to get it working with flake?</p>",
        "id": 388677059,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693650356
    },
    {
        "content": "<p>You can get it to work with the flake but we don't have a release of roc on nix yet, so the release will have to be built from source which will take a couple of minutes, these are the steps:</p>\n<div class=\"codehilite\"><pre><span></span><code>git clone https://github.com/roc-lang/roc.git\ncd roc\nnix develop\ncargo build --release --bin roc\n</code></pre></div>\n<p>Once that is done you'll be able to run roc like this <code>./taret/release/roc examples/helloWorld.roc</code></p>",
        "id": 388677497,
        "sender_full_name": "Anton",
        "timestamp": 1693650665
    },
    {
        "content": "<p>May I ask why you would like to use the flake?</p>",
        "id": 388677601,
        "sender_full_name": "Anton",
        "timestamp": 1693650724
    },
    {
        "content": "<p><code>nix develop</code> will use <a href=\"https://github.com/roc-lang/roc/blob/main/flake.nix\">this file</a> btw</p>",
        "id": 388677675,
        "sender_full_name": "Anton",
        "timestamp": 1693650777
    },
    {
        "content": "<p>Mh still confused sorry! It is not possible fetch roc from the tar with flake?  Like I did in here <a href=\"https://raw.githubusercontent.com/vincenzopalazzo/nix-roc/main/flake.nix\">https://raw.githubusercontent.com/vincenzopalazzo/nix-roc/main/flake.nix</a></p>",
        "id": 388678762,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693651536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/roc.20nightly.20and.20nix.20flake/near/388677601\">said</a>:</p>\n<blockquote>\n<p>May I ask why you would like to use the flake?</p>\n</blockquote>\n<p>No particular reason, I want just set up a nix conf that I will not need to do the install step anymore :)</p>",
        "id": 388678855,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693651587
    },
    {
        "content": "<p>So I can boostrap the roc conf plus my conf</p>",
        "id": 388678894,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693651607
    },
    {
        "content": "<p>Oh right, I understand now. Let me give that a try.</p>",
        "id": 388679147,
        "sender_full_name": "Anton",
        "timestamp": 1693651783
    },
    {
        "content": "<p>I'm going to be afk for lunch but I will continue after.</p>",
        "id": 388679768,
        "sender_full_name": "Anton",
        "timestamp": 1693652226
    },
    {
        "content": "<p>Thanks! I am trying another solution too now</p>",
        "id": 388680081,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693652470
    },
    {
        "content": "<p>Have a nice lunch</p>",
        "id": 388680104,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693652488
    },
    {
        "content": "<p>I thought starting with the default.nix file was easier so I did that one first:</p>\n<div class=\"codehilite\"><pre><span></span><code>let\n  pkgs = import &lt;nixpkgs&gt; {};\n\n  rocSrc = pkgs.fetchFromGitHub {\n    owner = &quot;roc-lang&quot;;\n    repo = &quot;roc&quot;;\n    rev = &quot;default-nix-env-var&quot;;\n    sha256 = &quot;sha256-nxGT2m0ftDslsgU8I2GZ72uPvtHEBE5wN9mJNu8X5Eo=&quot;;\n  };\n\n  roc = import rocSrc {};\n\n\nin pkgs.mkShell {\n  buildInputs = [\n    pkgs.just\n    roc\n  ];\n}\n</code></pre></div>\n<p>I am using a specific branch here because I had to make a small fix that will be merged later on.<br>\nYou can activate this shell using the <code>nix-shell</code> command. This will still build roc from source though, if you share your OS and architecture I'll see if I can make it work with a nightly release. Once that works I'll try to convert the default.nix file to a flake.nix.</p>",
        "id": 388689787,
        "sender_full_name": "Anton",
        "timestamp": 1693659071
    },
    {
        "content": "<p>I am using arch linux</p>",
        "id": 388698061,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693665012
    },
    {
        "content": "<p>on a x86</p>",
        "id": 388698067,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693665017
    },
    {
        "content": "<p>Alright, this works:</p>\n<div class=\"codehilite\"><pre><span></span><code>let\n  pkgs = import &lt;nixpkgs&gt; {};\n\n  # Fetch and extract the nightly tar\n  rocNightlyTar = pkgs.fetchurl {\n    url = &quot;https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-linux_x86_64-latest.tar.gz&quot;;\n    sha256 = &quot;sha256-3RDVU+sMFVsThviZAI76DKn07fb8j6k8qGlBjUtby8o=&quot;;\n  };\n\n  rocNightly = pkgs.stdenv.mkDerivation {\n    name = &quot;roc&quot;;\n    src = rocNightlyTar;\n    installPhase = &#39;&#39;\n      mkdir -p $out\n      cp -R * $out/\n    &#39;&#39;;\n  };\n\n\nin pkgs.mkShell {\n  buildInputs = [\n    pkgs.just\n  ];\n\n  # make the `roc` command work\n  shellHook = &#39;&#39;\n    export PATH=$PATH:${rocNightly}\n  &#39;&#39;;\n}\n</code></pre></div>\n<p>Now I'm going to try converting that to a flake</p>",
        "id": 388707620,
        "sender_full_name": "Anton",
        "timestamp": 1693670846
    },
    {
        "content": "<p>This is the flake:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  description = &quot;Devshell using the roc nightly.&quot;;\n\n  inputs = {\n    nixpkgs.url = &quot;github:nixos/nixpkgs/nixos-unstable&quot;;\n    # to easily make configs for multiple architectures\n    flake-utils.url = &quot;github:numtide/flake-utils&quot;;\n  };\n\n  outputs = { self, nixpkgs, flake-utils }:\n    let\n      supportedSystems = [ &quot;x86_64-linux&quot; ];\n    in\n      flake-utils.lib.eachSystem supportedSystems (system:\n        let\n            pkgs = import nixpkgs {\n              inherit system;\n            };\n\n            rocNightlyTar = pkgs.fetchurl {\n                url = &quot;https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-linux_x86_64-latest.tar.gz&quot;;\n                sha256 = &quot;sha256-3RDVU+sMFVsThviZAI76DKn07fb8j6k8qGlBjUtby8o=&quot;;\n            };\n\n            rocNightly = pkgs.stdenv.mkDerivation {\n                name = &quot;roc&quot;;\n                src = rocNightlyTar;\n                installPhase = &#39;&#39;\n                mkdir -p $out\n                cp -R * $out/\n                &#39;&#39;;\n            };\n        in\n            {\n                devShell = pkgs.mkShell {\n                    packages = [\n                        pkgs.just\n                        ];\n\n                    shellHook = &#39;&#39;export PATH=$PATH:${rocNightly}&#39;&#39;;\n                };\n            });\n}\n</code></pre></div>\n<p>The repl does not work with the flake however because we do some dynamic library stuff for that. This seems hard to fix, so I recommend sticking with the earlier default.nix file.</p>\n<p>Here is a bash script to update the sha in the default.nix for when the nightly is updated:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/env bash</span>\n\n<span class=\"c1\"># https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/</span>\n<span class=\"nb\">set</span><span class=\"w\"> </span>-euxo<span class=\"w\"> </span>pipefail\n\n<span class=\"c1\"># URL to fetch and get the sha256 hash from</span>\n<span class=\"nv\">URL</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-linux_x86_64-latest.tar.gz&quot;</span>\n\n<span class=\"c1\"># Fetch the sha256 hash using nix-prefetch-url</span>\n<span class=\"nv\">SHA256</span><span class=\"o\">=</span><span class=\"k\">$(</span>nix-prefetch-url<span class=\"w\"> </span>--type<span class=\"w\"> </span>sha256<span class=\"w\"> </span><span class=\"s2\">&quot;</span><span class=\"nv\">$URL</span><span class=\"s2\">&quot;</span><span class=\"k\">)</span>\n\n<span class=\"c1\"># Check if we successfully got the hash</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-z<span class=\"w\"> </span><span class=\"s2\">&quot;</span><span class=\"nv\">$SHA256</span><span class=\"s2\">&quot;</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">&quot;Failed to fetch SHA256.&quot;</span>\n<span class=\"w\">    </span><span class=\"nb\">exit</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"k\">fi</span>\n\n<span class=\"c1\"># Update the sha256 in the default.nix file</span>\n<span class=\"c1\"># This time, we are replacing the entire sha256 value with the new one, without the &quot;sha256-&quot; prefix.</span>\nsed<span class=\"w\"> </span>-i<span class=\"w\"> </span><span class=\"s2\">&quot;s|sha256-.*\\&quot;|</span><span class=\"si\">${</span><span class=\"nv\">SHA256</span><span class=\"si\">}</span><span class=\"s2\">\\&quot;|&quot;</span><span class=\"w\"> </span>default.nix\n\n<span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">&quot;Updated sha256 in default.nix to </span><span class=\"nv\">$SHA256</span><span class=\"s2\">.&quot;</span>\n</code></pre></div>",
        "id": 388713902,
        "sender_full_name": "Anton",
        "timestamp": 1693675632
    },
    {
        "content": "<p>Thanks is is really magic hahah</p>",
        "id": 388718065,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693679406
    },
    {
        "content": "<p>I will take a look</p>",
        "id": 388718080,
        "sender_full_name": "Vincenzo Palazzo (vincenzopalazzo)",
        "timestamp": 1693679412
    },
    {
        "content": "<p>I got the same error as Vincenzo when trying to use Roc's flake as an input to my flake.<br>\nI wanted to keep the simple <code>inputs</code> style that works with <code>nix flake update</code> and I don't mind the build time, here's what works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code>  inputs = {\n    flake-utils.url = &quot;github:numtide/flake-utils&quot;;\n    roc.url = &quot;github:roc-lang/roc&quot;;\n  };\n\n  outputs = { self, nixpkgs, flake-utils, roc }:\n    let supportedSystems = with flake-utils.lib.system; [ x86_64-linux ];\n\n    in flake-utils.lib.eachSystem supportedSystems (system:\n      let\n        pkgs = nixpkgs.legacyPackages.${system};\n        inherit (pkgs) lib stdenv callPackage;\n      in {\n        devShells.default = pkgs.mkShell {\n          name = &quot;devshell&quot;;\n          buildInputs = [ roc.packages.${system}.default ];\n        };\n      });\n}\n</code></pre></div>\n<p>The key thing is I couldn't just use <code>buildInputs = [ roc ]</code>, I had to use <code>nix flake show</code> to find <code>buildInputs = [ roc.packages.${system}.default ];</code>.</p>",
        "id": 389083860,
        "sender_full_name": "RKB",
        "timestamp": 1693879542
    }
]