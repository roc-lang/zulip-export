[
    {
        "content": "<p>Hey everyone. I've been revisiting roc a bit in preparation for doing AoC, and comparing the experience with my previous attempts at doing AoC in Haskell. I came across a pattern that's bothering me a bit. For 2022 Day 1, the Haskell solution is</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kr\">do</span>\n<span class=\"w\">  </span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"w\"> </span><span class=\"s\">\"1.txt\"</span>\n<span class=\"w\">  </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"n\">elves</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foldl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">splitOn</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"n\">txt</span>\n<span class=\"w\">  </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">maximum</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"n\">elves</span><span class=\"w\"> </span><span class=\"c1\">-- part 1</span>\n<span class=\"w\">  </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">reverse</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">sort</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"n\">elves</span><span class=\"w\"> </span><span class=\"c1\">-- part 2</span>\n</code></pre></div>\n<p>and in roc, just part one:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">compute</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">in</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">y</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"nv\">compute</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">in</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">max</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n</code></pre></div>\n<p>Now, being longer, more explicit, etc. is not necessarily bad, but what is annoying me a bit is the <code>\\in -&gt; in |&gt; function_chain</code> pattern, especially in the <code>List.map</code>s. Is there a better way of doing this? Or is this just the trade-off for not having partial application? The reason it's bothering me (just a bit though) is because the function chaining / pipe <em>is already</em> partial application ... Why can't I have it for the first instance as well? Or, slightly different question, would it be possible to have some syntax sugar for starting a pipeline point-free style? Or should I just suck it up and accept <code>\\in -&gt; in</code>?</p>",
        "id": 484934779,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1732804503
    },
    {
        "content": "<p>How about simply</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">compute</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">max</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n</code></pre></div>\n<p>and for where there is ambiguity</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n</code></pre></div>\n<p>or pehaps even</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"err\">$</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"err\">$</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 484938771,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1732805770
    },
    {
        "content": "<blockquote>\n<p>Or should I just suck it up and accept <code>\\in -&gt; in</code>?</p>\n</blockquote>\n<p>This has come up before, in general we like the current  verbosity and simplicity trade-off. </p>\n<p>There have been <a href=\"#narrow/channel/304641-ideas/topic/static.20dispatch.20-.20proposal/near/484088001\">proposals for syntax sugar</a> but they have not found wide appeal.</p>\n<p><a href=\"#narrow/channel/304641-ideas/topic/static.20dispatch.20-.20proposal/near/481417068\">This proposal</a> should cut down a lot on the general verbosity but not the lambda verbosity</p>",
        "id": 484940008,
        "sender_full_name": "Anton",
        "timestamp": 1732806135
    },
    {
        "content": "<p>Thanks for the links!</p>",
        "id": 484940452,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1732806263
    },
    {
        "content": "<p>the static dispatch proposal would let you write those functions like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"nf\">.</span><span class=\"nv\">trim</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"p\">(</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"p\">()</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n\n<span class=\"nv\">compute</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"p\">(</span><span class=\"nf\">.</span><span class=\"nv\">sum</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"p\">()</span>\n</code></pre></div>",
        "id": 484942570,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732806928
    },
    {
        "content": "<p>but personally I think I'd choose to put some lambdas in there just to give things some more names</p>",
        "id": 484942719,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732806967
    },
    {
        "content": "<p>I'll be honest and say I quite like the Haskell style calling with whitespace for the minimisation of parentheses cluttering the visual experience. But the snippet you posted is quite similar to what I came up with, if we remove (most of) the parentheses and replace <code>.</code> with <code>|&gt;</code>. I mean, <code>compute = .map(...)</code> is similar to <code>compute = |&gt; map (...)</code>.</p>\n<p>(I also worry slightly that changing the syntax style specifically to be familiar could result in a regression to the mean --- it might be worth standing out. But that's just my two cents.)</p>",
        "id": 484945805,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1732807942
    },
    {
        "content": "<p>Static dispatch includes the <code>.map(.trim())</code>? I thought that was a potential extension and not generally accepted.</p>",
        "id": 484957869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732812350
    },
    {
        "content": "<p>Personally, I really hate the syntax even if the idea is reasonable.</p>",
        "id": 484957988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732812395
    },
    {
        "content": "<p>We done have partial application. Even if we did, calling a dot syntax function without a root just looks like a bug.</p>",
        "id": 484958057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732812435
    },
    {
        "content": "<p>yeah sorry - I should have said that the proposal would let you write it like that</p>",
        "id": 484963526,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732814672
    },
    {
        "content": "<p>it's not essential and I'm not assuming it's a given</p>",
        "id": 484963575,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732814703
    },
    {
        "content": "<p>Is there already a yak-shaving thread for that part of the proposal? I don't want to initiate an undue flood of opinions</p>",
        "id": 484963858,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732814837
    },
    {
        "content": "<p>I don't think there is, but seems fine to start one <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 484965400,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732815617
    },
    {
        "content": "<p>Yeah, shouldn't take over this thread with opinions on the static dispatch proposal...sorry</p>",
        "id": 484966237,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732816060
    },
    {
        "content": "<p>fwiw I've been finding it fascinating and it is actually related to my initial question. But I'm pretty much happy with how my code looks at the moment (what I was actually \"annoyed\" with was before I cleaned up the code a bit). But anyway, I appreciate everyone's input.</p>",
        "id": 484970214,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1732818252
    }
]