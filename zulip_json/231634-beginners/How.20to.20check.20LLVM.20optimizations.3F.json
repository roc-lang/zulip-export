[
    {
        "content": "<p>I want to experiment a little with how the LLVM IR which is generated by the Roc compiler is optimized further by LLVM. (To e.g. see if different ways of writing the same program might be treated differently by the compiler passes).</p>\n<p>How to set this up?</p>",
        "id": 289880360,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658058905
    },
    {
        "content": "<p>you can print the llvm to a file earlier in the process</p>",
        "id": 289880599,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658059242
    },
    {
        "content": "<p>Is the LLVM which is exported using <code>--debug</code> usable? Or is that a bad idea?</p>",
        "id": 289880877,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658059639
    },
    {
        "content": "<p>yes it's fine to use</p>",
        "id": 289882393,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658061615
    },
    {
        "content": "<p>Fun! LLVM is able to compile the following down (on the hello-world platform in this case):</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">outcome</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">123456789</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">outcome</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nv\">valStr</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s\">\"The result of the addition was successful and is \\(valStr)\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s\">\"Calculating the result of addition has failed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"></span>\n\n<span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Nothing</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Nothing</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Nothing</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rhs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"nv\">lhs</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"nv\">rhs</span><span class=\"w\"></span>\n\n<span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">funRes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">valRes</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">funRes</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">valRes</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">roc__mainForHost_1_exposed_generic:</span><span class=\"w\">     </span><span class=\"c1\"># @roc__mainForHost_1_exposed_generic</span>\n<span class=\"w\">        </span><span class=\"nf\">lea</span><span class=\"w\">     </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rip</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"no\">.L_str_literal_13338901839589407859</span><span class=\"err\">+</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">mov</span><span class=\"w\">     </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rdi</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">vmovaps</span><span class=\"w\"> </span><span class=\"no\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">xmmword</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rip</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"no\">.LCPI1_0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\"># xmm0 = [46,46]</span>\n<span class=\"w\">        </span><span class=\"nf\">vmovups</span><span class=\"w\"> </span><span class=\"no\">xmmword</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rdi</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">ret</span><span class=\"w\"></span>\n<span class=\"nl\">roc__mainForHost_1_exposed:</span><span class=\"w\">             </span><span class=\"c1\"># @roc__mainForHost_1_exposed</span>\n<span class=\"w\">        </span><span class=\"nf\">mov</span><span class=\"w\">     </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdi</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">mov</span><span class=\"w\">     </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rdi</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">46</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">ret</span><span class=\"w\"></span>\n<span class=\"nl\">roc__mainForHost_size:</span><span class=\"w\">                  </span><span class=\"c1\"># @roc__mainForHost_size</span>\n<span class=\"w\">        </span><span class=\"nf\">mov</span><span class=\"w\">     </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">ret</span><span class=\"w\"></span>\n<span class=\"nl\">.L_str_literal_13338901839589407859:</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"na\">.ascii</span><span class=\"w\">  </span><span class=\"s\">\"\\000\\000\\000\\000\\000\\000\\000\\000Calculating the result of addition has failed\\n\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>i.e. all function calls are optimized away. LLVM sees that we pass an <code>Err Nothing</code> and so the only thing that is left in assembly is copying the string literal to pass back to the hello-world platform.</p>",
        "id": 289883738,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658063356
    },
    {
        "content": "<p>For some reason, there also is a definition of <code>__muloti4</code> included in the resulting assembly. (This is software support for \"multiplying two 128-bit signed integers with overflow checking\") although to my knowledge 128bit numbers are not used anywhere in the code.</p>",
        "id": 289883861,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658063475
    },
    {
        "content": "<p>c.f. <a href=\"https://llvm.godbolt.org/z/qsWfPrGxP\">Compiler Explorer</a></p>",
        "id": 289883872,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658063491
    },
    {
        "content": "<p>Not that big of a deal of course, since when linking it together with the platform code, superfluous symbols will disappear from the resulting binary.</p>",
        "id": 289884031,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658063624
    },
    {
        "content": "<p>we link that in explicitly for reasons I have forgotten</p>",
        "id": 289884110,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658063674
    },
    {
        "content": "<p>but it is required</p>",
        "id": 289884117,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658063678
    },
    {
        "content": "<p>Curious!</p>",
        "id": 289884403,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658063967
    },
    {
        "content": "<p>If you replace the line </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">outcome</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">123456789</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">outcome</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">123456789</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then the assembly is more involved. <br>\n Maybe that is allocation + refcounting ceremony because the resulting strings are too large to allocate on the stack(?) (c.f. <a href=\"https://llvm.godbolt.org/z/s7edaEqvW\">Compiler Explorer</a>, go to the definition of <code>_mainForHost_67abdd721024f0ff4eb3f4c2fc13bc5bad42db7851d456d88d203d15aaa450</code>)</p>\n<p>But the more important point is that there is no difference in resulting assembly between </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">outcome</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">123456789</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">outcome</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">123456789</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>. The whole calculation is inlined and constant-folded away! <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 289884727,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658064299
    }
]