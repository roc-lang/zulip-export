[
    {
        "content": "<p>Hi. I could not find the algorithmic complexity of List operations like append, prepend, concat etc mentioned in the docs. I tried going through the code but I was unable to find the implementations. Can someone tell me what they are?</p>",
        "id": 438162794,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715496153
    },
    {
        "content": "<p>It'll be great if it is mentioned in the docs. Specifically, I'm wondering if List prepend and append are O(1) or O(n).</p>",
        "id": 438162823,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715496202
    },
    {
        "content": "<p>After some digging, I found the implementation at <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/bitcode/src/list.zig\">https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/bitcode/src/list.zig</a>. IIUC, append and prepend at O(n) and concat is O(m+n). Please correct me if I'm wrong.</p>",
        "id": 438164026,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715497594
    },
    {
        "content": "<p>List is a flat array</p>",
        "id": 438175252,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715509802
    },
    {
        "content": "<p>So same as a c++ vector or java arraylist</p>",
        "id": 438175307,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715509844
    },
    {
        "content": "<p>Append 1<br>\nPrepend n<br>\nConcat of m and n list is n</p>",
        "id": 438175345,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715509920
    },
    {
        "content": "<p>The big caveat is uniqueness. Due to immutability requirements, can lead to O(n) coping</p>",
        "id": 438175432,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715509987
    },
    {
        "content": "<p>Get is 1<br>\nslicing/sublist is 1</p>",
        "id": 438175460,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715510033
    },
    {
        "content": "<p>I haven't written any Zig, but I get why you would think that, glancing at the code you linked. </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">listAppendUnsafe</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">list</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">element</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Opaque</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">element_width</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">old_length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">bytes</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">source</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">old_length</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">element_width</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">@memcpy</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">element_width</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">element_width</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>IIUC, the memcpy only copies 1 element-width worth of bytes into the list which has reserved space for it, not a whole list, even though I associate memcpy with copying big regions.</p>",
        "id": 438175750,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1715510297
    },
    {
        "content": "<p>Yep</p>",
        "id": 438175902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715510494
    },
    {
        "content": "<p>Though we actually should change this interface some for more perf....but that is a micro benchmark detail.</p>",
        "id": 438175940,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715510523
    },
    {
        "content": "<p>Thanks. Is it possible to add this information to the docs?</p>",
        "id": 438177757,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715512541
    },
    {
        "content": "<p>I think it would be useful if the docs for the builtins would have information on Lists being represented as arrays that resize when needed, not linked lists. (This would imply having an O(1) append and O(n) prepend) . This would be useful, to someone coming from another functional language, since they likely assume the implementation to be a linked list, making their code have a lot of prepending. It could go to the begining of the docs, similarly how Str has a section on utf8 there.</p>",
        "id": 438189683,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1715525343
    },
    {
        "content": "<p>Is there a plan for a linked list data structure?</p>",
        "id": 438189843,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715525512
    },
    {
        "content": "<p>Nope</p>",
        "id": 438190188,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715525788
    },
    {
        "content": "<p>Though it is easy to make with tags</p>",
        "id": 438190195,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715525794
    },
    {
        "content": "<p>Generally linked lists are quite bad for performance even when they win on time complexity.</p>",
        "id": 438190217,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715525824
    },
    {
        "content": "<p>They are exceptional pessimistic on modern hardware unlike flat arrays</p>",
        "id": 438190237,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715525844
    },
    {
        "content": "<p>Isn't O(n) prepend too slow for some cases?</p>",
        "id": 438190255,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715525869
    },
    {
        "content": "<p>For sure. Though often the right answer isn't a linked list but some alternative solution built on flat arrays. Not saying never use linked lists, but often time with small to medium size lists, arrays are still way faster even with the O(n) prepend</p>",
        "id": 438190341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715525952
    },
    {
        "content": "<p>But highly depends on the exact use case</p>",
        "id": 438190367,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715525983
    },
    {
        "content": "<p>Is Roc List boxed or unboxed?</p>",
        "id": 438190395,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715526003
    },
    {
        "content": "<p>The docs do not mention anything</p>",
        "id": 438190443,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715526016
    },
    {
        "content": "<p>Interestingly, in OCaml, list prepend is O(1) and append is O(n).</p>",
        "id": 438190781,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715526331
    },
    {
        "content": "<p>Data in a list is stored on the heap.</p>",
        "id": 438190798,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715526346
    },
    {
        "content": "<p>The values of a list are Unboxed, but yeah, it is on the heap. They are like Rust / C++ vectors. As I understand, anything that can be not boxed isn't. So tuples, structs, closures, numbers. They are not boxed, just nicely sitting next to eachother in a list</p>",
        "id": 438190880,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1715526409
    },
    {
        "content": "<p>Ocaml uses a linked list so it has to scan the entire pointer chain across memory to reach the last element and append.</p>\n<p>Roc is a contiguous block of memory and has to move all elements to prepend.</p>",
        "id": 438190932,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715526474
    },
    {
        "content": "<p>That'll be another good thing to mention in the docs.</p>",
        "id": 438190934,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715526477
    },
    {
        "content": "<p>Even tag unions are on the stack, unboxed if they are not recursive (Like not defined as a Linked list such as <code>LinkedList a : [End, Node a]</code></p>",
        "id": 438191041,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1715526564
    },
    {
        "content": "<p>Ups, not that</p>",
        "id": 438191056,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1715526591
    },
    {
        "content": "<p>I think this would be the correct type alias <code>LinkedList a : [Nil, Cons a (LinkedList a)]</code></p>",
        "id": 438191175,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1715526694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Algorithmic.20complexity.20of.20List.20operations/near/438190932\">said</a>:</p>\n<blockquote>\n<p>Ocaml uses a linked list so it has to scan the entire pointer chain across memory to reach the last element and append.</p>\n</blockquote>\n<p>Not an Ocaml-specific question, and also apologies if it may be going a tiny bit off-topic:</p>\n<ul>\n<li>Is there a good reason (besides memory savings, however tiny they might be in modern times) for not additionally storing a pointer to the end of the list in such implementations?</li>\n</ul>",
        "id": 438191332,
        "sender_full_name": "Hristo",
        "timestamp": 1715526852
    },
    {
        "content": "<p>Really is only common with doubly linked lists where you can traverse in reverse. Just having the end is fine, but then someone will want end - 1 or end - 2. So it is only a partial patch. Generally better to just not store the end and educate users on how to properly use linked lists. Like what kinds of algorithm to avoid with them.</p>",
        "id": 438191460,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715526966
    },
    {
        "content": "<p>That said, modern hardware really hates linked lists. So they generally are a bad idea unless you have an extreme or required use case.</p>",
        "id": 438191507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715527045
    },
    {
        "content": "<p>In absence of linked lists in Roc, what is the right way to write a recursive function that goes over a sequence of items and produces a sequence of zero or more items for each original item, and finally returns a flattened sequence containing all output items?</p>",
        "id": 438191803,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715527334
    },
    {
        "content": "<p>With linked list, this would be O(n). With Roc lists, this would be O(n²).</p>",
        "id": 438191874,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715527431
    },
    {
        "content": "<p>that's true in the worst case, yeah</p>",
        "id": 438192190,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715527743
    },
    {
        "content": "<p>the bet is that the Roc version will also be faster in practice</p>",
        "id": 438192196,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715527752
    },
    {
        "content": "<p>in other words, that it will have worse worst-case asymptotic performance but better runtime performance in practice, because reallocations won't be that common, and the cost of things like extra allocations and pointer chasing in the linked list will be more impactful in practice</p>",
        "id": 438192263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715527808
    },
    {
        "content": "<p>I wouldn't use recursion for that btw, I'd do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">flatMap</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">flatMap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">items</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fn</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">answer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fn</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 438192281,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715527829
    },
    {
        "content": "<p>I call it a bet because we can't really know until we've seen it in use in non-contrived programs <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 438192323,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715527907
    },
    {
        "content": "<p>so far the bet has been working out well I'd say!</p>",
        "id": 438192375,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715527926
    },
    {
        "content": "<p>just to clarify, linked lists would be O(n) but <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> this implementation (or a recursive one) would only be O(n²) in the worst case where every <code>List</code> that gets appended is so big that it requires a reallocation</p>",
        "id": 438192862,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715528488
    },
    {
        "content": "<p>because the <code>answer</code> list will be mutated in-place</p>",
        "id": 438192868,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715528504
    },
    {
        "content": "<p>in contrast, if the lists are small enough in practice that reallocations are rarely needed, then it's more like O(n + m) where n is the number of input elements and m is the number of elements in the <code>List</code> returned in the given function</p>",
        "id": 438193103,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715528749
    },
    {
        "content": "<p>(and the same would be true of the linked list version)</p>",
        "id": 438193176,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715528807
    },
    {
        "content": "<p>also worth noting that you could reduce the chances of reallocation by starting with a <code>List.withCapacity</code> instead of <code>[]</code></p>",
        "id": 438193383,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715529055
    },
    {
        "content": "<p>Yeah using withCapacity, that is O(n) with no reallocations or extra data movement</p>",
        "id": 438197564,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715533206
    },
    {
        "content": "<p>A linked list is O(n), but also requires n separate allocations. Calling malloc n times is essentially always bad.</p>",
        "id": 438197926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715533563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Algorithmic.20complexity.20of.20List.20operations/near/438191460\">said</a>:</p>\n<blockquote>\n<p>Really is only common with doubly linked lists where you can traverse in reverse. Just having the end is fine, but then someone will want end - 1 or end - 2. So it is only a partial patch. Generally better to just not store the end and educate users on how to properly use linked lists. Like what kinds of algorithm to avoid with them.</p>\n</blockquote>\n<p>Apologies for not having been clear enough. I should've specified that I wasn't referring to doubly-linked lists.</p>\n<p>I was referring to enabling append and prepend to both be <em>O(1)</em>. This is in the context of an arbitrary linked-list implementation (of a real-world programming language). I'd like to emphasise that I'm not proposing that Roc's <code>List</code>s become linked lists.</p>",
        "id": 438208101,
        "sender_full_name": "Hristo",
        "timestamp": 1715543734
    },
    {
        "content": "<p>Wondered the same today while trying to build an algorithm with lists.<br>\nNot only big O time complexity is important to know, but also reallocations, and when they happen (e.g. does it happen when doing a sublist on a value that goes out of scope in a tail-end-recursive function?)</p>\n<p>I tried to write a simple dirty CSV parser (not using roc-parser), and it's difficult to know what route to take to optimize without more information.</p>",
        "id": 438235345,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715570248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> <a href=\"#narrow/stream/231634-beginners/topic/Algorithmic.20complexity.20of.20List.20operations/near/438235345\">said</a>:</p>\n<blockquote>\n<p>it's difficult to know what route to take to optimize without more information.</p>\n</blockquote>\n<p>I have the exact same problem.</p>",
        "id": 438235852,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1715570598
    },
    {
        "content": "<p>Yeah, we definitely want to build some tooling around this (and more docs), but it is still early days. We also have a number of optimizations that are not in yet that create very sharp edges.</p>",
        "id": 438249049,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715579864
    },
    {
        "content": "<p>Currently the best way to learn is to chat here and share code.</p>",
        "id": 438249113,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715579887
    },
    {
        "content": "<p>That and profile things</p>",
        "id": 438249131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715579900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693045\">Hristo</span> <a href=\"#narrow/stream/231634-beginners/topic/Algorithmic.20complexity.20of.20List.20operations/near/438208101\">said</a>:</p>\n<blockquote>\n<p>Apologies for not having been clear enough. I should've specified that I wasn't referring to doubly-linked lists.</p>\n</blockquote>\n<p>My reply wasn't clear enough either it seems (note, I added some extra context to the quotes in parens). Only the first sentence is about doubly linked lists:</p>\n<blockquote>\n<p>Really (a pointer to the end of a linked list list) is only common with doubly linked lists where you can traverse in reverse.</p>\n</blockquote>\n<p>The following sentences are about the common implementations of singly linked lists in many programming languages (especially ml related ones):</p>\n<blockquote>\n<p>Just having the end is fine, but then someone will want \"end - 1\" or \"end - 2\". So it is only a partial patch (to add a pointer to the end element). Generally better to just not store the end and educate users on how to properly use linked lists (append heavy algorithms are an anti pattern. Especially because they make it seem like patterning matching the end or otherwise accessing other tail elements should be fast, but only the very last element would be special). (Education should be on) what kinds of algorithms to avoid with them (most append heavy algorithms on linked lists should be reversed to be prepend heavy or have other tricks to avoid the costs).</p>\n</blockquote>",
        "id": 438250178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715580346
    }
]