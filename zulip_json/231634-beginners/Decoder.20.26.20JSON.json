[
    {
        "content": "<p>I have tried to decode a json from a html response in Roc.<br>\nI could not find any json decoder in the standard library: <a href=\"https://www.roc-lang.org/builtins/\">https://www.roc-lang.org/builtins/</a>  (not counting <a href=\"https://www.roc-lang.org/builtins/TotallyNotJson\">https://www.roc-lang.org/builtins/TotallyNotJson</a> which I think is not available in the std).</p>\n<p>I have found a nice package <a href=\"https://github.com/lukewilliamboswell/roc-json\">https://github.com/lukewilliamboswell/roc-json</a> &lt;3 <br>\nBut there is no option to parse only the fields I need. I have a response json with over a 100 fields, but I'm interested in only 3 of them!<br>\nAnd some of the fields have names like \"abc:cde:efg:1\" - I don't know how to model this in a Roc record.</p>\n<p>And there is a second issue - DecodeError : [TooShort]<br>\nThe DecodeError in the standard lib can only take \"TooShort\". And this way, the only Err result you can get from any Decoder is \"TooShort\".<br>\nHow to check what's wrong with the decoded JSON, XML, etc ? E.g. a field is missing, a field is of a wrong type...</p>\n<p>What I'm saying - it is really a pain to work with JSONs right now in Roc.<br>\nWill Roc have a builtin JSON decoder? <br>\nIs it possible to make the Decoder return a more specific error than just \"TooShort\" ?<br>\nHow do you work with jsons right now? Am I missing something?</p>",
        "id": 381060732,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1690986337
    },
    {
        "content": "<p>Yeah, the JSON implementation is not fully developed yet. There is no support for more \"interesting\" errors or record files that do not have a name that aligns with a record name. JSON is not intended to be available in the standard library (it used to be, but was pulled out into lukewilliamboswell's repo, which is what you have seen). It would be great to add all the features you've noted as missing - it's just a matter of capacity, and no one has gotten to them yet.</p>",
        "id": 381071565,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690988068
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-json/blob/d90ebd68d98ae2c021db0a128611c1129dd15b83/package/Core.roc#L102\">This</a> may be useful for your \"abc:cde:efg:1\" issue.</p>",
        "id": 381072104,
        "sender_full_name": "Anton",
        "timestamp": 1690988161
    },
    {
        "content": "<p>I'm interested to know how you went <span class=\"user-mention\" data-user-id=\"634290\">@Artur Domurad</span> and if you have any feedback to improve roc-json? I'm a bit late to your question, but hope it worked out for you.</p>",
        "id": 381371582,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1691045509
    },
    {
        "content": "<p>To answer your question, you should be able to make a roc record and then use the custom mapping to relate this to your json. Happy to give you an example if that would help. <a href=\"https://github.com/lukewilliamboswell/roc-json/blob/d90ebd68d98ae2c021db0a128611c1129dd15b83/package/Core.roc#L1467-L1481\">here</a> is a test that does something similar which may help.</p>",
        "id": 381372226,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1691045662
    },
    {
        "content": "<p>Yes, that's a nice feature, and it seems to work for me.<br>\nBut now I have a new issue - the json's  fields are changing, sometimes couple of them are missing, and sometimes a few additional will appear.<br>\nThe 3 or 4 fields that I am interested in are always there.</p>\n<p>I have cloned your repo and now I'm trying to make your Json decoder just ignore the stuff that is not in the model/type.<br>\nBut for now I'm just confused, and trying to figure out how the decoders and encoders work in the standard library :D</p>",
        "id": 381375092,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1691046447
    },
    {
        "content": "<p>I'm pretty sure I know exactly where the problem is <a href=\"https://github.com/lukewilliamboswell/roc-json/blob/d90ebd68d98ae2c021db0a128611c1129dd15b83/package/Core.roc#L1361-L1365\">in here</a>. It doesn't currently eat the bytes for the field that we don't care about, but it should. I haven't implemented this, but it should be as simple as looking up the first byte and then decoding that type, and throwing away the result, and carrying on with decoding the  other fields.</p>",
        "id": 381388951,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1691049751
    },
    {
        "content": "<p>I didn't know what to do at the time, but I'm reasonably confident I do know.</p>",
        "id": 381389071,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1691049782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <br>\nI did make it work.<br>\nNot sure if my code is any good, but would like to try push my changes and create a PR.</p>",
        "id": 381505989,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1691073021
    }
]