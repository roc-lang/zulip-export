[
    {
        "content": "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>\n<p>I would like to structure a Roc package in a way that would enable me to call its API as per <code>Example.roc</code>.</p>\n<p>tl;dr Intuitively, <code>A</code> and <code>B</code> could be viewed as standard-library interfaces, like <code>Dict</code> and <code>List</code>. However, I'd like to have a categorisation \"layer\" that is <code>Ex</code> (and such).</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Example</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n<span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"example\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">cli</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.8.1/x8URkvfyi9I0QhmVG98roKBUs_AZRkLFwFJVJ3942YA.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">ex</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"./ExamplePackage/main.roc\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">cli</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">ex</span><span class=\"nf\">.</span><span class=\"kt\">Ex</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">cli</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Test: $(B.foo {} |&gt; Num.toStr)\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">ExamplePackage</span><span class=\"nf\">/</span><span class=\"nv\">main</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n<span class=\"nv\">package</span><span class=\"w\"> </span><span class=\"s\">\"example-package\"</span>\n<span class=\"w\">    </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">ExamplePackage</span><span class=\"nf\">/</span><span class=\"kt\">Ex</span><span class=\"nf\">/</span><span class=\"kt\">A</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">ExamplePackage</span><span class=\"nf\">/</span><span class=\"kt\">Ex</span><span class=\"nf\">/</span><span class=\"kt\">B</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n<span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">Ex</span><span class=\"nf\">.</span><span class=\"kt\">B</span>\n<span class=\"w\">    </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">bar</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">A</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Baz</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n</code></pre></div>\n<p>The directory tree looks like the following (package root, e.g., <code>./ExamplePackage</code>), but this isn't a constraint (it's rather an attempt to enable me to structure my API and enable it to be utilised as described above):</p>\n<div class=\"codehilite\"><pre><span></span><code>main.roc # Package main.\nEx/\n    A.roc\n    B.roc\n</code></pre></div>\n<p>I would like to be able to categorise interfaces (eg, <code>C</code>, <code>D</code> etc.) into multiple categories like <code>Ex</code>.</p>\n<p>I've attempted multiple iterations to get the working. The best one so far has achieved the following result (via the package structure described above):</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">cli</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">ex</span><span class=\"nf\">.</span><span class=\"kt\">Ex</span><span class=\"nf\">.</span><span class=\"kt\">B</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Test: $(Ex.B.foo {} |&gt; Num.toStr)\"</span>\n</code></pre></div>\n<p>but this isn't what my actual goal is.</p>\n<p>When I attempt to import <code>B</code> via curly braces, I get an error that <code>Ex.roc</code> doesn't exist. This is understandable and I believe the issue is to do with my lack of knowledge, in terms of what syntax applies to my use-case. I know I could achieve this via defining <code>A</code> and <code>B</code>in <code>Ex.roc</code>, in order to be able to access them in the desired way. But ideally, I'd like to have them as separate interfaces, because they come with their associated sets of exposed definitions.</p>\n<p><code>Html.Attributes</code> from the <a href=\"https://github.com/roc-lang/roc/blob/main/examples/static-site-gen/platform/Html/Attributes.roc\"><code>static-site-gen</code></a> example seems to be similar enough, but I haven't been able to identify the kind of API access that I'm looking for there.</p>\n<p>Thanks!</p>",
        "id": 428022303,
        "sender_full_name": "Hristo",
        "timestamp": 1710971946
    },
    {
        "content": "<p>In your app, does it work if you import <code>B</code> like <code>ex.Ex.B</code> instead?</p>",
        "id": 428025052,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710973453
    },
    {
        "content": "<p>As far as I'm aware what you want (being able to import <code>Ex.{A,B}</code>) isn't currently possible. I don't see any reason it couldn't be but that syntax just hasn't been implemented.</p>",
        "id": 428025187,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710973541
    },
    {
        "content": "<p>I ran into this myself recently actually, it's a pain</p>",
        "id": 428025269,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710973568
    },
    {
        "content": "<p>Is it like the Internal packages, where you need to import it in Ex and then re-expose it?</p>",
        "id": 428025297,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710973584
    },
    {
        "content": "<p>Well <code>Ex</code> isn't actually a package, just a path.<br>\nIf you want to import just <code>A</code> so you can do <code>A.myFunc</code> it's not possible. You have to import the full <code>Ex.A</code> and use the full <code>Ex.A.myFunc</code></p>",
        "id": 428025544,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710973703
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>\n<blockquote>\n<p>In your app, does it work if you import B like ex.Ex.B instead?</p>\n</blockquote>\n<p>Yes, it does.</p>\n<blockquote>\n<p>Is it like the Internal packages, where you need to import it in Ex and then re-expose it?</p>\n</blockquote>\n<p>Not necessarily. I'd like to utilise <code>Ex</code> (and other similar \"categories\") for categorisation.</p>\n<p>Thank you for looking into this!</p>",
        "id": 428025666,
        "sender_full_name": "Hristo",
        "timestamp": 1710973779
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>,</p>\n<p>Yes, that's been my conclusion so far as well. Just wanted to double-check if I'm not missing something.</p>\n<p>Thanks for your time, too!</p>",
        "id": 428025832,
        "sender_full_name": "Hristo",
        "timestamp": 1710973848
    },
    {
        "content": "<p>Honestly one could make a strong argument that importing <code>Ex.A</code> should allow using<code>A.myFUnc</code>, and that should you want to use<code>Ex.A.myFunc</code> you should simply import <code>Ex</code></p>",
        "id": 428025868,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710973869
    },
    {
        "content": "<p>Agus is working on the module changes. He gave a nice demo in the online meetup, first talk. I'm not sure it specifically addresses this issue, but just thought I'd mention in case you're interested in the new syntax.</p>",
        "id": 428026475,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710974169
    },
    {
        "content": "<p>There is some chance this will be fixed when module params and the module syntax change is finished. <br>\n<span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> Is that possible?</p>",
        "id": 428026478,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710974171
    },
    {
        "content": "<p>HAahaha well timed <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 428026538,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710974212
    },
    {
        "content": "<p>Lol, <a href=\"https://drive.google.com/file/d/1j2V2CeDN84MjfWPtcLaagQKcCt2qnqum/view?usp=drivesdk\">https://drive.google.com/file/d/1j2V2CeDN84MjfWPtcLaagQKcCt2qnqum/view?usp=drivesdk</a></p>",
        "id": 428026554,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710974221
    },
    {
        "content": "<p>^^ video link</p>",
        "id": 428026558,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710974228
    },
    {
        "content": "<p>Thank you!<br>\nI did listen to the talk (in the background) during work the other day! I'll re-watch it properly to see if it'll enable something that'be closer to the desired use-case.</p>",
        "id": 428027306,
        "sender_full_name": "Hristo",
        "timestamp": 1710974628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693045\">Hristo</span> has marked this topic as resolved.</p>",
        "id": 428027318,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710974633
    }
]