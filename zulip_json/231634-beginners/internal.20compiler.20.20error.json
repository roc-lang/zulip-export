[
    {
        "content": "<p>I am getting compiler error on this </p>\n<div class=\"codehilite\"><pre><span></span><code>    app &quot;reg&quot;\n\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.5.0/Cufzl36_SnJ4QbOoEmiJ5dIpUxBvdB3NEySvuH82Wio.tar.br&quot; }\n    imports [pf.Stdout]\n    provides [main] to pf\n\n\ncheckMatching = \\ str, reg  -&gt;\n    matchStr = \\ graph, pattern -&gt;\n        when pattern is\n            Character val -&gt;\n                if val == graph then\n                    Consume\n                else\n                    NoMatch\n            Dot -&gt;\n                Consume\n\n    getFirstPat = (\\  state  -&gt;\n        when List.first state.current is\n            Ok pat -&gt;\n                { pattern : pat , state : state }\n            Err _ -&gt;  getFirstPat  { state &amp; current : state.regex } )\n\n    Str.graphemes  str\n    |&gt; List.walk  { regex : reg, current : reg, matched : &quot;&quot;, result : Bool.false }  ( \\ state, graph -&gt;\n        if state.result == Bool.true then\n            state\n        else\n            matchThis = getFirstPat state\n            updatedState = matchThis.state\n\n            when matchStr graph  matchThis.pattern is\n                Consume -&gt;\n                    if List.isEmpty updatedState.current == Bool.true then\n                        { updatedState &amp; matched : Str.concat updatedState.matched graph, result : Bool.true  }\n                    else\n                        { updatedState &amp; matched : Str.concat updatedState.matched graph, current : List.dropFirst  updatedState.current }\n                NoMatch -&gt;\n                        { updatedState &amp; matched : &quot;&quot;, current : updatedState.regex } )\n\n\nmain =\n    res = checkMatching &quot;dsads&quot;  [Dot]\n\n    Stdout.line &quot;adfasfsa&quot;\n</code></pre></div>",
        "id": 395327095,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1696625440
    },
    {
        "content": "<p>We can help if you tell us what the error is!</p>",
        "id": 395376321,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1696658125
    },
    {
        "content": "<p><code>app</code> on the first line should not be indented I think</p>",
        "id": 395376324,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1696658130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span>  internal  error I suppose , just copy paste  and try to compile. There is no formal error just crash</p>",
        "id": 395391294,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1696667701
    },
    {
        "content": "<p>at least for me</p>",
        "id": 395391321,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1696667718
    },
    {
        "content": "<p>formal error I would easily fix  myself</p>",
        "id": 395391399,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1696667765
    },
    {
        "content": "<p>Did you try removing the indentation before <code>app</code>?</p>",
        "id": 395392819,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1696668847
    },
    {
        "content": "<p>I attempted to minimise and added as an <a href=\"https://github.com/roc-lang/roc/issues/5889\">Issue #5889</a></p>",
        "id": 395392904,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696668949
    },
    {
        "content": "<p>do you have suggestion  how to avoid  this problem ?</p>",
        "id": 395421012,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1696686080
    },
    {
        "content": "<p>I would try to modify <a href=\"https://github.com/roc-lang/roc/issues/5889#issue-1931265022\">Luke's minimal reproduction</a> in a way that produces the same output but using different data structures or functions that do not trigger this error.</p>",
        "id": 395423038,
        "sender_full_name": "Anton",
        "timestamp": 1696687483
    },
    {
        "content": "<p>I find it helpful to break things down into smaller functions, add tests using <code>expect</code>, and type annotations. and then some combination of <code>roc test</code> and <code>roc check</code> usually helps to build up a working implementation. There may be a different set of types or data structures which work well as Anton suggested.</p>",
        "id": 395448574,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696707524
    },
    {
        "content": "<p>what  roc test  roc  check  stands for ?</p>",
        "id": 395454282,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1696712301
    },
    {
        "content": "<p>The command line argument to for the Roc cli. So you can run the unit tests in the file with e.g. <code>roc test myFile.roc</code>. And check is similar but just checks all the types and syntax and reports any issues without actually building an executable.</p>",
        "id": 395458260,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696716614
    },
    {
        "content": "<p>See also <a href=\"https://www.roc-lang.org/tutorial#tests-and-expectations\">https://www.roc-lang.org/tutorial#tests-and-expectations</a></p>",
        "id": 395458311,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696716701
    },
    {
        "content": "<p>btw.  abbreviation   { struct &amp;  field : new_field }  is crashing  if  I recreate entire  structure from scratch there is no error</p>",
        "id": 395544918,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1696773450
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I've added this to <a href=\"https://github.com/roc-lang/roc/issues/5889\">#5889</a></p>",
        "id": 395652516,
        "sender_full_name": "Anton",
        "timestamp": 1696842561
    },
    {
        "content": "<p>I'm trying to tackle a couple documentation related GH issues, and I saw something odd in the docs regarding the pipeline operator. Specifically that <code>a b c |&gt; f x y</code> desugars to <code>f (a b c) x y</code>. Why would the pipe apply to the first hole in the RHS function? In other FP langs it applies to the last argument. So I went to test it out in the REPL and managed to crash it a few times, including with the given desugar example.</p>\n<p>The REPL I ran this in is latest master rev, FWIW</p>\n<div class=\"codehilite\"><pre><span></span><code>Â» &quot;world&quot; |&gt; \\w -&gt; Str.joinWith w [&quot;hello &quot;]\nErroneous: Expr::Call\nthread &#39;main&#39; panicked at &#39;Roc hit an error&#39;, crates/repl_cli/src/cli_gen.rs:125:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 397780880,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697839182
    },
    {
        "content": "<p>Why would the pipe apply the incoming value the first hole and not the last?</p>",
        "id": 397781111,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697839280
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>One reason the |&gt; operator injects the value as the first argument is to make it work better with functions where argument order matters.\n</code></pre></div>\n<p>Ok based on the docs it's an intentional design decision, but I don't follow the reasoning. In monomorphic operations like <code>Num.div</code> the order absolutely matters, and as a user I'd expect the dividend to be the first argument ala <code>42 / 2</code> or <code>Num.div 42 2</code>. If I'm then forced to write a notation like <code>42 |&gt; Num.div 2</code> my intuition says this is <code>2 / 42</code></p>",
        "id": 397783787,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1697841015
    },
    {
        "content": "<p>interesting! So I had the opposite intuition the first time I encountered this (back in the day), and also this is the behavior I want. For example, I've wanted to do things like this on several occasions:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">num</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">doSomething</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">sub</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>So far I've never wanted the opposite - that is, I've never wanted to perform a pipeline operation of \"take a number (<code>1</code> in this case) and subtract from it whatever I've built up so far.\" I've only ever wanted to subtract some number from what I've built up so far.</p>",
        "id": 397784503,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697841584
    },
    {
        "content": "<p>Another example:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"c1\"># appends 1 to the list</span>\n</code></pre></div>\n<p>that's an accurate comment in Roc (and in Elixir, which also does <code>|&gt;</code> the way Roc does) but it wouldn't be if <code>|&gt;</code> worked the other way</p>",
        "id": 397784666,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697841699
    },
    {
        "content": "<p>regarding the repl error - the compiler shouldn't crash there of course, but I believe the problem it's hitting is that the arguments to <a href=\"https://www.roc-lang.org/builtins/Str#joinWith\"><code>Str.joinWith</code></a> should be reversed!</p>",
        "id": 397785092,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697841989
    },
    {
        "content": "<p>Probably just wanted <code>Str.concat</code></p>",
        "id": 397785227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697842107
    },
    {
        "content": "<p>I agree with Richard, I find it way easier to conceptualise being the first argument. Maybe it's because I have the most experience with languages like python where mandatory arguments go first and the number of arguments can be unbounded, so for me, the first argument is the \"primary\" argument and so it makes sense to make it special. Maybe the other order better dissolves the boundaries between function application and composition.</p>",
        "id": 397799182,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697852286
    },
    {
        "content": "<p>I think the key here is precedence.  <code>List.append x</code> should always partially apply the first argument. Which is what I expect. And which is why the primary argument goes last in most functional languages. Because that's how partial application works. </p>\n<p>But if</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">num</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">doSomething</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">sub</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>is what you want in this case, surely that means the precedence is:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">(((</span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">doSomething</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">sub</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Which maybe we just need to be  document. If that's the case, then I'd expect:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">num</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">doSomething</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">sub</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>to work in the other way.</p>",
        "id": 397800546,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659028\">Lakin Wecker</span> <a href=\"#narrow/stream/231634-beginners/topic/internal.20compiler.20.20error/near/397800546\">said</a>:</p>\n<blockquote>\n<p>I think the key here is precedence.  <code>List.append x</code> should always partially apply the first argument. Which is what I expect.</p>\n</blockquote>\n<p>that's a reasonable expectation in a curried language, but to be fair, <a href=\"https://github.com/roc-lang/roc/blob/main/FAQ.md#why-arent-roc-functions-curried-by-default\">Roc isn't curried</a>! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 397801001,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697853390
    },
    {
        "content": "<p>There is no partial application in roc.</p>",
        "id": 397801009,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853394
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 397801025,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853406
    },
    {
        "content": "<p>But <code>|&gt;</code> has a rule for applying that adds parens.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">num</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">doSomething</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">sub</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>becomes:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">sub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">doSomething</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 397801074,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853449
    },
    {
        "content": "<blockquote>\n<p>Since no mainstream programming languages today are curried</p>\n</blockquote>\n<p>This feels like a pretty bold claim</p>",
        "id": 397801161,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853492
    },
    {
        "content": "<p>I mean you can spoof partial application with anonymous function, if you so need.</p>",
        "id": 397801175,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697853501
    },
    {
        "content": "<p>that said, if you ever need partial application, it is very easy to add a lambda</p>",
        "id": 397801187,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659028\">Lakin Wecker</span> <a href=\"#narrow/stream/231634-beginners/topic/internal.20compiler.20.20error/near/397801161\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Since no mainstream programming languages today are curried</p>\n</blockquote>\n<p>This feels like a pretty bold claim</p>\n</blockquote>\n<p>really? What's a mainstream curried language? haha</p>",
        "id": 397801228,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697853557
    },
    {
        "content": "<p>Haskell?</p>",
        "id": 397801250,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853572
    },
    {
        "content": "<p>I'd say \"Haskell is mainstream\" is an extremely bold claim <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 397801267,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697853584
    },
    {
        "content": "<p>Now we're just debating what is mainstream or not. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 397801268,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853585
    },
    {
        "content": "<p><code>const plus = (x: number) =&gt; (y: number): number =&gt; x + h;</code></p>",
        "id": 397801344,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853612
    },
    {
        "content": "<p>Anyways, I'm not complaining. It's a design choice and it's not a hill I'll die on. I find it surprising, but it's fine.</p>",
        "id": 397801409,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853660
    },
    {
        "content": "<p>While some other people are here, have we considered some syntax sugar that lets <code>\\x -&gt; x*x*x</code> be reexpressed as <code>\\x*x*x</code>? Having to include function arguments in single-variable anonymous functions is a bit bloated, and I don't think it ought to cause too many issues.</p>",
        "id": 397801451,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697853685
    },
    {
        "content": "<p>it's always really interesting to see what different people find surprising when coming to Roc! There's quite a variety depending on what people are used to</p>",
        "id": 397801476,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697853703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657838\">@Declan Joseph Maguire</span> we have not; I'd say start a new <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a> thread about it!</p>",
        "id": 397801556,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697853731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657838\">Declan Joseph Maguire</span> <a href=\"#narrow/stream/231634-beginners/topic/internal.20compiler.20.20error/near/397801451\">said</a>:</p>\n<blockquote>\n<p>While some other people are here, have we considered some syntax sugar that lets <code>\\x -&gt; x*x*x</code> be reexpressed as <code>\\x*x*x</code>? Having to include function arguments in single-variable anonymous functions is a bit bloated, and I don't think it ought to cause too many issues.</p>\n</blockquote>\n<p>Like scala's <code>_</code>?</p>",
        "id": 397801571,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/internal.20compiler.20.20error/near/397801476\">said</a>:</p>\n<blockquote>\n<p>it's always really interesting to see what different people find surprising when coming to Roc! There's quite a variety depending on what people are used to</p>\n</blockquote>\n<p>To be fair, I haven't learned roc. I just assumed: natively compiled  Elm without the \"web\"</p>",
        "id": 397801601,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853777
    },
    {
        "content": "<p>Which is probably a bad assumption. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 397801612,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853784
    },
    {
        "content": "<p>as evidenced here.</p>",
        "id": 397801622,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853789
    },
    {
        "content": "<p>Fantastic! I haven't dug through all the threads and they often hold more than the title suggests, so I'm a bit hesitant to make suggestions that may have already been discussed and rejected - I ain't an expert at language design after all, I don't know what's useful and what's a footgun always.</p>",
        "id": 397801664,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697853831
    },
    {
        "content": "<p>I'll go make that asap</p>",
        "id": 397801704,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1697853844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657838\">Declan Joseph Maguire</span> <a href=\"#narrow/stream/231634-beginners/topic/internal.20compiler.20.20error/near/397801664\">said</a>:</p>\n<blockquote>\n<p>... what's a footgun always.</p>\n</blockquote>\n<p>C++?</p>",
        "id": 397801757,
        "sender_full_name": "Lakin Wecker",
        "timestamp": 1697853880
    },
    {
        "content": "<p>I think piping into the first argument is very natural for me because I learnt R and then Julia which both have packages that rely on that convention, and neither of which are automatically currying languages</p>",
        "id": 397928770,
        "sender_full_name": "Hannes",
        "timestamp": 1697965875
    },
    {
        "content": "<p>Whoops I sniped everyone into a conversation and signed off for the weekend <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 398125990,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1698080677
    },
    {
        "content": "<p>I think the distilled point from my original post comes down to this: it is misleading from a user's perspective to have to write <code>List.append 1</code> when they  know the first argument is supposed to be a <code>List Int</code> and not an <code>Int</code>.</p>\n<p>It distorts the notion of having a \"strongly typed function\" to apply a value of the wrong type to a positional argument.</p>",
        "id": 398126364,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1698080826
    },
    {
        "content": "<p>However let's say the syntax involved a placeholder for the unapplied variable, it would read more clearly</p>\n<div class=\"codehilite\"><pre><span></span><code>[0, 1, 2]\n    |&gt; List.append _ 3\n</code></pre></div>",
        "id": 398126754,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1698080997
    },
    {
        "content": "<p>Yeah, if you are used to currying, it reads weird. That said, I think it takes exceptionally little time to get used to always missing the first arg.</p>\n<p>Also, we have discussed placeholders in general before. If we enable putting a place holder in the first position, people will want to use it in other positions. Discussions around allowing it in other locations have always led to the recommendation to just use a lambda.</p>\n<p>With that in mind, adding a placeholder to the first location has issues. Either it is weirdly restricted to only the first position, or it means we have to accept general placeholders. Which again, so far have not gotten anywhere in idea discussions cause adding an extra lambda is simple.</p>",
        "id": 398129796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698082352
    },
    {
        "content": "<p>Hmm...also, where do you put a placeholder with a raw lambda?</p>",
        "id": 398129834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698082367
    },
    {
        "content": "<blockquote>\n<p>Yeah, if you are used to currying, it reads weird</p>\n</blockquote>\n<p>Right, the pipe operator originates in curried languages (OCaml pretty sure). So most coming from that world will have the same reaction.</p>",
        "id": 398130168,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1698082522
    },
    {
        "content": "<p>And yeah agreed the placeholder would open up the discussion for allowing it any position, which would be kind of a cool feature but also harder to implement</p>",
        "id": 398130320,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1698082578
    },
    {
        "content": "<p>But to use a lambda on the RHS kind of defeats the purpose of pipelining / point free</p>",
        "id": 398130442,
        "sender_full_name": "Narek Asadorian",
        "timestamp": 1698082628
    },
    {
        "content": "<p>If you think of the pipeline just as a list of stages to execute, I don't think a lambda defeats the purposes. Just means that the function the pipeline was referencing wasn't worth defining as a standalone function.</p>",
        "id": 398132070,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698083410
    }
]