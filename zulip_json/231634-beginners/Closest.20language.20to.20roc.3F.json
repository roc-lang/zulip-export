[
    {
        "content": "<p>Hi! I thought I learn a functional language close to roc to get an idea of how to use the language to write stuff without using roc itself, because there is little documentation about how to use the language so far (and because there is no language server yet <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span> ) What languages can I look at that are probably easy to translate to roc? I thought about Elm, but maybe it's too limiting? PureScript seems viable, although it has a few different syntax decisions, it seems to have similar effects systems.</p>\n<p>My background: I tried to learn Haskell a few times, but I never reached the point where I could write applications that would actually do something useful. I once reached the point where I understood that there's no point in understanding Monads, because each Monad does a different thing. Then I saw that there are different solutions to combining different Monads and was lost in the way from understanding the basics of the language to writing a program that actually does something useful, which is really unfortunate. So PureScript 1. seems really close to Haskell and to have all the features that roc also plans to have 2. the book seems to have a plan for going from the basic to writing applications with Effects and doesn't stop somewhere in the middle and leaves you hanging. So before I invest a lot of time in a language I only learn to later write non-web-apps in roc, would you recommend a different learning path (you, who maybe went through similar learning paths)?</p>",
        "id": 344448716,
        "sender_full_name": "itmuckel",
        "timestamp": 1679738319
    },
    {
        "content": "<p>I started using Roc by going through the Advent of Code challenges. I found that to be fun, and the community here was very helpful when I ran into issues. I would recommend that for anyone interested in learning more about Roc. It was really helpfulto see other peoples approaches to the same problems. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 344450099,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679738848
    },
    {
        "content": "<p>The good thing about AoC I find is that they cover a broad range of problems, so you can learn lots of different things. The problems are careful to keep the scope focussed, but still interesting. The difficulty scales pretty nicely too, so there is something there for everyone. I think Roc is a great language and these problems really highlight just how nice it is to use. I recall modelling using Tags, no type annotations, and testing using <code>expect</code> being low friction which made it easy to be productive and solve the problem, but still having the comfort of the compiler and type checking to catch issues.</p>",
        "id": 344451217,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679739341
    },
    {
        "content": "<p>To directly answer the question, Roc is described as a direct descendant of Elm, so that's definitely the closest. PureScript and Haskell are usually considered harder to learn, with more focus concepts and less on just building stuff.</p>\n<p>Regarding Elm possibly being too limiting: The main difference is what kind of IO or effects you can do, because it's very front end focused. Pure logic is very similar between the two.</p>\n<p>But if your goal is to learn Roc, it might be less confusing to just focus on Roc alone, by looking at AoC solutions, as Luke suggested!</p>",
        "id": 344455125,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1679740937
    },
    {
        "content": "<p>Do you have an example repository with the necessary setup? Like which platform to use, how to read files?</p>",
        "id": 344462666,
        "sender_full_name": "itmuckel",
        "timestamp": 1679742866
    },
    {
        "content": "<p>Many people went through AOC last year and there is a lot of links and discussion in <a class=\"stream\" data-stream-id=\"358903\" href=\"/#narrow/stream/358903-Advent-of-Code\">#Advent of Code</a>. The examples may be slightly out of date due to Roc changing, but I think it should be relatively minor. I think essentially everyone uses the <a href=\"https://github.com/roc-lang/basic-cli\">basic-cli</a> platform. This is <a href=\"https://github.com/bhansconnect/roc-aoc-2021/blob/trunk/day1/part1.roc\">my day1 part1</a>, for example. I think to make it work, it would just require updating the platform path to: <a href=\"https://github.com/roc-lang/basic-cli/releases/download/0.3/5CcipdhTTAtISf4FwlBNHmyu1unYAV8b0MKRwYiEHys.tar.br\">https://github.com/roc-lang/basic-cli/releases/download/0.3/5CcipdhTTAtISf4FwlBNHmyu1unYAV8b0MKRwYiEHys.tar.br</a></p>",
        "id": 344518215,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679760463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598379\">@itmuckel</span> I updated my <a href=\"https://github.com/lukewilliamboswell/roc-things/tree/main/aoc-2022\">AoC 2022 examples</a> and checked they all compile with the latest version of Roc. These might help you if are looking for inspiration - for at least one way to solve the problems. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 344532999,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679765763
    },
    {
        "content": "<p>I was trying to learn how to do parsing in Roc around that time, and I set myself the challenge of trying to parse the input files. So some of the early examples are probably overkill, some simple string splitting around <code>\\n</code> characters would have been quicker.</p>",
        "id": 344535156,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679766642
    },
    {
        "content": "<p>Great, thank you all!</p>",
        "id": 344541758,
        "sender_full_name": "itmuckel",
        "timestamp": 1679770168
    },
    {
        "content": "<p>Let me just reuse this thread:</p>\n<div class=\"codehilite\"><pre><span></span><code>    task =\n        contents &lt;- File.readUtf8 path |&gt; await\n        chunks &lt;- (Str.split contents &quot;\\n&quot;)\n        Stdout.line contents\n</code></pre></div>\n<p>I get the error </p>\n<div class=\"codehilite\"><pre><span></span><code>── TOO MANY ARGS ──────────────────────────────────────────────────── day1.roc ─\n\nThe split function expects 2 arguments, but it got 3 instead:\n\n20│          chunks &lt;- (Str.split contents &quot;\\n&quot;)\n                        ^^^^^^^^^\n\nAre there any missing commas? Or missing parentheses?\n</code></pre></div>\n<p>But how? I even put it in parentheses and it still thinks it gets three arguments. Where is the third argument? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 344698778,
        "sender_full_name": "itmuckel",
        "timestamp": 1679853890
    },
    {
        "content": "<p>Oooh, I get it now. backpassing creates a lambda that gets passed implicitly to Str.split, right?</p>",
        "id": 344698953,
        "sender_full_name": "itmuckel",
        "timestamp": 1679853980
    },
    {
        "content": "<p>Yeah, backpassing is creating a lambda here.</p>",
        "id": 344700287,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679854792
    },
    {
        "content": "<p>Kinda surprised it ignores parens and doesn't create a floating lambda, but same sort of problem either way.</p>",
        "id": 344700369,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679854825
    },
    {
        "content": "<p>Should just need to change from <code>&lt;-</code> to <code>=</code></p>",
        "id": 344700383,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679854838
    },
    {
        "content": "<p>This one is really weird:</p>\n<div class=\"codehilite\"><pre><span></span><code>     task =\n        contents &lt;- File.readUtf8 path |&gt; await\n        chunks = (Str.split contents &quot;\\n&quot;)\n\n        _ &lt;- Stdout.line (List.first chunks |&gt; Result.withDefault &quot;err&quot;) |&gt; await\n        Stdout.line (Str.concat &quot;list: &quot; (List.first chunks |&gt; Result.withDefault &quot;err&quot;))\n</code></pre></div>\n<p>The first Stdout.line doesn't output anything (not even my \"Success\" message that should appear after the program ran).<br>\nWhen I comment out the first Stdout.line, my output is</p>\n<div class=\"codehilite\"><pre><span></span><code>list: 1000\nsuccess\n</code></pre></div>\n<p>like I would expect. What's going on with Result.withDefault? If I'm using it wrong, shouldn't there be an error?</p>",
        "id": 344701481,
        "sender_full_name": "itmuckel",
        "timestamp": 1679855577
    },
    {
        "content": "<p>Is the first line empty or just spaces?</p>",
        "id": 344701763,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679855801
    },
    {
        "content": "<p>That's my only immediate guess.</p>",
        "id": 344701806,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679855839
    },
    {
        "content": "<p>No, it contains \"1000\", otherweise the second Stdout.line wouldn't output \"list: 1000\", right?</p>",
        "id": 344702076,
        "sender_full_name": "itmuckel",
        "timestamp": 1679855998
    },
    {
        "content": "<p>Maybe it runs into an error, but reports nothing?</p>\n<div class=\"codehilite\"><pre><span></span><code>    Task.attempt task \\result -&gt;\n        when result is\n            Ok {} -&gt; Stdout.line &quot;success&quot;\n            Err err -&gt;\n                msg =\n                    when err is\n                        FileWriteErr _ PermissionDenied -&gt; &quot;PermissionDenied&quot;\n                        FileWriteErr _ Unsupported -&gt; &quot;Unsupported&quot;\n                        FileWriteErr _ (Unrecognized _ other) -&gt; other\n                        FileReadErr _ _ -&gt; &quot;Error reading file&quot;\n                        _ -&gt; &quot;Uh oh, there was an error!&quot;\n\n                {} &lt;- Stderr.line msg |&gt; await\n                Process.exit 1\n</code></pre></div>",
        "id": 344702362,
        "sender_full_name": "itmuckel",
        "timestamp": 1679856134
    },
    {
        "content": "<p>can you share the full program and the full output, starting from the <code>$ roc run ...</code> (or whatever you used to run it) command?</p>",
        "id": 344702397,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679856159
    },
    {
        "content": "<p>that would help I think!</p>",
        "id": 344702418,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679856171
    },
    {
        "content": "<p>Oh, interesting, it segfaults :-D</p>\n<p>list: 1000<br>\nSegmentation fault</p>",
        "id": 344702441,
        "sender_full_name": "itmuckel",
        "timestamp": 1679856190
    },
    {
        "content": "<p>Yes, I only mashed together a cli-example and read a file, here is the full program:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;day1&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.3/5CcipdhTTAtISf4FwlBNHmyu1unYAV8b0MKRwYiEHys.tar.br&quot; }\n    imports [\n        pf.Stdout,\n        pf.Stderr,\n        pf.Process,\n        pf.Task.{ Task, await },\n        pf.Arg,\n        pf.File,\n        pf.Path,\n    ]\n    provides [main] to pf\n\n\nmain : Task {} []\nmain =\n    path = Path.fromStr &quot;input-day-1.txt&quot;\n    task =\n        contents &lt;- File.readUtf8 path |&gt; await\n        chunks = (Str.split contents &quot;\\n&quot;)\n\n        _ &lt;- Stdout.line (Str.concat &quot;list: &quot; (List.first chunks |&gt; Result.withDefault &quot;err&quot;)) |&gt; await\n        Stdout.line (List.first chunks |&gt; Result.withDefault &quot;err&quot;)\n\n    Task.attempt task \\result -&gt;\n        when result is\n            Ok {} -&gt; Stdout.line &quot;success&quot;\n            Err err -&gt;\n                msg =\n                    when err is\n                        FileWriteErr _ PermissionDenied -&gt; &quot;PermissionDenied&quot;\n                        FileWriteErr _ Unsupported -&gt; &quot;Unsupported&quot;\n                        FileWriteErr _ (Unrecognized _ other) -&gt; other\n                        FileReadErr _ _ -&gt; &quot;Error reading file&quot;\n                        _ -&gt; &quot;Uh oh, there was an error!&quot;\n\n                {} &lt;- Stderr.line msg |&gt; await\n                Process.exit 1\n</code></pre></div>",
        "id": 344702525,
        "sender_full_name": "itmuckel",
        "timestamp": 1679856240
    },
    {
        "content": "<p>input-day-1.txt is:</p>\n<div class=\"codehilite\"><pre><span></span><code>1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\n</code></pre></div>",
        "id": 344702597,
        "sender_full_name": "itmuckel",
        "timestamp": 1679856270
    },
    {
        "content": "<p>I originally started it with <code>roc dev day1.roc</code> and it doesn't show me that it segfaults, so I was asking here what was going on. <code>roc build day1.roc</code> creates an executable that tells me that it segfaults</p>",
        "id": 344702665,
        "sender_full_name": "itmuckel",
        "timestamp": 1679856336
    },
    {
        "content": "<p>environment: WSL2 with roc nightly pre-release, built from commit 41d7ade on Sa 25 Mär 2023 09:07:07 UTC</p>",
        "id": 344702827,
        "sender_full_name": "itmuckel",
        "timestamp": 1679856463
    },
    {
        "content": "<p>Running on my machine prints both, but then kinda explodes at the end of the application run. no idea why:<br>\n<a href=\"https://gist.github.com/bhansconnect/bac5d18258987e6304a27671a12068e5\">https://gist.github.com/bhansconnect/bac5d18258987e6304a27671a12068e5</a></p>\n<p>Maybe we recently had some sort of change or regression in basic-cli? I am quite confused by the output.</p>",
        "id": 344703249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679856802
    },
    {
        "content": "<p>seems likely to be a <code>basic-cli</code> problem</p>",
        "id": 344703287,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679856833
    },
    {
        "content": "<p>like some sort of memory corruption issue</p>",
        "id": 344703314,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679856843
    },
    {
        "content": "<p>could also be a builtin</p>",
        "id": 344703338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679856846
    },
    {
        "content": "<p><code>valgrind</code> might have some insight?</p>",
        "id": 344703346,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679856854
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>==38947== Invalid read of size 1\n==38947==    at 0x484D40A: memrchr (in /nix/store/xkz8yydj9kl6l9r9bl2vn4q8lmfh02ns-valgrind-3.20.0/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\n==38947==    by 0x96433C: memrchr_specific (memchr.rs:23)\n==38947==    by 0x96433C: memrchr (memchr.rs:39)\n==38947==    by 0x96433C: memrchr (memchr.rs:50)\n==38947==    by 0x96433C: write_all&lt;std::io::stdio::StdoutRaw&gt; (linewritershim.rs:248)\n==38947==    by 0x96433C: write_all&lt;std::io::stdio::StdoutRaw&gt; (linewriter.rs:206)\n==38947==    by 0x96433C: &lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (stdio.rs:731)\n==38947==    by 0x965BD0: &lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (mod.rs:1661)\n==38947==    by 0x593280: &lt;&amp;T as core::fmt::Display&gt;::fmt (mod.rs:2361)\n==38947==    by 0x98D20B: core::fmt::write (mod.rs:1198)\n==38947==    by 0x964203: write_fmt&lt;std::io::stdio::StdoutLock&gt; (mod.rs:1672)\n==38947==    by 0x964203: &lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (stdio.rs:711)\n==38947==    by 0x964A03: write_fmt (stdio.rs:685)\n==38947==    by 0x964A03: print_to&lt;std::io::stdio::Stdout&gt; (stdio.rs:1014)\n==38947==    by 0x964A03: std::io::stdio::_print (stdio.rs:1027)\n==38947==    by 0x25BBCE: roc_fx_stdoutLine (lib.rs:311)\n==38947==    by 0x23D4C5: roc_fx_stdoutLine_fastcc_wrapper (in /home/bren077s/Projects/roc-misc/roc/examples/day1)\n==38947==    by 0x236E49: Effect_effect_closure_stdoutLine_b7aa9f7d377b2692ada596045493ead6d491b934dc9015fcbdd1a8e01477d (in /home/bren077s/Projects/roc-misc/roc/examples/day1)\n==38947==    by 0x227C8D: Effect_effect_map_inner_1fee66ad667b912c4d10ada5f77fb9e8b2dfe9a4124f957b34ae7bc684ecaf1 (in /home/bren077s/Projects/roc-misc/roc/examples/day1)\n==38947==    by 0x22A8D3: Effect_effect_after_inner_8b8e749a7d5dc4035aed2d09b8b4ad59fac5ad694339521a2df23bf1ac35c3 (in /home/bren077s/Projects/roc-misc/roc/examples/day1)\n==38947==  Address 0x8000000004b7523b is not stack&#39;d, malloc&#39;d or (recently) free&#39;d\n</code></pre></div>",
        "id": 344705333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679858122
    },
    {
        "content": "<p>I am gonna make a guess that somehow it is related to slice, but no clear reason why at the moment.</p>",
        "id": 344705351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679858151
    },
    {
        "content": "<p>Oh, yeah, I think I see the issue. basic-cli is using a lock file. This means that it is not updating as <code>roc-std</code> is updating. So it is using a version of <code>roc-std</code> from before slices were added. Due to this, it is doing the wrong thing when passed in a slices.</p>",
        "id": 344706085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679858599
    },
    {
        "content": "<p>A workaround until we update <code>basic-cli</code> is to change the chunk line to:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">chunks</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"w\"> </span><span class=\"nx\">contents</span><span class=\"w\"> </span><span class=\"s\">\"\\n\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">releaseExcessCapacity</span>\n</code></pre></div>",
        "id": 344706127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679858633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> do you think it is worth removing the lock file from basic-cli so that we always pull in the latest roc-std when publishing it? Otherwise, maybe we should add a <code>cargo update</code> to the publishing process?</p>",
        "id": 344708438,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679860035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Closest.20language.20to.20roc.3F/near/344706127\">schrieb</a>:</p>\n<blockquote>\n<p>A workaround until we update <code>basic-cli</code> is to change the chunk line to:</p>\n<p><div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">chunks</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"w\"> </span><span class=\"nx\">contents</span><span class=\"w\"> </span><span class=\"s\">\"\\n\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">releaseExcessCapacity</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Perfect, that did it:</p>\n<div class=\"codehilite\"><pre><span></span><code>list: 1000\n1000\nsuccess\n</code></pre></div>\n<p>Is there some documentation on where roc uses slices and what the implications are or shouldn't I care about them?</p>",
        "id": 344717864,
        "sender_full_name": "itmuckel",
        "timestamp": 1679866822
    },
    {
        "content": "<p>Also is there an issue for this problem (lock-file) that I can follow on github?</p>",
        "id": 344717912,
        "sender_full_name": "itmuckel",
        "timestamp": 1679866897
    },
    {
        "content": "<p>Just filed <a href=\"https://github.com/roc-lang/basic-cli/issues/25\">https://github.com/roc-lang/basic-cli/issues/25</a> to track</p>",
        "id": 344722279,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679870483
    },
    {
        "content": "<p>Fundamentally, a roc user should never have to think about slices, only a platform author might need to think of them. They are a performance improvement we added to reduce copying and extra allocations.</p>",
        "id": 344722370,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679870529
    },
    {
        "content": "<p>Some details here <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing/topic/PSA.3A.20Seamless.20Slice\">#contributing &gt; PSA: Seamless Slice</a></p>",
        "id": 344722380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679870539
    },
    {
        "content": "<p>yeah this is just a timing issue; they landed very recently in the compiler and represent only the second time the layout of that data structure has changed in Roc's history</p>",
        "id": 344729648,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679876265
    },
    {
        "content": "<p>so this shouldn't be something that comes up often!</p>",
        "id": 344729710,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679876292
    },
    {
        "content": "<p>I'll take a look at basic-cli#25 today</p>",
        "id": 344798968,
        "sender_full_name": "Anton",
        "timestamp": 1679906707
    },
    {
        "content": "<p>basic-cli 0.3.1 is building...</p>",
        "id": 344935199,
        "sender_full_name": "Anton",
        "timestamp": 1679940492
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/releases/download/0.3.1/Myunhy2nMIqIE2i0IODzfdjCnTJ8y4rs9tgMBIozhTQ.tar.gz\">basic-cli 0.3.1 pre-release</a><br>\nCan you give it a try <span class=\"user-mention\" data-user-id=\"598379\">@itmuckel</span>?</p>",
        "id": 344939063,
        "sender_full_name": "Anton",
        "timestamp": 1679941663
    },
    {
        "content": "<p>yes, that works :-)</p>",
        "id": 344940408,
        "sender_full_name": "itmuckel",
        "timestamp": 1679942060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598379\">@itmuckel</span> I've made 0.3.1 the latest official release. The tar.gz is also no longer available, instead we have the much smaller <code>tar.br</code>: <a href=\"https://github.com/roc-lang/basic-cli/releases/download/0.3.1/97mY3sUwo433-pcnEQUlMhn-sWiIf_J9bPhcAFZoqY4.tar.br\">https://github.com/roc-lang/basic-cli/releases/download/0.3.1/97mY3sUwo433-pcnEQUlMhn-sWiIf_J9bPhcAFZoqY4.tar.br</a></p>",
        "id": 345207269,
        "sender_full_name": "Anton",
        "timestamp": 1680027285
    }
]