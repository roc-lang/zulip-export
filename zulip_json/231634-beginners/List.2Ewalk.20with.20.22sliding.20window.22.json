[
    {
        "content": "<p>Hey there. I am using <code>List.walk</code> to walk a list. Is there an efficient way to do it but with a \"sliding window\" of e.g. 3 elements? I was trying to use <code>List.walkWithIndex</code> but I can only look backwards in the list because only the current results are sent as the state.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>[1, 2, 3, 4, 5, 6]\n  |&gt; List.walkWithIndex [] slidingAdd\n\nslidingAdd = \\results, element, index -&gt;\n  if List.len results &lt; 3 then\n    List.append results element\n  else\n    prevPrev = List.get results (index - 2)\n    prev = List.get results (index - 1)\n    List.append results (Num.add element (Num.add prev prevPrev))\n</code></pre></div>\n<p>This is an incorrect solution but just what I have so far and so you can see what I mean.</p>",
        "id": 451137188,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1720854963
    },
    {
        "content": "<p>Maybe it makes more sense to write it up like this for what I want the final thing to achieve.<br>\nGiven a list <code>[1, 2, 3, 4, 5, 6]</code>.<br>\nThe program should traverse the list such that it can look at a sliding window like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[1, 2, 3]\n[2, 3, 4]\n[3, 4, 5]\n[4, 5, 6]\n[5, 6]\n[6]\n</code></pre></div>\n<p>Those arrays should be passed to a function that can then do what it wants with the input and append it to a <code>results</code> array.</p>",
        "id": 451137431,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1720855216
    },
    {
        "content": "<p>Maybe <code>List.sublist</code> can help here?</p>",
        "id": 451138259,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720855960
    },
    {
        "content": "<p>I made an example using recursion.  <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>module [\n    slidingWindow\n]\n\nslidingWindow : List a, List b, (List b, [Three a a a, Two a a, One a ] -&gt; List b) -&gt; List b\nslidingWindow = \\input, accum, fn -&gt;\n\n    firstDropped = List.dropFirst input 1\n\n    when input is\n        [] -&gt; accum\n        [a] -&gt; slidingWindow firstDropped (fn accum (One a)) fn\n        [a,b] -&gt; slidingWindow firstDropped (fn accum (Two a b)) fn\n        [a,b,c, ..] -&gt; slidingWindow firstDropped (fn accum (Three a b c)) fn\n\nexampleFn : List U64, [Three U64 U64 U64, Two U64 U64, One U64] -&gt; List U64\nexampleFn = \\accum, window -&gt;\n    when window is\n        One a -&gt; List.append accum a\n        Two a b -&gt; List.append accum (a + b)\n        Three a b c -&gt; List.append accum (a + b + c)\n\nexpect\n    actual = slidingWindow [1,2,3] [] exampleFn\n    expected = [6, 5, 3]\n\n    actual == expected\n</code></pre></div>",
        "id": 451138610,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720856290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584248\">Kiryl Dziamura</span> <a href=\"#narrow/stream/231634-beginners/topic/List.2Ewalk.20with.20.22sliding.20window.22/near/451138259\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>List.sublist</code> can help here?</p>\n</blockquote>\n<p>Thanks for the suggestion. The problem with <code>List.sublist</code> in the walking version is only having access to the state that has already been accumulated thus far. But maybe it could be used in conjunction with <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>'s version.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/List.2Ewalk.20with.20.22sliding.20window.22/near/451138610\">said</a>:</p>\n<blockquote>\n<p>I made an example using recursion.  <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><div class=\"codehilite\"><pre><span></span><code>module [\n    slidingWindow\n]\n\nslidingWindow : List a, List b, (List b, [Three a a a, Two a a, One a ] -&gt; List b) -&gt; List b\nslidingWindow = \\input, accum, fn -&gt;\n\n    firstDropped = List.dropFirst input 1\n\n    when input is\n        [] -&gt; accum\n        [a] -&gt; slidingWindow firstDropped (fn accum (One a)) fn\n        [a,b] -&gt; slidingWindow firstDropped (fn accum (Two a b)) fn\n        [a,b,c, ..] -&gt; slidingWindow firstDropped (fn accum (Three a b c)) fn\n\nexampleFn : List U64, [Three U64 U64 U64, Two U64 U64, One U64] -&gt; List U64\nexampleFn = \\accum, window -&gt;\n    when window is\n        One a -&gt; List.append accum a\n        Two a b -&gt; List.append accum (a + b)\n        Three a b c -&gt; List.append accum (a + b + c)\n\nexpect\n    actual = slidingWindow [1,2,3] [] exampleFn\n    expected = [6, 5, 3]\n\n    actual == expected\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you for the recursive implementation. I'll look at it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>. I had hoped to use a built-in iteration style like <code>List.walk</code>, but I might have to go with recursion. I am just weary of recursion because I am not proficient at making them tail-call optimized, thus blowing my stack <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 451138996,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1720856678
    },
    {
        "content": "<p>We talked at some point about adding that as a feature to the language server I think, or maybe an editor extension that would give a little flag if the recursive function was TCO'd.</p>",
        "id": 451139138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720856818
    },
    {
        "content": "<p>That would be awesome <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 451139165,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1720856840
    },
    {
        "content": "<p>also \"walk with sliding window\" seems like a plausible thing to add to the <code>List</code> module</p>",
        "id": 451161002,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720869669
    },
    {
        "content": "<p>does anyone know of examples of functions like that in other languages?</p>",
        "id": 451161029,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720869700
    },
    {
        "content": "<p>Yeah super common in digital signal processing algorithms. </p>\n<p><a href=\"https://www.mathworks.com/help/dsp/ug/sliding-window-method-and-exponential-weighting-method.html\">https://www.mathworks.com/help/dsp/ug/sliding-window-method-and-exponential-weighting-method.html</a></p>\n<p><a href=\"https://en.m.wikipedia.org/wiki/Window_function\">https://en.m.wikipedia.org/wiki/Window_function</a></p>",
        "id": 451164405,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720871591
    },
    {
        "content": "<p><code>sliding</code> (does not take a function) is in the scala stdlib</p>",
        "id": 451164770,
        "sender_full_name": "Anton",
        "timestamp": 1720871896
    },
    {
        "content": "<p><a href=\"https://pkg.go.dev/gonum.org/v1/gonum/dsp/window\">https://pkg.go.dev/gonum.org/v1/gonum/dsp/window</a></p>",
        "id": 451164797,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720871924
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/slice/struct.Windows.html\">https://doc.rust-lang.org/std/slice/struct.Windows.html</a></p>",
        "id": 451164982,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720872048
    },
    {
        "content": "<p>In ruby you have <code>each_cons</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>irb&gt; [1,2,3,4].each_cons(2) { |x, y| puts &quot;#{x} #{y}&quot; }\n1 2\n2 3\n3 4\n=&gt; [1, 2, 3, 4]\n</code></pre></div>",
        "id": 451165332,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1720872261
    },
    {
        "content": "<p>Super common for some math concepts too. It’s needed for convolutions of small size kernel for example <a href=\"https://en.wikipedia.org/wiki/Convolution\">https://en.wikipedia.org/wiki/Convolution</a>. Bigger sizes usually implemented with Fourier transforms instead of sliding windows.</p>",
        "id": 451185079,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1720883112
    },
    {
        "content": "<p>Yeah, definitely common operation in array languages. Though not used that often. Has niche but definite uses</p>",
        "id": 451192118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720886786
    },
    {
        "content": "<p>And yeah, something with sublist is probably the way to go</p>",
        "id": 451192302,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720886870
    },
    {
        "content": "<blockquote>\n<p>The problem with <code>List.sublist</code> in the walking version is only having access to the state that has already been accumulated thus far.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"557609\">@Jamie Neubert Pedersen</span> I meant smth like that:</p>\n<div class=\"codehilite\"><pre><span></span><code>slide = \\list, windowSize -&gt;\n    List.range { start: At 0, end: At ((List.len list) - windowSize) }\n    |&gt; List.map \\from -&gt;\n        List.sublist list { start: from, len: windowSize }\n\nexpect\n    actual = slide [0, 1, 2] 2\n    expected = [[0, 1], [1, 2]]\n    actual == expected\n</code></pre></div>",
        "id": 451715065,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1721121314
    }
]