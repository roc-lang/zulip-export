[
    {
        "content": "<p>Hi! I'm doing AoC in Roc (and others) and handling Results has taken up an incredible portion of the time solving 1a. I know the inputs are valid, so I'd like to <code>crash</code> on invalid inputs. However, when I do a match on an Ok Result, the crash in the Err would still evaluate. How should I use crash properly?</p>",
        "id": 485573936,
        "sender_full_name": "Emil J",
        "timestamp": 1733129958
    },
    {
        "content": "<p>I ended up pulling off an absolute anti-pattern just to get it done</p>\n<div class=\"codehilite\"><pre><span></span><code>purifyStr = \\x -&gt; Result.withDefault x &quot;AAAAA&quot;\npurifyInt = \\x -&gt; Result.withDefault x 999999\n</code></pre></div>\n<p><span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span></p>",
        "id": 485574030,
        "sender_full_name": "Emil J",
        "timestamp": 1733129999
    },
    {
        "content": "<p>oh and this gives me</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at /build/source/crates/compiler/types/src/unification_table.rs:295:62:\nindex out of bounds: the len is 3561 but the index is 3561\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>want me to report it on the issue tracker?</p>\n<p><a href=\"/user_uploads/22008/DFdLDfWJ87pcveJWsjR8QPAm/repro.roc\">repro.roc</a></p>",
        "id": 485574413,
        "sender_full_name": "Emil J",
        "timestamp": 1733130109
    },
    {
        "content": "<p>Normally, I'd write something like this, if I understand you correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseInput</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">parseResult</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">doStuffWith</span><span class=\"w\"> </span><span class=\"nv\">result</span>\n\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">parseResult</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Failed to parse input with err $(Inspect.toStr err)\"</span>\n</code></pre></div>",
        "id": 485574597,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130162
    },
    {
        "content": "<p>This is also what I did last year. But with the new <code>try</code> syntax, it is so easy to handle the error case, that I don't feel the need to use <code>crash</code> any more. You can just write:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>input\n|&gt; parseInput # This returns a Result\n|&gt; try  # This Removes the Result\n|&gt; solveAoC\n|&gt; Ok\n</code></pre></div>\n<p>The only requirement is, that you are calling this code in a function that returns a Result.</p>",
        "id": 485575439,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733130460
    },
    {
        "content": "<p>I'm working on improving <code>try</code> at the moment. Please feel free to <code>try</code> it out (harr harr), and let me know if you run into any issues!</p>",
        "id": 485575715,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130542
    },
    {
        "content": "<p>oh, so that <code>try</code> simplifies things like result of results? That's good enough yep</p>",
        "id": 485575859,
        "sender_full_name": "Emil J",
        "timestamp": 1733130592
    },
    {
        "content": "<p>And also <span class=\"user-mention\" data-user-id=\"784639\">@Emil J</span> I think that crash is because of your <code>lefts_sorted</code></p>",
        "id": 485576331,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130728
    },
    {
        "content": "<p>When I changed it to camelCase, it worked</p>",
        "id": 485576375,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130744
    },
    {
        "content": "<p>We currently only do camelCase in Roc, but I'm surprised that you got such a deep error...</p>",
        "id": 485576457,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130773
    },
    {
        "content": "<p>I don't think it's worth reporting an issue on because we're planning on moving to snake_case soon</p>",
        "id": 485576519,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"784639\">@Emil J</span> here's the recent announcement on usage of <code>try</code>: </p>\n<p><a href=\"#narrow/channel/397893-announcements/topic/New.20.60return.60.20and.20.60try.60.20keywords\">#announcements&gt;New &#96;return&#96; and &#96;try&#96; keywords</a></p>",
        "id": 485576669,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130852
    },
    {
        "content": "<p>Heads up, you can't currently use it in the same function as !</p>",
        "id": 485576726,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130871
    },
    {
        "content": "<p>But that'll get fixed in the next month or so, I think</p>",
        "id": 485576759,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733130883
    },
    {
        "content": "<p>ok thanks!</p>",
        "id": 485578583,
        "sender_full_name": "Emil J",
        "timestamp": 1733131422
    }
]