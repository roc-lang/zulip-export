[
    {
        "content": "<p>Hi! I stumbled upon Roc yesterday and immediately fell in love, eve though I have very limited experience with purely functional languages.</p>\n<p>I'm trying to work with a string, where separators are \"..\" and \".\", and converting it to a nested list:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;a..b.c&quot; ~&gt; [[&quot;a&quot;], [&quot;b&quot;, &quot;c&quot;]]\n</code></pre></div>\n<p>I have written the following in the REPL:</p>\n<div class=\"codehilite\"><pre><span></span><code>» &quot;a..b.c&quot; |&gt; Str.split &quot;..&quot; |&gt; List.map \\item -&gt; Str.split item &quot;.&quot;\n\n[[&quot;a&quot;], [&quot;b&quot;, &quot;c&quot;]] : List (List Str) # as expected\n\n\n» &quot;a..b.c&quot; |&gt; Str.split &quot;..&quot; |&gt; List.map \\item -&gt; Str.split item &quot;.&quot; |&gt; List.map \\sublist -&gt; Str.joinWith sublist &quot;_&quot;\n#expecting output [&quot;a&quot;, &quot;b_c&quot;]\nThis Roc code crashed with: &quot;Erroneous: Expr::Closure&quot;\n\n── TYPE MISMATCH ─────────────\n\nThis 2nd argument to |&gt; has an unexpected type:\n\n4│      &quot;a..b.c&quot; |&gt; Str.split &quot;..&quot; |&gt; List.map \\item -&gt; Str.split item &quot;.&quot; |&gt; List.map \\sublist -&gt; Str.joinWith sublist &quot;_&quot;\n                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe argument is an anonymous function of type:\n\n    List Str -&gt; Str\n\nBut |&gt; needs its 2nd argument to be:\n\n    Str -&gt; Str\n</code></pre></div>\n<p>I understand the issue is that the latest map in my chain receives strings as its input, but based on my experience, I think it should be [\"a\"] and [\"b\", \"c\"], as these are the elements of the list of the previous expression's output.  What am I missing?</p>",
        "id": 405095274,
        "sender_full_name": "Bucsi",
        "timestamp": 1701343001
    },
    {
        "content": "<p>And just as I pressed send, I have realized the pipe is being considered as part of my first callback <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> Calling it wrapped in parens provides the expected result:</p>\n<div class=\"codehilite\"><pre><span></span><code>» &quot;a..b.c&quot; |&gt; Str.split &quot;..&quot; |&gt; List.map (\\item -&gt; Str.split item &quot;.&quot;) |&gt; List.map \\sublist -&gt; Str.joinWith sublist &quot;_&quot;\n\n[&quot;a&quot;, &quot;b_c&quot;] : List Str\n</code></pre></div>",
        "id": 405095681,
        "sender_full_name": "Bucsi",
        "timestamp": 1701343162
    },
    {
        "content": "<p>Is there a recommended way of using parens? Should a callback be always wrapped?</p>",
        "id": 405095841,
        "sender_full_name": "Bucsi",
        "timestamp": 1701343222
    },
    {
        "content": "<p>Usually each part of the pipeline will be on its own line, that fixes it. But if you want it to be on one line, you'll have to use parentheses</p>",
        "id": 405111841,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1701349035
    },
    {
        "content": "<p>This sounds like something that might benefit from a custom compiler error? It sounds easy to detect and might be a common newbie mistake.</p>",
        "id": 405475141,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1701484323
    },
    {
        "content": "<p>I'll make an issue for it</p>",
        "id": 405518743,
        "sender_full_name": "Anton",
        "timestamp": 1701511129
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6150\">#6150</a></p>",
        "id": 405519157,
        "sender_full_name": "Anton",
        "timestamp": 1701511395
    }
]