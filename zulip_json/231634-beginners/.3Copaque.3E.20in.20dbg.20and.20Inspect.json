[
    {
        "content": "<p>I've noticed that when using opaque types they get written as <code>&lt;opaque&gt;</code> when using dbg and Inspect to output them as strings. <br>\nThis is quite nice when working with secrets like passwords or authentication tokens etc, however, is there any way to still log the underlying value for debugging?<br>\nThe other way around, is there any way to go the other way and force an opaque string type into an API that would otherwise only accept strings and then get that behavior? (i.e. basic-cli's Http Request uses strings in it's header declarations but it would be nice to not straight up print them in logs by default).</p>",
        "id": 482891480,
        "sender_full_name": "Scally",
        "timestamp": 1731873504
    },
    {
        "content": "<p>You can find an example for making a custom inspect impl here <a href=\"https://www.roc-lang.org/examples/CustomInspect/README.html\">https://www.roc-lang.org/examples/CustomInspect/README.html</a></p>",
        "id": 482892092,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731873963
    },
    {
        "content": "<p>you can also do <code>Foo := { ...whatever ... } implements [Inspect]</code> to get an automatic implementation</p>",
        "id": 482893021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731874714
    },
    {
        "content": "<p>Is there any way to get that opaque type into something that would expect a string then?<br>\nI'd like to create an Http Request that logs as the opaque type but sends the request with the correct string.<br>\nAlso the Http Request definition requires a Str so it doesn't allow my opaque string-equivalent type.</p>",
        "id": 482894246,
        "sender_full_name": "Scally",
        "timestamp": 1731875759
    },
    {
        "content": "<p>You can use <code>Inspect.toStr thing</code> to stringify an Opaque thing.</p>",
        "id": 482894360,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731875854
    },
    {
        "content": "<p>Doesn't that just insert the censored output into the string field though? What I'd need is for the real value to be sent with the request nontheless.</p>\n<p>What I'd like is</p>\n<div class=\"codehilite\"><pre><span></span><code>Token := Str\nsecretTokenFromFile = @Token (#some fileread)\ndbg secretTokenFromFile      # =&gt; &lt;opaque&gt;\n\nrequest = { Http.defaultRequest &amp; url: &quot;[...]&quot; , headers: [(Http.header &quot;Cookie&quot; &quot;session=$(Inspect.toStr secretTokenFromFile)&quot;] }\ndbg request      # =&gt; {body: [], headers: [{key: &quot;Cookie&quot;, value: &quot;session=&lt;opaque&gt;&quot;}], ...\n\nHttp.send request     # =&gt; actually send the request but with session=515sfkde\n</code></pre></div>",
        "id": 482895341,
        "sender_full_name": "Scally",
        "timestamp": 1731876674
    },
    {
        "content": "<p>Oh, I see. You want it to stay opaque even in the request header</p>",
        "id": 482901079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731881736
    },
    {
        "content": "<p>I'd like it opaque when logging the request object or anything similar but not when actually sending the request</p>",
        "id": 482901158,
        "sender_full_name": "Scally",
        "timestamp": 1731881790
    },
    {
        "content": "<p>That would only work if the http headers were opaque or if there was at least a custom header for opaque strings (wouldn't be automatic though).</p>",
        "id": 482901201,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731881842
    },
    {
        "content": "<p>My gut feeling is that you should be logging something earlier in your chain that knows everything about the request and consider the actual http headers and such as your boundary to the platform (which can't be opaque)</p>",
        "id": 482901273,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731881900
    },
    {
        "content": "<p>That could be a record with a session field of the opaque type</p>",
        "id": 482901294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731881940
    },
    {
        "content": "<p>I hope I'm not hijacking a thread inappropriately (and if so happy to start a new one), but I'm having some related difficulties, which I'm sure reflect my (very deep) ignorance of how <code>implements</code> works.  (At this point I'm cargo-cult coding to a considerable degree, so please forgive me.)</p>\n<p>If I define a custom type as per the example (<a href=\"https://www.roc-lang.org/examples/CustomInspect/README.html\">https://www.roc-lang.org/examples/CustomInspect/README.html</a>) which implements Inspect via <code>toInspector</code>, and then directly create custom types ... all works as expected.</p>\n<p>But if I then alias that custom type (say, to use the example, <code>Rainbow : Color</code>) and then have a function that returns the <em>aliased</em> type, then the custom inspector does not work on the aliased type, which appears simply as \"&lt;opaque&gt;\" again.  I've tried adding various invocations of <code>implements</code> <em>to the alias</em>, but the compiler is not happy (which doesn't surprise me because after all this is just an alias so ...)</p>\n<p>What <em>should</em> I be doing?</p>\n<p>This appears also to affect other abilities (is that the right jargon?). The same custom type implements Eq, but when it tries to deal with equality for a <code>List</code> of that type which has been aliased, Roc complains that it can't generate the <code>Eq</code> ability for the custom type. (As it happens the custom type just wraps a U32 ...) What's odd is that the compiler obviously \"sees\" the underlying custom type behind the alias, because it complains that it can't generate an implementation for <em>that</em> type.</p>\n<p>Sorry if/that I'm being stupid.</p>",
        "id": 483802393,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732229013
    },
    {
        "content": "<p>Maybe it's a compiler bug? it wouldn't surprise me if this was just an edge case that we haven't seen before</p>",
        "id": 483802533,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732229076
    },
    {
        "content": "<p>If it helps at all here's a (sort of minimal) example based on the example:</p>\n<div class=\"codehilite\"><pre><span></span><code>Color := [\n    Red,\n    Green,\n    Blue,\n]\n    implements [\n        Inspect { toInspector: colorInspector },\n    ]\n\nRainbow : Color\n\nmakeRainbow : Str -&gt; Rainbow\nmakeRainbow = \\s -&gt;\n    when s is\n        &quot;Red&quot; -&gt; @Color Red\n        &quot;Blue&quot; -&gt; @Color Blue\n        _ -&gt; @Color Green\n\ncolorInspector : Color -&gt; Inspector f where f implements InspectFormatter\ncolorInspector = \\@Color color -&gt;\n    when color is\n        Red -&gt; Inspect.str &quot;_RED_&quot;\n        Green -&gt; Inspect.str &quot;_GREEN_&quot;\n        Blue -&gt; Inspect.str &quot;_BLUE_&quot;\n\nlistIdentity : List Str -&gt; List Rainbow\nlistIdentity = \\colors -&gt;\n    List.map colors \\c -&gt;\n        when c is\n            &quot;R&quot; -&gt; makeRainbow &quot;Red&quot;\n            &quot;G&quot; -&gt; makeRainbow &quot;Green&quot;\n            _ -&gt; makeRainbow &quot;Blue&quot;\n\nexpect\n    result = makeRainbow &quot;Red&quot;\n\n    Inspect.toStr result == &quot;\\&quot;_Red_\\&quot;&quot;\nexpect\n    result = Inspect.toStr (listIdentity [&quot;R&quot;, &quot;B&quot;])\n    result == &quot;[\\&quot;_RED_\\&quot;, \\&quot;_BLUE_\\&quot;]&quot;\n</code></pre></div>\n<p>Producing (e.g.)</p>\n<div class=\"codehilite\"><pre><span></span><code>This expectation failed:\n\n42│&gt;  expect\n43│&gt;      result = Inspect.toStr (listIdentity [&quot;R&quot;, &quot;B&quot;])\n44│&gt;      result == &quot;[\\&quot;_RED_\\&quot;, \\&quot;_BLUE_\\&quot;]&quot;\n\nWhen it failed, these variables had these values:\n\nresult : Str\nresult = &quot;[&lt;opaque&gt;, &lt;opaque&gt;]&quot;\n</code></pre></div>",
        "id": 483803009,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732229328
    },
    {
        "content": "<p>Yeah, compiler bug</p>",
        "id": 483836990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732251267
    },
    {
        "content": "<p>Thanks! Weirdly exciting to have bumped up against a compiler bug and not a my-brain bug ... I get the impression (and I <em>still</em> don't really understand the details!) that the whole abilities/implement is about to turn into a different scheme, so presumably a bug that can be left to stew in its own juice.</p>",
        "id": 483843681,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732256098
    },
    {
        "content": "<p>Do you see the same bug if <code>Color</code> is not opaque?</p>",
        "id": 483885709,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732273168
    },
    {
        "content": "<p>Sorry: I don't understand. My fault I'm sure. If Color is not a custom type but just an alias for something nice and ordinary, then I don't think there's a bug ... but there's neither a need nor (?) an ability to implement a custom inspector for it, is there? The problem seems to be when there's a custom type \"hidden\" behind a type alias.</p>",
        "id": 484069347,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732372240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"775526\">@Paul Stanley</span> you're on the money, aliases can't have Ability impls, so this doesn't apply there</p>",
        "id": 484069509,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732372409
    },
    {
        "content": "<p>What's effectively happening is that an ability defined on a custom type is _not_ \"percolating down\" (at least sometimes, it seems a bit inconsistent) to an _alias_ for that custom type. It's also happening with other abilities ... at least Eq. Though I can't seem to generate a nice minimal example, I'm afraid. But when I've got aliased custom types in a list, I've had to resort to a recursive hand-rolled comparison function which casts back to the underlying representation ... but perhaps that's by design.</p>",
        "id": 484070370,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732373205
    },
    {
        "content": "<p>I don't believe that's the intended design</p>",
        "id": 484075469,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732377670
    }
]