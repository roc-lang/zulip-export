[
    {
        "content": "<p>I'm just getting started with Roc and trying to get used to its tags and types, etc. Reading the tutorial it sounds great, but when I try to implement my data model I find I'm not sure how best to do it. I'm trying to implement the <code>Concept</code> types from <a href=\"https://github.com/balhoff/whelk/blob/master/modules/core/src/main/scala/org/geneontology/whelk/Model.scala\">this file</a>.  I created a tag union like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Role : { id : Str }\n\nConcept : [\n    AtomicConcept { id : Str },\n    Conjunction { left : Concept, right : Concept },\n    ExistentialRestriction { role : Role, concept : Concept }\n]\n</code></pre></div>\n<p>But sometimes I need to have List containing just one of those types, (like <code>List Conjunction</code>). In Scala all of these are also first class types. What's the recommended approach for this in Roc? I tried to make a type for the structure, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>ConjunctionRecord : {\n    left: Concept,\n    right: Concept\n}\n\nConcept : [\n    AtomicConcept { id : Str },\n    Conjunction ConjunctionRecord,\n    ExistentialRestriction { role : Role, concept : Concept }\n]\n</code></pre></div>\n<p>But <code>roc check</code> gives an error: <code>fatal runtime error: stack overflow</code></p>",
        "id": 342592883,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679066725
    },
    {
        "content": "<p>could you file an issue with repro on the <code>stack overflow</code>?</p>",
        "id": 342595706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679067258
    },
    {
        "content": "<p>Oh, I think what you want to do is currently bugged in roc such that you can't clean write it in roc.</p>",
        "id": 342596019,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679067315
    },
    {
        "content": "<p>Fundamentally, your second example should work, but we have a recursive type issue currently.</p>",
        "id": 342596137,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679067337
    },
    {
        "content": "<p>It makes it so that the <code>ConjunctionRecord</code> need to be inlined into the <code>Concept</code> definition because it recursively uses <code>Concept</code></p>",
        "id": 342596333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679067372
    },
    {
        "content": "<p>What you can do currently:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># Define the limited type to avoid the bug</span>\n<span class=\"nv\">Concept</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"nx\">AtomicConcept</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"nx\">Conjunction</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Concept</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Concept</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"nx\">ExistentialRestriction</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">role</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Role</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">concept</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Concept</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># When you need to use just the `ConjunctionRecord`, don't type, or type manually</span>\n<span class=\"nv\">usesConjunctionsOnly</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">left</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Concept</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Concept</span><span class=\"p\">}</span>\n<span class=\"nv\">usesConjunctionsOnly</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">...</span>\n</code></pre></div>",
        "id": 342597003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679067511
    },
    {
        "content": "<p>Thanks! Would you say that my second approach would be the recommended style if not for the bug?</p>",
        "id": 342598018,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679067713
    },
    {
        "content": "<p>I think so.</p>",
        "id": 342598287,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679067759
    },
    {
        "content": "<p>In Scala I also define a trait <code>Entity</code> which groups things that have an <code>id</code> property. So <code>AtomicConcept</code> and <code>Role</code> are both entities. I would create a function like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>signature : Concept -&gt; Set Entity\n</code></pre></div>\n<p>I guess for that I would define another tag union, but I feel like I would repeat some of the info I've put in my <code>Concept</code> definition.</p>",
        "id": 342600370,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679068140
    },
    {
        "content": "<p>four options:</p>\n<ol>\n<li>another tag union</li>\n<li>if they have the same field in a record, just make a functions <code>\\{id} -&gt; id</code> it will extract from any record with an <code>id</code> field.</li>\n<li>use a higher order function an pass around a lambda to extract the field to functions that need it.</li>\n<li><code>Abilities</code> which are very much like <code>Traits</code></li>\n</ol>",
        "id": 342601089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679068287
    },
    {
        "content": "<p>Oh, though you want to put them all in a <code>Set</code>. I assume a <code>Set Entity</code> would have a mix of types in it? Not just one <code>Entity</code> type at a time?</p>",
        "id": 342601418,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679068351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/porting.20data.20model.20from.20Scala/near/342601418\">said</a>:</p>\n<blockquote>\n<p>Oh, though you want to put them all in a <code>Set</code>. I assume a <code>Set Entity</code> would have a mix of types in it? Not just one <code>Entity</code> type at a time?</p>\n</blockquote>\n<p>That's right.</p>",
        "id": 342601557,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679068380
    },
    {
        "content": "<p>If so, the tag approach is the only option. The tag is what enables unifying them in memory representation to put into a <code>Set</code>.</p>",
        "id": 342601646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679068392
    },
    {
        "content": "<p>Great, thanks for all the info. I'll keep experimenting and hopefully get used to Roc's approach.</p>",
        "id": 342602245,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679068502
    },
    {
        "content": "<p>This looks like it could be the same stack overflow error: <a href=\"https://github.com/roc-lang/roc/issues/4709\">https://github.com/roc-lang/roc/issues/4709</a></p>",
        "id": 342639642,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679077834
    },
    {
        "content": "<p>Yeah, I think it is the same</p>",
        "id": 342640588,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679078113
    },
    {
        "content": "<p>A similar? issue that I haven't found a workaround for: <a href=\"https://github.com/roc-lang/roc/issues/5162\">https://github.com/roc-lang/roc/issues/5162</a></p>",
        "id": 343138102,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679323054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I'm still trying to get my project to buildâ€”I opened a couple more issues on GitHub. Should I keep posting those as I encounter them? Don't want to become annoying. :-)</p>",
        "id": 344697250,
        "sender_full_name": "Jim Balhoff",
        "timestamp": 1679853004
    },
    {
        "content": "<p>Generally better to post multiple bugs if you aren't sure they are duplicates and let us merge them.</p>",
        "id": 344699681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679854389
    }
]