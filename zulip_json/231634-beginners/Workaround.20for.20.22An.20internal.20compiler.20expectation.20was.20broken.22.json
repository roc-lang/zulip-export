[
    {
        "content": "<p>I'm working on a simple JSON parser in Roc but have run into a compiler bug:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc --version\nroc nightly pre-release, built from commit 5646f829dcd on Sat Oct 12 09:13:49 UTC 2024\n\n\n$ roc run  examples/simple1.roc\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nI thought a non-nullable-unwrapped variant for a lambda set was impossible: how could such a lambda set be created without a base case?\nLocation: crates/compiler/mono/src/layout.rs:1705:61\n</code></pre></div>\n<p>I have no clue what is triggering this bug so I'm kind of stuck now. <br>\nAny ideas what I can do to workaround the bug?  <br>\nShould I report it? </p>\n<p>The source of my project can be found  here: <a href=\"https://github.com/konnik/roc-json-parser\">https://github.com/konnik/roc-json-parser</a></p>\n<p>Any help appreciated.</p>",
        "id": 476632020,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728848990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544552\">@Niklas Konstenius</span> Richard is working on the lambda sets code right now, there's a good chance that this is fixed by that. Until then, there's not a great way around it besides trying to reshape your API \"until it works\"</p>",
        "id": 476638102,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728854128
    },
    {
        "content": "<p>Tends to happen with very recursive functions often with dynamic captures (like parser combinators), but I don't have a good solution. My best advice is comment out code until it works and then try writing code that doesn't work in different ways. Also, if you have functions that return functions, it sometimes can help to wrap that whole thing in another function:<br>\nInstead of:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">myFunc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">funcGenerator</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n</code></pre></div>\n<p>It would be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">myFunc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">funcGenerator</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n</code></pre></div>",
        "id": 476642362,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728858771
    },
    {
        "content": "<p>But yeah, this is probably the sharpest edge of the type system and compiler lowering right now. Hopefully richards coming fixes will remove the error all together, but no idea how long that will take to land</p>",
        "id": 476642384,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728858814
    },
    {
        "content": "<p>Oh, also, make sure your code passes <code>roc check ...</code>. Sometimes that catches the real issue</p>",
        "id": 476642394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728858830
    },
    {
        "content": "<p>Thanks for the info.   The code is a classic recursive descend parser using combinators so it's seems it pretty likely to trigger this bug then. </p>\n<p>I wrote the hole parser in one go using only <code>roc check</code> so I have really no clue which of the lines triggered the bug.  I will try your rewrite suggestions and do some general cleanup and hopefully this will make it work. Otherwise I'll just wait for Richard to save us. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 476683865,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728885916
    }
]