[
    {
        "content": "<p>Very sad if so. Not to repeat other threads, but this is a beautiful general-purpose tool to improve callback readability (in absence of true monads it is responsible for like a third of my initial interest in Roc). As a personal opinion I don't share the reasoning it is not needed because of specialized <code>!</code> and <code>?</code> operators, or it is hard to learn.</p>\n<p>I haven't followed Zulip in a while and have only seen a few related threads, so just linking any relevant threads is appreciated.</p>",
        "id": 464976404,
        "sender_full_name": "Karakatiza",
        "timestamp": 1724580126
    },
    {
        "content": "<p>Currently, backpassing has not been removed from the language, just added the deprecation warning for this reason. We'd like people to write code using either the other operators or normal callbacks and feel out how the resulting code looks. </p>\n<p>Though you may not have a hard time with back passing, there are many people that have expressed difficulty with grokking the syntax between Roc and Gleam's use keyword. We want to optimize the trade-off between beginner friendliness and clean code, so if people are able to write code that's clean enough without backpassing, we'd rather make Roc accessible.</p>\n<p>If it really makes code that much worse, we can just re-enable it.</p>",
        "id": 465025939,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724602149
    },
    {
        "content": "<p>Do you want to make Roc friendly for people new to programming or for people switching languages? I think backpassing is mainly an issue for people switching languages, and for them, the exclamation mark won't help much since it has so many different uses in so many languages...</p>",
        "id": 465376826,
        "sender_full_name": "rudolf",
        "timestamp": 1724749396
    },
    {
        "content": "<blockquote>\n<p>Do you want to make Roc friendly for people new to programming or for people switching languages?</p>\n</blockquote>\n<p>We consider both when making decisions. My feeling is that backpassing could be the most difficult concept in Roc to truly grasp for those new to programming.</p>",
        "id": 465385807,
        "sender_full_name": "Anton",
        "timestamp": 1724751270
    },
    {
        "content": "<p>The problem is that the only way to figure it out is through user studies...</p>\n<p>I remember hearing on functional programming podcasts (not sure which one) that people new to programming pick up functional programming very easily. Much easier than imperative/OO programmers.</p>\n<p>I'd say good documentation is more important than removing seemingly complicated features.</p>\n<p>(P.S. the Tutorial is already very good documentation)</p>",
        "id": 465410553,
        "sender_full_name": "rudolf",
        "timestamp": 1724756452
    },
    {
        "content": "<blockquote>\n<p>The problem is that the only way to figure it out is through user studies...</p>\n</blockquote>\n<p>That is true, it seems like those would be hard to set up with our current resources.</p>\n<p>We currently rely on user feedback through zulip, extensive discussion of changes like adding/deprecating backpassing and our own experiences using Roc. Can we improve this process without spending significant effort?</p>\n<blockquote>\n<p>I'd say good documentation is more important than removing seemingly complicated features.</p>\n</blockquote>\n<p>Good documentation is valuable. I also think we should try replacing complicated features with less complicated ones if these replacements can deliver. For example; it seems like an important reason for python's success is that is easy  to get started with.</p>\n<p>The decision on the removal of backpassing is not final, I recommend that anyone who wants to make their case opens a topic for discussion with 3 examples comparing both approaches side-by-side. We've found it helpful to discuss specific code when it comes to these things.</p>\n<p>Sidenote: Richard is working on a proposal that could drastically simplify code compared to our current usage of <code>!</code>.</p>",
        "id": 465425967,
        "sender_full_name": "Anton",
        "timestamp": 1724760332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676751\">rudolf</span> <a href=\"#narrow/stream/231634-beginners/topic/Is.20backpassing.20done.20for.3F/near/465410553\">said</a>:</p>\n<blockquote>\n<p>I'd say good documentation is more important than removing seemingly complicated features.</p>\n</blockquote>\n<p>in general I'd say the opposite: simplifying is more important than documenting complexity <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 465429388,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724760908
    },
    {
        "content": "<p>Btw. isn't \"backpassing\" the problem (the name)?</p>\n<p>@rudolf didn't say documenting complexity, he said good documentation <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> .</p>\n<p>In my opinion, backpassing isn't more complicated than an exclamation mark.</p>\n<p>But my opinion doesn't matter since I'm coming from Haskell and from my perspective it's all simple to use.</p>",
        "id": 465461046,
        "sender_full_name": "Ostar",
        "timestamp": 1724766770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"748724\">Ostar</span> <a href=\"#narrow/stream/231634-beginners/topic/Is.20backpassing.20done.20for.3F/near/465461046\">said</a>:</p>\n<blockquote>\n<p>Btw. isn't \"backpassing\" the problem (the name)?</p>\n</blockquote>\n<p>I wish! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 465476405,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724770642
    },
    {
        "content": "<blockquote>\n<p>backpassing isn't more complicated than an exclamation mark.</p>\n</blockquote>\n<p>I really thought the same, but after years of working on roc and helping users, <code>!</code> is something users are happy with not understanding and handwaving away. <code>&lt;-</code> is strange enough, especially when paired with <code>|&gt;</code> that users feel the need to grok it fully. I think the constraints of <code>!</code> are probably part of why users just accept it. Code still reads relatively normal and it is only every used as <code>Task.await</code>. Backpassing reads weirder and can be used in some many more contexts.</p>",
        "id": 465504689,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777341
    },
    {
        "content": "<p>I love backpassing at this point and wish Roc was keeping it, but I totally get why it is being removed and think it is probably the better choice.</p>",
        "id": 465504916,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777391
    }
]