[
    {
        "content": "<p>How do we store/query data when using Roc?</p>",
        "id": 418715235,
        "sender_full_name": "Shawn",
        "timestamp": 1706560268
    },
    {
        "content": "<p><a href=\"https://github.com/agu-z/roc-pg\">roc-pg</a> is the only existing database driver</p>",
        "id": 418715595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706560388
    },
    {
        "content": "<p>Though people have also used the sqlite cli via sub processes</p>",
        "id": 418715645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706560405
    },
    {
        "content": "<p>I am wondering what would be easier: to create native database connectors, like <code>roc-pg</code> or to use something like libpg wrappers or some ready to use C/C++ connectors?</p>",
        "id": 425511256,
        "sender_full_name": "witoldsz",
        "timestamp": 1709901886
    },
    {
        "content": "<p>We recently included <a href=\"https://github.com/roc-lang/basic-webserver/blob/main/examples/sqlite3.roc\">sqlite in basic-webserver</a>, that may be the most convenient way.</p>",
        "id": 425514491,
        "sender_full_name": "Anton",
        "timestamp": 1709902983
    },
    {
        "content": "<p>Forking a platform and wrapping another library is probably the easiest to get started.</p>\n<p><a href=\"https://lukewilliamboswell.github.io/roc-htmx-demo-2/#step2\">here is an example</a> of the sqlite on action. I like this example for how I parse the rows and handle errors.</p>",
        "id": 425600549,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1709928970
    },
    {
        "content": "<p>Forking a platform looks like a workaround, or is it The Way®™?</p>",
        "id": 425893501,
        "sender_full_name": "witoldsz",
        "timestamp": 1710158466
    },
    {
        "content": "<p>for something like this, I'd say:</p>\n<ul>\n<li>forking a platform is a better way to get up and running faster (in general, \"fork a platform to get access to something specific in the host ecosystem\" has always been an intended way to let application authors get unblocked quickly!)</li>\n<li>long-term, building a client in Roc, like how <code>roc-pg</code> does, should be the best user experience and doesn't require forking anything.</li>\n</ul>",
        "id": 425894282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710158720
    },
    {
        "content": "<p>so it really depends on what your goals are - get the application working quickly, or make an investment in the ecosystem? Either is totally reasonable, depending on your priorities! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 425894412,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710158763
    },
    {
        "content": "<p>Is there any long-term plan for a 3rd option which would not require forking a platform and also not having to implement an integration from scratch? I don't know what would that be, like a… plugin for a platform?</p>",
        "id": 425918558,
        "sender_full_name": "witoldsz",
        "timestamp": 1710166618
    },
    {
        "content": "<p>in the specific case of a database client, I think the optimal long-term plan is to implement them in Roc like how <code>roc-pg</code> does it</p>",
        "id": 425936733,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710171395
    },
    {
        "content": "<p>it's the simplest, the safest, and the most portable</p>",
        "id": 425936927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710171448
    },
    {
        "content": "<p>the only downside is that it has to actually be implemented <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 425936976,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710171462
    },
    {
        "content": "<p>which is why it's the best long-term but maybe not in the immediate term depending on what you're building!</p>",
        "id": 425937046,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710171481
    },
    {
        "content": "<p>Implementing is not the hard part. The hard part is to keep it up to date and follow all the new features. It might be a real problem for Roc – I can see how much a problem it's sometimes in languages with much larger community like F#, where implementing a PG library is just a thin wrapper around Dotnet/C# and <strong>even though</strong> it lags behind very often. </p>\n<p>As I said, implementing something like a full featured database (or RabbitMQ) driver is seems like the easy part, the long-term maintenance is hell, because very often the founder is no longer paying attention.</p>\n<p>At the end of a day, a F# team can take a desperate measure and just switch to a C# library. For Roc, the equivalent would be to switch to C/C++/Rust/Zig/whatever C-like and go from there instead.</p>",
        "id": 425943265,
        "sender_full_name": "witoldsz",
        "timestamp": 1710173072
    },
    {
        "content": "<p>I don't think we should take it as a given that in the long term Roc's community will be small; in fact, I assume the opposite <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 425944654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710173467
    },
    {
        "content": "<p>I appreciate that database clients are not simple projects, but I don't think that changes the fact that it's simplest, safest, and most portable to do it in Roc</p>",
        "id": 425944943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710173533
    },
    {
        "content": "<p>the <a href=\"https://github.com/npgsql/npgsql\">most popular C# pg client</a> is 100% C#, and the <a href=\"https://github.com/pgjdbc/pgjdbc\">most popular Java pg client</a> is 100% Java.</p>",
        "id": 425945557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710173704
    },
    {
        "content": "<p>same <a href=\"https://pkg.go.dev/github.com/lib/pq\">for Go</a></p>",
        "id": 425945813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710173769
    },
    {
        "content": "<p>maybe there was a time when these were C wrappers (C# and Java were both small communities once, too, and certainly Go is smaller than either) but clearly it's realistic to implement database clients without wrapping existing drivers in other languages, and I think when we're talking about the long term we should plan for doing what's best! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 425946075,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710173848
    }
]