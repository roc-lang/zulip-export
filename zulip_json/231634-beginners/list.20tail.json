[
    {
        "content": "<p>In Elm, it is common to pattern match a list using head and tail.</p>\n<div class=\"codehilite\"><pre><span></span><code>tail : List a -&gt; Maybe (List a)\ntail list =\n  case list of\n    x :: xs -&gt;\n      Just xs\n\n    [] -&gt;\n      Nothing\n</code></pre></div>\n<p>What is the equivalent for Elms <code>x::xs</code> in Roc?</p>",
        "id": 406849420,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1702075130
    },
    {
        "content": "<p>From the pattern matching examples in the tutorial, it is not apparent to me how i would get the tail:</p>\n<div class=\"codehilite\"><pre><span></span><code>when myList is\n    [] -&gt; 0 # the list is empty\n    [Foo, ..] -&gt; 1 # it starts with a Foo tag\n    [_, ..] -&gt; 2 # it contains at least one element, which we ignore\n    [Foo, Bar, ..] -&gt; 3 # it starts with a Foo tag followed by a Bar tag\n    [Foo, Bar, Baz] -&gt; 4 # it has exactly 3 elements: Foo, Bar, and Baz\n    [Foo, a, ..] -&gt; 5 # its first element is Foo, and its second we name `a`\n    [Ok a, ..] -&gt; 6 # it starts with an Ok containing a payload named `a`\n    [.., Foo] -&gt; 7 # it ends with a Foo tag\n    [A, B, .., C, D] -&gt; 8 # it has certain elements at the beginning and end\n</code></pre></div>",
        "id": 406849433,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1702075138
    },
    {
        "content": "<p>It's this: <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Erlang\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">Ok</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">   </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">Err</span><span class=\"w\"> </span><span class=\"nv\">ListWasEmpty</span>\n</code></pre></div>",
        "id": 406849799,
        "sender_full_name": "joshi",
        "timestamp": 1702075377
    },
    {
        "content": "<p>Tutorial needs updating, that is a new feature.</p>",
        "id": 406850525,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702075810
    },
    {
        "content": "<p>I created <a href=\"https://github.com/roc-lang/roc/issues/6223\">https://github.com/roc-lang/roc/issues/6223</a> for this.</p>",
        "id": 406850803,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702075994
    },
    {
        "content": "<p>I have a related question. I don't see a <code>List.tail</code> function, is <code>List.dropFirst 1</code> the best way to do this? Is there a performance difference between this and the <code>when list is</code> approach?</p>",
        "id": 406858941,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1702080736
    },
    {
        "content": "<p>It may have been a performance issue before... I'm not sure. But I wouldn't be surprised if that was the reason, and now with Seamless Slices implemented it may no longer be the case and we should discuss the pro's of adding something like that.</p>",
        "id": 406860285,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702081478
    },
    {
        "content": "<p>Probably could add it now.</p>",
        "id": 406863408,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702083101
    },
    {
        "content": "<p>And yeah, would be exactly the same as the <code>when ... is</code> or <code>List.dropFirst 1</code></p>",
        "id": 406863489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702083125
    },
    {
        "content": "<p>So all versions should perform great now</p>",
        "id": 406863536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702083155
    },
    {
        "content": "<p>as it was marked as a <em>good first issue</em> i thought i'd give it a go. <a href=\"https://github.com/roc-lang/roc/pull/6229\">https://github.com/roc-lang/roc/pull/6229</a></p>",
        "id": 406911100,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1702112486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/list.20tail/near/406860285\">said</a>:</p>\n<blockquote>\n<p>It may have been a performance issue before... I'm not sure. But I wouldn't be surprised if that was the reason, and now with Seamless Slices implemented it may no longer be the case and we should discuss the pro's of adding something like that.</p>\n</blockquote>\n<p>Oh! This comment made me realise that my understanding of performance in Roc is a bit dated. And I did not find anything in the docs about seamless slices. Like, with seamless slices, is it still more performant to append values to the end of the list instead of prepending values at the front?</p>",
        "id": 406929721,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1702124702
    },
    {
        "content": "<p>In Elm and many functional languages, it's common to work with lists as head+tail because they're linked lists, where random access is slow, and working at the head of the list is easy.<br>\nIn Roc, Lists are are arrays under the hood, a big continuous chunk of memory, so random access is just fine. So it's not as necessary to deconstruct a list like this.</p>",
        "id": 406967897,
        "sender_full_name": "Sky Rose",
        "timestamp": 1702152700
    },
    {
        "content": "<p>I assumed List was a linked list due to its name and similarity to other languages. Is there a reason it is named List instead of Array?</p>\n<p>Could we clarify the type of list in the docs somewhere? Perhaps at the top of the List docs?</p>",
        "id": 406970149,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1702155151
    },
    {
        "content": "<p>yeah array means static length in some languages (C, Rust)</p>",
        "id": 406970523,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702155602
    },
    {
        "content": "<p>Naming of this things is always confusing (array, list, vector, collection?, probably more). I think <code>List</code> is fine, but we should add to the docs how it works under the hood, since it's often important for performance</p>",
        "id": 406970939,
        "sender_full_name": "LoipesMas",
        "timestamp": 1702155836
    },
    {
        "content": "<p>Python and Java both use <code>List</code> in a way that isn't specific to linked lists, and they're 2 of the 3 most popular languages in the world so I think that's some solid precedent <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 406970995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702155849
    },
    {
        "content": "<p>Specifically I think a guide in the language reference over here <a href=\"https://www.roc-lang.org/docs#language-reference\">https://www.roc-lang.org/docs#language-reference</a></p>",
        "id": 406971789,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702156636
    }
]