[
    {
        "content": "<p>Might sound a bit stupid, but here I go anyway.</p>\n<p>Haskell has a dot operator for function composition. Could Roc use it as some sort of pipe?</p>\n<p><code>emptyDict . insert k v</code></p>\n<p>Creates an empty map and then calls insert with the first argument being this empty map.</p>",
        "id": 276116922,
        "sender_full_name": "Philippe",
        "timestamp": 1647898356
    },
    {
        "content": "<p>There is a pipe operator that works exactly that way. It's <code>|&gt;</code></p>",
        "id": 276117061,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1647898443
    },
    {
        "content": "<p>Yes, I know :)</p>\n<p>But if people want dot notation, give them dot notation.</p>\n<p>After, we can't please everyone. Should we allow code to be written in two different ways or enforce / greatly suggest the Roc way.</p>",
        "id": 276117421,
        "sender_full_name": "Philippe",
        "timestamp": 1647898658
    },
    {
        "content": "<p>It would still end up being this in Roc even if we had a <code>.</code> operator for composition:<br>\n<code>Dict.empty {} . Dict.insert k v</code></p>",
        "id": 276117800,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647898883
    },
    {
        "content": "<p>Dots already mean record field access in Roc:</p>\n<div class=\"codehilite\"><pre><span></span><code>record = { field: &quot;foo&quot;, other: &quot;bar&quot; }\ntransform = \\r -&gt; { r &amp; field: &quot;baz&quot; }\n\na = transform record\nb = a.field\n\nc = (transform record).field\n\nd = record |&gt; transform |&gt; .field\n\nb == c == d\n</code></pre></div>\n<p>It would be very confusing if they also meant composition when followed by a space: <code>record . transform . .field</code></p>",
        "id": 276118230,
        "sender_full_name": "jan kili",
        "timestamp": 1647899133
    },
    {
        "content": "<p>there's actually an FAQ entry on this!</p>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/5e9e7f3ad549c3ad8e5966303cfb6c4a56fea06f/FAQ.md#pointfree-function-composition\">https://github.com/rtfeldman/roc/blob/5e9e7f3ad549c3ad8e5966303cfb6c4a56fea06f/FAQ.md#pointfree-function-composition</a></p>",
        "id": 276123828,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647903121
    },
    {
        "content": "<p>not having a pointfree function composition operator is an intentional design decision - more details in the FAQ entry!</p>",
        "id": 276123923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647903176
    },
    {
        "content": "<p>I actually think <code>(.)</code> is one of the best omissions Elm made as a language. The number of times I had to explain to people how it works speaks to it's lack of affordance and readability in my opinion. Elm, and a lot of alternative preludes in Haskell use <code>(&lt;&lt;)</code> (and the imo more reasonable <code>(&gt;&gt;)</code>) instead, because it shows which direction the composition follows. But, to be honest, I rarely reach for point-free style in my programs because pipelines usually read cleaner than function composition</p>",
        "id": 276233371,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1647973223
    },
    {
        "content": "<p>I have found that the clearest way to use point-free function composition, ironically, is to give the resulting function a name, somewhat defeating the point of concise composition.</p>",
        "id": 276281729,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1648002535
    }
]