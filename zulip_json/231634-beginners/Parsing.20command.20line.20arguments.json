[
    {
        "content": "<p>Can someone please help me with a simple task? I'm trying to write a program that takes a list of integers on the command line, and prints their sum. Something roughly equivalent to this Python code:</p>\n<div class=\"codehilite\"><pre><span></span><code>import sys\nprint(sum([int(arg) for arg in sys.argv[1:]]))\n</code></pre></div>\n<p>I wrote the following program, but Roc complains about the type of parseNumber, and I'm lost.</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br&quot; }\n\nimport pf.Stdout\nimport pf.Task\nimport pf.Arg\n\nparseNumber = \\arg -&gt;\n    when Str.toU8 arg is\n      Ok number -&gt; Task.ok number\n      Err msg -&gt; Task.err (Exit 1 &quot;Invalid argument \\&quot;${arg}\\&quot;: ${msg}&quot;)\n\nparseNumbers = \\args -&gt;\n    args |&gt; List.dropFirst 1 |&gt; List.map parseNumber!\n\nmain =\n    numbers = Arg.list! {} |&gt; parseNumbers!\n    total = List.sum numbers\n    Stdout.line! &quot;Sum of numbers: $(Num.toStr total)&quot;\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 454597049,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722162904
    },
    {
        "content": "<p>Here's one way to do it</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Arg</span>\n\n<span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidArgument</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">acc</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">InvalidNumStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">InvalidArgument</span><span class=\"w\"> </span><span class=\"s\">\"Got invalid argument $(first)\"</span><span class=\"p\">)</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"3\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">isErr</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"nv\">numbers</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">args</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">fromResult</span><span class=\"err\">!</span>\n\n<span class=\"w\">    </span><span class=\"nv\">total</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nv\">numbers</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"Sum of numbers: $(Num.toStr total)\"</span>\n</code></pre></div>\n<p>edit: added the drop first arg which is the program name</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc parseNumbers.roc -- 1 2 3 4\nSum of numbers: 10\n</code></pre></div>",
        "id": 454597639,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722163469
    },
    {
        "content": "<p>This is a slightly more complicated to support the early return with an error. </p>\n<p>If you are happy just mapping the argument <code>List Str</code> into a <code>List U8</code> and only keeping the valid ones its easier. </p>\n<div class=\"codehilite\"><pre><span></span><code>args =\n    Arg.list {}\n    |&gt; Task.map \\argStrs -&gt; argStrs |&gt; List.keepOks Str.toU8\n</code></pre></div>",
        "id": 454598008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722163823
    },
    {
        "content": "<p>I think that should be <code>Str.toUtf8</code> at the end there (not toU8)</p>",
        "id": 454613964,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722174009
    },
    {
        "content": "<p>I think Str.toU8 is the right idea, but probably would be better to use a larger integer type</p>",
        "id": 454619112,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1722177677
    },
    {
        "content": "<p>In context it could be like this</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nv\">total</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">args</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toI64</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"The sum is $(total |&gt; Num.toStr)\"</span>\n</code></pre></div>",
        "id": 454619127,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1722177697
    },
    {
        "content": "<p>Thanks guys, that's very helpful! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span><br>\nMy plan is to solve Advent-of-Code 2020 using Roc, so the numbers I'm trying to parse are actually days, from 1 to 25, hence the <code>U8</code>. I don't actually need to compute their sum, but it was simpler to explain.</p>\n<p>In case you're interested in the preliminary impressions of a complete newbie (just as a data point), here are my thoughts so far:</p>\n<ul>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> The tutorial is world class. More generally, the website is a fantastic resource, and I love how the objectives and limitations are made super clear.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> I really like the tag system and its use for error management. This is a pain point for me in other languages, so I'm looking forward to trying it out so more.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Separating platforms and apps is really interesting.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> The community is very welcoming and helpful</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Installing Roc on my Macbook took less than a minute</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Setting up Roc in VSCode was also a breeze, and it nicely auto-formats the code.</li>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> The docs and examples are not fully in sync with the latest release. In particular, I struggled to get <code>Arg.list!</code> to work (I had to add <code>{}</code> and change the basic-cli version).</li>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> The compiler's error messages are not always clear enough. For example, I really got 100% stuck on the simple problem above, despite my best efforts. Try running my code to see what I mean. Perhaps the tutorial needs more examples of <code>Task</code> / <code>Result</code> interaction.</li>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> I wish I could hover over a def in VSCode and get its type.</li>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> The language seems very verbose (e.g., <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> 's code above is clear but quite long for such a simple task). It might just be because the standard lib needs some more utility functions, such as a function to run multiple tasks sequentially and return the first error if any, or return the list of results otherwise (perhaps it already exists?). Also, I'm already a bit tired of typing <code>List.</code> all the time, perhaps a bit more syntactic sugar might be nice.</li>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>  The REPL doesn't feel very useful yet, since it doesn't have any effects.</li>\n</ul>",
        "id": 454725440,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722230363
    },
    {
        "content": "<p>Thank you for the feedback, this is very helpful. </p>\n<blockquote>\n<p>I wish I could hover over a def in VSCode and get its type.</p>\n</blockquote>\n<p>You should be able to using the LS and <a href=\"https://github.com/ivan-demchenko/roc-vscode-unofficial\">VScode extension</a> from <span class=\"user-mention\" data-user-id=\"625544\">@Ivan Demchenko</span> which I just installed from the marketplace.</p>\n<p>Here's a demo<br>\n<a href=\"/user_uploads/22008/39YNqgcA_QHdRHU53RsjViJd/Screenshot-2024-07-29-at-15.21.08.png\">Screenshot-2024-07-29-at-15.21.08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/39YNqgcA_QHdRHU53RsjViJd/Screenshot-2024-07-29-at-15.21.08.png\" title=\"Screenshot-2024-07-29-at-15.21.08.png\"><img data-original-dimensions=\"1208x360\" src=\"/user_uploads/thumbnail/22008/39YNqgcA_QHdRHU53RsjViJd/Screenshot-2024-07-29-at-15.21.08.png/840x560.webp\"></a></div>",
        "id": 454726191,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722230658
    },
    {
        "content": "<p>I don't think I had to do anything other than set the Path to the LS executable in the extension settings</p>",
        "id": 454726276,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722230719
    },
    {
        "content": "<blockquote>\n<ul>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> The language seems very verbose</li>\n</ul>\n</blockquote>\n<p>I think this is very dependent on author and target audience. For example, more compact forms of writing may be hard to follow as a beginner so they might not get written as often here.</p>\n<p>That said:</p>\n<ol>\n<li>We definitely have gaps in the standard library/other helper libs to shorten code.</li>\n<li>I do think that by default roc leans more verbose than many other languages. I think it is mostly try to be explicit or clear (or just formatting with more spaces), but still more verbose.</li>\n</ol>",
        "id": 454727864,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722231608
    },
    {
        "content": "<p>I 100% agree the language is more verbose... but I don't think this is a bad thing either. I also had the same first impression, though it's hard for me to be unbiased now I've spent so much time writing roc.  </p>\n<p>One thing I've noticed from doing AoC and reading other people's solutions is that mine are generally 2-4x longer. I find some people are exceptionally good at writing much shorter solutions than I.</p>\n<p>I often enjoy polishing my code, and playing a bit of golf, but I still find myself writing in a much more verbose style. I'm not sure why this is, but I find it interesting to think about.</p>",
        "id": 454728363,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722231896
    },
    {
        "content": "<p>Taking <code>parseNumbers</code> for example, it could be written as:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidNumStr</span><span class=\"p\">]</span>\n<span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span>\n</code></pre></div>\n<p>Though if you want the same error type, it would be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidArgument</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"nv\">parseNumbers</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">InvalidArgument</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 454728471,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722231957
    },
    {
        "content": "<blockquote>\n<p>I'm already a bit tired of typing¬†<code>List.</code>¬†all the time</p>\n</blockquote>\n<p>I'm really looking forward to one day having editor tooling that can autodetect imports from the Builtins. So I could just write <code>toU8</code> and the editor might auto add <code>List.</code> prefix and also import it for me. </p>\n<p>I think it's something we've discussed before.</p>",
        "id": 454728607,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722232023
    },
    {
        "content": "<blockquote>\n<p><code>List.mapTry Str.toU8Checked</code></p>\n</blockquote>\n<p>Oh nice. I hadn't thought of that.</p>",
        "id": 454728757,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722232094
    },
    {
        "content": "<p>This whole thing could be (assuming desugaring of <code>!</code> works correctly, might not yet):</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">fromResult</span><span class=\"err\">!</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">total</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Sum of numbers: $(Num.toStr total)\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n</code></pre></div>\n<p>Though maybe that is too much <code>|&gt;</code>...haha</p>",
        "id": 454728854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722232149
    },
    {
        "content": "<blockquote>\n<p>such as a function to run multiple tasks sequentially and return the first error if any</p>\n</blockquote>\n<p>Just a note, this actually does exist: <a href=\"https://www.roc-lang.org/packages/basic-cli/0.12.0/Task#sequence\">https://www.roc-lang.org/packages/basic-cli/0.12.0/Task#sequence</a></p>",
        "id": 454729515,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722232501
    },
    {
        "content": "<p>Thanks for the great feedback <span class=\"user-mention\" data-user-id=\"734214\">@Aur√©lien Geron</span>!</p>\n<blockquote>\n<p>The docs and examples are not fully in sync with the latest release. In particular, I struggled to get <code>Arg.list!</code> to work</p>\n</blockquote>\n<p>I'd like to fix this, can you tell me where to find these outdated docs/examples?</p>",
        "id": 454776545,
        "sender_full_name": "Anton",
        "timestamp": 1722245624
    },
    {
        "content": "<p>The ones I looked at are up to date but I must have missed something</p>",
        "id": 454776728,
        "sender_full_name": "Anton",
        "timestamp": 1722245685
    },
    {
        "content": "<blockquote>\n<p><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> The language seems very verbose</p>\n</blockquote>\n<p>One thing that makes Roc more verbose is our encouragement of error handling. <code>print(sum([int(arg) for arg in sys.argv[1:]]))</code> would crash if you provide an arg that is not an int but python does not encourage you to catch this.</p>",
        "id": 454777973,
        "sender_full_name": "Anton",
        "timestamp": 1722246085
    },
    {
        "content": "<p>In advent of code you just want to get things done quickly, but you want real world code to be reliable.</p>",
        "id": 454778164,
        "sender_full_name": "Anton",
        "timestamp": 1722246145
    },
    {
        "content": "<blockquote>\n<p><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> The REPL doesn't feel very useful yet, since it doesn't have any effects.</p>\n</blockquote>\n<p>Effects for the REPL are planned, anybody know if we have an issue for this?</p>",
        "id": 454778713,
        "sender_full_name": "Anton",
        "timestamp": 1722246313
    },
    {
        "content": "<p><code>print(sum([int(arg) for arg in sys.argv[1:]]))</code> would also return 0 if the user did not enter any args but that is not ideal behavior for real software. You probably want to present an error message to the user in this case.</p>",
        "id": 454783163,
        "sender_full_name": "Anton",
        "timestamp": 1722247514
    },
    {
        "content": "<blockquote>\n<p>anybody know if we have an issue for this?</p>\n</blockquote>\n<p>I don't know if we do. But <span class=\"user-mention\" data-user-id=\"738973\">@Bram</span>'s work in <a href=\"#narrow/stream/316715-contributing/topic/playground.2Frepl.20with.20LSP.20support/near/453747271\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/playground.2Frepl.20with.20LSP.20support/near/453747271</a> is very closely related I think. He's looking at the problem from the WASM perspective, but enabling effects in WASM is very similar to the REPL I'm guessing.</p>",
        "id": 454784086,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247783
    },
    {
        "content": "<p>this <em>should</em> work, but doesn't because of a compiler bug (that we discussed elsewhere <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Arg</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">mapTry</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toU8</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">fromResult</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">sum</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n</code></pre></div>",
        "id": 454815596,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722255021
    },
    {
        "content": "<blockquote>\n<p><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> The compiler's error messages are not always clear enough. For example, I really got 100% stuck on the simple problem above, despite my best efforts. Try running my code to see what I mean. Perhaps the tutorial needs more examples of <code>Task</code> / <code>Result</code> interaction.</p>\n</blockquote>\n<p>I feel like a good tip here would be to recommend adding type annotations, which is how I fixed the code. Should we add that as a tip to all these opaque type mismatches?</p>",
        "id": 454826538,
        "sender_full_name": "Anton",
        "timestamp": 1722257831
    },
    {
        "content": "<p>Just like a little addendum? \"note: adding type annotations may help improve and narrow down this error message`</p>",
        "id": 454873040,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722268288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Parsing.20command.20line.20arguments/near/454776545\">said</a>:</p>\n<blockquote>\n<p>Thanks for the great feedback <span class=\"user-mention silent\" data-user-id=\"734214\">Aur√©lien Geron</span>!</p>\n<blockquote>\n<p>The docs and examples are not fully in sync with the latest release. In particular, I struggled to get <code>Arg.list!</code> to work</p>\n</blockquote>\n<p>I'd like to fix this, can you tell me where to find these outdated docs/examples?</p>\n</blockquote>\n<p>Sorry for the late reply. I can't find any sync issues anymore, so I suppose I must have mixed up the versions I was looking at, perhaps using <code>basic-cli</code> version 0.11 instead of 0.12. I'll let you know if I find anything, but for now this looks more like a brain fart on my part. <span aria-label=\"woozy face\" class=\"emoji emoji-1f974\" role=\"img\" title=\"woozy face\">:woozy_face:</span></p>",
        "id": 455342280,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722421200
    }
]