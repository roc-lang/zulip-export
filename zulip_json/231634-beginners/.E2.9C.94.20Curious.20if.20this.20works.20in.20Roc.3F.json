[
    {
        "content": "<p>Hi. I'm curious if Roc equivalent of this OCaml code works in Roc. I wanted to try it myself, but I'm unable to run anything. (\"missing header\" or something like that)</p>\n<div class=\"codehilite\"><pre><span></span><code>type (&#39;ok, &#39;err) result =\n  | Ok of &#39;ok\n  | Err of &#39;err\n\nlet handle (x : (int, [`A | `B | `C | `D]) result) : (int, [`B | `D]) result =\n  match x with\n  | Err(`A) -&gt; Ok(1)\n  | Err(`C) -&gt; Ok(2)\n  | other -&gt; other (* doesn&#39;t work, `other` has the same type as `x` *)\n</code></pre></div>\n<p>As far as I understand tags in Roc are the same in polymorphic variants in OCaml. I'm wondering if this kind of thing ports directly to Roc, and whether it has the same limitation as OCaml.</p>",
        "id": 444692832,
        "sender_full_name": "osa1",
        "timestamp": 1718369234
    },
    {
        "content": "<p>For the \"missing header\" I suspect that you need an app header like in <a href=\"https://github.com/roc-lang/roc/blob/main/examples/helloWorld.roc\">helloWorld</a>. When writing a Roc program I usually start from helloWorld.roc.</p>",
        "id": 444698500,
        "sender_full_name": "Anton",
        "timestamp": 1718370960
    },
    {
        "content": "<p>I'll look into improving that error because it is almost impossible for a beginner to create a working program with only the info provided in that error message.</p>",
        "id": 444699223,
        "sender_full_name": "Anton",
        "timestamp": 1718371212
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/examples/issues/182\">https://github.com/roc-lang/examples/issues/182</a></p>",
        "id": 444700606,
        "sender_full_name": "Anton",
        "timestamp": 1718371675
    },
    {
        "content": "<p>Yeah, we hit the same problem as in OCaml:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Stdout</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Task</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span>\n\n<span class=\"kt\">ErrType</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">]</span>\n\n<span class=\"nf\">handle</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">ErrType</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">]]</span>\n<span class=\"nf\">handle</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">other</span>\n</code></pre></div>\n<p>Error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in examples/helloWorld.roc ────────────────────────────────────\n\nSomething is off with the body of the handle definition:\n\n11│   handle : [Ok U64, Err ErrType] -&gt; [Ok U64, Err [B, D]]\n12│   handle = \\x -&gt;\n13│&gt;      when x is\n14│&gt;          Err A -&gt; Ok 1\n15│&gt;          Err C -&gt; Ok 2\n16│&gt;          other -&gt; other\n\nThis when expression produces:\n\n    [Err [\n        A,\n        B,\n        C,\n        D,\n    ], …]\n\nBut the type annotation on handle says it should be:\n\n    [Err [\n        B,\n        D,\n    ], …]\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>It's possible that we improve this in the future but I don't know how complicated the required compiler changes would be.</p>",
        "id": 444702950,
        "sender_full_name": "Anton",
        "timestamp": 1718372379
    },
    {
        "content": "<p>Wait, I don't understand... Why is this code incorrect?</p>",
        "id": 444707647,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1718373775
    },
    {
        "content": "<p>Yeah well it's definitely something that could work but the compiler is currently not \"smart\" enough to figure that out.</p>",
        "id": 444708663,
        "sender_full_name": "Anton",
        "timestamp": 1718374078
    },
    {
        "content": "<p>Okay, thanks</p>",
        "id": 444710358,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1718374598
    },
    {
        "content": "<p>Thanks for the answer.</p>",
        "id": 444724137,
        "sender_full_name": "osa1",
        "timestamp": 1718378698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671676\">osa1</span> has marked this topic as resolved.</p>",
        "id": 444724156,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718378704
    },
    {
        "content": "<blockquote>\n<p>It's possible that we improve this in the future</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  Do you mean you know how to improve the type checker or inference algorithm to make this work, or are you guessing that it may be possible?</p>\n<p>I'm curious how you would go about improving this. I don't know too much about Roc's type system, but I'm assuming some kind of constraint-based HM formulation, with unification for solving the constraints, and row types. I'm curious how you would make this work in such a system if you already know.</p>",
        "id": 444724659,
        "sender_full_name": "osa1",
        "timestamp": 1718378835
    },
    {
        "content": "<p>I'm guessing that it is possible. <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> will probably know this.</p>",
        "id": 444729896,
        "sender_full_name": "Anton",
        "timestamp": 1718380237
    },
    {
        "content": "<p>Roc does not have gradual types</p>",
        "id": 444731178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380498
    },
    {
        "content": "<p>This should not work (maybe it will change one day, bit I don't think there are any plans currently)</p>",
        "id": 444731234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380509
    },
    {
        "content": "<p>The type of <code>other</code> is the same type as <code>x</code></p>",
        "id": 444731388,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380540
    },
    {
        "content": "<p>That code is equivalent to doing:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">ErrType</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">]</span>\n\n<span class=\"nf\">handle</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">ErrType</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">]]</span>\n<span class=\"nf\">handle</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 444731894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380640
    },
    {
        "content": "<p><code>x</code> is a <code>[Ok I64, Err ErrType]</code> so returning <code>x</code> must also return a <code>[Ok I64, Err ErrType]</code>. It is still the same type, it just won't contain an <code>Err A</code> or <code>Err C</code> at runtime.</p>",
        "id": 444732363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380743
    },
    {
        "content": "<p>To fix it you would have to manually speed out the different variants to avoid returning <code>x</code>. That might be a sugar worth adding to <code>when ... is</code> explicitly.</p>",
        "id": 444732926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">ErrType</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">]</span>\n\n<span class=\"nf\">handle</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">ErrType</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"p\">]]</span>\n<span class=\"nf\">handle</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">B</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">D</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">D</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span>\n</code></pre></div>",
        "id": 444733217,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380920
    },
    {
        "content": "<p>I don't know what this kind of typing would be called but I'm pretty sure it has nothing to do with gradual typing, which is about mixing dynamic and static typing (see wiki page).</p>",
        "id": 444747882,
        "sender_full_name": "osa1",
        "timestamp": 1718384557
    },
    {
        "content": "<p>Ayaz has a plan to fix this</p>",
        "id": 444748403,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718384719
    },
    {
        "content": "<p>I forget where it’s tracked</p>",
        "id": 444748419,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718384725
    },
    {
        "content": "<p>it doesn’t require gradual typing - it’s about the pattern match in the branch affecting the type of the branch body based on the other branches, plus needing to silently convert from one in-memory representation to another in that branch</p>",
        "id": 444748681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718384806
    },
    {
        "content": "<p>but yeah we definitely want this to work as described!</p>",
        "id": 444748740,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718384832
    },
    {
        "content": "<p>Sorry, I think it may be refinement types or something.....too many names</p>",
        "id": 444748915,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718384890
    },
    {
        "content": "<p>“Type refinement” I think might have been the name Ayaz used</p>",
        "id": 444749004,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718384926
    },
    {
        "content": "<p>or “narrowing” maybe</p>",
        "id": 444749053,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718384941
    },
    {
        "content": "<p>And yeah, we could make this automatic/implicit (which sounds like what is planned). Personally, I would rather it be explicit causing implicit means unexpected data movement. But this is probably a case where convenience outweighs any performance concerns.</p>",
        "id": 444749205,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718384994
    },
    {
        "content": "<p>Thanks. If anyone knows where this is tracked I would be happy to follow <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 444750228,
        "sender_full_name": "osa1",
        "timestamp": 1718385311
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/5504\">Found it :)</a></p>",
        "id": 444758782,
        "sender_full_name": "Anton",
        "timestamp": 1718387971
    }
]