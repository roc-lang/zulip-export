[
    {
        "content": "<p>What's it called when you can use single quotes <code>'</code> to directly refer to a byte like <code>'a'</code> gives <code>97 : Int *</code> etc. I couldn't find it in the tutorial from a quick scan. I'm not sure where I learnt that from. </p>\n<p>The reason I bring this up is because it caught me out for an hour or so today when I used a utf8 two byte character in this way and Roc didnt complain, so I didn't realise that something fishy was going on. </p>\n<p>I'm using the following character. I have no idea why the unicode data files chose to use this (and some other strange ones) for segmenting information in their data files<br>\n<a href=\"/user_uploads/22008/b6DTXs_B-2AM72Gmr2UFJWnl/Screenshot-2023-12-16-at-20.39.11.png\">Screenshot-2023-12-16-at-20.39.11.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/b6DTXs_B-2AM72Gmr2UFJWnl/Screenshot-2023-12-16-at-20.39.11.png\" title=\"Screenshot-2023-12-16-at-20.39.11.png\"><img src=\"/user_uploads/22008/b6DTXs_B-2AM72Gmr2UFJWnl/Screenshot-2023-12-16-at-20.39.11.png\"></a></div><div class=\"codehilite\"><pre><span></span><code>» Str.toUtf8 &quot;×&quot;\n\n[195, 151] : List U8\n» &#39;×&#39;\n\n215 : Int *\n</code></pre></div>\n<p>Should that second operation using single quotes not be permitted in Roc?</p>",
        "id": 408324798,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702719655
    },
    {
        "content": "<p>so single quotes compile to the Unicode Code Point, not (necessarily, except by coincidence) utf8</p>",
        "id": 408334811,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702725878
    },
    {
        "content": "<p>when the code point is less than 128, it'll be one utf8 byte, but any code point of 128 or higher needs 2+ utf8 bytes to represent</p>",
        "id": 408334876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702725942
    },
    {
        "content": "<p>so this looks likely correct to me (although I can definitely see why it would be surprising!)</p>",
        "id": 408334940,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702725972
    },
    {
        "content": "<p>Thats actually much more helpful for what I need. For some reason I thought it was only ASCII permitted</p>",
        "id": 408334990,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702726027
    },
    {
        "content": "<p>Is 215 the correct value though? It's too small to be 2 byte</p>",
        "id": 408352577,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702739561
    },
    {
        "content": "<p>utf8 encodes anything over 127 in 2+ bytes</p>",
        "id": 408353832,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702740546
    },
    {
        "content": "<p>Oh, its not the literally 2byte value cast to an int?</p>",
        "id": 408353938,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702740635
    },
    {
        "content": "<p>correct, it's the Unicode Code Point - which is a single integer</p>",
        "id": 408354600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702741256
    },
    {
        "content": "<p>correct, it's the Unicode Code Point - which is a single integer</p>",
        "id": 408354602,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702741257
    },
    {
        "content": "<p>as Luke noted, that tends to be the useful thing in practice <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 408354603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702741257
    },
    {
        "content": "<p>casting the 2 byte value to an int is also a single integer</p>",
        "id": 408354637,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702741301
    },
    {
        "content": "<p>Would be <code>50071</code> in this case</p>",
        "id": 408354722,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702741356
    },
    {
        "content": "<p>Or <code>38851</code> if the bytes need to be reversed due to endian handling</p>",
        "id": 408354745,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702741398
    },
    {
        "content": "<p>Oh yeah, codepoint it what number it would be in <code>utf32</code>. Which is different than having the <code>utf8</code> bytes cast to a single integer.</p>",
        "id": 408354894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702741551
    },
    {
        "content": "<p>Cause currently, <code>utf8</code> is also limited to 4 bytes, so you could just cast it to a <code>U32</code> to make it a single integer. Though if utf expands enough, theoretically, <code>utf8</code> could have values larger than 4 bytes.</p>",
        "id": 408355008,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702741640
    }
]