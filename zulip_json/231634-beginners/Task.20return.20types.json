[
    {
        "content": "<p>Question came up writing one of the examples, is there any difference between <code>Task Str []</code> and <code>Task Str *</code>?</p>",
        "id": 365001162,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686360935
    },
    {
        "content": "<p>yes, although you can convert between them</p>",
        "id": 365001367,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361057
    },
    {
        "content": "<p>it's rare to want to - Elm has a function called <a href=\"https://package.elm-lang.org/packages/elm/core/latest/Basics#never\"><code>never</code></a> which does this, but you don't need one in Roc because we have <code>crash</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">convert</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nf\">convert</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s\">\"This can never happen\"</span>\n</code></pre></div>",
        "id": 365001603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361196
    },
    {
        "content": "<p>Specifically, this file <a href=\"https://github.com/roc-lang/examples/blob/4995e17383db74d5f3421055923433314ff6a19f/examples/TaskUsage/main.roc\">examples/TaskUsage/main.roc</a> includes the comments which explain how to use Tasks in roc. And the question was in discussion on the <code>printName</code> function</p>",
        "id": 365001672,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686361208
    },
    {
        "content": "<p>oh I think that annotation should be <code>printName : Task.Task {} *</code> instead</p>",
        "id": 365001716,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361249
    },
    {
        "content": "<p>the thing about <code>*</code> is that it unifies with anything, so you could put <code>printName : Task {} [Sandwich]</code> if you wanted to <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 365001775,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361296
    },
    {
        "content": "<p>(since its implementation returns a <code>Task {} *</code>)</p>",
        "id": 365001793,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361311
    },
    {
        "content": "<p>(and type annotations are always allowed to be more restrictive than what's inferred from the implementation)</p>",
        "id": 365001847,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361326
    },
    {
        "content": "<p>but yeah <code>Task {} []</code> is needlessly inconvenient there, and would make it harder to use <code>printName</code> in other places</p>",
        "id": 365001907,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361353
    },
    {
        "content": "<p>because you'd have to do <code>Task.mapErr \\_ -&gt; crash \"This can never happen\"</code> on it first</p>",
        "id": 365001916,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361364
    },
    {
        "content": "<p>Interesting, my mental model is <code>[]</code> means cannot fail, and <code>*</code> meant it can fail with anything.</p>",
        "id": 365002062,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686361448
    },
    {
        "content": "<p>I guess this is related to the type in the input position being different from output position...?</p>",
        "id": 365002128,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686361505
    },
    {
        "content": "<p>more about one being a type variable and the other being a concrete type</p>",
        "id": 365002228,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361571
    },
    {
        "content": "<p>for example:</p>\n<ul>\n<li><code>fn : Task Str * -&gt; ...</code> means \"I accept tasks with any error type; I don't care\"</li>\n<li><code>fn : Task Str [] -&gt; ...</code> means \"I accept only tasks that cannot fail\"</li>\n</ul>",
        "id": 365002337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361644
    },
    {
        "content": "<p>and then when being returned they mean something different too:</p>\n<ul>\n<li><code>fn : ... -&gt; Task Str *</code> means \"I return a task whose error type is compatible with any type\"</li>\n<li><code>fn : ... -&gt; Task Str []</code> means \"I return a task whose error type is only compatible with tag unions, but I don't add anything to their unions\"</li>\n</ul>\n<p>both of them can't fail, but <code>Task Str []</code> can cause strictly more type mismatches.</p>\n<p>For example, if you try to <code>Task.await</code> a <code>Task Str []</code> together with a <code>Task Str Str</code> it'll be a type mismatch because <code>[]</code> and <code>Str</code> are two incompatible concrete types, whereas <code>Task Str *</code> can totally be <code>await</code>ed with a <code>Task Str Str</code> if you like</p>",
        "id": 365002671,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361850
    },
    {
        "content": "<p>so that's what I mean by <code>printName : Task.Task {} []</code> being unnecessarily inconvenient - if it were <code>Task {} *</code> instead of <code>Task {} []</code>, then it could be used with tasks that have <code>Str</code> (or anything else) as an error type, not just tag unions</p>",
        "id": 365002766,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686361916
    },
    {
        "content": "<p>Thank you for that explanation, very helpful. I also remembered we have discussed the wildcard type multiple times and went back to re-read that. I hadn't even considered that you might return an \"error\" using anything other than a Tag.</p>",
        "id": 365002902,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686361997
    },
    {
        "content": "<p>so I think a good default way to think about it is:</p>\n<ul>\n<li>if you want a function to <em>only</em> accept tasks that can't fail, have them accept <code>Task Whatever []</code></li>\n<li>if you want a function to accept tasks with any error type (because you'll be overriding it anyway, for  example) then have them accept <code>Task Whatever *</code></li>\n<li>if you have the choice, always return <code>Task Whatever *</code> over <code>Task Whatever []</code> because it's more convenient</li>\n</ul>",
        "id": 365002936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362026
    },
    {
        "content": "<p>the only reason I can think of that you'd want to return <code>Task Whatever []</code> is if you really want to communicate \"hey you should really only be using this with error tag unions, because if you don't, you're going to have a bad time later on when you see that the rest of this API is all about tag unions in the errors\"</p>",
        "id": 365003044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362096
    },
    {
        "content": "<p>something like that</p>",
        "id": 365003065,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362108
    },
    {
        "content": "<p>Would it be correct to describe or call the the wildcard <code>*</code> a \"never\" type?</p>",
        "id": 365003219,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686362191
    },
    {
        "content": "<p>When it is in the function output position?</p>",
        "id": 365003250,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686362225
    },
    {
        "content": "<p>Hmm, I think I need to think more about these examples and how to properly communicate some of these ideas.</p>",
        "id": 365003320,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686362266
    },
    {
        "content": "<p><code>[]</code> is the equivalent of Elm's <code>Never</code></p>",
        "id": 365003593,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362424
    },
    {
        "content": "<p>what they have in common is that you can never construct one</p>",
        "id": 365003608,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362433
    },
    {
        "content": "<p>Elm's <code>Never</code> translated directly to Roc would be:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Never</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"kt\">JustGiveMeOneMore</span><span class=\"w\"> </span><span class=\"kt\">Never</span>\n</code></pre></div>",
        "id": 365003663,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362468
    },
    {
        "content": "<p>so in both cases, what would you put in the blank to make this type-check and run without crashing?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">[]</span>\n<span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">_____</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Never</span>\n<span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">_____</span>\n</code></pre></div>",
        "id": 365003715,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362519
    },
    {
        "content": "<p>in both cases it's impossible</p>",
        "id": 365003768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362530
    },
    {
        "content": "<p>it's also the case that you can't construct a <code>x : *</code> but you can totally have <code>x : List *</code> - that one's easy, just <code>x = []</code></p>",
        "id": 365003816,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362575
    },
    {
        "content": "<p>but the only way to have <code>x : List []</code> is to once again do <code>x = []</code> - because the empty list has the type <code>List *</code>, which can be restricted by a type annotation to <code>List []</code> but not the other way around</p>",
        "id": 365003867,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362637
    },
    {
        "content": "<p>playing around with these in the repl can be fun</p>",
        "id": 365003936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362656
    },
    {
        "content": "<p>I'm feeling like the Task Usage example might turn out better as a mini-series or a mini-guide and include a couple of different examples using Tasks. I think it's scope is a little bigger than what is currently there.</p>",
        "id": 365004012,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686362724
    },
    {
        "content": "<p>Throughout the code base we always use <code>[]</code> instead of <code>*</code> for main:  <code>main : Task.Task {} []</code>.<br>\nI assume this is deliberate but I'm not sure why.</p>",
        "id": 366191046,
        "sender_full_name": "Anton",
        "timestamp": 1686750695
    },
    {
        "content": "<p>Looks like this is blocked on <code>Str.inspect</code> <a href=\"https://github.com/roc-lang/basic-cli/issues/12\">https://github.com/roc-lang/basic-cli/issues/12</a></p>",
        "id": 366198196,
        "sender_full_name": "Anton",
        "timestamp": 1686752005
    },
    {
        "content": "<p>I mean <code>[]</code> is explicit that you aren't allowed to return errors, so I think it makes sense.</p>",
        "id": 366199089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686752175
    },
    {
        "content": "<p>But I guess typewise, it shouldn't matter, right? Cause <code>Task {} *</code> can only ever result to the success case with <code>{}</code>.</p>",
        "id": 366199417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686752239
    },
    {
        "content": "<p>Fundamentally, I don't think we can return an arbitrary error to the host. It wouldn't know the details of how the error works. It also wouldn't know the size when generating glue for the platform.</p>",
        "id": 366200396,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686752402
    },
    {
        "content": "<p>I mean we could always box it or defer size to runtime, but not sure the point exactly.</p>",
        "id": 366200699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686752445
    },
    {
        "content": "<p>Quoted from <a href=\"https://github.com/roc-lang/basic-cli/issues/12\">https://github.com/roc-lang/basic-cli/issues/12</a>:</p>\n<blockquote>\n<p>The idea here is to make main more beginner-friendly without noticeably affecting things experienced users.</p>\n<p>If main has the type Task {} * (which it achieves by translating any unhandled Task errors into crashes automatically), then beginners don't need to learn about how to gracefully handle errors right away. They can pretty much just ignore errors and get a crash if something goes wrong, allowing them to focus on learning other things - e.g. how to chain tasks together.</p>\n</blockquote>",
        "id": 366201178,
        "sender_full_name": "Anton",
        "timestamp": 1686752526
    },
    {
        "content": "<p>I see. I guess this probably isn't too bad to make work. Just make the body of <code>mainForHost</code> be:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">res</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"nx\">main</span>\n<span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">res</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"nx\">err</span>\n</code></pre></div>\n<p>Then the host still sees a static type.</p>",
        "id": 366202301,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686752723
    },
    {
        "content": "<p>Which is why <code>inspect</code> is needed. makes sense.</p>",
        "id": 366202379,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686752743
    },
    {
        "content": "<p>That said, does <code>*</code> work here?<br>\nI was trying to test this with <code>Result {} *</code> which is essentially the same type but it doesn't type check.</p>\n<p>Put this in the repl and it won't type check (is that a bug?):</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">SomeErrToCrashWith</span>\n</code></pre></div>\n<p>I think we want <code>Result {} _</code>. This works:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nx\">_</span>\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">SomeErrToCrashWith</span>\n</code></pre></div>",
        "id": 366203676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686752997
    },
    {
        "content": "<p>Interesting, so should <a href=\"https://github.com/roc-lang/basic-cli/issues/12\">basic-cli#12</a> be updated to <code>Change main type to Task {} _</code>?</p>",
        "id": 366213140,
        "sender_full_name": "Anton",
        "timestamp": 1686754666
    },
    {
        "content": "<blockquote>\n<p>Interesting, so should <a href=\"https://github.com/roc-lang/basic-cli/issues/12\">basic-cli#12</a> be updated to <code>Change main type to Task {} _</code>?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>?</p>",
        "id": 366742712,
        "sender_full_name": "Anton",
        "timestamp": 1686905522
    },
    {
        "content": "<p>so, two unrelated things:</p>\n<ol>\n<li>I actually want to try out <code>Task {} U32</code> so that it's not that you have to eliminate errors (or that they're handled automatically) but rather that you have to translate them into an exit code. A thing I like about that is that Hello World still works as-is (e.g. <code>main = Stdout.line \"Hello, World!\"</code>) but as soon as you start doing things with errors, you need to handle them somehow.</li>\n<li>In general, I have a pretty strong intuition is that we should never have <code>_</code> appear in package APIs. I definitely think that seems like a sign that something has gone wrong! I would expect <code>_</code> to be used only in application code, e.g. if I'm writing a \"handle all the errors in this <code>Task</code>\" function and I don't want to bother annotating the task's error type because it's a big union of stuff that I'm going to handle in the function anyway</li>\n</ol>",
        "id": 366853950,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686926228
    },
    {
        "content": "<p>I'll update the issue!</p>",
        "id": 366853986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686926238
    },
    {
        "content": "<p>oh I think I misunderstood the use of <code>_</code> there - you did mean in the application, specifically when beginners are using it that way, and not in the platform API</p>",
        "id": 366854678,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686926380
    },
    {
        "content": "<p>which makes sense, although honestly I think at that point beginners wouldn't even be writing type annotations for <code>main</code> yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 366854783,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686926400
    },
    {
        "content": "<p>regardless, I do want to try out <code>U32</code>!</p>",
        "id": 366854924,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686926415
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 366855265,
        "sender_full_name": "Anton",
        "timestamp": 1686926481
    }
]