[
    {
        "content": "<p>Sorry if it's obvious. My guess is that it casts to int, but the type signature takes Int a and returns Int b, I don't really get what that means.</p>",
        "id": 473421315,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727593862
    },
    {
        "content": "<p>It's currently undocumented: <a href=\"https://www.roc-lang.org/builtins/Num#intCast\">https://www.roc-lang.org/builtins/Num#intCast</a> which is why I'm posting here :D</p>",
        "id": 473421346,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727593896
    },
    {
        "content": "<p>Yeah, so if you have a <code>U8</code> you can turn it into a <code>U16</code></p>",
        "id": 473422925,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595290
    },
    {
        "content": "<p>Interesting, I tried passing a U8 and got a compiler panic</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_dev/src/generic64/mod.rs:4742:22:\nnot yet implemented: int cast from U8 to I64\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 473423222,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727595535
    },
    {
        "content": "<p>it works with an <code>i8</code>. The type that comes back is <code>Int b</code></p>\n<div class=\"codehilite\"><pre><span></span><code>» x = Num.toI8 4\n4 : I8\n\n» Num.intCast x\n4 : Int b\n</code></pre></div>\n<p>What is an Int b? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 473423349,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727595665
    },
    {
        "content": "<p>I'm guessing you can only cast between things of the same signedness</p>",
        "id": 473423353,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595672
    },
    {
        "content": "<p>Like signed <code>I32</code> to <code>I64</code> or unsigned <code>U8</code> to <code>U32</code>/<code>U128</code> etc</p>",
        "id": 473423379,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595704
    },
    {
        "content": "<p>I'm not sure if you can cast down, it might be dissallowed or lose information or panic (1 sec I'll test in the repl)</p>",
        "id": 473423441,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>» x : U8\n… x = Num.intCast 355u16\n\n99 : U8\n</code></pre></div>\n<p>It looks like it just throws information away</p>",
        "id": 473423472,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595779
    },
    {
        "content": "<p>Oh so does <code>intCast</code> know what type you want to cast to somehow?</p>",
        "id": 473423546,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727595844
    },
    {
        "content": "<p>Yeah, it's done at compile time (well the types are resolved and concrete etc).</p>",
        "id": 473423559,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595872
    },
    {
        "content": "<p>All types in roc are fully inferred if you don't give an annotation</p>",
        "id": 473423575,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595899
    },
    {
        "content": "<p>Aha. That explains it. Quite magical :D<br>\nMaybe I can try opening a PR updating the docs now that I understand it a bit more</p>",
        "id": 473423630,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727595937
    },
    {
        "content": "<p>That would be super</p>",
        "id": 473423643,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727595950
    },
    {
        "content": "<p>This is where you would put the doc comments <a href=\"https://github.com/roc-lang/roc/blob/587d0afd462994edc15fcceb8514bc0d2662b12b/crates/compiler/builtins/roc/Num.roc#L551\">https://github.com/roc-lang/roc/blob/587d0afd462994edc15fcceb8514bc0d2662b12b/crates/compiler/builtins/roc/Num.roc#L551</a></p>",
        "id": 473423831,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727596085
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7131\">https://github.com/roc-lang/roc/pull/7131</a></p>\n<p>I think I've done it right... :D</p>",
        "id": 473425732,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727597543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452796\">Nathan Kramer</span> <a href=\"#narrow/stream/231634-beginners/topic/Can.20someone.20explain.20what.20Num.2EintCast.20does/near/473423222\">said</a>:</p>\n<blockquote>\n<p>Interesting, I tried passing a U8 and got a compiler panic</p>\n<p><div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_dev/src/generic64/mod.rs:4742:22:\nnot yet implemented: int cast from U8 to I64\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>We probably should add an extra note to these error messages that they are dev backend specific (so only hit in the repl currently). That would help clarify to users that they can do any intcast in standard apps</p>",
        "id": 473456456,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727621930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452796\">Nathan Kramer</span> has marked this topic as resolved.</p>",
        "id": 473672773,
        "sender_full_name": "Notification Bot",
        "timestamp": 1727691088
    }
]