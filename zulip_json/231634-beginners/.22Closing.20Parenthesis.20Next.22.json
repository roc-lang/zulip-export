[
    {
        "content": "<p>Hey there,</p>\n<p>Could one of you help me understand why at the place below there's a complaint about <code>I was expecting to see a closing parenthesis next, so try adding a ) and see if that helps?</code>? Trying to update some old code</p>\n<div class=\"codehilite\"><pre><span></span><code>    result = List.walk_with_index_until(\n        instruction_as_floor_changes,\n        (starting_floor, 0),\n        |state, instruction, index| # &lt;------------ HERE\n                floor_number = state.0\n                if floor_number == target_floor {\n                Break((floor_number, index))\n                } else {\n                Continue((Num.add(floor_number, instruction), index))\n                }\n)\n</code></pre></div>",
        "id": 527349726,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1751811414
    },
    {
        "content": "<p>we should try to improve that error message, but what it wants is for an <code>{</code> right where <code># &lt;----------- HERE</code> is, and then a corresponding <code>}</code> later (so, the last two characters of the snippet would become <code>})</code></p>",
        "id": 527349927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751811584
    },
    {
        "content": "<p>the reason is that now when you have an inline assignmenet like <code>floor_number = state.0</code>, you wrap the whole thing in curly braces</p>",
        "id": 527349951,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751811604
    },
    {
        "content": "<p>(we used to do it with significant indentation and now we do it with curly braces)</p>",
        "id": 527349978,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751811622
    },
    {
        "content": "<p>so the updated version would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>    result = List.walk_with_index_until(\n        instruction_as_floor_changes,\n        (starting_floor, 0),\n        |state, instruction, index| {\n                floor_number = state.0\n                if floor_number == target_floor {\n                Break((floor_number, index))\n                } else {\n                Continue((Num.add(floor_number, instruction), index))\n                }\n        }\n)\n</code></pre></div>",
        "id": 527350000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751811652
    },
    {
        "content": "<p>actually, I just remembered - this is true in the new compiler, but I'm actually not 100% sure we backported that change in the current release of the compiler <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 527350027,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751811687
    },
    {
        "content": "<p>Okay, what really confused me - and now I don't know if that's because I maybe left the program in a half running half incorrect state - that e.g. here:</p>\n<div class=\"codehilite\"><pre><span></span><code>floor_determination = |instructions, starting_floor|\n    instruction_as_floor_changes = instructions |&gt; Str.replace_each(&quot;(&quot;, &quot;1,&quot;) |&gt; Str.replace_each(&quot;)&quot;, &quot;-1,&quot;) |&gt; Str.split_on(&quot;,&quot;) |&gt; List.keep_oks(Str.to_i32)\n\n    resulting_floor = List.walk(\n        instruction_as_floor_changes,\n        starting_floor,\n        |floor_number, instruction|\n            Num.add(floor_number, instruction),\n    )\n\n    Num.to_str(resulting_floor)\n</code></pre></div>\n<p>I had to remove the curly braces.</p>\n<p>Didn't really help that the VSCode Plugin seems to break / not show anything when there's a single error and same with the formatting :D</p>",
        "id": 527350070,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1751811735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/231634-beginners/topic/.22Closing.20Parenthesis.20Next.22/near/527350027\">schrieb</a>:</p>\n<blockquote>\n<p>actually, I just remembered - this is true in the new compiler, but I'm actually not 100% sure we backported that change in the current release of the compiler <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Well in atleast what I downloaded that also complains :D</p>",
        "id": 527350116,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1751811785
    },
    {
        "content": "<p>Prefer the brackets in general though. Yet likely just because I'm used to it.</p>",
        "id": 527350132,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1751811817
    },
    {
        "content": "<p>So with a nix flake just installed today (<code>roc.url = \"github:roc-lang/roc\";</code>) your version also doesn't work (when I just copied it in). Doesn't really help that roc version here just says <code>roc built from source</code> though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.</p>",
        "id": 527350185,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1751811874
    },
    {
        "content": "<p>hrm, ok <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> might have a better idea then?</p>",
        "id": 527350545,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751812280
    },
    {
        "content": "<p>(I've been so immersed in the new compiler that I've lost track of what's in the stable version, really sorry about that!)</p>",
        "id": 527350570,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751812300
    },
    {
        "content": "<p>I'd assume it's got something to do with the second parameter that's passed in as that's the only difference to the other function that apparently works.  So likely the tuple is the problem somehow.</p>\n<p>Works:</p>\n<div class=\"codehilite\"><pre><span></span><code>find_last_floor_entered = |floor_change_instructions, starting_floor|\n    floor_change_floor_change_instructions_as_integers = floor_change_instructions |&gt; Str.replace_each(&quot;(&quot;, &quot;1,&quot;) |&gt; Str.replace_each(&quot;)&quot;, &quot;-1,&quot;) |&gt; Str.split_on(&quot;,&quot;) |&gt; List.keep_oks(Str.to_i32)\n\n    resulting_floor = List.walk(\n        floor_change_floor_change_instructions_as_integers,\n        starting_floor,\n        |floor_number, floor_change_instruction|\n            Num.add(floor_number, floor_change_instruction),\n    )\n\n    Num.to_str(resulting_floor)\n\nexpect find_last_floor_entered(&quot;(())&quot;, 0) == &quot;0&quot;\nexpect find_last_floor_entered(&quot;()()&quot;, 0) == &quot;0&quot;\nexpect find_last_floor_entered(&quot;(((&quot;, 0) == &quot;3&quot;\nexpect find_last_floor_entered(&quot;(()(()(&quot;, 0) == &quot;3&quot;\nexpect find_last_floor_entered(&quot;())&quot;, 0) == &quot;-1&quot;\nexpect find_last_floor_entered(&quot;))(&quot;, 0) == &quot;-1&quot;\nexpect find_last_floor_entered(&quot;)))&quot;, 0) == &quot;-3&quot;\nexpect find_last_floor_entered(&quot;)())())&quot;, 0) == &quot;-3&quot;\n</code></pre></div>\n<p>This one currently doesn't, with the marked error:</p>\n<div class=\"codehilite\"><pre><span></span><code>determine_moves_until_entering_floor = |floor_change_instructions, starting_floor, target_floor|\n    floor_change_floor_change_instructions_as_integers = floor_change_instructions |&gt; Str.replace_each(&quot;(&quot;, &quot;1,&quot;) |&gt; Str.replace_each(&quot;)&quot;, &quot;-1,&quot;) |&gt; Str.split_on(&quot;,&quot;) |&gt; List.keep_oks(Str.to_i32)\n\n    result = List.walk_with_index_until(\n                floor_change_floor_change_instructions_as_integers,\n                (starting_floor, 0),\n                |state, floor_change_instruction, index| # &lt;-- I am partway through parsing a record pattern, but I got\nstuck here: I was expecting to see a closing parenthesis next, so try adding a ) and see if that helps?\n                        floor_number = state.0\n                        if floor_number == target_floor {\n                                Break((floor_number, index))\n                        } else {\n                                Continue((Num.add(floor_number, floor_change_instruction), index))\n                        }\n        )\n\n    if result.0 == target_floor {\n        Num.to_str((result.1 + 1))\n    } else {\n        &quot;Floor not reached&quot;\n}\n\nexpect determine_moves_until_entering_floor(&quot;)&quot;, 0, -1) == &quot;1&quot;\nexpect determine_moves_until_entering_floor(&quot;()())&quot;, 0, -1) == &quot;5&quot;\nexpect determine_moves_until_entering_floor(&quot;(())())&quot;, 0, -1) == &quot;7&quot;\n</code></pre></div>",
        "id": 527350966,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1751812794
    },
    {
        "content": "<p>I'll look into this.</p>",
        "id": 527461563,
        "sender_full_name": "Anton",
        "timestamp": 1751889106
    },
    {
        "content": "<p>To start, I recommend staying away from <code>{</code> and <code>}</code> for <code>if</code> and function blocks etc in current Roc.</p>",
        "id": 527461568,
        "sender_full_name": "Anton",
        "timestamp": 1751889107
    },
    {
        "content": "<blockquote>\n<p>Didn't really help that the VSCode Plugin seems to break / not show anything when there's a single error and same with the formatting :D</p>\n</blockquote>\n<p>With the new compiler this should be a lot more robust, it's not ready yet though to be clear.</p>",
        "id": 527464856,
        "sender_full_name": "Anton",
        "timestamp": 1751890165
    },
    {
        "content": "<blockquote>\n<p>the VSCode Plugin seems to break</p>\n</blockquote>\n<p>Could it be that the underlined error was very small in that case (see red circle) ?<br>\n<a href=\"/user_uploads/22008/CQpDg96WtuUYiACm-cFxTPx7/Screenshot_20250707_140602-1.png\">Screenshot_20250707_140602-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/CQpDg96WtuUYiACm-cFxTPx7/Screenshot_20250707_140602-1.png\" title=\"Screenshot_20250707_140602-1.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1324x861\" src=\"/user_uploads/thumbnail/22008/CQpDg96WtuUYiACm-cFxTPx7/Screenshot_20250707_140602-1.png/840x560.webp\"></a></div>",
        "id": 527465008,
        "sender_full_name": "Anton",
        "timestamp": 1751890211
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">determine_moves_until_entering_floor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"nx\">floor_change_instructions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">starting_floor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">target_floor</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">floor_change_floor_change_instructions_as_integers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">floor_change_instructions</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">replace_each</span><span class=\"p\">(</span><span class=\"s\">\"(\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"1,\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">replace_each</span><span class=\"p\">(</span><span class=\"s\">\")\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"-1,\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">split_on</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">keep_oks</span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">to_i32</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">walk_with_index_until</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"nx\">floor_change_floor_change_instructions_as_integers</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nx\">starting_floor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"nx\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">floor_change_instruction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"o\">|</span>\n<span class=\"w\">                        </span><span class=\"nv\">floor_number</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">floor_number</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">target_floor</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                                </span><span class=\"nx\">Break</span><span class=\"p\">((</span><span class=\"nx\">floor_number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">))</span>\n<span class=\"w\">                        </span><span class=\"k\">else</span>\n<span class=\"w\">                                </span><span class=\"nx\">Continue</span><span class=\"p\">((</span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">floor_number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">floor_change_instruction</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">))</span>\n\n<span class=\"w\">        </span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">target_floor</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">to_str</span><span class=\"p\">((</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"s\">\"Floor not reached\"</span>\n\n\n<span class=\"nx\">expect</span><span class=\"w\"> </span><span class=\"nx\">determine_moves_until_entering_floor</span><span class=\"p\">(</span><span class=\"s\">\")\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span>\n<span class=\"nx\">expect</span><span class=\"w\"> </span><span class=\"nx\">determine_moves_until_entering_floor</span><span class=\"p\">(</span><span class=\"s\">\"()())\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"5\"</span>\n<span class=\"nx\">expect</span><span class=\"w\"> </span><span class=\"nx\">determine_moves_until_entering_floor</span><span class=\"p\">(</span><span class=\"s\">\"(())())\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"7\"</span>\n</code></pre></div>",
        "id": 527466102,
        "sender_full_name": "Anton",
        "timestamp": 1751890556
    },
    {
        "content": "<p>I got rid of the <code>{}</code>. Note that <code>if</code> requires a <code>then</code> after the condition.</p>",
        "id": 527466269,
        "sender_full_name": "Anton",
        "timestamp": 1751890607
    },
    {
        "content": "<p>That's correct The underlined error was just on the pipe symbol. And indeed it was the <code>then</code> missing in my code (and initially the brackets near the if statements).</p>\n<p>So likely something that changed since the version I last used, as I thought I left it in a working state last time. The error was really not that helpful at that position, but given you're currently rewriting the foundations that's likely still a bit out to be realiable <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>Thanks Anton!</p>",
        "id": 527471321,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1751892177
    }
]