[
    {
        "content": "<p>Hi. New here, aspiring to get proficent with Roc.</p>\n<p>After wrestling with packaging in nix the roc-treesitter-grammar, I've managed to get emacs + roc-ts-mode working. So far it seems to be ok but... </p>\n<p>how can I browse the definitions (types and functions) available in the chosen platform? how about imports?</p>\n<p>e.g.: </p>\n<div class=\"codehilite\"><pre><span></span><code>  import platform.Arg exposing [Arg]\n</code></pre></div>\n<p>ok, what now?<br>\n  how can I see what can I do with Arg? what's inside it?</p>\n<p>I hoped there would be something like </p>\n<div class=\"codehilite\"><pre><span></span><code>:browse &lt;type/module&gt;\n</code></pre></div>\n<p>in the repl to get a listing of type signatures, but it's not there... so, where can I get something like that?</p>",
        "id": 531515295,
        "sender_full_name": "grp",
        "timestamp": 1753766615
    },
    {
        "content": "<p>What platform are you looking at?</p>",
        "id": 531516840,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753767417
    },
    {
        "content": "<p>For example, here's the docs for basic-cli -- <a href=\"https://roc-lang.github.io/basic-cli/0.19.0/\">https://roc-lang.github.io/basic-cli/0.19.0/</a></p>",
        "id": 531516862,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753767432
    },
    {
        "content": "<p>Yeah, documentation is one thing, but let's say I'm working on something that's not documented. I could get around just fine with type signatures, but most importantly, being able to query roughly \"What's this and what functions can I use with this?\"</p>",
        "id": 531517073,
        "sender_full_name": "grp",
        "timestamp": 1753767533
    },
    {
        "content": "<p>Years ago I wrote some Haskell, when it was deemed a good lang to learn \"to be a better programmer\". Parted ways with it long long ago, but I remember being able to browse modules definitions, searching by type signature, and that was really handy, because I could explore what I could use right where I was working instead of having to fire a web browser and shuffling through documentation.</p>\n<p>Let's say there's a type Arg defined, ok, what's it's definition? what functions can I use to work with an Arg? If there's documentation, that'd be the next thing to look at IF the typesignature isn't obvious on it's own.</p>",
        "id": 531517570,
        "sender_full_name": "grp",
        "timestamp": 1753767809
    },
    {
        "content": "<p>For example, if I import the basic-cli platform, and do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>:browse Path\n</code></pre></div>\n<p>I'd get a list like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Path\nDirEntry\nIOErr\nwrite! : val, Path, fmt =&gt; Result {} [FileWriteErr Path IOErr]\nwrite_bytes! : List U8, Path =&gt; Result {} [FileWriteErr Path IOErr]\nwrite_utf8! : Str, Path =&gt; Result {} [FileWriteErr Path IOErr]\nfrom_str : Str -&gt; Path\nfrom_bytes : List U8 -&gt; Path\ndisplay : Path -&gt; Str\nis_dir! : Path =&gt; Result Bool [PathErr IOErr]\nis_file! : Path =&gt; Result Bool [PathErr IOErr]\nis_sym_link! : Path =&gt; Result Bool [PathErr IOErr]\ntype! : Path =&gt; Result [IsFile, IsDir, IsSymLink] [PathErr IOErr]\nwith_extension : Path, Str -&gt; Path\ndelete! : Path =&gt; Result {} [FileWriteErr Path IOErr]\nread_utf8! : Path =&gt; Result Str [ FileReadErr Path IOErr, FileReadUtf8Err Path]\nread_bytes! : Path =&gt; Result (List U8) [FileReadErr Path IOErr]\nlist_dir! : Path =&gt; Result (List Path) [DirErr IOErr]\ndelete_empty! : Path =&gt; Result {} [DirErr IOErr]\ndelete_all! : Path =&gt; Result {} [DirErr IOErr]\ncreate_dir! : Path =&gt; Result {} [DirErr IOErr]\ncreate_all! : Path =&gt; Result {} [DirErr IOErr]\nhard_link! : Path =&gt; Result {} [LinkErr IOErr]\n</code></pre></div>",
        "id": 531522565,
        "sender_full_name": "grp",
        "timestamp": 1753770104
    },
    {
        "content": "<p>Love the idea. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  </p>\n<p>I think Roc will be well suited to building this kind of developer tooling. The REPL could probably do something like this.</p>",
        "id": 531530007,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753772989
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"941636\">@grp</span>,</p>\n<blockquote>\n<p>what functions can I use to work with an Arg? </p>\n</blockquote>\n<p>The most convenient way is probably to view the autocomplete when you enter <code>Arg.</code> in the IDE.</p>",
        "id": 531562791,
        "sender_full_name": "Anton",
        "timestamp": 1753782416
    },
    {
        "content": "<p>If you're new to Roc though I would probably recommend searching through the examples folder, e.g.:<br>\n<a href=\"https://github.com/search?q=repo%3Aroc-lang%2Fbasic-cli%20%22Arg.%22%20path%3Aexamples%2F&amp;type=code\">https://github.com/search?q=repo%3Aroc-lang%2Fbasic-cli%20%22Arg.%22%20path%3Aexamples%2F&amp;type=code</a></p>",
        "id": 531563820,
        "sender_full_name": "Anton",
        "timestamp": 1753782721
    }
]