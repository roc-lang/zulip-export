[
    {
        "content": "<p>I have this simple program that I am trying to parse the command line arguments from a basic-cli app, but I cannot please  the roc alpha2 compiler. It is complaining that map_try expects 2 arguments, and I'm passing only 1. But the map_try is in a pipeline, I was expecting this to work. Any help?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>app [main!] { pf: platform \"https://github.com/roc-lang/basic-cli/releases/download/0.19.0/Hj-J_zxz7V9YurCSTFcFdu6cQJie4guzsPMUi5kBYUk.tar.br\" }\n\nimport pf.Arg\nimport pf.Stdout\n\nparse_arg = |arg|\n    { after, before } = Str.split_first(arg, \".\")?\n    Ok (Str.to_dec(before)?, Str.to_dec(after)?)\n\nmain! : List Arg.Arg =&gt; Result {} [Exit I32 Str]\nmain! = |args|\n    args\n    |&gt; List.map(Arg.display)\n    |&gt; List.map_try(parse_arg) ? |_| Exit 1 \"Invalid arg\"\n    |&gt; List.for_each! |(day, sub)| Stdout.line! \"Solving problem forday ${Num.to_str day} sub ${Num.to_str sub}\" ?? {}\n    |&gt; Ok\n</code></pre></div>\n<p>The error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>The map_try function expects 2 arguments, but it got only 1:\n\n14â”‚      |&gt; List.map_try(parse_arg)\n            ^^^^^^^^^^^^\n</code></pre></div>\n<p>And version:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc --version\nroc nightly pre-release, built from commit 689c58f on Mi 29 Jan 2025 09:02:05 UTC\n</code></pre></div>",
        "id": 497058580,
        "sender_full_name": "Ian Liu Rodrigues",
        "timestamp": 1738345995
    },
    {
        "content": "<p>When I change main! to</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"kt\">Arg</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">args</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">parsed_args</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dec</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Dec</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"w\">    </span><span class=\"nv\">parsed_args</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">args</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"p\">(</span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">display</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map_try</span><span class=\"p\">(</span><span class=\"nv\">parse_arg</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"p\">({})</span>\n</code></pre></div>\n<p>It typechecks</p>",
        "id": 497060652,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738346693
    },
    {
        "content": "<p>So I think it's probably a weird interaction between whitespace function calls and parens function calls?</p>",
        "id": 497060738,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738346723
    },
    {
        "content": "<p>The new <code>?</code> binop operator may be confused around this</p>",
        "id": 497060773,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738346738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671495\">@Ian Liu Rodrigues</span> for now, you can replace</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map_try</span><span class=\"p\">(</span><span class=\"nv\">parse_arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">_</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Invalid arg\"</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map_try</span><span class=\"p\">(</span><span class=\"nv\">parse_arg</span><span class=\"p\">)</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">map_err</span><span class=\"p\">(</span><span class=\"nf\">|</span><span class=\"nv\">_</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Invalid arg\"</span><span class=\"p\">))</span><span class=\"err\">?</span>\n</code></pre></div>",
        "id": 497061965,
        "sender_full_name": "Anton",
        "timestamp": 1738347241
    },
    {
        "content": "<p>Sweet, thanks!</p>",
        "id": 497063066,
        "sender_full_name": "Ian Liu Rodrigues",
        "timestamp": 1738347627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671495\">Ian Liu Rodrigues</span> has marked this topic as resolved.</p>",
        "id": 497063080,
        "sender_full_name": "Notification Bot",
        "timestamp": 1738347635
    },
    {
        "content": "<p>Should the original code work <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>? If so, I'll make an issue for it</p>",
        "id": 497063230,
        "sender_full_name": "Anton",
        "timestamp": 1738347696
    },
    {
        "content": "<p>It should yes</p>",
        "id": 497063294,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738347719
    },
    {
        "content": "<p>Not super worried, depending on how long WSA stays around</p>",
        "id": 497063365,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738347734
    },
    {
        "content": "<p>We should make an issue regardless</p>",
        "id": 497063384,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738347744
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7567\">#7567</a></p>",
        "id": 497063880,
        "sender_full_name": "Anton",
        "timestamp": 1738347926
    }
]