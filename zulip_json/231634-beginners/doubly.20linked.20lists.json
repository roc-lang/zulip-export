[
    {
        "content": "<p>as I understand, it is currently impossible to represent a doubly linked list in roc due to it requiring ref cycles which roc disallows<br>\nwould it always be the case or at some point will roc try to integrate a cycle detector?<br>\nim totally fine with _absolutely not_, because it does add complexity and a performance penalty which idk if needed, as i've never seen a use for something _like_ doubly linked lists outside of homework<br>\njust wondering about goals here</p>",
        "id": 344610558,
        "sender_full_name": "dank",
        "timestamp": 1679817816
    },
    {
        "content": "<p>we can use opaque types to prevent things (such as list nodes) to be promiscuously referenced, <br>\ncombine this with weak ref and we can have cyclic ref without needing cycle detector</p>",
        "id": 344614376,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1679819867
    },
    {
        "content": "<p>which can be useful for lots of data types, even if deque is considered good-for-nothing</p>",
        "id": 344614494,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1679819936
    },
    {
        "content": "<p>this of course needs the \"hey we can do in-place mutation here\"-detector working to be useful, otherwise it's moot point</p>",
        "id": 344614940,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1679820177
    },
    {
        "content": "<p>interesting</p>",
        "id": 344615428,
        "sender_full_name": "dank",
        "timestamp": 1679820419
    },
    {
        "content": "<p>I'm pretty sure cycles of this nature are explicitly not allowed in the language with no plans of being added</p>",
        "id": 344675126,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679842151
    },
    {
        "content": "<p>The only ways to get a doubly linked list in roc would be up either</p>\n<ol>\n<li>Use integer indices as pointers to get around this limitation in roc (means essentially doing everything manually)</li>\n<li>Use the host to give you the type and manage it for you</li>\n</ol>",
        "id": 344676421,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679842576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583319\">dank</span> <a href=\"#narrow/stream/231634-beginners/topic/doubly.20linked.20lists/near/344610558\">said</a>:</p>\n<blockquote>\n<p>at some point will roc try to integrate a cycle detector?</p>\n</blockquote>\n<p>the current plan is never to do this - I think if there was a lot of demand for a specific data structure (e.g. a doubly linked list), the discussion would be whether we can (and if so whether we should) add a builtin to address the use case</p>",
        "id": 344695785,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679852225
    },
    {
        "content": "<p>another possibility is being able to optimize our way into it, but that seems less likely to work out in practice <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 344695871,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679852275
    }
]