[
    {
        "content": "<p>Is there a way to alias a module import?</p>",
        "id": 340129824,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678200850
    },
    {
        "content": "<p>I made <code>Bytes.Decode</code> and <code>Bytes.Encode</code> modules which expose functions with shared names, e.g. <code>Bytes.Decode.u16</code> and <code>Bytes.Encode.u16</code></p>",
        "id": 340130401,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678201014
    },
    {
        "content": "<p>I can't do <code>Bytes.Decode.{u16}</code> and expose them unqualified because it would clash with <code>Bytes.Encode.u16</code></p>",
        "id": 340130595,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678201059
    },
    {
        "content": "<p>you can at least use these functions in a qualified way</p>",
        "id": 340130677,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678201078
    },
    {
        "content": "<p>I'm not sure if aliasing of imports themselves works</p>",
        "id": 340130785,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678201098
    },
    {
        "content": "<p>Right, yeah. I'm just wondering whether there is a way to alias so I don't have to type the full module name.</p>",
        "id": 340130899,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678201123
    },
    {
        "content": "<p>Is that something intentionally left out?</p>",
        "id": 340131050,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678201154
    },
    {
        "content": "<p>I can see some drawbacks with aliasing myself. I'm curious about what would be the recommendation for cases like this</p>",
        "id": 340131975,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678201347
    },
    {
        "content": "<p>I don't think it's intentional, no</p>",
        "id": 340132051,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678201365
    },
    {
        "content": "<p>though qualifying functions is encouraged in roc (like in elm)</p>",
        "id": 340132163,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678201390
    },
    {
        "content": "<p>here you could just alias in the actual code of your module, as a stopgap</p>",
        "id": 340132267,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678201418
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 340132578,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678201491
    },
    {
        "content": "<p>In Elm, I'm used to aliasing <code>Json.Encode</code> to <code>JE</code> and <code>Json.Decode</code> to <code>JD</code>, but that might be more a habit than anything else.</p>",
        "id": 340137036,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678202454
    },
    {
        "content": "<p>In this case, I wanted to write:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">msgDecoder</span> <span class=\"o\">=</span>\n    <span class=\"n\">messageType</span> <span class=\"o\">&lt;-</span> <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"k\">await</span> <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"n\">u8</span>\n    <span class=\"n\">messageLength</span> <span class=\"o\">&lt;-</span> <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"k\">await</span> <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"n\">i32</span>\n\n    <span class=\"n\">when</span> <span class=\"n\">messageType</span> <span class=\"ow\">is</span>\n        <span class=\"s1\">'R'</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">authMsgDecoder</span>\n\n        <span class=\"n\">_</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"n\">succeed</span> <span class=\"p\">(</span><span class=\"n\">UnknownMessageType</span> <span class=\"n\">messageType</span><span class=\"p\">)</span>\n\n<span class=\"n\">authMsgDecoder</span> <span class=\"o\">=</span>\n    <span class=\"n\">success</span> <span class=\"o\">&lt;-</span> <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"k\">await</span> <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"n\">i32</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">success</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"n\">then</span>\n        <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"n\">succeed</span> <span class=\"n\">AuthenticationOk</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">BD</span><span class=\"o\">.</span><span class=\"n\">succeed</span> <span class=\"n\">AuthenticationFailed</span>\n</code></pre></div>",
        "id": 340137452,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678202537
    },
    {
        "content": "<p>right, and <code>Bytes.Encode as BE</code> does not work ?</p>",
        "id": 340137829,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678202621
    },
    {
        "content": "<p>No, I get a syntax error:</p>\n<div class=\"codehilite\"><pre><span></span><code>13│          pg.Bytes.Decode as BD,\n                             ^\n\nI am expecting a comma or end of list, like\n\n    imports [Shape, Vector]⏎\n</code></pre></div>",
        "id": 340138018,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1678202664
    },
    {
        "content": "<p>ok. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> we would want this to work, right?</p>",
        "id": 340138785,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678202805
    },
    {
        "content": "<p>yes!</p>",
        "id": 340184199,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678214163
    },
    {
        "content": "<p>it's just never been implemented <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 340184252,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678214172
    },
    {
        "content": "<p>Added an issue <a href=\"https://github.com/roc-lang/roc/issues/5105\">#5105</a> to track this.</p>",
        "id": 340304197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1678267015
    }
]