[
    {
        "content": "<p>Hi all!</p>\n<p>I'm toying around with getting a roc setup that I like.<br>\nI'm an enjoyer of Nix, and was very happy to see that roc is a flake. That makes it super easy to compile the compiler. Neat!</p>\n<p>...but <strong>I can't figure out how I'm supposed to compile roc files with nix</strong>.<br>\nSince the dependencies seem to be listed by http URL inside the source code, my best bet so far is to parse the files using plain nix, then download the files to the correct cache directory using fetchurl, and then use that as an input to my derivation. But that doesn't solve getting the hash (which nix needs as well).<br>\nNix doesn't support BLAKE3, which seems to be the format that microsoft github exposes?</p>\n<p>Languages like rust have a lockfile (Cargo.lock), which specifies the sha256 sum of each dependency. That enables projects like <a href=\"https://crane.dev\">crane</a>, which can automatically fetch all dependencies using plain nix, by parsing the lockfile.<br>\nThis isn't necessarily the right solution for Roc - but I <em>really</em> appreciate  being able to build roc code from source using nix.</p>\n<p>Surely I'm not the first person to wonder about this. It seems there are some nix-lovers in this community :)</p>\n<p><strong>How do people usually build roc code with nix?</strong></p>",
        "id": 403590728,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700659185
    },
    {
        "content": "<p>AFAIK you can't easily do so right now since roc will fetch the tar balls at compile time.</p>\n<p>I had an idea to make a nix build helper that would do a basic find replace of package urls with a nix store path from a fetchurl call</p>\n<p>Need to explore the intervals a bit to see if we could someone one a check pass to get all referenced packages. Worst case it could be a manual mapping to get started</p>",
        "id": 403594565,
        "sender_full_name": "John Murray",
        "timestamp": 1700660439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20build.20Roc.20code.20with.20nix.3F/near/403594565\">said</a>:</p>\n<blockquote>\n<p>AFAIK you can't easily do so right now since roc will fetch the tar balls at compile time.</p>\n</blockquote>\n<p>Well, only if the tarballs aren't already present in the cache directory.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20build.20Roc.20code.20with.20nix.3F/near/403594565\">said</a>:</p>\n<blockquote>\n<p>I had an idea to make a nix build helper that would do a basic find replace of package urls with a nix store path from a fetchurl call</p>\n</blockquote>\n<p>Ah that's an interesting idea. Kind of like <a href=\"https://ryantm.github.io/nixpkgs/stdenv/stdenv/#patch-shebangs.sh\">the patchShebangs hook</a></p>\n<p>But you probably would need a huge table of platform urls to nix derivations to make that work. At least if you want to stay inside nix.</p>\n<p>...or I guess you could make a non-nix thing, that generates nix code for you. Kind of similar to the &lt;something&gt;2nix packages like <a href=\"https://github.com/svanderburg/node2nix\">node2nix</a><br>\nMaybe <a href=\"https://github.com/nix-community/dream2nix/tree/main\">dream2nix</a> is a nice way of building that?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20build.20Roc.20code.20with.20nix.3F/near/403594565\">said</a>:</p>\n<blockquote>\n<p>Worst case it could be a manual mapping to get started</p>\n</blockquote>\n<p>This would definitely work. I figure I can also get the specific platforms I use to work by writing nix derivations that dumps them in the cache dir. It would just be <em>so nice</em> to have something that can build any roc package.</p>",
        "id": 403598849,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700661858
    },
    {
        "content": "<p>so, some details on how Roc's downloads work:</p>\n<ul>\n<li>the URL of each package has to end in the BLAKE3 hash of the contents of the tarball. That's not a convention, it's a rule.</li>\n<li>When the package gets downloaded, <code>roc</code> verifies that the BLAKE3 hash matches what was downloaded. (We use BLAKE3 because it seems to be the fastest.)</li>\n<li>Because we have this guarantee that, given a URL, you get the same contents every time (or else the download fails), we can (and do) download these into a global cache directory rather than a per-project cache (like <code>node_modules</code>)</li>\n</ul>",
        "id": 403600933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700662546
    },
    {
        "content": "<p>A quick fix can be to use the path platform syntax instead of the URL, like we do <a href=\"https://github.com/roc-lang/basic-cli/blob/d1c0370f84560f18eed3d6dabd1e3faefc589306/examples/hello-world.roc#L2C5-L2C39\">here</a> and when developing you should use the prebuilt-platform flag; <code>roc dev hello.roc --prebuilt-platform</code> to prevent the platform from being rebuilt every time.</p>",
        "id": 403602149,
        "sender_full_name": "Anton",
        "timestamp": 1700662884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> yea that approach seems like it would work well if we used nix store paths there</p>\n<p>Is there a way for <code>roc build</code> to just output all the tars/just download them?</p>\n<p>We could make a nix code gen tool like node2nix that </p>\n<ul>\n<li>scans the code to build for all tarballs we need</li>\n<li>calculates the sha256 for each since nix does not currently support blake3 :( <a href=\"https://nixos.wiki/wiki/Nix_Hash\">some info</a></li>\n<li>generates a nix derivation file that does a prebuild step to find replace all package urls with the nix store paths from fetchurl</li>\n</ul>\n<p>I need to dive more into how the rust builders don't need to do a code gen step but i think the above is on ok start for now</p>",
        "id": 403614822,
        "sender_full_name": "John Murray",
        "timestamp": 1700666655
    },
    {
        "content": "<p>I'm interested in exploring this, especially from the perspective of looking for something that would work for both Nix as well as other use cases.</p>\n<p>For example, I know (vaguely) that Debian doesn't allow downloads during builds, I'm also aware of people who work in companies that have firewalls and need to mirror things locally.</p>\n<p>So I wonder about a design where when the build is resolving urls, there's some way to specify \"pass the URL to this thing and it'll go get the sources and put them in the right place for the build to find them\"</p>",
        "id": 403617462,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700667480
    },
    {
        "content": "<p><code>roc build</code> would still do the BLAKE3 verification itself regardless, so I don't think it would be a problem if Nix didn't support that. Also if Nix wanted to do its own separate sha256 verification, I don't see why that would be a problem; it's not like <code>roc</code> would even know about it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 403617718,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700667557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20build.20Roc.20code.20with.20nix.3F/near/403614822\">said</a>:</p>\n<blockquote>\n<p>I need to dive more into how the rust builders don't need to do a code gen step but i think the above is on ok start for now</p>\n</blockquote>\n<p>As I understand it, <a href=\"http://crane.dev\">crane</a> works without a codegen step because it can do everything it needs to using pure nix code, without having to do any effects (like downloading a url in order to get the sha256 hash).<br>\n<code>builtins.readFile</code> lets you read the content of a file into a nix variable.<br>\n(as long as it is immediately present in the source, and not the output of another derivation)<br>\nCargo.lock contains everything you need to supply arguments to <code>fetchurl</code> (a https url and a sha256hash).<br>\nCargo.lock also contains the entire dependency tree, so it doesn't need to do this recursively. It just needs the one Cargo.lock file.</p>",
        "id": 403621475,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700668758
    },
    {
        "content": "<p>Ahh so it doesnt need import from derivation since the cargo lock has the same info as a fetch url call. Thats neat</p>",
        "id": 403622765,
        "sender_full_name": "John Murray",
        "timestamp": 1700669040
    },
    {
        "content": "<p>I'm open to ideas for how specifically to have it work, but I think the main design considerations would be:</p>\n<ul>\n<li>the source code .roc files shouldn't change; they'd be the same regardless of how things were getting installed</li>\n<li>if something isn't found in the alternative packaging source, there should be a clear explanation of what's happening so people don't mistakenly think that the original url is down and that's the problem</li>\n<li>if using the alternative package source is configured globally (e.g. by environment variables) we should think through the threat models of how someone malicious might try to silently get that set to something else on someone's system. I think that <code>roc</code> doing the hash verification against the hash that's in the URL in the source file should rule out a ton of problems here, but I still want to think it through</li>\n</ul>",
        "id": 403623921,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700669345
    },
    {
        "content": "<p>I'm open to ideas for how specifically to have it work, but I think the main design considerations would be:</p>\n<ul>\n<li>the source code .roc files shouldn't change; they'd be the same regardless of how things were getting installed</li>\n<li>if something isn't found in the alternative packaging source, there should be a clear explanation of what's happening so people don't mistakenly think that the original url is down and that's the problem</li>\n<li>if using the alternative package source is configured globally (e.g. by environment variables) we should think through the threat models of how someone malicious might try to silently get that set to something else on someone's system. I think that <code>roc</code> doing the hash verification against the hash that's in the URL in the source file should rule out a ton of problems here, but I still want to think it through</li>\n</ul>",
        "id": 403623986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700669368
    },
    {
        "content": "<p>If nix <a href=\"https://github.com/NixOS/nix/issues/8475\">supported blake3</a>, then I figure we could do something similar to <a href=\"http://crane.dev\">crane</a> for roc - at least for one level of dependency. Sadly they only support md5, sha1, sha256, and sha512.<br>\n(or inversely, if roc supported any of the nix-supported hash formats)</p>\n<p>I'm not sure how roc dependencies works. Would we also need to fetch the tarballs of a dependency's dependency, or is that included in the top-level tarball?</p>\n<p>I don't really understand the \"alternative package source\" approach.<br>\nI think the core issue is that nix needs to know the sha256 hash of every external package and platform, before nix invokes the roc compiler.<br>\nSo if the alterntive package source is something that roc calls, I'm not sure it addresses the problem.</p>",
        "id": 403625709,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700670049
    },
    {
        "content": "<p>This is a very rough overview of how i think the generated nix code would look</p>\n<div class=\"codehilite\"><pre><span></span><code>{pkgs}: let\n\nroc-pkgs = {\n  basic-cli = {\n    url  = &quot;https://github.com/roc-lang/basic-cli/releases/download/0.6.0/QOQW08n38nHHrVVkJNiPIjzjvbR3iMjXeFY5w1aT46w.tar.br&quot;;\n  sha256 = &quot;&lt;some sha&gt;&quot;;\n  };\n  # others...\n};\n\nimportedRocPkgs = {\n  # map over roc-pkgs and call `import fetchTarball(url, sha256)` to get the nix store path\n};\n\n\nbuildRocPackge = {...}: pkgs.mkDerivation {\n  preBuildStep = &#39;&#39;\n    # find replace all references to all packages to the nix store paths from importedRocPkgs\n  &#39;&#39;;\n  # left as an exereicse to the reader....\n};\n\n\n in\n\nbuildRocPackge {\n  name = &quot;foo&quot;;\n  version = &quot;0.1.0&quot;;\n\n  src = ./; # un-modified roc src code\n\n}\n</code></pre></div>\n<p>so the user would never need to update their roc code, just run something like <code>roc2nix &lt;file/folder</code> to get the above</p>",
        "id": 403627866,
        "sender_full_name": "John Murray",
        "timestamp": 1700670785
    },
    {
        "content": "<p>hm, I may be misunderstanding the motivation here! So let me take a step back and try to understand the problem better.</p>\n<p>Let's say I'm on nixOS, I run the <code>roc</code> executable, and it downloads and unzips some source files into a cache in my home directory (possibly repeating this process if those packages depend on other URL packages), and then the build uses those source files as normal.</p>\n<p>So what's undesirable about that process? What would be the benefits of having a different process?</p>",
        "id": 403629762,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700671476
    },
    {
        "content": "<p>Theres two different modes I end up in when im using nixos</p>\n<ul>\n<li>\n<p>Dev mode where im working on some code. In cases like this i use cargo, npm, roc etc for quick iterations and better build times</p>\n</li>\n<li>\n<p>\"Prod\" mode where I need a nix derviation to import into either my nix system config or other dev shells for other projects.  For example if vscode was written in roc I would love to just put <code>roc-code</code> in my list of common programs in my nix config <a href=\"https://github.com/JRMurr/NixOsConfig/blob/89f79706bbdeb654ac2714bbfb3a0a64a7957c62/common/programs.nix#L13\">here</a>. Then when i do system rebuilds it would either compile it for me or fetch from a nix binary cache </p>\n</li>\n</ul>\n<p>So in dev mode using roc as is works great! </p>\n<p>Prod mode is the issue we are trying to address. Since roc does network calls during its build the nix mkDerivation sandbox will yell since it wont allow arbitrary network calls. The <code>roc2nix</code> approach would generate all the needed packages so the nix sandbox knows they are allowed</p>",
        "id": 403630895,
        "sender_full_name": "John Murray",
        "timestamp": 1700671901
    },
    {
        "content": "<p>Its sort of like when you need to package up your project up in a docker file for a deployment. But in this case its a nix derivation and not docker</p>",
        "id": 403631042,
        "sender_full_name": "John Murray",
        "timestamp": 1700671960
    },
    {
        "content": "<p>I see - is it important that in prod mode it's still building from source? Or is it ok to just have a final binary that was built in dev mode</p>",
        "id": 403649928,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700679598
    },
    {
        "content": "<p>+1 <span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span> </p>\n<p>Developing roc projects inside a nix-managed environment already works great.<br>\nI think running <code>roc dev</code>, <code>roc check</code>, and friends will always be preferable to <code>nix build</code> and <code>nix flake check</code>.</p>\n<p>I think the interesting bit is making a derivation that builds a roc program.<br>\nI think roc builds are probably properly reproducible without nix; but nix derivations can be used in other nix derivations, like nixos hosts, nix shells, or for building other programs that depend on my roc program.</p>\n<p>I can think of three ways of doing this:</p>\n<ul>\n<li>manually hashing and writing a bit of nix code for each roc dependency, that includes its' sha256 and url</li>\n<li>a program to generate the nix code described above, by parsing the roc code, fetching and hashing (i.e. roc2nix)</li>\n<li>maintaining a set of nix derivations for all of the roc deps one needs, similar to <a href=\"https://github.com/DavHau/pypi-deps-db\">https://github.com/DavHau/pypi-deps-db</a></li>\n</ul>\n<p>My gut feel right now is that roc2nix is the comfiest way to go.<br>\nIt also sounds like a fun program to write!</p>\n<p>I don't think it's strictly necessary to find/replace the package urls in the source code.<br>\nIt doesn't seem important whether roc finds the package in /nix/store or in the cache dir of the sandboxed environment.<br>\nSince roc compiled roc binaries are (always?) fully static, the deps only need to be present at build-time.</p>\n<p>I think it would be <em>really neat</em> if it were possible to add a dependency just inside the roc code, without having to rewrite the nix code that builds the roc package.<br>\nRust projects have this ability because all the info nix needs (hashes and urls) are directly available in Cargo.lock.</p>",
        "id": 403655078,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700681993
    },
    {
        "content": "<p><code>roc</code> never introduces dynamic dependencies, but it's always possible for the platform to have them - so <code>roc</code> can't guarantee that the output binary is static</p>",
        "id": 403656495,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700682692
    },
    {
        "content": "<p>yeah we do have the same info except the hashes are BLAKE3...I'd rather not change that to something slower (like sha256) or significantly less collision resistant, and I don't think a \"pick your own hashing algorithm\" feature would work well in practice because package authors would just end up with a ton of issues like \"hey please offer a separate URL for this one algorithm because that's how I want to consume it in my use case\" etc. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 403656884,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700682867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20build.20Roc.20code.20with.20nix.3F/near/403649928\">said</a>:</p>\n<blockquote>\n<p>I see - is it important that in prod mode it's still building from source? Or is it ok to just have a final binary that was built in dev mode</p>\n</blockquote>\n<p>Warning: a lot of personal preference in this post</p>\n<p>I prefer building from source.</p>\n<p>I'd rather run a tool like roc2nix when I commit, than I would have my nix file refer to ./build/program or something. Binary blobs are ominous.<br>\nI like using nix as a complete CI tool. It's easy to run pipelines locally.<br>\nIt's also cool that I can compile all my personal projects with <code>nix build</code>.</p>\n<p>Having to run <code>roc build &amp;&amp; nix build</code> instead is not <em>that</em> bad, and with something like roc2nix it'd be kind of equivalent anyway: <code>roc2nix &amp;&amp; nix build</code>.<br>\nBut with <code>roc2nix</code>, I would only have to run it on dependency changes, and I can check the resulting nix code into version control- (unlike the compiled binary).</p>\n<p>...also now I kind of have an itch to write roc2nix (in roc, of course). <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> No promises...</p>",
        "id": 403658498,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700683670
    },
    {
        "content": "<p>Btw thanks for taking the time to look into stuff like this. <span aria-label=\"people hugging\" class=\"emoji emoji-1fac2\" role=\"img\" title=\"people hugging\">:people_hugging:</span></p>",
        "id": 403658642,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700683746
    },
    {
        "content": "<p>and 100% agree about changing the hashing algorithm. Even if roc supported multiple hashing algorithms, it's silly to hope for all roc code to use the hashing format that's compatible with my setup. It seems sane to go with The Right Thing, and use the one best hashing algorithm.</p>",
        "id": 403659451,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1700684151
    },
    {
        "content": "<p>Spent some time working on a prototype for a roc2nix approach where the user specifies all the urls and shas. It <em>almost</em> works <a href=\"https://github.com/JRMurr/roc2nix\">https://github.com/JRMurr/roc2nix</a></p>\n<p>currently im seeing an error in the call to <code>roc build</code> of  the patched source code of</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;There were still outstanding Arc references to module_ids&#39;, crates/compiler/load_internal/src/file.rs:1564:37\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrac\n</code></pre></div>\n<p>i probably need to do some more nix wrapping on the roc compiler in the derivation or something but has anyone seen that error before?</p>",
        "id": 403716638,
        "sender_full_name": "John Murray",
        "timestamp": 1700716601
    },
    {
        "content": "<p>Is it related to <a href=\"https://github.com/roc-lang/roc/issues/5951\">https://github.com/roc-lang/roc/issues/5951</a> ?</p>",
        "id": 403718359,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700717754
    },
    {
        "content": "<p>ahh yea thats it, thanks!</p>",
        "id": 403718616,
        "sender_full_name": "John Murray",
        "timestamp": 1700717896
    },
    {
        "content": "<p>Got something working <a href=\"https://github.com/JRMurr/roc2nix/blob/main/lib/mkRocDerivation.nix\">https://github.com/JRMurr/roc2nix/blob/main/lib/mkRocDerivation.nix</a></p>\n<p>high level is user gives a list of <code>{url = \"...\", sha256=\"...\"}</code> then this nix code will download the packages, decompress, and extract them to a folder in the nix store. then we replace all references to the urls with the nix store paths (only in the build not in the source code in the repo)</p>\n<p>I got some errors on build if i didnt pass <code>--linker=legacy</code>. I assume roc was trying to mess with some objects in the nix store it didnt have permissions to update</p>",
        "id": 403723448,
        "sender_full_name": "John Murray",
        "timestamp": 1700720641
    }
]