[
    {
        "content": "<p>Is there a list of planned language features anywhere?  I found the list of planned builtins, but I couldn't find a general list of language features.  Are they just tracked through GitHub issues, or is there a place for them?</p>",
        "id": 272747681,
        "sender_full_name": "Emi",
        "timestamp": 1645489449
    },
    {
        "content": "<p>I don't think there is a specific list, but most of the core already exists. I think the biggest known future change is abilities. They were discussed quite a bit in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Abilities\">#ideas &gt; Abilities</a></p>",
        "id": 272749060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645491052
    },
    {
        "content": "<p>alright, thank you!</p>",
        "id": 272749087,
        "sender_full_name": "Emi",
        "timestamp": 1645491103
    },
    {
        "content": "<p>im not sure if this warrants making a new topic, but the reason i asked was because i was wondering if any kind of list destructuring is planned for the future?</p>",
        "id": 272749157,
        "sender_full_name": "Emi",
        "timestamp": 1645491144
    },
    {
        "content": "<p>Our lists aren't traditional union based linked list, so it may be more complicated to do something to that nature without faking it due to having a traditional vector style representation. If you have specific thought or ideas, discussion in the <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a> stream would be warranted. Otherwise, if anyone knows specific plans past the builtins currently listed, they will probably pitch in when they read this, but I am pretty sure their are no current plans around list destructuring.</p>",
        "id": 272749350,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645491400
    },
    {
        "content": "<p>okay, thank you!</p>",
        "id": 272749473,
        "sender_full_name": "Emi",
        "timestamp": 1645491576
    },
    {
        "content": "<p>yeah I explicitly wanted not to have list destructuring because the <code>x :: xs -&gt;</code> (or <code>first :: rest -&gt;</code>) style would by default have really bad performance (for the reason Brendan mentioned)</p>",
        "id": 272750338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645492559
    },
    {
        "content": "<p>so I didn't want to encourage a footgun with special syntax! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272750385,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645492571
    },
    {
        "content": "<p>makes sense!<br>\nthanks!</p>",
        "id": 272750642,
        "sender_full_name": "Emi",
        "timestamp": 1645492876
    },
    {
        "content": "<p>I guess we could technically have this with good performance, but it would require a slice type that was able to reference a list with a offset. So (pointer to base list, offset, size). It would need to know about the base list for reference counting reasons.</p>",
        "id": 272751294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645493682
    },
    {
        "content": "<p>we haven't talked about syntax like <code>[ a, b ] -&gt;</code> though - I could see that being useful, and actually good for performance!</p>",
        "id": 272751580,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645494075
    },
    {
        "content": "<p>like it only matches on that if there are exactly two elements in the list, and names them both</p>",
        "id": 272751584,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645494084
    },
    {
        "content": "<p>that would save a bounds check</p>",
        "id": 272751587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645494089
    },
    {
        "content": "<p>Makes me think about how in c++ sometimes adding a statement like <code>assert(x.size() &gt;= 5)</code> before using the first 5 elements of a list will make the code faster because it helps the compiler realize it doesn't need to do 5 separate bounds checks.</p>",
        "id": 272751657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645494205
    },
    {
        "content": "<p>is that all LLVM?</p>",
        "id": 272751723,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645494266
    },
    {
        "content": "<p>like if I did <code>if List.len list &gt; 5 then</code> and then put several <code>List.get</code> and/or <code>List.set</code> calls after the <code>then</code> which all accessed indices between 0 and 4, would LLVM optimize away the bounds checks for me?</p>",
        "id": 272751736,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645494306
    },
    {
        "content": "<p>To my understanding, yes. Of course some of the time it is smart enough to figure it out by itself, but not always.</p>",
        "id": 272752161,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645494942
    },
    {
        "content": "<p>super awesome</p>",
        "id": 272752669,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645495554
    },
    {
        "content": "<p>I just tested this. It 100% works. Adding the if beforehand causes llvm to remove all of the checks and just directly modify the array.</p>",
        "id": 272752932,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645495883
    },
    {
        "content": "<p>niiiice</p>",
        "id": 272753562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645496743
    },
    {
        "content": "<p>in Roc?</p>",
        "id": 272753564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645496744
    },
    {
        "content": "<p>Yeah</p>",
        "id": 272754186,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645497541
    },
    {
        "content": "<p>Though not sure what to do in the else branch.</p>",
        "id": 272754262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645497620
    },
    {
        "content": "<p>In my test just had it return the original list if it was too small</p>",
        "id": 272754286,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645497666
    },
    {
        "content": "<p>the <code>else</code> branch would presumably do whatever any of the failed <code>Result</code>s would do</p>",
        "id": 272754834,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645498374
    },
    {
        "content": "<p>With <code>List.set</code>, that would be panic. Which isn't exposed</p>",
        "id": 272755542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645499172
    },
    {
        "content": "<p>oh <code>List.set</code> doesn't panic on out of bounds, - it returns the same list it was given...so I guess returning the original list in the <code>else</code> branch makes sense in that case! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 272756689,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645500784
    },
    {
        "content": "<p>Haha....forgot.</p>",
        "id": 272757047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1645501298
    }
]