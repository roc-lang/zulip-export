[
    {
        "content": "<p>I saw that <a href=\"https://github.com/roc-lang/roc/issues/2935\">tuples to records desugaring</a> is planned. I'm curious, aren't records always \"wrapped\", meaning they impose some (minimal, but still) memory usage overhead? Or does Roc optimize records to erase fields information when it's not needed at runtime?</p>",
        "id": 304327309,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1665938320
    },
    {
        "content": "<p>What do you mean by wrapped?</p>",
        "id": 304329261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665939524
    },
    {
        "content": "<p>I would compare tuples to C structs, in that they only contain the values and nothing else. Because with records I can pattern match on a subset of fields, and this code should work for all kinds of records that have these fields, I would imagine there is some additional memory needed for records (this is what I mean by \"wrapped\") so that at runtime each field name points to appropriate place in memory. Or is it optimized away when never needed for some particular record value?</p>",
        "id": 304329792,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1665939845
    },
    {
        "content": "<p>Oh, that is all compile time</p>",
        "id": 304330946,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665940515
    },
    {
        "content": "<p>They are all compiled to c structs</p>",
        "id": 304330951,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665940524
    },
    {
        "content": "<p>Pattern matching knows byte offsets and expect values at compile time</p>",
        "id": 304330976,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665940550
    },
    {
        "content": "<p>Then for a row polymorphic function, how does it work for different records that might have the matched fields at different offsets? Are there multiple versions of this function at runtime? Or is there some type-offsets mapping saved somewhere in the program, and at runtime offsets are chosen based on some tag passed from callsite?</p>",
        "id": 304331905,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1665941138
    },
    {
        "content": "<p>I believe it is like templated/generic functions where there is a version for each concrete type</p>",
        "id": 304332536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665941532
    },
    {
        "content": "<p>A single Roc function can compile to many assembly functions, one for each record type</p>",
        "id": 304332583,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665941552
    },
    {
        "content": "<p>That answers my question and is good to know, thank you!</p>",
        "id": 304332671,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1665941610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"543952\">Michał Łępicki</span> has marked this topic as resolved.</p>",
        "id": 304332674,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665941613
    },
    {
        "content": "<p>yeah - tuples, records, and single-tag tag unions all have zero memory overhead on top of the values they store</p>",
        "id": 304332996,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665941827
    },
    {
        "content": "<p>also they all compile to the same thing, so there's no runtime performance difference between using one over another</p>",
        "id": 304333043,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665941870
    },
    {
        "content": "<p>*non recursive single tags?</p>",
        "id": 304333121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665941908
    },
    {
        "content": "<p>oops, yes - good point <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 304333139,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665941924
    },
    {
        "content": "<p>although I guess in that case it's technically still true <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 304333163,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665941939
    },
    {
        "content": "<p>Not quite. Refcount</p>",
        "id": 304333180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665941958
    },
    {
        "content": "<p>oh true, fair enough!</p>",
        "id": 304333186,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665941967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20Tuples.20vs.20records.20memory.20usage/near/304332996\">said</a>:</p>\n<blockquote>\n<p>yeah - tuples, records, and single-tag tag unions all have zero memory overhead on top of the values they store</p>\n</blockquote>\n<p>Does monomorphization count as memory overhead? You need to generate multiple functions and those functions do need to be stored in memory. I guess this isn't counted because it's a really tiny amount of constant overhead?</p>",
        "id": 304333247,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1665942002
    },
    {
        "content": "<p>it does count as overhead. depending on how much you have it can sometimes be a problem (for example, if you have many specialized functions you are calling, the likelihood one’s code is in an instruction cache is much lower)</p>",
        "id": 304333455,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665942118
    },
    {
        "content": "<p>but in general it is reasonable to assume that the overhead is lower than using boxed values and dispatching at runtime based on the boxed type representation</p>",
        "id": 304333555,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665942164
    },
    {
        "content": "<p>yeah, so no <em>memory</em> overhead</p>",
        "id": 304333647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665942227
    },
    {
        "content": "<p>but there are other performance considerations than that!</p>",
        "id": 304333674,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665942241
    },
    {
        "content": "<p>just to be pedantic there is also memory overhead right. like you have to load the binary, if there is more code there will be more to load</p>",
        "id": 304334016,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665942405
    },
    {
        "content": "<p>ha, also fair</p>",
        "id": 304334877,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665942910
    },
    {
        "content": "<p>so in the sense of like - the function itself has memory overhead</p>",
        "id": 304334888,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665942921
    },
    {
        "content": "<p>even if the data structure itself doesn't</p>",
        "id": 304334894,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665942928
    },
    {
        "content": "<p>If the function doesn't have memory overhead the datastrutures would need to. Also, the function would need to be dynamic at runtime which would make it bigger and have overhead. So umm...i think we are just debating pedantic details.</p>",
        "id": 304335656,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665943354
    },
    {
        "content": "<p>well yes, but that's fun <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 304335697,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665943384
    },
    {
        "content": "<p>fair</p>",
        "id": 304336129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665943636
    }
]