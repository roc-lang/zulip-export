[
    {
        "content": "<p>Im gradually getting up to speed with Roc, but i a couple of things I’m not sure of</p>\n<p>what does the | thing mean I’ve seen in some code snippets? Is it a new syntax?</p>\n<p>What does the trailing ? mean (eg as mentioned in the static dispatch proposal?</p>\n<p>Does roc currently have any ad hoc polymorphism, operator overloading ,  (type classes or similar)? <br>\nDo you use different operators for + eg like ocaml?</p>\n<p>thx</p>",
        "id": 491282289,
        "sender_full_name": "Yunti",
        "timestamp": 1735565280
    },
    {
        "content": "<p>The <code>|</code> is the new lambda syntax:<br>\nnew syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">credits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">songs</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">song</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"Performed by $(song.artist)\"</span>\n</code></pre></div>\n<p>old syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">credits</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">songs</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">song</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"s\">\"Performed by $(song.artist)\"</span>\n</code></pre></div>",
        "id": 491283640,
        "sender_full_name": "Anton",
        "timestamp": 1735566119
    },
    {
        "content": "<p>For <code>?</code>: <a href=\"https://www.roc-lang.org/tutorial#the-postfix-try-operator\">https://www.roc-lang.org/tutorial#the-postfix-try-operator</a></p>",
        "id": 491283977,
        "sender_full_name": "Anton",
        "timestamp": 1735566318
    },
    {
        "content": "<p>Roc <del>does not have ad hoc polymorphism</del> or operator overloading. Operator overloading has been discussed a lot but I don't think we have a confirmed proposal on it yet.</p>",
        "id": 491284275,
        "sender_full_name": "Anton",
        "timestamp": 1735566465
    },
    {
        "content": "<p>Something similar to type classes: <a href=\"https://www.roc-lang.org/abilities\">https://www.roc-lang.org/abilities</a> (may change in the future)</p>",
        "id": 491284451,
        "sender_full_name": "Anton",
        "timestamp": 1735566582
    },
    {
        "content": "<blockquote>\n<p>Do you use different operators for + eg like ocaml?</p>\n</blockquote>\n<p>In Roc <code>+</code> is used for integer addition, float addition and dec addition</p>",
        "id": 491284635,
        "sender_full_name": "Anton",
        "timestamp": 1735566685
    },
    {
        "content": "<p>Abilities actually qualify as ad hoc polymorphism</p>",
        "id": 491286008,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735567462
    },
    {
        "content": "<p>but, importantly, they are not higher-kinded - which is a difference between them and Haskell's typeclasses</p>",
        "id": 491286062,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735567499
    },
    {
        "content": "<p>we can support operator overloading, but currently don't. Probably will after static dispatch lands though. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491286105,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735567533
    },
    {
        "content": "<p>Nice thanks for replying that’s really helpful.  Is there a paper / discussion on the lambda syntax? I may have missed that when looking around.</p>",
        "id": 491301656,
        "sender_full_name": "Yunti",
        "timestamp": 1735575937
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/.E2.9C.94.20lambda.20syntax\">#ideas &gt; ✔ lambda syntax</a> <br>\nand also <br>\n<a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Remove.20the.20need.20for.20backslashes.20for.20lambdas.3F\">#ideas &gt; Remove the need for backslashes for lambdas?</a> <br>\nare some discussions around that.</p>",
        "id": 491302450,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1735576324
    },
    {
        "content": "<p>Thanks</p>",
        "id": 491303946,
        "sender_full_name": "Yunti",
        "timestamp": 1735577166
    },
    {
        "content": "<p>I’m keen to start having a go of coding in Roc over the holidays (whilst there is a bit of time) but there seems to be a lot in flux at the moment.  Is there a branch with purity inference, static dispatch, for and var in it to play around with or some of these (these seem like the biggest current changes in terms of coding style) ?</p>",
        "id": 491306935,
        "sender_full_name": "Yunti",
        "timestamp": 1735578821
    },
    {
        "content": "<p>Purity inference is already available on nightly: <a href=\"https://github.com/roc-lang/examples/pull/223\">examples</a><br>\nNot sure if static dispatch is already in progress, work on for and var has not started yet I think</p>",
        "id": 491307995,
        "sender_full_name": "Anton",
        "timestamp": 1735579436
    },
    {
        "content": "<p>I don't think anyone has started on static dispatch yet</p>",
        "id": 491308553,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735579734
    },
    {
        "content": "<p>that's an interesting one in that it exclusively does things we already do (e.g. type inference, looking up implementations in different modules - which is what Abilities already do) but it doesn't do them quite the same way as anything that's in the compiler today <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491308655,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735579796
    },
    {
        "content": "<p>Ok thanks , maybe I’ll have a go with the nightly on a few examples and sketch out what the code would look like if those other features were in to get a feel for the language.</p>",
        "id": 491313325,
        "sender_full_name": "Yunti",
        "timestamp": 1735582506
    }
]