[
    {
        "content": "<p>I tried moving an old F# (and OCaml before that ) lesson I found on the web to Roc:</p>\n<div class=\"codehilite\" data-code-language=\"F#\"><pre><span></span><code><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Tree</span><span class=\"o\">&lt;</span><span class=\"k\">'</span><span class=\"n\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Tree</span><span class=\"o\">&lt;</span><span class=\"k\">'</span><span class=\"n\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">'</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">Tree</span><span class=\"o\">&lt;</span><span class=\"k\">'</span><span class=\"n\">a</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Leaf</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Leaf</span><span class=\"w\">                       </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Leaf</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Leaf</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\">  </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Leaf</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"w\"> </span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">Leaf</span><span class=\"w\"> </span><span class=\"n\">data</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">queue</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">queue</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">None</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Leaf</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_)::</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"o\">)::</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">trace</span><span class=\"o\">))</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">trace</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">trace</span><span class=\"o\">])</span>\n\n<span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"%A\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">tree</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>The above works, but my Roc version gives me an error:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Leaf</span><span class=\"p\">]</span>\n\n<span class=\"nv\">insert</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">element</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Leaf</span><span class=\"p\">)</span><span class=\"w\">                     </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Leaf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Leaf</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nv\">insert</span><span class=\"w\"> </span><span class=\"nv\">l</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\">  </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">insert</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Leaf</span>\n\n<span class=\"nv\">boom</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"kt\">Leaf</span><span class=\"w\"> </span><span class=\"nv\">insert</span>\n\n<span class=\"nv\">find</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">goal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">queue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">queue</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">None</span>\n<span class=\"w\">        </span><span class=\"p\">[(</span><span class=\"kt\">Leaf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">find</span><span class=\"w\"> </span><span class=\"nv\">goal</span><span class=\"w\"> </span><span class=\"nv\">tail</span>\n<span class=\"w\">        </span><span class=\"p\">[(</span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">goal</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">                </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">prepend</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">                </span><span class=\"nv\">find</span><span class=\"w\"> </span><span class=\"nv\">goal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">prepend</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">prepend</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)])</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"$(Inspect.toStr (find 5 [boom, []] ))\"</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\n\nThis list contains elements with different types:\n\n32│      Stdout.line &quot;$(Inspect.toStr (find 5 [boom, []] ))&quot;\n                                                     ^^\n\nIts 2nd element is a list of type:\n\n    List *\n\nHowever, the 1st element has the type:\n\n    [\n        Leaf,\n        Node (\n            a,\n            Num *,\n            a,\n        )c,\n    ] as a\n\nEvery element in a list must have the same type!\n</code></pre></div>\n<p>Any help would be greatly appreciated.</p>",
        "id": 450328394,
        "sender_full_name": "Francois Green",
        "timestamp": 1720578558
    },
    {
        "content": "<p>If you move the <code>boom</code> definition inside of <code>main</code>, does it work?</p>",
        "id": 450328613,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720578705
    },
    {
        "content": "<p>That didn't work for me, ignore it</p>",
        "id": 450328827,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720578787
    },
    {
        "content": "<p>Thanks for posting the whole function, let me see if I can figure out what the issue is</p>",
        "id": 450328865,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720578806
    },
    {
        "content": "<p>I find adding type annotations to \"pin\" the types can help sometimes. Like it enables the compiler to find the issue sooner, or provide a better error message.</p>",
        "id": 450329209,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720579043
    },
    {
        "content": "<p>Yeah, that's what I'm doing</p>",
        "id": 450329211,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720579051
    },
    {
        "content": "<p>Could you define an fn and use that instead of <code>[]</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>empty : Tree a\nempty = []\n</code></pre></div>",
        "id": 450329373,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720579149
    },
    {
        "content": "<p>Yeah, with doing that, I found two things:</p>\n<ul>\n<li><code>Leaf</code> is an empty tree, not <code>[]</code>, so the list is currently not homogeous</li>\n<li>find doesn't quite line up, type-wise:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">find</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">None</span><span class=\"p\">]</span>\n<span class=\"nv\">find</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">goal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">queue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">queue</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">None</span>\n<span class=\"w\">        </span><span class=\"p\">[(</span><span class=\"kt\">Leaf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">find</span><span class=\"w\"> </span><span class=\"nv\">goal</span><span class=\"w\"> </span><span class=\"nv\">tail</span>\n<span class=\"w\">        </span><span class=\"p\">[(</span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">goal</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">                </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">prepend</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">                </span><span class=\"nv\">find</span><span class=\"w\"> </span><span class=\"nv\">goal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">prepend</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">prepend</span><span class=\"w\"> </span><span class=\"nv\">trace</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)])</span>\n</code></pre></div>\n<p>gives 4 errors, one of which is:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in test.roc ───────────────────────────────────────────────────\n\nThis 2nd argument to find has an unexpected type:\n\n26│                  find goal (List.concat tail [(l, List.prepend trace y), (r, List.prepend trace y)])\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis concat call produces:\n\n    List (\n        *,\n        List (Num a),\n    )b\n\nBut find needs its 2nd argument to be:\n\n    List [\n        Leaf,\n        Node (\n            a,\n            Num a,\n            a,\n        )b,\n    ] as a\n</code></pre></div>",
        "id": 450329751,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720579419
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>find : a, List (Tree a) -&gt; [Some a, None] where a implements Eq\n</code></pre></div>\n<p>is a better type annotation btw</p>",
        "id": 450330078,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720579586
    },
    {
        "content": "<p>I'm sure I'm missing something, but how is <code>[boom, []]</code> expected to typecheck? Isn't <code>boom</code> a <code>Tree I64</code> while <code>[]</code> is a <code>List *</code>?</p>",
        "id": 450331604,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720580556
    },
    {
        "content": "<p>Maybe it should be just <code>[boom]</code> or <code>[boom, Leaf]</code>?</p>",
        "id": 450331761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720580659
    },
    {
        "content": "<p>Oh, I think there is a tuple missing cause F# uses <code>,</code> for tuples and <code>;</code> for lists</p>",
        "id": 450332185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720580999
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"$(Inspect.toStr (find 5 [(boom, [])]))\"</span>\n</code></pre></div>",
        "id": 450332236,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720581009
    },
    {
        "content": "<p>That runs for me</p>",
        "id": 450332264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720581034
    },
    {
        "content": "<p>Thank you so much!  I keep forgetting that it's commas not parentheses that connote tuple in these ML languages!</p>",
        "id": 450338154,
        "sender_full_name": "Francois Green",
        "timestamp": 1720583705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674667\">Francois Green</span> has marked this topic as resolved.</p>",
        "id": 450338159,
        "sender_full_name": "Notification Bot",
        "timestamp": 1720583712
    }
]