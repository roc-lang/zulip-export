[
    {
        "content": "<p>So I recently encountered a very strange bug when I introduced a new field to a type aliased record. I have two functions which each build this record in slightly different ways, but are nearly identical. However, one of my functions crashes the compiler when I include assignment of this field in the function. It crashes with the following message:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">gen_llvm</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">llvm</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">5764</span>:<span class=\"mi\">19</span>:\n<span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">analysis</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">ModName</span><span class=\"p\">(</span><span class=\"s\">\"UserApp\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"n\">FuncName</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\x0c\\x00\\x00\\x00\\x18\\x00\\x00\\x00</span><span class=\"s\">\\xd3m\\xe6</span><span class=\"se\">\\x0f</span><span class=\"s\">\\xa9\\xd7\\x9c\\x94\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">binding</span><span class=\"w\"> </span><span class=\"n\">ValueId</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>: <span class=\"nc\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">ModName</span><span class=\"p\">(</span><span class=\"s\">\"UserApp\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">FuncName</span><span class=\"p\">(</span><span class=\"s\">\"&lt;</span><span class=\"se\">\\x00\\x00\\x00\\x1a\\x00\\x00\\x00</span><span class=\"s\">\\xb8\\x89\\xb1cv\\xbb\\x90\\x8e\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>My function is below. Note that the field  which causes the crash is currently commented out. Also note: as it currently stands, with the value is being assigned to a placeholder at the top of the function but not included in the record, I do not get the compiler panic. The compiler simply complains about my record not matching the expected return type. The crash only occurs if I include the value in the record.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\">## Build the request body to be sent in the Http request using a prompt string</span>\n<span class=\"nv\">buildPromptRequestBody</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">RequestBody</span>\n<span class=\"nv\">buildPromptRequestBody</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">client</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">prompt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">responseFormat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">responseFormat</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">model</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">messages</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Option</span><span class=\"p\">.</span><span class=\"nx\">none</span><span class=\"w\"> </span><span class=\"p\">{},</span>\n<span class=\"w\">        </span><span class=\"nv\">prompt</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Option</span><span class=\"p\">.</span><span class=\"nx\">some</span><span class=\"w\"> </span><span class=\"nx\">prompt</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">temperature</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">temperature</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">topA</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">topA</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">topP</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">topP</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">topK</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">topK</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">frequencyPenalty</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">frequencyPenalty</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">presencePenalty</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">presencePenalty</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">repetitionPenalty</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">repetitionPenalty</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">minP</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">minP</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">seed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">seed</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">maxTokens</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">maxTokens</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">provider</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">order</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">providerOrder</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"c1\"># responseFormat,</span>\n<span class=\"w\">        </span><span class=\"nv\">models</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">models</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">route</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">route</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I have a second function which is nearly identical, but instead of prompt, it assigns messages. The second function has no problems with the <code>responseFormat</code> record field, and is assigning it without issue - I can leave that line in, and no crash is encountered.</p>",
        "id": 439023319,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715866879
    },
    {
        "content": "<h3>Okay, some more detail:</h3>\n<ul>\n<li><code>responseFormat</code> is of the type <code>Option { type: Str}</code>, where Option is the opaque from roc-json.</li>\n<li>After a little testing, and hardcoding the value of responseFormat:<ul>\n<li>Changing the record to have 2 fields instead of 1 would prevent the crash.</li>\n<li>Changing the record to have 1 field, but a U8 instead of a Str would prevent the crash.</li>\n<li>Leaving the record the same, but hardcoding to Option.none {} would result in a different crash.</li>\n<li>Keeping the record to 1 field of type Str, but changing the name of the field still crashed.</li>\n</ul>\n</li>\n<li>Thus:<ul>\n<li><code>responseFormat: Option.some { type: \"\" } </code> crashes as described.</li>\n<li><code>responseFormat: Option.some { type: \"\", extra: \"\" }</code> does not crash.</li>\n<li><code>responseFormat: Option.some { type: 0 }</code> does not crash.</li>\n<li><code>responseFormat: Option.none {}</code> crashes with a new panic message.</li>\n</ul>\n</li>\n</ul>",
        "id": 439069376,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715880838
    },
    {
        "content": "<p>Here is the code for Json.Option:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Option</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Some</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">None</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nx\">implements</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nx\">Eq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Decoding</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">decoder</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">decoderRes</span><span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nx\">Encoding</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">toEncoder</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">toEncoderRes</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"nv\">none</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">@Option</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">None</span><span class=\"p\">)</span>\n\n<span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">@Option</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Some</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 439069843,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715881016
    },
    {
        "content": "<p>One more detail: after splitting my two functions described in my original message into separate modules, both produce the same crash.</p>",
        "id": 439070552,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715881310
    },
    {
        "content": "<p>TLDR:<br>\nThere appears to be a bug in the compiler that does not like: <br>\n<code>Option { field: Str }</code> as a type.<br>\nI need to do more troubleshooting, I have this same type elsewhere in code and working fine (IE, its in my client). Not sure what differentiates, since both are records with a field of this type.</p>",
        "id": 439070568,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715881317
    }
]