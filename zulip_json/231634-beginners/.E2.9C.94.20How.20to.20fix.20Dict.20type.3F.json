[
    {
        "content": "<p>I've tried to be very explicit for the compiler, with hints to use (Int Unsigned32), and have even added a bunch of Num.toU32 throughout my code. Yet, it's still finding an issue. I'm not sure how to continue debugging this.</p>\n<p>The very odd thing to me is this fixes it.</p>\n<div class=\"codehilite\"><pre><span></span><code>copies = 0\n</code></pre></div>\n<p>This breaks the Dict type:</p>\n<div class=\"codehilite\"><pre><span></span><code>copies = Dict.get numCardsByGame index |&gt; Result.withDefault 0\n</code></pre></div>\n<p>Error message: </p>\n<div class=\"codehilite\"><pre><span></span><code>This 2nd argument to |&gt; has an unexpected type:\n\n51â”‚                      |&gt; incrementCards numCardsByGame\n                                           ^^^^^^^^^^^^^^\n\nThis numCardsByGame value is a:\n\n    Dict (Int Natural) (Int Natural)\n\nBut |&gt; needs its 2nd argument to be:\n\n    Dict (Int Unsigned32) (Int Unsigned32)\n</code></pre></div>\n<p>The full code section:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>AoC code inside</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">gamelist</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">correctPicksByGame</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">gamelist</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">correctPicksInGame</span>\n\n<span class=\"w\">    </span><span class=\"nv\">emptyDict</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">emptyDict</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span>\n\n<span class=\"w\">    </span><span class=\"nv\">numBonusCardsByGame</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span>\n<span class=\"w\">            </span><span class=\"nv\">correctPicksByGame</span>\n<span class=\"w\">            </span><span class=\"nv\">emptyDict</span>\n<span class=\"w\">            </span><span class=\"nf\">\\</span><span class=\"nv\">numCardsByGame</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">copies</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">numCardsByGame</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"w\">                </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">                    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Process</span><span class=\"w\"> </span><span class=\"nv\">normal</span><span class=\"w\"> </span><span class=\"nv\">cards</span>\n<span class=\"w\">                    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">copies</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">join</span>\n<span class=\"w\">                    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span>\n<span class=\"w\">                    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"s\">\"range repeat\"</span>\n<span class=\"w\">                    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">incrementCards</span><span class=\"w\"> </span><span class=\"nv\">numCardsByGame</span>\n<span class=\"w\">                </span><span class=\"kr\">else</span>\n<span class=\"w\">                    </span><span class=\"nv\">numCardsByGame</span>\n\n<span class=\"w\">    </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">correctPicksByGame</span>\n<span class=\"w\">    </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">numBonusCardsByGame</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">correctPicksByGame</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"s\">\"t\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">values</span><span class=\"w\"> </span><span class=\"nv\">numBonusCardsByGame</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"s\">\"bonus\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">incrementCards</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span>\n<span class=\"nv\">incrementCards</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">range</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">numCardsByGame</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span><span class=\"w\"> </span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"nv\">numCardsByGame</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">key</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"nv\">updatedDict</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">numCardsByGame</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"nv\">key</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">incrementDict</span>\n<span class=\"w\">        </span><span class=\"nv\">incrementCards</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">updatedDict</span>\n\n<span class=\"nv\">incrementDict</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Missing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)]</span>\n<span class=\"nv\">incrementDict</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">possibleValue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">possibleValue</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div>\n</div></div>",
        "id": 405893980,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701716558
    },
    {
        "content": "<p>Ah, I see... It's that the <code>copies</code> variable needs to be <code>Int Natural</code> given how it's used later. Then, following that backwards, we see that <code>Dict.get numCardsByGame index...</code> must be able to return a <code>Int Natural</code>.</p>",
        "id": 405895673,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701717281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460629\">Jason Hobbs</span> has marked this topic as resolved.</p>",
        "id": 405895695,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701717295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460629\">Jason Hobbs</span> has marked this topic as unresolved.</p>",
        "id": 405895914,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701717381
    },
    {
        "content": "<p>I think my understanding about \"following that backwards\" is wrong. </p>\n<p>Appending <code>|&gt; Num.toNat</code> to the <code>Dict.get</code> should've resolved the need for <code>Dict.get</code> to return an <code>Int Natural</code>. Especially, since I gave it the starting type <code>emptyDict : Dict (Int Unsigned32) (Int Unsigned32)</code></p>",
        "id": 405896086,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701717470
    },
    {
        "content": "<p>Okay, that did resolve half of it... I just didn't realize the same thing was happening via the <code>index</code> I was using.</p>\n<p>Got there... </p>\n<div class=\"codehilite\"><pre><span></span><code>                copies : Nat\n                copies = Dict.get numCardsByGame (Num.toU32 index) |&gt; Result.withDefault 0 |&gt; Num.toNat\n</code></pre></div>",
        "id": 405896630,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701717681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460629\">Jason Hobbs</span> has marked this topic as resolved.</p>",
        "id": 405896653,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701717691
    },
    {
        "content": "<p>the fun of integer types.... Nat being an especially common pain point due to suddenly changing the api and leading to type mismatch.</p>",
        "id": 405897667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701718077
    },
    {
        "content": "<p>Yeah, I don't really know how to troubleshoot these very well yet.</p>\n<p>Right now, it's a lot of trial and error toggling compiler hints and casting inline to get more info.</p>",
        "id": 405900221,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701719123
    },
    {
        "content": "<p>Probably a sign that our errors aren't great here due to unifying wrong and then they type getting caught elsewhere</p>",
        "id": 405900567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701719271
    },
    {
        "content": "<p>A lot fo time the main way to help with this is to turn lambdas into real functions and type them. Then if needed, also type some variables. That gives concretes for the roc type checker to latch onto and propagate to catch the errors more locally.</p>",
        "id": 405900710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701719331
    },
    {
        "content": "<p>I love the term <em>pinning</em> the types at that point, I heard it here somewhere</p>",
        "id": 405904019,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701720651
    },
    {
        "content": "<p>Yeah, pinning is a great term for that. I wonder if we can add this to a guide somewhere. Just seams like a useful concept for many</p>",
        "id": 405904332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701720768
    },
    {
        "content": "<p>Pinning has a specific meaning in erlang/elixir, but this wouldn't be the first time a software word is used to mean two different things <a href=\"https://hexdocs.pm/elixir/1.16/pattern-matching.html#the-pin-operator\">https://hexdocs.pm/elixir/1.16/pattern-matching.html#the-pin-operator</a></p>\n<p>I guess the less obscure place pinning is used would be version pinning in some package managers.</p>",
        "id": 405910061,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701723461
    },
    {
        "content": "<p>Rust also has its pinning: <a href=\"https://doc.rust-lang.org/std/pin/index.html\">https://doc.rust-lang.org/std/pin/index.html</a> ;]</p>",
        "id": 405913870,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701725051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> would you be ok with a couple of sentences added to <a href=\"https://www.roc-lang.org/tutorial#type-annotations\">tutorial#type-annotations</a> using this term? I think this is a really natural analogy for the interaction with the compiler being optional, and how you want to add annotations because it helps the compiler help you.</p>",
        "id": 405913877,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701725056
    },
    {
        "content": "<p>When I think of pinning, I normally think of pinning memory for gpu related work. but I think the term is generic enough we can use it here too.</p>",
        "id": 405914151,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701725192
    }
]