[
    {
        "content": "<p>I'm wondering if there is some better way to match on these? i feel like it should be possible  using an or patttern or somesuch.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">LList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">LList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">prev</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">LList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">First</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">LList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Last</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">prev</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">LList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">LList</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">data</span>\n<span class=\"w\">        </span><span class=\"kt\">Last</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">data</span>\n<span class=\"w\">        </span><span class=\"kt\">First</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">data</span>\n</code></pre></div>",
        "id": 419780375,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707119416
    },
    {
        "content": "<p>Looks good to me.</p>",
        "id": 419782479,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1707120417
    },
    {
        "content": "<p>you can do <code>Node { data } | Last { data } | First { data } -&gt; data</code> as a single branch</p>",
        "id": 419810969,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1707130494
    },
    {
        "content": "<p>has no impact on runtime performance but you might like it better in terms of style</p>",
        "id": 419811061,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1707130524
    },
    {
        "content": "<p>I tried that because I thought it should work and it actually gave me a compile error complaining about shadowing.</p>",
        "id": 419811271,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707130584
    },
    {
        "content": "<p>And yes, I wasn't looking for fast performance just a cleaner representation</p>",
        "id": 419811312,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707130600
    },
    {
        "content": "<p>in this case <code>Node r | Last r | First r -&gt; r.data</code> might work?</p>",
        "id": 419813024,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1707131126
    },
    {
        "content": "<p>shadowing is weird here, I would consider that a bug</p>",
        "id": 419813073,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1707131143
    },
    {
        "content": "<p>Haha, yup tried that too</p>",
        "id": 419813088,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707131148
    },
    {
        "content": "<p>Also didn't work</p>",
        "id": 419813109,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707131154
    },
    {
        "content": "<p>what is the error exactly?</p>",
        "id": 419813125,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1707131161
    },
    {
        "content": "<p>Jumped back on my computer:<br>\nThat's your first suggestion</p>\n<div class=\"codehilite\"><pre><span></span><code>── DUPLICATE NAME in ./LList.roc ───────────────────────────────────────────────\n\nThe data name is first defined here:\n\n13│          Node { data }\n                  ^^^^^^^^\n\nBut then it&#39;s defined a second time here:\n\n14│          | Last { data }\n                    ^^^^^^^^\n\nSince these variables have the same name, it&#39;s easy to use the wrong\none by accident. Give one of them a new name.\n\n\n── DUPLICATE NAME in ./LList.roc ───────────────────────────────────────────────\n\nThe data name is first defined here:\n\n13│          Node { data }\n                  ^^^^^^^^\n\nBut then it&#39;s defined a second time here:\n\n15│          | First { data } -&gt; data\n                     ^^^^^^^^\n\nSince these variables have the same name, it&#39;s easy to use the wrong\none by accident. Give one of them a new name.\n\n\n── NAME NOT BOUND IN ALL PATTERNS in ./LList.roc ───────────────────────────────\n\ndata is not bound in all patterns of this when branch\n\n13│          Node { data }\n                    ^^^^\n\nIdentifiers introduced in a when branch must be bound in all patterns\nof the branch. Otherwise, the program would crash when it tries to use\nan identifier that wasn&#39;t bound!\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>",
        "id": 419813785,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707131385
    },
    {
        "content": "<p>now the other</p>\n<div class=\"codehilite\"><pre><span></span><code>value2 = \\@LList list -&gt;\n    when list is\n        Node d | Last d | First d -&gt; d.data\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ./LList.roc ────────────────────────────────────────────────\n\nThe branches of this when expression don&#39;t match the condition:\n\n12│&gt;      when list is\n13│           Node d | Last d | First d -&gt; d.data\n\nThis list value is a:\n\n    [\n        First {\n            data : a,\n            next : LList a,\n        },\n        Last {\n            data : a,\n            prev : LList a,\n        },\n        Node {\n            data : a,\n            next : LList a,\n            prev : LList a,\n        },\n    ] as b\n\nBut the branch patterns have type:\n\n    [\n        First {\n            data : a,\n            next : LList a,\n        },\n        Last {\n            data : a,\n            next : LList a,\n        },\n        Node {\n            data : a,\n            next : LList a,\n        },\n    ]\n\nThe branches must be cases of the when condition&#39;s type!\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>",
        "id": 419814163,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707131538
    },
    {
        "content": "<p>I think my intuition is that because records are \"open\" in that you can require a subset and not care about the rest of them and unions are open in that same sense. However It seems that slightly unintuitively breaks down when matching union containing a record  for which you only want the shared subset</p>",
        "id": 419814820,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707131742
    },
    {
        "content": "<p>Okay, this simpler example does work </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">BB</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"nf\">.</span><span class=\"nv\">data</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">other</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n</code></pre></div>",
        "id": 419815791,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707132077
    },
    {
        "content": "<p>It's because opaque unions are closed, right? It all works fine until i get the opaque types involved</p>",
        "id": 419816679,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707132383
    },
    {
        "content": "<p>Okay so this works with a single case</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">other</span><span class=\"nf\">:</span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"nf\">.</span><span class=\"nv\">data</span>\n<span class=\"nv\">funWrap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nv\">tag</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">other</span><span class=\"nf\">:</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"nv\">funWrap</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n</code></pre></div>",
        "id": 419817095,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707132523
    },
    {
        "content": "<p>This also works when i remove other from AA</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">BB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">BB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}]</span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U64</span>\n<span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">BB</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"nf\">.</span><span class=\"nv\">data</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"nv\">funWrap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nv\">tag</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">funWrap</span>\n</code></pre></div>",
        "id": 419818120,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707132862
    },
    {
        "content": "<p>It's like we can't have both an open union and an open record at the same time.<br>\nWhen i try to force everything to be open with annotation things get really weird:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">other</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">BB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"nv\">a</span><span class=\"p\">]</span>\n\n<span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"nf\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">BB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"nf\">*</span><span class=\"p\">]</span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U64</span>\n<span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">BB</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"nf\">.</span><span class=\"nv\">data</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"nv\">funWrap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"nv\">tag</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"nv\">tag</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">Opaque</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">AA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">funWrap</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in ./LList.roc ────────────────────────────────────────────────\n\nThe branches of this when expression don&#39;t match the condition:\n\n43│&gt;      when tag is\n44│           AA t | BB t -&gt; t.data\n45│           _ -&gt; crash &quot;&quot;\n\nThis tag value is a:\n\n    […]*\n\nBut the branch patterns have type:\n\n    […]*\n\nThe branches must be cases of the when condition&#39;s type!\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>",
        "id": 419819072,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1707133205
    },
    {
        "content": "<p>My guess is that patterns just don't have enough flexibility when being nested.</p>",
        "id": 419871253,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707148347
    }
]