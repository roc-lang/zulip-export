[
    {
        "content": "<p>Why do i get Too many args error when is use  Stdout.line this way</p>\n<div class=\"codehilite\"><pre><span></span><code>Stdout.line &quot;Hello, world&quot;\n Stdout.line &quot;Hello, Again&quot;\n</code></pre></div>",
        "id": 368726927,
        "sender_full_name": "victor dumbiri",
        "timestamp": 1687482945
    },
    {
        "content": "<p><a href=\"#narrow/stream/231634-beginners/topic/Too.20many.20args.20error.20using.20Stdout/near/368726927\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Formatting.20a.20closure.20in.20a.20record\">#beginners &gt; Formatting a closure in a record</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 368727452,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687483173
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"626833\">@victor dumbiri</span> , it may help to think of it like this</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Stdout.line &quot;Hello, World&quot; |&gt; Task.await \\{} -&gt;\n        Stdout.line &quot;Hello Again&quot;\n</code></pre></div>",
        "id": 368727611,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687483242
    },
    {
        "content": "<p>If you look at the type that <code>main</code> is expecting, it requires a <code>Task {} *</code> I think, and the type of Stdout.line is <code>Task {} *</code>, but when you want to chain these in sequence you need to use another function to combine them</p>",
        "id": 368727755,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687483321
    },
    {
        "content": "<p>My example shows how you can do this using <code>Task.await</code></p>",
        "id": 368727840,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687483347
    },
    {
        "content": "<p>That is also the same as this, which uses backpassing syntax <code>&lt;-</code> which de-sugars into the above example</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    {} &lt;- Stdout.line &quot;Hello, World&quot; |&gt; Task.await\n    Stdout.line &quot;Hello Again&quot;\n</code></pre></div>",
        "id": 368727904,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687483395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  okay, thanks</p>",
        "id": 368728430,
        "sender_full_name": "victor dumbiri",
        "timestamp": 1687483651
    },
    {
        "content": "<p>Just to add some extra context, with the original code, roc essentially is seeing it as:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world\"</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Hello, Again\"</span>\n</code></pre></div>\n<p>Where the first <code>Stdout.line</code> is getting passed 3 args the string <code>\"Hello, world\"</code>, the function <code>Stdout.line</code> and the string <code>\"Hello, Again\"</code>.<br>\nThis is probably a place where we should invest in better error messages.</p>",
        "id": 368729048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687483954
    },
    {
        "content": "<p>I made <a href=\"https://github.com/roc-lang/roc/issues/5602\">#5602</a> for this</p>",
        "id": 369373221,
        "sender_full_name": "Anton",
        "timestamp": 1687690825
    }
]