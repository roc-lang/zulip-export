[
    {
        "content": "<p>Say I want to preallocate a generic <code>List a</code> with a function like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>prealloc : U64 -&gt; List a\nprealloc = \\n -&gt; List.repeat * n\n</code></pre></div>\n<p>What is the correct syntax to refer to the type variable <code>a</code> within the function, in place of the <code>*</code>? And to zero-initialise the type?</p>\n<p>I guess an alternative would be to supply a function, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>prealloc2 : U64, ({} -&gt; a) -&gt; List a\nprealloc2 = \\n, f -&gt; List.repeat (f {}) n\n</code></pre></div>\n<p>From a performance perspective, would this compile to the same code as (effectively) <code>List.repeat 0 n</code> for a simple type? What if <code>a</code> is a tagged union type?</p>\n<p>(Separate question, is there a good way to see Roc compiled code a la Godbolt?)</p>",
        "id": 489137453,
        "sender_full_name": "Mo",
        "timestamp": 1734316854
    },
    {
        "content": "<p>I mean, I suppose a better signature would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>prealloc3 : U64, a -&gt; List a\nprealloc3 = \\n, x -&gt; List.repeat x n\n</code></pre></div>",
        "id": 489137563,
        "sender_full_name": "Mo",
        "timestamp": 1734316962
    },
    {
        "content": "<p>But I'm curious if there's zero-initialisation available somehow</p>",
        "id": 489137596,
        "sender_full_name": "Mo",
        "timestamp": 1734317010
    },
    {
        "content": "<blockquote>\n<p>is there a good way to see Roc compiled code a la Godbolt?</p>\n</blockquote>\n<p>I'm not sure... but I often generate the LLVM IR using </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build --no-link --emit-llvm-ir app.roc\n</code></pre></div>",
        "id": 489138029,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734317384
    },
    {
        "content": "<p>What is the goal? Do yu need to initialize the value at all?</p>",
        "id": 489139053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734318244
    },
    {
        "content": "<p>Anyway, you can either...</p>\n<p>use an item passed in:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">prealloc</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">prealloc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">n</span>\n</code></pre></div>\n<p>not preallocate with an item and just reserve the memory</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">prealloc</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">prealloc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">withCapacity</span><span class=\"w\"> </span><span class=\"nv\">n</span>\n</code></pre></div>\n<p>Use an ability (only works for opaque types that are created with the ability and probably not what you want).</p>",
        "id": 489139205,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734318389
    },
    {
        "content": "<p>No, uninitialised is fine. My goal is to preallocate a buffer like a monotonic arena to avoid repeated allocations of lists of objects of the same type, a tagged union.</p>",
        "id": 489139265,
        "sender_full_name": "Mo",
        "timestamp": 1734318450
    },
    {
        "content": "<p>The thing about <code>withCapacity</code> is I want to use <code>List.set</code> in my algorithm, rather than <code>append</code>. Keeping track of the valid indices myself, etc. So I ended up with <code>List.repeat</code></p>",
        "id": 489139333,
        "sender_full_name": "Mo",
        "timestamp": 1734318517
    },
    {
        "content": "<p>Yeah, that is the only way here</p>",
        "id": 489139348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734318534
    },
    {
        "content": "<p>All good. I was confused a bit about type variables, thinking I needed some way to instantiate (zero-initialise) a value given a type. This would avoid needing to pass in a value at each call site. But it's been a while since I've done functional programming, so I'm refreshing my brain cells a bit.</p>",
        "id": 489139506,
        "sender_full_name": "Mo",
        "timestamp": 1734318664
    },
    {
        "content": "<p>One update, making this generic is actually easier than I initially thought. You could use the decode ability and make a custom zero value decoder. Not saying it is a good idea, but it would automatically work with all structural types.</p>",
        "id": 489140984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734319940
    },
    {
        "content": "<p>That's interesting - something too look at a bit further down the road</p>",
        "id": 489141054,
        "sender_full_name": "Mo",
        "timestamp": 1734320028
    },
    {
        "content": "<p>yeah we could consider someday having platforms implement something like Rust's <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.GlobalAlloc.html#method.alloc_zeroed\"><code>alloc_zeroed</code></a> and then expose some way to do that for things like lists of numbers, or optimize to it when we detect <code>List.repeat 0</code> on an empty list, but there aren't any plans to do anything like that at the moment <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 489142424,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734321170
    },
    {
        "content": "<p>Interesting that <code>List.reserve</code> can never fail. That's my go-to if I need to allocate and absolutely positively must not fail. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 489159225,
        "sender_full_name": "Mo",
        "timestamp": 1734332057
    },
    {
        "content": "<p>If it fails, it does so in the catastrophic entire application out of memory sort of way.</p>",
        "id": 489163081,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734333797
    },
    {
        "content": "<p>But most people don't need to worry about that much</p>",
        "id": 489163109,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734333813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"802367\">Mo</span> has marked this topic as resolved.</p>",
        "id": 489874306,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734574575
    }
]