[
    {
        "content": "<p>Hi, the website throws an error at me that I don't understand when I try to use the embedded repl:</p>\n<p><a href=\"/user_uploads/22008/ZUufWl0AsMfNmr5rrkwqiaYM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ZUufWl0AsMfNmr5rrkwqiaYM/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/ZUufWl0AsMfNmr5rrkwqiaYM/image.png\"></a></div><p>Is this a known thing? Is my input even valid Roc?</p>",
        "id": 410766990,
        "sender_full_name": "Rolf Kreibaum",
        "timestamp": 1704150271
    },
    {
        "content": "<p><a href=\"#narrow/stream/231634-beginners/topic/Question.20on.20the.20Repl.20embedded.20in.20the.20Website/near/410766990\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Issues.20related.20to.20type.20annotations\">#beginners &gt; Issues related to type annotations</a> by <span class=\"user-mention silent\" data-user-id=\"677545\">Rolf Kreibaum</span>.</p>",
        "id": 410767031,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704150310
    },
    {
        "content": "<p>Looks like a bug in the dev wasm backend</p>",
        "id": 410767240,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704150592
    },
    {
        "content": "<p>Where would I go to report that? <a href=\"https://github.com/roc-lang/roc/issues\">https://github.com/roc-lang/roc/issues</a> or some other place?</p>",
        "id": 410767624,
        "sender_full_name": "Rolf Kreibaum",
        "timestamp": 1704151077
    },
    {
        "content": "<p>I found similar reports in the tracker, so I'll report it there.</p>",
        "id": 410767803,
        "sender_full_name": "Rolf Kreibaum",
        "timestamp": 1704151262
    },
    {
        "content": "<p>Thank you</p>",
        "id": 410767814,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704151272
    },
    {
        "content": "<p>Moved to <a href=\"https://github.com/roc-lang/roc/issues/6334\">https://github.com/roc-lang/roc/issues/6334</a> and the issue also links back to this chat. Thanks for the quick and friendly replies :-)</p>",
        "id": 410768075,
        "sender_full_name": "Rolf Kreibaum",
        "timestamp": 1704151577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677545\">Rolf Kreibaum</span> has marked this topic as resolved.</p>",
        "id": 410768078,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704151579
    },
    {
        "content": "<p>the problem is not specific to the web repl actually </p>\n<div class=\"codehilite\"><pre><span></span><code>  The rockin&#39; roc repl\n────────────────────────\n\nEnter an expression, or :help, or :q to quit.\n\n»  List.map [0.1,0.2,0.3] (\\x -&gt; x*x)\n…\nthread &#39;main&#39; panicked at &#39;not yet implemented: NumMulWrap: layout, Builtin(Decimal)&#39;, crates/compiler/gen_dev/src/generic64/mod.rs:1500:18\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> what should \"mulwrap\" for decimals do? just disregard overflow and whatever happens happens?</p>",
        "id": 410839651,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704199038
    },
    {
        "content": "<p>in practice that would mean that <code>mulWrap</code> is the same as <code>mulSaturated</code>. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> may also have an opinion here: what is the behavior we expect multiplication to have for decimals ?</p>",
        "id": 410839836,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704199147
    },
    {
        "content": "<p><code>mulWrap</code> and the like only accept integers</p>",
        "id": 410843453,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704200883
    },
    {
        "content": "<p>so the behavior I expect is a type mismatch <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 410843502,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704200897
    },
    {
        "content": "<p>no? floats implement mulwrap too</p>",
        "id": 410848422,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704203471
    },
    {
        "content": "<p>or another way to say this is: what would normal <code>mul</code> do for floats then when they overflow? is that just ignored then?</p>",
        "id": 410848562,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704203554
    },
    {
        "content": "<p>floats overflow to infinity</p>",
        "id": 410849160,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704203851
    },
    {
        "content": "<p>I guess there's an argument for extending it to work with any number type</p>",
        "id": 410849322,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704203926
    },
    {
        "content": "<p>for the sake of Dec performance</p>",
        "id": 410849365,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704203944
    },
    {
        "content": "<p>so I guess the answer for Dec would be that we would do whatever's fastest and gets the correct answer if there's no overflow</p>",
        "id": 410849433,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704203975
    },
    {
        "content": "<p>and then if there is overflow, it does something that's probably undesirable but not UB haha</p>",
        "id": 410849462,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704203999
    },
    {
        "content": "<p>so you'd reach for it for Dec when you want a but more perf and you're really confident it won't overflow</p>",
        "id": 410849607,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704204045
    },
    {
        "content": "<p>and if it does overflow you're ok with it silently getting the wrong answer if it means more perf</p>",
        "id": 410849697,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704204072
    },
    {
        "content": "<p>for dec, I think saturated is equivalent in performance to any alternative</p>",
        "id": 410856015,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704206852
    },
    {
        "content": "<p>in any case, NumWrap should not even be used here. That was a shortcut in the dev backend. I've implemented it properly here <a href=\"https://github.com/roc-lang/roc/pull/6337\">https://github.com/roc-lang/roc/pull/6337</a>.</p>",
        "id": 410858122,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704207658
    },
    {
        "content": "<p>and also fixed a bug that made roc_panic not work (crash worked before, I just messed up an argument type somewhere)</p>",
        "id": 410858205,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704207681
    },
    {
        "content": "<p>btw, I assume <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> is there a reason not to use zig's builtin <a href=\"https://ziglang.org/documentation/master/#toc-mulWithOverflow\">https://ziglang.org/documentation/master/#toc-mulWithOverflow</a> ?</p>",
        "id": 410858346,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704207730
    },
    {
        "content": "<p>mulWithOverflow doesn't work cause we don't know if it is an overflow until the Dec has been divided by 10^18.</p>",
        "id": 410867990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704211555
    },
    {
        "content": "<p>To multiple 2 decs, we multiply into a i256, then divide by 10^18.</p>",
        "id": 410868190,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704211609
    },
    {
        "content": "<p>So overflow would be if that final result doesn't fit back into an i128</p>",
        "id": 410868262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704211638
    }
]