[
    {
        "content": "<p>Hi, I would like to explore the idea of compiling (possibly untrusted) code from within my program. Are there already bindings, in rust say, to call the compiler so one does not need to do shell command stuff?</p>",
        "id": 466326327,
        "sender_full_name": "Max",
        "timestamp": 1725044096
    },
    {
        "content": "<p>You'd like to compile Roc code within your program?</p>",
        "id": 466326532,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725044172
    },
    {
        "content": "<p>Long story short, that's not a thing yet, and probably won't ever be a supported feature</p>",
        "id": 466326588,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725044206
    },
    {
        "content": "<p>However, you <em>could</em> fork an existing platform like <a href=\"https://github.com/roc-lang/basic-cli/\">basic-cli</a> and add a function call to do it on the Rust side. However, that would basically come out to a heavier version of <code>Cmd.exec \"roc\" [\"build\", ...]</code></p>",
        "id": 466326913,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725044359
    },
    {
        "content": "<p>Yeah, maybe Cmd.exec wouldn't even hurt so much. Do you happen to know how it is done on the website? I haven't looked it up, but afaik the repl available there is the compiler being called in wasm.</p>",
        "id": 466337241,
        "sender_full_name": "Max",
        "timestamp": 1725049074
    },
    {
        "content": "<p>Oh, that's a bit more complicated. The source for that starts here: <a href=\"https://github.com/roc-lang/roc/blob/f6c969af293270feb90dfdc8fcc3ffbe18f9b268/crates/repl_wasm/src/repl.rs#L182\">https://github.com/roc-lang/roc/blob/f6c969af293270feb90dfdc8fcc3ffbe18f9b268/crates/repl_wasm/src/repl.rs#L182</a></p>",
        "id": 466337462,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725049190
    },
    {
        "content": "<p>We compile a WASM version of the REPL, send your code to it, compile and link it, stringify the results, and then show it in JS</p>",
        "id": 466337600,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725049238
    },
    {
        "content": "<p>That could be something to look at, but it's unlikely we provide a JS \"eval\" equivalent for Roc</p>",
        "id": 466337668,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725049276
    },
    {
        "content": "<p>However, as time has gone on, the compiler has become more and more modular. Maybe if you think it's really valuable, we could discuss exposing a more general Rust interface for the compiler?</p>",
        "id": 466337735,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725049318
    },
    {
        "content": "<p>I think <code>libroc</code> is a good idea. </p>\n<p>I've used the compiler in this way just pulling in the rust crates and it works well, though it's definitely not a normal  approach. I wouldn't recommend it though rn as things are still changing and evolving.</p>",
        "id": 466339905,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725050454
    },
    {
        "content": "<p>yeah I'd really like to introduce a <code>libroc</code> at some point!</p>",
        "id": 466345004,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725053130
    }
]