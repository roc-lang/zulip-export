[
    {
        "content": "<p>I was talking with my team at work about Roc today. Someone pointed out that having custom platforms is a good way to not have to wait for (e.g.) database drivers to get wrapped and packaged. It made me think! How do we actually plan to manage that? If there’s some binary protocol (let’s say Postgres for example) which there’s a stable C or Rust or whatever library, will we maybe have two platforms? Or will it be up to the platform to design for their own extensibility?</p>",
        "id": 300003607,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1663780913
    },
    {
        "content": "<p>platforms are like the Highlander: there can be only one! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 300003832,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663780978
    },
    {
        "content": "<p>to me, the incentive structure here is good - it means that:</p>\n<ol>\n<li>there's a way to be unblocked (use a platform that's hardcoded to support certain DB protocols)</li>\n<li>there's a great incentive to actually implement those binary protocols in pure Roc (it means any number of platforms can support any number of DBs!)</li>\n</ol>",
        "id": 300004471,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663781178
    },
    {
        "content": "<p>I think it is also important to include an alternative to number 2.</p>\n<p>Instead of the protocol being implemented in Roc, a good generic Roc api could be generated for relational DB queries. That api then would be implemented by many platforms making it easier to jump from the <code>rust-webserver-postgres</code> to <code>rust-websever-mysql</code> platform. It could even be a no-op in the Roc code potentially.</p>",
        "id": 300013041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663783991
    },
    {
        "content": "<p>or I could eventually lower the datalog I know I'll end up writing using tags as free variables <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 300017480,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1663785565
    },
    {
        "content": "<p>Ok, it can be only one, but can it be extended? </p>\n<p>Eg, is in principle create a system of extending a platform, so something like <code>extendPlatfom: OnlyOnePlatform -&gt; OnlyOnePlatform</code> maybe written in host language, so we can plug-in random nice stuff for free?</p>",
        "id": 300056995,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1663804674
    },
    {
        "content": "<p>Eg, CLI platform gets extended with <code>roc-database-rust</code> ~platform extender~ so you don't have to wait upstream changes to play with it?</p>",
        "id": 300057252,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1663804828
    },
    {
        "content": "<p>If it is in the host language, i don't think there is really a reasonable way for roc to handle this.</p>\n<p>Probably should just use tools of the host languages and standard software tools like forking in git. I'm not sure what we reasonably could do for something of that nature.</p>",
        "id": 300060216,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663807292
    },
    {
        "content": "<p>Would be cool, but would require roc understanding and modifying hosts no matter the language they happen to be written in.</p>",
        "id": 300060282,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663807335
    },
    {
        "content": "<p>I was thinking about that in a Roc hangout call a while ago... maybe there will be multiple pieces that will be commonly composed on platforms... db-connectors, ui-renderers, http-clients, etc.</p>\n<p>Perhaps a platform specific abstraction will pop-up for that but I think it can live outside of Roc itself? I wonder how would libraries that work on top of that work.</p>\n<p>Say I have an abstraction layer on top of postgres-connector that I wanna publish - would I be able to publish a package that depends on a specific platform-exposed module? Or would we need a more complex graph of dependencies between packages and platforms for composability? (e.g. platforms would depend on an abstract API package that would then be extended by other people - each platform reimplementing its effect handlers)</p>",
        "id": 300065982,
        "sender_full_name": "Georges Boris",
        "timestamp": 1663812533
    },
    {
        "content": "<p>Yeah, it gets complex. Definitely have to think about apis a lot more when it comes to platform boundaries.</p>\n<p>One option is platforms to expose the same interface. Another is for the library to define the expected types and the platform or app to define converters. Yet another option is just to tie to a specific platform and limit library scope.</p>\n<p>I think the correct answer will heavily depend on context, but it would definitely be good to test potential solutions earlier.</p>",
        "id": 300073267,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663819002
    },
    {
        "content": "<p>As an example if we have two libraries that both expose drawing primitives, it should be possible to build a generic drawing library with adaptors that can convert to either platform. That being said, if the primitives are too far away from what the library expects the conversion may be painful and very slow. So there are definitely limits around compatibility.</p>",
        "id": 300073394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1663819133
    }
]