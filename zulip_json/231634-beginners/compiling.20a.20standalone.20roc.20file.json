[
    {
        "content": "<p>As it turns out, I can compile a platform file + app file (2 .roc only files) into a shared lib<br>\nbut question is, with a package module (ig), could it be possible to have only the one roc file?<br>\ni tried and got parsing error on the packages {}</p>",
        "id": 341992892,
        "sender_full_name": "dank",
        "timestamp": 1678870613
    },
    {
        "content": "<p>No, I think there always has to be a platform</p>",
        "id": 341993222,
        "sender_full_name": "Anton",
        "timestamp": 1678870689
    },
    {
        "content": "<p>ik this sounds a bit silly and (maybe?) goes against the platform/app idea<br>\njust wondering</p>",
        "id": 341993238,
        "sender_full_name": "dank",
        "timestamp": 1678870693
    },
    {
        "content": "<p>uh ok</p>",
        "id": 341993320,
        "sender_full_name": "dank",
        "timestamp": 1678870722
    },
    {
        "content": "<p>roc build --lib should bundle the c file if it's called host.c into the shared object, no?</p>",
        "id": 342001988,
        "sender_full_name": "dank",
        "timestamp": 1678873247
    },
    {
        "content": "<p>looking at the objdump of it, i don't see all the symbols i defined</p>",
        "id": 342002504,
        "sender_full_name": "dank",
        "timestamp": 1678873403
    },
    {
        "content": "<p>ok yea this is funky<br>\nwhen compiling with <code>--lib</code>, no roc_alloc on the shared object<br>\nwhen compiling without it (as in to an executable), it's there</p>\n<p>is this intended and im missing something or a bug?</p>",
        "id": 342006168,
        "sender_full_name": "dank",
        "timestamp": 1678874288
    },
    {
        "content": "<p>I'm not sure, could you make an issue for this: \"[...] got parsing error on the packages {}\"?<br>\nWe should have a better error message there.</p>",
        "id": 342008901,
        "sender_full_name": "Anton",
        "timestamp": 1678875017
    },
    {
        "content": "<p>sure</p>",
        "id": 342012888,
        "sender_full_name": "dank",
        "timestamp": 1678876098
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 342012928,
        "sender_full_name": "Anton",
        "timestamp": 1678876106
    },
    {
        "content": "<p>i think i misinterpreted --lib<br>\napparently the point is \"host comes later\"<br>\nwhile i thought \"with this i could bundle up my roc app + platform into a shared object instead of executable\"</p>",
        "id": 342013267,
        "sender_full_name": "dank",
        "timestamp": 1678876187
    },
    {
        "content": "<p>in theory it would've made </p>\n<div class=\"codehilite\"><pre><span></span><code>clang \\\n    -c -fPIC \\\n    -I&quot;$JAVA_HOME/include&quot; \\\n    -I&quot;$JAVA_HOME/include/linux&quot; \\\n    -o bridge.o bridge.c\n\n\n# build interop\nclang -shared -o libinterop.so bridge.o -L. -lhello\n</code></pre></div>\n<p>these two build steps + two shared object (instead of one) obsolete (imagine bridge as host)</p>\n<p>but uhh i get it</p>",
        "id": 342013567,
        "sender_full_name": "dank",
        "timestamp": 1678876253
    },
    {
        "content": "<p>So outputs you can get from roc:</p>\n<ul>\n<li><code>roc build main.roc</code> -&gt; roc will compile the platform and link to it. End result is an executable.</li>\n<li><code>roc build --lib main.roc</code> -&gt; roc will output a shared library of the roc part of the code. This can be loaded by another executable and is how runtime plugins work.</li>\n<li><code>roc build --no-link main.roc</code> -&gt; roc will output a regular object file of the roc part of the code. This can be used by any other build system or passed to a linker just like an object file you get from a c compiler. This is needed for targeting embedded devices or more complex builds where you want another system to ingest roc.</li>\n</ul>\n<p>In all of the cases. Even though you just pass <code>main.roc</code> to the compiler. It will be traversing all of the files imported by <code>main.roc</code>. All roc files from the platform, builtins, interfaces and packages will be compiled into the final binary. I am not fully sure what level of tree shaking we do vs llvm does, but it should not have extraneous functions that you don't use.</p>",
        "id": 342075578,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678890951
    },
    {
        "content": "<p>Roc can not add the platform to a shared library because the platform should be a full application with a main function. A main function doesn't make sense in a shared library.</p>",
        "id": 342075982,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678891036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/compiling.20a.20standalone.20roc.20file/near/342075982\">said</a>:</p>\n<blockquote>\n<p>Roc can not add the platform to a shared library because the platform should be a full application with a main function. A main function doesn't make sense in a shared library.</p>\n</blockquote>\n<p>yea exactly</p>",
        "id": 342076114,
        "sender_full_name": "dank",
        "timestamp": 1678891070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/compiling.20a.20standalone.20roc.20file/near/342075578\">said</a>:</p>\n<blockquote>\n<p>So outputs you can get from roc:</p>\n<ul>\n<li><code>roc build main.roc</code> -&gt; roc will compile the platform and link to it. End result is an executable.</li>\n<li><code>roc build --lib main.roc</code> -&gt; roc will output a shared library of the roc part of the code. This can be loaded by another executable and is how runtime plugins work.</li>\n<li><code>roc build --no-link main.roc</code> -&gt; roc will output a regular object file of the roc part of the code. This can be used by any other build system or passed to a linker just like an object file you get from a c compiler. This is needed for targeting embedded devices or more complex builds where you want another system to ingest roc.</li>\n</ul>\n<p>In all of the cases. Even though you just pass <code>main.roc</code> to the compiler. It will be traversing all of the files imported by <code>main.roc</code>. All roc files from the platform, builtins, interfaces and packages will be compiled into the final binary. I am not fully sure what level of tree shaking we do vs llvm does, but it should not have extraneous functions that you don't use.</p>\n</blockquote>\n<p>third one is super cool, didn't know about that<br>\nill try to make use of it</p>",
        "id": 342076253,
        "sender_full_name": "dank",
        "timestamp": 1678891096
    },
    {
        "content": "<p>I guess in your case you have a platform that is not a full application due to being for cffi and getting pulled into another language. Roc simply doesn't yet have a plan for that you case. We should be able to support it though. Not sure exactly the best way though.</p>",
        "id": 342076353,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678891117
    },
    {
        "content": "<p>after you mentioned --no-link i was thinking<br>\ncompile the roc side into an object file<br>\nthen just use clang to link the object file (+host.c) into the final shared object which the jvm would use</p>\n<p>this eliminates the need for a secondary shared lib like i had til now</p>",
        "id": 342076608,
        "sender_full_name": "dank",
        "timestamp": 1678891185
    },
    {
        "content": "<p>yep. should work</p>",
        "id": 342078138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678891480
    }
]