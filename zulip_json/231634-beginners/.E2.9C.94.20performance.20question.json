[
    {
        "content": "<p>does anything strike you all is particularly bad from a perf perspective here? <a href=\"https://gist.github.com/drewolson/9efeb114307c7323ef5d7bfcf4775a52\">https://gist.github.com/drewolson/9efeb114307c7323ef5d7bfcf4775a52</a></p>",
        "id": 477922682,
        "sender_full_name": "drew",
        "timestamp": 1729454612
    },
    {
        "content": "<p>it's an identical algorithm to this gleam <a href=\"https://github.com/drewolson/aoc-gleam/blob/main/src/aoc/year2023/day14.gleam\">https://github.com/drewolson/aoc-gleam/blob/main/src/aoc/year2023/day14.gleam</a></p>",
        "id": 477922696,
        "sender_full_name": "drew",
        "timestamp": 1729454626
    },
    {
        "content": "<p>and this ocaml <a href=\"https://github.com/drewolson/aoc-ocaml/blob/d3bd355365308c018ada088063895b2d4743975f/lib/year2023/day14.ml\">https://github.com/drewolson/aoc-ocaml/blob/d3bd355365308c018ada088063895b2d4743975f/lib/year2023/day14.ml</a></p>",
        "id": 477922743,
        "sender_full_name": "drew",
        "timestamp": 1729454647
    },
    {
        "content": "<p>and in both cases it is effectively an order of magnitude slower</p>",
        "id": 477922751,
        "sender_full_name": "drew",
        "timestamp": 1729454656
    },
    {
        "content": "<p>this is for part 2. it's a problem that requires some type of caching / dynamic programming. i'm using a dict to cache in all cases</p>",
        "id": 477922784,
        "sender_full_name": "drew",
        "timestamp": 1729454698
    },
    {
        "content": "<p>ocaml is using a <code>Hashtbl</code> which is mutable, but the gleam solution is very similar (using an immutable dict)</p>",
        "id": 477922809,
        "sender_full_name": "drew",
        "timestamp": 1729454740
    },
    {
        "content": "<p>i had a version using a <code>State</code> monad in roc initially, but i rewrote it with manual state threading because i was worried that was the performance issue</p>",
        "id": 477922829,
        "sender_full_name": "drew",
        "timestamp": 1729454762
    },
    {
        "content": "<p>Are you just running it with roc test? is there a way to run it will full input?</p>",
        "id": 477938989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729469160
    },
    {
        "content": "<p>yes, <code>roc run — -y 2023 -d 14 -p 2</code></p>",
        "id": 477939051,
        "sender_full_name": "drew",
        "timestamp": 1729469195
    },
    {
        "content": "<p>the full input is where the performance degradation is obvious</p>",
        "id": 477939070,
        "sender_full_name": "drew",
        "timestamp": 1729469222
    },
    {
        "content": "<p>this assumes your input is at <code>./data/2023/day14.txt</code></p>",
        "id": 477939154,
        "sender_full_name": "drew",
        "timestamp": 1729469286
    },
    {
        "content": "<p>do I need to download a full repo somewhere?</p>",
        "id": 477939190,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729469353
    },
    {
        "content": "<p>let me push it to the full report, one sec</p>",
        "id": 477939192,
        "sender_full_name": "drew",
        "timestamp": 1729469356
    },
    {
        "content": "<p>apologies, it's here <a href=\"https://github.com/drewolson/aoc-roc\">https://github.com/drewolson/aoc-roc</a></p>",
        "id": 477939293,
        "sender_full_name": "drew",
        "timestamp": 1729469441
    },
    {
        "content": "<p>for reference, here's roc:</p>",
        "id": 477939394,
        "sender_full_name": "drew",
        "timestamp": 1729469542
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ time ./main -y 2023 -d 14 -p 2\n90982\n./main -y 2023 -d 14 -p 2  2.56s user 0.02s system 93% cpu 2.751 total\n</code></pre></div>",
        "id": 477939395,
        "sender_full_name": "drew",
        "timestamp": 1729469543
    },
    {
        "content": "<p>and here's ocaml:</p>",
        "id": 477939397,
        "sender_full_name": "drew",
        "timestamp": 1729469547
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ time ./_build/install/default/bin/aoc -y 2023 -d 14 -p 2\n90982\n./_build/install/default/bin/aoc -y 2023 -d 14 -p 2  0.40s user 0.02s system 98% cpu 0.430 total\n</code></pre></div>",
        "id": 477939400,
        "sender_full_name": "drew",
        "timestamp": 1729469555
    },
    {
        "content": "<p>spoiler alert for my answer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 477939421,
        "sender_full_name": "drew",
        "timestamp": 1729469588
    },
    {
        "content": "<p>and here's gleam, even including compilation</p>",
        "id": 477939435,
        "sender_full_name": "drew",
        "timestamp": 1729469617
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ time gleam run -- -y 2023 -d 14 -p 2\n   Compiled in 0.01s\n    Running aoc.main\n90982\ngleam run -- -y 2023 -d 14 -p 2  0.47s user 0.18s system 102% cpu 0.636 total\n</code></pre></div>",
        "id": 477939439,
        "sender_full_name": "drew",
        "timestamp": 1729469620
    },
    {
        "content": "<p>Wow, this program takes forever to compile an optimized build of</p>",
        "id": 477939752,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729469885
    },
    {
        "content": "<p>lol</p>",
        "id": 477939791,
        "sender_full_name": "drew",
        "timestamp": 1729469947
    },
    {
        "content": "<p>it’s relatively simple, compared to large programs, right?</p>",
        "id": 477939803,
        "sender_full_name": "drew",
        "timestamp": 1729469962
    },
    {
        "content": "<p><code>40984032832  peak memory footprint</code></p>\n<p>was using about 40GB of ram/swap before I killed it. kinda surprised it runs at all for you</p>",
        "id": 477940015,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729470176
    },
    {
        "content": "<p>just for <code>roc run</code>?</p>",
        "id": 477940036,
        "sender_full_name": "drew",
        "timestamp": 1729470199
    },
    {
        "content": "<p>this was <code>roc build --optimize main.roc </code>. Then the crazy memory came from <code>./main -y 2023 -d 14 -p 2</code> with the input data I just downloaded.</p>",
        "id": 477940141,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729470289
    },
    {
        "content": "<p>i don’t understand how i keep hitting all of these things. i swear i’m just trying to write normal programs</p>",
        "id": 477940722,
        "sender_full_name": "drew",
        "timestamp": 1729470849
    },
    {
        "content": "<p>This is the big problem location</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">aux</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"nv\">m</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">firsts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">m</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">l</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"nv\">l</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"nv\">aux</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"nv\">firsts</span><span class=\"p\">)</span>\n\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">acc</span>\n</code></pre></div>",
        "id": 477941041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471203
    },
    {
        "content": "<p>transpose?</p>",
        "id": 477941074,
        "sender_full_name": "drew",
        "timestamp": 1729471235
    },
    {
        "content": "<p>weird</p>",
        "id": 477941077,
        "sender_full_name": "drew",
        "timestamp": 1729471237
    },
    {
        "content": "<p>Specifically aux</p>",
        "id": 477941082,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471244
    },
    {
        "content": "<p>did i write it strangely?</p>",
        "id": 477941084,
        "sender_full_name": "drew",
        "timestamp": 1729471245
    },
    {
        "content": "<p>It makes sense. It is gonna be duplicating <code>m</code> a bunch</p>",
        "id": 477941090,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471256
    },
    {
        "content": "<p>Cause you are mutating m twice on every iteration</p>",
        "id": 477941115,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471300
    },
    {
        "content": "<p><del>It also is not tail recursive. So that will be a crazy about of live copies for a large array</del></p>",
        "id": 477941195,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471371
    },
    {
        "content": "<p>how is it not tail recusive?</p>",
        "id": 477941215,
        "sender_full_name": "drew",
        "timestamp": 1729471410
    },
    {
        "content": "<p>all calls are in the tail position, yeah?</p>",
        "id": 477941227,
        "sender_full_name": "drew",
        "timestamp": 1729471426
    },
    {
        "content": "<p>also re double mutation, does roc not share structure?</p>",
        "id": 477941277,
        "sender_full_name": "drew",
        "timestamp": 1729471452
    },
    {
        "content": "<p>It is, my brain failed for a moment and thought the tail call was within a lambda</p>",
        "id": 477941280,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471458
    },
    {
        "content": "<p>a la persistent data structures?</p>",
        "id": 477941281,
        "sender_full_name": "drew",
        "timestamp": 1729471461
    },
    {
        "content": "<p>Roc does not use persistent data structures, so it requires different design from other ml style languages</p>",
        "id": 477941314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471503
    },
    {
        "content": "<p>Instead it uses flat memory dense data structures.</p>",
        "id": 477941336,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471526
    },
    {
        "content": "<p>It just mutates in place wherever possible</p>",
        "id": 477941343,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471534
    },
    {
        "content": "<p>oof, i had no idea.</p>",
        "id": 477941410,
        "sender_full_name": "drew",
        "timestamp": 1729471584
    },
    {
        "content": "<p>that’s … tricky</p>",
        "id": 477941416,
        "sender_full_name": "drew",
        "timestamp": 1729471590
    },
    {
        "content": "<p>also, transpose only happens once in a not that large list</p>",
        "id": 477941428,
        "sender_full_name": "drew",
        "timestamp": 1729471606
    },
    {
        "content": "<p>so i’m still confused how it is the problem</p>",
        "id": 477941437,
        "sender_full_name": "drew",
        "timestamp": 1729471619
    },
    {
        "content": "<p>looks to be <code>1361</code> by <code>17</code> for me</p>",
        "id": 477941639,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471807
    },
    {
        "content": "<p>Also, I bet I am missing part of the problem, but not sure how yet</p>",
        "id": 477941659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729471837
    },
    {
        "content": "<p>appreciate you taking a look</p>",
        "id": 477941716,
        "sender_full_name": "drew",
        "timestamp": 1729471919
    },
    {
        "content": "<p>Hmm.... actually rotation looks to happen fast when just running a debug build with <code>roc ...</code>. Maybe something separate is breaking the optimized build for that function...</p>",
        "id": 477941820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729472001
    },
    {
        "content": "<p>got it. i haven’t attempted an optimized build over here</p>",
        "id": 477941853,
        "sender_full_name": "drew",
        "timestamp": 1729472038
    },
    {
        "content": "<p>Ok. So maybe optimized build is broken in a totally different way.</p>",
        "id": 477941903,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729472061
    },
    {
        "content": "<p>Let me look at a debug build</p>",
        "id": 477941908,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729472068
    },
    {
        "content": "<p>Ok yeah, optimized builds are just broken in a different way. Debug actually finishes executing without eating tons of memory</p>",
        "id": 477942082,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729472200
    },
    {
        "content": "<p>yep, but it is quite slow compared to other “not known as super fast” languages. but perhaps this is expected for debug builds?</p>",
        "id": 477942832,
        "sender_full_name": "drew",
        "timestamp": 1729472866
    },
    {
        "content": "<p>No, I think there is still a deeper issue here. Also, your matrix is ragged, is that intentional? Normally transpose is done on rectangles, not something ragged.</p>",
        "id": 477943454,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729473478
    },
    {
        "content": "<p>is it? i think it is rectangular</p>",
        "id": 477943962,
        "sender_full_name": "drew",
        "timestamp": 1729473980
    },
    {
        "content": "<p>i definitely is after the first transpose. and i was incorrect, i transpose every cycle</p>",
        "id": 477944109,
        "sender_full_name": "drew",
        "timestamp": 1729474093
    },
    {
        "content": "<p>so very often</p>",
        "id": 477944112,
        "sender_full_name": "drew",
        "timestamp": 1729474097
    },
    {
        "content": "<blockquote>\n<p>is it? i think it is rectangular</p>\n</blockquote>\n<p>From debug prints, it is not, you transpose the entire input. Which is a list a matrices.</p>",
        "id": 477944566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729474511
    },
    {
        "content": "<p>Maybe that is related to the root issue</p>",
        "id": 477944576,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729474536
    },
    {
        "content": "<p>Cause the input isn't like this:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>#.#.#.#..\n#.#.#.##.\n#.#.#.##.\n#.#.#.#..\n...#.....\n#..#.##..\n....#...#\n####....#\n#####....\n.###.#.##\n####...##\n.#.#...#.\n#....#.#.\n</code></pre></div>\n</div></div>\n<p>It is like:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>######....#######\n..#...####...#..#\n.###.#....#.###.#\n....##.##.##....#\n.##....##....##..\n.####...#..####.#\n##..#..##..#..###\n..#.########.#...\n#..#.######.#..#.\n.##..#.##.#..##..\n###.#.####.#.###.\n###.#.####.#.###.\n.##..#.##.#..##..\n#..#.######.#..#.\n..#.########.#...\n\n......##....#\n.#.#.##...#.#\n.##.#..#..#.#\n.##.#..#..#.#\n.#.#.##...#.#\n......##..#.#\n....#.#....#.\n...#.###...##\n.#.##.#.###..\n###.....##.##\n#.##..##...#.\n###.#..##.##.\n#..#######..#\n#..#######..#\n###.#..##.##.\n\n#.#.#.#..\n#.#.#.##.\n#.#.#.##.\n#.#.#.#..\n...#.....\n#..#.##..\n....#...#\n####....#\n#####....\n.###.#.##\n####...##\n.#.#...#.\n#....#.#.\n</code></pre></div>\n</div></div>",
        "id": 477944646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729474574
    },
    {
        "content": "<p>You are transposing things like the second spoiler here as if they were a single matrix</p>",
        "id": 477944731,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729474682
    },
    {
        "content": "<p>i think you have an issue with your input</p>",
        "id": 477944776,
        "sender_full_name": "drew",
        "timestamp": 1729474709
    },
    {
        "content": "<p>it should be a single matrix</p>",
        "id": 477944780,
        "sender_full_name": "drew",
        "timestamp": 1729474716
    },
    {
        "content": "<p>That is not what I get from the download button here: <a href=\"https://adventofcode.com/2023/day/13\">https://adventofcode.com/2023/day/13</a></p>",
        "id": 477944802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729474736
    },
    {
        "content": "<p>i just rechecked mine, it is definitely rectangular</p>",
        "id": 477944850,
        "sender_full_name": "drew",
        "timestamp": 1729474799
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ awk &#39;{print length+1}&#39; data/2023/day14.txt | uniq\n101\n</code></pre></div>",
        "id": 477944919,
        "sender_full_name": "drew",
        "timestamp": 1729474857
    },
    {
        "content": "<p>Oh....I just realized...I downloaded day 13....ugh</p>",
        "id": 477944931,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729474868
    },
    {
        "content": "<p>So ignore my crazy results, they are all from bad input....</p>",
        "id": 477944943,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729474893
    },
    {
        "content": "<p>ha, phew!</p>",
        "id": 477944990,
        "sender_full_name": "drew",
        "timestamp": 1729474923
    },
    {
        "content": "<p>Yeah, rotate does not matter for perf with proper input</p>",
        "id": 477945187,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729475116
    },
    {
        "content": "<p>about 50% of the time is the concat and prepend in <code>tilt</code></p>",
        "id": 477945310,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729475256
    },
    {
        "content": "<p>prepend is not friendly to roc lists. They prefer append</p>",
        "id": 477945320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729475267
    },
    {
        "content": "<p>Also, optimized build gives a 3 to 4x speed up. Makes the time about the same as gleam.</p>",
        "id": 477945429,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729475356
    },
    {
        "content": "<p>got it. i can try without prepend to see if that helps</p>",
        "id": 477945434,
        "sender_full_name": "drew",
        "timestamp": 1729475379
    },
    {
        "content": "<p>i’m guessing native ocaml (instead of bytecode) would be even faster</p>",
        "id": 477945449,
        "sender_full_name": "drew",
        "timestamp": 1729475401
    },
    {
        "content": "<p>but again, it is using mutation</p>",
        "id": 477945501,
        "sender_full_name": "drew",
        "timestamp": 1729475410
    },
    {
        "content": "<p>Roughly the perf breakdown of a non-optimized build is:<br>\n60% tilt<br>\n30% rotate<br>\n10% hashing strings for dict</p>",
        "id": 477945826,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729475736
    },
    {
        "content": "<p>thanks. how are you getting this breakdown?</p>",
        "id": 477946116,
        "sender_full_name": "drew",
        "timestamp": 1729475951
    },
    {
        "content": "<p>I'm currently on mac and using a profiler called <a href=\"https://github.com/mstange/samply\">samply</a>. Should work on linux too I think. Just have to add <code>--linker=legacy</code> to roc.</p>",
        "id": 477946410,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729476141
    },
    {
        "content": "<p>Otherwise, I tend to just use <code>perf</code> and a flamegraph tool if on linux</p>",
        "id": 477946425,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729476161
    },
    {
        "content": "<p>thanks!</p>",
        "id": 477946547,
        "sender_full_name": "drew",
        "timestamp": 1729476244
    },
    {
        "content": "<p>FWIW i replaced all prepends with appends and it's about the same</p>",
        "id": 477947126,
        "sender_full_name": "drew",
        "timestamp": 1729476751
    },
    {
        "content": "<p>just pushed the change</p>",
        "id": 477947139,
        "sender_full_name": "drew",
        "timestamp": 1729476766
    },
    {
        "content": "<p>given all of the talk about competing with \"fast\" languages, i was thinking it would definitely beat gleam (erlang's performance) but perhaps my expectations are not aligned with reality here</p>",
        "id": 477947213,
        "sender_full_name": "drew",
        "timestamp": 1729476836
    },
    {
        "content": "<p>(my <code>roc build --optimize</code> seems to be taking roughly forever as well)</p>",
        "id": 477947467,
        "sender_full_name": "drew",
        "timestamp": 1729477024
    },
    {
        "content": "<p>ah finished in 37 seconds</p>",
        "id": 477947478,
        "sender_full_name": "drew",
        "timestamp": 1729477036
    },
    {
        "content": "<p>certainly faster though</p>",
        "id": 477947513,
        "sender_full_name": "drew",
        "timestamp": 1729477066
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ time ./main -y 2023 -d 14 -p 2\n90982\n./main -y 2023 -d 14 -p 2  0.42s user 0.01s system 69% cpu 0.616 total\n</code></pre></div>",
        "id": 477947520,
        "sender_full_name": "drew",
        "timestamp": 1729477070
    },
    {
        "content": "<p>not really related, but running <code>roc check</code> on almost every file in the project causes a compiler bug. i opened a minimal repro on github. thanks again for all the help!</p>",
        "id": 477947797,
        "sender_full_name": "drew",
        "timestamp": 1729477313
    },
    {
        "content": "<p>(see <a href=\"https://github.com/roc-lang/roc/issues/7175\">https://github.com/roc-lang/roc/issues/7175</a>)</p>",
        "id": 477947866,
        "sender_full_name": "drew",
        "timestamp": 1729477357
    },
    {
        "content": "<p>A little off-topic -- but man that samply app is awesome!! Just tested it out on the roc-ray demo I'm working on. &lt; 5% of the time is Roc stuff. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 477948097,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729477562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463085\">drew</span> <a href=\"#narrow/channel/231634-beginners/topic/performance.20question/near/477947213\">said</a>:</p>\n<blockquote>\n<p>given all of the talk about competing with \"fast\" languages, i was thinking it would definitely beat gleam (erlang's performance) but perhaps my expectations are not aligned with reality here</p>\n</blockquote>\n<p>explanations I can think of for why that might be are:</p>\n<ul>\n<li>we have an issue somewhere (e.g. in the compiler or builtins) that's causing a slowdown</li>\n<li>the program doesn't run long enough for Gleam or Haskell to attempt a GC trace, whereas Roc pays for reference counting along the way, so that automatic memory management cost delta overwhelms the cost of the actual program (I'm not sure how much time is spent in refcounting here)</li>\n<li>the applications differ in a way that means the Roc one is doing something slower than the others (e.g. <a href=\"#narrow/channel/231634-beginners/topic/performance.20question/near/477941041\"><code>m</code></a> being deeply cloned in the Roc version but shallowly cloned in the languages that use persistent data structures for that operation - although it sounded like from later on in the conversation that maybe the flame graph showed other places being the bigger issue?)</li>\n</ul>",
        "id": 477951916,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729480558
    },
    {
        "content": "<p>The time of a non-optimized run got cut in half on my machine due to the changes from prepend to append</p>\n<p>optimized build is about the same though</p>",
        "id": 477958768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729486349
    },
    {
        "content": "<p>About half of all samples in an optimized build are spent in some form of allocation function. That suggests tons of unnecessary data copying going on.</p>",
        "id": 477959051,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729486523
    },
    {
        "content": "<p>Oh, it looks like small string hashing today leads to an allocation, a copy, hashing, a free....ew</p>",
        "id": 477959172,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729486574
    },
    {
        "content": "<p>That's costing about 18% of the execution time, but is no where near the biggest contributor to extra allocations.</p>",
        "id": 477959305,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729486652
    },
    {
        "content": "<p>This example probably will be good to tinker on. Some of it will be wielding roc incorrectly (cause it isn't design to run algorithms the same as gleam). Some of it will be things like extra allocations during string hashing.</p>",
        "id": 477959518,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729486770
    },
    {
        "content": "<p>Also, simply changing away from all of those single character strings to <code>U8</code> is pretty huge for this app. (to be fair, fixing the str byte allocation thing would get a significant portion of the perf back as well, but still won't be as fast)</p>\n<p>For me, changing from <code>Str</code> to <code>U8</code> leads to more than a 2x improvement for the optimized build</p>",
        "id": 477964868,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729489646
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./main-str -y 2023 -d 14 -p 2\n  Time (mean ± σ):     367.6 ms ±   3.1 ms    [User: 361.0 ms, System: 5.7 ms]\n  Range (min … max):   362.4 ms … 374.0 ms    30 runs\n\nBenchmark 2: ./main-u8 -y 2023 -d 14 -p 2\n  Time (mean ± σ):     107.5 ms ±   0.4 ms    [User: 104.5 ms, System: 2.4 ms]\n  Range (min … max):   106.8 ms … 108.4 ms    30 runs\n\nSummary\n  ./main-u8 -y 2023 -d 14 -p 2 ran\n    3.42 ± 0.03 times faster than ./main-str -y 2023 -d 14 -p 2\n</code></pre></div>\n<p>Note, with <code>time</code> these benchmarks are generally around 2x slower. By running in a hot loop with the benchmarking tool, everything runs faster due to all of the files being fresh and in cache</p>",
        "id": 477966477,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729490467
    },
    {
        "content": "<blockquote>\n<p>i don’t understand how i keep hitting all of these things. i swear i’m just trying to write normal programs</p>\n</blockquote>\n<p>Apologies for the frustrating bugs and rough edges <span class=\"user-mention\" data-user-id=\"463085\">@drew</span>!<br>\nRoc is a very complicated project and we work with very limited resources.</p>",
        "id": 477995535,
        "sender_full_name": "Anton",
        "timestamp": 1729500385
    },
    {
        "content": "<p>of course, no apologies necessary. i just want to make sure i’m approaching the language correctly. i have baggage from using other fp languages.</p>",
        "id": 478034028,
        "sender_full_name": "drew",
        "timestamp": 1729511551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/231634-beginners/topic/performance.20question/near/477951916\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"463085\">drew</span> <a href=\"#narrow/channel/231634-beginners/topic/performance.20question/near/477947213\">said</a>:</p>\n<blockquote>\n<p>given all of the talk about competing with \"fast\" languages, i was thinking it would definitely beat gleam (erlang's performance) but perhaps my expectations are not aligned with reality here</p>\n</blockquote>\n<p>explanations I can think of for why that might be are:</p>\n<ul>\n<li>we have an issue somewhere (e.g. in the compiler or builtins) that's causing a slowdown</li>\n<li>the program doesn't run long enough for Gleam or Haskell to attempt a GC trace, whereas Roc pays for reference counting along the way, so that automatic memory management cost delta overwhelms the cost of the actual program (I'm not sure how much time is spent in refcounting here)</li>\n<li>the applications differ in a way that means the Roc one is doing something slower than the others (e.g. <a href=\"#narrow/channel/231634-beginners/topic/performance.20question/near/477941041\"><code>m</code></a> being deeply cloned in the Roc version but shallowly cloned in the languages that use persistent data structures for that operation - although it sounded like from later on in the conversation that maybe the flame graph showed other places being the bigger issue?)</li>\n</ul>\n</blockquote>\n<p>makes sense, thanks for the detailed breakdown</p>",
        "id": 478053027,
        "sender_full_name": "drew",
        "timestamp": 1729515310
    },
    {
        "content": "<p>as an aside, given that roc doesn't use persistent data structures, should i be thinking differently about how to write my code? i'm not sure how to idiomatically use immutable data structures that aren't also persistent</p>",
        "id": 478055041,
        "sender_full_name": "drew",
        "timestamp": 1729515817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/performance.20question/near/477964868\">said</a>:</p>\n<blockquote>\n<p>Also, simply changing away from all of those single character strings to <code>U8</code> is pretty huge for this app. (to be fair, fixing the str byte allocation thing would get a significant portion of the perf back as well, but still won't be as fast)</p>\n<p>For me, changing from <code>Str</code> to <code>U8</code> leads to more than a 2x improvement for the optimized build</p>\n</blockquote>\n<p>nice, i moved to <code>U8</code> and it was quite easy.</p>",
        "id": 478068290,
        "sender_full_name": "drew",
        "timestamp": 1729519144
    },
    {
        "content": "<p>is it normal for the optimized builds to take ~30 seconds for this size of codebase? or have i hit something weird?</p>",
        "id": 478068444,
        "sender_full_name": "drew",
        "timestamp": 1729519190
    },
    {
        "content": "<p>it's very fast now <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 478068579,
        "sender_full_name": "drew",
        "timestamp": 1729519215
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ time ./main -y 2023 -d 14 -p 2\n90982\n./main -y 2023 -d 14 -p 2  0.15s user 0.01s system 98% cpu 0.154 total\n</code></pre></div>",
        "id": 478068598,
        "sender_full_name": "drew",
        "timestamp": 1729519219
    },
    {
        "content": "<p>thanks for the help!</p>",
        "id": 478068713,
        "sender_full_name": "drew",
        "timestamp": 1729519249
    },
    {
        "content": "<p>awesome! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 478074371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729520607
    },
    {
        "content": "<p>thanks for sticking with it and trying out different things</p>",
        "id": 478074631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729520672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463085\">drew</span> <a href=\"#narrow/stream/231634-beginners/topic/performance.20question/near/478068444\">said</a>:</p>\n<blockquote>\n<p>is it normal for the optimized builds to take ~30 seconds for this size of codebase? or have i hit something weird?</p>\n</blockquote>\n<p>we haven't spent much time trying to make the optimization itself run faster, but that does sound high to me too.</p>",
        "id": 478078107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729521580
    },
    {
        "content": "<p>Sounds really high to me. It also spends almost all of that time in the frontend. Not sure what is confusing the compiler, but I definitely think it is a bug or algorithm (in the compiler passes) that is designed fundamentally wrong</p>",
        "id": 478083108,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729522797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/performance.20question/near/478074631\">said</a>:</p>\n<blockquote>\n<p>thanks for sticking with it and trying out different things</p>\n</blockquote>\n<p>thanks for the super positive engagement! i hope i’m not coming off as criticizing. i have very high hopes for the language.</p>",
        "id": 478085278,
        "sender_full_name": "drew",
        "timestamp": 1729523330
    },
    {
        "content": "<blockquote>\n<p>i hope i’m not coming off as criticizing</p>\n</blockquote>\n<p>No worries, all cool :)</p>",
        "id": 478088172,
        "sender_full_name": "Anton",
        "timestamp": 1729524056
    },
    {
        "content": "<p>Definitely not criticizing. This is really important discussion. Part of it is that we need to educate users better on how roc wants to be used for perf. Part of it is just perf bugs in roc. Both very importnant.</p>",
        "id": 478098462,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729526841
    },
    {
        "content": "<p>cool. i feel like i have a bunch of small \"paper cut\" things in my head, i may write them down in a private gist and share here</p>",
        "id": 478098773,
        "sender_full_name": "drew",
        "timestamp": 1729526940
    },
    {
        "content": "<blockquote>\n<p>should i be thinking differently about how to write my code?</p>\n</blockquote>\n<p>In general, roc uses the same low level data structures that would be seen in C/C++/rust/zig. Generally one dense allocation. The big difference in roc is that everything is refcounted and immutable. As such, you have to be careful to design high performance sections of code to only have a single reference to the data structure. If you only have a single reference, roc can be significantly faster than persistent data structures. It will mutate in place. Also, flat data structures are much more cpu friendly than persistent ones. That said, if you have two reference in a hot loop, roc has no option but to copy. This is where perf can get really bad.</p>\n<p>We think that in practice, this will be faster overall where it matters (though it may require some perf tuning). A big example showing off that this should work is borrow inference in rust. In rust, they compiler enforces that there is only ever one mutable reference to an object. If you need to mutate something and can't get a mutable reference, you have to manually clone. For most code, you don't have to worry about this too much. Standard code design tends to have few references for most things. Roc does essentially the same thing with 2 caveats: Roc simplifies code greatly by checking at runtime instead of compile time and Roc implicitly adds in the copy. So this is kinda the rust model but at runtime. Has similar theoretical perf limits (though has cost of refcounting added, and less super low level nobs), but requires runtime benchmarking and/or deeper awareness of reference counts when writing code at compile time.</p>",
        "id": 478100211,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729527340
    },
    {
        "content": "<blockquote>\n<p>I definitely think it is a bug or algorithm (in the compiler passes) that is designed fundamentally wrong</p>\n</blockquote>\n<p>84% of time spent in morphic. Yeah, that matches roughly what I expected. Generally when frontend time explodes, it is morphic</p>",
        "id": 478101581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729527730
    },
    {
        "content": "<p>This call stack is crazy recursive</p>",
        "id": 478101748,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729527787
    },
    {
        "content": "<p>I think I have seen this exact thing before. I tried digging into it and fixing, but I don't understand morphic enough to fix it. I had mostly tried minor changes cause a lot of the time is spent in hash maps and iterators. Probably would really use someone with more context to look into it. That said, maybe we could get a presentation on the morphic code from some of the morphic folks? That might help more people be able to look into this kind of issue.</p>",
        "id": 478102999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729528137
    },
    {
        "content": "<p>also, is there a better place for me to put these threads? \"beginners\" feels weird to me, but i couldn't think of anything else that made sense.</p>",
        "id": 478103269,
        "sender_full_name": "drew",
        "timestamp": 1729528207
    },
    {
        "content": "<p>Currently this is the best location, but maybe we should have another channel for things like this....not exactly sure what the split would be....performance optimization?</p>",
        "id": 478104332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729528543
    },
    {
        "content": "<p>just \"performance\" maybe? So people can go there with performance problems too, not just for optimization.</p>",
        "id": 478105324,
        "sender_full_name": "Anton",
        "timestamp": 1729528873
    },
    {
        "content": "<p>I like that idea!</p>",
        "id": 478110807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729530695
    },
    {
        "content": "<p>For the description, should we go with \"To discuss performance of Roc programs and the compiler.\"</p>",
        "id": 478112384,
        "sender_full_name": "Anton",
        "timestamp": 1729531243
    },
    {
        "content": "<p>should there also be a \"bugs\" channel? i suppose that could go in \"compiler development\" but that also feels weird</p>",
        "id": 478112559,
        "sender_full_name": "drew",
        "timestamp": 1729531317
    },
    {
        "content": "<p>Done!</p>",
        "id": 478115994,
        "sender_full_name": "Anton",
        "timestamp": 1729532400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463085\">drew</span> has marked this topic as resolved.</p>",
        "id": 478129110,
        "sender_full_name": "Notification Bot",
        "timestamp": 1729537087
    }
]