[
    {
        "content": "<p>Hi I'm trying to write a program that runs subprocesses in parallel but I'm not sure if/how roc can run tasks in parallel yet?</p>\n<p>I thought Task.batch was what I wanted (assuming it was similar to Platform.Cmd.batch in Elm) but, after reading the docs for Task.batch, I'm not sure what it does but it doesn't seem to do what I want.</p>\n<p>I tried creating a list of tasks (from Sleep.millis) and taking them one at a time using Task.loop, thinking maybe enqueuing them before awaiting them would schedule them. But this appears to run them in sequence (similar to polling futures one at a time in tokio I think?).</p>\n<p>Is running a sequence of tasks at the same time possible and I'm just missing something in the docs that explains how?</p>",
        "id": 470065135,
        "sender_full_name": "sqwishy",
        "timestamp": 1726271336
    },
    {
        "content": "<p>It essentially isn't supported currently.</p>",
        "id": 470070413,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726275751
    },
    {
        "content": "<p>I mean basic webserver runs multiple threads at the same time. So many tasks are running in parallel. But no current platform supports spawning multiple tasks running on various threads and rejoining the result like future with join all.</p>",
        "id": 470070760,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726276077
    },
    {
        "content": "<p>Oh okay, so the current http package makes a thread per connection I guess?</p>",
        "id": 470070884,
        "sender_full_name": "sqwishy",
        "timestamp": 1726276198
    },
    {
        "content": "<p>I don't think it is threaded at all. Just makes blocking http requests when called.</p>",
        "id": 470075713,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726279243
    },
    {
        "content": "<p>But I don't recall the exact impl</p>",
        "id": 470075726,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726279254
    }
]