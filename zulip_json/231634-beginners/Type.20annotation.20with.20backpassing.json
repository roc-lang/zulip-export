[
    {
        "content": "<p>We can add a type annotation to a definition by writing it above:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : Foo\nfoo = bar\n</code></pre></div>\n<p>However when using backpassing (typically with <code>Result.try</code>) this does not work (the compiler emits a \"duplicate name\" error, which makes sense when desugaring the backpassing â€“ the first <code>foo</code> would be in the scope where <code>bar</code> is called and the second <code>foo</code> is the argument of <code>bar</code> and would shadow it, which is not allowed):</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : Foo\nfoo &lt;- bar |&gt; Result.try\n</code></pre></div>\n<p>I have worked around this so far by writing:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo &lt;- bar |&gt; Result.try\ncheckFoo : Foo\ncheckFoo = foo\n</code></pre></div>\n<p>This lets me ensure that I made <code>bar</code> return what I think it should return, but adds an \"unused definition\" warning.</p>\n<p>Is there a better way? Maybe something like <code>expect type foo == Foo</code> (but I don't want a runtime check).</p>",
        "id": 410570922,
        "sender_full_name": "mkrieger1",
        "timestamp": 1703968079
    },
    {
        "content": "<p>Maybe  <code>foo : Foo</code> should not count as \"definition\" of <code>foo</code>?</p>",
        "id": 410571611,
        "sender_full_name": "mkrieger1",
        "timestamp": 1703968746
    },
    {
        "content": "<p>I wonder if thd shadowing proposal would be helpful for this use case? Maybe that would work as it would be the same foo.</p>",
        "id": 410572583,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703969832
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 410573930,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703971298
    },
    {
        "content": "<p>Do you normally type lambda parameters?</p>",
        "id": 410573942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703971318
    },
    {
        "content": "<p>Like when writing a quick <code>List.map</code> function</p>",
        "id": 410573987,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703971334
    },
    {
        "content": "<p>I do sometimes in Haskell. Not very often but sometimes.</p>",
        "id": 410578354,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1703976514
    },
    {
        "content": "<p>To clarify why I ask, anything that works with backpassing probably should also work with generic lambdas passed to something like <code>List.map</code></p>\n<p>If we enable:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo: Foo\nfoo &lt;- bar |&gt; Result.try\n...\n</code></pre></div>\n<p>We also by default enable</p>\n<div class=\"codehilite\"><pre><span></span><code>foo: Foo\nbar |&gt; Result.try \\foo -&gt;\n    ...\n</code></pre></div>",
        "id": 410579261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703977373
    },
    {
        "content": "<p>Yes exactly.<br>\nIn Haskell you can put the type inline with parentheses. In Roc that might look like this </p>\n<div class=\"codehilite\"><pre><span></span><code>bar |&gt; Result.try \\(foo: Foo) -&gt;\n</code></pre></div>\n<p>Or</p>\n<div class=\"codehilite\"><pre><span></span><code>(foo: Foo) &lt;- bar |&gt; Result.try\n</code></pre></div>",
        "id": 410581536,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1703980068
    },
    {
        "content": "<p>If our arguments are comma delimited, could we do the same without parens?</p>",
        "id": 410581816,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703980343
    },
    {
        "content": "<p>Maybe it would be good to have inline type annotations for smaller functions or lambdas.</p>",
        "id": 410581907,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703980449
    }
]