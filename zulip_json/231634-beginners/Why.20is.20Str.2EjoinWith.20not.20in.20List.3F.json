[
    {
        "content": "<p>I was looking in <code>List</code> for a way to join a list of strings together but was surprised it was in <code>Str</code>. I assumed functions in the standard lib were namespaced with the type they accept as the first argument (which is pretty intuitive to me).</p>\n<p>If I understand the reason why it's in <code>Str</code> it will help me know where to look in the future.</p>",
        "id": 406640033,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701992813
    },
    {
        "content": "<p>I had the same reaction.</p>\n<p>Also in my 2d array library I have a function <code>Array2D.joinWith</code> that works the same way, it just take two joining strings to join both elements and rows. It feels a bit awkward that my function doesn't mirror the built-ins. I could do <code>Array2D.Str.joinWith</code> but that didn't seem worth it.</p>",
        "id": 406640600,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701993186
    },
    {
        "content": "<p>I think it is for reading with intuitive name. <code>List.joinWith</code> would have nothing to do with strings. It would be for any arbitrary list.</p>",
        "id": 406640604,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701993190
    },
    {
        "content": "<p>I guess it could be <code>List.joinStrings</code> but that doesn't feel better to me.</p>",
        "id": 406640636,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701993215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> there are a lot of functions in <code>List</code> that only work on <code>Num</code> (such as <code>List.sum</code>). I wouldn't want it to be <code>Num.sum</code>, but you could make the same argument for it.</p>",
        "id": 406640876,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701993358
    },
    {
        "content": "<p>yeah, fair.</p>",
        "id": 406641128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701993491
    },
    {
        "content": "<p>Though I do think <code>joinWith</code> is too generic of a name to just put in <code>List</code>. (if it only works for strings)</p>",
        "id": 406641162,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701993514
    },
    {
        "content": "<p>the <code>Str</code> module currently depends on <code>List</code> and not the other way around</p>",
        "id": 406648209,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701996806
    },
    {
        "content": "<p>it's technically possible to cheat our way into circular dependncies in builtin modules (e.g. for <code>Num.toStr</code>, since <code>Str</code> certainly depends on <code>Num</code>) but I like to minimize that</p>",
        "id": 406648331,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701996855
    },
    {
        "content": "<p>I don't think it's too bad the way it is. Where would you want the function to live ideally?</p>",
        "id": 406648483,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701996940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> good to know, I didn't realize it was an internal dependency reason. I suppose it's a balance between an ideal interface and a clean implementation (if List.joinWith would be ideal).</p>",
        "id": 406648894,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701997107
    },
    {
        "content": "<p>I would expect <code>List.joinWith</code> to do the same as <code>List.join</code> but with the specified separator interspersed</p>",
        "id": 406649757,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701997421
    },
    {
        "content": "<p>yeah same <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 406649910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701997484
    }
]