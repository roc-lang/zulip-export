[
    {
        "content": "<p>Hey all! I'm very new to Roc, and I just ran into what seems to be a very basic error, but I can't find an obvious answer to: </p>\n<div class=\"codehilite\"><pre><span></span><code>The List module does not expose `forEach`:\n\n4â”‚      List.forEach! [1, 2, 3] \\num -&gt; &quot;Hi&quot;\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDid you mean one of these?\n\n    List.forEach!\n    List.forEachTry!\n    List.concat\n    List.first\n</code></pre></div>\n<p>I've been getting the above List.forEach! error no matter what I do or where I run it (command line, web repl). The compiler just doesn't seem to detect the exclamation mark in my code? This is not a universal problem, because I'm able to use other functions like Stdout.line! just fine. Am I missing something obvious here? I'm running with the latest Roc nightly build 2024-11-29-d72da8e for linux x86-64. Thanks in advance!</p>",
        "id": 485421343,
        "sender_full_name": "pci_express",
        "timestamp": 1733001677
    },
    {
        "content": "<p>What platform are you using? If the platform is using <code>Task</code>s then it will expect Tasks to be used everywhere and not purity inference.</p>",
        "id": 485421480,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733001804
    },
    {
        "content": "<p>Strange though... <a href=\"https://www.roc-lang.org/builtins/List#forEach\">https://www.roc-lang.org/builtins/List#forEach</a>! is included in the docs</p>",
        "id": 485421494,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733001826
    },
    {
        "content": "<p>Are you able to post a larger snippet of your code? The error shows you are returning an expression, the string literal \"Hi\" which wouldn't be an effectful function call.</p>",
        "id": 485421595,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733001901
    },
    {
        "content": "<p>You may also be on an older nightly... so that could be an issue to.</p>",
        "id": 485421725,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733001991
    },
    {
        "content": "<p>Just throwing some ideas out there in case this helps. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 485421754,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733002008
    },
    {
        "content": "<p>The problem of living between two worlds (tasks and purity inference).</p>",
        "id": 485422169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002363
    },
    {
        "content": "<p>In your example above, I think you would just want <code>List.map</code>. If you do need effects, you probably have to use a recursive function or <code>List.walk</code> to build up a task. <code>List.forEach!</code> only works with purity inference as luke mentioned above.</p>",
        "id": 485422270,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002460
    },
    {
        "content": "<p>My platform is <code>https://github.com/roc-lang/basic-cli/releases/download/0.17.0/lZFLstMUCUvd5bjnnpYromZJXkQUrdhbva4xdBInicE.tar.br</code>. </p>\n<p>Here's the full main.roc file I've got right now  (excluding testing code I wrote further down):</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.17.0/lZFLstMUCUvd5bjnnpYromZJXkQUrdhbva4xdBInicE.tar.br&quot; }\nimport pf.Stdout\nimport &quot;test.txt&quot; as sample : List U8\n\nmain =\n    Stdout.line! &quot;I&#39;m a Roc application!&quot;\n    total = addAndStringify {birds: 3, iguanas: 2}\n    Stdout.line! &quot;There are $(total) animals&quot;\n    List.forEach! [&quot;entry1&quot;, &quot;entry2&quot;, &quot;entry3&quot;] \\str -&gt;\n        Stdout.line! str\n\n# New helper function!\naddAndStringify = \\count -&gt;\n    sum = count.birds + count.iguanas\n    if sum == 0 then\n        &quot;&quot;\n    else if sum &lt; 0 then\n        &quot;negative&quot;\n    else\n        Num.toStr sum\n</code></pre></div>",
        "id": 485422378,
        "sender_full_name": "pci_express",
        "timestamp": 1733002570
    },
    {
        "content": "<p>(the original snippet I posted above was me tooling around in the roc repl trying to find a solution lol)</p>",
        "id": 485422410,
        "sender_full_name": "pci_express",
        "timestamp": 1733002612
    },
    {
        "content": "<p>Yeah, basic CLI does not yet have a release with purity inference (PR is so close to landing). So it can't use anything in the standard library with a <code>!</code> in the name</p>",
        "id": 485422552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002742
    },
    {
        "content": "<p>That said, I think basic CLI expose <code>Task.forEach</code> instead</p>",
        "id": 485422567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002758
    },
    {
        "content": "<p>Or, it's in the standard library</p>",
        "id": 485422662,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002838
    },
    {
        "content": "<p>Has the same signature, so should just work instead of the list version</p>",
        "id": 485422676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002863
    },
    {
        "content": "<p>ah ok cool, thanks for the tips <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> !! Another noob question: what are tasks/purity inference (and/or is there a link where I can read more about them )?  For context, my programming background is all in Rust/C++/C systems land, so I haven't substantially interacted with functional languages prior (if this is a functional languages property?).</p>",
        "id": 485422713,
        "sender_full_name": "pci_express",
        "timestamp": 1733002917
    },
    {
        "content": "<p>Richard has a talk on it <a href=\"https://youtu.be/42TUAKhzlRI?si=K_MSSRqBgngcvJb0\">https://youtu.be/42TUAKhzlRI?si=K_MSSRqBgngcvJb0</a> \"The Functional Purity Inference Plan\"</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"42TUAKhzlRI\" href=\"https://youtu.be/42TUAKhzlRI?si=K_MSSRqBgngcvJb0\"><img src=\"https://uploads.zulipusercontent.net/8c33b5cd1c8227ab0b3ead322bc76a00c437f7ff/68747470733a2f2f692e7974696d672e636f6d2f76692f34325455414b687a6c52492f64656661756c742e6a7067\"></a></div>",
        "id": 485423296,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733003492
    }
]