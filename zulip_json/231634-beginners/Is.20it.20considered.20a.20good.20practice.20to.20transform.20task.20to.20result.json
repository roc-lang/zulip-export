[
    {
        "content": "<p>I am just trying to play around with tasks to understand them better and see how can I can fit them into my pipeline and so far converting them into Result seems like the easiest and most natural way to me.</p>\n<p>e.g. consider this </p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>app [main] { pf: platform \"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\" }\n\nimport pf.Task\nimport pf.Stdout\n\nmain =\n    tsk = Task.result! (tskCheck 1)\n    rsp = tskHandle tsk\n    dbg rsp\n\n    Stdout.line! \"Done\"\n\ntskHandle = \\tsk -&gt;\n    when tsk is\n        Ok value -&gt; handleGoodCase value\n        Err err -&gt; handleErrorCase err\n\nhandleGoodCase = \\value -&gt;\n    v = Num.toStr value\n    dbg \"Everything is fine $(v)\"\n\n\n    Good value\n\nhandleErrorCase = \\error -&gt;\n    v = Num.toStr error\n    dbg \"Something went wrong $(v)\"\n\n    Bad error\n\ntskCheck = \\input -&gt;\n    if input == 0 then\n        Task.ok input\n    else\n        Task.err input\n</code></pre></div>\n<p>To me this seems like a more cleaner approach then mapErr and/or onErr and keeps everything consistent with the rest of the code that might have other Results as well. But I am not sure if encapsulating Task output in a Result is considered good or bad? Or is it just a matter of choice?</p>",
        "id": 443758718,
        "sender_full_name": "Sajjad Naveed",
        "timestamp": 1718022287
    },
    {
        "content": "<p>Using <code>Task.result!</code> followed by a <code>when</code> is a common pattern. I would however write this code differently, I'll play around with it a bit.</p>",
        "id": 443769363,
        "sender_full_name": "Anton",
        "timestamp": 1718025545
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> . Any pointers will be greatly appreciated. I am trying to learn and do things the right (preferred) way. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 443769719,
        "sender_full_name": "Sajjad Naveed",
        "timestamp": 1718025640
    },
    {
        "content": "<p>The example is quite artificial so perhaps I left out too much, anyway I'd say this is normal Roc style:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Task</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Stdout</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">checkInput</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"n\">checkedValue</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Received input $(Num.toStr checkedValue).\"</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"n\">badValue</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">indicate</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n<span class=\"w\">            </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Received bad input $(Num.toStr badValue).\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">mock</span><span class=\"w\"> </span><span class=\"kt\">Task</span>\n<span class=\"nf\">checkInput</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">input</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"n\">input</span>\n</code></pre></div>",
        "id": 443774672,
        "sender_full_name": "Anton",
        "timestamp": 1718026983
    },
    {
        "content": "<p>Yeah this is perfect <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> . </p>\n<p>I just wrote small functions because I was playing around with different aspects of Task and Result. But thank you so very much, this makes perfect sense. It's clean, clear, concise and uses Result.</p>\n<p>Really appreciate it <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 443776347,
        "sender_full_name": "Sajjad Naveed",
        "timestamp": 1718027460
    },
    {
        "content": "<p>Happy to help :)</p>",
        "id": 443783472,
        "sender_full_name": "Anton",
        "timestamp": 1718029557
    },
    {
        "content": "<p>A general note: I find that the longer and more complex your code gets (especially if errors are handled in many different ways), <code>onErr</code> and <code>mapErr</code> become more and more natural.</p>\n<p>I think that <code>result</code> is nice, but if used a lot, can lead to broken up code that is much harder to follow.</p>",
        "id": 443790237,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718031500
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> , I will keep that in mind. I am also trying to find some open source projects/tools written in roc to review their code. </p>\n<p>All of roc code seems pretty natural to me except Task. When working with Task, even small changes break my code. But I am trying to work with Task as much possible in various ways to get a grasp of it. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 443792957,
        "sender_full_name": "Sajjad Naveed",
        "timestamp": 1718032132
    }
]