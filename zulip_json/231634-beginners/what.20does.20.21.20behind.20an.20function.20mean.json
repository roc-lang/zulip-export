[
    {
        "content": "<p>what does ! behind an function mean</p>",
        "id": 486400797,
        "sender_full_name": "Jonas",
        "timestamp": 1733436116
    },
    {
        "content": "<p>It means that a function is effectful, or that is does stuff outside of the function.</p>",
        "id": 486400939,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436172
    },
    {
        "content": "<p>The function returns a task, or soon, that it is an impure function - which semantically means something similar</p>",
        "id": 486400953,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733436178
    },
    {
        "content": "<p>thanks, is a task smth i have to unwrap like an Result</p>",
        "id": 486401015,
        "sender_full_name": "Jonas",
        "timestamp": 1733436221
    },
    {
        "content": "<p>For example, <code>readFileBytes! : Str =&gt; List U8</code> won't always return the same thing because it reads a file from the \"outside world\" aka your filesystem</p>",
        "id": 486401048,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436235
    },
    {
        "content": "<p>So... awkwardly, Roc is in between two effectful ! worlds right now</p>",
        "id": 486401135,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436270
    },
    {
        "content": "<p>The old one is Tasks, which are basically a <code>Task ok err := {} -&gt; Result ok err</code> \"thunk\"</p>",
        "id": 486401178,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436299
    },
    {
        "content": "<p>Those need to be wrapped like Result, yes</p>",
        "id": 486401203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436311
    },
    {
        "content": "<p>The new world is just purity inference, which is where normal, \"pure\" functions are basically the exact same as effectful functions, except we enforce that functions that \"do stuff outside\" have an ! at the end of their name</p>",
        "id": 486401337,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436372
    },
    {
        "content": "<p>For the next month or two, the first one is what you'll be using, meaning you need to return <code>Task.ok yourValue</code> instead of just <code>Ok yourValue</code></p>",
        "id": 486401406,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436411
    },
    {
        "content": "<p>But in the future, it'll be just <code>Ok yourValue</code></p>",
        "id": 486401451,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436427
    },
    {
        "content": "<p>I think it's well explained in the tutorial: <a href=\"https://www.roc-lang.org/tutorial#the-postfix-await-operator\">https://www.roc-lang.org/tutorial#the-postfix-await-operator</a></p>\n<p>basically</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"word\"</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">omitted</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">desugaring</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it's</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"n\">returning</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"world\"</span>\n</code></pre></div>",
        "id": 486401555,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733436475
    },
    {
        "content": "<p>Yep! That's exactly what's happening right now.</p>",
        "id": 486401663,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436511
    },
    {
        "content": "<p>does it mean the api will change to Result instead of Task?</p>",
        "id": 486401686,
        "sender_full_name": "Jonas",
        "timestamp": 1733436523
    },
    {
        "content": "<p>It can be a Result, it can also not be a Result</p>",
        "id": 486401735,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436546
    },
    {
        "content": "<p>oh</p>",
        "id": 486401764,
        "sender_full_name": "Jonas",
        "timestamp": 1733436566
    },
    {
        "content": "<p>ok</p>",
        "id": 486401773,
        "sender_full_name": "Jonas",
        "timestamp": 1733436571
    },
    {
        "content": "<p>Something like <code>readFileBytes! : Str =&gt; Result (List U8) ReadErr</code> will use a Result because it might fail</p>",
        "id": 486401777,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436573
    },
    {
        "content": "<p>But something like <code>envVars! : {} =&gt; Dict Str Str</code> won't because it can't fail</p>",
        "id": 486401814,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733436591
    },
    {
        "content": "<p>i have primarily experience with Rust and Ocaml</p>",
        "id": 486401824,
        "sender_full_name": "Jonas",
        "timestamp": 1733436597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/what.20does.20!.20behind.20an.20function.20mean/near/486401777\">said</a>:</p>\n<blockquote>\n<p>Something like <code>readFileBytes! : Str =&gt; Result (List U8) ReadErr</code> will use a Result because it might fail</p>\n</blockquote>\n<p>does it mean (or will it mean?) that without the <code>!</code>:</p>\n<p><code>readFileBytes : Str -&gt; Task (Result (List U8) ReadErr) [SomeOtherErr]</code> ?</p>\n<p>and what is the fat arrow <code>=&gt;</code>? </p>\n<p>I'm missing a bunch of updates :D</p>",
        "id": 486402700,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733436976
    },
    {
        "content": "<p>We're in between a few different \"shapes\" of Roc, so we haven't been communicating everything very clearly</p>",
        "id": 486403325,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733437270
    },
    {
        "content": "<p>The current effectful Roc with <code>Task</code> has two types parameters, <code>ok</code> and <code>err</code>, since it always returns a Result under the hood</p>",
        "id": 486403404,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733437316
    },
    {
        "content": "<p>So it'd be <code>readFileBytes : Str -&gt; Task (List U8) ReadErr</code></p>",
        "id": 486403464,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733437329
    },
    {
        "content": "<p>The <code>=&gt;</code> implies that a function is effectful. The name ending in ! also implies it. It's arguably redundant, but there are some cases with nested type signatures where you need <code>=&gt;</code> for clarity</p>",
        "id": 486403550,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733437384
    },
    {
        "content": "<p>I see so in this potential future the <code>!</code> would be \"in the function name\" so to speak? and it would have the same meaning of a <code>=&gt;</code> that is: this function may return a different value even if input do not change?</p>",
        "id": 486404091,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733437659
    },
    {
        "content": "<p>Basically the <code>!</code> is to tell you - without seeing the types - that an effect is happening</p>\n<p>The <code>=&gt;</code> tells you an effect is happening without seeing the implementation</p>",
        "id": 486404223,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I updated the tutorial recently to explain both the current implementation of <code>!</code> as operator and the upcoming-but-not-ready-yet switch to a suffix. I hope that the new Under Construction section of the tutorial provides a sufficient first exposure of these concepts!</p>",
        "id": 487295586,
        "sender_full_name": "jan kili",
        "timestamp": 1733848713
    },
    {
        "content": "<p>I think this month we shouldn't mention purity inference concepts/changes to anyone who isn't specifically asking about them. Roc has enough mental overhead for newcomers with the features that have already landed!</p>",
        "id": 487295825,
        "sender_full_name": "jan kili",
        "timestamp": 1733848787
    }
]