[
    {
        "content": "<p>Does roc plan to have some form of ad hoc polymorphism (eg. Single Dispatch)? </p>\n<ul>\n<li>Are there any constraints caused by decidable type inference?</li>\n<li>How is it going to look like?</li>\n</ul>",
        "id": 338121073,
        "sender_full_name": "Kesanov",
        "timestamp": 1677405451
    },
    {
        "content": "<p>My understanding is that global type inference is not possible if there's ad hoc polymorphism?</p>",
        "id": 338179823,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1677431165
    },
    {
        "content": "<p>In case I'm mixing up the terminology, my understanding of ad hoc polymorphism is that it lets you do </p>\n<div class=\"codehilite\"><pre><span></span><code>foo : A, A -&gt; Bool\n\nfoo : B -&gt; I64\n\nfoo : a, a -&gt; a\n</code></pre></div>\n<p>or in other words, have multiple functions with arbitrary type signatures have the same name and the correct one will be used during runtime</p>\n<p>Assuming I have that right, and assuming it does prevent decidable type inference, it seems to me like it wouldn't be very difficult to just write</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : A, A -&gt; Bool\n\nfoo2 : B -&gt; I64\n\nfoo3 : a, a -&gt; a\n</code></pre></div>\n<p>instead and keep type inference.</p>",
        "id": 338180517,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1677431539
    },
    {
        "content": "<p>so Abilities let you do ad hoc polymorphism, but we don't have documentation for them yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 338189914,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677436245
    },
    {
        "content": "<p>we are able to keep decidable type inference except for the specific case where ad-hoc polymorphism cannot be resolved for a type that doesn't come into or out of a function type. For example,</p>\n<div class=\"codehilite\"><pre><span></span><code>ability Evil has\n  make : Str -&gt; a | a has Evil\n  destroy : a -&gt; Str | a has Evil\n\nf = \\s -&gt; destroy (make s)\n</code></pre></div>\n<p>clearly we don't know what <code>a has Evil</code> to instantiate inside of <code>f</code> here, so this will become a type error.</p>\n<p>But, if the type of <code>a</code> was taken into the function (or was exported out), the inference would be complete</p>",
        "id": 338190302,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677436498
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/bcaff7f47837e23fc6fb72ee55c10d869d6f52dd/crates/compiler/test_gen/src/gen_abilities.rs#L4\">there are some examples of using abilities here</a></p>",
        "id": 338190380,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677436547
    },
    {
        "content": "<p>I stand corrected then! I had thought that ad hoc polymorphism was one of the reasons that languages like C# and Java didn't support global type inference. I guess it has more to do with subtyping then?</p>",
        "id": 338191110,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1677436935
    },
    {
        "content": "<p>yeah subtyping makes inference very hard</p>",
        "id": 338191206,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677437004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/231634-beginners/topic/Ad.20Hoc.20Polymorphism/near/338190302\">said</a>:</p>\n<blockquote>\n<p>we are able to keep decidable type inference except for the specific case where ad-hoc polymorphism cannot be resolved for a type that doesn't come into or out of a function type. For example,</p>\n<div class=\"codehilite\"><pre><span></span><code>ability Evil has\n  make : Str -&gt; a | a has Evil\n  destroy : a -&gt; Str | a has Evil\n\nf = \\s -&gt; destroy (make s)\n</code></pre></div>\n<p>clearly we don't know what <code>a has Evil</code> to instantiate inside of <code>f</code> here, so this will become a type error.</p>\n<p>But, if the type of <code>a</code> was taken into the function (or was exported out), the inference would be complete</p>\n</blockquote>\n<p>How do you plan to deal with it? The sane solution that came to my mind was to disallow <code>make</code>-like constructors.</p>",
        "id": 338331043,
        "sender_full_name": "Kesanov",
        "timestamp": 1677505603
    },
    {
        "content": "<p>You could disallow them, but that would make illegal real usage patterns we want to allow (like encoding/decoding) so it’s not an option. The way we plan to do this is to detect such problems during typechecking. The cases where this can happen are well defined and I have an algorithm for how to check them.</p>",
        "id": 338336673,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677506987
    },
    {
        "content": "<p>38 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/more.20keywords.20in.20syntax\">#ideas &gt; more keywords in syntax</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 338479262,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677544868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/231634-beginners/topic/Ad.20Hoc.20Polymorphism/near/338336673\">said</a>:</p>\n<blockquote>\n<p>You could disallow them, but that would make illegal real usage patterns we want to allow (like encoding/decoding) so it’s not an option. The way we plan to do this is to detect such problems during typechecking. The cases where this can happen are well defined and I have an algorithm for how to check them.</p>\n</blockquote>\n<p>Isn't that the same as saying: we are willing to sacrifice automatic type inference?</p>",
        "id": 338541442,
        "sender_full_name": "Kesanov",
        "timestamp": 1677577865
    },
    {
        "content": "<p>the types are inferred correctly, it's just that the code has an error <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 338578797,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677588704
    },
    {
        "content": "<p>like if I write <code>x = {} + 1</code> the type checker correctly infers the type of <code>x</code> to be an error, because <code>{} + 1</code> is an invalid expression</p>",
        "id": 338579022,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677588755
    },
    {
        "content": "<p>with <code>f = \\s -&gt; destroy (make s)</code> it's the same - we can infer what all the types involved are, and we also know this is an invalid expression, so we want to report an error</p>",
        "id": 338579166,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677588798
    },
    {
        "content": "<p>in contrast, sacrificing type inference means \"what you've written is valid, but I don't know what type I should infer for it\" - which doesn't come up here</p>",
        "id": 338579390,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677588861
    },
    {
        "content": "<p>To clarify - <code>f = \\s -&gt; destroy (make s)</code> is ambiguous because the type cannot ever be inferred, and in that sense it's an error. The compiler can't materialize a type you want, and in fact no compiler could. You could imagine a world where there are some rules for the \"default\" ad-hoc specialization inferred, but that is unlikely the behavior you want</p>",
        "id": 338590950,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677592086
    },
    {
        "content": "<p>Hm, but it seems awfully close to broken type inference, since you basically say to the user:<br>\n1) I don't know what type this has exactly.<br>\n2) Please, specify the type explicitly.<br>\nWhich is exactly the same thing you would say, if you couldn't infer type for something.</p>",
        "id": 338693773,
        "sender_full_name": "Kesanov",
        "timestamp": 1677619084
    },
    {
        "content": "<p>It's a bit different - the type inference cannot be decidable. The type inference is still complete. But, if the type is undecidable, it must be the programmer that specifies what type they want. I don't think that's broken, since you couldn't have any machine where the type could be materialized without deambiguation</p>",
        "id": 338694209,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677619253
    },
    {
        "content": "<p>it's kind of similar to saying, please choose a type for the value \"1 + 1\". The question is a bit ambiguous - do you want a signed integer, a one-byte integer, and 8-byte integer, etc? In a sense the question is undecidable. Most languages including Roc choose a default in these cases, because they can guess that you may have reasonably meant, for example, a signed 64-bit integer.</p>\n<p>With ad-hoc polymorphism you can wind up in the same kind of question, but there is often not a reasonable default. So the question is just deemed undecidable. But when the question can be decidable, the type inference is complete.</p>",
        "id": 338696984,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677620322
    },
    {
        "content": "<p>can't \"do nothing\" be the default? i.e. <code>f = identity</code> ?</p>",
        "id": 338721660,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1677631452
    },
    {
        "content": "<p>It's only type inference. All it can do is pick a type. That can't change your function into the identity function.</p>",
        "id": 338760990,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677656319
    },
    {
        "content": "<p>And we don't want the type checker to implicitly replace your code with something different if you make a mistake. I'd much prefer an error.</p>",
        "id": 338761348,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677656452
    },
    {
        "content": "<p>Inline type annotation could help, I believe. Not sure if it is planned for roc, though.</p>",
        "id": 343094415,
        "sender_full_name": "Anatoliy Baskakov",
        "timestamp": 1679312600
    }
]