[
    {
        "content": "<p>Sorry for the spam here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>, but I am doing the exercism track and finding out some things.<br>\nThis time I was using the <code>List.range</code> function with the optional step parameter. (A satisfyingly clean way to get a list of multiples of a number under a given limit for the sum-of-multiples exercise). However when the step is 0 I found out it behaves as if the step is actually 1. E.g. <code>List.range { start: At 0, end: At 5, step: 0 } == [0, 1, 2, 3, 4, 5]</code>. I don't know what the result should be (empty list, singleton list with only the start, ...), but I was wondering if this is the intended behavior.</p>",
        "id": 468397488,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1725709805
    },
    {
        "content": "<p>I'm not sure why but in the implementation we default to 0 (if it is not specified) for the step size:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">calcNext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">stepIsPositive</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n</code></pre></div>",
        "id": 468398244,
        "sender_full_name": "Anton",
        "timestamp": 1725710250
    },
    {
        "content": "<p>I think it would be slightly more consistent if it returned empty list when the step is 0. But I’m not sure how much that matters. Are there scenarios when someone would actually want it to return empty list?</p>",
        "id": 468398391,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725710336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/List.2Erange.20behavior.20when.20step.20is.200/near/468398244\">said</a>:</p>\n<blockquote>\n<p>I'm not sure why but in the implementation we default to 0 (if it is not specified) for the step size:</p>\n<p><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">calcNext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">stepIsPositive</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>A default step size of 1 would make more sense to me</p>",
        "id": 468398585,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1725710426
    },
    {
        "content": "<blockquote>\n<p>Are there scenarios when someone would actually want it to return empty list?</p>\n</blockquote>\n<p>If someone actually provided a step of 0, something is probably wrong with their code and they should know about it...</p>",
        "id": 468399012,
        "sender_full_name": "Anton",
        "timestamp": 1725710655
    },
    {
        "content": "<p>Now that <code>?</code> is so convenient to use it doesn't seem crazy to return a result here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 468399109,
        "sender_full_name": "Anton",
        "timestamp": 1725710707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/List.2Erange.20behavior.20when.20step.20is.200/near/468399012\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Are there scenarios when someone would actually want it to return empty list?</p>\n</blockquote>\n<p>If someone actually provided a step of 0, something is probably wrong with their code and they should know about it...</p>\n</blockquote>\n<p>For the specific problem I had, the empty list worked, but in general yeah, it probably is a bug</p>",
        "id": 468399371,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1725710879
    },
    {
        "content": "<p>Maybe returning empty list when the step is zero would make it clear enough that something is off without requiring the return type to be a Result</p>",
        "id": 468399657,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725711042
    },
    {
        "content": "<p>Hmm, I don't know, it could lead to the user getting an empty list of items on a website for example, without any errors being logged</p>",
        "id": 468401106,
        "sender_full_name": "Anton",
        "timestamp": 1725711879
    },
    {
        "content": "<p>That is true</p>",
        "id": 468417104,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725718560
    },
    {
        "content": "<p>It just pains me a little bit to add a result when most of the time step isn’t even passed in to the function</p>",
        "id": 468417211,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725718620
    },
    {
        "content": "<p>But perhaps it’s still the best thing to do</p>",
        "id": 468417232,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725718630
    },
    {
        "content": "<p>Zero is default step in that code</p>",
        "id": 468428899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725723967
    },
    {
        "content": "<p>It is expected a user will never provide zero, so we use it to infer the step</p>",
        "id": 468428936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725723983
    },
    {
        "content": "<p>That way, we dont have to make step some sort of tag and the entire function more verbose</p>",
        "id": 468428989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724006
    },
    {
        "content": "<p>So this was an intentional design decision</p>",
        "id": 468429069,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724042
    },
    {
        "content": "<p>This is important for reverse ranges just working. <code>{start: At 5, end: At 0}</code></p>",
        "id": 468429231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724111
    },
    {
        "content": "<p>That is at least the background context for why it is that way. I think it would be reasonable to propose an alternative in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a>, but it isn't a bug</p>",
        "id": 468429314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724152
    },
    {
        "content": "<p>this is just because we can't currently do the following, right?</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">defaultStep</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n</code></pre></div>\n<p>...and then <code>defaultStep</code> can look at <code>start</code> and <code>end</code> and return a step based on their values</p>",
        "id": 468429456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725724202
    },
    {
        "content": "<p>that seems like what we actually want, but if I remember right the compiler doesn't support that right now</p>",
        "id": 468429508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725724226
    },
    {
        "content": "<p>Do we plan to support that? Calling a function to determine a default value?</p>",
        "id": 468429545,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724240
    },
    {
        "content": "<p>But yeah, that would be fine too and more clear</p>",
        "id": 468429649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724276
    },
    {
        "content": "<p>ideally I'd like it to be the case that after the <code>?</code> you can give any expression, and that expression is also allowed to use anything from earlier in the destructure</p>",
        "id": 468429684,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725724292
    },
    {
        "content": "<p>(but not later in the destructure, becuase that could create circular defaults)</p>",
        "id": 468429722,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725724308
    },
    {
        "content": "<p>That would be nice</p>",
        "id": 468429931,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724395
    },
    {
        "content": "<p>I thought we had an issue for this somewhere but maybe not? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 468430325,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725724550
    },
    {
        "content": "<p>I remember it being mentioned in ideas a long time ago</p>",
        "id": 468430536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725724641
    }
]