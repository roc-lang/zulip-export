[
    {
        "content": "<p>Hello roc, I'm going through the docs, and have a few noob questions:</p>\n<ol>\n<li><a href=\"https://www.roc-lang.org/tutorial#underscore\">https://www.roc-lang.org/tutorial#underscore</a> says I can declare a type alias like so <code>RunErr : _</code>. But this gives the error <code>UNDERSCORE NOT ALLOWED HERE</code>. Is this out of date?</li>\n<li><a href=\"https://www.roc-lang.org/examples/Tasks/README.html\">https://www.roc-lang.org/examples/Tasks/README.html</a> says \"The <code>main</code> task [....] cannot return errors, which is indicated by the <code>*</code>.\" But in the tutorial we define a <code>main</code> that returns <code>Exit I32 Str</code>, so it can return errors? Or am I missing something?</li>\n</ol>",
        "id": 440389258,
        "sender_full_name": "Edman Anjos",
        "timestamp": 1716494285
    },
    {
        "content": "<p>oops, those are both out of date!</p>",
        "id": 440398751,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716498391
    },
    {
        "content": "<p>Is there a new way to, as stated in the tutorial, \"express that two types are the same without annotating either of them\"?</p>\n<p>I noticed some type errors using inference will happen at unrelated call sites, when you compose two functions but one of the signatures changed in incompatible ways. I believe the <code>RunErr : _</code> trick would push the type error down to the function implementations, i.e. where the mismatch actually happens</p>",
        "id": 440536362,
        "sender_full_name": "Edman Anjos",
        "timestamp": 1716566504
    }
]