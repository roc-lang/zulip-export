[
    {
        "content": "<p>I am just curious what your opinions are on the nice modern JS synax sugar for objects and arrays:<br>\n<code>[ ...ListA, ...ListB ]</code><br>\n<code>{ ...props, ...moreProps }</code></p>",
        "id": 258509513,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634806316
    },
    {
        "content": "<p>personally I honestly hadn't given it much thought...what do others think?</p>",
        "id": 258527044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634815362
    },
    {
        "content": "<p>I wonder how often this would be useful and better than <code>List.append</code> or a record update</p>",
        "id": 258527896,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634815769
    },
    {
        "content": "<p>It happens frequently enough in Elm that I do miss this particular feature from JS. Because otherwise I have to put a confusing parentesis before and after my last argument list in a view)<br>\nIn React I have completely stopped using any append function since this feature. </p>\n<p>This feature might make more sense in JS since the JS approach for a \"new\" object would be <code>{...oldObject, newProp = { ...stuff } }</code><br>\n(Which I would prefer as record update incidentally as a way to onboard js folks hehe)</p>\n<p>But my personal opinions on language design hardly matter in the grand scheme of things <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 258529862,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634816690
    },
    {
        "content": "<p>for completeness, do you have an example from elm where this spreading would be useful?</p>",
        "id": 258530156,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634816836
    },
    {
        "content": "<p>I'm booted into my work OS right now. In an hour or so I will copy paste some code I am actually using and not making up at the top of my head!</p>",
        "id": 258534383,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634818745
    },
    {
        "content": "<p>For arrays/lists I'd rather use as then I can continue piping it, or do the concat in the middle after modifying <code>listA</code></p>\n<div class=\"codehilite\"><pre><span></span><code>listA\n    |&gt; List.concat listB\n</code></pre></div>",
        "id": 258558157,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1634827399
    },
    {
        "content": "<p>For the other, its syntactic sugar for merging records it seems? What happens when both records have the same key but different values? Do you blindly take the second record? If records get really large this could be nice, but for small records it seems like it might hide the details too much <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 258558544,
        "sender_full_name": "Wolfgang Schuster",
        "timestamp": 1634827518
    },
    {
        "content": "<p>So I think the use case here is a scenario like</p>\n<div class=\"codehilite\"><pre><span></span><code>Html.div (a ++ b) [ Html.text &quot;foobar&quot; ]\n</code></pre></div>\n\n<p>Which because roc does not have a <code>++</code> infix operator would actually be</p>\n<div class=\"codehilite\"><pre><span></span><code>Html.div (a |&gt; List.append b) [ Html.text &quot;foobar&quot; ]\n</code></pre></div>\n\n<p>Versus </p>\n<div class=\"codehilite\"><pre><span></span><code>Html.div [..a, ..b] [ Html.text &quot;foobar&quot; ]\n</code></pre></div>\n\n<p>But, I wonder how often this really comes up, and whether you would not rather write</p>\n<div class=\"codehilite\"><pre><span></span><code>attributes = \n    a |&gt; List.append b\n\nHtml.div attributes [ Html.text &quot;foobar&quot; ]\n</code></pre></div>\n\n<p>If the construction of attributes is non-trivial</p>",
        "id": 258559574,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634827866
    },
    {
        "content": "<p>Maybe you folks are right. I had a look at my code and it wasn't that bad. I think I can just keep piping in case that I have multiple Lists or do a concat. Not worth polluting the language with more syntax. Keep it as small as possible imo</p>",
        "id": 258561841,
        "sender_full_name": "Oliver Schöning",
        "timestamp": 1634828554
    }
]