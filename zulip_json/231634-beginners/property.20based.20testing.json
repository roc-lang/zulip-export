[
    {
        "content": "<p>Is there a way to do property based testing with <code>expect</code> at this time?</p>",
        "id": 465605684,
        "sender_full_name": "drew",
        "timestamp": 1724811147
    },
    {
        "content": "<p>Nope.</p>",
        "id": 465607585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724812219
    },
    {
        "content": "<p>Brendan has done a lot of work investigating this. Here is a previous post with some links.</p>\n<p><a href=\"#narrow/stream/395097-compiler-development/topic/Property.20testing.20and.20fuzzing/near/418548020\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Property.20testing.20and.20fuzzing/near/418548020</a></p>",
        "id": 465609305,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724813074
    },
    {
        "content": "<p>you can do a weak form of it at the moment, where you hardcode a seed and randomly generate things</p>",
        "id": 465609686,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724813264
    },
    {
        "content": "<p>makes sense</p>",
        "id": 465609717,
        "sender_full_name": "drew",
        "timestamp": 1724813281
    },
    {
        "content": "<p>I would definitely like to be awesome at it in the future, though!</p>",
        "id": 465609801,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724813305
    },
    {
        "content": "<p>yeah, totally. i think unison is a cool example of supporting “inline-ish” property based testing</p>",
        "id": 465609897,
        "sender_full_name": "drew",
        "timestamp": 1724813355
    },
    {
        "content": "<p>of course unison has some unique characteristics too</p>",
        "id": 465609925,
        "sender_full_name": "drew",
        "timestamp": 1724813373
    },
    {
        "content": "<p>I'm not familiar with what Unison does on that! How does it work?</p>",
        "id": 465610040,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724813420
    },
    {
        "content": "<p>one sec</p>",
        "id": 465610068,
        "sender_full_name": "drew",
        "timestamp": 1724813430
    },
    {
        "content": "<p><a href=\"https://www.unison-lang.org/docs/usage-topics/testing/\">https://www.unison-lang.org/docs/usage-topics/testing/</a> is a good read</p>",
        "id": 465610141,
        "sender_full_name": "drew",
        "timestamp": 1724813465
    },
    {
        "content": "<p>Do we have enough of a starting point that we could make an Issue for <code>roc fuzz</code> that if someone was interested might be able to pickup and do some research?</p>",
        "id": 465610181,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724813486
    },
    {
        "content": "<p>My thoughts is how can we capture the general intention to explore fuzzing and one day include it in roc. It may also be a cool project someone might want to contribute and learn more about the science and engineering behind fuzzing testing.</p>",
        "id": 465610490,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724813606
    },
    {
        "content": "<p>codebases in unison are like small talk images (i think), so i’m not sure how much some of the choices apply to roc</p>",
        "id": 465610505,
        "sender_full_name": "drew",
        "timestamp": 1724813614
    },
    {
        "content": "<p>I think in practice we should make a property based testing framework for the simplicity and minimal dependencies. Long term, we should ensure that it can also be used with a fuzz engine for more comprehensive testing. Whether long term we follow in Go's footsteps and have an integrated fuzz engine to fix the dependency problems or make it easy for an external fuzz engine to hook in is still very much open for design. But for simple unit testing, a basic property based testing framework would be huge. Some like hypothesis in python.</p>",
        "id": 465612198,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724814173
    },
    {
        "content": "<p>oh I think we can make it all builtin</p>",
        "id": 465612435,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724814337
    },
    {
        "content": "<p>including things like automatically deriving <code>Arb</code></p>",
        "id": 465612512,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724814375
    },
    {
        "content": "<p>the way we do for encoders and decoders etc.</p>",
        "id": 465612520,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724814381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> what do you mean by \"framework\". We don't normally talk about these in roc. Is this a user space roc package? or a specific platform?</p>",
        "id": 465613147,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724814764
    },
    {
        "content": "<p>sorry, bad wording on my part. I think it should be built into the compiler and into <code>expect</code>. We should have an <code>Arbitrary</code> implementation that would start simple and for raw PBT only, but would be open to tying into a fuzzing harness.</p>",
        "id": 465624476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724819066
    }
]