[
    {
        "content": "<p>The examples of interface packages I was able to find place the interface file for interface <code>Foo</code> in <code>Foo.roc</code>, and then add <code>Foo</code> to <code>imports</code>. How does one do that when you want to move <code>Foo.roc</code> to another directory?</p>",
        "id": 408398448,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702780084
    },
    {
        "content": "<p>Haven't tested, but I thought you just used an extra name capitalized name with dot syntax.</p>\n<p><code>imports [Dir.Foo]</code></p>",
        "id": 408410206,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702790247
    },
    {
        "content": "<p>And it may be the case the <code>Dir</code> has to start with a capital letter</p>",
        "id": 408410223,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702790269
    },
    {
        "content": "<p>But that is just a guess from memory and it may not even be implemented, not sure</p>",
        "id": 408410270,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702790285
    },
    {
        "content": "<p>Yeah that's right</p>",
        "id": 408417224,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702797456
    },
    {
        "content": "<p>So can I do <code>imports [../../Dir.Foo]</code>?  In my <strong>Go</strong> adventofcode code, I arrange things like so:</p>\n<p>Helper code lives in top-level directories:</p>\n<ul>\n<li><code>/utils</code></li>\n<li><code>/charmap</code></li>\n<li><code>/geom</code></li>\n<li>... etc ...</li>\n</ul>\n<p>Solution code lives in date-named directories:</p>\n<ul>\n<li><code>/2023/14</code></li>\n</ul>\n<p>I wanted to put <code>Charmap.roc</code> in <code>/charmap/Charmap.roc</code> and somehow let my day 14 solution in <code>/2023/14/main.roc</code> import it…</p>",
        "id": 408457999,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702833047
    },
    {
        "content": "<p>The key thing here is that the directory has to start with a capital letter. So numbers and lowecase letters wont work because they are not  valid identifiers in Roc.</p>",
        "id": 408461566,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702834557
    },
    {
        "content": "<p>So do you need symlinks if you want to refer to something <em>up</em> the path hierarchy?</p>",
        "id": 408461947,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702834744
    },
    {
        "content": "<p>Packages can use paths</p>",
        "id": 408462486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702834978
    },
    {
        "content": "<p>So if charmap is a full package, you should just use a path to it's main file</p>",
        "id": 408462513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702834992
    },
    {
        "content": "<p>If it is just an interface, it has to be equal directory or deeper</p>",
        "id": 408462545,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702835010
    },
    {
        "content": "<p>Ah, ok. The tutorial left me completely confused on the difference between packages and interfaces. I saw a recommendation here that packages are expected to come from far away, and be downloaded when necessary. But equal-or-deeper means that both (a) organizing your code into subdirectories and (b) having a set of useful interfaces for that codebase, is impossible, and you’d need to use packages even for nearby code.</p>",
        "id": 408471233,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702839306
    },
    {
        "content": "<p>Seems easy enough to do (lots of code has the platform in the same repo as code and uses “../../platform” to use it.</p>",
        "id": 408471358,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702839357
    },
    {
        "content": "<p>Which, again, leaves me mystified what interfaces are for <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 408471484,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702839392
    },
    {
        "content": "<p>Probably interfaces should be more flexible. But they are common within a single app for multiple files or within a package</p>",
        "id": 408472184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702839651
    },
    {
        "content": "<p>What are they <em>for</em>, though? Are they the only way to split code between files locally to a directory?</p>",
        "id": 408472283,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702839706
    },
    {
        "content": "<p>Splitting up code, giving a nice public interface, name spacing.</p>",
        "id": 408472667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702839890
    },
    {
        "content": "<p>Taking a look at a real package example may help. This is the code for roc-pg a Postgres driver:<br>\n<a href=\"https://github.com/agu-z/roc-pg/tree/main/src\">https://github.com/agu-z/roc-pg/tree/main/src</a></p>\n<p>It has one package in main and everything else is an interface.</p>",
        "id": 408472949,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702840090
    },
    {
        "content": "<p>Thanks, I’ll take a look when I get home!</p>",
        "id": 408472982,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702840124
    },
    {
        "content": "<p>Aaah! That answers my questions! <code>Pg.Batch</code>(<code>/Pg/Batch.roc</code>) imports <code>Batch</code> (<code>/Batch.roc</code>) with no trouble - the names are based on the root!</p>",
        "id": 408519959,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702870576
    }
]