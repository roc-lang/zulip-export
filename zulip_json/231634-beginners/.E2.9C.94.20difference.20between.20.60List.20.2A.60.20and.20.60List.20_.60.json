[
    {
        "content": "<p>In reply to <a href=\"#narrow/stream/304641-ideas/topic/Get.20rid.20of.20.60*.60.3F/near/444725593\">this message</a>. In <code>List  _</code>, <code>_</code> is a type hole, the compiler will fill this in itself using type inference. You could use <code>List _</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">strList</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n<span class=\"nf\">strList</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"def\"</span><span class=\"p\">]</span>\n\n<span class=\"nf\">numList</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n<span class=\"nf\">numList</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>If we use <code>List *</code> we do define a type ourselves; e.g. <code>lst : List *</code> could only be <code>lst = []</code>.</p>",
        "id": 444732925,
        "sender_full_name": "Anton",
        "timestamp": 1718380863
    },
    {
        "content": "<p>So the <code>*</code> is somewhat similar to the void type in other languages? So one may prevent of using other types, like in combination with the <code>Task</code> type with <code>Task Str *</code> to say that there is no effect allowed in the function?</p>",
        "id": 444750085,
        "sender_full_name": "Akeshihiro",
        "timestamp": 1718385260
    },
    {
        "content": "<blockquote>\n<p>So the <code>*</code> is somewhat similar to the void type in other languages?</p>\n</blockquote>\n<p>In some cases (like <code>Task Str *</code>), it is similar, but when it is used for a function argument e.g. <code>List.isEmpty : List * -&gt; Bool</code>, it is not like void at all because here it means a list of any type (<code>List Str</code>, <code>List U64</code>...).</p>",
        "id": 444758237,
        "sender_full_name": "Anton",
        "timestamp": 1718387857
    },
    {
        "content": "<p>It still is functionally a void type there. You have a list of what might as well be void cause you can't interact with the elements</p>",
        "id": 444770386,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718392179
    },
    {
        "content": "<p>You still can get the length though</p>",
        "id": 444770404,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718392188
    },
    {
        "content": "<p>Cause that doesn't depend on the element type</p>",
        "id": 444770421,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718392196
    },
    {
        "content": "<p>Thank you, I think I'm getting it now. At first i thought that both, the <code>_</code> and the <code>*</code> were some sort of generics placeholders. But after some tinkering it seems that the <code>_</code> is really only a placeholder for the type the compiler will figure out and fill in, which may be a generic type and even the <code>*</code> if needed. That's why it is called type hole. But the <code>*</code> is actually a generic type, but says more specific to the reader that the type is ignored and not used, at least in the case of a container type like <code>List *</code>, where one wants to operate on the list itself but without using the actual elements, like for example when calculating the list's size as here the actual element's type doesn't matter. With a <code>List a</code> one might think that the type is important whereas in <code>List *</code> it is clear that the element's type isn't used and therefore doesn't matter. So it is more explicit. So the <code>*</code> can be seen as something like <code>any</code> or <code>object</code> types in other languages I think.</p>",
        "id": 445054021,
        "sender_full_name": "Akeshihiro",
        "timestamp": 1718600139
    },
    {
        "content": "<p>That is a good summary with the caveat that <code>any</code> and <code>object</code> types generally have some form of runtime reflection that can allow you to convert them to other types and interact with them. Roc has no such infrastructure. You simply can't interact with an element type that is <code>*</code>.</p>",
        "id": 445057689,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718603091
    },
    {
        "content": "<p>Thanks for the clarification. But I must say that I see such type definitions more like a contract. So even in languages like C# or Java, when a method consumes an interface type object or returns an interface type object, what I care about is the functionality that the interface offers me. But yeah, I've seen a lot of code from other people like my coworkers who cast the interface type objects to other types because they know which type it really is so that they are able to call methods not provided by interface. And when the concrete type gets swapped out everything crashes at runtime and we have to fix. A really awful place to be in, so I tend to see types more like a contract which allow me to do something with the object behind. If the given type does not offer the requested operations, then I have to refactor something.</p>",
        "id": 445065898,
        "sender_full_name": "Akeshihiro",
        "timestamp": 1718607682
    },
    {
        "content": "<p>But then I think the question has been answered, so I'll mark the topic as resolved. Thank you guys!</p>",
        "id": 445066109,
        "sender_full_name": "Akeshihiro",
        "timestamp": 1718607771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725565\">Akeshihiro</span> has marked this topic as resolved.</p>",
        "id": 445066290,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718607847
    },
    {
        "content": "<blockquote>\n<p>And when the concrete type gets swapped out everything crashes at runtime and we have to fix.</p>\n</blockquote>\n<p>Yeah, have definitely seen that before.</p>",
        "id": 445160050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718637829
    }
]