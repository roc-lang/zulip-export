[
    {
        "content": "<p>Is it possible to provide an implementation of an ability for a type after the type has already been declared?</p>\n<p>For example, lets say I wanted to create a library for working with polynomials and I wanted to support not only <code>Num *</code>, but also potentially custom numeric types such as imaginary numbers or numbers in a Galois Field for Reedâ€“Solomon codes. Is there any way I could define an ability for arithmetic operations and then make <code>Num *</code> implement this ability so that I could use regular builtin numbers with my functions? Or is there some other way of accomplishing this behavior outside of abilities?</p>",
        "id": 455248788,
        "sender_full_name": "batyoullfly",
        "timestamp": 1722385577
    },
    {
        "content": "<p>so for custom number types specifically (e.g. so that <code>+</code> and such can work on them), it's come up a number of times but there isn't a concrete plan at the moment</p>",
        "id": 455249340,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722385871
    },
    {
        "content": "<p>for the broader question of:</p>\n<blockquote>\n<p>Is it possible to provide an implementation of an ability for a type after the type has already been declared?</p>\n</blockquote>\n<p>in the general case, it's a goal not to support <a href=\"https://stackoverflow.com/questions/3079537/orphaned-instances-in-haskell\">orphan instances</a> for abilities</p>",
        "id": 455249470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722385928
    },
    {
        "content": "<p>but custom number types is a common recurring request, and it's definitely on the table to include something specific for numbers</p>",
        "id": 455249553,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722385975
    },
    {
        "content": "<p>we just don't have a concrete plan on it right now</p>",
        "id": 455249585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722385989
    },
    {
        "content": "<p>Seems like maybe a custom Arithmetic ability and wrapper functions for a specific type are an okay workaround in the mean time? Not sure if this makes any sense at all</p>\n<p><code>CustomNum.roc</code></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">CustomNum</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">toNum</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">fromNum</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">specialAdd</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">add</span>\n<span class=\"p\">]</span>\n\n<span class=\"kt\">Arithmetic</span><span class=\"w\"> </span><span class=\"nv\">implements</span>\n<span class=\"w\">    </span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Arithmetic</span>\n\n<span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">    </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Arithmetic</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">add</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">customNumAdd</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"nv\">fromNum</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">fromNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n\n<span class=\"nv\">toNum</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">toNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n\n<span class=\"nv\">customNumAdd</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">customNumAdd</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">CustomNum</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">imagine</span><span class=\"w\"> </span><span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"nv\">special</span><span class=\"w\"> </span><span class=\"nv\">math</span><span class=\"w\"> </span><span class=\"nv\">stuff</span>\n<span class=\"nv\">specialAdd</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Arithmetic</span>\n<span class=\"nv\">specialAdd</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n</code></pre></div>\n<p><code>main.roc</code></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">CustomNum</span>\n\n<span class=\"nv\">specialAddPlainNum</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">specialAddPlainNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">CustomNum</span><span class=\"nf\">.</span><span class=\"nv\">specialAdd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">CustomNum</span><span class=\"nf\">.</span><span class=\"nv\">fromNum</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">CustomNum</span><span class=\"nf\">.</span><span class=\"nv\">fromNum</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">CustomNum</span><span class=\"nf\">.</span><span class=\"nv\">toNum</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">specialAddPlainNum</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n</code></pre></div>",
        "id": 455253023,
        "sender_full_name": "batyoullfly",
        "timestamp": 1722388091
    },
    {
        "content": "<p>Also not really sure how custom abilities work with modules. Seems like I can't have the ability in its own module decoupled from this specific opaque type, and the only way to get the <code>specialAdd</code> function to work in <code>main.roc</code> was to expose <code>add</code>?</p>",
        "id": 455253111,
        "sender_full_name": "batyoullfly",
        "timestamp": 1722388161
    },
    {
        "content": "<p>You can have an ability in it's own module. All ability member functions are just required to be exposed.</p>",
        "id": 455253349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722388287
    },
    {
        "content": "<p>This is need for the ability to specialize and be possible to implement across module boundaries</p>",
        "id": 455253372,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722388308
    },
    {
        "content": "<p>Then just import the ability and implement it in any other module the same way you implemented it on <code>CustomNum</code></p>",
        "id": 455253443,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722388335
    },
    {
        "content": "<p>Oh okay cool. I might try this approach and see how it works out. For my actual use case of polynomials I donâ€™t <em>need</em> to solve the general case but it definitely feels better to solve the general case. Also might be worth including a snippet of how abilities interact with modules in the abilities page on the website, unless thatâ€™s there already and I just missed it</p>",
        "id": 455254300,
        "sender_full_name": "batyoullfly",
        "timestamp": 1722388895
    },
    {
        "content": "<p>If you have any improvements to that Abilities guide, that would be most appreciated! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 455254681,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722389153
    },
    {
        "content": "<p>I donâ€™t feel very qualified but if I get a better hang of how they work maybe Iâ€™ll take a stab at it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 455255553,
        "sender_full_name": "batyoullfly",
        "timestamp": 1722389701
    },
    {
        "content": "<p>My guess is, your about as qualified as I was when I wrote that guide (probably more since you've made something with an Ability) <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 455255860,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722389890
    },
    {
        "content": "<p>I had to scratch around to find the syntax that worked, and then made that guide so I wouldn't forget it (or at least know where to look it up).</p>",
        "id": 455255898,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722389930
    },
    {
        "content": "<p>Haha fair enough</p>",
        "id": 455256507,
        "sender_full_name": "batyoullfly",
        "timestamp": 1722390308
    },
    {
        "content": "<p>Seems another thing missing from the guide is how to specify a type variable should implement multiple abilities. Had to omit a type signature and see what the language server inferred to see that it was <code>&amp;</code></p>",
        "id": 455513922,
        "sender_full_name": "batyoullfly",
        "timestamp": 1722473011
    }
]