[
    {
        "content": "<p>Newbie question: how does Roc handle releasing resources in case of error?</p>\n<p>I want to write a script that opens a huge file <code>foo.txt</code>, read it line per line, do something to each line (e.g., add the line number), and output the result (also line per line) into <code>bar.txt</code>. I need file handles for a while, and I want to make sure they are properly closed when I'm done.</p>\n<p>Is it possible to open a file for writing and keep the handle for a while using the basic-cli? I've looked at the <code>File</code> docs, but I can't see <code>close</code> or <code>Writer</code>, so I'm not sure it's possible yet, unless I've missed something.</p>\n<p>Assuming it exists (now or in the future), what if something fails in the middle of the job and I need to exit from the function: I'd like to ensure that the files are closed properly. Is it fully my responsibility or does Roc or the platform take care of this automatically (e.g., via ref counting and destructors)? It would be nice if I could just use the <code>?</code> or <code>!</code> operator and exit without having to worry about releasing resources, but perhaps that's impossible.</p>",
        "id": 469560022,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726119554
    },
    {
        "content": "<p>It is up to the platform to decide that</p>",
        "id": 469679632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726148455
    },
    {
        "content": "<p>For basic-cli, it should just close when there are no reference to a file in roc anymore</p>",
        "id": 469679747,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726148478
    },
    {
        "content": "<p>Thanks Brendan, that's great.<br>\nIt looks like there's <code>File.openReader</code> (with <a href=\"https://github.com/roc-lang/basic-cli/blob/main/examples/file-read-buffered.roc\">a nice example</a>) but no <code>File.openWriter</code>. I might try to add that, or else I don't think my use case is possible, right?</p>",
        "id": 469767963,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726170738
    },
    {
        "content": "<p>ah yeah, I guess for writing files, we only writing an entire file at once.</p>",
        "id": 469768653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726170952
    },
    {
        "content": "<p>So yeah, we need a file writer that is a mirror of file reader to do what you want</p>",
        "id": 469768760,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726170975
    }
]