[
    {
        "content": "<p>Hi, in this conference (<a href=\"https://www.youtube.com/watch?v=6qzWm_eoUXM\">https://www.youtube.com/watch?v=6qzWm_eoUXM</a>), <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  shows an example of a possible webserver platform. Is the source code of this example platform available online to play with?<br>\nI don't have any background with Rust / Zig (find the syntax not very friendly), but I would like to try a bit and learn by this way (I'm a golang dev, but sadly it won't be possible to write platform with it, or will it be?)<br>\nThank you for your amazing work</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"6qzWm_eoUXM\" href=\"https://www.youtube.com/watch?v=6qzWm_eoUXM\"><img src=\"https://uploads.zulipusercontent.net/c3a925ed18fe1016e197f6abdd6cd3ed6c8f1858/68747470733a2f2f692e7974696d672e636f6d2f76692f36717a576d5f656f55584d2f64656661756c742e6a7067\"></a></div>",
        "id": 296017681,
        "sender_full_name": "Ghislain",
        "timestamp": 1661817510
    },
    {
        "content": "<p>I think a few toy web platforms have been made over time. Not sure which was used for the talk (need to re-skim the talk to maybe figure out).</p>\n<p>As for golang: It could be used as a host language since it does support cffi. That being said, I don't think it is a good host language. go does cffi poorly and it ends up having a lot of overhead. Go would also potentially have a hard time making Roc types due to not really being a low level systems language. Also, not sure how the GC would behave assuming you want it to automatically deal with Roc refcounts.</p>",
        "id": 296018502,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661818046
    },
    {
        "content": "<p>I don't remember where that one was either - honestly it was super hacked together and not a great foundation anyway <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 296022204,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661821835
    },
    {
        "content": "<p>that said, I'd be totally happy to help if you'd like to tackle getting a real webserver platform up and running!</p>",
        "id": 296022222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661821860
    },
    {
        "content": "<p>We also now know more about dealing with async rust so probably could build something even nicer. That being said, staying in the land of synchronous effects makes life easier for implementation.</p>",
        "id": 296026136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661825730
    },
    {
        "content": "<p>Tangentially, do we have some high-level non-committal table/checklist of things Roc can / kind of can / can't do currently? \"Async is hard today for platforms\" is great to know, so I'm curious if there are other synopses like that.</p>",
        "id": 296026485,
        "sender_full_name": "jan kili",
        "timestamp": 1661826036
    },
    {
        "content": "<p>I think as glue becomes more and more complete, it is greatly changing that picture. So that will be huge for all things platforms</p>",
        "id": 296026786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661826348
    },
    {
        "content": "<p>If there was a small POC of a webserver handler platform, it would be a big help to guide me as a true beginner in platform author (+rust dev). Sorry for me empty background, I only have the motivation with me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 296231968,
        "sender_full_name": "Ghislain",
        "timestamp": 1661899243
    },
    {
        "content": "<p>sure! is there a low-level language you'd be more comfortable in than Rust? (e.g. C, C++, Zig)</p>",
        "id": 296235913,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661902004
    },
    {
        "content": "<p>I've done 3 years of C/C++ but it looked nothing like I've seen in platform examples <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nI wanted to learn Rust, it would be a good opportunity (if it doesn't bother you as it seems platform should be written in Zig)</p>",
        "id": 296237463,
        "sender_full_name": "Ghislain",
        "timestamp": 1661903173
    },
    {
        "content": "<p>I probably wrote the most developed rust web platforms so far, but they are quite messy and probably not the best to learn from. They were first hacks into the world of async rust. Also, I ran into a compiler bug that made me have to structure some code weirdly. Also, learned a number of things about rust async after coding them up that would have made the rust side much nicer.</p>\n<p><a href=\"https://github.com/bhansconnect/roc-async\">https://github.com/bhansconnect/roc-async</a></p>\n<p><a href=\"https://github.com/bhansconnect/roc-todos\">https://github.com/bhansconnect/roc-todos</a></p>",
        "id": 296246484,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661910966
    },
    {
        "content": "<p>So well these may not be too helpful, i would be willing to help make a better base for someone to build off of.</p>",
        "id": 296246508,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661910995
    },
    {
        "content": "<p>It's potentially true that the primary Go toolchain would not work well for building a Roc host, though the Go project also officially maintains gccgo as an alternative implementation, both to aid novel uses of the language, and to ensure the language specification is respected (much as Python does with CPython and Jython), rather than risk specification-by-implementation via a sole implementation.</p>\n<p>gccgo is a language frontend for gcc, and thus interoperates with C ABI things with no additional overhead. If you can get gcc to compile a C object that you can link with Roc, or vice versa, then you should be able to with Go as well via gccgo, and thus Go may be a reasonable host language for Roc.</p>",
        "id": 306840212,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1667050626
    },
    {
        "content": "<p>anyone thought about what a BEAM-like (or even better, BEAM-hosted) platform would look like?</p>",
        "id": 306850066,
        "sender_full_name": "Georges Boris",
        "timestamp": 1667055194
    },
    {
        "content": "<p>For go, i don't think that gccgo would significantly help with Roc interop. Gccgo still follows the go spec. This means that it has a lot of constraints due to runtime, GC, and how it decided to implement certain structures. Of course you can always do go -&gt; c -&gt; roc, letting c deal with all the low level details and types. I just don't think it would be very ergonomic.</p>\n<p>Also, the gccgo docs advise against using is limited c interop. They push for use of cgo.</p>\n<p>Anyway, in general, i think it should be possible, but i don't think it would be ergonomic. I also think there is a good chance that it would lead to a lot of extra annoyance around memory management and copying data that may significantly hurt performance.</p>",
        "id": 306861361,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667060483
    },
    {
        "content": "<p>I know that Erlang/BEAM Supports C ABI, but I have no idea how any of that would work.</p>",
        "id": 328525793,
        "sender_full_name": "Joe Giralt",
        "timestamp": 1676655072
    },
    {
        "content": "<p>I've been thinking a little about BEAM interop with roc as well. I think it would be possible to get quite far with <a href=\"https://github.com/rusterlium/rustler\">rustler</a>. I may look at that soon-ish</p>",
        "id": 328799974,
        "sender_full_name": "Ahmad Sattar",
        "timestamp": 1676809360
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/rust/comments/113dp70/ractor_not_just_another_actor_framework/\">https://www.reddit.com/r/rust/comments/113dp70/ractor_not_just_another_actor_framework/</a></p>\n<p>instead of using a BEAM platform, might be worth while to look at one that could by built with the ractor rust frame work.</p>\n<p>it was developed by  a lot of the erlang devs who worked on whatsapp at meta.</p>",
        "id": 329243474,
        "sender_full_name": "Joe Giralt",
        "timestamp": 1676999224
    },
    {
        "content": "<p>Interesting, I do love actors :)<br>\nI'd like to use them for plugins for the roc editor</p>",
        "id": 329244674,
        "sender_full_name": "Anton",
        "timestamp": 1676999498
    }
]