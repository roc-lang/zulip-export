[
    {
        "content": "<p>As someone looking into Roc for the first time, the whole concept of \"platforms\" seemed like a big obstacle. I couldn't find a place that described the vision of having this concept in the language, or what kind of value it will bring. It seems to me more like it makes it harder to provide an integrated experience, e.g. the different shenanigans needed to make Task just work as you would expect?</p>",
        "id": 475534932,
        "sender_full_name": "Daniel Schierbeck",
        "timestamp": 1728385366
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"615236\">@Daniel Schierbeck</span>,<br>\nPlatforms are described in detail <a href=\"https://www.roc-lang.org/platforms\">here</a></p>",
        "id": 475535977,
        "sender_full_name": "Anton",
        "timestamp": 1728385784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615236\">@Daniel Schierbeck</span> <br>\nI think it's great. If you know about hexagonal architecture, which I recommend you do look into if you haven't yet (<a href=\"https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)\">https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)</a>), the platform is analogous to the \"adapter\" layer. The idea is that your \"modeling\" code, which you have hopefully separated from your \"interface\" code, is agnostic with respect to what it's actually connecting to or how.<br>\nAt least, that's my understanding so far (as a Roc noob myself).</p>",
        "id": 475575031,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1728397099
    },
    {
        "content": "<p>I do have some experience with Hexagonal Architecture, but unfortunately it’s all negative <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> basically, I’ve never ever needed to swap out the platform of any project, and would much rather avoid the limitations and complications of having an adapter abstraction</p>",
        "id": 475598808,
        "sender_full_name": "Daniel Schierbeck",
        "timestamp": 1728401831
    },
    {
        "content": "<p>So I guess what differentiates platforms from frameworks is that they allow compiling to different targets, eg Node.js?</p>",
        "id": 475599848,
        "sender_full_name": "Daniel Schierbeck",
        "timestamp": 1728402096
    },
    {
        "content": "<p>Roc is the first \"compiled scripting\" language which is not only a new, unique approach to providing extensibility to software projects, it is also one of the most interesting and revolutionary ideas in the world of software in many years!!! I hope that platform dev will be flashed out in the near future and once things have settled down, sorted out and become more stable we can enjoy the Elm Experience in all aspects of our code <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 475602102,
        "sender_full_name": "Shaiden Spreitzer",
        "timestamp": 1728402706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615236\">Daniel Schierbeck</span> <a href=\"#narrow/stream/231634-beginners/topic/Why.20platforms.3F/near/475599848\">said</a>:</p>\n<blockquote>\n<p>So I guess what differentiates platforms from frameworks is that they allow compiling to different targets, eg Node.js?</p>\n</blockquote>\n<p>great question! I'd say the main three things are:</p>\n<ol>\n<li>Unlike frameworks, platforms are in charge of memory management, which means you can make things like <a href=\"https://youtu.be/zMRfCZo8eAc?si=FVAInMu0VkDQhKwa\">a webserver that never allocates</a> - this isn't really feasible in Node, Go, etc. Today you'd need to write it in something like Rust, Zig, C, or C++.<div class=\"youtube-video message_inline_image\"><a data-id=\"zMRfCZo8eAc\" href=\"https://youtu.be/zMRfCZo8eAc?si=FVAInMu0VkDQhKwa\"><img src=\"https://uploads.zulipusercontent.net/25dda2dc57e31d939a48c2b72f80033de8d274c2/68747470733a2f2f692e7974696d672e636f6d2f76692f7a4d5266435a6f386541632f64656661756c742e6a7067\"></a></div></li>\n<li>Unlike frameworks, platforms can offer only the I/O primitives that make sense for the domain in question. This means that you can have a platform called <code>safe-script</code> (I'm hoping to ship this actual platform in the next few months) which is a drop-in replacement for <code>basic-cli</code> except that it prompts you whenever it would do anything potentially scary to your system, e.g. disk I/O to particular directories. So I can download a <code>basic-cli</code> app from the Internet, swap out one line of code to make it use <code>safe-script</code> instead of CLI, and now I can run it on my machine with zero concern that it will give me malware or anything like that, because <code>safe-script</code> sandboxes all the I/O primitives and there's no way for the application to escape that sandbox.</li>\n<li>Unlike frameworks, since platforms are also in charge of all concurrency, they can implement concurrency in a way that makes sense for their domain without the application author having to micromanage that themselves. For example, one platform might implement concurrency using <a href=\"#narrow/stream/304641-ideas/topic/stackful.20coroutines.20in.20hosts\">Go-like coroutines</a>, but for a platform targeting embedded systems, where even spawning any OS threads at all is not worth it, that platform silently just decide to make all concurrent operations run sequentially instead.</li>\n</ol>",
        "id": 475614340,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728405533
    },
    {
        "content": "<p>I mean – those sound like very cool visions, but they do seem _very_ specific and niche. It would seem to me that most languages can get away with use case specific frameworks on top of standardized I/O stacks and be... pretty fine? For pure languages in particular, you could even disallow I/O in the user code, requiring the framework to translate e.g. a custom I/O tag union type into concrete I/O calls.</p>\n<p>I'm of course not the architect of the language, but as a Roc beginner, but light Elm user and longtime user of many other languages, I've never really felt a strong need to use a _single_ language across very different stacks. The examples I've seen often end up suffering from the lowest common denominator, e.g. trying to use a single technology to write both Web, iOS, and Android apps, with none of them actually being good.</p>",
        "id": 475639309,
        "sender_full_name": "Daniel Schierbeck",
        "timestamp": 1728412662
    },
    {
        "content": "<p>oh I'm not trying to persuade you that Roc's way is the right way for you, I just wanted to explain what differentiates platforms from frameworks! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 475641320,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728413212
    },
    {
        "content": "<p>for context, a bunch of people have said to me that platforms are the thing that excites them the most about Roc, and that they are shocked other languages haven't tried it before now - but I can also see the \"why bother, just do it the traditional way?\" perspective haha</p>",
        "id": 475641712,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728413307
    },
    {
        "content": "<p>it's an experiment, since no other language has ever tried it in this way before, so we'll see how it turns out!</p>",
        "id": 475641816,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728413336
    },
    {
        "content": "<p>Hope its ok to hijack this thread a bit? </p>\n<p>I'm also a little bit confused about this plattform-concept. Let's say I want to build a REST-application using  PostgreSQL as the database together with some Kafka-stuff. Do I need a specific plattform that provides the exact stack I'm using (HTTP-server, PostgreSQL and Kafka)?</p>",
        "id": 475887678,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728485883
    },
    {
        "content": "<p>I think for Postgres and Kafka you can use pure roc packages</p>",
        "id": 475889168,
        "sender_full_name": "Anton",
        "timestamp": 1728486202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Why.20platforms.3F/near/475889168\">said</a>:</p>\n<blockquote>\n<p>I think for Postgres and Kafka you can use pure roc packages</p>\n</blockquote>\n<p>Cool, combined with which plattform?</p>",
        "id": 475890107,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728486362
    },
    {
        "content": "<p>To expand on that a tiny bit. The platform just needs to expose a set of primitives that a pure roc library can use to talk to postgres or Kafka. In this case, that would just be socket connection primitives. The platform could probably help out a bit more by offering full TCP primitives in these specific cases.</p>",
        "id": 475890203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728486373
    },
    {
        "content": "<p>So any platform with TCP connection primitives would be able to speak postgres, MySQL, mssql, Kafka, etc. but it does depend on roc libraries for these services. Before those exist, a forked or fully custom platform may be the easiest way to speak to those services. Just depend on a library in the host language instead of requiring an implementation to exist in roc</p>",
        "id": 475891057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728486496
    },
    {
        "content": "<p>A basic implementation for postgres already exists in roc for example</p>",
        "id": 475891210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728486515
    },
    {
        "content": "<p>Thanks for taking the time to explain this <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> .  It makes a little bit more sense now. </p>\n<p>I just checked out basic-cli and basic-webserver and both seems to expose the exact same Tcp-primitives so I guess a roc-library that depends on those primitives would compile on both basic-cli and basic-webserver? </p>\n<p>Is it just a coincidence that the Tcp module in those platforms are exactly the same or is there a standardised Tcp \"interface\" (for lack of a beter word) that a plattform must adhere to to qualify as a \"roc plattform with tcp support\"? </p>\n<p>I also noticed that basic-cli and basic-webserver both have a File module that does differ between the plattforms.  How would a library author that want to make a library that depends on file primitives know which file \"interface\" to use? As a library author I guess you want to target as many plattforms as possible?</p>",
        "id": 475918834,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728493641
    },
    {
        "content": "<blockquote>\n<p>I guess a roc-library that depends on those primitives would compile on both basic-cli and basic-webserver?</p>\n</blockquote>\n<p>yep</p>\n<blockquote>\n<p>Is it just a coincidence that the Tcp module in those platforms are exactly the same</p>\n</blockquote>\n<p>Not completely, we try to keep those platforms matched in api if possible</p>\n<blockquote>\n<p>is there a standardised Tcp \"interface\"</p>\n</blockquote>\n<p>Not currently. That said, as long as your interface is close enough, mapping can also be done in roc.</p>\n<blockquote>\n<p>How would a library author that want to make a library that depends on file primitives know which file \"interface\" to use?</p>\n</blockquote>\n<p>Yeah, currently we have a small ecosystem that is manually synced and changes are often made in one place without being ported to others.</p>\n<blockquote>\n<p>How would a library author that want to make a library that depends on file primitives know which file \"interface\" to use?</p>\n</blockquote>\n<p>Currently we don't have this story fully built out. At some point, I assume we may create interface packages that enable this kind of stuff to be codified.</p>\n<p>If I were writing a library that depended on file io, I would try to write it today in terms of higher order functions that are relatively basic/obvious primitives (open, close, append, etc). Hopefully any platform primitives would be able to map to the higher order functions that I create. That would be the best way to make a library flexible today.</p>\n<p>That said, the best case is if a library can be a level removed from that. Instead of files, just string iterations for example.</p>",
        "id": 475920167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728494233
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>is there a standardised Tcp \"interface\"</p>\n</blockquote>\n<p>Not currently. That said, as long as your interface is close enough, mapping can also be done in roc.</p>\n</blockquote>\n<p>Could you elaborate on this? I don't think I get it. Let say I would like to use a library that depends on certain Tcp primitives that does not exist by the same name in the platform I'm using. How would the mapping be done?</p>",
        "id": 475923139,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728495439
    },
    {
        "content": "<p>So for a library to depend on a platform primitive, they have to be explicitly passed into the library. This is generally done via module params which expose the function to the entire module of the library instead of just a single function.</p>\n<p>As a platform author I can pass anything to that as long as it has the same type signiture.</p>\n<p>If the library wants:</p>\n<div class=\"codehilite\"><pre><span></span><code>tcpWrite: stream, Str -&gt; Task {} err\n</code></pre></div>\n<p>And my platform gives me:</p>\n<div class=\"codehilite\"><pre><span></span><code>tcpWrite: stream, List U8 -&gt; Task {} err\n</code></pre></div>\n<p>I can write an adapter and pass that into the library</p>\n<div class=\"codehilite\"><pre><span></span><code>tcpWriteForLib = \\stream, str -&gt; tcpWrite stream (Str.toUtf8 str)\n</code></pre></div>",
        "id": 475924072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728495823
    },
    {
        "content": "<p>Ah, didn't know about module params. Sound like some kind of manual  dependency injection? </p>\n<p>So it is me as an <em>application developer</em> that have to do this passing/mapping of the platform primitives to the library I want to use?</p>",
        "id": 475927545,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728497172
    },
    {
        "content": "<p>yes</p>",
        "id": 475930669,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728498451
    },
    {
        "content": "<p>and yes</p>",
        "id": 475930681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728498454
    },
    {
        "content": "<p>Thanks a lot for taking the time to explain this <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> . I now have a much better understanding about the relationship between platforms, libraries and applications. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<p>It'll be very interesting to see how these ideas will work in practice in the future.</p>",
        "id": 475931671,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728498841
    },
    {
        "content": "<p>The current implementation of basic-cli and basic-webserver was done before we had module params or Task as builtin. One of the projects I have in the back of my mind is to start pulling out the common functionality from these platforms into platform-agnostic packages -- which we can build now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>For example, Richard discussed a design for a Path package which would provide a nice set of primitive types and function for working with filesystem paths. There is still a bit of work to get that package operational, and then rework the platforms to use that package (and it's common types). This will be really helpful not just for these platforms, but any future platform that also wants to work with Paths (files, directory etc) and or Packages that want to build on top of these primitives.</p>\n<p>There are others which will probably follow in this same direction, like Tcp etc. </p>\n<p>If this work is interesting to anyone, let me know as there's lot of things we can now experiment with now we have Task as a builtin and module params.</p>",
        "id": 475964280,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728510523
    },
    {
        "content": "<p>What are module params?</p>",
        "id": 475986685,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728521621
    },
    {
        "content": "<p>Functions passed in when importing a roc module. They are specified in the header. On phone don't have links to a doc at the moment</p>",
        "id": 475987784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728522250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481285\">Jared Cone</span> <a href=\"#narrow/stream/231634-beginners/topic/Why.20platforms.3F/near/475986685\">said</a>:</p>\n<blockquote>\n<p>What are module params?</p>\n</blockquote>\n<p>Here's the original design proposal <a href=\"https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?usp=sharing\">https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?usp=sharing</a></p>\n<p>The actual implementation has varied a little from this.</p>",
        "id": 475989335,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728522760
    },
    {
        "content": "<p>We should probably write up a guide to Module Params... or something similar to document what they are, the syntax, and potentially how/why to use them etc.</p>",
        "id": 475989608,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728522845
    },
    {
        "content": "<p>Yeah, should go under docs on the roc website</p>",
        "id": 475990290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728523102
    },
    {
        "content": "<p>Made a new Good First Issue for this <a href=\"https://github.com/roc-lang/roc/issues/7155\">https://github.com/roc-lang/roc/issues/7155</a></p>",
        "id": 475996757,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728525669
    },
    {
        "content": "<p>That module params design proposal seems to exemplify the tradeoff between abstraction and simplicity, though – having to pass in the primitive dependencies when using a module does seem like much more hassle than having the module integrate directly with the primitives in a singular platform. I can see some of the _theoritical_ benefits of this dependency injection, but DI is not exactly a new concept, and the benefits enumerated in the proposal are the same ones I saw mentioned 20 years ago – yet DI has become something of a scary word for OOP oldies <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> it makes complex things much simpler, but simple things more complex.</p>",
        "id": 476084268,
        "sender_full_name": "Daniel Schierbeck",
        "timestamp": 1728551476
    },
    {
        "content": "<p>I think DI is often \"scary\" in oop cause it is hidden from the code authors and feels magic </p>\n<p>This is really no different from passing a lambda into a function. Just has a bit of sugar to pass the lambda into all functions in a module. It also has a very clear chain to follow that is explicit. I would guess that in practice it won't feel the same as DI.</p>",
        "id": 476156762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728572772
    },
    {
        "content": "<p>I still think the overhead of having to figure out which params to pass to a module to get it to work (and _why_ that is necessary when it's not in other languages) is going to be an obstacle.</p>",
        "id": 476339252,
        "sender_full_name": "Daniel Schierbeck",
        "timestamp": 1728636380
    },
    {
        "content": "<p>Yes, that will be an ergonomics question that library/platform devs will need to try to simplify in the nascent months/years of this feature</p>",
        "id": 476350260,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728639932
    },
    {
        "content": "<p>My 2 cents:</p>\n<p>As a long time Java / Spring developer DI is not scary at all. At least on the levels of abstraction that I usually encounter it. I <em>do</em> think Module Params could be a really good mean of doing DI in Roc. </p>\n<p>What scares me a little bit though is the thought of needing to manually pass all tcp primitives (9 functions and 3 types in basic-cli) as modul parameters to every 3d party library that needs some networking capability. It's even scarier to think of also needing to write mapping functions when the platform primitives does not match  the expected signatures in the libraries. </p>\n<p>But I'm maybe misunderstanding how this is supposed to work?</p>",
        "id": 476357401,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728642253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544552\">Niklas Konstenius</span> <a href=\"#narrow/stream/231634-beginners/topic/Why.20platforms.3F/near/476357401\">said</a>:</p>\n<blockquote>\n<p>What scares me a little bit though is the thought of needing to manually pass all tcp primitives (9 functions and 3 types in basic-cli) as modul parameters to every 3d party library that needs some networking capability. It's even scarier to think of also needing to write mapping functions when the platform primitives does not match  the expected signatures in the libraries. </p>\n</blockquote>\n<p>Yes, if that's required, then no one would want to use this, and we'd eventually push towards <code>basic-cli</code> being the kitchen sink platform that everyone writes stuff for/into. We would probably want something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">basicCli.Tcp</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">ws.Websocket</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">tcp</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Tcp</span><span class=\"nf\">.</span><span class=\"nv\">prelude</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 476366297,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728645842
    },
    {
        "content": "<p>Or something along those lines that just provides the \"standard bundle\" of useful TCP functions</p>",
        "id": 476366372,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728645869
    },
    {
        "content": "<p>It's more annoying to use if you don't have the TCP bundle of functions in the right format in your package, but still better than needing to <em>always</em> pass everything in a giant record</p>",
        "id": 476366554,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728645952
    },
    {
        "content": "<p>That looks much better than the dark scary scenario I was describing. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>But if we already have decided on \"standard bundles\" of low level \"capabilities\" it still feels a little bit strange that I (as an application writer/ library consumer) need to do this \"DI\" by hand.  </p>\n<p>For me as a library consumer it would be much nicer if I could just read the documentation of a library and see that it <em>requires</em> the networking capability. And since I know that the plattform I'm using  <em>provides</em> the networking capability I know I'm good and can just import and use the package without passing any dependencies.</p>",
        "id": 476368938,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728646787
    },
    {
        "content": "<p>I appreciate the feedback about how it sounds, but I think it's more important how it feels to use in practice - so I think until we've actually spent some time building (and testing) things we should be mindful of going down a rabbit hole of what it might feel like to use without having actually tried it or even seen real-world code using it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 476377891,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728649710
    },
    {
        "content": "<p>That's a good approach for sure. I'll be happy to try these things out for real in the future.</p>",
        "id": 476379649,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728650352
    }
]