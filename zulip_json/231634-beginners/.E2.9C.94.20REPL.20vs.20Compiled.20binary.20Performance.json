[
    {
        "content": "<p>Just curious about the performance of ROC REPL vs compiled binary for long running processes.</p>\n<p>If we ignore startup time for parsing the syntax, and assumed the AST was cached in memory, how would the ROC REPL compare to the compiled binary in performance?  Somewhere I think I saw ROC doesn't really do garbage collection, and instead uses reference counting?</p>\n<p>Just curios how much faster / slower ROC would be as an interpreted language.</p>",
        "id": 446708448,
        "sender_full_name": "Brian Teague",
        "timestamp": 1719260364
    },
    {
        "content": "<p>Not really answering your question per se, but running Roc compiled to WASM through <code>wasmer</code> or <code>wasmtime</code> would probably have pretty good performance (if 2 or 3 times slower than native is okay with you), especially since most of them have a JIT</p>",
        "id": 446709954,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719260714
    },
    {
        "content": "<p>We can try benchmarking, but I expect the REPL performance would be pretty poor compared to other interpretted languages. The REPL is just a \"dumb\" interpretter, it doesn't do anything to improve the performance because code that needs to run quickly uses dev mode or release mode, both of which compile to native</p>",
        "id": 446710618,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719260842
    },
    {
        "content": "<p>Whereas something like Python does a lot of stuff under the hood to translate code via JIT to make dynamic code faster because that's the <em>only</em> way to run Python code, so it has to be optimized</p>",
        "id": 446710784,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719260876
    },
    {
        "content": "<p>And yes, Roc uses reference counting via the Perceus paper like Koka, the effect handler language. You can see Koka's explanation of why they do it <a href=\"https://koka-lang.github.io/koka/doc/book.html#why-perceus\">here</a>, which is the same reason why we do it.</p>",
        "id": 446711063,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719260954
    },
    {
        "content": "<p>In short, reference counting means no runtime (a.k.a. a garbage collector running in another thread), but still (pretty) good performance</p>",
        "id": 446711251,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719261012
    },
    {
        "content": "<p>So, a lot of optimizations would be needed to get the REPL closer to binary performance.</p>",
        "id": 446712561,
        "sender_full_name": "Brian Teague",
        "timestamp": 1719261265
    },
    {
        "content": "<p>We <em>could</em> optimize the code (a low effort way would be to compile every time to a dev build), but then the repl is slower to respond with an answer, so it's usually better to have the repl <em>run</em> slowly but <em>respond</em> quickly so that the user experience is good</p>",
        "id": 446713334,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719261478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676210\">Brian Teague</span> has marked this topic as resolved.</p>",
        "id": 446715492,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719262191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676210\">Brian Teague</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20REPL.20vs.20Compiled.20binary.20Performance/near/446708448\">said</a>:</p>\n<blockquote>\n<p>Just curious about the performance of ROC REPL vs compiled binary for long running processes.</p>\n<p>If we ignore startup time for parsing the syntax, and assumed the AST was cached in memory, how would the ROC REPL compare to the compiled binary in performance?  Somewhere I think I saw ROC doesn't really do garbage collection, and instead uses reference counting?</p>\n<p>Just curios how much faster / slower ROC would be as an interpreted language.</p>\n</blockquote>\n<p><code>roc repl</code> actually currently generates a binary and then runs it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 446726878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719266095
    },
    {
        "content": "<p>we don't currently have an interpreter</p>",
        "id": 446726889,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719266101
    },
    {
        "content": "<p>so what these commands do is:</p>\n<ul>\n<li><code>roc build</code> builds a binary</li>\n<li><code>roc run</code> builds a binary and then runs it</li>\n<li><code>roc repl</code> builds a binary based on your input, runs it, and prints the output</li>\n</ul>",
        "id": 446727000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719266160
    },
    {
        "content": "<p>the main reason the performance would be worse is that there's (currently) no <code>roc repl --optimize</code></p>",
        "id": 446727066,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719266181
    },
    {
        "content": "<p>so you're never getting optimizations in the repl, whereas if you do <code>roc build --optimize</code> or <code>roc run --optimize</code> the compiled binary will have optimizations, whereas <code>roc repl</code> never does them</p>",
        "id": 446727149,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719266233
    },
    {
        "content": "<p>Thanks for clarifying! Apologies for the mislead <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 446727401,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719266354
    },
    {
        "content": "<p>but we've actually talked about creating an interpreter specifically for compile-time evaluation of top-level constants</p>",
        "id": 446727447,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719266379
    },
    {
        "content": "<p>I forget what thread that was on</p>",
        "id": 446727456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719266388
    },
    {
        "content": "<p>Here's one such discussion: <a href=\"#narrow/stream/304641-ideas/topic/Compile.20time.20computation/near/258843147\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Compile.20time.20computation/near/258843147</a></p>",
        "id": 446727671,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719266459
    }
]