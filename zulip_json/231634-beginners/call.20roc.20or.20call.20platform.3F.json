[
    {
        "content": "<p>The default currently is that a platform calls roc main (I forget the exported function name) and then roc calls the platform for memory and other functions.</p>\n<p>Is it possible to export multiple roc functions? So you just have some core business logic in roc but the platform does the main loop and branching?</p>\n<p>Also, can you implement custom platform data structures that roc can manipulate?</p>",
        "id": 296442181,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661976907
    },
    {
        "content": "<p>I would say yes and yes, but there are still caveats to both answers</p>",
        "id": 296443147,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661977317
    },
    {
        "content": "<p>Roc can export multiple functions by returning them in a struct. Then the platform can technically call directly into those functions without ever calling main.</p>",
        "id": 296443291,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661977375
    },
    {
        "content": "<p>The issue is that without calling main first, you may end up trying to call into a closure without the correct captured args.</p>",
        "id": 296443361,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661977407
    },
    {
        "content": "<p>So generally I would change the roc main function to be called init. Then call if to get closure related information, but that isn't strictly necessary in many cases</p>",
        "id": 296443484,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661977449
    },
    {
        "content": "<p>My example with SDL does this.</p>",
        "id": 296443529,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661977469
    },
    {
        "content": "<p><a href=\"https://github.com/bhansconnect/roc-ecs\">https://github.com/bhansconnect/roc-ecs</a></p>",
        "id": 296443659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661977520
    },
    {
        "content": "<p>As for manipulation of host data structure. Roc has effects. As long as the host exposes and effect that does the manipulation, roc will be able to call it. Thus roc can do any manipulation the host could do.</p>",
        "id": 296443867,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661977576
    },
    {
        "content": "<p>we plan to make this smoother by generating the FFI code. It already works (really well) for anything but functions</p>",
        "id": 296446111,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661978495
    },
    {
        "content": "<p>Yea, so I can have a platform as a cli wrapper and the roc is just a \"library\" that it calls into? So roc library is easier to write complex and memory safe stuff for but it doesn't do cli parsing etc.</p>",
        "id": 296446441,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661978642
    },
    {
        "content": "<p>How can I test the FFI generation?</p>",
        "id": 296446506,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661978658
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt; target/debug/roc glue\nerror: The following required arguments were not provided:\n    &lt;ROC_FILE&gt;\n    &lt;GLUE_FILE&gt;\n\nUSAGE:\n    roc glue &lt;ROC_FILE&gt; &lt;GLUE_FILE&gt;\n</code></pre></div>\n<p>this only works for rust platforms (for now) actually</p>",
        "id": 296446798,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661978803
    },
    {
        "content": "<p>so glue file would be <code>output.rs</code> or something</p>",
        "id": 296446845,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661978824
    },
    {
        "content": "<p>and the roc file is the platform's main.roc I believe</p>",
        "id": 296446892,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661978848
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 296449133,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661979769
    }
]