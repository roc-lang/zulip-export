[
    {
        "content": "<p>I'm just getting started with Roc and trying to work out how to zip two lists together, the code will look something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>List.zip [1, 2] [3, 4]\n</code></pre></div>\n<p>And the result should look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[[1,3], [2,4]]\n</code></pre></div>\n<p>I couldn't find the <code>zip</code> function.</p>\n<p>How should I do this?</p>",
        "id": 430427043,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1711840372
    },
    {
        "content": "<p>You can use <code>List.map2</code> like this: </p>\n<div class=\"codehilite\"><pre><span></span><code>List.map2 [1,2] [3,4] \\x, y -&gt; [x,y]\n</code></pre></div>",
        "id": 430430245,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711843803
    },
    {
        "content": "<p>Thank you</p>",
        "id": 430447989,
        "sender_full_name": "Ashley Davis",
        "timestamp": 1711863060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651556\">@Ashley Davis</span>, just mentioning for completeness. If you're after a <code>List</code> of <code>List</code>s representation, then the underlying element type - both input and output - can be only one (i.e., the resulting sub-lists have to be homogeneous lists, just as the input lists do).</p>\n<p>If a tuple would work equally well for you, then the input inter-list types don't have to be the same (since the resulting tuple can contain heterogeneous types, by definition):</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">Â»</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"A\"</span><span class=\"p\">,</span><span class=\"s\">\"B\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"nv\">y</span><span class=\"p\">)</span>\n\n<span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"A\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"B\"</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"nf\">*</span>\n</code></pre></div>",
        "id": 430496220,
        "sender_full_name": "Hristo",
        "timestamp": 1711908687
    },
    {
        "content": "<p>Tuples will also generally be more performant and probably should be preferred for this use case.</p>",
        "id": 430497102,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711909492
    }
]