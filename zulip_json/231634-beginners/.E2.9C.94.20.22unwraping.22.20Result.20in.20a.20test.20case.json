[
    {
        "content": "<p>I have a function that can fail. I'd like to write a test case for that function, like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    Ok(parsed) = parse_rule(&quot;34|77&quot;)\n    parsed == { before: 34, after: 77}\n</code></pre></div>\n<p>This results in the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>This expression is used in an unexpected way:\n\n39â”‚      Ok(parsed) = parse_rule(&quot;34|77&quot;)\n                      ^^^^^^^^^^^^^^^^^^^\n\nThis parse_rule call produces:\n\n    Result {\n        after : Int Unsigned64,\n        before : Int Unsigned64,\n    } [\n        InvalidNumStr,\n        NotFound,\n    ]\n\nBut you are trying to use it as:\n\n    [Ok *]\n</code></pre></div>\n<p>However, if I write it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    parsed = parse_rule(&quot;34|77&quot;)\n    parsed == Ok({ before: 34, after: 77})\n</code></pre></div>\n<p>it works fine.</p>\n<p>The error about <code>[Ok *]</code> made me wonder whether the type inference for <code>parsed</code> was just too general, so I tried adding a type annotation like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>parsed : { before: U64, after: U64 }\nOk(parsed) = parse_rule(&quot;34|77&quot;)\n</code></pre></div>\n<p>But that fails with \"Nothing is named <code>parsed</code> in this scope.\" </p>\n<p>Obviously I _could_ just use the second form (<code>parsed == Ok({...})</code>, but I'd like to understand <em>why</em> I can't use the first form. I know you can pattern match when assigning, e.g. <code>{ a, b } = some_record</code>, so what's different here?</p>",
        "id": 542993837,
        "sender_full_name": "Joseph Montanaro",
        "timestamp": 1759512464
    },
    {
        "content": "<p>The <code>Result</code> may return an error as well, so it's not correct to just destruct it as <code>Ok</code> at the type level</p>",
        "id": 542994286,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1759512653
    },
    {
        "content": "<p>In other words, you can't do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>parsed = Err(&quot;error&quot;)\nOk(x) = parsed\n</code></pre></div>",
        "id": 542994542,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1759512737
    },
    {
        "content": "<p>Ok, so this is what Rust calls the distinction between \"refutable\" and \"irrefutable\" patterns? That makes sense, so what's the preferred way to say \"I just want to early-exit if this isn't Ok\"? I can't use <code>?</code> in an expect, it seems.</p>",
        "id": 542994680,
        "sender_full_name": "Joseph Montanaro",
        "timestamp": 1759512788
    },
    {
        "content": "<p>I think an early exit is not possible, but you could use <a href=\"https://www.roc-lang.org/builtins/alpha4/Result/#map_ok\">Result.map_ok</a>.</p>",
        "id": 542996629,
        "sender_full_name": "Anton",
        "timestamp": 1759513665
    },
    {
        "content": "<p>Ok, thanks! I think I'll just stick with <code>== Ok(...)</code> for now, it seems simplest.</p>",
        "id": 543018499,
        "sender_full_name": "Joseph Montanaro",
        "timestamp": 1759520306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"972318\">Joseph Montanaro</span> has marked this topic as resolved.</p>",
        "id": 543018510,
        "sender_full_name": "Notification Bot",
        "timestamp": 1759520313
    },
    {
        "content": "<p>I just want to say it's not only simplest, it's correct idiomatically</p>",
        "id": 543018585,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1759520357
    },
    {
        "content": "<p>The function returns a particular value and the test asserts this case. It's not only the record inside of the result important here but the whole result of the function! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span><br>\nBut I admit I could misunderstand the problem.</p>",
        "id": 543019109,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1759520608
    },
    {
        "content": "<p>It makes sense! I was mostly wondering about more complex future cases, where I might need to work with several Results in sequence as part of the same test. E.g. in Rust I might do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">test_thing</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">App</span><span class=\"p\">::</span><span class=\"n\">load</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to load the app.\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">set_some_state</span><span class=\"p\">(</span><span class=\"s\">\"blahblah\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"failed to set state\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">get_some_state</span><span class=\"p\">(</span><span class=\"s\">\"blahblah\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"s\">\"blahblah\"</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But I'm not sure how I would approach that in Roc, outside of using several nested <code>when</code>s or <code>Result.map_ok</code>s. But that doesn't feel very nice.</p>",
        "id": 543019339,
        "sender_full_name": "Joseph Montanaro",
        "timestamp": 1759520723
    },
    {
        "content": "<p>Yeah, I think an unwrapping crash would be nice in tests... if it only works in tests....not sure how we could limited to only tests though</p>",
        "id": 543058740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1759553343
    },
    {
        "content": "<p>Something like this should work</p>\n<div class=\"codehilite\"><pre><span></span><code>expect = |res| {\n    match(res) {\n        Ok(x) -&gt; x\n        Err(e) -&gt; crash(e)\n    }\n}\n</code></pre></div>",
        "id": 543058831,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1759553476
    },
    {
        "content": "<p>I assume it's already possible if you write a helper function that has expect statements. Then call it within another expect so if it returned anything and didn't crash - the test is passed</p>",
        "id": 543072002,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1759568374
    },
    {
        "content": "<p>Yeah, exactly. Though I don't think expects narrow types. So you need a match like above</p>",
        "id": 543096394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1759592028
    },
    {
        "content": "<p>That's cool, I didn't realize you could straight-up crash in an expect and it wouldn't interfere with the rest of the expects. Thanks!</p>\n<p>Might make a nice addition to <code>Result</code> in the stdlib, although like with Rust's <code>unwrap()</code> it would open the door to some abuse.</p>",
        "id": 543114100,
        "sender_full_name": "Joseph Montanaro",
        "timestamp": 1759608942
    },
    {
        "content": "<p>Yeah, I think it is more an open secret than anything that should every officially be in the stdlib</p>",
        "id": 543115223,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1759610201
    },
    {
        "content": "<p>We don't want to accidentally promote the use anywhere else</p>",
        "id": 543115242,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1759610227
    },
    {
        "content": "<p>yeah I consider <code>unwrap</code> and <code>expect</code> to be design mistakes in Rust's stdlib <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 543118348,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1759613876
    },
    {
        "content": "<p>I definitely don't think we should have them either!</p>",
        "id": 543118359,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1759613895
    },
    {
        "content": "<p>We've talked in the past about having <code>?</code> inside <code>expect</code> \"unwrap\" by automatically failing the <code>expect</code> rather than doing an early return</p>",
        "id": 543118393,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1759613943
    },
    {
        "content": "<p>I like that idea but we haven't implemented it yet</p>",
        "id": 543118476,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1759614049
    },
    {
        "content": "<p>fast-failing <code>expect</code> via <code>?</code> would be awesome, I think that's actually the first thing I tried</p>",
        "id": 543119847,
        "sender_full_name": "Joseph Montanaro",
        "timestamp": 1759615918
    },
    {
        "content": "<p>Actually, I just realized there's a super-simple way to do this that works already:</p>\n<div class=\"codehilite\"><pre><span></span><code>val = thing_that_can_fail(...) ?? crash &quot;thing failed&quot;\nval == &quot;whatever&quot;\n</code></pre></div>\n<p>Being able to use <code>?</code> in expects would be even easier, plus it could do things like print the actual value inside the <code>Err</code>, but for now this is easier than having to have a helper function available everywhere.</p>",
        "id": 543120095,
        "sender_full_name": "Joseph Montanaro",
        "timestamp": 1759616263
    }
]