[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>module [parseNumber]\n\nimport JsonData\n\nparseNumber : Str -&gt; Result JsonData [InvalidNumStr, BadUtf8 _ _]\nparseNumber = \\input -&gt;\n    Str.toU64 input\n    |&gt; Result.map \\n -&gt; Number n\n\nexpect parseNumber &quot;123&quot; == Ok (Number 123)\n</code></pre></div>\n<p>I'm getting an error to say \"Nothing is named <code>JsonData</code> in this scope.\" on the return type of parseNumber.<br>\nI have my data type as a module, which exposes the tag union called JsonData<br>\nWhat am I doing wrong? <br>\ncheers :)</p>",
        "id": 445432942,
        "sender_full_name": "Monica",
        "timestamp": 1718735774
    },
    {
        "content": "<p>What is the name of the module containing <code>JsonData</code>? I think you need to do <code>import Module.JsonData</code></p>",
        "id": 445434198,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718736179
    },
    {
        "content": "<p>It's called JsonData.roc</p>",
        "id": 445434800,
        "sender_full_name": "Monica",
        "timestamp": 1718736358
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>module [JsonData]\n\nJsonData : [\n    String Str,\n    Number I64,\n    Object (List (Str, JsonData)),\n]\n</code></pre></div>\n<p>This is my module</p>",
        "id": 445434944,
        "sender_full_name": "Monica",
        "timestamp": 1718736396
    },
    {
        "content": "<p>I basically want to say my return type of parseNumber is Number</p>",
        "id": 445435017,
        "sender_full_name": "Monica",
        "timestamp": 1718736424
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><code>module [parseNumber]\n\nimport JsonData exposing [JsonData]\n\n# Alternative (if using `import` without `exposing`:\n# parseNumber : Str -&gt; Result JsonData.JsonData [InvalidNumStr, BadUtf8 _ _]\nparseNumber : Str -&gt; Result JsonData [InvalidNumStr, BadUtf8 _ _]\nparseNumber = \\input -&gt;\n    Str.toI64 input\n    |&gt; Result.map \\n -&gt; Number n\n\nexpect parseNumber &quot;123&quot; == Ok (Number 123)\n</code></pre></div>",
        "id": 445447471,
        "sender_full_name": "Akeshihiro",
        "timestamp": 1718740210
    },
    {
        "content": "<p>thanks that worked!</p>",
        "id": 445465532,
        "sender_full_name": "Monica",
        "timestamp": 1718746326
    }
]