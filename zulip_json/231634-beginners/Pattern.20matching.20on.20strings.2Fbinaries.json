[
    {
        "content": "<p>Im trying to solve this years AdventOfCode with Roc, I already made solution with Elixir that came out quite nice since it has binary pattern matching but Im struggling a bit  on how to do something similar with Roc.</p>\n<p>Is there a way of pattern match on a string in Roc? Or should I just split by graphemes and pattern match on list instead?</p>\n<p>Maybe it is the completely wrong approach fr Roc. Is anyone else doing AdventOfCode in Roc so where I could snek peak on the code?</p>",
        "id": 405406934,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701451252
    },
    {
        "content": "<p>I think only list has prefix pattern matching and the like</p>",
        "id": 405407227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701451309
    },
    {
        "content": "<p>So you could turn it into a list and pattern match</p>",
        "id": 405407313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701451323
    },
    {
        "content": "<p>That said, I'm not actually sure what \"binary\" pattern matching directly refers to.</p>",
        "id": 405407393,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701451347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"630509\">@Hannes Nevalainen</span>,<br>\nSeveral day 1 solutions have been posted in <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405290959\">this thread</a>.</p>",
        "id": 405409160,
        "sender_full_name": "Anton",
        "timestamp": 1701451971
    },
    {
        "content": "<p>It is a way to match/destructure a binary (string of bytes).</p>\n<p>&lt;&lt;a, b, rest::binary&gt;&gt; = \"hello\"</p>\n<ul>\n<li><code>a</code> would be the byte-value of <code>h</code></li>\n<li><code>b</code> would be the byte-value of <code>e</code></li>\n<li><code>rest</code> would be <code>\"llo\"</code></li>\n</ul>\n<p>I would imagine it would look  like something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">match</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">   </span><span class=\"s\">\"he\"</span><span class=\"w\"> </span><span class=\"nf\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\">  </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"s\">\"two\"</span><span class=\"w\"> </span><span class=\"nf\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\">  </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>but it might not make sense in the context of Roc, Im still learning :)</p>\n<p>In elixir it looks like this.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(&lt;&lt;&gt;&gt;),</span><span class=\"w\"> </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(&lt;&lt;</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"o\">::</span><span class=\"n\">binary</span><span class=\"p\">&gt;&gt;)</span><span class=\"w\"> </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"sc\">?0</span><span class=\"w\"> </span><span class=\"ow\">and</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"sc\">?9</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"sc\">?0</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"one\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">     </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"two\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">     </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"three\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">  </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"four\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">    </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"five\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">     </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"six\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">       </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"seven\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"eight\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">  </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"s2\">\"nine\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">),</span><span class=\"w\">   </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)]</span>\n\n<span class=\"w\">  </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(&lt;&lt;</span><span class=\"bp\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"o\">::</span><span class=\"n\">binary</span><span class=\"p\">&gt;&gt;),</span><span class=\"w\"> </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">find_digits2</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>(I know this doesnt account for the catch in todays problem).</p>",
        "id": 405410853,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701452759
    },
    {
        "content": "<p>Currently to do something like that, first call <code>Str.toUtf8</code> the pattern match on the returned list of bytes</p>",
        "id": 405411104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701452860
    },
    {
        "content": "<p>Not as compact, but gets the same thing done</p>",
        "id": 405411127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701452868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Pattern.20matching.20on.20strings.2Fbinaries/near/405409160\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"630509\">Hannes Nevalainen</span>,<br>\nSeveral day 1 solutions have been posted in <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405290959\">this thread</a>.</p>\n</blockquote>\n<p>Right, it would be smarter to start searching zulip for \"AdventOfCode\" instead of \"string pattern match\" that doesn't exists <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 405411340,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701452946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Pattern.20matching.20on.20strings.2Fbinaries/near/405411104\">said</a>:</p>\n<blockquote>\n<p>Currently to do something like that, first call <code>Str.toUtf8</code> the pattern match on the returned list of bytes</p>\n</blockquote>\n<p>Would that actually convert it to a list of bytes under the hood to?</p>",
        "id": 405411719,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701453108
    },
    {
        "content": "<p>A string is already a list of bytes under the hood. Generally <code>Str.toUtf8</code> actually does nothing.</p>",
        "id": 405421355,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701457191
    },
    {
        "content": "<p>Thanks for your help :)</p>",
        "id": 405432122,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701461797
    },
    {
        "content": "<p>I know I'm late to this, but you could also use <code>Str.startsWith</code> and a bunch of <code>else if</code>s, instead of doing it in a match.</p>",
        "id": 405540582,
        "sender_full_name": "Sky Rose",
        "timestamp": 1701528474
    }
]