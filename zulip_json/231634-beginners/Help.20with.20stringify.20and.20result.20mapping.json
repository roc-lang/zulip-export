[
    {
        "content": "<p>Hi, I'm trying to convert some example code that munges on a data model with optionals and errors. I may have skimmed over it in the tutorial, and maybe it relates to encoders, but how do I just write structured data to stdout in an easy fashion? Example of what I'd like to do here:</p>\n<p><a href=\"https://github.com/contextfreecode/rocdemo/blob/0e7ee7c346d220c7ac29bb2c90353b85521d9ada/main.roc#L55\">https://github.com/contextfreecode/rocdemo/blob/0e7ee7c346d220c7ac29bb2c90353b85521d9ada/main.roc#L55</a></p>\n<p>Also, I made some Result mapping helpers at the bottom of this file. Is anything built-in that I've missed? Using <code>when</code> for everything is bulky. And I see some related looking things on cli Task (like map and mapErr), but I haven't simulated using Task for my simulated network reading, and I'm not sure if that would be the right things anyway.</p>\n<p>Thanks!</p>",
        "id": 402919388,
        "sender_full_name": "Tom",
        "timestamp": 1700345804
    },
    {
        "content": "<p>Also, since I'm modeling data with optionals, I couldn't use optional record fields. So I used Err {} for none. I tried saying <code>null = Err {}</code>, but it seemed to fail at row polymorphism. Any way to define a row polymorphic constant like this?</p>",
        "id": 402919826,
        "sender_full_name": "Tom",
        "timestamp": 1700346146
    },
    {
        "content": "<blockquote>\n<p>but how do I just write structured data to stdout in an easy fashion?</p>\n</blockquote>\n<p>We have a partially implemented but not complete inspect ability that plans to be autoderived that would enable this. Until then, manually writing a function or using a encoder is the best option.</p>\n<blockquote>\n<p>Is anything built-in that I've missed?</p>\n</blockquote>\n<p>Result as <code>map</code>, <code>mapErr</code>, <code>try</code>, and <code>onErr</code>. With backpassing, that tends to avoid both deep nesting and lots of <code>when .. is</code> expressions. <a href=\"https://www.roc-lang.org/builtins/Result\">https://www.roc-lang.org/builtins/Result</a></p>\n<blockquote>\n<p>Any way to define a row polymorphic constant like this?</p>\n</blockquote>\n<p>I am pretty the answer is that there is no way to do that. It would have to be a function that returns the value to get the results you expect.</p>",
        "id": 402920812,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700346949
    },
    {
        "content": "<p>Wow, I managed to overlook the Result section there. Thanks for that and the other info!</p>",
        "id": 402921107,
        "sender_full_name": "Tom",
        "timestamp": 1700347170
    },
    {
        "content": "<p>I thought Inspect works ok, is there anything still outstanding with that? Here is the example <a href=\"https://github.com/roc-lang/roc/blob/main/examples/inspect-logging.roc\">https://github.com/roc-lang/roc/blob/main/examples/inspect-logging.roc</a></p>",
        "id": 402921698,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700347681
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ roc run examples/inspect-logging.roc\n{people: [{firstName: &quot;John&quot;, lastName: &quot;Smith&quot;, age: 27, hasBeard: true, favoriteColor: Blue}, {firstName: &quot;Debby&quot;, lastName: &quot;Johnson&quot;, age: 47, hasBeard: false, favoriteColor: Green}, {firstName: &quot;Jane&quot;, lastName: &quot;Doe&quot;, age: 33, hasBeard: false, favoriteColor: (RGB (255, 255, 0))}], friends: [{2}, {2}, {0, 1}]}\n</code></pre></div>",
        "id": 402921745,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700347693
    },
    {
        "content": "<p>Maybe it is the autoderive for Inspect on Roc types that doesn't work yet, so you have to supply a custom formatter, e.g. in this case <code>LogFormatter</code></p>",
        "id": 402921815,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700347795
    },
    {
        "content": "<p>yeah, no autoderive</p>",
        "id": 402922043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700347989
    },
    {
        "content": "<p>Manual definitions: <a href=\"https://github.com/roc-lang/roc/blob/main/examples/Community.roc#L94\">https://github.com/roc-lang/roc/blob/main/examples/Community.roc#L94</a></p>",
        "id": 402922056,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700348014
    },
    {
        "content": "<p>Ahk, thanks for looking into that</p>",
        "id": 402922198,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700348154
    },
    {
        "content": "<p>yeah I have a WIP branch that I paused on to work on new website stuff; I plan to get back to it once the new website is out!</p>",
        "id": 402923787,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700349287
    },
    {
        "content": "<p>Thanks for the examples!</p>",
        "id": 402923824,
        "sender_full_name": "Tom",
        "timestamp": 1700349324
    },
    {
        "content": "<p>Any chance that automating inspect will also apply to tagged types including Result?</p>",
        "id": 402925136,
        "sender_full_name": "Tom",
        "timestamp": 1700350250
    },
    {
        "content": "<p>inspect should work on all types automatically if they aren't opaque</p>",
        "id": 402926685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700351505
    }
]