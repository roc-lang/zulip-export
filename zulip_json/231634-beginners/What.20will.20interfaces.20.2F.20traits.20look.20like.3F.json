[
    {
        "content": "<p>I understand Abilities will be removed after adding static dispatch. Can someone explain what a type implementing an interface might look like? Maybe a roc equivalent of this example in Rust <a href=\"https://rustbyexample.io/traits\">https://rustbyexample.io/traits</a></p>\n<p>Will there be any support for dynamic dispatch? Can I have a <code>List Shape</code> or would I wrap it in an enum first?</p>",
        "id": 498897738,
        "sender_full_name": "Ben",
        "timestamp": 1739234594
    },
    {
        "content": "<p>There would be no dynamic dispatch</p>",
        "id": 498898905,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235093
    },
    {
        "content": "<p>you would need to make <code>Shape</code> a tag union and dispatch from the tag</p>",
        "id": 498898958,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235113
    },
    {
        "content": "<p>In static dispatch, you would have 3 files <code>Rectangle.roc</code>, <code>Circle.roc</code>, and <code>main.roc</code></p>\n<p>Rectangle and Circle would both create custom types (not sure what the new syntax will be for that). They would also expose an <code>area</code> function with the first arg being their type.</p>",
        "id": 498899334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235259
    },
    {
        "content": "<p>The <code>print_area</code> function would be:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">print_area!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">area</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">F64</span>\n<span class=\"n\">print_area!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">shape</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">area</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">())</span>\n</code></pre></div>",
        "id": 498899534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235358
    },
    {
        "content": "<p>not 100% sure on the syntax, but roughly that</p>",
        "id": 498899619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235388
    },
    {
        "content": "<p>The interfaces are all implicit. If any custom type expose <code>area: Self -&gt; F64</code>, it automatically can be used with the above function</p>",
        "id": 498899791,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235469
    },
    {
        "content": "<p>You also can name an interface if you want:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Shape</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">area</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">F64</span>\n<span class=\"n\">print_area!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Shape</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span>\n</code></pre></div>",
        "id": 498899939,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235519
    },
    {
        "content": "<p>Does that answer your question?</p>",
        "id": 498900063,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739235588
    },
    {
        "content": "<p>Are you able to disambiguate if there are two different \"trait functions\" with the same name? and what does the syntax look like if area takes Self and another param?</p>",
        "id": 498926389,
        "sender_full_name": "Ben",
        "timestamp": 1739248366
    },
    {
        "content": "<p>Roc will dispatch to the module where the Custom type is defined and call the function with that name. I'm not sure you can even have two Custom types in the same module... but if you could and they had the same name that would be ambiguous</p>",
        "id": 498926463,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739248424
    },
    {
        "content": "<p>I see, I'm thinking suppose there were two libraries, and they both happened to have an API where you can pass in a type that must have a function called <code>frobnicate()</code> but expect different implementations</p>\n<p>and I want to be able to use my single type with both libraries</p>",
        "id": 498926811,
        "sender_full_name": "Ben",
        "timestamp": 1739248634
    },
    {
        "content": "<p>This is like go interfaces. If you have a function with the correct name and type signature, you match the interface whether you want to or not</p>",
        "id": 498926994,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739248731
    },
    {
        "content": "<p>Gotcha so I guess it's a lot of the same answerse as here <a href=\"https://stackoverflow.com/questions/72019486/how-to-implement-two-interfaces-with-same-method-name-and-different-arguments\">https://stackoverflow.com/questions/72019486/how-to-implement-two-interfaces-with-same-method-name-and-different-arguments</a></p>",
        "id": 498927242,
        "sender_full_name": "Ben",
        "timestamp": 1739248893
    },
    {
        "content": "<p>Yes</p>",
        "id": 498927443,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739249033
    },
    {
        "content": "<p>Also, I coded in go professionally for a few years and never ran into the problem. I think it is generally very rare.</p>",
        "id": 498927504,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739249056
    },
    {
        "content": "<p>If I ran into it in roc, I would just convert one custom type into another custom type for the less used interface</p>",
        "id": 498927541,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739249084
    },
    {
        "content": "<p><code>thing.abc()</code> and <code>thing.to_interface().abc()</code></p>",
        "id": 498927599,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739249126
    }
]