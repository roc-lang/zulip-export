[
    {
        "content": "<p>Are there any platforms out there with some basic sockets support or do I have to make my own currently?</p>",
        "id": 338479643,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677545051
    },
    {
        "content": "<p>none that I know of, but if you're interested in adding them to an existing platform (e.g. <a href=\"https://github.com/roc-lang/basic-cli\">basic-cli</a>) I'd be happy to help!</p>",
        "id": 338479772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677545119
    },
    {
        "content": "<p>That’d be fun! I’ll clone basic-cli and get comfy with it</p>",
        "id": 338480012,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677545272
    },
    {
        "content": "<p>feel free to post any questions here!</p>",
        "id": 338482422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677546483
    },
    {
        "content": "<p>Very hardcoded but it's a start! <a href=\"/user_uploads/22008/j2HxRHJmJzmEy92lmhehj8eP/CleanShot-2023-02-27-at-22.43.45.gif\">client.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/j2HxRHJmJzmEy92lmhehj8eP/CleanShot-2023-02-27-at-22.43.45.gif\" title=\"client.gif\"><img src=\"/user_uploads/22008/j2HxRHJmJzmEy92lmhehj8eP/CleanShot-2023-02-27-at-22.43.45.gif\"></a></div>",
        "id": 338486004,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677548689
    },
    {
        "content": "<p>haha! I love how specific the function is.</p>",
        "id": 338486672,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549181
    },
    {
        "content": "<p>glad it wasn't to hard to figure the base out</p>",
        "id": 338486686,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549192
    },
    {
        "content": "<p>Yeah, it felt so intuitive!</p>",
        "id": 338486967,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677549393
    },
    {
        "content": "<p>Now I need to return a pointer to the stream so I can read and write later. Not sure what type I need to use for that.</p>",
        "id": 338487115,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677549512
    },
    {
        "content": "<p>Likely you want an opaque type that simply wraps a <code>Nat</code> or a <code>Box {}</code></p>",
        "id": 338487330,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549624
    },
    {
        "content": "<p>That way userland Roc code won't be able to do anything with it, but it can still be passed around as a pointer.</p>",
        "id": 338487349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549648
    },
    {
        "content": "<p>You can look at what was done here for a file: <a href=\"https://github.com/roc-lang/roc/blob/main/examples/cli/false-interpreter/platform/File.roc\">https://github.com/roc-lang/roc/blob/main/examples/cli/false-interpreter/platform/File.roc</a></p>",
        "id": 338487410,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549699
    },
    {
        "content": "<p>In this case, I also managed the lifetime of the file to make sure the handle got closed. Only exposing a function that took a lambda for what to do with the file.</p>",
        "id": 338487526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549749
    },
    {
        "content": "<p>Oh, though I used <code>U64</code>, which is wrong on 32bit platforms, so I wouldn't copy that.</p>",
        "id": 338487560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549777
    },
    {
        "content": "<p>I see</p>",
        "id": 338487605,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677549804
    },
    {
        "content": "<p>So <code>Nat</code> is like <code>usize</code>?</p>",
        "id": 338487685,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677549847
    },
    {
        "content": "<p>Yep</p>",
        "id": 338487720,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677549882
    },
    {
        "content": "<p>Alright, on it! Thank you :)</p>",
        "id": 338487754,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677549917
    },
    {
        "content": "<p>It's getting more interesting <a href=\"/user_uploads/22008/5a-P9OnSpyT3rJLC4yWg6maq/CleanShot-2023-02-28-at-00.53.34.gif\">chat.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/5a-P9OnSpyT3rJLC4yWg6maq/CleanShot-2023-02-28-at-00.53.34.gif\" title=\"chat.gif\"><img src=\"/user_uploads/22008/5a-P9OnSpyT3rJLC4yWg6maq/CleanShot-2023-02-28-at-00.53.34.gif\"></a></div>",
        "id": 338496269,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677556735
    },
    {
        "content": "<p>This is pretty fire, nice Agus!</p>",
        "id": 338496310,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677556783
    },
    {
        "content": "<p>I love the gif. Really cool to see.</p>",
        "id": 338498469,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677558565
    },
    {
        "content": "<p>Oh wow, so cool! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 338510768,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677567259
    },
    {
        "content": "<p>wow, that's awesome!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 338579514,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677588905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> was this all on your first day getting into Platform development?</p>",
        "id": 338579575,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677588923
    },
    {
        "content": "<p>I did cross midnight but yeah <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 338579866,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677589004
    },
    {
        "content": "<p>It was my first day actually using Roc at all. I had only seen some talks before.</p>",
        "id": 338580353,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677589126
    },
    {
        "content": "<p>Props to you folks for making it so straightforward!</p>",
        "id": 338580527,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677589169
    },
    {
        "content": "<p>wow, amazing! <span aria-label=\"heart eyes cat\" class=\"emoji emoji-1f63b\" role=\"img\" title=\"heart eyes cat\">:heart_eyes_cat:</span></p>",
        "id": 338580609,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677589197
    },
    {
        "content": "<p>It's been fun! I'll play with the API when I get some more free time. I have to make some things fail at the <code>Task</code> level instead of panicking in the platform, and figure out how to read arbitrary bytes.</p>",
        "id": 338582409,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677589740
    },
    {
        "content": "<p>If everything goes well I can probably make a PR later in the week!</p>",
        "id": 338582476,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677589768
    },
    {
        "content": "<p>Got the API to a pretty good state I think: <a href=\"https://github.com/agu-z/roc-basic-cli/blob/sockets-support/src/Tcp.roc\">https://github.com/agu-z/roc-basic-cli/blob/sockets-support/src/Tcp.roc</a><br>\nExample: <a href=\"https://github.com/agu-z/roc-basic-cli/blob/sockets-support/examples/tcp-client.roc\">https://github.com/agu-z/roc-basic-cli/blob/sockets-support/examples/tcp-client.roc</a></p>",
        "id": 338960959,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677706393
    },
    {
        "content": "<p>It can now read all data in the stream (was reading into a fixed buffer before). Also, you can read/write raw bytes if you want to.</p>",
        "id": 338961361,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677706546
    },
    {
        "content": "<p>Replaced <code>Tcp.connect</code> with <code>Tcp.withConnect</code> which manages the lifetime of the connection so you can't forget to close, similar to: <a href=\"https://github.com/roc-lang/roc/blob/main/examples/cli/false-interpreter/platform/File.roc\">https://github.com/roc-lang/roc/blob/main/examples/cli/false-interpreter/platform/File.roc</a></p>",
        "id": 338961683,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677706681
    },
    {
        "content": "<p>I think the only missing part for a PR is error handling. I wrote the types but glue doesn't work so I can't return them from Rust.</p>",
        "id": 338962037,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677706828
    },
    {
        "content": "<p>I'll look into how much code per type we need, maybe I can just write them by hand</p>",
        "id": 338962091,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677706869
    },
    {
        "content": "<p>Yeah, maybe not lol</p>",
        "id": 338966857,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677708896
    },
    {
        "content": "<p>I'd rather spend the time investigating why glue doesn't work in the first place. Gotta run now but I might do that later or tomorrow.</p>",
        "id": 338967026,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677708972
    },
    {
        "content": "<p>I'd love to have someone else get involved with glue, so if you want to look into it that would be awesome! I'd be happy to help with answering any questions <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 338967210,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677709071
    },
    {
        "content": "<p>Yeah, it’ll probably take me a while to get familiar with the compiler internals but happy to!</p>",
        "id": 338967862,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677709364
    },
    {
        "content": "<p>I managed to generate the glue code for my errors with this trick: <a href=\"#narrow/stream/316715-contributing/topic/Broken.20glue/near/339383878\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/Broken.20glue/near/339383878</a></p>\n<p>However, even if a I return a <code>RocResult::ok</code> from the rust, when I pattern match on the Roc side it always matches the <code>Err</code> case. Even if the platform is never creating <code>RocResult::err</code> at all.</p>",
        "id": 339600427,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677956054
    },
    {
        "content": "<p>and neither of the a and x in <code>Result a x</code> are the <code>[]</code> type?</p>",
        "id": 339600571,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677956110
    },
    {
        "content": "<p>Not in the <code>Effect</code> module or my <code>Tcp</code> module</p>",
        "id": 339600724,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677956178
    },
    {
        "content": "<p>Only the main function because it needs to be <code>Task _ []</code></p>",
        "id": 339600762,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677956195
    },
    {
        "content": "<p>yeah so not in relevant code paths.</p>",
        "id": 339600764,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677956195
    },
    {
        "content": "<p>ok, well this sounds like just a mismatch between where glue is storing and roc is reading the bytes</p>",
        "id": 339600798,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677956214
    },
    {
        "content": "<p>Yeah, that's what I thought. Lemme try something like a <code>RocStr</code> from <code>roc_std</code> an error.</p>",
        "id": 339600882,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677956275
    },
    {
        "content": "<p>Well, I guess that wouldn't matter because I'm never generating an error yet</p>",
        "id": 339600960,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677956301
    },
    {
        "content": "<p>Is that the same issue as this? Folkert’s response from the Roc Clock thread (can’t seem to copy the link from mobile):</p>\n<p>well. this is interesting and frustrating: rust will send a <code>RocResult&lt;u8, ()&gt;</code> over to roc as a <code>u16</code>. we \"receive\" it as <code>{ [0 x i8], [1 x i8], i8, [0 x i8] }</code>, which is reasonable (if you've seen LLVM IR before), but it is _not_ valid according to the C ABI</p>",
        "id": 339601265,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1677956455
    },
    {
        "content": "<p>I was having the same issue where RocResult would always be Err</p>",
        "id": 339601337,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1677956501
    },
    {
        "content": "<p>I see. Yeah, I guess that'd make sense</p>",
        "id": 339601550,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677956585
    },
    {
        "content": "<p>Ok yeah, I tried the other examples and it looks like Roc thinks all <code>Result</code> are <code>Err</code> in general</p>",
        "id": 339603304,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677957625
    },
    {
        "content": "<p>Hmm. I wonder when that broke. It definitely has not always been the case.</p>",
        "id": 339603526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677957787
    },
    {
        "content": "<p>I mean all <code>Result</code> coming from rust to be clear</p>",
        "id": 339603545,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677957810
    },
    {
        "content": "<p>I think it depends on the size of the type that is in a result</p>",
        "id": 339603643,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677957879
    },
    {
        "content": "<p>I'd guess it works for <code>i64</code>/<code>usize</code></p>",
        "id": 339603650,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677957887
    },
    {
        "content": "<p>but not for most other things</p>",
        "id": 339603658,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677957895
    },
    {
        "content": "<p>In my case I have a raw pointer in the <code>Ok</code> case and a glue generated enum in the <code>Err</code> case.</p>",
        "id": 339604084,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677958130
    },
    {
        "content": "<p>Should this be fixed in <code>roc_std</code> or in the compiler?</p>",
        "id": 339604623,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677958365
    },
    {
        "content": "<p>this is a compiler thing</p>",
        "id": 339605104,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677958642
    }
]