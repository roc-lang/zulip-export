[
    {
        "content": "<p>I'd glanced at koka before, but only today really read through their documentation, and it looks like there are a lot of similarities to what roc is doing, including \"reuse analysis\" and their perceus reference counting system. <a href=\"https://koka-lang.github.io/koka/doc/book.html#sec-fbip\">https://koka-lang.github.io/koka/doc/book.html#sec-fbip</a></p>",
        "id": 234248335,
        "sender_full_name": "Jared",
        "timestamp": 1618272044
    },
    {
        "content": "<p>folkert used some stuff from that already I think, there was a paper in November 2020 he referenced. <a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf\">https://www.microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf</a></p>",
        "id": 234248862,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1618272353
    },
    {
        "content": "<p>Oh neat. Yeah I wonder how their merge sort compares</p>",
        "id": 234249393,
        "sender_full_name": "Jared",
        "timestamp": 1618272710
    },
    {
        "content": "<p>happy to discus this more btw. We use the RC insertion algorithm from \"counting immutable beans\", and then the ideas from \"perceus\" to cancel out RC operations . What we don't have yet is the re-use of allocations in recursive structures (e.g. in-place linked list map is not possible today)</p>",
        "id": 234537978,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1618420395
    },
    {
        "content": "<p>but our <code>List.map</code> is in-place when possible</p>",
        "id": 234538022,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1618420411
    }
]