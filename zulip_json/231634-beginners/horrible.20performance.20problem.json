[
    {
        "content": "<p>hi I see there is problem  with performance, I am working on app <a href=\"https://github.com/salarii/peek/\">https://github.com/salarii/peek/</a>   and there is Regex.roc  file,  which  is  interface. Inside this file there is availableRegex field  which  should  be created  once, because it acts like  static  const  field.<br>\n What  I see is that  this field  is  created every time  I call parseStr. It is  horrible  from  performance  point of  view because  constructing  this  field  is expensive, how  it is even  possible  that  application  can't  figure  this  out, to  make  it  only  once?</p>",
        "id": 408659744,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702921701
    },
    {
        "content": "<p>Roc doesn't have any sort of compile time execution to generate that as a constant currently. </p>\n<p>Roc also makes all top levels into closures essentially. The issue is that roc doesn't have control to initialize constants due to how hosts load roc apps. We probably need to find a way to avoid this. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> do we have any plan# around this? Top levels that should be constants instead being closures is really unintuitive and easy to be a huge perf issue like noted above.</p>",
        "id": 408663184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702922802
    },
    {
        "content": "<p>Currently it 100% depends on the magic of llvm and inline to make these low cost. They should always be free.</p>",
        "id": 408663317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702922845
    },
    {
        "content": "<p>this is exactly why I think we need compile-time evaluation of top-level constants <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>see this thread for more:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/304641-ideas/topic/IR.20interpreter/near/401573555\">said</a>:</p>\n<blockquote>\n<p>as an aside, I didn't say it explicitly earlier, but one of the things I like about the dev backend for top-level constant evaluation idea is that it essentially adds nothing to the build+run cost:</p>\n<ul>\n<li>if we build and run them at compile time, then there's zero cost at runtime</li>\n<li>if we build them at compile time and then run them as soon as the program starts (which isn't really a thing in a Roc application, since the host is in charge of when the compiled Roc code gets called, but let's pretend it was a thing) then we pay the same cost immediately on program start that we saved from not doing it during the build</li>\n</ul>\n<p>so in terms of dev builds, where you basically always build and then immediately run, I think the cost of evaluating them at compile-time ends up being essentially zero. Really it's the difference between however we end up storing them (after evaluating them) at build time versus at runtime, but if anything that probably makes the build-time version faster because it always gets to bump allocate the entire evaluation, whereas the runtime version only can in some situations (depending on the platform)</p>\n</blockquote>\n<p>this hasn't been implemented yet though</p>",
        "id": 408663576,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702922943
    },
    {
        "content": "<p>Cool, we do have a plan at least</p>",
        "id": 408664026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702923131
    },
    {
        "content": "<p>This would also be good to document in <a href=\"https://www.roc-lang.org/plans\">https://www.roc-lang.org/plans</a></p>",
        "id": 408667552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702924604
    },
    {
        "content": "<p>but  what I am complaining  about  it is not that it is not evaluate  during compile time which is merely nice to have  feature. What bothers  me  is  that  it is evaluated  every time. \"closures\" means  that  all variables  like that  are evaluated into  functions  and executed in  place ? This  should  be  fixed  first  , evaluation  at compile  time  is  nice  but  complete  different  story</p>",
        "id": 408669019,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1702925282
    },
    {
        "content": "<p>Yeah, while compile time execution fixes this issue, running once at runtime and caching would also fix the issue.</p>",
        "id": 408671174,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702926160
    },
    {
        "content": "<p>That said, it has more complexity due to not knowing the context roc is run in. It has to be safe even if called many times from various threads all at once. Which would at a minimum require some form of locking which isn't great.</p>",
        "id": 408671320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702926215
    },
    {
        "content": "<p>As I see it, there are 3 options:</p>\n<ol>\n<li>Exposed a <code>roc_init</code> function that must be called before other roc functions and initializes all globals.</li>\n<li>Add mutex around all globals that allows the first calling thread to take the writer lock. All other threads would notice the lock is taken and wait. The first thread would initialize the value and set a flag that it is initialized. Future threads would see it is initialized and just use the value.</li>\n<li>All top level constants are compile time evaluated. This they are statically stored in the binary and safe to use from the get go.</li>\n</ol>",
        "id": 408672170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702926528
    },
    {
        "content": "<p>maybe it's time to start working on compile time evaluation!</p>",
        "id": 408677061,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702928752
    },
    {
        "content": "<p>Interpreter or trying to use the dev backend?</p>",
        "id": 408683120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702931436
    },
    {
        "content": "<p>we should probably discuss that on the other thread - I don't think we conclusively resolved that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 408685910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702932851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/horrible.20performance.20problem/near/408672170\">said</a>:</p>\n<blockquote>\n<p>As I see it, there are 3 options:</p>\n<ol>\n<li>Exposed a <code>roc_init</code> function that must be called before other roc functions and initializes all globals.</li>\n<li>Add mutex around all globals that allows the first calling thread to take the writer lock. All other threads would notice the lock is taken and wait. The first thread would initialize the value and set a flag that it is initialized. Future threads would see it is initialized and just use the value.</li>\n<li>All top level constants are compile time evaluated. This they are statically stored in the binary and safe to use from the get go.</li>\n</ol>\n</blockquote>\n<p>I thought concurrency was a platform issue?</p>",
        "id": 409196414,
        "sender_full_name": "Shaiden Spreitzer",
        "timestamp": 1703082227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568088\">Artur Swiderski</span> <a href=\"#narrow/stream/231634-beginners/topic/horrible.20performance.20problem/near/408669019\">said</a>:</p>\n<blockquote>\n<p>but  what I am complaining  about  it is not that it is not evaluate  during compile time which is merely nice to have  feature. What bothers  me  is  that  it is evaluated  every time. \"closures\" means  that  all variables  like that  are evaluated into  functions  and executed in  place ? This  should  be  fixed  first  , evaluation  at compile  time  is  nice  but  complete  different  story</p>\n</blockquote>\n<p>How is the compiler supposed to know which function to cache? Should there be a database containing all functions with all input params and their return values? What if a function is called with aaaaa 10000x times and then with \"bbbbb\" once? Should \"aaaaa\" be thrown out? What if a function is called with a new param every time??</p>\n<p>The 'correct' 'solution' to the above problem (imo) is to use an Elm-style model-view approach:<br>\nIn Elm:</p>\n<div class=\"codehilite\"><pre><span></span><code>type alias Model = { availableRegex : String }\n\nparseStr : String -&gt; String -&gt; Model -&gt; (Model, Result ParsingResultType String)\nparseStr str pattern model =\n   ...\n</code></pre></div>\n<p>In Roc (I'm guessing use at own risk!)</p>\n<div class=\"codehilite\"><pre><span></span><code>Model : { availableRegex : Str }\n\nparseStr : Str, Str, Model -&gt; (Moddel, Result ParsingResultType Str)\nparseStr = \\str, pattern, model -&gt;\n</code></pre></div>\n<p>Now in <code>parseStr</code> you check if <code>availableRegex</code> has already been created and if not: run the full function...</p>",
        "id": 409201365,
        "sender_full_name": "Shaiden Spreitzer",
        "timestamp": 1703083714
    },
    {
        "content": "<blockquote>\n<p>I thought concurrency was a platform issue?</p>\n</blockquote>\n<p>Kinda. Roc needs to not break when called concurrently.</p>",
        "id": 409207894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703085649
    },
    {
        "content": "<blockquote>\n<p>How is the compiler supposed to know which function to cache? </p>\n</blockquote>\n<p>You misunderstand, this is not about arbitrary functions. This is about top level constants.</p>\n<p>For example, if I write:</p>\n<div class=\"codehilite\"><pre><span></span><code>x = 127\n\ny = someFn 8\n\nsomeFn = \\num -&gt; ...\n</code></pre></div>\n<p><code>x</code> and <code>y</code> are both top level constants. In most programming languages they would be initialized before main is called.</p>",
        "id": 409208337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703085794
    },
    {
        "content": "<p>Roc doesn't control when it is called (and can not guarantee when code will run), which is why there are more complexities here.</p>",
        "id": 409208520,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703085853
    }
]