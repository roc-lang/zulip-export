[
    {
        "content": "<p>I'm having trouble compiling the following expression.  The compiler (latest) gets stuck on ', Stdout. line...', expecting a close paren.  I tried looking into the GitHub repository to see where these functions are declared and what tests are being run,  but I'm coming up short.  Does anyone see a problem with my expression below?</p>\n<div class=\"codehilite\"><pre><span></span><code>    joined_letters =\n        Env.decode!(&quot;LETTERS&quot;)\n        |&gt; Result.map_both(|letters, err| Str.join_with(letters, &quot; &quot;), Stdout.line!(${List.take_first(err, 0)}))\n        |&gt; try\n\n    Stdout.line!(&quot;Your favorite letters are: ${joined_letters}&quot;)?\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 502890550,
        "sender_full_name": "Alex Kelley",
        "timestamp": 1740942543
    },
    {
        "content": "<p>Hi Alex,</p>\n<p>I think the current issue you're facing is the <code>Stdout.line!(${List.take_first(err, 0)})</code> in the <code>map_both</code> needs to have its argument be a string: <code>Stdout.line!(\"${List.take_first(err, 0)}\")</code> (just inserted double quotes)</p>",
        "id": 502894324,
        "sender_full_name": "hchac",
        "timestamp": 1740945167
    },
    {
        "content": "<p>In terms of the program itself: are you doing a <code>List.take_first(err, 0)</code> because of the return type of <code>decode!</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>decode! :\n    Str\n    =&gt; Result val\n        [\n            VarNotFound,\n            DecodeErr DecodeError\n        ]\n    where val implements Decoding\n</code></pre></div>\n<p>Here the <code>Err</code> of Result is <code>[VarNotFound, DecodeErr DecodeError]</code>, though this looks like a <code>List</code>, it's not actually one that you access with <code>List.&lt;somefunc&gt;</code>. This is a \"list\" of Tags, but only one of these Tags is actually returned in the <code>Result</code>. This <code>[...]</code> syntax in the <code>Result</code> type is just saying that any one of these is possible to be returned (but only 1 of them will be) as the <code>Err</code>.</p>\n<p>I've changed that part of the code to the following, which is what I believe you were trying to do:</p>\n<div class=\"codehilite\"><pre><span></span><code>main! = |_args|\n    joined_letters =\n        Env.decode!(&quot;LETTERS&quot;)\n        |&gt; Result.map_both(\n            |letters|\n                Str.join_with(letters, &quot; &quot;),\n            |err|\n                err,\n        )\n        |&gt; try\n\n    Stdout.line!(&quot;Your favorite letters are: ${joined_letters}&quot;)\n</code></pre></div>\n<p>Note that <code>map_both</code> takes as its second and third arguments two separate functions, one to handle the <code>Ok</code> and another to handle the <code>Err</code>.</p>\n<p>In this scenario, you're really just modifying the Ok path with the <code>Str.join_with</code>, so you can swap out <code>map_both</code> to instead be <code>map_ok</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>    joined_letters =\n        Env.decode!(&quot;LETTERS&quot;)\n        |&gt; Result.map_ok(\n            |letters|\n                Str.join_with(letters, &quot; &quot;),\n        )\n        |&gt; try\n</code></pre></div>\n<p>And one final thing you can do, is swap out the <code>|&gt; try</code> at the end for a <code>?</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>    joined_letters =\n        Env.decode!(&quot;LETTERS&quot;)\n        |&gt; Result.map_ok(|letters| Str.join_with(letters, &quot; &quot;))?\n</code></pre></div>",
        "id": 502896256,
        "sender_full_name": "hchac",
        "timestamp": 1740946457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"881564\">@hchac</span>  Thank you very much for your explanation.  You are correct. I mistakenly thought <code>Env. decode!</code> was returning a list of errors. With that misconception cleared up, the code runs as expected.  You also reminded me that <code>?</code> can be substituted for <code>try</code>. Thanks for that, as well.  </p>\n<p>Wow! What a great community! Thanks again for taking the time to respond to my question.</p>",
        "id": 502906784,
        "sender_full_name": "Alex Kelley",
        "timestamp": 1740954662
    }
]