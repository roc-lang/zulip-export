[
    {
        "content": "<p>I started to write a parser using the modules in the <a href=\"https://github.com/roc-lang/roc/tree/main/examples/parser\">parser example</a>, and everything worked fine until I wanted to write a recursive parser. I used <code>lazy</code> to avoid the cyclic reference like I would with <code>elm/parser</code> and <code>roc check</code> returned 0 errors. However, when I run my tests, the compiler seems to stack overflow. </p>\n<p>Is this a known bug?</p>",
        "id": 376808539,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689808646
    },
    {
        "content": "<p>Here's the <a href=\"https://github.com/agu-z/roc-gql/blob/98e3264bd0c8c97efcba9831d80a1c988c54edad/src/Gql/Parser.roc#L77\">parser source</a></p>",
        "id": 376809041,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689808959
    },
    {
        "content": "<p>Weirdly, if I remove the parser type annotations, I get a different error instead of the stack overflow:</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;I thought a non-nullable-unwrapped variant for a lambda set was impossible: how could such a lambda set be created without a base case?&#39;, crates/compiler/mono/src/layout.rs:1711:61\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 376809349,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689809174
    },
    {
        "content": "<p>I know we have lots of bugs around recursive types, but I don't know if this one is unique. It probably is; if you can minimize it, can you make an issue Agus? Even if you can't minimize it, capturing a reference to the program for later would be helpful</p>",
        "id": 376829426,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689819499
    },
    {
        "content": "<p>The second is a known issue. I don't currently know of a good path forward there, but what the problem is is well known</p>",
        "id": 376829456,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689819521
    },
    {
        "content": "<p>Sounds good. I'll try to minimize it as much as possible and will open an issue later.</p>",
        "id": 376922887,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689848679
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/5682\">https://github.com/roc-lang/roc/issues/5682</a></p>",
        "id": 376986743,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689861152
    },
    {
        "content": "<p>I think I boiled it down quite a bit while keeping context</p>",
        "id": 376987007,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689861208
    },
    {
        "content": "<p>If that's not enough, let me know and I'll try to make a more abstract reproduction without any of the parser stuff</p>",
        "id": 376987155,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689861240
    },
    {
        "content": "<p>Thanks! Is it possible to get rid of the basic cli dependency and reproduce the bug only in expects? (basic-cli is a pretty big dependency.) And, are all of the expects in your example program necessary to reproduce the issue?</p>",
        "id": 376988206,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689861442
    },
    {
        "content": "<p>Good point. I started with app because I initially had all the actual parser logic but now that I don't, we don't need that.  I will just make an interface.</p>",
        "id": 376988991,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689861619
    },
    {
        "content": "<p>Updated!</p>",
        "id": 376989786,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689861761
    },
    {
        "content": "<p>thanks!</p>",
        "id": 376989966,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689861790
    },
    {
        "content": "<p>Added the abstract example which reproduces this in only a few lines. It would never make sense to run because there's no exit condition, but I think roc should still compile it.</p>",
        "id": 377001000,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1689863552
    },
    {
        "content": "<p>Ha. Found <a href=\"https://github.com/agu-z/roc-gql/commit/70a90d1962309cdf0c89b09790f09e9ce3a585d2#diff-565f51aff4d8746e9eaa49d64bde72f7456ef003e012d5aa75757ef31f965738R78-R85\">a workaround</a>! Just gotta rewrap the <code>Parser</code>.</p>",
        "id": 377685052,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1690062644
    }
]