[
    {
        "content": "<p>Just for fun, I was trying to create iterators. I know they are not planned to be in the language and I don't think they should be. I was just trying some stuff out. I was going with ocaml's <code>Seq</code> design to create possibly infinite iterators when the compiler crashed. I don't know if this is a know issue or not.</p>\n<p>I have the following file:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">interface</span><span class=\"w\"> </span><span class=\"nx\">IterMinimal</span>\n<span class=\"w\">    </span><span class=\"nx\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">Iter</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">Node</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">fromList</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">map</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">toList</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"p\">({}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"c1\"># Needs to be a tag because of recursive types</span>\n\n<span class=\"nx\">Node</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"nx\">Nil</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">Cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># ======= Sequence Generation =======</span>\n\n<span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">a</span>\n<span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Nil</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"nx\">as</span><span class=\"w\"> </span><span class=\"nx\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fromList</span><span class=\"w\"> </span><span class=\"nx\">rest</span><span class=\"p\">)</span>\n\n<span class=\"nx\">expect</span><span class=\"w\"> </span><span class=\"nx\">toList</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># ======= Sequence Transformation =======</span>\n\n<span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">(a -&gt; b) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">b</span>\n<span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">func</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">iter</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">Nil</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Nil</span>\n<span class=\"w\">            </span><span class=\"nx\">Cons</span><span class=\"w\"> </span><span class=\"nf\">(x, rest) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">func</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"nx\">rest</span><span class=\"w\"> </span><span class=\"nx\">func</span><span class=\"p\">)</span>\n\n<span class=\"nx\">expect</span><span class=\"w\"> </span><span class=\"nx\">toList</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># ======= Sequence Consumption =======</span>\n\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span>\n<span class=\"nv\">toList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">iter</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span>\n<span class=\"w\">    </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">Iter</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">acc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">Nil</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">acc</span>\n<span class=\"w\">            </span><span class=\"nx\">Cons</span><span class=\"w\"> </span><span class=\"nf\">(x, rest) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">helper</span><span class=\"w\"> </span><span class=\"nx\">rest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">acc</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">helper</span><span class=\"w\"> </span><span class=\"nx\">iter</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>\n<p>When I do <code>roc check</code> on it, nothing seems wrong. When I do <code>roc test</code>, the compiler crashed with the following message:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: duplicate function name FuncName(&quot;\\x11\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x97\\xf1\\xf2\\xd5\\xc5]C:&quot;) in module&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5744:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 408353091,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1702739977
    },
    {
        "content": "<p>Try merging iter and node into one declaration</p>",
        "id": 408353330,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702740154
    },
    {
        "content": "<p>Currently only self recursive types work, not mutually recursive</p>",
        "id": 408353375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702740205
    },
    {
        "content": "<p>Literally pasting <code>Node</code>'s definition into <code>Iter</code> does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Iter</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Iter</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"kt\">Nil</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"kt\">Cons</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Iter</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</code></pre></div>",
        "id": 408353615,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1702740374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Error.20in.20alias.20analysis.3A.20duplicate.20function.20name.20FuncName/near/408353375\">said</a>:</p>\n<blockquote>\n<p>Currently only self recursive types work, not mutually recursive</p>\n</blockquote>\n<p>Is there a plan to make mutually recursive types work?</p>",
        "id": 408353654,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1702740389
    },
    {
        "content": "<p>Just one of those long standing bugs that someone needs to track down and fix, though if this didn't fix your crash must be from something different</p>",
        "id": 408353774,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702740488
    },
    {
        "content": "<p>Also, does <code>roc check</code> say anything useful?</p>",
        "id": 408353804,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702740523
    },
    {
        "content": "<p>It checks just fine</p>",
        "id": 408354041,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1702740734
    },
    {
        "content": "<p>Hmm... I'm not sure currently</p>",
        "id": 408354153,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702740846
    },
    {
        "content": "<p>Also, interesting, due to the closure, the types work here even though they are technically mutually recursive, no need to merge definitions</p>",
        "id": 408355250,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702741863
    },
    {
        "content": "<p>Some reason, there is an issue when using the map function...not sure why</p>",
        "id": 408355629,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702742056
    },
    {
        "content": "<p>Not sure if this is useful, but probably need to file a bug.</p>\n<p>This is what happens when removing the type from map and letting the compiler try to solve for it:</p>\n<blockquote>\n<p>thread '&lt;unnamed&gt;' panicked at 'structures ( Opaque(<code>4.IdentId(0)</code>, [313], &lt;313&gt;RangedNumber( NumAtLeastEitherSign(I8))), Recursion(3394, None), )&lt;3393&gt; and ( Opaque(<code>4.IdentId(0)</code>, [313], &lt;313&gt;RangedNumber( NumAtLeastEitherSign(I8))), ['Iter' &lt;3356&gt;Func([&lt;3359&gt;EmptyRecord,], &lt;3358=3358&gt;LambdaSet([], ^&lt;3356&gt;), &lt;3357&gt;Recursion(3360, None)) , ]&lt;Any(3283)&gt;, )&lt;3362&gt; do not unify; they should never have been involved in fixing!', crates/compiler/unify/src/fix.rs:346:22<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>\n</blockquote>",
        "id": 408356046,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702742395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Error.20in.20alias.20analysis.3A.20duplicate.20function.20name.20FuncName/near/408355629\">said</a>:</p>\n<blockquote>\n<p>Some reason, there is an issue when using the map function...not sure why</p>\n</blockquote>\n<p>Yeah, I had a few tests before adding map which ran fine, maybe should have said that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 408358171,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1702744186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Error.20in.20alias.20analysis.3A.20duplicate.20function.20name.20FuncName/near/408356046\">said</a>:</p>\n<blockquote>\n<p>Not sure if this is useful, but probably need to file a bug.</p>\n<p>This is what happens when removing the type from map and letting the compiler try to solve for it:</p>\n<blockquote>\n<p>thread '&lt;unnamed&gt;' panicked at 'structures ( Opaque(<code>4.IdentId(0)</code>, [313], &lt;313&gt;RangedNumber( NumAtLeastEitherSign(I8))), Recursion(3394, None), )&lt;3393&gt; and ( Opaque(<code>4.IdentId(0)</code>, [313], &lt;313&gt;RangedNumber( NumAtLeastEitherSign(I8))), ['Iter' &lt;3356&gt;Func([&lt;3359&gt;EmptyRecord,], &lt;3358=3358&gt;LambdaSet([], ^&lt;3356&gt;), &lt;3357&gt;Recursion(3360, None)) , ]&lt;Any(3283)&gt;, )&lt;3362&gt; do not unify; they should never have been involved in fixing!', crates/compiler/unify/src/fix.rs:346:22<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace<br>\n</p>\n</blockquote>\n</blockquote>\n<p>I will do it later tonight</p>",
        "id": 408358184,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1702744201
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6290\">issue raised</a></p>",
        "id": 408359842,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1702745744
    }
]