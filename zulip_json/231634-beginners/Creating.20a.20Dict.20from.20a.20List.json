[
    {
        "content": "<p>Is there a way to create a <code>Dict</code> from a <code>List</code>? </p>\n<p>I think this is something I would find very useful particularly for creating expectations to test functions.</p>",
        "id": 305965014,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666679977
    },
    {
        "content": "<p>Maybe something like </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">list1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"one\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s2\">\"two\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"c1\"># OR</span><span class=\"w\"></span>\n\n<span class=\"n\">list2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"nc\">Dict</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"Keep Me\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s2\">\"And Me\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 305965401,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666680214
    },
    {
        "content": "<p>Wow yeah we don't appear to have that, I'm surprised! The first form would be more like what we'd support. I'd guess the only reason we don't have it is because we don't have tuple syntax yet so you have to pick a tag name like <code>Pair</code>.<br>\nYou could do it with a <code>List.walk</code> that starts with <code>Dict.empty</code> and does a <code>Dict.insert</code> in the callback function.</p>",
        "id": 305965741,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1666680399
    },
    {
        "content": "<p>I've been adding examples to the Docs. So i'm currently doing things like this, which works, but maybe could be neater.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">single</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"Keep Me\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s2\">\"And Me\"</span><span class=\"w\"></span>\n\n<span class=\"n\">second</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">single</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"Not Me\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"s2\">\"Me Too\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"s2\">\"And Also Me\"</span><span class=\"w\"></span>\n\n<span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">single</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"Keep Me\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s2\">\"And Me\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"s2\">\"Me Too\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"s2\">\"And Also Me\"</span><span class=\"w\"></span>\n\n<span class=\"n\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Dict</span><span class=\"o\">.</span><span class=\"n\">insertAll</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 305968194,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666681658
    },
    {
        "content": "<p>Interesting, I feel like that function used to exist.</p>",
        "id": 306032540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666705681
    },
    {
        "content": "<p>Oh, set has <code>fromList</code>, but dict doesn't. That's probably why I thought it existed</p>",
        "id": 306032820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666705778
    },
    {
        "content": "<p>this might be because we don't have tuples yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 306094546,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1666722270
    },
    {
        "content": "<p>which would be the obvious choices for what should go in that <code>List</code></p>",
        "id": 306094603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1666722291
    },
    {
        "content": "<p>we could do <code>List [T key value]</code> for now</p>",
        "id": 306094702,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1666722326
    },
    {
        "content": "<p>I guess when I update dict to be hash based, I can fold that in.</p>",
        "id": 306101613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666724399
    },
    {
        "content": "<p>niiiiiice - that's unblocked now, right?</p>",
        "id": 306107602,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1666726582
    },
    {
        "content": "<p>since Ayaz landed <code>Eq &amp; Hash</code></p>",
        "id": 306107649,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1666726601
    },
    {
        "content": "<p>Yep</p>",
        "id": 306114687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666729178
    },
    {
        "content": "<p>so exciting!!!</p>",
        "id": 306117127,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1666730052
    }
]