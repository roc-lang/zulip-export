[
    {
        "content": "<p>I'm attempting to make a barebones platform to help me better understand the roc building and linking process. I used basic-cli as a starting point (removing all platform functions). I can think of two key differences that I'm trying to do different from basic-cli:</p>\n<ul>\n<li>The host bin and lib are produced from a single crate (single toml file?)</li>\n<li>I'm using a shell script to build instead of build.roc. The script was made by studying build.roc.</li>\n</ul>\n<p>Link to the project: <a href=\"https://github.com/jared-cone/roctris2\">https://github.com/jared-cone/roctris2</a></p>\n<p>I'm running <code>build-app.sh</code></p>\n<p>Here's the output:</p>\n<div class=\"codehilite\"><pre><span></span><code>jared@jared-laptop:~/Home/roctris2$ ./build-app.sh\n0 errors and 0 warnings found in 183 ms\n while successfully building:\n\n    platform/libapp.so\n   Compiling libc v0.2.155\n   Compiling backtrace v0.3.69\n   Compiling host v0.0.1 (/home/jared/Home/roctris2/platform/crates/host)\n    Finished `release` profile [optimized] target(s) in 2.21s\nðŸ”¨ Rebuilding platform...\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nfailed to open file &quot;app/../platform/dynhost&quot;: No such file or directory (os error 2)\nLocation: crates/linker/src/lib.rs:552:29\n</code></pre></div>\n<p>and if I try the legacy linker:</p>\n<div class=\"codehilite\"><pre><span></span><code>jared@jared-laptop:~/Home/roctris2$ roc build --linker=legacy app/test.roc\nðŸ”¨ Rebuilding platform...\nld: /usr/lib/x86_64-linux-gnu/Scrt1.o: in function `_start&#39;:\n(.text+0x1b): undefined reference to `main&#39;\nthread &#39;main&#39; panicked at crates/compiler/build/src/program.rs:1031:17:\nnot yet implemented: gracefully handle `ld` (or `zig` in the case of wasm with --optimize) returning exit code Some(1)\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: roc_build::program::build_loaded_file\n   3: roc_build::program::build_file\n   4: roc_cli::build\n   5: roc::main\n</code></pre></div>\n<p>so where did I mess up? :)</p>",
        "id": 473024421,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727419025
    },
    {
        "content": "<p>This is complicated to answer I think. Anton and I spent a lot of time finding the right incantation to get the rust compiler to play nicely. </p>\n<p>I think if you remove the bin and just have a lib you will have a much nicer time getting this to work, but then you will be limited to the legacy linker (this may be ok for your purposes).</p>",
        "id": 473032033,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727421373
    },
    {
        "content": "<p>Yep I'm fine with legacy linker. Currently when I build it produces a bin and a lib. I don't know rust: is that lib the same that would be produced as a lib that's in its own crate?</p>",
        "id": 473032498,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727421531
    },
    {
        "content": "<p>I think the issues stem from the way we do linking currently and unique things with the rust compiler. I've seen it work this way though, if you checkout the <code>examples/platform-switching/rust-platform</code> in the repo, there is an example. Though this uses a <code>host.c</code> to do something intermediate.</p>",
        "id": 473032506,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727421532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481285\">Jared Cone</span> <a href=\"#narrow/stream/231634-beginners/topic/failed.20to.20open.20file.20.22app.2F.2E.2E.2Fplatform.2Fdynhost.22/near/473032498\">said</a>:</p>\n<blockquote>\n<p>Yep I'm fine with legacy linker. Currently when I build it produces a bin and a lib. I don't know rust: is that lin the same that would be produced as a lib that's in its own crate?</p>\n</blockquote>\n<p>If you're fine with just the legacy linker, it get's much easier.</p>",
        "id": 473032560,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727421562
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/lukewilliamboswell/basic-ssg\">https://github.com/lukewilliamboswell/basic-ssg</a> is another Rust platform that is much simpler and supports cross-compilation to build for all the supported roc targets.</p>",
        "id": 473033324,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727421896
    },
    {
        "content": "<p>Thanks Luke! We got it sorted using the legacy linker.</p>",
        "id": 473124913,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727447514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481285\">Jared Cone</span> has marked this topic as resolved.</p>",
        "id": 473271126,
        "sender_full_name": "Notification Bot",
        "timestamp": 1727491709
    }
]