[
    {
        "content": "<p>Having watched Richard's talks on Roc and having read through the tutorial, I got the impression that Roc did not support tuples. After peeking in the Dict.roc implementation I was surprised to discover that they are a working feature in the language! I understand wanting to discourage the use of tuples when records serve all the same purposes while being necessarily more descriptive, just as using <code>Bool</code> is discouraged when custom tag unions are much better at communicating intent. Given this, I'm curious as to why tuples exist in the language at all?</p>",
        "id": 374053423,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689014359
    },
    {
        "content": "<p>As a follow-up, the Roc repl seems to annotate tuples with an asterisk (e.g: <code>(Nat, Nat)*</code>) just like growable records are. Does this imply tuples can accumulate fields as well? Or are tuples simply syntax sugar for records with unnamed fields?</p>",
        "id": 374054148,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689014546
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"625912\">@Sven van Caem</span> :)</p>\n<blockquote>\n<p>I'm curious as to why tuples exist in the language at all?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/304641-ideas/topic/tuple.20syntax/near/267198431\">This</a> is the origin discussion for the current tuples.</p>",
        "id": 374207575,
        "sender_full_name": "Anton",
        "timestamp": 1689070451
    },
    {
        "content": "<blockquote>\n<p>As a follow-up, the Roc repl seems to annotate tuples with an asterisk (e.g: <code>(Nat, Nat)*</code>) just like growable records are. Does this imply tuples can accumulate fields as well? Or are tuples simply syntax sugar for records with unnamed fields?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> should know this one</p>",
        "id": 374210754,
        "sender_full_name": "Anton",
        "timestamp": 1689070998
    },
    {
        "content": "<p>Thanks for the link!</p>",
        "id": 376092184,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689610627
    },
    {
        "content": "<p>If I'm following along correctly, I'm getting that tuple types are extensible to allow for functions like .1 to work on tuples of length 2 or greater, and so forth</p>",
        "id": 376092766,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689610706
    },
    {
        "content": "<p>When I tried to get the type signatures of <code>.0</code>, <code>.1</code>, etc I got the following result:</p>",
        "id": 376093511,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689610800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>» .0 : ( a )* -&gt; a\n\n» .1 : ( a )* -&gt; a\n\n» .2 : ( _, _, a )* -&gt; a\n\n» .3 : ( _, _, _, a )* -&gt; a\n</code></pre></div>",
        "id": 376093672,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689610812
    },
    {
        "content": "<p>Just looking at it, I'd expect <code>.1</code> to have the type <code>( _, a )*</code></p>",
        "id": 376094104,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689610864
    },
    {
        "content": "<p>What am I missing here?</p>",
        "id": 376095056,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1689610991
    },
    {
        "content": "<p>Probably a copy paste bug if I had to guess. Given the type is built into the compiler, it probably has special code for generating that signature.</p>",
        "id": 376132104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689619655
    },
    {
        "content": "<p>I've filed issue <a href=\"https://github.com/roc-lang/roc/issues/5676\">#5676</a> for this.</p>",
        "id": 376264849,
        "sender_full_name": "Anton",
        "timestamp": 1689669120
    }
]