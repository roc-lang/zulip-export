[
    {
        "content": "<p>I have had a bit of trouble with optional record fields: Frequently it seems that when I try to leave optional fields out of a record passed to a function whose argument is a record with optional fields, the compiler complains that the optional fields are missing.</p>\n<p>For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>90│  expect numDaysSinceEpoch {year: 2024} == 19723\n                              ^^^^^^^^^^^^\nThe argument is a record of type:\n    { … }\n\nBut numDaysSinceEpoch needs its 1st argument to be:\n    {\n        day : Int Unsigned64,\n        month : Int Unsigned64,\n        …\n    }\nTip: Looks like the day and month fields are missing.\n</code></pre></div>\n<p>My code looks like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">numDaysSinceEpoch</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">year</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">month</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">day</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">U64</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">U64</span>\n<span class=\"nv\">numDaysSinceEpoch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"nx\">year</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">month</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">day</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">numLeapYears</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">numLeapYearsSinceEpoch</span><span class=\"w\"> </span><span class=\"nx\">year</span><span class=\"w\"> </span><span class=\"nx\">ExcludeCurrent</span>\n<span class=\"w\">    </span><span class=\"nv\">daysInYears</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">numLeapYears</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">366</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">year</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">epochYear</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">numLeapYears</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">365</span>\n<span class=\"w\">    </span><span class=\"nv\">isLeap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">isLeapYear</span><span class=\"w\"> </span><span class=\"nx\">year</span>\n<span class=\"w\">    </span><span class=\"nv\">daysInMonths</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">sum</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">At</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Before</span><span class=\"w\"> </span><span class=\"nx\">month</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">mapMonth</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">unwrap</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">monthDays</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">month</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">mapMonth</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">isLeap</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"s\">\"numDaysSinceEpochToYMD: Invalid month\"</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">daysInYears</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">daysInMonths</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">day</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"nx\">expect</span><span class=\"w\"> </span><span class=\"nx\">numDaysSinceEpoch</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">year</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">19723</span><span class=\"w\">  </span><span class=\"c1\"># line 90</span>\n</code></pre></div>\n<p>What gives here? Is my syntax incorrect?</p>",
        "id": 417703964,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1706121107
    },
    {
        "content": "<p>So I think we have a bug in specialization or something of that nature.</p>",
        "id": 417706027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706121880
    },
    {
        "content": "<p>As in I feel like I have seen this before but never minimized</p>",
        "id": 417706047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706121892
    },
    {
        "content": "<p>With optional record fields, we seem to only generate one version of a function. It is based on the first way that the function is called.</p>",
        "id": 417706128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706121924
    },
    {
        "content": "<p>Do you also use that function as <code>{year, month, day}</code>, if you comment that call out does that fix things?</p>",
        "id": 417706196,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706121949
    },
    {
        "content": "<p>I need to mess around with this at some point, but I think there should be a really small reproducer.</p>",
        "id": 417706299,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706121975
    },
    {
        "content": "<p>But yeah, a bug.</p>",
        "id": 417706308,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706121978
    },
    {
        "content": "<p>It does not fix things actually. If I comment it out the compiler panics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">Error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">analysis</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">ModName</span><span class=\"p\">(</span><span class=\"s\">\"UserApp\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"n\">FuncName</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\x11\\x00\\x00\\x00\\x02\\x00\\x00\\x00</span><span class=\"s\">\\xcbr?</span><span class=\"se\">\\x05</span><span class=\"s\">\\x92\\xae</span><span class=\"se\">\\x19</span><span class=\"s\">\\x92\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">binding</span><span class=\"w\"> </span><span class=\"n\">ValueId</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">'</span><span class=\"p\">(((),</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()),)</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">'</span><span class=\"p\">((),)</span><span class=\"o\">''</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">gen_llvm</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">llvm</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">5761</span>:<span class=\"mi\">19</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>",
        "id": 417706422,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1706122026
    },
    {
        "content": "<p>I am going to find a work around in code, but have branched my code <a href=\"https://github.com/imclerran/iso-roc-date/tree/error-in-alias-analysis\">here</a> to make it available for anyone trying to resolve the issue (once I get it filed).</p>",
        "id": 417707158,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1706122294
    },
    {
        "content": "<p>I'll try to figure out a minimal repro for the feature later today and file a bug.</p>",
        "id": 417707287,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706122329
    },
    {
        "content": "<p>Btw, the compiler panic can be resolved by changing:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">numDaysSinceEpochToYear</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">year</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">numDaysSinceEpoch</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">year</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>to:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">numDaysSinceEpochToYear</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">year</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">numDaysSinceEpoch</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">year</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">month</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">day</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 417707797,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1706122547
    },
    {
        "content": "<p>min repro was easy to make and is here: <a href=\"https://github.com/roc-lang/roc/issues/6423\">https://github.com/roc-lang/roc/issues/6423</a></p>",
        "id": 417708724,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706122877
    },
    {
        "content": "<p>Here's a previous thread about this bug: <a href=\"#narrow/stream/231634-beginners/topic/open.2Fclosed.20record.20type.20inferance\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/open.2Fclosed.20record.20type.20inferance</a></p>\n<p><span class=\"user-mention\" data-user-id=\"518883\">@Ian McLerran</span> this bug has to do with type inference for closed record types. Open records should type-check correctly, so one workaround is to add a <code>*</code> to the record type to make it open</p>\n<div class=\"codehilite\"><pre><span></span><code>numDaysSinceEpoch: {year: U64, month? U64, day? U64}* -&gt; U64\n</code></pre></div>",
        "id": 418877549,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1706632542
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"586417\">@Elias Mulhall</span>, that's good information to have. Moving to open record types is a great fix until the compiler bug is resolved. No reason not to allow open records here.</p>",
        "id": 418889390,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1706636459
    },
    {
        "content": "<p>There's definitely a trade-off -- with an open record you won't get an error message for <code>numDaysSinceEpoch {year: 1990, mnth: 5 }</code>. But that's better than the bug <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 418889852,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1706636633
    },
    {
        "content": "<p>Ah yeah, great point. Maybe I will stick to passing in the optional fields, and leave the API the same to keep the sound error checking.</p>",
        "id": 418892929,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1706637734
    },
    {
        "content": "<p>I'm running into this issue, too, and I don't understand how to proceed.</p>\n<p>This is the repro code:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;reproduction&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.8.1/x8URkvfyi9I0QhmVG98roKBUs_AZRkLFwFJVJ3942YA.tar.br&quot;,\n    }\n    imports [pf.Stdout, pf.Task.{ Task }]\n    provides [main] to pf\n\nXml : {\n    xmlDeclaration ? Str,\n    root : Str,\n}\n\nmain : Task {} I32\nmain =\n    root = &quot;root&quot;\n    xmlDeclarationParserResult = Ok &quot;xmlDeclaration&quot;\n\n    xml : Xml\n    xml =\n        when xmlDeclarationParserResult is\n            Ok xmlDeclaration -&gt;\n                { xmlDeclaration, root }\n\n            _ -&gt;\n                { root }\n\n    Stdout.line &quot;Testing&quot;\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>jojo@Windows-PC:~/code/feed-reader/backend$ roc check Repro.roc\n\n── TYPE MISMATCH in Repro.roc ──────────────────────────────────────────────────\n\nSomething is off with the 2nd branch of this when expression:\n\n18│       xml : Xml\n19│       xml =\n20│&gt;          when xmlDeclarationParserResult is\n21│&gt;              Ok xmlDeclaration -&gt;\n22│&gt;                  { xmlDeclaration, root }\n23│&gt;\n24│&gt;              _ -&gt;\n25│&gt;                  { root }\n\nThe 2nd branch is a record of type:\n\n    { … }\n\nBut the type annotation on xml says it should be:\n\n    { xmlDeclaration : Str, … }\n\nTip: Looks like the xmlDeclaration field is missing.\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 1 warning found in 37 ms\n</code></pre></div>",
        "id": 423171715,
        "sender_full_name": "Johannes Maas",
        "timestamp": 1708782735
    },
    {
        "content": "<p>This is a possible workaround:</p>\n<div class=\"codehilite\"><pre><span></span><code>Xml : {\n    declaration : [Some Str, None],\n    root : Str,\n}\n\nmain : Task {} I32\nmain =\n    root = &quot;root&quot;\n    xmlDeclarationParserResult = Ok &quot;xmlDeclaration&quot;\n\n    xml : Xml\n    xml =\n        when xmlDeclarationParserResult is\n            Ok xmlDeclaration -&gt;\n                { declaration: Some xmlDeclaration, root }\n\n            _ -&gt;\n                { declaration: None, root }\n\n    Stdout.line &quot;Testing&quot;\n</code></pre></div>",
        "id": 423175967,
        "sender_full_name": "Anton",
        "timestamp": 1708785774
    },
    {
        "content": "<p>Because this is a bug in closed record types, one solution is to make the record open. The way to do that is a bit goofy</p>\n<div class=\"codehilite\"><pre><span></span><code>Xml a : { ... }a\n\nxml : Xml *\n</code></pre></div>",
        "id": 423185948,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1708792470
    },
    {
        "content": "<p>Hah, I tried to do the same thing but got stuck, I didn't have a space between <code>Xml</code> and <code>*</code></p>",
        "id": 423187786,
        "sender_full_name": "Anton",
        "timestamp": 1708793558
    },
    {
        "content": "<p>I'm guessing I was reaching for the optional field where I shouldn't have been. I think Anton's proposal with the tag union is the better way to represent the optionality of the declaration.</p>",
        "id": 423210974,
        "sender_full_name": "Johannes Maas",
        "timestamp": 1708815659
    },
    {
        "content": "<p>I'm coming to this conclusion after rereading the section about optional fields in the Roc for Elm programmers guide. It mentions that optional fields are specifically for config options passend into functions whereas this is a data type with an optional field.</p>",
        "id": 423211083,
        "sender_full_name": "Johannes Maas",
        "timestamp": 1708815748
    }
]