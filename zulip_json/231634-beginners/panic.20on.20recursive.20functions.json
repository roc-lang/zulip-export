[
    {
        "content": "<p>Hi,<br>\nI can't understand why my program is panicking, could you help me?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span>\n\n<span class=\"nv\">displayBlock</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"{}\"</span>\n<span class=\"w\">        </span><span class=\"nv\">w</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"{ $(displayWidget w) }\"</span>\n\n<span class=\"nv\">displayGroup</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"s\">\"[$(group.widgets |&gt; List.map displayWidget |&gt; Str.joinWith \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\")]\"</span>\n\n<span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"nv\">block</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"block $(displayBlock block)\"</span>\n<span class=\"w\">        </span><span class=\"kt\">Group</span><span class=\"w\"> </span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"group $(displayGroup group)\"</span>\n<span class=\"w\">        </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">works</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"p\">{}))</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Group</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widgets</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Group</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widgets</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">fails</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">panic</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5764:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\xb4e[-\\xa6\\x8d\\x12P&quot;), definition of value binding ValueId(4): expected type &#39;(&quot;UserApp&quot;::&quot;\\xbf\\xb4\\xe0\\xb0\\xed\\x84F\\x9d&quot;,)&#39;, found type &#39;((),)&#39;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 445452394,
        "sender_full_name": "Ghislain",
        "timestamp": 1718741816
    },
    {
        "content": "<p>I think the compiler is confused trying to figure out the types and you have a bug with type definitions</p>",
        "id": 445458382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718743732
    },
    {
        "content": "<p>I'm pretty sure that <code>Block { widget: Block {} }</code> is an impossible type*.</p>",
        "id": 445458534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718743784
    },
    {
        "content": "<p>Cause a block takes a record that contains a widget, but the inner block is taking an empty record</p>",
        "id": 445458685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718743820
    },
    {
        "content": "<p>That said, the types in this program are extra strange. I think that the compiler is generating two different versions of <code>Block</code>, but they can't be used together.</p>",
        "id": 445458912,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718743893
    },
    {
        "content": "<p>I would try to explictly write out the types, I think that will reveal the issues.</p>\n<p>My current guess as to the types is:</p>\n<div class=\"codehilite\"><pre><span></span><code>Widget : [\n  Block {widget: Widget},\n  Group (List Widget),\n  None\n]\n</code></pre></div>\n<p>Note, that type does not include <code>Block {}</code>.</p>",
        "id": 445459428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718744047
    },
    {
        "content": "<p>I'm honestly a bit surprised these two lines compile together:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Stdout.line! (displayWidget (Block {}))\n    Stdout.line! (displayWidget (Block { widget: Group { widgets: [] } }))\n</code></pre></div>",
        "id": 445459790,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718744168
    },
    {
        "content": "<p>Looking at the ir, this compiles cause roc is generating two distinct versions of <code>displayWidget</code> that accept different types.</p>",
        "id": 445460150,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718744323
    },
    {
        "content": "<p>One version accepts the <code>Widget</code> type I specified above.</p>\n<p>The other accepts the version with <code>Block {}</code> as a variant</p>",
        "id": 445460289,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718744371
    },
    {
        "content": "<p>Thank you for your reply, I tried with your type (a bit modified to have a record) and I get compiler issue this time:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span>\n\n<span class=\"kt\">Widget</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Widget</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"kt\">Group</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widgets</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Widget</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"kt\">None</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"nv\">displayBlock</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"{}\"</span>\n<span class=\"w\">        </span><span class=\"nv\">w</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"{ $(displayWidget w) }\"</span>\n\n<span class=\"nv\">displayGroup</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"s\">\"[$(group.widgets |&gt; List.map displayWidget |&gt; Str.joinWith \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\")]\"</span>\n\n<span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Widget</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"nv\">block</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"block $(displayBlock block)\"</span>\n<span class=\"w\">        </span><span class=\"kt\">Group</span><span class=\"w\"> </span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"group $(displayGroup group)\"</span>\n<span class=\"w\">        </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"unknown\"</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">displayWidget</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Block</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">widget</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/layout.rs:1589:17:\nno lambda set found for (`17.IdentId(4)`, []): LambdaSet {\n    set: [],\n    args: [\n        InLayout(\n            91,\n        ),\n    ],\n    ret: InLayout(STR),\n    representation: InLayout(VOID),\n    full_layout: InLayout(\n        103,\n    ),\n}\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 445461526,
        "sender_full_name": "Ghislain",
        "timestamp": 1718744747
    },
    {
        "content": "<p>Hmm....definitely a compiler bug. I'm really not sure the cause.</p>",
        "id": 445463427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718745395
    },
    {
        "content": "<p>Some reason commenting out the type is a workaround</p>",
        "id": 445463463,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718745410
    }
]