[
    {
        "content": "<p>hello</p>\n<p>so, the type of <code>[]</code> is <code>List *</code> means <code>*</code> denotes bottom type</p>",
        "id": 326743815,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675927041
    },
    {
        "content": "<p>but also</p>\n<div class=\"codehilite\"><pre><span></span><code>isEmpty : List * -&gt; Bool\n</code></pre></div>\n<blockquote>\n<p>The * is a wildcard type; a type that's compatible with any other type. List * is compatible with any type of List like List Str, List Bool, and so on.</p>\n</blockquote>",
        "id": 326744133,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675927157
    },
    {
        "content": "<p>so that means * is also the top type?</p>",
        "id": 326744238,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675927190
    },
    {
        "content": "<p>let's see. </p>\n<ul>\n<li>a top type would be a terminal object, so it has arrows from any object (type) into it. Usually we'd pick the empty record <code>{}</code> for this type</li>\n<li>a bottom type is an initial object; for any object (type), there is an arrow from the bottom type to that type. This type is variously called Void (haskell) or Never (elm, rust). In roc it is written as the empty tag union <code>[]</code></li>\n</ul>",
        "id": 326796649,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944156
    },
    {
        "content": "<p>the <code>*</code> is a forall-quantified type variable. The signature is really <code>isEmpty : forall a. List a -&gt; Bool</code></p>",
        "id": 326796718,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944178
    },
    {
        "content": "<p>within the implementation of <code>isEmpty</code>, that means you have no concrete information about what type of elements are in the list (and to implement that function, you don't care)</p>",
        "id": 326796928,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944228
    },
    {
        "content": "<p>then the type of <code>[]</code> should be <code>List []</code>, not <code>List *</code>, no?</p>",
        "id": 326797300,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675944336
    },
    {
        "content": "<p>but certainly, we cannot construct (within the body) a function <code>forall b. b -&gt; a</code>. We don't have any value of type <code>a</code> that we can make out of thin air</p>",
        "id": 326797312,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944341
    },
    {
        "content": "<p>likewise, we cannot create <code>forall b. a -&gt; b</code>, because we can also not create a value of any type <code>b</code> out of thin air</p>",
        "id": 326797444,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944367
    },
    {
        "content": "<p>hence a forall-quantified variable is neither top nor bottom</p>",
        "id": 326797497,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944385
    },
    {
        "content": "<p>well, that is valid, but not very helpful in practice</p>",
        "id": 326797546,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944401
    },
    {
        "content": "<p>say I want to do <code>List.append [] 42</code></p>",
        "id": 326797590,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944420
    },
    {
        "content": "<p>then if the empty list had type <code>List []</code>, we'd get a type error here</p>",
        "id": 326797654,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944440
    },
    {
        "content": "<p>because <code>42</code> does not have type <code>[]</code></p>",
        "id": 326797704,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944457
    },
    {
        "content": "<p>so in type inference, the type of the list is left variable</p>",
        "id": 326797853,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944495
    },
    {
        "content": "<p>however, when we go to monomorphize, we have to pick an actual concrete type in that position</p>",
        "id": 326797910,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944515
    },
    {
        "content": "<p>and there our choice is free. Any type will do, that is what the signature says!</p>",
        "id": 326797980,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944537
    },
    {
        "content": "<p>in practice picking <code>{}</code> is usually the most convenient choice</p>",
        "id": 326798097,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944582
    },
    {
        "content": "<p>can it work with <code>List.append 42 []</code>?</p>",
        "id": 326798206,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675944613
    },
    {
        "content": "<p>can what work with <code>List.append [] 42</code> (in roc, the data structure is usually the first argument)?</p>",
        "id": 326798445,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1675944702
    },
    {
        "content": "<p>ah I see, ok</p>",
        "id": 326798822,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675944808
    },
    {
        "content": "<p>I guess, that the <code>*</code> has different meaning on the left vs. on the right,  is what makes it confusing here.</p>\n<p>if we are to e.g. make <code>*</code> to <code>Anything</code> on the left, and <code>Nothing</code> on the right, it would be much clearer.</p>",
        "id": 326799523,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675945058
    },
    {
        "content": "<p>the confusion is even in the tutorial</p>\n<blockquote>\n<p>so we might think the type of List.reverse would be reverse : List * -&gt; List *. However, remember that we also saw that the type of the empty list is List *? List * -&gt; List * is actually the type of a function that always returns empty lists! That's not what we want.</p>\n</blockquote>",
        "id": 326799694,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675945102
    },
    {
        "content": "<p>e.g. imagine if it's <code>List Anything -&gt; List Nothing</code>, much clearer</p>",
        "id": 326799909,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1675945172
    },
    {
        "content": "<p>Probably that section in the tutorial should be reworded. List * -&gt; List * is a function that accepts lists of any type (easy) and produces a list of any type you want (impossible to satisfy, except by producing the empty list).</p>\n<p>Roc doesn’t have a hierarchy of types, so there aren’t really top/bottom types - maybe we can find a way to make thinking about them in that way more meaningful though.</p>",
        "id": 326826533,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1675952079
    },
    {
        "content": "<p>if it helps, <code>List * -&gt; List *</code> is syntax sugar for <code>List a -&gt; List b</code></p>",
        "id": 326926567,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675980846
    },
    {
        "content": "<p>because in the general case, <code>*</code> is syntax sugar for \"a type variable whose name appears nowhere else in this type annotation\"</p>",
        "id": 326926612,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675980873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/is.20*.20top.20or.20bottom.20type.3F/near/326926612\">said</a>:</p>\n<blockquote>\n<p>because in the general case, <code>*</code> is syntax sugar for \"a type variable whose name appears nowhere else in this type annotation\"</p>\n</blockquote>\n<p>That'd be useful wording to have in tutorials</p>",
        "id": 328143738,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1676514409
    },
    {
        "content": "<p>Thanks for pointing that out <span class=\"user-mention\" data-user-id=\"483789\">@Kevin Gillette</span> I'll make an issue and add in my next go at the tutorial.</p>",
        "id": 328157735,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1676526122
    }
]