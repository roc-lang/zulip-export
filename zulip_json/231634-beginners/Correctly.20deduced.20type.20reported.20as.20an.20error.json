[
    {
        "content": "<p>Context: I felt like trying out roc by building the <a href=\"https://raytracing.github.io/books/RayTracingInOneWeekend.html\">raytracing in a weekend thing</a> (which I've done in a couple of other languages). </p>\n<p>An early step is defining your own three-dimensional vector type and a bunch of helper functions.  I was playing around to see if I could build it using just a few number of fundamental algorithms, like <code>map</code>, <code>walk</code> and <code>lift</code>, when I came upon what I believe to be a bug as I wrote the dot product helper function. Could just as well be me misusing/misunderstanding the type system.</p>\n<p>Anyway, the offending code looks like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>Vec3 a := { x: Num a, y: Num a, z: Num a }\n\nwalk : Vec3 a, (b, Num a -&gt; b), b -&gt; b\nwalk = \\@Vec3{x,y,z}, fn, init -&gt;\n    init |&gt; fn x |&gt; fn y |&gt; fn z\n\n## make an elementwise Vec3 version of a binary function\nlift2 : (Num a,Num a -&gt; Num a) -&gt; (Vec3 a, Vec3 a -&gt; Vec3 a)\nlift2 = \\binaryFn -&gt;\n    \\@Vec3 u, @Vec3 v -&gt;\n        @Vec3{\n            x: binaryFn u.x v.x,\n            y: binaryFn u.y v.y,\n            z: binaryFn u.z v.z\n        }\n\nmul : Vec3 a, Vec3 a -&gt; Vec3 a\nmul = lift2 Num.mul\n\ndot : Vec3 a -&gt; Num a\ndot = \\vec -&gt;\n    mul vec vec |&gt; walk Num.add 0\n</code></pre></div>\n<p>and produces the following compiler error</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ──────────────────────────────────────────────────── Vec3.roc ─\n\nThis 1st argument to mul has an unexpected type:\n\n79│      mul vec vec |&gt; walk Num.add 0\n             ^^^\n\nThis vec value is a:\n\n    Vec3 a\n\nBut mul needs its 1st argument to be:\n\n    Vec3 a\n\n\n── TYPE MISMATCH ──────────────────────────────────────────────────── Vec3.roc ─\n\nSomething is off with the body of the dot definition:\n\n77│  dot : Vec3 a -&gt; Num a\n78│  dot = \\vec -&gt;\n79│      mul vec vec |&gt; walk Num.add 0\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis walk call produces:\n\n    Num a\n\nBut the type annotation on dot says it should be:\n\n    Num a\n</code></pre></div>\n<p>the dot product could also be written as </p>\n<div class=\"codehilite\"><pre><span></span><code>dot : Vec3 a -&gt; Num a\ndot = \\@Vec3 {x,y,z} -&gt; x*x + y*y + z*z\n</code></pre></div>",
        "id": 407590307,
        "sender_full_name": "Hannes Carlsson",
        "timestamp": 1702424050
    },
    {
        "content": "<p>I think you are correct, looks like a compiler bug. Also looks like a pretty well contained issues. Could you file an issue on GitHub?</p>",
        "id": 407594468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702426529
    },
    {
        "content": "<p>Nice project. I know <span class=\"user-mention\" data-user-id=\"452038\">@Shritesh Bhattarai</span> also had some fun doing that. <a href=\"https://github.com/shritesh/raytrace.roc\">https://github.com/shritesh/raytrace.roc</a></p>",
        "id": 407605642,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702431119
    }
]