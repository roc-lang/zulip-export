[
    {
        "content": "<p>I wondered what was the reason that the first expression worked while the second one received an error . <a href=\"/user_uploads/22008/hs0jdqpw_f4FxxDKTvehTTil/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/hs0jdqpw_f4FxxDKTvehTTil/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/hs0jdqpw_f4FxxDKTvehTTil/image.png\"></a></div>",
        "id": 346738259,
        "sender_full_name": "Audrey Gao",
        "timestamp": 1680587869
    },
    {
        "content": "<p>I think it is a bug in the wasm dev backend.</p>",
        "id": 346741570,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1680589267
    },
    {
        "content": "<p>Interesting that changing from <code>List.dropAt x 0</code> to <code>List.dropFirst x</code> fixes it.</p>\n<p>EDIT: This is actually extra confusing cause <code>List.dropFirst</code> is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">dropAt</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 346742124,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1680589493
    },
    {
        "content": "<p>Also, I get a slightly different error, which might be useful as context for someone: <code>JsValue(CompileError: wasm validation error: at offset 18988: popping value from empty stack)</code></p>",
        "id": 346742323,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1680589584
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> this works for me in <code>roc repl</code> on the command line</p>",
        "id": 346818261,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680607979
    },
    {
        "content": "<p>so yeah, probably a bug in the wasm dev backend</p>",
        "id": 346818451,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680608017
    },
    {
        "content": "<p>but I agree that I'm not sure what it would be, given how <code>dropFirst</code> is defined <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 346818491,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680608026
    },
    {
        "content": "<p>My gut feeling is it is somehow refcount/memory related. Maybe even a bug related to freeing a seamless slice, but that is definitely guessing.</p>",
        "id": 346879639,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1680619888
    },
    {
        "content": "<p>Thanks for the information!</p>",
        "id": 347021957,
        "sender_full_name": "Audrey Gao",
        "timestamp": 1680670959
    },
    {
        "content": "<p>OK this is weird. The following tests passes for the Wasm backend if I insert it into <a href=\"http://gen_list.rs\">gen_list.rs</a><br>\nAnd remember that tests are wrapped in a <code>main</code> function in the same way as REPL inputs are.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">zulip_issue</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">assert_evals_to</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">r#\"</span>\n<span class=\"s\">        x = [1,2,3]</span>\n<span class=\"s\">        tl = List.dropAt x 0</span>\n<span class=\"s\">        if Bool.true then [] else tl</span>\n<span class=\"s\">        \"#</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">RocList</span>::<span class=\"n\">empty</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">i64</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 347244600,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680725136
    },
    {
        "content": "<p>Also if I print out the IR after refcount insertion, this is what I get</p>\n<div class=\"codehilite\"><pre><span></span><code>procedure : `#UserApp.main` List I64\nprocedure = `#UserApp.main` ():\n    let `#UserApp.x` : List I64 = Array [1i64, 2i64, 3i64];\n    let `#UserApp.6` : U32 = 0i64;\n    let `#UserApp.tl` : List I64 = CallByName `List.dropAt` `#UserApp.x` `#UserApp.6`;\n    let `#UserApp.4` : Int1 = CallByName `Bool.true`;\n    if `#UserApp.4` then\n        dec `#UserApp.tl`;\n        let `#UserApp.5` : List I64 = Array [];\n        ret `#UserApp.5`;\n    else\n        ret `#UserApp.tl`;\n\nprocedure : `List.dropAt` List I64\nprocedure = `List.dropAt` (`#Attr.#arg1`: List I64, `#Attr.#arg2`: U32):\n    let `List.494` : List I64 = lowlevel ListDropAt `#Attr.#arg1` `#Attr.#arg2`;\n    ret `List.494`;\n\nprocedure : `Bool.true` Int1\nprocedure = `Bool.true` ():\n    let `Bool.23` : Int1 = true;\n    ret `Bool.23`;\n</code></pre></div>",
        "id": 347244909,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680725245
    },
    {
        "content": "<p>There's just one decrement in the <code>then</code> branch</p>",
        "id": 347245056,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680725293
    },
    {
        "content": "<p>Flipping the <code>if</code> branches around moves the decrement to the branch that's not taken</p>",
        "id": 347245352,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680725418
    },
    {
        "content": "<p>OK I managed to extract a .wasm file from the browser.<br>\nThe wasm instruction stream is invalid at the point where it calls the refcount decrement.</p>",
        "id": 347247177,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680726250
    },
    {
        "content": "<p>OK I figured out what's wrong. The backend tries to keep track of what's on the Wasm stack machine at each point in the program. In this example, our model of the stack machine goes wrong and we end up generating invalid Wasm instructions! This is the hardest part of the wasm backend. <span aria-label=\"sweating\" class=\"emoji emoji-1f975\" role=\"img\" title=\"sweating\">:sweating:</span></p>",
        "id": 347252543,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680728338
    }
]