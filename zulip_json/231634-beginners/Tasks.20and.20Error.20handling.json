[
    {
        "content": "<p>Hi, new here and trying to figure out some error handling.</p>\n<p>My advent of code for 2022 day 01:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;day01&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.6.0/QOQW08n38nHHrVVkJNiPIjzjvbR3iMjXeFY5w1aT46w.tar.br&quot; }\n    imports [pf.Stdout, pf.Stderr, pf.Task, pf.File, pf.Path]\n    provides [main] to pf\n\ninputPath = &quot;day01.txt&quot;\n\nmain =\n    input &lt;- File.readUtf8 (Path.fromStr &quot;input/\\(inputPath)&quot;) |&gt; Task.attempt\n    when input is\n        Ok in -&gt; when part01 in is\n            Ok out -&gt; Num.toStr out |&gt; Stdout.line\n            Err e -&gt; when e is\n                InvalidNumStr -&gt; Stderr.line &quot;Error running part01 for \\(inputPath), invalid num str&quot;\n                ListWasEmpty -&gt; Stderr.line &quot;Error running part01 for \\(inputPath), ListWasEmpty&quot;\n        Err _e -&gt; Stderr.line &quot;Error running part01 for \\(inputPath), no file&quot;\n\npart01 : Str -&gt; Result U64 [InvalidNumStr, ListWasEmpty]\npart01 = \\input -&gt;\n    parsed &lt;- Str.trim input\n        |&gt; Str.split &quot;\\n\\n&quot;\n        |&gt; List.mapTry (\\xs -&gt; Str.split xs &quot;\\n&quot; |&gt; List.mapTry Str.toU64)\n        |&gt; Result.try\n    List.map parsed List.sum |&gt; List.max\n</code></pre></div>\n<p>Questions:</p>\n<ul>\n<li>Did I miss a way to easily print out tags?</li>\n<li>I found <code>mapTry</code> and <code>Result.try</code>, are these the best way to \"bubble up\" errors?</li>\n<li>Is there a way to compress my <code>main</code> fn so that I can have just one pattern match for all errors? There's probably something straightforward, but I ran out of steam after figuring out the <code>try</code> stuff.</li>\n<li>a comment: would be nice to have more of a tutorial on error handling. Perhaps I missed this, I had a quick look in the tutorial and in the examples repo. Oh, and also more examples on the interaction between <code>Task</code> and <code>Result</code>.</li>\n</ul>",
        "id": 404696968,
        "sender_full_name": "walther",
        "timestamp": 1701197719
    },
    {
        "content": "<p>Check out <a href=\"https://www.roc-lang.org/examples/Tasks/README.html\">https://www.roc-lang.org/examples/Tasks/README.html</a>. It's only just been updated to hopefully assist with this. Would love to know if it helps you.</p>",
        "id": 404697395,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701197851
    },
    {
        "content": "<p>Maybe we should rename this now to \"Tasks and Error Handling\" now it has a slightly bigger emphasis on errors and might make it easier to find?</p>",
        "id": 404700187,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701198692
    },
    {
        "content": "<p>We could also maybe link to this example in the Tutorial, at the end of the tasks section too.</p>",
        "id": 404703157,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701199609
    },
    {
        "content": "<p>Thanks for the link. I'd actually skimmed the PR before, but took a closer look now.</p>\n<p>It looks like <code>Task.await</code> is one of the things I'm looking for. It has the same feeling of \"bubbling up\" as <code>Result.try</code>. Instead of using <code>Task.attempt</code> and pattern matching immediately.</p>\n<p>One of the things I was missing, and which I don't think is in the Tasks example, is <code>Task.fromResult</code>. I'm guessing this should be pretty commonly used? Or perhaps there's a better way to compose <code>Result</code> and <code>Task</code>. I updated my code, lmk if there's still something to be improved.</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    run |&gt; Task.onErr handleErr\n\nrun : Task.Task {} [FileReadErr, InvalidNumStr, ListWasEmpty]\nrun =\n    input &lt;- File.readUtf8 (Path.fromStr &quot;input/\\(inputPath)&quot;)\n        |&gt; Task.mapErr \\_ -&gt; FileReadErr\n        |&gt; Task.await\n    outPart01 &lt;- part01 input |&gt; Task.fromResult |&gt; Task.await\n    Num.toStr outPart01 |&gt; Stdout.line\n\nhandleErr = \\err -&gt;\n    when err is\n        FileReadErr -&gt; Stderr.line &quot;Error running part01 for \\(inputPath), file read err&quot;\n        InvalidNumStr -&gt; Stderr.line &quot;Error running part01 for \\(inputPath), invalid num str&quot;\n        ListWasEmpty -&gt; Stderr.line &quot;Error running part01 for \\(inputPath), ListWasEmpty&quot;\n</code></pre></div>",
        "id": 404724643,
        "sender_full_name": "walther",
        "timestamp": 1701207963
    },
    {
        "content": "<p>I had a play with your code to explore the <code>Task.fromResult</code> a bit more. I think I would do it like this (not that this is the <em>correct</em> way or anything, just how I like it).</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"hello-world\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.6.2/c7T4Hp8bAdWz3r9ZrhboBzibCjJag8d0IP_ljb42yVc.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stderr</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">File</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Path</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"nv\">inputPath</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"day01.txt\"</span>\n\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FileReadErr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">InvalidNumStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ListWasEmpty</span><span class=\"p\">]</span>\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">outPart01</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"kt\">Path</span><span class=\"nf\">.</span><span class=\"nv\">fromStr</span><span class=\"w\"> </span><span class=\"s\">\"input/\\(inputPath)\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">readUtf8</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">FileReadErr</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">part01</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">fromResult</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"\\(Num.toStr outPart01)\"</span>\n\n<span class=\"nv\">part01</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidNumStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ListWasEmpty</span><span class=\"p\">]</span>\n<span class=\"nv\">part01</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">parsed</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">xs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">xs</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parsed</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">max</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">onErr</span><span class=\"w\"> </span><span class=\"nv\">handleErr</span>\n\n<span class=\"nv\">handleErr</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">FileReadErr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stderr</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Error running part01 for \\(inputPath), file read err\"</span>\n<span class=\"w\">        </span><span class=\"kt\">InvalidNumStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stderr</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Error running part01 for \\(inputPath), invalid num str\"</span>\n<span class=\"w\">        </span><span class=\"kt\">ListWasEmpty</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stderr</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Error running part01 for \\(inputPath), ListWasEmpty\"</span>\n</code></pre></div>",
        "id": 404727081,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701208934
    },
    {
        "content": "<p>I haven't used <code>Task.fromResult</code> much, it's looks quite useful. Thank you</p>",
        "id": 404727931,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701209257
    },
    {
        "content": "<p>Thanks for your example! It's very helpful to see how others would approach this</p>",
        "id": 404884194,
        "sender_full_name": "walther",
        "timestamp": 1701269689
    }
]