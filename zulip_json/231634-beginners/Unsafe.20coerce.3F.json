[
    {
        "content": "<p>I'm looking to do bad things. Is unsafe coercion a thing in Roc?</p>",
        "id": 426828318,
        "sender_full_name": "Jonathan Thiessen",
        "timestamp": 1710539792
    },
    {
        "content": "<p>What is unsafe coercion?</p>",
        "id": 426831657,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710541508
    },
    {
        "content": "<p>I don't think it is a thing in roc</p>",
        "id": 426831729,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710541559
    },
    {
        "content": "<p>It's when you tell the type system what type a value has and it believes you unconditionally. It comes up (perhaps more legitimately) in FFI work (so I'm sure you could do it somehow by writing a custom platform (even if I'm not _really_ needing anything outside of Roc), maybe?). Not sure if that makes sense.</p>",
        "id": 426832811,
        "sender_full_name": "Jonathan Thiessen",
        "timestamp": 1710542182
    },
    {
        "content": "<p>You can do anything you like if you write a platform, but from within roc land there is no way to express something like that I think.</p>",
        "id": 426833339,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710542518
    },
    {
        "content": "<p>The bad thing that I want to do is type constructor defunctionalisation/flatten out type constructors so that you can abstract over them.</p>\n<p>While it's easy enough to have something like</p>\n<div class=\"codehilite\"><pre><span></span><code>Phantom t a := List a\n\nImAListIPromise := []\n\nwrapList : List a -&gt; Phantom ImAListIPromise a\nwrapList = \\la -&gt; @Phantom la\n\nunwrapList : Phantom ImAListIPromise a -&gt; List a\nunwrapList = \\@Phantom la -&gt; la\n</code></pre></div>\n<p>eventually you want</p>\n<div class=\"codehilite\"><pre><span></span><code>ImAFooIPromise := []\n\nwrapFoo : Foo a -&gt; Phantom ImAFooIPromise a\nwrapFoo = ...\n</code></pre></div>\n<p>(as the whole point is to abstract over type constructors), but then you either need to have unbound type variables on the right</p>\n<div class=\"codehilite\"><pre><span></span><code>Phantom t a := unbound\n</code></pre></div>\n<p>(which doesn't work), or some mechanism for unsafe/forced type coercion.</p>",
        "id": 426834708,
        "sender_full_name": "Jonathan Thiessen",
        "timestamp": 1710543359
    },
    {
        "content": "<p>Anytime you actually _use_ the values, you'd have to flip back and forth between the types (the real underlying type where you can operate on the value, and the opaque referencey/handle sort of type that you use to model type constructor abstraction (via proxy types))</p>",
        "id": 426836108,
        "sender_full_name": "Jonathan Thiessen",
        "timestamp": 1710544202
    },
    {
        "content": "<p>I'm not sure whether it's a great idea (or cultural fit for Roc (given that real HKTs were explicitly and intentionally omitted)), but it feels like a fun exercise, at least. If you're interested in some background, <a href=\"https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf\">https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf</a> explains the approach. Here <code>ImAListIPromise</code> is a brand; <code>Phantom</code> is <code>App</code>; and <code>wrap*</code> and <code>unwrap*</code> are <code>inj</code> and <code>prj</code>, respectively (which could probably be rolled into an Ability).</p>",
        "id": 426836988,
        "sender_full_name": "Jonathan Thiessen",
        "timestamp": 1710544732
    }
]