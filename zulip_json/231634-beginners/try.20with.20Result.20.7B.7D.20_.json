[
    {
        "content": "<p>I'm not sure, but I think this could be a bug.</p>\n<p>When trying to use <code>try</code> when using a platfrom that still uses <code>Task</code> I get weird behaviour.</p>\n<hr>\n<p>When trying to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NameTooShort</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NameTooLong</span><span class=\"p\">]</span>\n\n<span class=\"nv\">runValidation</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">do</span><span class=\"w\"> </span><span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"nv\">stuff</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>I get an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── STATEMENT AFTER EXPRESSION in ./try.roc ─────────────────────────────────────\nI just finished parsing an expression with a series of definitions,\n\nand this line is indented as if it&#39;s intended to be part of that\nexpression:\n\n15│      name |&gt; validateName |&gt; try\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHowever, I already saw the final expression in that series of\ndefinitions.\n</code></pre></div>\n<hr>\n<p>This works fine with a variable assignment:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NameTooShort</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NameTooLong</span><span class=\"p\">]</span>\n\n<span class=\"nv\">runValidation</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">do</span><span class=\"w\"> </span><span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"nv\">stuff</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>But I get a warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>── UNNECESSARY DEFINITION in ./try.roc ─────────────────────────────────────────\n\nThis assignment doesn&#39;t introduce any new variables:\n\n15│      _ = name |&gt; validateName |&gt; try\n         ^\n\nSince it doesn&#39;t call any effectful functions, this assignment cannot\naffect the program&#39;s behavior. If you don&#39;t need to use the value on\nthe right-hand side, consider removing the assignment.\n</code></pre></div>\n<p>And when I use <code>{}</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NameTooShort</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NameTooLong</span><span class=\"p\">]</span>\n\n<span class=\"nv\">runValidation</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">do</span><span class=\"w\"> </span><span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"nv\">stuff</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>The formatter deletes the <code>{} = </code> and we are back to the first case with an error.</p>\n<hr>\n<p>When trying the same thing in a platfrom that uses the <strong>purity inference</strong>, this code works:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NameTooShort</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NameTooLong</span><span class=\"p\">]</span>\n\n<span class=\"nv\">runValidation</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">validateName</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">do</span><span class=\"w\"> </span><span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"nv\">stuff</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>But I get a warrning:</p>\n<div class=\"codehilite\"><pre><span></span><code>── LEFTOVER STATEMENT in ./app.roc ─────────────────────────────────────────────\n\nThis statement does not produce any effects:\n\n14│      name |&gt; validateName |&gt; try\n         ^^^^^^^^^^^^^^^^^^^^\n\nStandalone statements are only useful if they call effectful\nfunctions.\n\nDid you forget to use its result? If not, feel free to remove it.\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>When all platforms migrate to purity inference then only the last example will be a valid issue.</p>",
        "id": 482365630,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1731582870
    },
    {
        "content": "<p>Yeah, bug</p>",
        "id": 482433560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731601776
    },
    {
        "content": "<p>Compiler doesn't understand that try kinda has a side effect in that it will return on error</p>",
        "id": 482433719,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731601814
    },
    {
        "content": "<p>As such it is valid as a standalone line</p>",
        "id": 482433791,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731601839
    },
    {
        "content": "<p>Kind of a bug? Brendan is right with respect to purity inference, in that <code>try</code> is a purity inference-specific keyword that can't <em>yet</em> work for pure tasks, even though it should. I'll make an issue later</p>",
        "id": 482456325,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731608888
    },
    {
        "content": "<p>But for <code>Task</code> code, <code>try</code> won't work because it tries to early return an <code>Err err</code>, not a <code>Task.err err</code></p>",
        "id": 482456437,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731608941
    },
    {
        "content": "<p>So you should continue to use <code>?</code> for Task, and <code>try</code> only with purity inference</p>",
        "id": 482456481,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731608965
    },
    {
        "content": "<p>The function is still the same and it is also returning a <code>Result</code> not a <code>Task</code> - only difference is that the platform is still using Task instead of purity inference.<br>\nIDK why this matters.</p>",
        "id": 482457123,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1731609225
    },
    {
        "content": "<p>Yes, you're right, I had too much context in my head to get outside of my head, but it wasn't as useful for you in particular</p>",
        "id": 482457876,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731609512
    },
    {
        "content": "<p>So what I said is the case for trying Results in Task functions</p>",
        "id": 482458025,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731609576
    },
    {
        "content": "<p>Your code is a bug</p>",
        "id": 482458054,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731609588
    },
    {
        "content": "<p>To implement the fix is a little tricky because we currently just desugar <code>try</code> to a when expression and don't see <code>try</code> AST nodes. we could probably look through each pure expression and if there are <code>return</code> expressions, then we allow them.</p>",
        "id": 482459083,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731609962
    },
    {
        "content": "<p>Yeah, I think those should be allowed as long as the other non-early-returned branches return <code>{}</code>. I think we discussed that already on a separate topic. We should probably make an issue.</p>",
        "id": 482527897,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731643152
    }
]