[
    {
        "content": "<p>Is there documentation on how expect works? As I understand it, it's a keyword you write within a function that tests a condition when that function is executed? If yes, can I write unit tests with it by adding top level functions that only contain <code>expect</code>?</p>",
        "id": 290156929,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658262958
    },
    {
        "content": "<p>you can write top-level expects</p>",
        "id": 290157254,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658263097
    },
    {
        "content": "<p>Hi all! I have a question about using <code>expect</code> to create a basic test suite for a Roc library.<br>\nEssentially: Is there a way to import modules/functions _only_ for use inside <code>expect</code>?</p>",
        "id": 391411401,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1694891750
    },
    {
        "content": "<p>In this case I'm extracting the Base64 example from the main Roc repo, and I want to write a bunch of tests to make sure it works well.<br>\nThese mostly have the form of</p>\n<ul>\n<li><code>input |&gt; Encode.toStr |&gt; Decode.fromStr == input</code></li>\n</ul>\n<p>But my problem is that I don't always want to depend on the <code>Decode</code> module in the <code>Encode</code> module and vice-versa. (Which is not even possible because of cyclic dependencies), but only for the <code>expect</code>s.</p>",
        "id": 391411880,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1694892023
    },
    {
        "content": "<p>How to approach this? Move the <code>expect</code>s to a third module that is not exposed from the library called <code>MyLib.Test</code> maybe?</p>",
        "id": 391411929,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1694892085
    },
    {
        "content": "<p>Yeah I think I'd make test module in this situation</p>",
        "id": 391412174,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1694892310
    },
    {
        "content": "<p>How do you set up the test module as part of a package? I tried changing</p>\n<div class=\"codehilite\"><pre><span></span><code>package &quot;Base64&quot;\n    exposes [\n        Base64,\n        Base64.Encode,\n        Base64.Decode,\n    ]\n    packages {}\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><code>package &quot;Base64&quot;\n    exposes [\n        Base64,\n        Base64.Encode,\n        Base64.Decode,\n    ]\n  imports [\n    Test\n  ]\n    packages {}\n</code></pre></div>\n<p>But that does not compile.</p>",
        "id": 391412223,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1694892360
    },
    {
        "content": "<p>Moving it to <code>Base64.Test</code> and creating a <code>Base64.roc</code> module which contains only</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Base64\n    exposes []\n    imports [Base64.Test]\n</code></pre></div>\n<p><em>does</em> sort of work (the expectation is found), but gives an unused module warning</p>",
        "id": 391412318,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1694892409
    },
    {
        "content": "<p>interesting! I think we should have a nicer solution for this (which will require some design work) but in the meantime a workaround is to have Base64.Test expose something useless (like <code>Tests := []</code>) and then have <code>Base64</code> do something like <code>_tests : Base64.Test.Tests</code> - I'm on my phone, but I <em>think</em> that should address the unused warning</p>",
        "id": 391414604,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1694894282
    }
]