[
    {
        "content": "<p>Does legacy linker not support cli arguments, e.g. with <code>roc dev --linker=legacy -- http://localhost:8080</code> <code>Arg.list</code> returns an empty list?</p>",
        "id": 408480000,
        "sender_full_name": "Karakatiza",
        "timestamp": 1702846803
    },
    {
        "content": "<p>It should do. Also Arg.list should at least return the name of the executable I think.</p>",
        "id": 408483110,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702849863
    },
    {
        "content": "<p>It does return the name, but with either roc dev or standalone executable args don't seem to get passed.</p>",
        "id": 408483957,
        "sender_full_name": "Karakatiza",
        "timestamp": 1702850580
    },
    {
        "content": "<p>Legacy linker should have nothing to do with the args</p>",
        "id": 408484189,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702850744
    },
    {
        "content": "<p>Not sure what is eating the args in this case</p>",
        "id": 408484239,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702850765
    },
    {
        "content": "<p>I have definitely gotten all args from <code>Args.list</code> maybe an issue specific to OS?</p>",
        "id": 408484255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702850802
    },
    {
        "content": "<p>Weird. I'm on non-WSL Ubuntu ~20. I'll do some more testing tomorrow</p>",
        "id": 408484309,
        "sender_full_name": "Karakatiza",
        "timestamp": 1702850861
    },
    {
        "content": "<p>Hmm....actually one idea. How does rust initialize args? I have never dug into that. Calling rust from c may not initialize the args. So could be a legacy linker issue due to that.</p>",
        "id": 408484387,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702850932
    },
    {
        "content": "<p>Could be an issue with this?</p>\n<blockquote>\n<p>On glibc Linux systems, arguments are retrieved by placing a function in .init_array. glibc passes argc, argv, and envp to functions in .init_array, as a non-standard extension. This allows std::env::args to work even in a cdylib or staticlib, as it does on macOS and Windows.</p>\n</blockquote>",
        "id": 408485430,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702851907
    },
    {
        "content": "<p>From the rust docs: <a href=\"https://doc.rust-lang.org/std/env/fn.args.html\">https://doc.rust-lang.org/std/env/fn.args.html</a></p>",
        "id": 408485446,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702851928
    },
    {
        "content": "<p>Coming back to this as the issue persists; I needed to create a CLI program that both utilizes Arg.list and roc-json library, and it looks like either way one of them gets broken whether or not you use --linker=legacy <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 428066594,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711004091
    },
    {
        "content": "<p>What if you build the program first? </p>\n<p><code>roc build --linker=legacy abc.roc</code></p>\n<p>And then run it passing some args...</p>\n<p><code>abc http://localhost:8080 </code></p>",
        "id": 428072958,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711007745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> <a href=\"#narrow/stream/231634-beginners/topic/Passing.20program.20arguments.20with.20--linker.3Dlegacy/near/408483957\">said</a>:</p>\n<blockquote>\n<p>It does return the name, but with either roc dev or standalone executable args don't seem to get passed.</p>\n</blockquote>\n<p>I see you've tried that... strange</p>",
        "id": 428073180,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711007829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> does it make sense to work on my own implementation for JSON in Roc just to get things done? Or is there a specific syntax in roc-json code that could be refactored in a fork to avoid the bug it is blocked by without legacy linker?</p>",
        "id": 429974055,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711587475
    },
    {
        "content": "<p>Do you have an example you can share or are working on?</p>",
        "id": 429974890,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711587982
    },
    {
        "content": "<p>I wouldn't suggest writing a new implementation</p>",
        "id": 429974901,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711587993
    },
    {
        "content": "<p>I can try and re-produce on my linux machine later today, I'll have a look now on my mac</p>",
        "id": 429975244,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711588284
    },
    {
        "content": "<p>Don't have a share-able piece of code, but I simply would like to write a program that uses Arg.list and roc-json library at the same time</p>",
        "id": 429975464,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711588494
    },
    {
        "content": "<p>I'm working on an example now</p>",
        "id": 429975970,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711588777
    },
    {
        "content": "<p>Curiously, </p>\n<p>This works </p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    args &lt;- Arg.list |&gt; Task.await\n\n    Stdout.line &quot;Foo, first: $(Inspect.toStr args)&quot;\n</code></pre></div>\n<p>But this crashes with <code>panicked at 'called </code>Option::unwrap()<code> on a </code>None<code> value', crates/compiler/mono/src/ir.rs:6143:56</code></p>\n<div class=\"codehilite\"><pre><span></span><code>main = run |&gt; Task.onErr \\err -&gt; Stdout.line &quot;ERROR: $(Inspect.toStr err)&quot;\n\nrun =\n    args &lt;- Arg.list |&gt; Task.await\n\n    Stdout.line &quot;Foo, first: $(Inspect.toStr args)&quot;\n</code></pre></div>",
        "id": 429976486,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711589118
    },
    {
        "content": "<p>Does the first program work with --linker=legacy for you?</p>",
        "id": 429976606,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711589208
    },
    {
        "content": "<p>Yes,</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc run --linker=legacy test-arg-json.roc -- blah\nFoo, first: [&quot;/var/folders/48/39th9k0n0wdcj18k3yhm_g5c0000gn/T/.tmpfcsKBR/roc_app_binary&quot;, &quot;blah&quot;]\n</code></pre></div>",
        "id": 429976671,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711589252
    },
    {
        "content": "<p>So I suspect there is a bug or something strange in the platform</p>",
        "id": 429976756,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711589292
    },
    {
        "content": "<p>Specifically with Arg</p>",
        "id": 429976764,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711589298
    },
    {
        "content": "<p>Found the issue</p>",
        "id": 429977134,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711589565
    },
    {
        "content": "<p>Have a workaround, just making an example with json for you</p>",
        "id": 429977147,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711589581
    },
    {
        "content": "<p>Oh well, it doesn't work on Ubuntu 22.04.4 LTS with --linker=legacy for me.</p>",
        "id": 429977170,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711589599
    },
    {
        "content": "<p>The output without --linker=legacy is as expected, <code>Foo, first: [\"/proc/self/fd/3\", \"blah\"]</code></p>",
        "id": 429977201,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711589632
    },
    {
        "content": "<p>With - <code>Foo, first: []</code></p>",
        "id": 429977254,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711589649
    },
    {
        "content": "<p>base-cli 0.8.1</p>",
        "id": 429977301,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711589697
    },
    {
        "content": "<p>So what I had to do was modify basic-cli and use a local copy. I changed the err type on the <code>Arg.list</code> in the platform as follows.</p>\n<div class=\"codehilite\"><pre><span></span><code>## Gives a list of the program&#39;s command-line arguments.\n# list : Task (List Str) * &lt;-- err type BROKEN\n# list : Task (List Str) a &lt;-- err type BROKEN\n# list : Task (List Str) _ &lt;-- err type BROKEN\nlist : Task (List Str) []\nlist =\n    Effect.args\n    |&gt; Effect.map Ok\n    |&gt; InternalTask.fromEffect\n</code></pre></div>",
        "id": 429978074,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711590198
    },
    {
        "content": "<p>The I used the following program with something like <code>$ roc dev test-arg-json.roc -- \"{\"field\":\"value\"}\"</code></p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>app \"json\"\n    packages {\n        cli: \"../basic-cli/platform/main.roc\",\n        # cli: \"https://github.com/roc-lang/basic-cli/releases/download/0.8.1/x8URkvfyi9I0QhmVG98roKBUs_AZRkLFwFJVJ3942YA.tar.br\",\n        json: \"https://github.com/lukewilliamboswell/roc-json/releases/download/0.6.3/_2Dh4Eju2v_tFtZeMq8aZ9qw2outG04NbkmKpFhXS_4.tar.br\",\n    }\n    imports [\n        cli.Stdout,\n        cli.Task.{ Task },\n        cli.Arg,\n        json.Core.{json},\n    ]\n    provides [main] to cli\n\nmain = run |&gt; Task.onErr \\err -&gt; Stdout.line \"ERROR: $(Inspect.toStr err)\"\n\nrun =\n    firstArgStr &lt;- getArgs |&gt; Task.await\n\n    result = parseJson firstArgStr\n\n    result\n    |&gt; Inspect.toStr\n    |&gt; Stdout.line\n\ngetArgs : Task Str _\ngetArgs =\n    args &lt;-\n        Arg.list\n        |&gt; Task.mapErr UnableToGetArgs\n        |&gt; Task.await\n\n    when args is\n        [_, first, ..] -&gt; Task.ok first\n        _ -&gt; Task.err UnableToParseArgs\n\nparseJson : Str -&gt; Result { field: Str } _\nparseJson = \\str -&gt;\n    Decode.fromBytes (Str.toUtf8 str) json\n    |&gt; Result.mapErr \\err -&gt;\n        when err is\n            Leftover bytes -&gt; Leftover (Str.fromUtf8 bytes)\n            _ -&gt; JsonErr err\n</code></pre></div>",
        "id": 429978114,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711590239
    },
    {
        "content": "<p>This doesn't parse the json correctly, I'm forgetting how to use roc-json, but it runs and gives an nice error <code>(Err (Leftover (Ok \"{field:value}\")))</code></p>",
        "id": 429978196,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711590296
    },
    {
        "content": "<p>Are you able to test this please?</p>",
        "id": 429978235,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711590316
    },
    {
        "content": "<p>Could you reproduce my issue, though?</p>",
        "id": 429978236,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711590320
    },
    {
        "content": "<p>I don't see any difference with using <code>--linker=legacy</code>, but I'm on my mac</p>",
        "id": 429978337,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711590390
    },
    {
        "content": "<p>Will have to test your example tomorrow<br>\nIt seems my issue is a different one, and I do not have the expertise or capacity to debug the Rust implementation you mentioned a while ago in this thread</p>",
        "id": 429979716,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711591365
    },
    {
        "content": "<p>In case it helps here is the current implementation of <code>Args.list</code> effect in the platform. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_args</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// TODO: can we be more efficient about reusing the String's memory for RocStr?</span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">args_os</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">os_str</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RocStr</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">os_str</span><span class=\"p\">.</span><span class=\"n\">to_string_lossy</span><span class=\"p\">().</span><span class=\"n\">borrow</span><span class=\"p\">()))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 429979910,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711591558
    },
    {
        "content": "<p>I would recommend writing a simple rust program and seeing what the behaviour is just using <code>std::env::args_os()</code> to see if it is a roc issue or something else.</p>",
        "id": 429980075,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711591682
    },
    {
        "content": "<p>Mac is always legacy linker</p>",
        "id": 429982117,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711593039
    },
    {
        "content": "<p>So wouldn't be able to repro linking bugs seen on linux</p>",
        "id": 429982170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711593053
    },
    {
        "content": "<p>In my case the bug is reproduced with legacy linker, so that would mean the mac and linux legacy linker behavior is different</p>",
        "id": 429982460,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711593168
    },
    {
        "content": "<p>Ah, I missed that. Intriguing</p>",
        "id": 429982996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711593601
    },
    {
        "content": "<p>I haven't yet tested the above patch to base-cli or a simple Rust program, but it seems like roc-json works as expected without --linker=legacy despite the warning in the docs. I will come back to this thread if I hit a wall</p>",
        "id": 430183096,
        "sender_full_name": "Karakatiza",
        "timestamp": 1711672311
    }
]