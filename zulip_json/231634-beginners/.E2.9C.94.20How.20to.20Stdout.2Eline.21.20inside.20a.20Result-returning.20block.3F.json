[
    {
        "content": "<p><em>(This might be specific to basic-cli@0.18.0.)</em> I have a function that returns a custom Result, and during its construction I want to use <code>Stdout.line!</code> for info. However, this causes a type mismatch where the Result the block returns conflicts with the Result that <code>line!</code> returns, with no obvious way to deconflict them. What are some small/large changes I can make to this minimal reproduction to get it to compile?</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">basic_cli:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.18.0/0APbwVN1_p1mJ96tXjaoiUCr8NBGamr8G8Ac_DrXR-o.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">import</span><span class=\"w\"> </span><span class=\"n\">basic_cli</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">get_string</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"n\">get_string</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"n\">get_string</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">fromUtf8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">result</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">            </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"nn\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                    </span><span class=\"n\">BadUtf8</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"BadUtf8: $(Inspect.toStr foo) $(Inspect.toStr bar)\"</span>\n<span class=\"w\">                        </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"s\">\"custom\"</span>\n\n<span class=\"w\">            </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"nn\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>jan@framey:~/_code/JanCVanB/bug-repros/mixed-errs$ roc check\n\n── TYPE MISMATCH in main.roc ───────────────────────────────────────────────────\n\nThis returns something that&#39;s incompatible with the return type of the\nenclosing function:\n\n16│           when result is\n17│               Err e -&gt;\n18│                   when e is\n19│                       BadUtf8 foo bar -&gt;\n20│&gt;                          try Stdout.line! &quot;BadUtf8: $(Inspect.toStr foo) $(Inspect.toStr bar)&quot;\n21│                           Err &quot;custom&quot;\n22│\n23│               Ok s -&gt;\n24│                   Ok s\n\nThis returns an Err of type:\n\n    [Err [StdoutErr [\n        AlreadyExists,\n        BrokenPipe,\n        Interrupted,\n        NotFound,\n        Other Str,\n        OutOfMemory,\n        PermissionDenied,\n        Unsupported,\n    ]], …]\n\nBut I expected the function to have return type:\n\n    [Err Str, …]\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 28 ms.\n\njan@framey:~/_code/JanCVanB/bug-repros/mixed-errs$\n</code></pre></div>",
        "id": 491625920,
        "sender_full_name": "jan kili",
        "timestamp": 1735831565
    },
    {
        "content": "<p>You need to use a tag error</p>",
        "id": 491626894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832038
    },
    {
        "content": "<p>a Str error can not merge with the tag error being returned from <code>Stdout.line!</code></p>",
        "id": 491626964,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832057
    },
    {
        "content": "<p>That or you need to map the <code>Stdout.line!</code> error into a Str</p>",
        "id": 491627011,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832084
    },
    {
        "content": "<p>Ah! Yes, <code>Err (Custom \"custom\")</code> resolves the type mismatch.</p>",
        "id": 491627057,
        "sender_full_name": "jan kili",
        "timestamp": 1735832112
    },
    {
        "content": "<p>Perhaps I need a different minimal reproduction for this that I'm hitting in my real app:</p>\n<div class=\"codehilite\"><pre><span></span><code>This returns an `Err` of type:\n\n    [Err [StderrErr [\n        AlreadyExists,\n        BrokenPipe,\n        Interrupted,\n        NotFound,\n        Other Str,\n        OutOfMemory,\n        PermissionDenied,\n        Unsupported,\n    ]], …]\n\nBut I expected the function to have return type:\n\n    [Err [\n        FileReadErr * *,\n        FileReadUtf8Err * *,\n    ], …]d\n</code></pre></div>",
        "id": 491627222,
        "sender_full_name": "jan kili",
        "timestamp": 1735832185
    },
    {
        "content": "<p>because I assumed those two tag unions<br>\n( <code>[StderrErr ...]</code> and <code>[FileReadErr ..., FileReadUtf8Err ...]</code> )<br>\nwould merge.</p>",
        "id": 491627337,
        "sender_full_name": "jan kili",
        "timestamp": 1735832251
    },
    {
        "content": "<p>Real app function:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">read_file</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">PathToFile</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"n\">read_file</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">file_path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">file_path</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">read_utf8</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">result</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">            </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"nn\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                    </span><span class=\"n\">FileReadErr</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"nn\">io_err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"📰 ❗ Failed to read file $(Path.display path) because $(Inspect.toStr io_err)\"</span>\n<span class=\"w\">                        </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">tip_for_calling_this_app</span>\n<span class=\"w\">                        </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n\n<span class=\"w\">                    </span><span class=\"n\">FileReadUtf8Err</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"nn\">io_err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"📰 ❗ Failed to read file $(Path.display path) because $(Inspect.toStr io_err)\"</span>\n<span class=\"w\">                        </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n\n<span class=\"w\">            </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"nn\">file_contents</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"n\">file_contents</span>\n</code></pre></div>",
        "id": 491627482,
        "sender_full_name": "jan kili",
        "timestamp": 1735832324
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@framey:~/_code/JanCVanB/roc-typesetter$ roc check\n\n── TYPE MISMATCH in main.roc ───────────────────────────────────────────────────\n\nThis returns something that&#39;s incompatible with the return type of the\nenclosing function:\n\n50│           when result is\n51│               Err e -&gt;\n52│                   when e is\n53│                       FileReadErr path io_err -&gt;\n54│&gt;                          try Stderr.line! &quot;📰 ❗ Failed to read file $(Path.display path) because $(Inspect.toStr io_err)&quot;\n55│                           try Stderr.line! tip_for_calling_this_app\n56│                           Err e\n57│\n58│                       FileReadUtf8Err path io_err -&gt;\n59│                           try Stderr.line! &quot;📰 ❗ Failed to read file $(Path.display path) because $(Inspect.toStr io_err)&quot;\n60│                           Err e\n61│\n62│               Ok file_contents -&gt;\n63│                   Ok file_contents\n\nThis returns an Err of type:\n\n    [Err [StderrErr [\n        AlreadyExists,\n        BrokenPipe,\n        Interrupted,\n        NotFound,\n        Other Str,\n        OutOfMemory,\n        PermissionDenied,\n        Unsupported,\n    ]], …]\n\nBut I expected the function to have return type:\n\n    [Err [\n        FileReadErr Path.Path val,\n        FileReadUtf8Err Path.Path val,\n    ], …] where val implements Inspect, val implements Inspect\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 32 ms.\n\njan@framey:~/_code/JanCVanB/roc-typesetter$\n</code></pre></div>",
        "id": 491627713,
        "sender_full_name": "jan kili",
        "timestamp": 1735832451
    },
    {
        "content": "<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<h1>This is a better minimal repro:</h1>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">basic_cli:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.18.0/0APbwVN1_p1mJ96tXjaoiUCr8NBGamr8G8Ac_DrXR-o.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">import</span><span class=\"w\"> </span><span class=\"n\">basic_cli</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">get_string</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"n\">get_string</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"n\">get_string</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">fromUtf8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">result</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">            </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"nn\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                    </span><span class=\"n\">BadUtf8</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"BadUtf8: $(Inspect.toStr foo) $(Inspect.toStr bar)\"</span>\n<span class=\"w\">                        </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span>\n\n<span class=\"w\">            </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"nn\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>jan@framey:~/_code/JanCVanB/bug-repros/mixed-errs-2$ roc check\n\n── TYPE MISMATCH in main.roc ───────────────────────────────────────────────────\n\nThis returns something that&#39;s incompatible with the return type of the\nenclosing function:\n\n16│           when result is\n17│               Err e -&gt;\n18│                   when e is\n19│                       BadUtf8 foo bar -&gt;\n20│&gt;                          try Stdout.line! &quot;BadUtf8: $(Inspect.toStr foo) $(Inspect.toStr bar)&quot;\n21│                           Err e\n22│\n23│               Ok s -&gt;\n24│                   Ok s\n\nThis returns an Err of type:\n\n    [Err [StdoutErr [\n        AlreadyExists,\n        BrokenPipe,\n        Interrupted,\n        NotFound,\n        Other Str,\n        OutOfMemory,\n        PermissionDenied,\n        Unsupported,\n    ]], …]\n\nBut I expected the function to have return type:\n\n    [Err [BadUtf8 val val], …] where val implements Inspect, val implements Inspect\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 25 ms.\n\njan@framey:~/_code/JanCVanB/bug-repros/mixed-errs-2$\n</code></pre></div>",
        "id": 491628172,
        "sender_full_name": "jan kili",
        "timestamp": 1735832696
    },
    {
        "content": "<p>Yeah, this is a more nuanced issue</p>",
        "id": 491628308,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832761
    },
    {
        "content": "<p>Essentially to be used in the <code>when e is</code> block, <code>e</code> must be either <code>FileReadErr path io_err</code> or <code>FileReadUtf8Err path io_err</code></p>",
        "id": 491628436,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832819
    },
    {
        "content": "<p>This is a closed tag due to the when</p>",
        "id": 491628455,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832827
    },
    {
        "content": "<p><code>e</code> is then returned</p>",
        "id": 491628487,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832842
    },
    {
        "content": "<p>Suddenly, that closed tag is being merged with <code>[StderrErr ...]</code> due to the <code>try StdErr.line</code></p>",
        "id": 491628546,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832877
    },
    {
        "content": "<p>Ayyy, nice, so adding <code>_ -&gt; Err e</code> seems to fix it.</p>",
        "id": 491628676,
        "sender_full_name": "jan kili",
        "timestamp": 1735832937
    },
    {
        "content": "<p>I think you could add a <code>_ -&gt; crash \"unreachable\"</code> to your <code>when e is</code> to fix it. </p>\n<p>That or instead of returning <code>e</code>, you need to return a new error.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>                   FileReadErr path io_err -&gt;\n<span class=\"w\"> </span>                       try Stderr.line! \"📰 ❗ Failed to read file $(Path.display path) because $(Inspect.toStr io_err)\"\n<span class=\"w\"> </span>                       try Stderr.line! tip_for_calling_this_app\n<span class=\"gd\">-                       Err e</span>\n<span class=\"gi\">+                       Err (FileReadErr path io_err)</span>\n</code></pre></div>",
        "id": 491628715,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832957
    },
    {
        "content": "<p>Ooh that's nicer - especially since in real app functions this pattern is usually combined with error customization</p>",
        "id": 491628832,
        "sender_full_name": "jan kili",
        "timestamp": 1735833008
    },
    {
        "content": "<p>This is an interesting sharp edge <code>try</code>/<code>?</code> when combined with <code>when err is</code></p>",
        "id": 491628898,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833045
    },
    {
        "content": "<p>Yeah, because I'm in a function that returns a <code>Result</code>, when I see the typechecker message say \"this function returns\" I don't think \"oh yeah <code>when</code> is a function that returns a sometimes-closed union\"</p>",
        "id": 491629000,
        "sender_full_name": "jan kili",
        "timestamp": 1735833101
    },
    {
        "content": "<p>I read those typechecker messages as referring to the enclosing function's Result Err, but they're not.</p>",
        "id": 491629196,
        "sender_full_name": "jan kili",
        "timestamp": 1735833175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> has marked this topic as resolved.</p>",
        "id": 491629291,
        "sender_full_name": "Notification Bot",
        "timestamp": 1735833231
    },
    {
        "content": "<p>I'm happy to continue discussing how to un-sharpen that edge here or elsewhere.</p>",
        "id": 491629367,
        "sender_full_name": "jan kili",
        "timestamp": 1735833263
    },
    {
        "content": "<p>Side note - where in the typechecker messages does it indicate a closed tag union? I read all those <code>...]</code>-ending types as being open.</p>",
        "id": 491629481,
        "sender_full_name": "jan kili",
        "timestamp": 1735833333
    },
    {
        "content": "<p>I think this is the only open union cause it is followed by <code>d</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>    [Err [\n        FileReadErr * *,\n        FileReadUtf8Err * *,\n    ], …]d\n</code></pre></div>",
        "id": 491629844,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833515
    },
    {
        "content": "<p>That said, any union returned by a function is automatically made open (solves most headaches from open vs closed unions)</p>",
        "id": 491629913,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833553
    },
    {
        "content": "<p>Anyway, sounds like we should at least improve a few error messages here.</p>",
        "id": 491629935,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833572
    },
    {
        "content": "<p>What does <code>...]</code> indicate?</p>",
        "id": 491630064,
        "sender_full_name": "jan kili",
        "timestamp": 1735833614
    },
    {
        "content": "<p>That it left out information cause it was unimportant for the diff</p>",
        "id": 491630095,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833631
    },
    {
        "content": "<p>In this case, it elided the <code>Ok</code> cases</p>",
        "id": 491630149,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833648
    },
    {
        "content": "<p>Oh, gotcha. Yeah that's outside the Err tag union.</p>",
        "id": 491630202,
        "sender_full_name": "jan kili",
        "timestamp": 1735833673
    },
    {
        "content": "<p>Eventually we plan to use <code>...</code> for open unions (and combining unions with <code>...OtherUnions</code>), but we don't do that yet.</p>",
        "id": 491630213,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833679
    },
    {
        "content": "<p>Wow, so none of the above Err tags are open, then.</p>",
        "id": 491630358,
        "sender_full_name": "jan kili",
        "timestamp": 1735833737
    },
    {
        "content": "<p>That makes sense. I think I was biased toward confusion here because I remember seeing that <code>...]</code> is the upcoming openness syntax.</p>",
        "id": 491630527,
        "sender_full_name": "jan kili",
        "timestamp": 1735833820
    },
    {
        "content": "<p>I should've counted my matching <code>[ ]</code>s more closely!</p>",
        "id": 491630706,
        "sender_full_name": "jan kili",
        "timestamp": 1735833892
    },
    {
        "content": "<blockquote>\n<p>Wow, so none of the above Err tags are open, then</p>\n</blockquote>\n<p>Except that all tags returned from functions are automatically made open. So it is kinda confusing.</p>",
        "id": 491634366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735835709
    }
]