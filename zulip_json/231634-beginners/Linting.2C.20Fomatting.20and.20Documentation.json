[
    {
        "content": "<p>Hey there,</p>\n<p>I'd have three quick questions:</p>\n<ol>\n<li>Is there a plan to include a sort of linter by default, which might report on common pitfalls?</li>\n<li>Is there a plan to include a formatting standard by default, so that teams avoid discussions around that? So something such as Prettier or Biome Format in the JS / TS ecosystem?</li>\n<li>The way documentation is described in the Tutorial indicates that it would be quite free text. Is there a plan to have more detailed documentation possibilities w.r.t. to specific parameters and the like?</li>\n</ol>",
        "id": 410976191,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1704271151
    },
    {
        "content": "<p>There already is a <code>roc format</code> command but I didn't see a description of the format it tries to create on the website.</p>",
        "id": 410984809,
        "sender_full_name": "mkrieger1",
        "timestamp": 1704275275
    },
    {
        "content": "<blockquote>\n<p>Is there a plan to include a sort of linter by default, which might report on common pitfalls?</p>\n</blockquote>\n<p>I think a linter probably is a good idea for the things that don't fit as compiler warnings.</p>",
        "id": 410991955,
        "sender_full_name": "Anton",
        "timestamp": 1704278605
    },
    {
        "content": "<blockquote>\n<p>Is there a plan to have more detailed documentation possibilities w.r.t. to specific parameters and the like?</p>\n</blockquote>\n<p>I don't think we've discussed that before, what do you consider to be the key benefits of that approach?</p>",
        "id": 410992112,
        "sender_full_name": "Anton",
        "timestamp": 1704278652
    },
    {
        "content": "<p>There might be some, depending on the angle you're looking at the problem and potentially the platform.</p>\n<p>One example could be parameter specific description on hover in an editor. Another one automatic creation of documenation Let's take an example of tsdocs / jsdocs (even though to my knowledge not integrated in VSCode in this way.</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Runs all the provided effects in sequence respecting the structure provided in input.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * Supports multiple arguments, a single argument tuple / array or record / struct.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @since 2.0.0</span>\n<span class=\"cm\"> * @category collecting &amp; elements</span>\n<span class=\"cm\"> */</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Returns an effect that will be executed at most once, even if it is</span>\n<span class=\"cm\"> * evaluated multiple times.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @example</span>\n<span class=\"cm\"> * import * as Effect from \"effect/Effect\"</span>\n<span class=\"cm\"> * import * as Console from \"effect/Console\"</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * const program = Effect.gen(function* (_) {</span>\n<span class=\"cm\"> *   const twice = Console.log(\"twice\")</span>\n<span class=\"cm\"> *   yield* _(twice, Effect.repeatN(1))</span>\n<span class=\"cm\"> *   const once = yield* _(Console.log(\"once\"), Effect.once)</span>\n<span class=\"cm\"> *   yield* _(once, Effect.repeatN(1))</span>\n<span class=\"cm\"> * })</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * Effect.runFork(program)</span>\n<span class=\"cm\"> * // Output:</span>\n<span class=\"cm\"> * // twice</span>\n<span class=\"cm\"> * // twice</span>\n<span class=\"cm\"> * // once</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @since 2.0.0</span>\n<span class=\"cm\"> * @category caching</span>\n<span class=\"cm\"> */</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"cm\">/**</span>\n<span class=\"cm\"> * This function returns `true` if the specified value is an `Effect` value,</span>\n<span class=\"cm\"> * `false` otherwise.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * This function can be useful for checking the type of a value before</span>\n<span class=\"cm\"> * attempting to operate on it as an `Effect` value. For example, you could</span>\n<span class=\"cm\"> * use `isEffect` to check the type of a value before using it as an</span>\n<span class=\"cm\"> * argument to a function that expects an `Effect` value.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @param u - The value to check for being an `Effect` value.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @returns `true` if the specified value is an `Effect` value, `false`</span>\n<span class=\"cm\"> * otherwise.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @since 2.0.0</span>\n<span class=\"cm\"> * @category refinements</span>\n<span class=\"cm\"> */</span>\n</code></pre></div>\n<p>This enables tools like tsdocs to structure the elements:<br>\n<a href=\"/user_uploads/22008/nh4EUUjxDCpGgH7JTLfrsYg-/image.png\">image.png</a><br>\n<a href=\"/user_uploads/22008/VnyDUXJPa9EGjoW4DPOB2a3s/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/nh4EUUjxDCpGgH7JTLfrsYg-/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/nh4EUUjxDCpGgH7JTLfrsYg-/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/VnyDUXJPa9EGjoW4DPOB2a3s/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/VnyDUXJPa9EGjoW4DPOB2a3s/image.png\"></a></div><p>At the same time editors such as VSCode now also potentially show on hover details for parameters, where a description for that specific parameter could be placed:</p>\n<p><a href=\"/user_uploads/22008/fN2hCXCpxj8tUfhrQIJKzwqP/Tobias-Steckenborn-2024-01-03-at-12.05.532x.png\">Tobias-Steckenborn-2024-01-03-at-12.05.532x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/fN2hCXCpxj8tUfhrQIJKzwqP/Tobias-Steckenborn-2024-01-03-at-12.05.532x.png\" title=\"Tobias-Steckenborn-2024-01-03-at-12.05.532x.png\"><img src=\"/user_uploads/22008/fN2hCXCpxj8tUfhrQIJKzwqP/Tobias-Steckenborn-2024-01-03-at-12.05.532x.png\"></a></div><p>I hope that get's the point across :D</p>",
        "id": 410995633,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1704280090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513294\">Tobias Steckenborn</span> <a href=\"#narrow/stream/231634-beginners/topic/Linting.2C.20Fomatting.20and.20Documentation/near/410995633\">schrieb</a>:</p>\n<blockquote>\n<p>There might be some, depending on the angle you're looking at the problem and potentially the platform.</p>\n<p>One example could be parameter specific description on hover in an editor. Another one automatic creation of documenation Let's take an example of tsdocs / jsdocs (even though to my knowledge not integrated in VSCode in this way.</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Runs all the provided effects in sequence respecting the structure provided in input.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * Supports multiple arguments, a single argument tuple / array or record / struct.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @since 2.0.0</span>\n<span class=\"cm\"> * @category collecting &amp; elements</span>\n<span class=\"cm\"> */</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Returns an effect that will be executed at most once, even if it is</span>\n<span class=\"cm\"> * evaluated multiple times.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @example</span>\n<span class=\"cm\"> * import * as Effect from \"effect/Effect\"</span>\n<span class=\"cm\"> * import * as Console from \"effect/Console\"</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * const program = Effect.gen(function* (_) {</span>\n<span class=\"cm\"> *   const twice = Console.log(\"twice\")</span>\n<span class=\"cm\"> *   yield* _(twice, Effect.repeatN(1))</span>\n<span class=\"cm\"> *   const once = yield* _(Console.log(\"once\"), Effect.once)</span>\n<span class=\"cm\"> *   yield* _(once, Effect.repeatN(1))</span>\n<span class=\"cm\"> * })</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * Effect.runFork(program)</span>\n<span class=\"cm\"> * // Output:</span>\n<span class=\"cm\"> * // twice</span>\n<span class=\"cm\"> * // twice</span>\n<span class=\"cm\"> * // once</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @since 2.0.0</span>\n<span class=\"cm\"> * @category caching</span>\n<span class=\"cm\"> */</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"cm\">/**</span>\n<span class=\"cm\"> * This function returns `true` if the specified value is an `Effect` value,</span>\n<span class=\"cm\"> * `false` otherwise.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * This function can be useful for checking the type of a value before</span>\n<span class=\"cm\"> * attempting to operate on it as an `Effect` value. For example, you could</span>\n<span class=\"cm\"> * use `isEffect` to check the type of a value before using it as an</span>\n<span class=\"cm\"> * argument to a function that expects an `Effect` value.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @param u - The value to check for being an `Effect` value.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @returns `true` if the specified value is an `Effect` value, `false`</span>\n<span class=\"cm\"> * otherwise.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @since 2.0.0</span>\n<span class=\"cm\"> * @category refinements</span>\n<span class=\"cm\"> */</span>\n</code></pre></div>\n<p>This enables tools like tsdocs to structure the elements:<br>\n<a href=\"/user_uploads/22008/nh4EUUjxDCpGgH7JTLfrsYg-/image.png\">image.png</a><br>\n<a href=\"/user_uploads/22008/VnyDUXJPa9EGjoW4DPOB2a3s/image.png\">image.png</a></p>\n<p>At the same time editors such as VSCode now also potentially show on hover details for parameters, where a description for that specific parameter could be placed:</p>\n<p><a href=\"/user_uploads/22008/fN2hCXCpxj8tUfhrQIJKzwqP/Tobias-Steckenborn-2024-01-03-at-12.05.532x.png\">Tobias-Steckenborn-2024-01-03-at-12.05.532x.png</a></p>\n<p>I hope that get's the point across :D</p>\n</blockquote>\n<p>Additionally at an outer boundary there might be benefits in creating e.g. something alike an OpenAPI spec, or a CLI help - but that's debatable and would be very reliant on the individual platform.</p>",
        "id": 410995834,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1704280184
    },
    {
        "content": "<p>\"show on hover details for parameters\" is nice indeed! You can create a new topic in the ideas stream if you want to propose a syntax for this. If not, I can make an issue for this to explore it at a later time.</p>",
        "id": 410996541,
        "sender_full_name": "Anton",
        "timestamp": 1704280538
    }
]