[
    {
        "content": "<p>has anyone done any work on unit testing in Roc?</p>",
        "id": 262824006,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1637950634
    },
    {
        "content": "<p>made a Roc specification platform maybe? (rspec for short)</p>",
        "id": 262824256,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1637950835
    },
    {
        "content": "<p>Yes, Jim did in PR #1590</p>",
        "id": 262826073,
        "sender_full_name": "Anton",
        "timestamp": 1637952358
    },
    {
        "content": "<p>niiiice</p>",
        "id": 262827176,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1637953280
    },
    {
        "content": "<p>know anything about fuzzing? (Actual fuzzing, not property testing)</p>",
        "id": 262827252,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1637953335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> started on fuzzing (in rust) in compiler/parse/fuzz. But I don't think anyone implemented fuzzing in roc.</p>",
        "id": 262827987,
        "sender_full_name": "Anton",
        "timestamp": 1637954048
    },
    {
        "content": "<p>there's a design for baking testing into the language, but nobody's working on the implementation at the moment <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 262829218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1637955158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> I think you maybe meant the Advent of Code topic <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263035050,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1638204608
    },
    {
        "content": "<p>ha, yup! fixed!</p>",
        "id": 263040005,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1638206743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/testing/near/262829218\">said</a>:</p>\n<blockquote>\n<p>there's a design for baking testing into the language, but nobody's working on the implementation at the moment <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>Is that written down anywhere, or just an idea at this point? I got roc setup and the first thing on my mind is always testing, so I'd be curious to explore this more!</p>\n<p>One of the things I'm curious about is if you picture the idea of a Platform being something that Roc's testing can swap in for data that it can make assertions against (rather than actually performing things in the platform). Not sure if it's as simple as that, but I'm very curious to discuss and contribute if I can!</p>",
        "id": 263087193,
        "sender_full_name": "Dillon Kearns",
        "timestamp": 1638232256
    },
    {
        "content": "<p>Interesting idea, essentially all effects happen through the platform, so it's a great boundary for testing.</p>",
        "id": 263090617,
        "sender_full_name": "Tim Whiting",
        "timestamp": 1638234609
    },
    {
        "content": "<p>Yeah, I think we can learn a lot from <a href=\"https://package.elm-lang.org/packages/avh4/elm-program-test/latest\">https://package.elm-lang.org/packages/avh4/elm-program-test/latest</a>. It gives a way to simulate side effects. The way it's done is by wrapping Elm side-effects with an Effect type since currently Elm's Cmds and Tasks can't be inspected. Evan and Aaron were exploring having a way for tests to inspect those side-effects as data, which would allow for testing without creating an Effect type wrapper.</p>",
        "id": 263173818,
        "sender_full_name": "Dillon Kearns",
        "timestamp": 1638291294
    },
    {
        "content": "<blockquote>\n<p>One of the things I'm curious about is if you picture the idea of a Platform being something that Roc's testing can swap in for data that it can make assertions against (rather than actually performing things in the platform). Not sure if it's as simple as that, but I'm very curious to discuss and contribute if I can!</p>\n</blockquote>\n<p>I know we have discussed that exact idea a few times and I think it is definitely a goal, but I don't think anyone has really dug into it yet. Could theoretically even interact with your app while in some sort of \"record\" mode and then use that to generate test cases.</p>",
        "id": 263176019,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1638292067
    },
    {
        "content": "<p>I like the idea of \"record\" mode, that's a nice way of putting it.</p>\n<p>One of the biggest benefits of managed effects and pure functions is testability. A lot of the \"TDD is Dead\" talk from people like DHH are, in my opinion, reactions to the very painful experience of mocking side-effects and environment. So a great testing story is a killer feature. A lot of that comes for free because you don't need to mock pure functions.</p>\n<p>But for the managed effects, there does need to be some way to swap things in and \"record\" effects. For elm-program-test, it's a more tailored way of recording the specific effects that can happen in the Elm platform. With Roc, since Platforms are swappable, it would need to be able to give a way to provide a test harness specific to a given platform.</p>",
        "id": 263178996,
        "sender_full_name": "Dillon Kearns",
        "timestamp": 1638293187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> has done some pretty rad stuff with program-test, expanding it to a full stack version for Lamdera. He already demoed a \"time travelling debugger\" style replay, so seems logical to go a step further with some sort of record. I think whatever context that's applied in will be a boon to making it easier / more likely to \"write\" (read: record) acceptance tests.</p>",
        "id": 263188216,
        "sender_full_name": "Mario",
        "timestamp": 1638297222
    },
    {
        "content": "<p>I'm trying out the <code>expect</code> keyword for the first time, and I'm confused - what tests are running here?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test examples/hello-world/main.roc\n\n0 failed and 5 passed in 729 ms.\n</code></pre></div>\n<p>I don't see any <code>expects</code> in the two <code>.roc</code> files involved...</p>",
        "id": 295678009,
        "sender_full_name": "jan kili",
        "timestamp": 1661673208
    },
    {
        "content": "<p>There are other .roc files involved too - all the ones in the standard library! There are three <code>expect</code>s in <code>Str.roc</code> and two in <code>Set.roc</code>. At the moment there's nothing to filter out the ones in the std lib and only run the ones for the app. But longer term, we should implement that!</p>",
        "id": 295679222,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661674124
    },
    {
        "content": "<p>I see! Thank you for that insight.</p>",
        "id": 295682439,
        "sender_full_name": "jan kili",
        "timestamp": 1661676481
    },
    {
        "content": "<p>New question, does/will <code>roc test</code> have any verbosity settings that could display the values of the left and right sides of an equality check? I'd like to know what the left side of this is, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test 3.roc\n── EXPECT FAILED ─────────────────────────────────────────────────────── 3.roc ─\n\nThis expectation failed:\n\n24│  expect (calculatePrimeFactors 2) == [2]\n     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1 failed and 7 passed in 781 ms.\n</code></pre></div>",
        "id": 295682681,
        "sender_full_name": "jan kili",
        "timestamp": 1661676629
    },
    {
        "content": "<p>We do have <a href=\"https://github.com/roc-lang/roc/issues/1230\">this old issue</a> where the printing of intermediary values is discussed.</p>",
        "id": 295683264,
        "sender_full_name": "Anton",
        "timestamp": 1661676961
    },
    {
        "content": "<p>I would think you'd need to implement <code>expectEqual</code> instead of <code>expect</code> in order to do this. The <code>expect</code> function can only really print its argument, which is <code>True</code> or <code>False</code>. Anything more than that requires lots of fancy compiler magic which that issue is describing in detail. If instead you had <code>expectEqual</code> it would have two arguments so it could print both.<br>\nBut... then you also have to do <code>expectGreaterThan</code> and all that kind of stuff too, so instead of one or two magic functions, there's a whole family of them.<br>\nAlthough if you had something like Elm's <code>Debug.log</code> then you could presumably build <code>expectEqual</code> out of that and <code>expect</code>.</p>",
        "id": 295684284,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661677542
    },
    {
        "content": "<p>The logging function would then have to be somehow prevented from being used in production, etc.</p>",
        "id": 295684448,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661677641
    },
    {
        "content": "<p>I guess in that design you'd have a whole <code>Expect</code> module in the standard library.</p>",
        "id": 295684572,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661677738
    },
    {
        "content": "<p>And <code>expect</code> already works differently in production than test (it's ignored)</p>",
        "id": 295684653,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661677797
    },
    {
        "content": "<p>yeah I'd like to print the values of all the arguments to the outermost function call in the <code>expect</code></p>",
        "id": 295714017,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661695361
    },
    {
        "content": "<p>(e.g. <code>expect 5 == 5</code> would desugar to <code>expect Bool.isEq 5 5</code> so we'd print the two arguments to <code>Bool.isEq</code>)</p>",
        "id": 295714164,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661695449
    },
    {
        "content": "<p>that would take care of all the comparisons you might want to do, not just <code>==</code></p>",
        "id": 295714234,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661695503
    },
    {
        "content": "<p>nested function calls would be trickier I imagine, e.g. <code>1 == 1 || 2 == 3</code></p>",
        "id": 295714328,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661695556
    },
    {
        "content": "<p>Currently it's such that named variables in the expect expressions are printed</p>\n<div class=\"codehilite\"><pre><span></span><code>── EXPECT FAILED ─────────────────────────────── examples/hello-world/main.roc ─\n\nThis expectation failed:\n\n6│&gt;  expect\n7│&gt;      a = &quot;f&quot;\n8│&gt;      b = &quot;g&quot;\n9│&gt;      a == b\n\nWhen it failed, these variables had these values:\n\na : Str\na = &quot;f&quot;\n\nb : Str\nb = &quot;g&quot;\n</code></pre></div>",
        "id": 295714998,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1661695979
    },
    {
        "content": "<p>That's wonderful, Ayaz! <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 295746744,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1661712171
    },
    {
        "content": "<p>well <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> did all this, ups to Folkert</p>",
        "id": 295746804,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1661712213
    },
    {
        "content": "<p>Folkert! <span aria-label=\"green heart\" class=\"emoji emoji-1f49a\" role=\"img\" title=\"green heart\">:green_heart:</span></p>",
        "id": 295747365,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1661712535
    },
    {
        "content": "<p>Lots of fun code went into making it too</p>",
        "id": 295747402,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661712572
    },
    {
        "content": "<p>I just went through my code and added a BUNCH of multi-line <code>expects</code>, and it actually caught some regressions from renamed builtins. Thanks, y'all! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 295768436,
        "sender_full_name": "jan kili",
        "timestamp": 1661733949
    },
    {
        "content": "<p>(and as an added bonus, that process also uncovered a formatter bug! <a href=\"https://github.com/roc-lang/roc/issues/3924#issuecomment-1229604782\">https://github.com/roc-lang/roc/issues/3924#issuecomment-1229604782</a> haha)</p>",
        "id": 295768494,
        "sender_full_name": "jan kili",
        "timestamp": 1661733981
    },
    {
        "content": "<p>What canonical formatting do we want for code like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>computeFibonacciNumbersUpTo = \\maximum -&gt;\n    more = \\olds -&gt;\n        last2 = List.sublist olds { start: List.len olds - 2, len: 2 }\n        next1 = List.sum last2\n        news = List.append olds next1\n        if next1 &gt; maximum then olds else more news\n    more [1, 2]\n\nexpect\n    fibs = computeFibonacciNumbersUpTo 5\n    fibs == [1, 2, 3, 5]\nexpect\n    fibs = computeFibonacciNumbersUpTo 20\n    fibs == [1, 2, 3, 5, 8, 13]\n</code></pre></div>",
        "id": 295768966,
        "sender_full_name": "jan kili",
        "timestamp": 1661734580
    },
    {
        "content": "<p>In a file with many function definitions, I want to add a few <code>expect</code>s after each function definition, like above. However, this is what I expect the formatter to do, which looks weird to me:</p>\n<div class=\"codehilite\"><pre><span></span><code>computeFibonacciNumbersUpTo = \\maximum -&gt;\n    more = \\olds -&gt;\n        last2 = List.sublist olds { start: List.len olds - 2, len: 2 }\n        next1 = List.sum last2\n        news = List.append olds next1\n        if next1 &gt; maximum then olds else more news\n\n    more [1, 2]\n\nexpect\n    fibs = computeFibonacciNumbersUpTo 5\n\n    fibs == [1, 2, 3, 5]\n\nexpect\n    fibs = computeFibonacciNumbersUpTo 20\n\n    fibs == [1, 2, 3, 5, 8, 13]\n</code></pre></div>",
        "id": 295768990,
        "sender_full_name": "jan kili",
        "timestamp": 1661734631
    },
    {
        "content": "<p>Do I just need to get used to the pre-return-value newline? #EmbraceTheWhitespace?</p>",
        "id": 295769004,
        "sender_full_name": "jan kili",
        "timestamp": 1661734675
    },
    {
        "content": "<p>personally the second code snippet looks right to me!</p>",
        "id": 295771759,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661738546
    },
    {
        "content": "<p>To me the blank line feels quite excessive when there's only one let-binding above it. I would never do that manually and I don't like when the Roc formatter does it. It always feels to me like our formatter is crudely applying a rule that doesn't really fit this case because it's not smart enough. But maybe that's not the case and it's intended because different people have different preferences.<br>\nSome formatters allow you a certain degree of freedom with blank lines. I think the Rust formatter lets you insert one blank line in a function body but if you have two consecutive blank lines it merges them.</p>",
        "id": 295787901,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661754799
    },
    {
        "content": "<p>Do we have any flexibility in ours? Could this become something that the user can control?</p>",
        "id": 295789438,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661755665
    },
    {
        "content": "<p>are you talking about the blank line between <code>fibs = …</code> and <code>fibs == …</code>? That one actually makes sense to me in a testing context—I tend to arrange my tests in arrange/act/assert style and use whitespace to separate the stages.</p>",
        "id": 295822243,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1661771262
    },
    {
        "content": "<p>I think the biggest issue for me with that formatting is the that if you add a spacing before the last line, you need at least 2 spaces before the next definition. That being said, i definitely prefer no extra space in this case.</p>\n<p>A:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fibs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">computeFibonacciNumbersUpTo</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nx\">fibs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"nx\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fibs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">computeFibonacciNumbersUpTo</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nx\">fibs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>B:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fibs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">computeFibonacciNumbersUpTo</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nx\">fibs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n\n<span class=\"nx\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fibs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">computeFibonacciNumbersUpTo</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nx\">fibs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>C:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fibs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">computeFibonacciNumbersUpTo</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">fibs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"nx\">expect</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">fibs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">computeFibonacciNumbersUpTo</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">fibs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So in the examples, i would say, i dislike A. I think B is ok but still not great. I would definitely personally write C.</p>\n<p>Maybe if there were more lines in the definition or if there were curly braces instead of tabs, i would feel better about B, but neither of those are the case here.</p>",
        "id": 295855450,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661783211
    },
    {
        "content": "<p>I guess also if there were explicit comments specifying the stages, then more spacing would also make sense to me.</p>",
        "id": 295855778,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661783311
    },
    {
        "content": "<p>interesting! I personally prefer A but I'm open to any of them</p>",
        "id": 295857778,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661783997
    },
    {
        "content": "<p>I'm curious what others think</p>",
        "id": 295857856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661784006
    },
    {
        "content": "<p>Yeah, if we want a hyperconsistent rule (not allowing C in short cases, for example) then I prefer B</p>",
        "id": 295859100,
        "sender_full_name": "jan kili",
        "timestamp": 1661784437
    },
    {
        "content": "<p>I always personally do double newline between top-level function definitions in other languages</p>",
        "id": 295859189,
        "sender_full_name": "jan kili",
        "timestamp": 1661784468
    },
    {
        "content": "<p>I think that's orthogonal to be honest - I think we either ought to have 1 or 2 spaces between all top-level declarations regardless of how we format <code>expect</code></p>",
        "id": 295942636,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661788467
    },
    {
        "content": "<p>relatedly, how do people feel about the same thing except when it has to do with defs?</p>",
        "id": 295942819,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661788532
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 295942942,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661788565
    },
    {
        "content": "<p>do people prefer the def with or without the blank line?</p>",
        "id": 295942996,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661788580
    },
    {
        "content": "<p>(and I guess relevantly, is that preference the same as your preference for <code>expect</code>, or different?)</p>",
        "id": 295943068,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661788606
    },
    {
        "content": "<p>For me, exact same comments I made about expect.</p>",
        "id": 295976465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661799363
    },
    {
        "content": "<p>Ditto. There's nothing special for me about expect, I was talking generally about the blank line before the expression value.</p>",
        "id": 295989217,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661803538
    },
    {
        "content": "<p>To be honest, this feels like a growing avalanche of reasonable incremental expansions... but at it's core these tests should not take up this much space.</p>",
        "id": 296247280,
        "sender_full_name": "jan kili",
        "timestamp": 1661911723
    },
    {
        "content": "<p>Options A, B, and C above are 5x, 6x, and 4x (respectively) the line count of what I initially wrote:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect computeFibonacciNumbersUpTo 5 == [1, 2, 3, 5]\nexpect computeFibonacciNumbersUpTo 20 == [1, 2, 3, 5, 8, 13]\n</code></pre></div>",
        "id": 296247317,
        "sender_full_name": "jan kili",
        "timestamp": 1661911802
    },
    {
        "content": "<p>(We could call this Option D, I suppose, but I don't have a holistic formatting algorithm yet)</p>",
        "id": 296247368,
        "sender_full_name": "jan kili",
        "timestamp": 1661911847
    },
    {
        "content": "<p>Here's another example, to illustrate the value of a concise/terse test format:</p>\n<div class=\"codehilite\"><pre><span></span><code>isPrime = \\n -&gt;\n    when n is\n        1 -&gt; False\n        _ -&gt; (calculateFactors n) == [1, n]\n\nexpect isPrime 1 |&gt; Bool.not\nexpect isPrime 2\nexpect isPrime 5\nexpect isPrime 19\nexpect isPrime 20 |&gt; Bool.not\nexpect isPrime 13195 |&gt; Bool.not\n</code></pre></div>",
        "id": 296247464,
        "sender_full_name": "jan kili",
        "timestamp": 1661911953
    },
    {
        "content": "<p>I feel like this is maybe going farther from the original question, but your formatting made me realize something. Realistically in more other languages, would write a table drive test for these examples.</p>\n<p>Just a list of tuples (or anonymous structs) of arguments to the function and expected results. Then a simple for loop of expects. Can we do something similar in roc without too much verbosity? Do we have plans for it?</p>",
        "id": 296247558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661912052
    },
    {
        "content": "<p>(This latest example doesn't require multi-line <code>expect</code>s because it doesn't contain any <code>==</code>s to want to analyze.)</p>",
        "id": 296247573,
        "sender_full_name": "jan kili",
        "timestamp": 1661912068
    },
    {
        "content": "<p>(but in general I want to write several tests for each few-line function, and those tests will usually contain a comparison like <code>==</code> or <code>&gt;</code> etc)</p>",
        "id": 296247599,
        "sender_full_name": "jan kili",
        "timestamp": 1661912117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> Great point!</p>",
        "id": 296247632,
        "sender_full_name": "jan kili",
        "timestamp": 1661912151
    },
    {
        "content": "<p>Maybe something like</p>\n<div class=\"codehilite\"><pre><span></span><code>expect [\n    (isPrime 1, `==`, False),\n    (isPrime 2, `==`, True),\n    (isPrime 5, `==`, True),\n    (isPrime 19, `==`, True),\n    (isPrime 20, `==`, False),\n    (isPrime 13195, `==`, False),\n]\n</code></pre></div>",
        "id": 296247810,
        "sender_full_name": "jan kili",
        "timestamp": 1661912313
    },
    {
        "content": "<p>This still makes room for defs inside a multi-line<code>expect</code> (not shown here), but LoC scales sublinearly with test count</p>",
        "id": 296247880,
        "sender_full_name": "jan kili",
        "timestamp": 1661912396
    },
    {
        "content": "<p>Maybe <code>expects</code>?</p>",
        "id": 296247951,
        "sender_full_name": "jan kili",
        "timestamp": 1661912432
    },
    {
        "content": "<p>Why repeat the method and comparison on every line?</p>",
        "id": 296247965,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661912448
    },
    {
        "content": "<p>In this case I guess it is readable, but in other cases it may be quite verbose.</p>",
        "id": 296247992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661912484
    },
    {
        "content": "<p>Hmm...</p>\n<div class=\"codehilite\"><pre><span></span><code>expectsOf isPrime [\n    ((1,), False),\n    ((2,), True),\n    ((5,), True),\n    ((19,), True),\n    ((20,), False),\n    ((13195,), False),\n]\n</code></pre></div>",
        "id": 296248009,
        "sender_full_name": "jan kili",
        "timestamp": 1661912523
    },
    {
        "content": "<p>Yeah, i was thinking something like that</p>",
        "id": 296248057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661912537
    },
    {
        "content": "<p>Where isPrime would be any function/lambda.</p>",
        "id": 296248063,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661912550
    },
    {
        "content": "<p>I love it</p>",
        "id": 296248097,
        "sender_full_name": "jan kili",
        "timestamp": 1661912594
    },
    {
        "content": "<p>We could still make room for non-<code>==</code> comparisons, but I like this multiplicity concept</p>",
        "id": 296248125,
        "sender_full_name": "jan kili",
        "timestamp": 1661912630
    },
    {
        "content": "<p>If we don't make test syntax concise/terse/efficient &amp; readable, I predict that we'll end up with <code>foo.roc</code> &amp; <code>foo.tests.roc</code> files - not a terrible fate, but counter to the stated goals of the <code>expect</code> syntax.</p>",
        "id": 296248210,
        "sender_full_name": "jan kili",
        "timestamp": 1661912691
    },
    {
        "content": "<p>Because these incrementally-reasonable formatting algorithm decisions are leading to unreasonable formatting:</p>\n<div class=\"codehilite\"><pre><span></span><code>rangeExclusive = \\low, high -&gt;\n    if low == high then [] else List.range low high\n\n\nexpect\n    values = rangeExclusive 1 1\n\n    values == []\n\n\nexpect\n    values = rangeExclusive 1 2\n\n    values == [1]\n\n\nexpect\n    values = rangeExclusive 1 3\n\n    values == [1, 2]\n\n\nexpect\n    values = rangeExclusive 2 3\n\n    values == [2]\n\n\nexpect\n    values = rangeExclusive 3 3\n\n    values == []\n</code></pre></div>",
        "id": 296248580,
        "sender_full_name": "jan kili",
        "timestamp": 1661913098
    },
    {
        "content": "<p>vs.</p>\n<div class=\"codehilite\"><pre><span></span><code>rangeExclusive = \\low, high -&gt;\n    if low == high then [] else List.range low high\n\n\nexpectsOf rangeExclusive [\n    ((1, 1), []),\n    ((1, 2), [1]),\n    ((1, 3), [1, 2]),\n    ((2, 3), [2]),\n    ((3, 3), []),\n]\n</code></pre></div>",
        "id": 296248740,
        "sender_full_name": "jan kili",
        "timestamp": 1661913247
    },
    {
        "content": "<p>(to be fair, I'm shifting formatter problems onto the compiler by proposing new keywords/behavior, but that might be the best approach when there's no great formatter-only solution)</p>",
        "id": 296248856,
        "sender_full_name": "jan kili",
        "timestamp": 1661913405
    },
    {
        "content": "<p>Hmm but a lot of the improvement is coming from eliminating that unnecessary <code>values</code> variable.<br>\nYou could write the first set of examples more concisely like this<br>\n<code>expect rangeExclusive 3 3 == []</code><br>\nI know there can be more complex cases where you need lots of variables.. but then the <code>expectsOf</code>case wouldn't be as neat either!</p>",
        "id": 296268671,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661930415
    },
    {
        "content": "<p>With today's syntax you can implement the <code>expectsOf</code> operator using <code>List.map</code> and <code>List.all</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">((</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">out</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">rangeExclusive</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">out</span><span class=\"w\"></span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">all</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 296269090,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661930636
    },
    {
        "content": "<p>Then you could extract that logic as a helper function</p>",
        "id": 296269253,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661930726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">testLotsOfThings</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">testCases</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">testCases</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">((</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">out</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">out</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">all</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 296269764,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661930954
    },
    {
        "content": "<p>I think the <code>values</code> variable is only needed for now so it can be printed on test failure but I don't think we plan to require these variables in the long term right?</p>",
        "id": 296286117,
        "sender_full_name": "Anton",
        "timestamp": 1661937702
    },
    {
        "content": "<p>Given how often they will be used I do see the value in introducing <code>expectsOf</code> (or perhaps <code>expectAll</code>).<br>\n<code>expect isPrime 20 |&gt; Bool.not</code> also does not read well. <code>expectFalse isPrime 20</code>feels very nice.</p>",
        "id": 296287442,
        "sender_full_name": "Anton",
        "timestamp": 1661938220
    },
    {
        "content": "<p>Note on the <a href=\"http://list.map\">list.map</a> version. It loses two important properties that I would hope expectof would have.</p>\n<ol>\n<li>Reporting on each test case individually. When test case 3 fails, i would want to see it's args and results printed out.</li>\n<li>Reporting on all test cases even if one fails. If test case 3 and 5 fail, i would hope that with one run of the tests, both failures would get reported.</li>\n</ol>",
        "id": 296329842,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661954156
    },
    {
        "content": "<p>Ah yes, good points!</p>",
        "id": 296355885,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661959545
    }
]