[
    {
        "content": "<p>Hi! Roc looks great so far!</p>\n<p>Out of curiosity a colleague and me are trying to implement a simple platform with a API similar to the Elm Architecture.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">main</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n<span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"test-platform\"</span>\n<span class=\"w\">    </span><span class=\"nv\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">program</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">mainForHost</span><span class=\"p\">]</span>\n\n<span class=\"nv\">mainForHost</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"p\">}</span>\n<span class=\"nv\">mainForHost</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">view</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">program</span><span class=\"nf\">.</span><span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">update</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">program</span><span class=\"nf\">.</span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Unfortunately the <code>roc glue</code> command seems to not to support this use case yet:</p>\n<ol>\n<li>It generates TODOs: <code>\\TODO: SingleTagStruct with closures U1 C17_4</code></li>\n<li>\n<p>It generates symbols not present in the application:</p>\n<div class=\"codehilite\"><pre><span></span><code>  roc__mainForHost_4_caller, was not defined by the app.\n</code></pre></div>\n\n</li>\n<li>\n<p>It tries to derive <code>Clone</code> for the {view, update} Record but not for the subtypes it holds. We tried to just remove the clone (at least Rust didn't complain ...)</p>\n</li>\n</ol>\n<p>So we tried to manually write the glue code: We got it working for a platform like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">mainForHost</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>\n<p>and this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">mainForHost</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But, we tried mulitple hours to write the glue for the above mentioned platform and always hit a segfaults or double free errors when trying, which we weren't able to fix. We found <a href=\"https://github.com/lukewilliamboswell/roc-wasm4\">https://github.com/lukewilliamboswell/roc-wasm4</a>, which had similar platform API, but it is written in Zig.</p>\n<p>Does anybody has written a platform with a similar API in Rust yet? Or, any tips how to debug the glue code? Thanks in advance!</p>",
        "id": 427788914,
        "sender_full_name": "Felix Andreas",
        "timestamp": 1710873365
    },
    {
        "content": "<p>In case somebody else hits the same problem: I think this is what we need: <a href=\"https://github.com/lukewilliamboswell/roc-gui/blob/main/platform/src/roc.rs\">https://github.com/lukewilliamboswell/roc-gui/blob/main/platform/src/roc.rs</a></p>\n<p>We will try again tomorrow</p>",
        "id": 427799311,
        "sender_full_name": "Felix Andreas",
        "timestamp": 1710877360
    }
]