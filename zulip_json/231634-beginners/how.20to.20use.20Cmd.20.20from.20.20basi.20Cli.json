[
    {
        "content": "<p>hi  how  to  use  Cmd  module  to  invoke let say   \"ls\"  command ?? I can't  find  example  for  that</p>",
        "id": 409818039,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703427153
    },
    {
        "content": "<p>Some examples and the API docs here: <a href=\"https://www.roc-lang.org/packages/basic-cli/Cmd\">https://www.roc-lang.org/packages/basic-cli/Cmd</a></p>",
        "id": 409819244,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703428439
    },
    {
        "content": "<p>API I see.  I have  no idea  how to use  it</p>",
        "id": 409819321,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703428498
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">output</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">    </span><span class=\"nx\">Cmd</span><span class=\"p\">.</span><span class=\"nx\">new</span><span class=\"w\"> </span><span class=\"s\">\"ls\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Cmd</span><span class=\"p\">.</span><span class=\"nx\">arg</span><span class=\"w\"> </span><span class=\"s\">\"-l\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Cmd</span><span class=\"p\">.</span><span class=\"nx\">output</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n</code></pre></div>",
        "id": 409819461,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703428631
    },
    {
        "content": "<p>this  I figured  out  but I do not know what to do with  output</p>",
        "id": 409819498,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703428677
    },
    {
        "content": "<p>it is weird  type I don't know  how to work  with</p>",
        "id": 409819565,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703428708
    },
    {
        "content": "<p>Command example in the basic CLI repo: <a href=\"https://github.com/roc-lang/basic-cli/blob/main/examples/command.roc\">https://github.com/roc-lang/basic-cli/blob/main/examples/command.roc</a></p>",
        "id": 409819580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703428723
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Output : {\n    stdout : List U8,\n    stderr : List U8,\n}\n</code></pre></div>",
        "id": 409819685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703428814
    },
    {
        "content": "<p>thx  I will try,  \"Task Output (Output, Error)\"   &lt;--- I couldn't  figure  out  this  notation what does it mean  is different  than usual  Task {} *  or  something  along  those lines</p>",
        "id": 409819844,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703428968
    },
    {
        "content": "<p><code>Task Output (Output, Error)</code>:</p>\n<p>On success, returns the output type I pasted above.<br>\nOn failure, returns a tuple of the output with the error.</p>\n<p>Error is:</p>\n<div class=\"codehilite\"><pre><span></span><code>CommandErr : [\n    ExitCode I32,\n    KilledBySignal,\n    IOError Str,\n]\n</code></pre></div>",
        "id": 409820059,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703429193
    },
    {
        "content": "<p>()  &lt;--  is tuple ?  ok  I get  that</p>",
        "id": 409820147,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703429286
    },
    {
        "content": "<p>Yeah, as long as it has at least 2 elements. Roc does not have 0 or 1 element tuples.</p>",
        "id": 409820375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703429555
    },
    {
        "content": "<p>but  still  I can't  pattern match this </p>\n<div class=\"codehilite\"><pre><span></span><code>        cmdResult  &lt;-Cmd.output command |&gt; Task.await\n        when cmdResult is\n            val -&gt;\n                {stderr : err, stdout : out } = val\n                Task.ok  {}\n            (val,err) -&gt;\n                Task.ok  {}\n</code></pre></div>",
        "id": 409820483,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703429646
    },
    {
        "content": "<p>wait  I forget  if  this is  legal</p>",
        "id": 409820624,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703429767
    },
    {
        "content": "<p><code>Task.await</code> just gives you the success case and delays the error handling. <code>Task.attempt</code> will give you a result with the full type.</p>\n<p>So this should work:</p>\n<div class=\"codehilite\"><pre><span></span><code>        cmdResult  &lt;-Cmd.output command |&gt; Task.attempt\n        when cmdResult is\n            Ok val -&gt;\n                {stderr : err, stdout : out } = val\n                Task.ok  {}\n            Err (val,err) -&gt;\n                Task.ok  {}\n</code></pre></div>",
        "id": 409820739,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703429885
    },
    {
        "content": "<p>thx, task are  black  magic for  me because  they  do not  resemble  anything I worked with  in the  past</p>",
        "id": 409820975,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703430081
    },
    {
        "content": "<p>ok  I finally  manage : )  I need to definitely  play  bit more with Tasks</p>",
        "id": 409822335,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703431086
    },
    {
        "content": "<p>Glad you figured it out</p>",
        "id": 409824745,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703433318
    }
]