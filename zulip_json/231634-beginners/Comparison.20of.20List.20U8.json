[
    {
        "content": "<p>Random question, but how do we do equality for a List U8? </p>\n<p>If I have a large List U8 and then take lots of smaller sublists, is it super efficient to compare these smaller List U8's against each other if I pass them into functions etc? I guess I'm asking if these would be just a comparison of the slice or reference, or is it something deeper?</p>",
        "id": 377189854,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1689921793
    },
    {
        "content": "<p>Would it be inefficient to use a List U8 as a key to a Dict?</p>",
        "id": 377190142,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1689921879
    },
    {
        "content": "<p>Or could I use something like Box (List U8) if I want it to be a reference?</p>",
        "id": 377194375,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1689923228
    },
    {
        "content": "<p>dicts use a hash, which means the whole list is traversed. That might be a problem for very large lists</p>",
        "id": 377203473,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689925794
    },
    {
        "content": "<p>really depends on the specifics how good/bad of an idea this is</p>",
        "id": 377203583,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689925809
    },
    {
        "content": "<p>I'm thinking of a use case when decoding JSON, of using a List U8 input bytes as an index into another data structure.</p>",
        "id": 377217434,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1689929022
    },
    {
        "content": "<p>I feel like if the List U8 is actually stored on the heap and is only a reference, then equality may be very fast.</p>",
        "id": 377217719,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1689929083
    },
    {
        "content": "<p>well yes but not with hashing.</p>",
        "id": 377219911,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689929561
    },
    {
        "content": "<p>for equality we first compare the lengths, then the pointers, and if the pointers are not the same we compare elements</p>",
        "id": 377220072,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689929589
    },
    {
        "content": "<p>but a hash will always look at all the elements</p>",
        "id": 377220137,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689929604
    },
    {
        "content": "<p>If I have a record such as <code>{field : List U8, value : List U8}</code> and the <code>List U8</code> are slices from another larger <code>List U8</code> is this record a fixed size?  I guess I am concerned that putting these lists in record fields will make unnecessary allocations.</p>",
        "id": 377700587,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1690070771
    },
    {
        "content": "<p>The record is always fixed sized, the data being allocation free depends on how you use it</p>",
        "id": 377704009,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690072338
    },
    {
        "content": "<p>If they are always referencing a larger list and never edited, they would be seamless slices and never allocate</p>",
        "id": 377704061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690072366
    },
    {
        "content": "<p>Thanks Brendan that makes sense</p>",
        "id": 377704226,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1690072440
    }
]