[
    {
        "content": "<p>Will/does Roc provide a set of built-in \"standard\" Platforms? Everything I saw inside examples has the platform alongside it. Are we intending to build / already have binding generators (similar to wasm-bindgen for Rust+JSWasm or zigler for Zig+Elixir) to streamline platform development?</p>",
        "id": 258714211,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1634910607
    },
    {
        "content": "<p>a platform is just a rust/c/zig app. It's unlikely you'd want to expose a raw C api to a roc platform. The whole idea is that the external api is wrapped in a way that is more friendly</p>",
        "id": 258714524,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634910744
    },
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/rtfeldman/roc/blob/trunk/examples/hello-rust/platform/src/lib.rs\">https://github.com/rtfeldman/roc/blob/trunk/examples/hello-rust/platform/src/lib.rs</a>. This is not a \"typical\" Rust app. This is similar to the situation before wasm-bindgen, when folks wrote webassembly bindings in rust like this: <a href=\"https://dev.to/shritesh/writing-a-brainfuck-interpreter-in-rust-and-webassembly-13f#webassembly\">https://dev.to/shritesh/writing-a-brainfuck-interpreter-in-rust-and-webassembly-13f#webassembly</a>. Now it's simply:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[wasm_bindgen]\npub fn brainfuck(source: String, input: String) -&gt; String {...}\n</code></pre></div>",
        "id": 258715319,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1634911128
    },
    {
        "content": "<p>There are two open pull requests for a platform based on SDL and one for a web server that might also give some insight</p>",
        "id": 258715714,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1634911301
    },
    {
        "content": "<p>The rust situation is a bit rough because we have to deal with C FFI, which is not hidden at all at the moment. The C FFI turns out to be kind of subtle. We do provide the roc data structures (RocList, RocStr) but even those need to be handled with care</p>",
        "id": 258715971,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634911424
    },
    {
        "content": "<p>so there is room for some macro magic to make the process nicer, but I'm not sure things have crystallized sufficiently to make it worth it to do that now</p>",
        "id": 258716067,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634911459
    },
    {
        "content": "<p>yeah I think binding generators are a good idea at some point, but haven't really thought about the specifics <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 258718873,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912684
    },
    {
        "content": "<p>long-term the idea is that application authors get their platforms from the package repo</p>",
        "id": 258719074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912763
    },
    {
        "content": "<p>so I just write my app and say <code>platform: rtfeldman/blah</code> and that's it</p>",
        "id": 258719125,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912783
    },
    {
        "content": "<p>it just feels like another dependency</p>",
        "id": 258719145,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912792
    },
    {
        "content": "<p>more or less</p>",
        "id": 258719161,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912801
    },
    {
        "content": "<p>but the package repo doesn't exist yet, so for the moment it's all local filesystem!</p>",
        "id": 258719216,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912835
    },
    {
        "content": "<p>Are there any in-built platforms right now?</p>",
        "id": 258719267,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1634912862
    },
    {
        "content": "<p>no, the plan is not to have any ship with the compiler - with the possible exception of like a \"tutorial\" one if we have an interactive tutorial built into the editor</p>",
        "id": 258719426,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912934
    },
    {
        "content": "<p>but I'd like to have all the platforms be sort of on equal footing, give or take author reputation</p>",
        "id": 258719507,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634912972
    },
    {
        "content": "<p>got it. That sounds reasonable.</p>",
        "id": 258719564,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1634912996
    },
    {
        "content": "<p>like I wouldn't want someone to think \"I have a cool idea for a way to do a CLI platform, but what's the point when everyone's gonna use the builtin one anyway\"</p>",
        "id": 258719644,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634913018
    },
    {
        "content": "<p>as opposed to \"ok here's the CLI platform made by the people who made the compiler\" - it's got that reputation behind it, so it will probably be a safe default choice for anyone, but it's still just another platform in the package repo</p>",
        "id": 258719825,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634913101
    },
    {
        "content": "<p>Agreed. Final question: How does the compiler already know how to compile the current platform examples? I don't see any build scripts or configuration.</p>",
        "id": 258720603,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1634913456
    },
    {
        "content": "<p>it's hardcoded for rust/zig/c</p>",
        "id": 258720768,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634913530
    },
    {
        "content": "<p>just looks for host.c/host.zig and builds them, <code>cargo build</code> when it finds a Cargo.toml</p>",
        "id": 258720795,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1634913546
    },
    {
        "content": "<p>nice. Thanks.</p>",
        "id": 258720822,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1634913565
    },
    {
        "content": "<p>we're planning to move that into user space though! Just haven't gotten to it yet. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 258723403,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1634914666
    },
    {
        "content": "<p>Hello, love the language - are there any resources where I can learn more about the platform concept in Roc ?  I would like to try to make a PoC platform for own use, to see if Roc could be used for my own use-case</p>",
        "id": 317648126,
        "sender_full_name": "M.T.",
        "timestamp": 1671833455
    },
    {
        "content": "<p>Currently most platform documentation comes on the form of examples and people.</p>",
        "id": 317660227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671842096
    },
    {
        "content": "<p>It is still a changing space and not much has been done for documentation.</p>",
        "id": 317660248,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671842121
    },
    {
        "content": "<p>Thanks - I can see some talk about platforms in here, and I will also look at the example code.</p>",
        "id": 317733872,
        "sender_full_name": "M.T.",
        "timestamp": 1671892473
    },
    {
        "content": "<p>Feel free to ask any questions you have. I'm sure someone else or I will attempt to answer</p>",
        "id": 317740027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1671895432
    },
    {
        "content": "<p>Is it possible to use multiple packages and import from multiple platforms in the same app? I seem to trigger an infinite loop in the compiler trying to do so while trying to create a simple custom platform that also uses the basics-cli platform (for things like the Task type).  But I might also just be doing this completely wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 324563775,
        "sender_full_name": "Christopher Bertels",
        "timestamp": 1675072223
    },
    {
        "content": "<p>OK. I got it working. Looks like I was missing an <code>imports</code> in the <code>interface</code> decl for my test platform. adding <code>imports [pf.Task.{Task}]</code> fixed it I think</p>",
        "id": 324567253,
        "sender_full_name": "Christopher Bertels",
        "timestamp": 1675073309
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"583135\">@Christopher Bertels</span>, it's strange that this appears to work, we intend the user to only be able to use one platform. Using multiple roc packages/modules is supported however.</p>",
        "id": 324572678,
        "sender_full_name": "Anton",
        "timestamp": 1675075036
    },
    {
        "content": "<p>Hm, yeah not sure if what I said is fully correct, here's the code that seems to work so far:  <a href=\"https://github.com/bakkdoor/roc-platform-test/\">https://github.com/bakkdoor/roc-platform-test/</a> and I think this line fixed my issues: <a href=\"https://github.com/bakkdoor/roc-platform-test/blob/main/src/TestPlatform.roc#L3\">https://github.com/bakkdoor/roc-platform-test/blob/main/src/TestPlatform.roc#L3</a></p>",
        "id": 324575917,
        "sender_full_name": "Christopher Bertels",
        "timestamp": 1675076100
    },
    {
        "content": "<p>This is the example app using both platforms (or rather just packages?! not sure about the right terminology here): <a href=\"https://github.com/bakkdoor/roc-platform-test/blob/main/examples/TestApp.roc\">https://github.com/bakkdoor/roc-platform-test/blob/main/examples/TestApp.roc</a></p>",
        "id": 324576185,
        "sender_full_name": "Christopher Bertels",
        "timestamp": 1675076175
    },
    {
        "content": "<p>Oh I see, you are indeed using only one platform (basic-cli), your TestPlatform.roc is what we call an (interface) module.</p>",
        "id": 324577891,
        "sender_full_name": "Anton",
        "timestamp": 1675076674
    },
    {
        "content": "<p>We have a detailed explenation of what a platform is <a href=\"https://github.com/roc-lang/roc/wiki/Roc-concepts-explained#platform\">here</a>.</p>",
        "id": 324579374,
        "sender_full_name": "Anton",
        "timestamp": 1675077080
    },
    {
        "content": "<p>Cool thanks! :)</p>",
        "id": 324580240,
        "sender_full_name": "Christopher Bertels",
        "timestamp": 1675077351
    },
    {
        "content": "<p>Is there any documentation on interface modules?</p>",
        "id": 324580364,
        "sender_full_name": "Christopher Bertels",
        "timestamp": 1675077381
    },
    {
        "content": "<p>Are they just \"normal\" modules that export functions? Or is there more to them?</p>",
        "id": 324582309,
        "sender_full_name": "Christopher Bertels",
        "timestamp": 1675078012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"583135\">Christopher Bertels</span> <a href=\"#narrow/stream/231634-beginners/topic/platforms/near/324580364\">said</a>:</p>\n<blockquote>\n<p>Is there any documentation on interface modules?</p>\n</blockquote>\n<p>No, not yet</p>\n<p><span class=\"user-mention silent\" data-user-id=\"583135\">Christopher Bertels</span> <a href=\"#narrow/stream/231634-beginners/topic/platforms/near/324582309\">said</a>:</p>\n<blockquote>\n<p>Are they just \"normal\" modules that export functions?</p>\n</blockquote>\n<p>Yes, that pretty much covers it :)</p>",
        "id": 324593475,
        "sender_full_name": "Anton",
        "timestamp": 1675081467
    }
]