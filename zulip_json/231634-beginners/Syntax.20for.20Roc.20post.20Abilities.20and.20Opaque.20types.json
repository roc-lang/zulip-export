[
    {
        "content": "<p>I have not been able to find/understand what the plans are for Roc syntax in a world where Abilities and Opaque types are not longer part of the language. Currently in my project have have places with code like this :</p>\n<div class=\"codehilite\"><pre><span></span><code>JsonBody a := {\n    jsonrpc : Str,\n    method : Method,\n    params : a,\n    id : Str,\n}\n    implements [Encoding]\n</code></pre></div>\n<p>This uses both Abilities and Opaque types, in other places I use the support for <strong>phantom types</strong> in opaque types. I would be glad if someone could show me a code example on how to express that my custom type supports Encoding and also how phantom types would look like in custom types.</p>",
        "id": 499841461,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1739571610
    },
    {
        "content": "<p>From what I understand, Custom types and Opaque types are essentially identical. Custom types just enable exposing internals if wanted.</p>",
        "id": 499843992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739572712
    },
    {
        "content": "<p>So I would mostly view Opaque -&gt; Custom as a rename of a feature with some minor changes</p>",
        "id": 499844022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739572729
    },
    {
        "content": "<p>They should support phantom types in the exact same way</p>",
        "id": 499844073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739572753
    },
    {
        "content": "<blockquote>\n<p>how to express that my custom type supports Encoding</p>\n</blockquote>\n<p>This you can't do. At least not concretely like you could with abilities</p>\n<p>In the new static dispatch world, interfaces are automatically implemented. If a custom type exposes functions that match encode, that custom type implements the encode interface. This is essentially identical to how interfaces work in golang (which might help give you bigger context/reference)</p>",
        "id": 499844411,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739572911
    },
    {
        "content": "<p>So you would probably expose all the encode related functions and then write a test that uses your custom type with encode to ensure everything works.</p>",
        "id": 499844562,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739572973
    },
    {
        "content": "<p>Ok thanks. Cool that interfaces will work as in golang. I had totally missed that.</p>",
        "id": 499891326,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1739604638
    }
]