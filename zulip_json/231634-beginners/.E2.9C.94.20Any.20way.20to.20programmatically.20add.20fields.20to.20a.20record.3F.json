[
    {
        "content": "<p>Is there any way to programmatically build a record, such that various fields may or may not be present? </p>\n<p>My reason being I need to do a json encoding on a record, and certain values absolutely must be omitted entirely from the json object for the API to use its default behavior. As such, I want a way to build a record from a base case, and add fields based on a configuration. </p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># This code will not work, since the `&amp;` operator cannot add fields to a record,</span>\n<span class=\"c1\"># But this shows the idea of the behavior I'm looking for</span>\n<span class=\"nv\">buildRequestBody</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Message</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">messages</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Message</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">*</span>\n<span class=\"nv\">buildRequestBody</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">client</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">messages</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">messages</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">body</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">providerOrder</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">NoProviderOrder</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">body</span>\n<span class=\"w\">            </span><span class=\"nx\">ProviderOrder</span><span class=\"w\"> </span><span class=\"nx\">order</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">body</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">provider</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">order</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">body</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">temperature</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">NoTemperature</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">body</span>\n<span class=\"w\">            </span><span class=\"nx\">Temperature</span><span class=\"w\"> </span><span class=\"nx\">temperature</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">body</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nx\">temperature</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Any suggestions? Obviously for just 2 options, I could hardcode each permutation, but I anticipate about 8-10 optional fields, which would be a LOT of permutations.</p>",
        "id": 438241027,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715574489
    },
    {
        "content": "<p>Come to think of it, can an open record even be used as a return type? Maybe that won't even type check...</p>",
        "id": 438242334,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715575601
    },
    {
        "content": "<p>Yeah using an open record as a return type doesn't usually make sense. If you're returning <code>{ model: Str, messages: List Message}*</code> you're saying that you're returning a record which contains <code>model</code>, <code>messages</code>, and any other fields that your caller wants the record to contain. Since your caller could ask for fields that you have no way of producing, such a return type can only mean that the function never returns at all, i.e. it's an infinite loop or a <code>crash</code></p>",
        "id": 438243630,
        "sender_full_name": "timotree",
        "timestamp": 1715576406
    },
    {
        "content": "<p>If you basically want a record where some of the fields are optional, you could make the optional fields a tag union like <code>{ model: Str, messages: List Message, provider: [Unspecified, Specified Provider], temperature: [Unspecified, Specified Temperature] }</code></p>",
        "id": 438243960,
        "sender_full_name": "timotree",
        "timestamp": 1715576606
    },
    {
        "content": "<p>Problem is that when I encode the record as Json, those are going to be present in the encoded json, and If I include the provider: { order: List Str } in the json, I'm going to get a 400 status error from the API. it must be a valid list, or no entry in the json object at all.</p>",
        "id": 438244222,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715576775
    },
    {
        "content": "<p>This was definitely discussed before, but I would need to do some searching to dig it up</p>",
        "id": 438251687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715581029
    },
    {
        "content": "<p>Fundamentally, it requires opaque types will custom encoding that enables encoding a field as nothing</p>",
        "id": 438251740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715581053
    },
    {
        "content": "<p>Might even require some decoder changes.</p>",
        "id": 438251762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715581063
    },
    {
        "content": "<p>That or you simply have to build different records, pass them to decode, and remerge code paths when you have a list of bytes.</p>",
        "id": 438251878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715581090
    },
    {
        "content": "<p>discussion related to this: <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing/topic/How.20to.20handle.20json.20null.20decoding\">#contributing &gt; How to handle json null decoding</a></p>",
        "id": 438252623,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715581373
    },
    {
        "content": "<p>Checkout <a href=\"https://github.com/lukewilliamboswell/roc-json/blob/main/package/OptionOrNull.roc\">https://github.com/lukewilliamboswell/roc-json/blob/main/package/OptionOrNull.roc</a></p>",
        "id": 438255870,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715582776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> implemented Optional for this use case.</p>",
        "id": 438255971,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715582834
    },
    {
        "content": "<p>We should probably add an example which shows how to do this.</p>",
        "id": 438256186,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715582949
    },
    {
        "content": "<p>Ah! yes, <code>Option</code> is exactly what I'm looking for. Thanks guys! Brendan, I was really quite afraid that my only option was going to be my own custom encoder. Awesome to see its already included in roc-json. <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span></p>",
        "id": 438356702,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715605378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 438408600,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715619713
    }
]