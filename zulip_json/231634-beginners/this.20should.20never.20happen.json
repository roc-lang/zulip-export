[
    {
        "content": "<p>In packages and platforms, there are cases like below where results should always be <code>Ok something</code>, but as code is edited over time you can definitely screw things up. This makes me wonder if it's not better to crash in cases like this, thereby making it a lot easier to notice when it did get screwed up.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">isValidUtf8Byte</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"n\">string</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">byte</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">fromUtf8</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">fail</span>\n</code></pre></div>",
        "id": 418703340,
        "sender_full_name": "Anton",
        "timestamp": 1706555827
    },
    {
        "content": "<p>If it should truly be impossible, never use a default</p>\n<p>Crash or return an error tag anyways. That's my opinion.</p>",
        "id": 418704947,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706556409
    },
    {
        "content": "<p>That said, your function above should probably be rewritten</p>",
        "id": 418704979,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706556422
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">byte</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">     </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">str</span>\n<span class=\"w\">     </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\">-- do whatever the false case of the if expression above does</span>\n</code></pre></div>",
        "id": 418705250,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706556534
    },
    {
        "content": "<p>Actually, after writing this out, I am not 100% sure this should be written this way. It will be slower on the error case.</p>",
        "id": 418705321,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706556560
    },
    {
        "content": "<p>So I would say, for this example, due to perf reasons, probably should just stay the same as the original code but crash.</p>",
        "id": 418705509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706556611
    },
    {
        "content": "<p>Aside, crashing should actually optimize better than using a default.</p>",
        "id": 418705545,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706556626
    },
    {
        "content": "<p>Surely it doesn't matter if it's slow in the error case, when that's never expected to happen?</p>",
        "id": 418778973,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1706598643
    },
    {
        "content": "<p>Perhaps for the case of a missed branch prediction?</p>",
        "id": 418799741,
        "sender_full_name": "Anton",
        "timestamp": 1706607879
    },
    {
        "content": "<blockquote>\n<p>when that's never expected to happen?</p>\n</blockquote>\n<p>I'm not sure that's the case here, the <code>else</code> branch was omitted.<br>\n<code>Str.fromUtf8</code> will never fail if we checked the byte was valid.</p>\n<p>By changing to the code I shared above, the <code>Err _</code> would match the <code>else</code> branch that we don't see in the above code. So it does not match the <code># This will never fail</code> part of the code.</p>",
        "id": 418872776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706631234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> is this just for Url.roc or is it used elsewhere?</p>",
        "id": 418872904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706631264
    },
    {
        "content": "<p>This is indeed just for Url.roc</p>",
        "id": 418873377,
        "sender_full_name": "Anton",
        "timestamp": 1706631414
    },
    {
        "content": "<p>Then we have a separate solution for the full function that already was applied to basic CLI. So should be good.</p>",
        "id": 418876002,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706632151
    }
]