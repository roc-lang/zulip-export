[
    {
        "content": "<p>From the Num docs: \"In some languages <code>shiftLeftBy</code> is implemented as a binary operator <code>&lt;&lt;</code>.\"<br>\nI'd actually like those infix operators, if possible... or at least, they don't seem to be recognized in the REPL...</p>",
        "id": 469983930,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1726237769
    },
    {
        "content": "<p>Yeah, they don't exist in roc currently</p>",
        "id": 469998852,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726241550
    },
    {
        "content": "<p>I hope they do eventually just end up as infix sugar for <code>Num.&lt;bitwise operator name&gt;</code> (and <code>&amp;</code> for <code>bitwiseAnd</code> etc.) just for the sake of POLS for people from other languages where these operators are pretty much universal... but it might make sense to only include them on an import, since not every project would need these and Roc likes to keep namespaces small... but there's probably no conception of \"imported infix sugar\" yet</p>",
        "id": 469999813,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1726241851
    },
    {
        "content": "<p>I honestly don't remember why roc doesn't have these operators. I know it was discussed before, a long long while ago.</p>",
        "id": 470000058,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726241936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> is there a specific reason roc doesn't have infix operations for shifting and bitwise manipulation?</p>",
        "id": 470000312,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726242018
    },
    {
        "content": "<p>original thought was just that they wouldn't come up that often and we might want to use that syntax for something else</p>",
        "id": 470025310,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1726250732
    },
    {
        "content": "<p>I'm open to including them if we think they're common enough things to do in Roc</p>",
        "id": 470025378,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1726250759
    },
    {
        "content": "<p>If we move towards keywords over operators for the logical ops like <code>and</code> and <code>or</code>, we may lean away from adding more symbols. Slight lean, I think these are separate enough anyway</p>",
        "id": 470031945,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726253500
    },
    {
        "content": "<p>Yeah, I don't think they are really common enough to justify symbols. But symbols would definitely make certain classes of code much more readable.</p>",
        "id": 470040494,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726257455
    },
    {
        "content": "<p>They also definitely will be used if we push certain algorithm into roc like dealing with network protocols.</p>",
        "id": 470040574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726257498
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/symbols.20vs.20keywords\">#ideas &gt; symbols vs keywords</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 470104002,
        "sender_full_name": "Notification Bot",
        "timestamp": 1726292533
    },
    {
        "content": "<p>Shouldn't it be possible to implement custom operators for some types (within reason)? Like multiply for matrices or bitwise ops for bitfields etc.? I mean these are some of the most basic things a cpu can do, the idea that they are \"not common\" is a bit silly tbh.</p>",
        "id": 470121878,
        "sender_full_name": "Shaiden Spreitzer",
        "timestamp": 1726300804
    },
    {
        "content": "<p>will roc language make its way in zed editor?</p>",
        "id": 470122026,
        "sender_full_name": "Roman",
        "timestamp": 1726300921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671448\">Shaiden Spreitzer</span> <a href=\"#narrow/stream/231634-beginners/topic/Bit.20shifting.20operators.3F/near/470121878\">said</a>:</p>\n<blockquote>\n<p>Like multiply for matrices or bitwise ops for bitfields etc.?</p>\n</blockquote>\n<p>Maybe, but custom operators or even overriding existing operators is not supported in roc today. I don't think custom operators will ever be supported (just given the mess it becomes in languages like Haskell). Overriding existing operators may someday be a feature, but not in the foreseeable future.</p>\n<blockquote>\n<p>I mean these are some of the most basic things a cpu can do, the idea that they are \"not common\" is a bit silly tbh.</p>\n</blockquote>\n<p>While bitwise operations are primitives for a CPU, that doesn't automatically make them common operations in code. Even looking at a lot of c++ codebases, while bitwise operations are definitely used, they often make up a very small percentage of the total operations. It heavily depends on the use case, but the code written today in roc does not use bitwise operations very often at all. Certainly much less often than many other functions that don't have symbols.</p>",
        "id": 470185224,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726327088
    },
    {
        "content": "<p>Algorithms for things like hashing, encryption, implementation of Bignum, sorting, UUID, and a whole bunch of stuff we usually consider \"stock\" in the standard libraries of most languages commonly use bit manipulation. As a first project  idea in \"building something useful with this shiny new language that is one of the few functional languages to compile down to machine code\" I considered implementing a basic <code>Bignum</code> (ambitious? Maybe), but lo and behold, there's plenty of bit manipulation there. Not only that, a feature of Elixir (my day job) that has become useful more often than you think is pattern-matching on bit patterns (real-world example: validating a UUIDv7). In short, it's definitely useful in use-cases where there's no other option.</p>\n<p>Doesn't necessarily mean it needs infix sugar across the whole language. Which is why I was suggesting it might be an optional import of some kind. It would be neat if I could define (or override the default of) certain infix operators or sugar on a module basis...</p>",
        "id": 471380095,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1726711186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"716256\">Peter Marreck</span> <a href=\"#narrow/stream/231634-beginners/topic/Bit.20shifting.20operators.3F/near/471380095\">said</a>:</p>\n<blockquote>\n<p>Doesn't necessarily mean it needs infix sugar across the whole language. Which is why I was suggesting it might be an optional import of some kind. It would be neat if I could define (or override the default of) certain infix operators or sugar on a module basis...</p>\n</blockquote>\n<p>I think adding <code>&lt;&lt;</code> and <code>&gt;&gt;</code> would be fine on the grounds that although they're only used in a narrow range of scenarios, those scenarios are somewhat common in libraries and the infix op makes them a lot easier to understand</p>",
        "id": 471389145,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1726716197
    },
    {
        "content": "<p>I think the bar for adding <code>&gt;&gt;</code> and <code>&lt;&lt;</code> to builtins is pretty low, but the bar for adding custom infix operators is super high <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 471389191,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1726716228
    },
    {
        "content": "<p>Elm used to have custom infix operators and removed them, and I think that decision was for the best in retrospect based on how they were used in practice</p>",
        "id": 471389274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1726716253
    },
    {
        "content": "<p>we have talked about overloading existing operators (specifically to facilitate custom numeric structures in userspace), which I'm open to, but it's not really a priority right now</p>",
        "id": 471389347,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1726716301
    },
    {
        "content": "<p>Would we also add <code>|</code>, <code>&amp;</code>, and <code>^</code>?</p>",
        "id": 471394565,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726718973
    },
    {
        "content": "<p>here's a crazy idea, if overridable infix operators were removed from Elm (and I believe never added to Elixir, and now Roc) because of the opacity baggage they bring, what if we permit the definition of infix functions with full english names?<br>\nSo in other words if overriding ^ in some context led to hard-to-understand code, perhaps an <code>appendTo</code> infix function that basically did the same thing might still be useful?</p>",
        "id": 474672898,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1727986048
    },
    {
        "content": "<p>So that would be equalient to <code>|&gt; appendTo</code> in current roc (though maybe with slightly different precedence rules)</p>\n<p><code>data |&gt; appendTo list</code></p>",
        "id": 474674258,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727986316
    },
    {
        "content": "<p>I don't we should allow infix functions (without <code>|&gt;</code>), because that would mean you can never be sure about the precedence at a glance, like is <code>appendTo</code> an argument to a function or an infix function.</p>",
        "id": 474778436,
        "sender_full_name": "Anton",
        "timestamp": 1728033431
    },
    {
        "content": "<p>Aside to this, I had no idea Kotlin had infix functions already, this was an idea I came up with independently, but since I now know of a whole conversation complete with criticisms about its existence in that language, I (and anyone else) can just defer to that ;)</p>",
        "id": 475657987,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1728417445
    },
    {
        "content": "<blockquote>\n<p>Kotlin had infix functions already</p>\n</blockquote>\n<p>As in had at some point in the past and removed now?</p>",
        "id": 475697169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728432909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <a href=\"https://kotlinlang.org/docs/functions.html#infix-notation\">https://kotlinlang.org/docs/functions.html#infix-notation</a></p>",
        "id": 475698882,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728434073
    },
    {
        "content": "<p>They still have them</p>",
        "id": 475698888,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728434078
    },
    {
        "content": "<p>I think it's an option in Kotlin because it's not ambiguous with respect to normal function application syntax</p>",
        "id": 475698935,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728434116
    },
    {
        "content": "<p>But still, no need to dig that hole in Roc</p>",
        "id": 475698945,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728434128
    },
    {
        "content": "<p>Because of <code>|&gt;</code></p>",
        "id": 475698952,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728434134
    }
]