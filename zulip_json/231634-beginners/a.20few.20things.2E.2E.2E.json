[
    {
        "content": "<p>Hi all</p>\n<p>First thing I need to ask is: what is going on with lambdas? They are sprinkled throughout the tutorial, without ever actually being formally introduced, but <code>\\... -&gt;...</code> seems essentially equivalent to <code>|...| ...</code> / <code>|...| {...}</code>; I'm not sure if one form is newer and becoming normalised, or if there are different use-cases for them. </p>\n<p>Secondly, there does seem to be a move to make <code>List</code> concatenation simpler with <code>..</code> spread syntax, but (coming from a JS background), my impulse is that this should be unified with the record-making syntax <code>&amp;</code> .</p>\n<p>Thirdly, I like that many infix operators are just syntax sugar for functions. Are there any plans for making custom operators? (EDIT: found some pushback against that idea, which, fair enough :-D )</p>\n<p>Or, perhaps, converting from operators back to their functions? The pipe operator already does the converse (<code>Num(a,b) == a / b == a |&gt; Num.div b</code>), which is like the use of backticks in Haskell. First thought is:  <code>Num.div</code> could be same as <code>(/)</code>: <code>Num.div(a,b) == (/)(a,b)</code></p>\n<p>Oh, and fourth, sorry: I have been bouncing off the docs for the <code>RecordBuilder</code>, with its <code>&lt;-</code> syntax. And I just remembered that the language used to have 'backpassing' with the same operator. Is this backpassing, or something else?</p>",
        "id": 502173133,
        "sender_full_name": "Michael ‚ÄúRosy‚Äù Luder-Rosefield",
        "timestamp": 1740617320
    },
    {
        "content": "<blockquote>\n<p>First thing I need to ask is: what is going on with lambdas?</p>\n</blockquote>\n<p>The old syntax was <code>\\</code> and the new is <code>|..|</code></p>",
        "id": 502176840,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740619323
    },
    {
        "content": "<blockquote>\n<p>Are there any plans for making custom operators?</p>\n</blockquote>\n<p>The plan is to remove Abilities in favour of Static Dispatch -- so we have implicit interfaces and the operators are just sugar for those. I'll dig out the thread and link it here.</p>",
        "id": 502176929,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740619393
    },
    {
        "content": "<p><a class=\"message-link\" href=\"/#narrow/channel/304641-ideas/topic/static.20dispatch.20-.20operator.20desugaring.20to.20methods/near/484629893\">#ideas &gt; static dispatch - operator desugaring to methods @ üí¨</a></p>",
        "id": 502177033,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740619447
    },
    {
        "content": "<blockquote>\n<p>Is this backpassing, or something else?</p>\n</blockquote>\n<p>It's just the syntax for a building a RecordBuilder. The inspiration came from backpassing operator <code>&lt;-</code> but unrelated.</p>",
        "id": 502177203,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740619559
    },
    {
        "content": "<blockquote>\n<p>there does seem to be a move to make¬†<code>List</code>¬†concatenation simpler with¬†<code>..</code>¬†spread syntax</p>\n</blockquote>\n<p>Have you seen these issues? <a href=\"https://github.com/roc-lang/roc/issues/7091\">https://github.com/roc-lang/roc/issues/7091</a></p>\n<p>Maybe that helps you with some additional context?</p>",
        "id": 502177390,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740619670
    }
]