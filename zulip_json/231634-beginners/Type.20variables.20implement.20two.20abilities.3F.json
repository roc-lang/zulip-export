[
    {
        "content": "<p>Is there any way for a type variable to implement two abilities?</p>\n<p>I had code where I had declared a type alias:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Node</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">idx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nx\">Null</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nx\">where</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">implements</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">Inspect</span>\n<span class=\"nx\">Tree</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Node</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">where</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">implements</span><span class=\"w\"> </span><span class=\"nx\">Inpsect</span><span class=\"p\">.</span><span class=\"nx\">Inspect</span>\n</code></pre></div>\n<p>I also have defined a function which required my <code>Tree a</code> to implement <code>Eq</code> for <code>a</code>, so I typed my function:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">isLeafSimilar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tree</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Tree</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"w\"> </span><span class=\"nx\">where</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">implements</span><span class=\"w\"> </span><span class=\"nx\">Eq</span>\n</code></pre></div>\n<p>Adding <code>Inspect</code> to my <code>Tree a</code> alias caused a compiler crash:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">list</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ir</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4854</span>:<span class=\"mi\">50</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>: <span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Removing the requirement for <code>a</code> to implement <code>Inspect</code>, which was previously added for debugging purposes fixed this crash. If possible however, I would like to be able to add both of these abilities directly to my Tree alias, however I can't seem to find any syntax which will allow me to add two abilities to <code>a</code> in my <code>Tree</code> alias declaration. Is there any way to add multiple abilities to a type variable?</p>",
        "id": 417105482,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705858705
    },
    {
        "content": "<p>I think it is just <code>a implements Inspect.Inspect, Eq, Etc</code></p>",
        "id": 417107639,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705860414
    },
    {
        "content": "<p>Ah, I found it! The correct  syntax is <code>where a implements Inspect.Inspect &amp; Eq</code></p>",
        "id": 417119389,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705869594
    },
    {
        "content": "<p>does it have to be qualified as <code>Inspect.Inspect</code> or does <code>Inspect</code> work on its own?</p>",
        "id": 417120600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705870521
    },
    {
        "content": "<p>Actually, no, it does not. However I believe the error message that told me I needed to implement <code>Inspect</code> to use <code>dbg</code> specified the qualified version.</p>",
        "id": 417120852,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705870718
    },
    {
        "content": "<p>I'm planning to file an issue for my original question, since a compiler crash with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">list</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ir</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4854</span>:<span class=\"mi\">50</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>: <span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>was very unhelpful in identifying my  the cause of the failure to compile.</p>",
        "id": 417121016,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705870826
    },
    {
        "content": "<p>thanks!</p>",
        "id": 417122071,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705871601
    },
    {
        "content": "<p>I'm trying to find the most generic reproduction of this compiler crash as possible, however thus far, I have not been able to generate this crash outside of my specific code sample. If I change my type alias and function type in my original code to use the two different abilities, I can still reproduce the crash.  However, in a trivial roc program where I have tried to reproduce the structure (not functionality) of the code which caused the crash, I have not yet been able to do so.</p>\n<p>Should I file an issue with a link to a repo containing the code which will produce the crash, or wait to file until I can abstract the issue more?</p>",
        "id": 417135583,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705882633
    },
    {
        "content": "<p>I'd say create the issue then update it as you get more info, an improved reproduction, etc.</p>",
        "id": 417175572,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705910712
    }
]