[
    {
        "content": "<p>Since the value of an expect expression must be a bool and Tasks do not implement the Equality ability is there any way to use <code>roc test</code> on code with effects?</p>",
        "id": 449004400,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720070703
    },
    {
        "content": "<p>There's a section in <a href=\"https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?usp=sharing\">the Module Params design proposal</a> which talks about the design for Simulation Tests, and Effect Recordings.</p>",
        "id": 449004663,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720070807
    },
    {
        "content": "<p>So the practical answer for today is to go wire up some external test harness that actually calls the compiled binary?</p>",
        "id": 449005081,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720071072
    },
    {
        "content": "<p>Yeah, you could look at how the basic-cli CI tests work for an example of that</p>",
        "id": 449005292,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720071201
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 449005333,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720071233
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/blob/main/ci/expect_scripts/echo.exp\">https://github.com/roc-lang/basic-cli/blob/main/ci/expect_scripts/echo.exp</a></p>",
        "id": 449005334,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720071234
    },
    {
        "content": "<p>Since I have your attention has anyone tried implementing some of the more popular benchmarking suites out there? I was playing around with implementing the Techempower web framework suite and Roc might be the fastest non-manual-memory-managed language on there. And I havent even gotten to performance tweaking...</p>",
        "id": 449005667,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720071398
    },
    {
        "content": "<p>Really? that surprise me. As in, today, roc has a lot of sharp edges that I would expect to mess up perf on something like that without tweaking. Totally makes sense when thinking about where roc should land in the long term (somewhere around go hopefully)</p>",
        "id": 449005898,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720071525
    },
    {
        "content": "<p>Maybe its cheating because I am using sqlite and not incurring the TCP stack latency, but i was hitting low 300k on the score for the single query perf.<br>\n<a href=\"https://www.techempower.com/benchmarks/#hw=ph&amp;test=db&amp;section=data-r22&amp;o=4\">https://www.techempower.com/benchmarks/#hw=ph&amp;test=db&amp;section=data-r22&amp;o=4</a></p>",
        "id": 449006244,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720071731
    },
    {
        "content": "<p>I will run the full suite when i am done to get the apples to apples comparison since those results are run on a VPS</p>",
        "id": 449006373,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720071797
    },
    {
        "content": "<p>But still, that screams...</p>",
        "id": 449006404,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720071810
    },
    {
        "content": "<p>That would be good to check! Though you're correct that Roc should have a pretty good performance edge by default over the other languages there (JIT perf improvements ignored) once Roc is ready, there are two big blockers I can think of. First is as Brendan said, we have a long way to go before Roc performs as well as its design allows for. Second is that we haven't figured out how to make Roc communicate efficiently between applications and platforms for shared memory.</p>",
        "id": 449006653,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720071947
    },
    {
        "content": "<p>I expect JSON decoding will be much slower than encoding. We have ideas for writing a fast pure roc decoder based on ideas from the simdJSON library but I haven't had a change to really get into it. Maybe with the rewrite from the new Encoding/Decoding API's that Trevor is working on we could try it out.</p>",
        "id": 449006727,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720071974
    },
    {
        "content": "<p>Basically break into two stages, first is a fast pass through the input bytes using branchless code to segment, and then parsing.</p>",
        "id": 449006915,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720072085
    },
    {
        "content": "<p>For that test, it looks like everyone else is using Postgres. I wonder how roc scores if we include roc-pg?</p>",
        "id": 449008118,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720072773
    },
    {
        "content": "<p>I was getting there <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . I was going to make basic-webserver + roc-pg a separate stack. First try is all just basic-webserver (and roc-json)</p>",
        "id": 449008477,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720072921
    },
    {
        "content": "<p>I think it will be nice to start tracking some of these numbers internally. Eventually I think it will make a nice promotional piece <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 449009587,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720073489
    },
    {
        "content": "<p>That's a first <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc check\n\nthread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\nzsh: IOT instruction (core dumped)  roc check\n</code></pre></div>",
        "id": 449009995,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720073704
    },
    {
        "content": "<p>whoa! Can you post a reproduction somewhere?</p>",
        "id": 449072909,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720095068
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6867\">https://github.com/roc-lang/roc/issues/6867</a></p>",
        "id": 449130744,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720112056
    },
    {
        "content": "<p>oh and the overflow is in roc check...super intriguing.</p>",
        "id": 449139789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720115594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453714\">Ryan Barth</span> <a href=\"#narrow/stream/231634-beginners/topic/Effectful.20tests.20and.20techempower.20benchmark/near/449008477\">said</a>:</p>\n<blockquote>\n<p>I was getting there <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . I was going to make basic-webserver + roc-pg a separate stack.</p>\n</blockquote>\n<p>Note: <code>roc-pg</code> decoding isnâ€™t as fast as it could yet. I have some plans to improve that later.</p>",
        "id": 449401065,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1720215177
    },
    {
        "content": "<p>For any one who is interested in the outcome here are the initial results.</p>\n<ul>\n<li><a href=\"https://www.techempower.com/benchmarks/#section=test&amp;shareid=d2689fcc-28a0-4f8d-89a5-dc9d8b08fe0c\">Results page</a></li>\n<li><a href=\"https://tfb-status.techempower.com/share/download/d2689fcc-28a0-4f8d-89a5-dc9d8b08fe0c.json\">Benchmark results data</a></li>\n<li><a href=\"https://github.com/r-bar/FrameworkBenchmarks/tree/roc/frameworks/Roc/basic-webserver\">The implementation</a></li>\n</ul>\n<p>Couple caveats. I took this on to get practice writing roc. I thought this would be a good \"platform tour\" for me to learn to work with basic-webserver. I wrote this as though I was going to have to maintain it, not for bit twiddling performance. I am sure it can go faster.</p>\n<p>Next, this initial version is using sqlite because that is what is built into basic-webserver. Because of that I did have to disable some of the database checks in the TFB test suite to allow the benchmark to run. Because of that the results are not formally verified by the benchmark framework. This is a limitation of the framework not supporting sqlite. That said I manually validated the behavior and I believe have made an honest implementation. I will be able to write a formalized version if I do one targeting roc-pg.</p>\n<p>Personally I think this is a really strong showing for such a nascent project, and I learned a ton!</p>",
        "id": 449402195,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720215946
    },
    {
        "content": "<p>really cool! cc <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> in case you want to try out Nea on this benchmark</p>",
        "id": 449403567,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720216875
    },
    {
        "content": "<p>One cool bit that does not show up in the results page (but should!) is the implementation size. The benchmark counts the code size for each implementation. My roc implementation was the smallest in the suite I measured by a factor of 3.</p>\n<div class=\"codehilite\"><pre><span></span><code>* Rust/actix:           1537\n* CSharp/aspnetcore:    2751\n* Roc/basic-webserver:  87\n* Python/django:        409\n* C++/drogon:           2767\n* Go/echo:              292\n* JavaScript/express:   1338\n* Python/fastapi:       853\n* Go/gin:               591\n* PHP/laravel:          1431\n* Elixir/phoenix:       1121\n* Ruby/rails:           553\n* Java/spring:          665\n* Zig/zap:              577\n</code></pre></div>\n<p>Sample count command:</p>\n<div class=\"codehilite\"><pre><span></span><code>Running &quot;cloc --yaml --follow-links . | grep code | tail -1 | cut -d: -f 2&quot; (cwd=/FrameworkBenchmarks/frameworks/Rust/actix)\n</code></pre></div>",
        "id": 449403573,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720216879
    },
    {
        "content": "<p>Iâ€™m curious how much optimization the others are doing (vs just writing a typical-looking implementation)</p>",
        "id": 449403672,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720216942
    },
    {
        "content": "<p>this is a situation where supporting interpolation in string patterns would undoubtedly improve performance</p>",
        "id": 449403718,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720216979
    },
    {
        "content": "<p>The suite categorizes implementations into \"Realistic\" and \"Stripped\". These values are self reported and I would have to go read some to give you an answer to how honest the implementations are.</p>",
        "id": 449403771,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720217027
    },
    {
        "content": "<p>like if we could do <code>\"/users/$(userId)\" -&gt; ...</code> that would perform better (and read better imo) than <code>[\"users\", userId] -&gt; ...</code></p>",
        "id": 449403845,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720217069
    },
    {
        "content": "<p>yeah trying this with nea would be really cool. I'll try to make some of the basic-webserver url/db stuff work with nea</p>",
        "id": 449404328,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720217442
    },
    {
        "content": "<p>What is nea?</p>",
        "id": 449404471,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720217543
    },
    {
        "content": "<p><a href=\"https://github.com/tweedegolf/nea\">https://github.com/tweedegolf/nea</a></p>",
        "id": 449404509,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720217567
    },
    {
        "content": "<p>in short, another roc webserver platform that does some cool things with allocators</p>",
        "id": 449404560,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720217581
    },
    {
        "content": "<p>which in theory gives better, but certainly more predictable performance</p>",
        "id": 449404631,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720217599
    },
    {
        "content": "<p>Oh I have seen this! I already had it starred <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 449404773,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720217629
    },
    {
        "content": "<p>yeah so specifically what needs work I think is the database (exposing some TCP socket, I think). the rest I think is just a matter of copying the roc code and that should work fine</p>",
        "id": 449405834,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720217956
    },
    {
        "content": "<p>From writing it I would like to point out 2 places I think <code>basic-webserver</code> made it hard to have a 100% conformant implementation.</p>\n<ul>\n<li>Trying to represent independent parallel tasks. This is what hurt us in the \"multiple queries\" benchmark. (Unfortunately that is the one I have looked at in this benchmark in the past because it seems to mimic real application performance the closest). As a result we end up sending up to 500 <strong>sequential</strong> database requests per http request.</li>\n<li>No implementation of the date primitives to add a <a href=\"https://www.rfc-editor.org/rfc/rfc2616#section-3.3\">compliant</a> <code>Date</code> header to the response. Particularly the day of week calculation.</li>\n</ul>",
        "id": 449406527,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720218290
    },
    {
        "content": "<p>We also run the sqlite database with a mutex. Meaning only one thread can interact at a time. I bet that hurts perf (though it might just add back in the equivalent of the database latency)</p>",
        "id": 449406963,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720218452
    },
    {
        "content": "<p>concurrency is a work in progress</p>",
        "id": 449408007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720219266
    },
    {
        "content": "<p>concurrent tasks, that is</p>",
        "id": 449408042,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720219295
    },
    {
        "content": "<p>but individual requests can run independently right?</p>",
        "id": 449408057,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720219315
    },
    {
        "content": "<p>at least in nea I think they can as far as the platform is concerned</p>",
        "id": 449408105,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720219327
    },
    {
        "content": "<p>I am glad I didn't just miss it by being dumb / new <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 449408137,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720219344
    },
    {
        "content": "<p>Most of the tests require the database (all except <code>json</code> and <code>plaintext</code>). From what <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> said and the fact you are running tokio / hyper under the hood I would imagine the answer is yes, except you are stuck waiting for that mutex.</p>",
        "id": 449408536,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720219472
    },
    {
        "content": "<p>but, why is this</p>\n<blockquote>\n<p>We also run the sqlite database with a mutex</p>\n</blockquote>\n<p>why is exclusive access needed?</p>",
        "id": 449408735,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720219647
    },
    {
        "content": "<p>Using something like <a href=\"https://docs.rs/tokio/latest/tokio/sync/struct.RwLock.html\">RWLock</a> would probably help. Many of the tests are read only.</p>",
        "id": 449408824,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720219700
    },
    {
        "content": "<p>It isn't need. That's just how it's currently inplemented</p>",
        "id": 449408840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720219729
    },
    {
        "content": "<p>But the way the API is setup the platform cant make guarantees about whether the given query is mutating or not.</p>",
        "id": 449408880,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720219767
    },
    {
        "content": "<p>ah ok but I'll need to do some custom things anyway for nea. So perhaps we can lift that restriction in nea</p>",
        "id": 449408883,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720219769
    },
    {
        "content": "<p>isn't dealing with mutation the DBs job?</p>",
        "id": 449408899,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720219786
    },
    {
        "content": "<p>The correct implementation would be to set sqlite to multi threaded mode and spawn one connection per thread. Then access it through that. Also would be great to use prepared queries with longer lifetimes instead of compiling the query on every call.</p>",
        "id": 449408909,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720219792
    },
    {
        "content": "<p>I'll definitely take a look at multi threading for sqlite as I work on updating the API. I want to make that nicer</p>",
        "id": 449410563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720221042
    },
    {
        "content": "<p>Only just starting to work on things, but the <a href=\"https://github.com/roc-lang/basic-webserver/tree/sqlite-improvements\">sqlite-improvements</a> branch now uses an sqlite connection per thread. For a super basic local test with a 4 core server, got a 17% speed increase. Honestly less than I expected, but still nice.</p>",
        "id": 449420187,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720227871
    },
    {
        "content": "<p>Just benchmarked with <code>examples/sqlite3.roc</code> with the print commented out.</p>",
        "id": 449420233,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720227908
    }
]