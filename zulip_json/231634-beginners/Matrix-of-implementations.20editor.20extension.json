[
    {
        "content": "<p>I only know Roc as much as I recall from Richard Feldman's talks, so bare with me and my assumptions.<br>\nI've written up my master thesis idea in poits, so it's easier to read:</p>\n<ul>\n<li>In OO languages adding new operation to a set of types enforces change in all these types</li>\n<li>In FP adding a new  handled type case enforces change in all relevent functions</li>\n<li>You can't add both new types and new operations without recompiling existing code</li>\n<li>The above is known as Expression Problem <a href=\"https://en.wikipedia.org/wiki/Expression_problem\">https://en.wikipedia.org/wiki/Expression_problem</a></li>\n<li>There are many solutions, my favourite: singleton traits/protocols/concepts combined into larger concepts</li>\n<li>This solution makes it so you implement each pair typeâ¨‰operation separately</li>\n<li>Problem as it's defined in literature solved, but:</li>\n<li>... no organization is now enforced on your implementations,</li>\n<li>... if you organize you put things to the same file either by function, or by type, so you're still forced to jump around</li>\n<li>My solution: display implementations in a matrix</li>\n<li>On X axis all functions that get some abstraction, on Y axis all instances of that abstraction, implementations in cells</li>\n<li>Crucially: don't treat code as code, but as a higher level structure, that gets materialized only when compiled</li>\n<li>Benefit: automatic recollection of commonalities. Common parts of the implementations are displaed as recollected, separate are displayed as switched on.</li>\n<li>On compilation best performing code is formed</li>\n<li>Additionally: represent a single multi-argument function as a matrix</li>\n<li>Two selected arguments on X, Y axis, the rest is switched on in implementations.</li>\n</ul>\n<p>Why I thought of Roc for this?</p>\n<ul>\n<li>Extensible editor project - prefect environment for an extension like this</li>\n<li>All functions pure - easier to reason about. Taking out common parts of implementations shouldn't result in any changes in behavior, as well as trasposition in relation to arguments</li>\n<li>I've heared Roc has something like traits/protocols/concepts.</li>\n</ul>\n<p>What problems do I forsee?</p>\n<ul>\n<li>Roc doesn't have stable versioning iirc. For a master thesis I'd need a recreatable enivronment.</li>\n<li>The solution shuold allow for dynamic dispatch. Rust's traits do allow that (although it requires going through hoops, as I've been made aware of). Does Roc provide dynamic dispatch at all, being pure functional? Cause I've learned Haskell doesn't really.</li>\n<li>The editor is at early stage of development (?). I'd need to finish my work (at least the implementation part) up to June indeally.</li>\n</ul>\n<p>Please, give me some feedback. I personally think this is a good overall idea, but it will serve as my master thesis, and has to be grounded to some level, apart from having the \"cool factor\".</p>",
        "id": 423020152,
        "sender_full_name": "Zwatotem",
        "timestamp": 1708696383
    },
    {
        "content": "<p>The editor for the most part doesn't exist currently, so it wouldn't be something to build off of.</p>",
        "id": 423039544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708702463
    },
    {
        "content": "<p>Also, roc has no form of dynamic dispatch. That said, you can build something that is similar to dynamic dispatch depending on your exact goals.</p>\n<p>You could use a record of functions passed around instead of an Ability (roc's traits).</p>",
        "id": 423040062,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708702599
    },
    {
        "content": "<p>These do feel like major roadblocks. I may just end up writing this for Rust or Go, althought I'll probably have a lot of trouble with formal analysis of functions, assembling different, logically equivalent views of the same functions.</p>",
        "id": 423042762,
        "sender_full_name": "Zwatotem",
        "timestamp": 1708703414
    },
    {
        "content": "<p>I like this, very much!</p>\n<p>I have been already trying to imagine how to conceptualize the different aspects of the flow of the data trough Roc program, and whilst struggling to put clear cuts on it I imagined that you have to have to reduce a representation to a form of a 2d matrix for easiest and clearest comprehension of what is going on.</p>",
        "id": 423092053,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1708721274
    },
    {
        "content": "<p>Try to sketch up a idea on a napkin drawings or something first, it would help all of us!</p>",
        "id": 423092255,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1708721359
    },
    {
        "content": "<p>It took me a while, but I just made a <a href=\"https://ujchmura-my.sharepoint.com/:o:/g/personal/grzegorz_przybylski_student_uj_edu_pl/Eq8zHWZhCFZGkFO2jMEMutYB4TenyItP1PJPTPqyxLWD8w?e=MXqQHb\">notepad</a> with some concept tables. I hope it helps to visualize, what I have in mind.</p>",
        "id": 424182449,
        "sender_full_name": "Zwatotem",
        "timestamp": 1709282637
    },
    {
        "content": "<p>Have you looked at Julia?</p>",
        "id": 424278428,
        "sender_full_name": "Chris Wesseling",
        "timestamp": 1709309590
    },
    {
        "content": "<p>Actually, informed question this time. How statically can you write Julia code? Can I make all the variables statically typed unless I know I will need a dynamic dispatch?</p>",
        "id": 424284869,
        "sender_full_name": "Zwatotem",
        "timestamp": 1709311264
    }
]