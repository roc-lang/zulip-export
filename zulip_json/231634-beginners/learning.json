[
    {
        "content": "<p>Hello!</p>\n<p>Could you tell me what I'm doing wrong here?</p>\n<div class=\"codehilite\"><pre><span></span><code>Maybe a := [Just a, Nothing]\n\nlast : List a -&gt; Maybe a\nlast = \\lst -&gt;\n    when lst is\n        [] -&gt; Nothing\n        [x] -&gt; Just x\n        [_, .. as xs] -&gt; last xs\n</code></pre></div>\n<p>Also, I'd like to know if there's a unit type? (I couldn't find it).</p>\n<div class=\"codehilite\"><pre><span></span><code>last : List a -&gt; Result () a\nlast = \\lst -&gt;\n    when lst is\n        [] -&gt; Err ()\n        [x] -&gt; Ok x\n        [_, .. as xs] -&gt; last xs\n</code></pre></div>",
        "id": 422006033,
        "sender_full_name": "Benjamin Thomas",
        "timestamp": 1708171153
    },
    {
        "content": "<p>welcome! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  the unit type is <code>{}</code></p>",
        "id": 422006056,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708171195
    },
    {
        "content": "<p>I think you want <code>Maybe a : [ ... ]</code> instead of <code>:=</code></p>",
        "id": 422006120,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708171224
    },
    {
        "content": "<p>the way it's currently written, it's defining <code>Maybe</code> as an <a href=\"https://www.roc-lang.org/tutorial#opaque-types\">opaque type</a></p>",
        "id": 422006148,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708171248
    },
    {
        "content": "<p>but the way it's being used is as a type alias (<code>:</code> instead of <code>:=</code>)</p>",
        "id": 422006170,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708171270
    },
    {
        "content": "<p>Awesome thanks! I looked at Roc last year and I see it's evolving nicely, congrats :)</p>\n<p>Is it possible to inspect a failed expect case. I'd like to see what's wrong when something failed.</p>\n<p>I tried using dbg but it's not a valid construct</p>\n<p>expect (dbg (last [1, 2, 3])) == Just 4</p>",
        "id": 422006516,
        "sender_full_name": "Benjamin Thomas",
        "timestamp": 1708171580
    },
    {
        "content": "<p>ah, <code>dbg</code> can't be used as an expression yet, just a statement so far</p>",
        "id": 422007130,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708172237
    },
    {
        "content": "<p>but if you do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    actual = last [1, 2, 3]\n    actual == Just 4\n</code></pre></div>\n<p>then if it fails, <code>roc test</code> will print out what <code>actual</code> was</p>",
        "id": 422007246,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708172361
    },
    {
        "content": "<p>because it prints out the values of all named variables in the last expression</p>",
        "id": 422007259,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708172378
    },
    {
        "content": "<p>Many thanks that does it! <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"></p>",
        "id": 422007522,
        "sender_full_name": "Benjamin Thomas",
        "timestamp": 1708172619
    },
    {
        "content": "<p>Roc does not use linked list but arrays/vectors. So you don't need a recursion.</p>\n<div class=\"codehilite\"><pre><span></span><code>last = \\lst -&gt;\n    when lst is\n        [] -&gt; Nothing\n        [.., x] -&gt; Just x\n</code></pre></div>\n<p>See: <a href=\"https://www.roc-lang.org/tutorial#pattern-matching-on-lists\">https://www.roc-lang.org/tutorial#pattern-matching-on-lists</a></p>",
        "id": 422015768,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1708180416
    }
]