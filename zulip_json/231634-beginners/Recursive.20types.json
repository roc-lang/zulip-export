[
    {
        "content": "<p>I understand that recursive datatypes are not supported in Roc, but what is the alternative? The error message produced when trying to define a recursive type is:</p>\n<div class=\"codehilite\"><pre><span></span><code>── NESTED DATATYPE ────────────────────────────────────────────────── main.roc ─\n\nNode is a nested datatype. Here is one recursive usage of it:\n\n10│  Node a : [One a, Many List Node a]\n                                ^^^^\n\nBut recursive usages of Node must match its definition:\n\n10│  Node a : [One a, Many List Node a]\n     ^^^^^^\n\nNested datatypes are not supported in Roc.\n\nHint: Consider rewriting the definition of Node to use the recursive type with the same arguments.\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>The line I find confusing is <code>Hint: Consider rewriting the definition of Node to use the recursive type with the same arguments.</code></p>\n<p>I interpret this as 'you should define some other type with the same arguments that has the same structure to use in your <code>Node</code> type'. I can try to do this using something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node node : [One node, Many List MetaNode node]\nMetaNode node : [One node, Many List Node node]\n</code></pre></div>\n<p>Although this can lead to some confusing type errors. For example, here is a function that would flatten a list of nodes (not actually sure this function works, but I cannot get it to compile to test because of the type errors, there is probably a better way to write this):</p>\n<div class=\"codehilite\"><pre><span></span><code>flatten : List (Node a) -&gt; List a\nflatten = \\list -&gt;\n    res = List.walk list {flatList: []} \\state, elem -&gt;\n        when elem is\n            One x -&gt; { state &amp; flatList: List.append state.flatList x }\n            Many x -&gt; { state &amp; flatList: List.concat state.flatList (flatten x) }\n    res.flatList\n\nexpect flatten [One &quot;a&quot;, Many [One &quot;b&quot;, One &quot;c&quot;], One &quot;d&quot;] == [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\n</code></pre></div>\n<p>This gives some types errors when <code>roc check</code>-ing it:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ──────────────────────────────────────────────────── main.roc ─\n\nThis 3rd argument to walk has an unexpected type:\n\n82│&gt;      res = List.walk list {flatList: []} \\state, elem -&gt;\n83│&gt;          when elem is\n84│&gt;              One x -&gt; { state &amp; flatList: List.append state.flatList x }\n85│&gt;              Many x -&gt; { state &amp; flatList: List.concat state.flatList (flatten x) }\n\nThe argument is an anonymous function of type:\n\n    { … }, [\n        Many (List *),\n        One a,\n    ] -&gt; { … }\n\nBut walk needs its 3rd argument to be:\n\n    { … }, [\n        Many (List a) ? a,\n        One a,\n    ] as a -&gt; { … }\n\n\n── TYPE MISMATCH ──────────────────────────────────────────────────── main.roc ─\n\nThis 1st argument to flatten has an unexpected type:\n\n88│  expect flatten [One &quot;a&quot;, Many [One &quot;b&quot;, One &quot;c&quot;], One &quot;d&quot;] == [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe argument is a list of type:\n\n    List [\n        Many (List *),\n        One Str,\n    ]\n\nBut flatten needs its 1st argument to be:\n\n    List [\n        Many (List a) ? Str,\n        One Str,\n    ] as a\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>I find these to be fairly cryptic and I'm not sure whats going on here, does this have to do with the way I defined the cyclically referential types, or is my implementation wrong/weird? Any advice/help would be appreciated.</p>",
        "id": 403741419,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1700728897
    },
    {
        "content": "<p>We have unit tests for the compiler that use structures like this (Rose trees), so I'm pretty sure it should work.<br>\nThe one thing that jumps out to me is that if this was my code, I would definitely add parentheses to the type definition to be clear how things are grouped.</p>\n<div class=\"codehilite\"><pre><span></span><code>Node a : [One a, Many (List (Node a))]\n</code></pre></div>",
        "id": 403743246,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700729613
    },
    {
        "content": "<p>I did a little test in the web REPL and it seems OK<br>\n<a href=\"/user_uploads/22008/0qBeiraqmncF0L_MJw5hc07O/Screenshot-2023-11-23-at-08.59.41.png\">Screenshot-2023-11-23-at-08.59.41.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/0qBeiraqmncF0L_MJw5hc07O/Screenshot-2023-11-23-at-08.59.41.png\" title=\"Screenshot-2023-11-23-at-08.59.41.png\"><img src=\"/user_uploads/22008/0qBeiraqmncF0L_MJw5hc07O/Screenshot-2023-11-23-at-08.59.41.png\"></a></div>",
        "id": 403744359,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700730007
    },
    {
        "content": "<p>The grouping fixed it, thanks</p>",
        "id": 403746651,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1700730925
    },
    {
        "content": "<p>Yeah, recursive types are allowed, recursive values are not.</p>\n<p>The problem was that without the grouping, it saw the nested use of <code>Node</code> as a tag with 0 arguments, and the top level definition of <code>Node a</code> was a tag with 1 argument.</p>",
        "id": 403805109,
        "sender_full_name": "Sky Rose",
        "timestamp": 1700751444
    },
    {
        "content": "<p>Is there a way that this compiler error could be better? It might be hard with the grouping issues, but I feel like it should be possible for the compiler to know that I have given a tag that should have 1 argument 0 arguments and point that out. I'm not quite sure how aliases are defined in the compiler though, eg when they are defined.</p>",
        "id": 403849120,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1700769274
    },
    {
        "content": "<p>Yeah, without the parens, I think it should be an invalid type for other reasons. I don't think you can partially apply a type, so should be a way to make the errors a lot nicer</p>",
        "id": 403850015,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700769885
    },
    {
        "content": "<p>Like typing something as <code>Node : List</code> is invalid cause <code>List</code> needs a type variable. That should also be hit in your example.</p>",
        "id": 403850459,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700770312
    },
    {
        "content": "<p>I've been playing around with this a little more and it looks like something like <code>Node : List</code> <strong>doesn't</strong> produce a compile error immediately when using it in the repl or using <code>roc check</code>.  I don't believe there is a way to get it to actually work though (its not like you can just type <code>Node</code> in place of <code>List</code> because <code>Node</code> expects no args). This makes me think that a type like <code>Node : List</code> should just error immediately, not sure if this is the intended behavior or not.</p>",
        "id": 403851909,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1700771435
    },
    {
        "content": "<p>Yes, I think it should error immediately</p>",
        "id": 403857154,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700775444
    },
    {
        "content": "<p>Is there any case where writing <code>List</code> without another type is valid?  I know the reason roc functions aren't curried is to report better errors (and be generally less confusing) in the case of providing the wrong number of arguments. Is the same thing generally possible with types in roc?</p>",
        "id": 403857465,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1700775664
    },
    {
        "content": "<p>I don't think it is ever valid</p>",
        "id": 403859119,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700776982
    }
]