[
    {
        "content": "<p>Was trying some basic church numeral stuff and when doing exponentiation ran into this example that overflows the stack: <code>((((\\f -&gt; \\x -&gt; f (f x))(\\f -&gt; \\x -&gt; f (f x))))(\\x -&gt; x + 1))(0)</code></p>\n<p>This is surprising to me, is there something special I need to do in Roc for this to work? GHCi returns <code>4</code>.</p>",
        "id": 439348289,
        "sender_full_name": "Barend Venter",
        "timestamp": 1716031779
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6485\">https://github.com/roc-lang/roc/issues/6485</a></p>\n<p>Thinking I might have run into this!</p>",
        "id": 439365659,
        "sender_full_name": "Barend Venter",
        "timestamp": 1716048448
    },
    {
        "content": "<p>Compiler stack overflow or execution stack overflow?</p>",
        "id": 439367528,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716050330
    },
    {
        "content": "<p>Nothing exists for this, at least not currently</p>",
        "id": 439367548,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716050348
    },
    {
        "content": "<p>Parser is in rust currently. No plans for roc parsing in roc cureently</p>",
        "id": 439367552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716050363
    },
    {
        "content": "<p>Given that I can wrap it in a function and it still crashed the REPL, I'm pretty confident now that it's some static analysis in the compiler. After all you can write <code>neverEvaluated = \\_ -&gt; crash \"Oh no!\"</code> without consequences, although I suppose the platform gets to choose how to handle <code>crash</code> and it's possible that the REPL handles it in some trivial way.</p>",
        "id": 439367651,
        "sender_full_name": "Barend Venter",
        "timestamp": 1716050459
    },
    {
        "content": "<p>Interestingly this works:</p>\n<div class=\"codehilite\"><pre><span></span><code>» f1 = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x))\n\n&lt;function&gt; : (a -&gt; a) -&gt; (a -&gt; a)\n» f2 = f1 (\\x -&gt; x + 1)\n\n&lt;function&gt; : Num a -&gt; Num a\n» f2 0\n\n4 : Num *\n</code></pre></div>",
        "id": 439454113,
        "sender_full_name": "Krzysztof Kielak",
        "timestamp": 1716140278
    },
    {
        "content": "<p>and even this:</p>\n<div class=\"codehilite\"><pre><span></span><code>» ff = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x)) (\\x -&gt; x + 1)\n\n&lt;function&gt; : Num a -&gt; Num a\n» ff 0\n\n4 : Num *\n</code></pre></div>",
        "id": 439454578,
        "sender_full_name": "Krzysztof Kielak",
        "timestamp": 1716140719
    },
    {
        "content": "<p>It might be useful to note that this definition breaks - so there might be some scoping problem ... just guessing</p>\n<div class=\"codehilite\"><pre><span></span><code>» f = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x)) (\\x -&gt; x + 1)\n\n── DUPLICATE NAME ──────────────────────────────────────────────────────────────\n\nThe f name is first defined here:\n\n4│      f = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x)) (\\x -&gt; x + 1)\n        ^\n\nBut then it&#39;s defined a second time here:\n\n4│      f = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x)) (\\x -&gt; x + 1)\n                                    ^\n\nSince these variables have the same name, it&#39;s easy to use the wrong\none by accident. Give one of them a new name.\n\n\n\n── DUPLICATE NAME ──────────────────────────────────────────────────────────────\n\nThe f name is first defined here:\n\n4│      f = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x)) (\\x -&gt; x + 1)\n        ^\n\nBut then it&#39;s defined a second time here:\n\n4│      f = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x)) (\\x -&gt; x + 1)\n               ^\n\nSince these variables have the same name, it&#39;s easy to use the wrong\none by accident. Give one of them a new name.\n\n\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nThis expression is used in an unexpected way:\n\n4│      f = ((\\f -&gt; \\x -&gt; f (f x)) \\f -&gt; \\x -&gt; f (f x)) (\\x -&gt; x + 1)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is:\n\n    Num * -&gt; Num *\n\nBut you are trying to use it as:\n\n    (Num a -&gt; Num a) -&gt; (Num a -&gt; Num a)\n</code></pre></div>",
        "id": 439454917,
        "sender_full_name": "Krzysztof Kielak",
        "timestamp": 1716141055
    },
    {
        "content": "<p>Experimenting with the Y combinator, I notice something very confusing. If I shadow the name, it works, and correctly shows me a type error!</p>\n<div class=\"codehilite\"><pre><span></span><code>» y = (\\x -&gt; x x)(\\y -&gt; y y)\n\n── DUPLICATE NAME ──────────────────────────────────────────────────────────────\n\nThe y name is first defined here:\n\n4│      y = (\\x -&gt; x x)(\\y -&gt; y y)\n        ^\n\nBut then it&#39;s defined a second time here:\n\n4│      y = (\\x -&gt; x x)(\\y -&gt; y y)\n                         ^\n\nSince these variables have the same name, it&#39;s easy to use the wrong\none by accident. Give one of them a new name.\n\n\n\n── CIRCULAR TYPE ───────────────────────────────────────────────────────────────\n\nI&#39;m inferring a weird self-referential type for y:\n\n4│      y = (\\x -&gt; x x)(\\y -&gt; y y)\n        ^\n\nHere is my best effort at writing down the type. You will see ∞ for\nparts of the type that repeat something already printed out\ninfinitely.\n\n    ∞ -&gt; ∞\n</code></pre></div>\n<p>But if I get rid of the name shadowing and call it something else, Roc breaks!</p>\n<div class=\"codehilite\"><pre><span></span><code>» fix = (\\x -&gt; x x)(\\y -&gt; y y)\n\nthread &#39;main&#39; has overflowed its stack\nfatal runtime error: stack overflow\nfish: Job 1, &#39;nix run github:roc-lang/roc -- …&#39; terminated by signal SIGABRT (Abort)\n</code></pre></div>",
        "id": 439462567,
        "sender_full_name": "Barend Venter",
        "timestamp": 1716148447
    },
    {
        "content": "<p>That's not too surprising. The first case just hits an error at an earlier stage in the compiler. So you get a pretty print out. The second example crashes the compiler later</p>",
        "id": 439477159,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716163643
    },
    {
        "content": "<p>I assume it is crashing in type checking, but would need to see the exact stack trace</p>",
        "id": 439477177,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716163671
    }
]