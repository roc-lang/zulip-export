[
    {
        "content": "<p>I know very little about compilers and type-checkers, so this might be obvious, but would it be possible for the compiler to check this pattern match for exhaustiveness without the user supplying the default case <code>_ -&gt; crash</code>? I believe a U8 can only contain numbers 0 to 63 and there's no other values like a <code>NaN</code> value like for floats. I admit this is a pretty rare situation, so I understand if it's not in scope, and I imagine it's the kind of thing that could kill compiler performance.</p>\n<div class=\"codehilite\"><pre><span></span><code># Convert a byte, represented as a U8 to a list of (big-endian) bits, represented as a list of bools.\nbyteToBits : U8 -&gt; List Bool\nbyteToBits = \\byte -&gt;\n    when byte is\n        0 -&gt; [Bool.false, Bool.false, Bool.false, Bool.false, Bool.false, Bool.false]\n        1 -&gt; [Bool.false, Bool.false, Bool.false, Bool.false, Bool.false, Bool.true]\n        2 -&gt; [Bool.false, Bool.false, Bool.false, Bool.false, Bool.true, Bool.false]\n        3 -&gt; [Bool.false, Bool.false, Bool.false, Bool.false, Bool.true, Bool.true]\n        4 -&gt; [Bool.false, Bool.false, Bool.false, Bool.true, Bool.false, Bool.false]\n        5 -&gt; [Bool.false, Bool.false, Bool.false, Bool.true, Bool.false, Bool.true]\n        6 -&gt; [Bool.false, Bool.false, Bool.false, Bool.true, Bool.true, Bool.false]\n        7 -&gt; [Bool.false, Bool.false, Bool.false, Bool.true, Bool.true, Bool.true]\n        8 -&gt; [Bool.false, Bool.false, Bool.true, Bool.false, Bool.false, Bool.false]\n        9 -&gt; [Bool.false, Bool.false, Bool.true, Bool.false, Bool.false, Bool.true]\n        10 -&gt; [Bool.false, Bool.false, Bool.true, Bool.false, Bool.true, Bool.false]\n        11 -&gt; [Bool.false, Bool.false, Bool.true, Bool.false, Bool.true, Bool.true]\n        12 -&gt; [Bool.false, Bool.false, Bool.true, Bool.true, Bool.false, Bool.false]\n        13 -&gt; [Bool.false, Bool.false, Bool.true, Bool.true, Bool.false, Bool.true]\n        14 -&gt; [Bool.false, Bool.false, Bool.true, Bool.true, Bool.true, Bool.false]\n        15 -&gt; [Bool.false, Bool.false, Bool.true, Bool.true, Bool.true, Bool.true]\n        16 -&gt; [Bool.false, Bool.true, Bool.false, Bool.false, Bool.false, Bool.false]\n        17 -&gt; [Bool.false, Bool.true, Bool.false, Bool.false, Bool.false, Bool.true]\n        18 -&gt; [Bool.false, Bool.true, Bool.false, Bool.false, Bool.true, Bool.false]\n        19 -&gt; [Bool.false, Bool.true, Bool.false, Bool.false, Bool.true, Bool.true]\n        20 -&gt; [Bool.false, Bool.true, Bool.false, Bool.true, Bool.false, Bool.false]\n        21 -&gt; [Bool.false, Bool.true, Bool.false, Bool.true, Bool.false, Bool.true]\n        22 -&gt; [Bool.false, Bool.true, Bool.false, Bool.true, Bool.true, Bool.false]\n        23 -&gt; [Bool.false, Bool.true, Bool.false, Bool.true, Bool.true, Bool.true]\n        24 -&gt; [Bool.false, Bool.true, Bool.true, Bool.false, Bool.false, Bool.false]\n        25 -&gt; [Bool.false, Bool.true, Bool.true, Bool.false, Bool.false, Bool.true]\n        26 -&gt; [Bool.false, Bool.true, Bool.true, Bool.false, Bool.true, Bool.false]\n        27 -&gt; [Bool.false, Bool.true, Bool.true, Bool.false, Bool.true, Bool.true]\n        28 -&gt; [Bool.false, Bool.true, Bool.true, Bool.true, Bool.false, Bool.false]\n        29 -&gt; [Bool.false, Bool.true, Bool.true, Bool.true, Bool.false, Bool.true]\n        30 -&gt; [Bool.false, Bool.true, Bool.true, Bool.true, Bool.true, Bool.false]\n        31 -&gt; [Bool.false, Bool.true, Bool.true, Bool.true, Bool.true, Bool.true]\n        32 -&gt; [Bool.true, Bool.false, Bool.false, Bool.false, Bool.false, Bool.false]\n        33 -&gt; [Bool.true, Bool.false, Bool.false, Bool.false, Bool.false, Bool.true]\n        34 -&gt; [Bool.true, Bool.false, Bool.false, Bool.false, Bool.true, Bool.false]\n        35 -&gt; [Bool.true, Bool.false, Bool.false, Bool.false, Bool.true, Bool.true]\n        36 -&gt; [Bool.true, Bool.false, Bool.false, Bool.true, Bool.false, Bool.false]\n        37 -&gt; [Bool.true, Bool.false, Bool.false, Bool.true, Bool.false, Bool.true]\n        38 -&gt; [Bool.true, Bool.false, Bool.false, Bool.true, Bool.true, Bool.false]\n        39 -&gt; [Bool.true, Bool.false, Bool.false, Bool.true, Bool.true, Bool.true]\n        40 -&gt; [Bool.true, Bool.false, Bool.true, Bool.false, Bool.false, Bool.false]\n        41 -&gt; [Bool.true, Bool.false, Bool.true, Bool.false, Bool.false, Bool.true]\n        42 -&gt; [Bool.true, Bool.false, Bool.true, Bool.false, Bool.true, Bool.false]\n        43 -&gt; [Bool.true, Bool.false, Bool.true, Bool.false, Bool.true, Bool.true]\n        44 -&gt; [Bool.true, Bool.false, Bool.true, Bool.true, Bool.false, Bool.false]\n        45 -&gt; [Bool.true, Bool.false, Bool.true, Bool.true, Bool.false, Bool.true]\n        46 -&gt; [Bool.true, Bool.false, Bool.true, Bool.true, Bool.true, Bool.false]\n        47 -&gt; [Bool.true, Bool.false, Bool.true, Bool.true, Bool.true, Bool.true]\n        48 -&gt; [Bool.true, Bool.true, Bool.false, Bool.false, Bool.false, Bool.false]\n        49 -&gt; [Bool.true, Bool.true, Bool.false, Bool.false, Bool.false, Bool.true]\n        50 -&gt; [Bool.true, Bool.true, Bool.false, Bool.false, Bool.true, Bool.false]\n        51 -&gt; [Bool.true, Bool.true, Bool.false, Bool.false, Bool.true, Bool.true]\n        52 -&gt; [Bool.true, Bool.true, Bool.false, Bool.true, Bool.false, Bool.false]\n        53 -&gt; [Bool.true, Bool.true, Bool.false, Bool.true, Bool.false, Bool.true]\n        54 -&gt; [Bool.true, Bool.true, Bool.false, Bool.true, Bool.true, Bool.false]\n        55 -&gt; [Bool.true, Bool.true, Bool.false, Bool.true, Bool.true, Bool.true]\n        56 -&gt; [Bool.true, Bool.true, Bool.true, Bool.false, Bool.false, Bool.false]\n        57 -&gt; [Bool.true, Bool.true, Bool.true, Bool.false, Bool.false, Bool.true]\n        58 -&gt; [Bool.true, Bool.true, Bool.true, Bool.false, Bool.true, Bool.false]\n        59 -&gt; [Bool.true, Bool.true, Bool.true, Bool.false, Bool.true, Bool.true]\n        60 -&gt; [Bool.true, Bool.true, Bool.true, Bool.true, Bool.false, Bool.false]\n        61 -&gt; [Bool.true, Bool.true, Bool.true, Bool.true, Bool.false, Bool.true]\n        62 -&gt; [Bool.true, Bool.true, Bool.true, Bool.true, Bool.true, Bool.false]\n        63 -&gt; [Bool.true, Bool.true, Bool.true, Bool.true, Bool.true, Bool.true]\n        _ -&gt; crash &quot;This can never happen because I have listed every possible U8 value.&quot;\n</code></pre></div>",
        "id": 365743070,
        "sender_full_name": "Hannes",
        "timestamp": 1686633817
    },
    {
        "content": "<p>U8 is 0 to 255</p>",
        "id": 365743574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686634010
    },
    {
        "content": "<p>I think if you listed all 256 values, it should be exhaustive and not need <code>_ -&gt;</code>, but I have never tested</p>",
        "id": 365743667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686634054
    },
    {
        "content": "<p>Ah! Thank you! Had a lapse of memory there!</p>",
        "id": 365744077,
        "sender_full_name": "Hannes",
        "timestamp": 1686634212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> has marked this topic as resolved.</p>",
        "id": 365744252,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686634295
    },
    {
        "content": "<p>By the way, I just added the missing cases, so now the pattern match is on all integers from 0 to 255 and it still asks me to add the default case</p>",
        "id": 365744676,
        "sender_full_name": "Hannes",
        "timestamp": 1686634468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20Exhaustiveness.20with.20U8s/near/365743667\">said</a>:</p>\n<blockquote>\n<p>I think if you listed all 256 values, it should be exhaustive and not need <code>_ -&gt;</code>, but I have never tested</p>\n</blockquote>\n<p>I think in theory that's true, but in practice I don't think we actually check this at the moment <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 365831422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686654733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> has marked this topic as unresolved.</p>",
        "id": 365831542,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686654753
    },
    {
        "content": "<p>I'm pretty sure for string and number literals we just treat them as \"can never be exhaustive\"</p>",
        "id": 365831660,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686654777
    },
    {
        "content": "<p>If you want this kind of behaviour you would have to create a tag union with 256 tags.</p>",
        "id": 365849096,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1686658498
    },
    {
        "content": "<p>If I wanted to do that, I'd probably open up some REPL and get it to print out all of those numbers, then copy it into a .roc file and do some multi-cursor editing.</p>",
        "id": 365849099,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1686658498
    },
    {
        "content": "<p>It feels like this could be a slippery slope, specially with the concept of <code>Nat</code> which as far as I understand it is CPU-architecture dependent <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 365850066,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1686658730
    },
    {
        "content": "<p>If I understand correctly, if you find yourself doing <code>when someNumber is 1 -&gt; this; 2 -&gt; that; 3 -&gt; otherThing</code> then you might be in need of domain-oriented tags which give meaningful domain names to what <code>1</code>, <code>2</code> or <code>3</code> mean.<br>\nAnything that is working in the realm of having to exaustive pattern match <code>U8</code> or <code>I8</code> seems to be more of a formula/function waiting to be discovered</p>",
        "id": 365850709,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1686658882
    },
    {
        "content": "<p>hmm, so in rust they have <code>1..24</code> patterns, which make it much easier to match exhaustively on numeric types</p>",
        "id": 365851267,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1686659029
    },
    {
        "content": "<p>Do we have such a pattern in roc?</p>",
        "id": 365851508,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1686659090
    },
    {
        "content": "<p>(my statement above about a function waiting to be discovered did make me curious \"okay, so how would I implement such function in roc?\"<br>\nI came up with this, I wonder if there are more ideomatic ways to accomplish what I am doing here. I feel awkward about the <code>{} |&gt; List.repeat bitsToReturn</code> but I'm not sure of a better way to accomplish a \"while loop\")</p>\n<div class=\"codehilite\"><pre><span></span><code>byteToBits : U8 -&gt; Str\nbyteToBits = \\byte -&gt;\n    bitsToReturn = 8\n\n    {}\n    |&gt; List.repeat bitsToReturn\n    |&gt; List.walk\n        (List.withCapacity bitsToReturn, byte)\n        (\\(bits, remaining), {} -&gt; (bits |&gt; List.append (remaining % 2), remaining // 2))\n    |&gt; (\\(bits, _) -&gt; bits |&gt; List.reverse |&gt; List.map Num.toStr |&gt; Str.joinWith &quot;&quot;)\n\n## ── TESTS ────────────────────────────────────────────────────────────────────\n\n## Tests for byteToBits\n\nexpect\n    expected = [\n        (0u8, &quot;00000000&quot;),\n        (1u8, &quot;00000001&quot;),\n        (10u8, &quot;00001010&quot;),\n        (255u8, &quot;11111111&quot;),\n    ]\n    actually = expected |&gt; List.map (\\(byte, _) -&gt; (byte, byte |&gt; byteToBits))\n    expected == actually\n</code></pre></div>",
        "id": 365858609,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1686660755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620083\">Fábio Beirão</span> <a href=\"#narrow/stream/231634-beginners/topic/Exhaustiveness.20with.20U8s/near/365851508\">said</a>:</p>\n<blockquote>\n<p>Do we have such a pattern in roc?</p>\n</blockquote>\n<p>we don't currently, but it seems like a reasonable thing to bring up in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a>!</p>",
        "id": 365860033,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686661069
    }
]