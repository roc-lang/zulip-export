[
    {
        "content": "<p>I've written NonemptyDict and NonemptySet modules!  <a href=\"https://github.com/MartinSStewart/Nonempty\">https://github.com/MartinSStewart/Nonempty</a></p>\n<p>My question now is, how do I write tests for them? Also Dict doesn't expose toList or fromList which prevented me from implementing all of the Set API as NonemptySet, is there a reason for not having those functions or is it just a matter of someone making a PR that adds them?</p>",
        "id": 290149644,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658259234
    },
    {
        "content": "<p><code>expect</code> is very new and for testing. Not sure it current state.</p>\n<p>As for <code>Dict.toList</code>, there was a lot of discussion around it, but I don't think we ever made a complete conclusion. The issue is ordering. Two dictionaries could contain the exact same key value pairs, be equal, but when calling <code>toList</code>, the generated lists would not be equal.</p>",
        "id": 290152161,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658260459
    },
    {
        "content": "<p>it's pretty decent on a branch now, but today only works for types that are copy  (i.e. have no pointers in them)</p>",
        "id": 290152245,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658260510
    },
    {
        "content": "<p>working on strings/lists/etc as we speak</p>",
        "id": 290152270,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658260523
    },
    {
        "content": "<blockquote>\n<p>As for Dict.toList, there was a lot of discussion around it, but I don't think we ever made a complete conclusion. The issue is ordering. Two dictionaries could contain the exact same key value pairs, be equal, but when calling toList, the generated lists would not be equal.</p>\n</blockquote>\n<p>If there are concerns around ordering, shouldn't <code>Dict.keys</code> and <code>Dict.values</code> return <code>Set</code> instead of <code>List</code>?</p>",
        "id": 290152839,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658260830
    },
    {
        "content": "<p><code>Dict</code> and <code>Set</code> are still very new. And secretly, <code>Set</code> is (currently) implemented on top of <code>Dict</code> (which secretly is implemented on top of <code>List</code>). So I guess that is why <code>Dict.keys</code>/<code>Dict.values</code> currently do not return sets.</p>",
        "id": 290153190,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658260988
    },
    {
        "content": "<p>also dict values don't need to be comparable/hashable</p>",
        "id": 290153232,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1658261007
    },
    {
        "content": "<p>I think now that we decided on <code>IndexMap</code> as the backing data structure for <code>Dict</code>, it's okay to have <code>toList</code> use whatever order it has internally</p>",
        "id": 290153403,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658261082
    },
    {
        "content": "<p>the concern previously was that it would be coupled to the hashing function, meaning upgrading the hashing function could break peoples' programs</p>",
        "id": 290153465,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658261119
    },
    {
        "content": "<p>but with <code>IndexMap</code> backing it, that's no longer a concern, so I think it's fine if two dictionaries with the same contents have different <code>toList</code> answers</p>",
        "id": 290153499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658261139
    },
    {
        "content": "<p>since insertion ordering is formally part of the semantics of <code>Dict</code>!</p>",
        "id": 290153539,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658261160
    },
    {
        "content": "<p>Should there be a Dict.equals and Set.equals for when you do want to see if they are equal independent of insertion order?</p>",
        "id": 290154830,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658261853
    }
]