[
    {
        "content": "<p>From the tutorial:</p>\n<blockquote>\n<p>In summary, here's a way to think about the difference between open unions in a value you have, compared to a value you're accepting:</p>\n<p>If you have a closed union, that means it has all the tags it ever will, and can't accumulate more.<br>\nIf you have an open union, that means it can accumulate more tags through conditional branches.<br>\nIf you accept a closed union, that means you only have to handle the possibilities listed in the union.<br>\nIf you accept an open union, that means you have to handle the possibility that it has a tag you can't know about.</p>\n</blockquote>\n<p>Example: </p>\n<div class=\"codehilite\"><pre><span></span><code>» foo = Foo &quot;Foo&quot;\n… foo\n\nFoo &quot;Foo&quot; : [ Foo Str ]*\n\n» bar : [ Bar Str ]\n… bar = Bar &quot;Bar&quot;\n… bar\n\nBar &quot;Bar&quot; : [ Bar Str ]\n\n»\n</code></pre></div>\n<p>What are the practical advantages of a closed tag union value vs. an open tag union value?</p>\n<p>Here is a function <code>baz</code> that accepts <code>foo</code> but not <code>bar</code> (if we ignore the current compiler panic on <code>baz foo</code>, documented here: <a href=\"https://github.com/rtfeldman/roc/issues/2344\">https://github.com/rtfeldman/roc/issues/2344</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code>» bar : [ Bar Str ]\n… bar = Bar &quot;Bar&quot;\n… baz = \\x -&gt;\n…     when x is\n…         Foo y -&gt; y\n…         Bar y -&gt; y\n… baz bar\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nThe 1st argument to baz is not what I expect:\n\n10│      baz bar\n             ^^^\n\nThis bar value is a:\n\n    [ Bar Str ]\n\nBut baz needs the 1st argument to be:\n\n    [ Bar a, Foo a ]\n\nTip: Looks like a closed tag union does not have the Foo tag.\n\nTip: Closed tag unions can&#39;t grow, because that might change the size\nin memory. Can you use an open tag union?\n\n\n»\n</code></pre></div>\n<p>The inability of <code>baz</code> to accept <code>bar</code> seems like an unnecessary limitation that would lead me to create an open tag union value instead of a closed tag union value in all situations (since a closed tag union value could only be processed by functions that process that exact tag union and nothing more). However, I'm sure that they have a purpose - in what situations might they superior to open tag union values?</p>",
        "id": 267832720,
        "sender_full_name": "jan kili",
        "timestamp": 1642059036
    },
    {
        "content": "<p>Closed union allow you to be exhaustive, covering all cases in your function (for instance the Result type, you have only the Ok and Err tags). If we look at baz:</p>\n<div class=\"codehilite\"><pre><span></span><code>baz : [ Foo Str, Bar Str ] -&gt; Str\nbaz = \\x -&gt;\n    when x is\n        Foo y -&gt; y\n        Bar y -&gt; y\n</code></pre></div>\n<p>Without a closed union we can't write this function because we would need to add a catchall in the <code>when … is</code> and we wouldn't know want to return in that case (or a hardcoded string? not ideal).</p>\n<p>That said I feel like <code>[ Bar Str ]</code> is a strict subset of <code>[ Bar Str, Foo Str ]</code> so it would probably make sense to allow it in the type system.</p>",
        "id": 267843928,
        "sender_full_name": "Matthias Devlamynck",
        "timestamp": 1642066472
    },
    {
        "content": "<p>Yeah, closed-vs-open tag union arguments make total sense to me. Closed-vs-open tag union <em>values</em>, on the other hand, are confusing to me.</p>",
        "id": 267844258,
        "sender_full_name": "jan kili",
        "timestamp": 1642066665
    },
    {
        "content": "<p>I see what you mean, the issue is that there is no difference between the two in the type system.</p>",
        "id": 267844866,
        "sender_full_name": "Matthias Devlamynck",
        "timestamp": 1642067020
    },
    {
        "content": "<p>And the semantics would start to be weird I guess if there was.</p>",
        "id": 267845022,
        "sender_full_name": "Matthias Devlamynck",
        "timestamp": 1642067105
    }
]