[
    {
        "content": "<p>Hi, I've started the implementing <a href=\"http://raytracerchallenge.com/\">http://raytracerchallenge.com/</a> in roc, following the book.<br>\nI'm also learning roc on the way (but I have some experience with Haskell and Elm).</p>\n<p>Now the book gives you some tests in natural language-BDD style and you have to implement them.</p>\n<p>For example:</p>\n<p>Scenario: A tuple with w=1.0 is a point<br>\nGiven a ‚Üê tuple(4.3, -4.2, 3.1, 1.0)<br>\nThen a.x = 4.3<br>\nAnd a.y = -4.2<br>\nAnd a.z = 3.1<br>\nAnd a.w = 1.0<br>\nAnd a is a point<br>\nAnd a is not a vector</p>\n<p>I implemented them as:</p>\n<p>isVector = \\v -&gt; v.w == 0.0<br>\nisPoint = \\p -&gt; p.w == 1.0</p>\n<p>a = {x:4.3, y:-4.2, z:3.1, w:1.0}</p>\n<p>expect isVector a == Bool.false<br>\nexpect isPoint a == Bool.true</p>\n<p>Does this seem ok? </p>\n<p>some other doubts I had so far:</p>\n<p>Ideally I would like to separate tests from the code... but not sure if it's a good idea in roc.<br>\nWould be a good idea to name my record type (x,y,z,w: I32?)? Opaque types seems the best choice to me but I'm not sure. </p>\n<p>The doc and the tutorial and very good, and I didn't have any particular problem, but I really liked the Clojure Koans when learning Clojure and I wrote something similar for Kotlin years ago... maybe once I've finished my raytracer... :)</p>\n<p>Btw I've started using IntelliJ as editor, because it's just convenient for me. I don't think there is a plugin for roc, but I may write one before long. :)</p>\n<p>thanks to everybody for the effort and the great language, it's a lot of fun writing in roc!</p>",
        "id": 410957637,
        "sender_full_name": "Uberto Barbini",
        "timestamp": 1704258295
    },
    {
        "content": "<p>Hi Uberto :)</p>\n<blockquote>\n<p>a = {x:4.3, y:-4.2, z:3.1, w:1.0}</p>\n</blockquote>\n<p>I think the idiomatic Roc way would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>vectorOrPoint : [Vector, Point]\na = {x:4.3, y:-4.2, z:3.1, w: Point}\n</code></pre></div>",
        "id": 410989704,
        "sender_full_name": "Anton",
        "timestamp": 1704277517
    },
    {
        "content": "<blockquote>\n<p>but I really liked the Clojure Koans when learning Clojure and I wrote something similar for Kotlin years ago... maybe once I've finished my raytracer... :)</p>\n</blockquote>\n<p>Adding exercises to some <a href=\"https://github.com/roc-lang/examples\">examples</a> is something we've talked about in the past. Exercises make things stick :). In Roc it would be especially cool because you could complete them in the browser, just like we do with the web repl.</p>",
        "id": 410990762,
        "sender_full_name": "Anton",
        "timestamp": 1704278020
    },
    {
        "content": "<blockquote>\n<p>I don't think there is a plugin for roc, but I may write one before long. :)</p>\n</blockquote>\n<p>That would be awesome, fyi we have <a href=\"https://github.com/roc-lang/roc/tree/main/crates/lang_srv\">a language server</a>. The <a href=\"https://github.com/ivan-demchenko/roc-vscode-unofficial\">vscode plugin</a> may be useful inspiration as well.</p>",
        "id": 410991143,
        "sender_full_name": "Anton",
        "timestamp": 1704278179
    },
    {
        "content": "<blockquote>\n<p>Ideally I would like to separate tests from the code... but not sure if it's a good idea in roc</p>\n</blockquote>\n<p>I don't think we've ever done that but you should be able to make <a href=\"https://www.roc-lang.org/examples/MultipleRocFiles/README.html\">an interface module</a> that imports the functions you want to test. I also made <a href=\"https://github.com/roc-lang/examples/issues/143\">an issue</a> in the examples repo to demonstrate how to do this.</p>",
        "id": 410994710,
        "sender_full_name": "Anton",
        "timestamp": 1704279789
    },
    {
        "content": "<p>thanks Anton, I will follow your suggestions and I'll keep posting things that makes me confused. :)</p>",
        "id": 411148793,
        "sender_full_name": "Uberto Barbini",
        "timestamp": 1704358069
    }
]