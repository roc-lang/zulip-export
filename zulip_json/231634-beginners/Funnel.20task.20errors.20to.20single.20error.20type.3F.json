[
    {
        "content": "<p>As a learning exercise, I'm trying to write a function that attempts to read a file that may not exist, and then:</p>\n<ul>\n<li>On success, writes a line to stdout including the file contents (just as a confirmation; it could do nothing at all on success)</li>\n<li>On error, maps the error received (say, <code>FileReadErr</code>) to a single error (ie OutputError) with a message str, so it can be handled later.</li>\n</ul>\n<p>Real use case:</p>\n<ul>\n<li>In a logging function that writes to file, I want to funnel all errors found during logging (say, permissions errors when writing to a file) into a single error tag, and do nothing when things go smoothly.</li>\n<li>I want to be able to differentiate errors product of the logging function from file errors generated from other parts of the program.</li>\n</ul>\n<p>My haphazard attempts to get this to work have failed. Here's the latest failed attempt:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    outputFileMapErr\n    |&gt; Task.onErr handleErr\n\noutputFileMapErr =\n    # A file that does not exist\n    path = Path.fromStr &quot;someFile&quot;\n\n    # This could fail if the file doesn&#39;t exist or is unreadable\n    result &lt;- File.readUtf8 path\n    |&gt; Task.attempt\n    |&gt; Task.mapErr \\err -&gt; Task.err MyCustomErr &quot;Some error message.&quot;\n\nhandleErr =\n    msg = when err is\n        MyCustomErr msg -&gt; msg\n    Stdout.line &quot;We stumbled upon this: $(msg)&quot;\n</code></pre></div>\n<p>What could I do with the results of <code>File.readUtf8</code> to get the desired behavior?</p>",
        "id": 430414237,
        "sender_full_name": "Noel R",
        "timestamp": 1711826870
    },
    {
        "content": "<p>Hi! I've played around with that code a bit and made a couple of tweaks to get to this modified version:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    outputFileMapErr\n    |&gt; Task.onErr handleErr\n\noutputFileMapErr =\n    # A file that does not exist\n    path = Path.fromStr &quot;someFile&quot;\n\n    # This could fail if the file doesn&#39;t exist or is unreadable\n    result &lt;-\n        File.readUtf8 path\n        |&gt; Task.mapErr \\err -&gt; MyCustomErr &quot;Some error message.&quot;\n        |&gt; Task.await\n\n    Stdout.line result\n\nhandleErr = \\err -&gt;\n    when err is\n        MyCustomErr msg -&gt;\n            Stdout.line &quot;We stumbled upon this: $(msg)&quot;\n</code></pre></div>\n<p>Two small fixes:</p>\n<ul>\n<li><code>Task.mapErr</code> takes a function that maps from the original task's error to some new error. You don't have to wrap that new error in <code>Task.err</code>, if you do then you create a Task with an error type that is itself a task, a task nested within another task if you will.</li>\n<li><code>Task.attempt</code> gives you <code>Result</code> type, which you could pattern match on to handle the success and failure cases. Because you're already handling the error using <code>Task.mapErr</code> you can instead use <code>Task.await</code>, which provides you just the success value. Either way, <code>Task.attempt</code> or <code>Task.await</code> should go on the end of the pipeline.</li>\n</ul>\n<p>Let me know if anything is unclear, or if I misunderstood what you were trying to do!</p>",
        "id": 430421314,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1711834274
    },
    {
        "content": "<p>Thank you Jasper! That was very helpful.</p>\n<p>For anyone trying to understand backpassing and the pipe operator, this is what the function above looks like without them:</p>\n<div class=\"codehilite\"><pre><span></span><code>outputFileMapErr =\n    # A file that does not exist\n    path = Path.fromStr &quot;someFile&quot;\n\n    # Task.mapErr takes two arguments:\n    # - A task\n    # - A function that takes an error and outputs another error\n    Task.mapErr\n        # First arg should be a Task, which is what calling Task.await produces\n        # NOTE that we must wrap the call to Task.await in parentheses\n        # so we pass the resulting Task to mapErr, and noth the individual\n        # parts (Task.await itself, the result from calling readUtf8, the anonymous function)\n        (Task.await\n\n            # Task await _also_ takes a task as first arg, which is what\n            # File.readutf8 produces. Again, we wrap in parentheses to\n            # pass the output and not the function and _path_ individually\n            (File.readUtf8 path)\n\n            # The second arg to await is a function that _also_ returns\n            # a task.\n            \\result -&gt; Stdout.line &quot;What we got is: $(result)&quot;)\n\n        # The second arg to mapErr is a function that takes an error and\n        # returns a different error.\n        # Note that the MyCustomErr tag is nothing special: we could have\n        # used any tag name, as long as it follows the tag naming conventions.\n        \\_ -&gt; MyCustomErr &quot;Some error msg.&quot;\n</code></pre></div>\n<p>Relevant docs:</p>\n<ul>\n<li><a href=\"https://www.roc-lang.org/packages/basic-cli/Task#await\">Task.await</a></li>\n<li><a href=\"https://www.roc-lang.org/packages/basic-cli/Task#mapErr\">Task.mapErr</a></li>\n<li><a href=\"https://www.roc-lang.org/tutorial#the-pipe-operator\">Pipe operator</a></li>\n<li><a href=\"https://www.roc-lang.org/tutorial#backpassing\">Backpassing</a></li>\n</ul>",
        "id": 430441490,
        "sender_full_name": "Noel R",
        "timestamp": 1711855367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"678767\">Noel R</span> has marked this topic as resolved.</p>",
        "id": 430441608,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711855537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"678767\">@Noel R</span> , your desugaring is not quite right. That said, I think your reordering is also correct in this specific case.</p>\n<p>This is an exact desugaring.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">outputFileMapErr</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"nv\">file</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">does</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">exist</span>\n<span class=\"w\">    </span><span class=\"nv\">path</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Path</span><span class=\"nf\">.</span><span class=\"nv\">fromStr</span><span class=\"w\"> </span><span class=\"s\">\"someFile\"</span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">could</span><span class=\"w\"> </span><span class=\"nv\">fail</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">file</span><span class=\"w\"> </span><span class=\"nv\">doesn't</span><span class=\"w\"> </span><span class=\"nv\">exist</span><span class=\"w\"> </span><span class=\"nv\">or</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">unreadable</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">readUtf8</span><span class=\"w\"> </span><span class=\"nv\">path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MyCustomErr</span><span class=\"w\"> </span><span class=\"s\">\"Some error message.\"</span>\n<span class=\"w\">        </span><span class=\"nf\">\\</span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">result</span>\n</code></pre></div>",
        "id": 430450381,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711865068
    },
    {
        "content": "<p>The nesting of <code>Task.await</code> and <code>Task.mapErr</code> was flipped.</p>",
        "id": 430450609,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711865182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"678767\">Noel R</span> has marked this topic as unresolved.</p>",
        "id": 430497896,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711910360
    },
    {
        "content": "<p>Thank you Brendan for pointing that out. This sugar sprinkling / desugaring is a good learning exercise.</p>",
        "id": 430498230,
        "sender_full_name": "Noel R",
        "timestamp": 1711910662
    }
]