[
    {
        "content": "<p>I built a function that converts <code>hh:mm:ss:ms</code> timestamp to  milliseconds. In the process I discovered that Error handling got quite verbose (yet informative). Something tells me that this is too much... What would be a recommended way to make this logic a little shorter?</p>\n<div class=\"codehilite\"><pre><span></span><code>timeStampArrToMillsec = \\timeStampArr -&gt;\n    when timeStampArr is\n        [hours, minutes, secondsMilliseconds] -&gt;\n            hoursInt = when (Str.toI32 hours) is\n                Ok val -&gt; val\n                Err _ -&gt;  crash &quot;Non numerical value passed to hours&quot;\n            minutesInt = when (Str.toI32 minutes) is\n                Ok val -&gt; val\n                Err _ -&gt;  crash &quot;Non numerical value passed to minutes&quot;\n            seconds = when (List.first (Str.split secondsMilliseconds &quot;.&quot;)) is\n                Ok val -&gt; val\n                Err _ -&gt;  crash &quot;Seconds value does not exist in an array &quot;\n            milliseconds = when (List.last (Str.split secondsMilliseconds &quot;.&quot;)) is\n                Ok val -&gt; val\n                Err _ -&gt;  crash &quot;Milliseconds value does not exist in an array &quot;\n            secondsInt = when (Str.toI32 seconds) is\n                Ok val -&gt; val\n                Err _ -&gt;  crash &quot;Non numerical value passed to seconds&quot;\n            millisecondsInt = when (Str.toI32 milliseconds) is\n                Ok val -&gt; val\n                Err _ -&gt;  crash &quot;Non numerical value passed to milliseconds&quot;\n\n            (hoursInt * 3600000) + (minutesInt * 60000) + (secondsInt * 1000) + millisecondsInt\n        _ -&gt; crash &quot;Invalid agruments passed as timestamp&quot;\n\nexpect\n    ((timeStampArrToMillsec [&quot;00&quot;,&quot;00&quot;,&quot;00.100&quot;]) == 100)\n    &amp;&amp;  ((timeStampArrToMillsec [&quot;00&quot;,&quot;00&quot;,&quot;01.100&quot;]) == 1100)\n    &amp;&amp;  ((timeStampArrToMillsec [&quot;00&quot;,&quot;01&quot;,&quot;01.600&quot;]) == 61600)\n</code></pre></div>",
        "id": 407087471,
        "sender_full_name": "Jakub",
        "timestamp": 1702228540
    },
    {
        "content": "<p>This is a nice improvement:</p>\n<div class=\"codehilite\"><pre><span></span><code>orCrash : Result a err, Str -&gt; a\norCrash = \\res, errMsg -&gt;\n    when res is\n        Ok val -&gt; val\n        Err _ -&gt; crash errMsg\n\nhoursInt = orCrash (Str.toI32 hours) &quot;Non numerical value passed to hours&quot;\n</code></pre></div>",
        "id": 407093090,
        "sender_full_name": "Anton",
        "timestamp": 1702231499
    },
    {
        "content": "<p>I liked using <code>Result.try</code> with backpassing when parsing dates here! <a href=\"https://github.com/rtfeldman/roc-iso8601/blob/dfbadf1074d3c5bfe9098de01c90745b566c51e0/Iso8601.roc#L310\">https://github.com/rtfeldman/roc-iso8601/blob/dfbadf1074d3c5bfe9098de01c90745b566c51e0/Iso8601.roc#L310</a></p>",
        "id": 407093251,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702231631
    },
    {
        "content": "<p>Is this how you would use <code>Result.try</code> if you wanted to keep the custom error messages?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">timeStampArrToMillsec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">timeStampArr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">timeStampArr</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nx\">hours</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">minutes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">secondsMilliseconds</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">hoursInt</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">                </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI32</span><span class=\"w\"> </span><span class=\"nx\">hours</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Non numerical value passed to hours\"</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">            </span><span class=\"nx\">minutesInt</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">                </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI32</span><span class=\"w\"> </span><span class=\"nx\">minutes</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Non numerical value passed to minutes\"</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">            </span><span class=\"nx\">seconds</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">                </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"w\"> </span><span class=\"nx\">secondsMilliseconds</span><span class=\"w\"> </span><span class=\"s\">\".\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Seconds value does not exist in an array\"</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">            </span><span class=\"nx\">milliseconds</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">                </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"w\"> </span><span class=\"nx\">secondsMilliseconds</span><span class=\"w\"> </span><span class=\"s\">\".\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Milliseconds value does not exist in an array\"</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">            </span><span class=\"nx\">secondsInt</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">                </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI32</span><span class=\"w\"> </span><span class=\"nx\">seconds</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Non numerical value passed to seconds\"</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">            </span><span class=\"nx\">millisecondsInt</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI32</span><span class=\"w\"> </span><span class=\"nx\">milliseconds</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Non numerical value passed to milliseconds\"</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">map</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nx\">hoursInt</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">3600000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">minutesInt</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">60000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">secondsInt</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">millisecondsInt</span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"s\">\"Invalid agruments passed as timestamp\"</span>\n\n<span class=\"nx\">expect</span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"nx\">timeStampArrToMillsec</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"00\"</span><span class=\"p\">,</span><span class=\"s\">\"00\"</span><span class=\"p\">,</span><span class=\"s\">\"00.100\"</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\">  </span><span class=\"p\">((</span><span class=\"nx\">timeStampArrToMillsec</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"00\"</span><span class=\"p\">,</span><span class=\"s\">\"00\"</span><span class=\"p\">,</span><span class=\"s\">\"01.100\"</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"mi\">1100</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\">  </span><span class=\"p\">((</span><span class=\"nx\">timeStampArrToMillsec</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"00\"</span><span class=\"p\">,</span><span class=\"s\">\"01\"</span><span class=\"p\">,</span><span class=\"s\">\"01.600\"</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"mi\">61600</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 407093567,
        "sender_full_name": "timotree",
        "timestamp": 1702231871
    },
    {
        "content": "<p>Yeah, <code>Result.try</code> with backpassing and 1 final when is the way to go. Can add some error type mapping or wrapping if you want as well.</p>",
        "id": 407093572,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702231872
    },
    {
        "content": "<p>I would use a tag and not a string for the error.</p>",
        "id": 407093597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702231903
    },
    {
        "content": "<p>I also might just use wrapping here and add details later</p>",
        "id": 407093602,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702231914
    },
    {
        "content": "<p>but yeah, not as great</p>",
        "id": 407093607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702231922
    },
    {
        "content": "<p>I would do this if i really cared about context</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">hoursInt</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI32</span><span class=\"w\"> </span><span class=\"nx\">hours</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"nx\">HoursErr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"nx\">minutesInt</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toI32</span><span class=\"w\"> </span><span class=\"nx\">minutes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"nx\">MinutesErr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"p\">...</span>\n</code></pre></div>",
        "id": 407093680,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702231979
    },
    {
        "content": "<p>Then a when to match on all error types</p>",
        "id": 407093700,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702232000
    },
    {
        "content": "<p>In Rust, I would want to use an error enum but give it a custom <code>Display</code> implementation that printed the human-readable message. As an API author in roc, if you want your error to print nicely with e.g. <code>dbg</code>, it seems like you need to return a <code>Str</code> as your error type</p>",
        "id": 407093812,
        "sender_full_name": "timotree",
        "timestamp": 1702232077
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">res</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">...</span>\n<span class=\"w\">    </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">toErrorMessage</span><span class=\"w\"> </span><span class=\"nx\">e</span>\n\n<span class=\"nv\">toErrorMessage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">HoursErr</span><span class=\"w\"> </span><span class=\"nx\">subErr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">...</span>\n<span class=\"w\">    </span><span class=\"nx\">MinutesErr</span><span class=\"w\"> </span><span class=\"nx\">subErr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">...</span>\n</code></pre></div>",
        "id": 407093840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702232102
    },
    {
        "content": "<p>Tags will print there name, which is a medium ok message, but yeah, you probably want a <code>toMessage</code> function</p>",
        "id": 407093908,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702232162
    },
    {
        "content": "<p>That or make your error type opaque and add a custom inspect impl, but I would definitely advise just using a <code>when ... is</code> in a function to generate the error message.</p>",
        "id": 407093973,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702232210
    },
    {
        "content": "<p>Easy enough for a user to do either of:</p>\n<div class=\"codehilite\"><pre><span></span><code>dbg err\n\n# or\ndbg Lib.toMessage err\n</code></pre></div>",
        "id": 407094075,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702232289
    },
    {
        "content": "<p>thank you very much for the input, Anton's <code>orCrash</code> was the most straightforward at my level and it made code a bit more concise indeed. Examples from Richard, Tim and Brendan went over my head, I don't understand how piping <code>Result.try</code> works actually in this context (even though I consulted the docs).  You've been very generous with your help though, I just need to run some experiments to internalize <code>Result.try</code>. Thanks again</p>",
        "id": 407109490,
        "sender_full_name": "Jakub",
        "timestamp": 1702243782
    },
    {
        "content": "<p><code>Result.try</code> works there thanks to <a href=\"https://www.roc-lang.org/tutorial#backpassing\">backpassing</a>. It's an important piece of the equation there!</p>",
        "id": 407110268,
        "sender_full_name": "LoipesMas",
        "timestamp": 1702244458
    }
]