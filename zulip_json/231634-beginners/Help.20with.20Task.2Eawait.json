[
    {
        "content": "<p>Hi, I just downloaded Roc and I am trying to get my head around it. Really like it so far :D</p>\n<p>But I have encountered something that makes me wonder if I am doing something fundamentally wrong or if it is a bug.</p>\n<p>I have modified the <code>fizzbuzz</code> example with <code>basic-cli</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">getNum</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"nv\">getNum</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Enter a number: \"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n\n<span class=\"nv\">call</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"nv\">call</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">url</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://example.com\"</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Calling \\(url)\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">request</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">method</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">headers</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"nv\">url</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">body</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"nf\">.</span><span class=\"nv\">emptyBody</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">timeout</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NoTimeout</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Http</span><span class=\"nf\">.</span><span class=\"nv\">send</span><span class=\"w\"> </span><span class=\"nv\">request</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">onErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"nf\">.</span><span class=\"nv\">errorToString</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"p\">)</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">output</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nv\">call</span>\n\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Got: \\(output)\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nv\">getNum</span>\n\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Invalid input\"</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">fizzBuzz</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n</code></pre></div>\n<p>But running <code>roc check</code> I get the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>This 2nd argument to await has an unexpected type:\n\n32│&gt;      output &lt;- Task.await call\n33│&gt;\n34│&gt;      _ &lt;- Task.await (Stdout.line &quot;Got: \\(output)&quot;)\n35│&gt;\n36│&gt;      input &lt;- Task.await getNum\n37│&gt;\n38│&gt;      when Str.toI32 input is\n39│&gt;          Err _ -&gt; Stdout.line &quot;Invalid input&quot;\n40│&gt;          Ok n -&gt;\n41│&gt;              List.range { start: At 1, end: At n }\n42│&gt;              |&gt; List.map fizzBuzz\n43│&gt;              |&gt; Str.joinWith &quot;\\n&quot;\n44│&gt;              |&gt; Stdout.line\n\nThe argument is an anonymous function of type:\n\n    Str -&gt; Task {} *\n\nBut await needs its 2nd argument to be:\n\n    Str -&gt; Task {} *\n</code></pre></div>\n<p>I probably should add that removing the lines 32-34 makes it compile just fine :)</p>",
        "id": 397105677,
        "sender_full_name": "Daniel Haehre",
        "timestamp": 1697548267
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"559991\">@Daniel Haehre</span>,<br>\nThis indeed looks like a compiler bug and a strange one too, I'll file an issue.</p>",
        "id": 397112135,
        "sender_full_name": "Anton",
        "timestamp": 1697550264
    },
    {
        "content": "<p>There is a valuable tip in the error message:</p>\n<div class=\"codehilite\"><pre><span></span><code> Any connection between types must use a named type variable, not\na *!\n</code></pre></div>\n<p>The tip could be further improved though.</p>\n<p>Anyway, as a quick fix you can remove the type annotation <code>getNum : Task Str *</code></p>",
        "id": 397114884,
        "sender_full_name": "Anton",
        "timestamp": 1697551050
    },
    {
        "content": "<p>Ah. So that means it’s not a compiler bug?</p>",
        "id": 397115094,
        "sender_full_name": "Daniel Haehre",
        "timestamp": 1697551107
    },
    {
        "content": "<p>I don't think so, but it confuses me too :p</p>",
        "id": 397115276,
        "sender_full_name": "Anton",
        "timestamp": 1697551149
    },
    {
        "content": "<p>Hehe, that’s kinda nice I guess <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 397116048,
        "sender_full_name": "Daniel Haehre",
        "timestamp": 1697551350
    },
    {
        "content": "<p>In the end I do think this is a bug, I've simplified this to:</p>\n<div class=\"codehilite\"><pre><span></span><code>hello : Task {} *\nhello =\n    Stdout.line &quot;Hello Alice&quot;\n\nhi : Task {} *\nhi =\n    Stdout.line &quot;Hey Bob&quot;\n\nmain =\n    _ &lt;- Task.await hello\n\n    hi\n</code></pre></div>\n<p>Because you're stating the exact type of <code>Stdout.line</code> I believe we should make this work.</p>",
        "id": 397120425,
        "sender_full_name": "Anton",
        "timestamp": 1697552601
    },
    {
        "content": "<p>I wrote this up in <a href=\"https://github.com/roc-lang/roc/issues/5912\">#5912</a></p>",
        "id": 397121805,
        "sender_full_name": "Anton",
        "timestamp": 1697553045
    }
]