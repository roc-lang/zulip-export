[
    {
        "content": "<p>I didn't complete Day 5 of Advent of Code, BUT I did save all the various <a href=\"https://github.com/JesterXL/advent-of-code-2022/tree/main/day5\">compiler crashes</a>. Thanks a bunch for giving us a dope compiler for use during Advent of Code. Roc is super fun, and despite minor syntax changes from Elm, and 20 billion number choices (#Nat4LyfeDawg), I can't wait to get Roc into production against y'alls recommendation <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>. It was really fun this year learning a new language where I felt I was learning the built in modules, not actually the language hah! It just felt natural coming from Elm/ReScript/F#. Can't wait for <code>roc dev</code> to push my experiments into over drive. Also, mad props to all the docs. The release download + Mac instructions + the getting starting guide + the module docs were great to get moving and I referred to them constantly the past week. Appreciate the hard work that went into something y'all know may change frequently, I felt it was totally worth it.</p>",
        "id": 314355166,
        "sender_full_name": "JesterXL",
        "timestamp": 1670373083
    },
    {
        "content": "<p>Thanks for saving I'll of these. I'm definitely interested in digging into any of the dict related problems. I'm sure others will find the other crash reports useful as well</p>",
        "id": 314357292,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670374360
    },
    {
        "content": "<p>I am just gonna document here some of what I see from the different issue (Note: I am running from <code>main</code> so it may have bug fixes that have not yet been pulled into nightly):</p>\n<p><code>Why is str.tonat failing, impossible</code><br>\nI am guessing that this is hitting <a href=\"https://github.com/roc-lang/roc/issues/4677\">#4677</a> where <code>dbg</code> is printing values incorrectly rather than <code>Str.toNat</code> parsing the value wrong, but I am not 100% sure by just running the code.</p>\n<p><code>roc test bug</code><br>\nI think this is a type and a missing set of parenthesis (though maybe the parenthesis shouldn't be needed and parsing is wrong. It works if you change:<br>\n<code>expect getCrates (Dict.emtpy |&gt; Dict.insert 1 [\"A\"]) 1 |&gt; List.first |&gt; Result.withDefault \"\" == \"A\"</code><br>\nto:<br>\n<code>expect (getCrates (Dict.empty |&gt; Dict.insert 1 [\"A\"]) 1 |&gt; List.first |&gt; Result.withDefault \"\") == \"A\"</code></p>\n<p><code>roc test bug 2</code><br>\nThis is also hitting the same issue with a missing set of parenthesis. Also, once the parenthesis are added, I think the wrong function is used in a test. You have a dictionary that is passed into a function that expects a list.</p>\n<p><code>run roc test thisfile to see bug</code><br>\nI am not sure what the issue is with this file. If it is renamed to <code>Crates.roc</code>, it seems to work just fine.</p>\n<p>The rest of the examples (<code>keep getting error blahhhhh</code>, <code>out of memory wat</code>, <code>panic</code>, <code>panic other patterns can't be applied</code>, <code>segfault</code>, <code>segfault when you roc dev</code>), I am not sure what is going on. They probably should all be filed as issues so someone can dig into them more. Thanks for collecting the logs.</p>",
        "id": 314372126,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670384924
    }
]