[
    {
        "content": "<p>Hello, new to functional programming and Roc. Trying to write a function that parses a grid of space separated numbers into a matrix. This is my attempt:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main!] {\n    pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.19.0/bi5zubJ-_Hva9vxxPq4kNx4WHX6oFs8OP6Ad0tCYlrY.tar.br&quot;,\n}\n\nimport pf.Stdin\n\nparse_record : Str -&gt; List U64\nparse_record = |text|\n    text |&gt; Str.split_on(&quot; &quot;) |&gt; List.keep_oks Str.to_u64\n\nparse_matrix : Str -&gt; List List U64\nparse_matrix = |text|\n    text |&gt; Str.split_on(&quot;\\n&quot;) |&gt; List.map parse_record\n\nmain! = |_args|\n    text = Stdin.read_to_end!({})? |&gt; Str.from_utf8?\n    _ = text |&gt; parse_matrix\n    Ok {}\n</code></pre></div>\n<p>Compiler is panicing though:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/mono/src/borrow.rs:361:34:\ninternal error: entered unreachable code:\n        No borrow signature for LambdaName { name: `List.keep_oks`, niche: Niche(Captures([])) } layout.\n\n        Tip 1: This can happen when you call a function with fewer arguments than it expects.\n        Like `Arg.list!` instead of `Arg.list! {}`.\n        Tip 2: `roc check yourfile.roc` can sometimes give you a helpful error.\n\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 496471211,
        "sender_full_name": "Ben",
        "timestamp": 1738126757
    },
    {
        "content": "<p>I suspect <code>List List U64</code> should be <code>`List (List U64)</code></p>",
        "id": 496471333,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738126828
    },
    {
        "content": "<p>That fixed it! Thanks Luke :)</p>",
        "id": 496471585,
        "sender_full_name": "Ben",
        "timestamp": 1738126899
    },
    {
        "content": "<p>Does List List U64 make sense / parse as another valid type?</p>",
        "id": 496471758,
        "sender_full_name": "Ben",
        "timestamp": 1738126957
    },
    {
        "content": "<p>To nest types you need the parens <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> so no it doesn't because <code>List a</code> only has one type variable</p>",
        "id": 496471827,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738127028
    },
    {
        "content": "<p>This is a known issue, I haven't finished my solution. In short, we would have a type error here for most types, but those defined internally in Zig and not Roc aren't type checked on if they got the right number of args</p>",
        "id": 496472914,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738127805
    },
    {
        "content": "<p>I have a branch with a partial fix, but I've been busy with other stuff</p>",
        "id": 496472927,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738127821
    },
    {
        "content": "<p>Linking to the issue <a href=\"https://github.com/roc-lang/roc/issues/7357\">#7357</a><br>\nI've changed it to a high priority, this <code>List List</code> issue has already been reported 4 times that I know of.</p>",
        "id": 496503257,
        "sender_full_name": "Anton",
        "timestamp": 1738142814
    }
]