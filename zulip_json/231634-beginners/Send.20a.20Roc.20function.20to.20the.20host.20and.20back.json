[
    {
        "content": "<p>Is it possible to box an arbitrary Roc function, pass it to a Rust host, and have the host pass it back to Roc, then unbox it and call it in Roc?</p>\n<p>The purpose is to be able to have a kind of callback from async host functions. I don't want the Rust host to have to know or care about what arguments the function takes or what it returns, that'd strictly be a Roc concern.</p>",
        "id": 518930907,
        "sender_full_name": "sasiki",
        "timestamp": 1747581596
    },
    {
        "content": "<p>I don't think so.... but I would have to test to verify</p>",
        "id": 518932619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747582902
    },
    {
        "content": "<p>The issue is that we handle every function that is passed to the host in a special way to make it callable by the host and I don't think we actually support proper boxing of functions today....</p>",
        "id": 518932687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747582952
    },
    {
        "content": "<p>Should be possible to make work, but not sure anyone has tried...so probably won't work</p>",
        "id": 518932703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747582967
    },
    {
        "content": "<p>Would there be any difference if I settled for passing a tag that takes a single argument?</p>",
        "id": 518932753,
        "sender_full_name": "sasiki",
        "timestamp": 1747583026
    },
    {
        "content": "<p>Like a command?</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"no\">CallFn1</span><span class=\"w\"> </span><span class=\"no\">ArgType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">CallFn2</span><span class=\"w\"> </span><span class=\"no\">ArgType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">etc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 518932986,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747583185
    },
    {
        "content": "<p>Or do you mean something different?</p>",
        "id": 518932991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747583194
    },
    {
        "content": "<p>Yes, but for the return value, so like a <code>Msg</code> in TEA</p>",
        "id": 518933563,
        "sender_full_name": "sasiki",
        "timestamp": 1747583619
    },
    {
        "content": "<p>The Rust host function would take a <code>(a -&gt; Msg)</code>, perform some effect, and return <code>a, (a -&gt; Msg)</code> so that Roc could put those two together to produce a <code>Msg</code> and trigger that. I'm not writing exactly TEA, but that's a more clear example.</p>",
        "id": 518933665,
        "sender_full_name": "sasiki",
        "timestamp": 1747583707
    },
    {
        "content": "<p>Sorry, not \"return\" as it's an async function. It would call some Roc host function with <code>a, (a -&gt; Msg)</code>. In the TEA example that'd be e.g. <code>call_update(a, a -&gt; Msg)</code> which would put them together and call the app function <code>update(Msg)</code>. I guess TEA has a <code>Model</code> too, but that's not relevant to the example.</p>",
        "id": 518933804,
        "sender_full_name": "sasiki",
        "timestamp": 1747583834
    },
    {
        "content": "<p>Why do you need the extra indirection?</p>\n<p>Why not just have the host directly call update?</p>",
        "id": 518934057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747584040
    },
    {
        "content": "<p>Because I don't know how to make the Rust glue generic over <code>a</code></p>",
        "id": 518934383,
        "sender_full_name": "sasiki",
        "timestamp": 1747584242
    },
    {
        "content": "<p>(and <code>Msg</code>, since <code>Msg</code> is defined in app-code)</p>",
        "id": 518934634,
        "sender_full_name": "sasiki",
        "timestamp": 1747584471
    },
    {
        "content": "<p>So I just thought boxing the function and its argument would make it easier. That'd allow me to skip wrangling Rust glue (which I don't know much about) and just pass _anything_ back and forth.</p>",
        "id": 518934994,
        "sender_full_name": "sasiki",
        "timestamp": 1747584755
    },
    {
        "content": "<p>I would just avoid the closure, but otherwise, this should be doable without too much hassle.</p>\n<p>For things like basic webserver, we already make rust take an opaque model. It gets the model from init and passes it to update repeatedly</p>",
        "id": 518935061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747584840
    },
    {
        "content": "<p>In your case, is <code>Msg</code> truly opaque to the platform? It is always generated in roc and consumed in roc?</p>",
        "id": 518935142,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747584888
    },
    {
        "content": "<p>Yeah</p>",
        "id": 518935153,
        "sender_full_name": "sasiki",
        "timestamp": 1747584902
    },
    {
        "content": "<p>Ok.</p>",
        "id": 518935160,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747584906
    },
    {
        "content": "<p>Then just like model is boxed and rust only handles a pointer, you could box msg and have rust only handle a pointer to it.</p>",
        "id": 518935173,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747584923
    },
    {
        "content": "<p>Then have rust call update directly passing those two pointers</p>",
        "id": 518935188,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747584946
    },
    {
        "content": "<p>I'm not following completely... When you say \"you could box msg\" do you mean boxing the constructor <code>(a -&gt; Msg)</code>? I can't construct the <code>Msg</code> on the Roc-side without first getting whatever value it should contain from the Rust-side. Let's say I have this Roc host function:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">http_get</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Url</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"kt\">HttpErr</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nf\">http_get</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">url</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg_constructor</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</code></pre></div>\n<p>The Rust implementation of that would make the HTTP request, build the <code>RocResult</code> and then it's stuck between two worlds: it has the boxed constructor and it has <code>a</code>, but it can't put them together (that would require specific glue for each type of of effect to say what the return value is).</p>\n<p>That's why I thought I'd keep it generic and just box it all up, send it over to Roc, and let Roc apply it.</p>\n<p>I feel like I'm missing something?</p>",
        "id": 518936761,
        "sender_full_name": "sasiki",
        "timestamp": 1747586181
    },
    {
        "content": "<p>There is definitely something about your architecture plan I am not understanding.</p>",
        "id": 518949371,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747596199
    },
    {
        "content": "<p>Why isn't <code>http_get!</code> simply</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">http_get!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Url</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"w\"> </span><span class=\"no\">Response</span><span class=\"w\"> </span><span class=\"no\">HttpErr</span>\n</code></pre></div>\n<hr>\n<p>Or if you explicitly want a command and message system, I would expect something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"ss\">update</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Box</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Msg</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">Box</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">Cmd</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Where <code>Msg</code> is a wrapper around any possible output the platform could alert the app of (like recieving an http response) and <code>Cmd</code> is anything the app can request the platform do (like make an http request).</p>",
        "id": 518949810,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747596488
    },
    {
        "content": "<blockquote>\n<p>Why isn't <code>http_get!</code> simply</p>\n</blockquote>\n<p>Because I do want some kind of command and message system like you showed.</p>\n<blockquote>\n<p>Where <code>Msg</code> is a wrapper around any possible output the platform could alert the app of</p>\n</blockquote>\n<p>I'm stuck because <code>Msg</code> is app-defined, so the platform doesn't know how to construct one. Here's roughly what you'd write in Elm:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"kt\">Possible</span><span class=\"w\"> </span><span class=\"kt\">Msgs</span>\n<span class=\"kt\">Msg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">MyHttpRequest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"kt\">HttpErr</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"o\">...</span>\n<span class=\"p\">]</span>\n\n<span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"n\">constructs</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kt\">Cmd</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kt\">MyHttpRequest</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">fired</span>\n<span class=\"nf\">init</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Cmd</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"p\">)</span>\n<span class=\"nf\">init</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"kr\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">({},</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s\">\"https://www.example.com\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">MyHttpRequest</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I then execute that <code>Cmd</code> on the Rust-side of the platform, and end up with a result that I want to pass back in the form of a <code>Msg</code> to the app-code. How do I construct that <code>MyHttpRequest (Result Response HttpErr)</code> in Rust?</p>\n<p>My idea was to box everything. I box the message constructor when I pass it over to the Rust-side, I box the result of the effect on the Rust-side, and I pass both of those boxed things back to the Roc-side of the platform. Then Roc can unbox them and apply the function to the resulting argument. I just have to be responsible and make sure the type of the constructor and the argument lines up. If they do, Rust shouldn't have to know what <code>Msg</code> it was asked to produce.</p>\n<p>This should result in very little Rust glue code per effect.</p>\n<p>Do you think this is possible?</p>",
        "id": 518957718,
        "sender_full_name": "sasiki",
        "timestamp": 1747601756
    },
    {
        "content": "<p>i've been working on something similar for awhile.  your overall design is pretty on point but orthogonal to effectful-ness in Roc.  i would instead model the interface to these effects using a generic mechanism like a Cmd type that the platform controls .  just like Elm's runtime</p>",
        "id": 518959159,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747602857
    },
    {
        "content": "<p>but you are basically opting into a turn-based or actor-style programming model(nothing wrong with that - that's what i'm doing - but it's a different model than all other Roc platforms.</p>",
        "id": 518959229,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747602939
    },
    {
        "content": "<p>IIUC I would still run into the same issue with <code>Cmd</code>, no? IIUC a <code>Cmd</code> is instruction to the runtime to perform an effect and to send a <code>Msg</code> back with the result of the effect as the <code>Msg</code>s payload. The user passes in a constructor for the <code>Msg</code> that they want to receive back.</p>\n<p>The Rust-side of the platform would have to be able to apply the constructor given by the user to the result of the effect. That means it would have to know the types involved, which means you would have to write glue code for every effect that you expose (please correct me if I'm wrong, I don't know much about Roc/Rust interop).</p>\n<p>My idea was to skip the glue code by boxing the constructor and its argument and doing the application in Roc. Then you'd have minimal glue. I just don't know enough to figure out how to box a function, pass it to Rust, pass it back to Roc, unbox it, and apply it to a value.</p>",
        "id": 519042659,
        "sender_full_name": "sasiki",
        "timestamp": 1747645342
    },
    {
        "content": "<p>It definitely wouldn't need to know the types, if the Roc platform code handles calling the hosted functions. so you would do a when on the Cmd type, calling the appropriate hosted function for each and then calling the passed in lambda in the Roc code with the value returned from the hosted function and then return that result</p>",
        "id": 519064904,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747650678
    },
    {
        "content": "<p>Indeed, but isn't that limited to synchronous effects?</p>",
        "id": 519071800,
        "sender_full_name": "sasiki",
        "timestamp": 1747652403
    },
    {
        "content": "<p>not if your runtime is asynchronous</p>",
        "id": 519076501,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747653588
    },
    {
        "content": "<p>I'm in the browser with WASM, so I believe I'm quite restricted when it comes to async. I can't block at all, so to make an HTTP request for example I'd need to use <code>wasm_bindgen_futures::spawn_local</code> which returns unit immediately and runs the async block you give it in the background. To get the result of the HTTP request I'd need to call another function within the async block (i.e. a callback). Here's an example from Yew:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm_bindgen_futures</span><span class=\"p\">::</span><span class=\"n\">spawn_local</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fetched_videos</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Video</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Request</span><span class=\"p\">::</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://yew.rs/tutorial/data.json\"</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n<span class=\"w\">       </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">       </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">       </span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"w\">       </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">       </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">   </span><span class=\"n\">videos</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">fetched_videos</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>So IIUC the Rust host function wouldn't be able to return the HTTP result directly. It would have to call another Roc host function with the result, but it would also have to pass along the <code>Msg</code> constructor so that the Roc host function can apply the constructor to the result of the HTTP request. Am I making sense?</p>",
        "id": 519175450,
        "sender_full_name": "sasiki",
        "timestamp": 1747675215
    },
    {
        "content": "<p>oh sorry i didn't catch the WASM context. i don't really think i could help there</p>",
        "id": 519179676,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747676298
    },
    {
        "content": "<p>I have had this need as well of passing a function to a rust host and calling it again</p>\n<p>Here's a minimal repo where I attempt to isolate the simplest possible example of this: <a href=\"https://github.com/kamenchunathan/platform_tests\">https://github.com/kamenchunathan/platform_tests</a></p>",
        "id": 520196448,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1748092389
    },
    {
        "content": "<p>Maybe there's a way around it but I do not see a way to design around these specific limitations without being able to box functions or type constructors which I assume to be the same implementation-wise</p>",
        "id": 520204267,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1748098383
    },
    {
        "content": "<p>This platform is a simple platform that isolates passing a function through the boundary<br>\nLooking at the llvm IR for the compilation of the following user application code, </p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>app [\n    store,\n    use!,\n    Store,\n] { pf: platform \"../platform/main.roc\" }\n\nimport pf.Effects exposing [print!]\n\nStore : I32 -&gt; I32\n\nstore : Store\nstore = |_| 42069\n\nuse! : Store =&gt; {}\nuse! = |fs|\n    print! (Inspect.to_str (fs 89787))\n    {}\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc__store_for_host_1_exposed_generic</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!9</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%call</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"vg\">@\"_store_for_host!_99e2ebbd98e8a2a4c7ed9bd71d205d9f7b5d7e7a9ddb68dab65f2ad1c2198b\"</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!10</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!10</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!10</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"vg\">@\"_store_for_host!_99e2ebbd98e8a2a4c7ed9bd71d205d9f7b5d7e7a9ddb68dab65f2ad1c2198b\"</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%\"4\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!3</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%call</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"vg\">@Box_box_f03bf86f79d121cbfd774dec4a65912e99f5f17c33852bbc45e81916e62b53b</span><span class=\"p\">({}</span><span class=\"w\"> </span><span class=\"k\">zeroinitializer</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!7</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!7</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>roc seems to box a default zeroinitialized value and then create a separate function </p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc__use_for_host_0_caller</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%load_param</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!51</span>\n<span class=\"w\">  </span><span class=\"nv\">%call</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"vg\">@_10_4e123451c288c52798d3df0fc84811d2d957f324242982575c70dfd6d338df</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%load_param</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!51</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!51</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!51</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If I understood <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> what you were saying is that this function is meant to be callable by the host, but wouldn't this require compile time linkage?</p>\n<p>I'm also not too experienced in reading llvm IR so if I've made any wrong assumptions I'd appreciate being corrected</p>",
        "id": 520204497,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1748098614
    },
    {
        "content": "<p>Yeah, so that function is callable from the host.</p>",
        "id": 520213334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748105791
    },
    {
        "content": "<p>We expose a static function. The function takes all of the closure captures along with the standard arguments</p>",
        "id": 520213357,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748105815
    },
    {
        "content": "<p>The captures are the default zeroinitialized value you are seeing. Cause this case has not captures.</p>",
        "id": 520213402,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748105850
    },
    {
        "content": "<p>Updated the code in the repo to have the following control flow<br>\nthe platform passes a callback to the rust host, the rust host calls the callback with the appropriate arguments and gets the <code>Msg</code> type from the callbacks return, the calls the roc platform code again with this <code>Msg</code> type.</p>\n<p>Here's the relevant code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Captures</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"n\">PhantomPinned</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Msg</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"n\">PhantomPinned</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_roc_setup_callback</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__setup_callback_for_host_1_exposed_generic\"</span><span class=\"cp\">]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">caller</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__setup_callback_for_host_1_exposed_size\"</span><span class=\"cp\">]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">roc_alloc</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">caller</span><span class=\"p\">(</span><span class=\"n\">captures</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Captures</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_roc_callback</span><span class=\"p\">(</span><span class=\"n\">captures</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Msg</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__setup_callback_for_host_0_caller\"</span><span class=\"cp\">]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">caller</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Msg</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__setup_callback_for_host_0_result_size\"</span><span class=\"cp\">]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">msg_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"msg size: {msg_size}\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">msg_size</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ptr</span><span class=\"p\">::</span><span class=\"n\">NonNull</span><span class=\"p\">::</span><span class=\"n\">dangling</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">roc_alloc</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Msg</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"wow\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Msg</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_roc_handle_callback</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Msg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__handle_callback_for_host_1_exposed\"</span><span class=\"cp\">]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">caller</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Msg</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">rust_main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">captures</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">roc</span><span class=\"p\">::</span><span class=\"n\">call_roc_setup_callback</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">roc</span><span class=\"p\">::</span><span class=\"n\">call_roc_callback</span><span class=\"p\">(</span><span class=\"n\">captures</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">roc</span><span class=\"p\">::</span><span class=\"n\">call_roc_handle_callback</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>platform \"wow\" requires { Msg } {\n        on_event : Event -&gt; Msg,\n        handle! : Msg =&gt; {},\n    }\n    exposes [Effects, Event]\n    packages {\n    }\n    imports []\n    provides [\n        setup_callback_for_host!,\n        handle_callback_for_host!,\n    ]\n\nimport Event exposing [Event]\n\nsetup_callback_for_host! : I32 =&gt; (Event -&gt; Box Msg)\nsetup_callback_for_host! = |_|\n    wrapped = |e| Box.box (on_event e)\n    wrapped\n\nhandle_callback_for_host! : Box Msg =&gt; {}\nhandle_callback_for_host! = |boxed_msg|\n    msg = Box.unbox boxed_msg\n    handle! msg\n</code></pre></div>",
        "id": 520367288,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1748240686
    },
    {
        "content": "<p>This code however has issues in passing the Boxed result to and fro the host and platform, <br>\nthe <code>roc__setup_callback_for_host_0_caller</code> seems to only be able to take a pointer to the result,  what's the recommended way of creating a <code>RocBox&lt;T&gt;</code> in host code</p>",
        "id": 520368073,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1748241064
    },
    {
        "content": "<p>I think you can make the function take a <code>*mut *mut void</code>. Then call it while passing in a reference to a <code>*mut void</code> on the stack as a local variable. That should get you the boxes pointer. Sine rust is just passing the box back into roc, no need to have the host even know it is a box. Just passing that into the other roc function.</p>",
        "id": 520473420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748271279
    },
    {
        "content": "<p>I believe that is how boxes with at least in the generic caller functions, but would need to double check</p>",
        "id": 520473702,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748271363
    },
    {
        "content": "<p>This works for types that do not allocate, but roc string, and lists seem to go to the default value when they are passed back to the roc platform code from the host<br>\nWhat could be the cause of this</p>",
        "id": 520487213,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1748275275
    },
    {
        "content": "<p>When in a message that is based and sent to the host or when directly passed to the host?</p>",
        "id": 520491129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748276600
    },
    {
        "content": "<p>And is the host only passing it back once or many times?</p>",
        "id": 520491184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748276625
    },
    {
        "content": "<p>Was actually an FFI issue where I didn't dereference the pointer to the box hence it was passing in garbage memory to the callback. <br>\nI don't know how I didn't notice the value types constantly changin</p>",
        "id": 520625682,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1748339198
    }
]