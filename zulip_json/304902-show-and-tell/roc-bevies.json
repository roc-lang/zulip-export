[
    {
        "content": "<p>I don't know if this counts as \"the first Roc game\", since all Roc is doing is adjusting the speed of the ball+paddle... but it works great!<br>\n<a href=\"https://github.com/JanCVanB/roc-bevies\">https://github.com/JanCVanB/roc-bevies</a></p>\n<p><a href=\"/user_uploads/22008/Qpep-iLsmMJZO057kA2b0DOu/breakout.gif\">breakout gameplay</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Qpep-iLsmMJZO057kA2b0DOu/breakout.gif\" title=\"breakout gameplay\"><img src=\"/user_uploads/22008/Qpep-iLsmMJZO057kA2b0DOu/breakout.gif\"></a></div>",
        "id": 270167094,
        "sender_full_name": "jan kili",
        "timestamp": 1643703525
    },
    {
        "content": "<p>oh very cool!</p>",
        "id": 270167419,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643703701
    },
    {
        "content": "<p>the platform should be able to accept an u16, I can check why that did not work later today</p>",
        "id": 270167446,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643703715
    },
    {
        "content": "<p>Thanks! This is my first original (not entirely copy-pasted) Rust code, so it's likely that I misunderstood <code>roc_std</code>'s (and Bevy's) constraints.</p>",
        "id": 270167708,
        "sender_full_name": "jan kili",
        "timestamp": 1643703816
    },
    {
        "content": "<p>so bevy does not work for me currently (linker problems), but looking at the LLVM IR I don't see why having the roc code (ultimately <code>speedForHost</code>) return an <code>I16</code>. What was the problem you ran into?</p>",
        "id": 270293199,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643752119
    },
    {
        "content": "<p>I was simply hacking naively until something worked, so this could all be incorrect: The equation it plugs into seems to expect an f32, and Rust told me that it couldn't autocast an i128 to an f32. Instead, it suggested that it could do so for an i16, so I went with that.</p>",
        "id": 270297116,
        "sender_full_name": "jan kili",
        "timestamp": 1643753735
    },
    {
        "content": "<p>are there downsides to roc just giving you an f32?</p>",
        "id": 270297509,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643753922
    },
    {
        "content": "<p>No, that would be great! I was working under the assumption that the only types I could pass between Roc &amp; Rust were the <code>pub RocFoo</code> things in <code>roc_std/</code>, so basically <code>RocStr</code>, <code>RocDec</code>, and <code>RocResult</code>.</p>",
        "id": 270298735,
        "sender_full_name": "jan kili",
        "timestamp": 1643754487
    },
    {
        "content": "<p>oh, no</p>",
        "id": 270298760,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754502
    },
    {
        "content": "<p>all the primitive types also work</p>",
        "id": 270298775,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754507
    },
    {
        "content": "<p>so ints and floats</p>",
        "id": 270298795,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754520
    },
    {
        "content": "<p>ðŸ¤¯</p>",
        "id": 270298810,
        "sender_full_name": "jan kili",
        "timestamp": 1643754526
    },
    {
        "content": "<p>these map 1 to 1 (except <code>Nat</code> becomes <code>usize</code>)</p>",
        "id": 270298869,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754551
    },
    {
        "content": "<p>Well that's wonderful.</p>",
        "id": 270298894,
        "sender_full_name": "jan kili",
        "timestamp": 1643754565
    },
    {
        "content": "<p>and as I said elsewhere records/structs also work in a predictable but not always intuitive way</p>",
        "id": 270298953,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754597
    },
    {
        "content": "<p>I think I skimmed the examples and only found <code>RocStr</code> used.</p>",
        "id": 270298958,
        "sender_full_name": "jan kili",
        "timestamp": 1643754598
    },
    {
        "content": "<p>so far sending integers was boring</p>",
        "id": 270299032,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754614
    },
    {
        "content": "<p>Me: \"Passing ints &amp; floats must be hard, somehow. Dec it is!\"</p>",
        "id": 270299145,
        "sender_full_name": "jan kili",
        "timestamp": 1643754678
    },
    {
        "content": "<p>we just happen to agree on what the bits mean for number types</p>",
        "id": 270299436,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754802
    },
    {
        "content": "<p>for strings for instance that is not true, because we have the small string optimization</p>",
        "id": 270299472,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643754820
    },
    {
        "content": "<p>Therefore, my next steps for roc-bevies is to (a) simplify int passing and (b) expanding breakout to populate most constant values &amp;  primitive formulae with Int/Float/Str/function fields of a big Roc configuration record</p>",
        "id": 270299700,
        "sender_full_name": "jan kili",
        "timestamp": 1643754925
    },
    {
        "content": "<p>I love the idea of Rust/Bevy handling all the heavy rendering logic, then asking its boss Roc \"hey, what sprite should I use here, and how many points does the player get for this?\"</p>",
        "id": 270299905,
        "sender_full_name": "jan kili",
        "timestamp": 1643755027
    },
    {
        "content": "<p>yes! I think it gets really interesting if the roc app stores some state</p>",
        "id": 270300673,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643755395
    },
    {
        "content": "<p>How??</p>",
        "id": 270300927,
        "sender_full_name": "jan kili",
        "timestamp": 1643755527
    },
    {
        "content": "<p>Monadically?</p>",
        "id": 270300942,
        "sender_full_name": "jan kili",
        "timestamp": 1643755537
    },
    {
        "content": "<p>I'd love to hear an example :D</p>",
        "id": 270301126,
        "sender_full_name": "jan kili",
        "timestamp": 1643755666
    },
    {
        "content": "<p>No, I think game logic could live in roc. This may be a bit contrived but</p>\n<div class=\"codehilite\"><pre><span></span><code>Model : { score : U64 }\n\nMsg : [ ScoredPoint ]\n\nupdate : Model, Msg -&gt; Model\nupdate = \\model, msg -&gt;\n    when msg is\n        ScoredPoint -&gt; { score: model.score + 1 }\n\n\nview : Model -&gt; U64\nview = .score\n</code></pre></div>",
        "id": 270301471,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643755817
    },
    {
        "content": "<p>you'd also need <code>init = { score: 0 }</code></p>",
        "id": 270301524,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643755840
    },
    {
        "content": "<p>then the platform can call <code>init</code>, and then update the model it has every time a game event happens (e.g. score is increased), and \"render\" the score when needed</p>",
        "id": 270301638,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643755901
    },
    {
        "content": "<p>does this make sense in practice? I don't really know, but it's possible</p>",
        "id": 270301786,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643755950
    },
    {
        "content": "<p>Yes! This update-state-on-event loop is common in games, and Bevy has a managed hyperscalable version of that pattern in its ECS architecture</p>",
        "id": 270306463,
        "sender_full_name": "jan kili",
        "timestamp": 1643758032
    },
    {
        "content": "<p>I suppose that Roc could complement an ECS platform with its own additional state management layer, but I'm not sure why it would</p>",
        "id": 270307644,
        "sender_full_name": "jan kili",
        "timestamp": 1643758665
    },
    {
        "content": "<p>If your app doesn't have a fixed timestep, that could be a fun pattern for discrete event simulations :)</p>",
        "id": 270307859,
        "sender_full_name": "jan kili",
        "timestamp": 1643758778
    },
    {
        "content": "<p>On second thought, since Bevy claims to be modular, moving state management (data layer, ECS, whatever) into Roc could be quite fun</p>",
        "id": 270329497,
        "sender_full_name": "jan kili",
        "timestamp": 1643773605
    },
    {
        "content": "<p>I'm pretty bummed that it looks like Roc can't define Bevy game nouns (entities are defined via Rust struct literals) or verbs (system functions reference entity types), only support them with primitive-passing functions. Is that accurate?</p>",
        "id": 270329558,
        "sender_full_name": "jan kili",
        "timestamp": 1643773676
    },
    {
        "content": "<p>I guess you'd need to have your platform code create rust types (macro?) from roc types.</p>",
        "id": 270353653,
        "sender_full_name": "Matthias Devlamynck",
        "timestamp": 1643793119
    },
    {
        "content": "<p>Mirroring bevy's systems API to expose it to Roc may prove to be difficult ^^'</p>",
        "id": 270353833,
        "sender_full_name": "Matthias Devlamynck",
        "timestamp": 1643793238
    },
    {
        "content": "<p>actrually <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> have you thought about this? I remember we discussed writing database plugins in Roc which would run into the same issues: you'd want the database to understand your specific roc data structure. As far as I know, you can only do that with additional code gen</p>",
        "id": 270373768,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643803922
    },
    {
        "content": "<p>e.g. for postgress extensions in rust you need to derive a bunch of things</p>",
        "id": 270373814,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643803935
    },
    {
        "content": "<p>and it generates a ton of C code</p>",
        "id": 270373824,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643803948
    },
    {
        "content": "<p><span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span><span aria-label=\"memo\" class=\"emoji emoji-1f4dd\" role=\"img\" title=\"memo\">:memo:</span></p>",
        "id": 270374007,
        "sender_full_name": "jan kili",
        "timestamp": 1643804048
    },
    {
        "content": "<p>so what we'd talked about awhile ago (a year or so maybe?) was something along these lines:</p>\n<ul>\n<li>Give the Roc compiler CLI a command where you give it a <code>.roc</code> file and it outputs a serialized representation (exact format TBD) of all the types that would get sent to the host, in a format that includes all the necessary low-level information (e.g. struct field ordering would have already taken into account alignment and alphabetizing)</li>\n<li>Anyone can now take that serialized representation and write a generator for a particular language, e.g. one that goes from that representation to Rust type declarations, another that goes to C declarations, etc.</li>\n</ul>\n<p>we hadn't talked about it in the context of Rust macros needing to get involved, but one idea for a particularly fancy way that could potentially work: in your Rust host's <code>build.rs</code>, use <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> to generate <code>.rs</code> files from your Roc types, with the (un-annotated) structs and everything, then - still in <code>build.rs</code> - modify those files to add the annotations (e.g. find/replace <code>struct Player {</code> with <code>#[derive(BevyStuff)]\\nstruct Player {</code>), and then let the build continue as normal.</p>",
        "id": 270375692,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643805041
    },
    {
        "content": "<p>so assuming all the generator prerequisites were in place (they don't exist yet, of course!) the workflow would be:</p>\n<ul>\n<li>The Roc types are the source of truth; you can just change them whenever</li>\n<li>The <code>build.rs</code> stuff will take care of keeping the Rust types in sync with the Roc types, and adding any annotations Bevy needs, so you can also build your Rust project with <code>cargo</code> as normal and it will stay in sync</li>\n</ul>\n<p>of course there's some extra setup work involved to make that generation/substitution happen at the right time, but I don't think that's avoidable in the general case whenever the goal is to sync type definitions between two decoupled programming languages <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 270375998,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1643805247
    },
    {
        "content": "<p>Right, the challenge is then to make the whole rust/c/zig codegen bit hidden from the Roc user</p>",
        "id": 270376253,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643805398
    },
    {
        "content": "<p>for <a href=\"https://github.com/zombodb/pgx\">https://github.com/zombodb/pgx</a> they do this with a custom cargo command</p>",
        "id": 270376300,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1643805433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> That sounds awesome! I had no idea Roc could get that powerful.</p>",
        "id": 270376345,
        "sender_full_name": "jan kili",
        "timestamp": 1643805458
    },
    {
        "content": "<p>That codegen feature addition would enable replacing <code>roc-bevies</code> (dozens of subgenre-specific platforms) with <code>roc-bevy</code> (one general-purpose gamedev platform).</p>",
        "id": 270382193,
        "sender_full_name": "jan kili",
        "timestamp": 1643808173
    },
    {
        "content": "<p>cool stuff!</p>",
        "id": 270428880,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1643824368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <a href=\"https://github.com/JanCVanB/roc-bevies/commit/70fc0e\">https://github.com/JanCVanB/roc-bevies/commit/70fc0e</a></p>",
        "id": 271231607,
        "sender_full_name": "jan kili",
        "timestamp": 1644383343
    }
]