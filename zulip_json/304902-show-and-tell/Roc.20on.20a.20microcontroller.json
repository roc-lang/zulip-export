[
    {
        "content": "<p>So not that it is doing more than calling the fib function, but I got Roc running on a microcontroller. Specifically a <a href=\"https://tech.microbit.org/hardware/\">microbitv2</a> running a cortex-m4.</p>\n<div class=\"codehilite\"><pre><span></span><code>18:47:49.263 Acording to Roc, the fib of 39 is...\n18:47:49.263 63245986\n18:47:49.263 Acording to Roc, the fib of 40 is...\n18:47:49.263 102334155\n18:47:49.263 Acording to Roc, the fib of 41 is...\n18:47:49.263 165580141\n18:47:49.294 Acording to Roc, the fib of 42 is...\n18:47:49.294 267914296\n18:47:49.294 Acording to Roc, the fib of 43 is...\n18:47:49.294 433494437\n18:47:49.294 Acording to Roc, the fib of 44 is...\n18:47:49.294 701408733\n18:47:49.325 Acording to Roc, the fib of 45 is...\n18:47:49.325 1134903170\n18:47:49.325 Acording to Roc, the fib of 46 is...\n18:47:49.325 panicked at &#39;Roc panicked: 0x7be1 0&#39;, src/05-led-roulette/src/main.rs:20:5\n</code></pre></div>",
        "id": 271664554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1644634141
    },
    {
        "content": "<p>Really easy to get Roc to panic. Not fully sure why. Not specifically related to the value passed in. Like if I add more debug printing, Roc will panic more easier. It is a very strange side effect I guess.</p>",
        "id": 271664606,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1644634209
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"231635\" href=\"/#narrow/stream/231635-compiler-development/topic/casual.20conversation\">#compiler development &gt; casual conversation</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span></p>",
        "id": 271667512,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644638199
    },
    {
        "content": "<p>Also, it looks to be running at the same speed as the while loop rust version. Both taking about 260ms to calculate the fib 10000 times.<br>\nThough linking in roc adds about 3000B while the rust fib function is like 100B.</p>\n<div class=\"codehilite\"><pre><span></span><code>20:36:02.026 Calculating fib(92) 10000 times in roc\n20:36:02.278 Result: 7540113804746346429\n20:36:02.278 Calculating fib(92) 10000 times in rust linear\n20:36:02.542 Result: 7540113804746346429\n</code></pre></div>\n<p>This is the max fib that fits into a <code>u64</code>. Any higher and roc would panic.</p>",
        "id": 271669799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1644641837
    },
    {
        "content": "<p>Roc calculating prime numbers and then displaying them in binary on an led display. The host passes a model (u64) to roc. Roc returns the next model and a 2d array to set the display to. Each iteration roc calculates the highest prime under the models value.  <a href=\"/user_uploads/22008/1lJU6Xv5570z-fEzASh2L4DK/microbit-primes.mp4\">microbit-primes.mp4</a></p>",
        "id": 271947188,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1644917303
    },
    {
        "content": "<p>very cool!</p>",
        "id": 271948146,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1644917870
    },
    {
        "content": "<p>woah that's cool!</p>",
        "id": 271980579,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1644935016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> is this code up anywhere? I'm interested in trying to get Roc going on an esp8266</p>",
        "id": 285588064,
        "sender_full_name": "Jared",
        "timestamp": 1654804905
    },
    {
        "content": "<p><a href=\"https://github.com/bhansconnect/roc-microbit\">https://github.com/bhansconnect/roc-microbit</a></p>",
        "id": 285590406,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654806006
    },
    {
        "content": "<p>I haven't touched in a long while though, so it probably won't work if you update to the newest version of the compiler...but not fully sure</p>",
        "id": 285590441,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654806036
    },
    {
        "content": "<p>Can probably fix it up if you need help. (probably even have an esp8266 sitting around to test it on)</p>",
        "id": 285590447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654806046
    },
    {
        "content": "<p>Also, you may want to try and use something based on the embassy branch. Embassy is a nicer/newer framework, but may not support as many chips especially with limited support for hardware/more manual setup if trying a different chip.</p>",
        "id": 285590676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654806196
    },
    {
        "content": "<p>Might be more of a reference for how you would do things on an esp8266. It looks like esp8266 may need to use a different rust based framework or c++ framework.</p>",
        "id": 285591112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654806455
    },
    {
        "content": "<p>Yeah I was thinking I would write the platform in c++, as that's what I'm used to using w/ esp8266. no idea how hard it will be to get everything playing nice though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 285595112,
        "sender_full_name": "Jared",
        "timestamp": 1654808540
    },
    {
        "content": "<p>any special reason it's got <code>roc</code> as a git submodule? Is it just to pin to a specific version?</p>",
        "id": 285595232,
        "sender_full_name": "Jared",
        "timestamp": 1654808609
    },
    {
        "content": "<p>Yeah, keeps it separate from my roc that I am working on, pins to specific version, and makes the repo more self contained.</p>",
        "id": 285595396,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808687
    },
    {
        "content": "<p>And yeah, C++ should be totally fine.</p>",
        "id": 285595411,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808698
    },
    {
        "content": "<p>Probably easier</p>",
        "id": 285595441,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808712
    },
    {
        "content": "<p>oh I see you needed to make changes to roc to get it to target microbit</p>",
        "id": 285595463,
        "sender_full_name": "Jared",
        "timestamp": 1654808725
    },
    {
        "content": "<p>I assume I'll need similar changes?</p>",
        "id": 285595473,
        "sender_full_name": "Jared",
        "timestamp": 1654808732
    },
    {
        "content": "<p>Yeah</p>",
        "id": 285595552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808764
    },
    {
        "content": "<p>espessif has their own llvm fork that's used <a href=\"https://github.com/espressif/llvm-project\">https://github.com/espressif/llvm-project</a></p>",
        "id": 285595567,
        "sender_full_name": "Jared",
        "timestamp": 1654808772
    },
    {
        "content": "<p>Oh...that may be problematic if it is need...or well, it would probably just require you telling roc to use that fork, so probably not terrible if it is up to date</p>",
        "id": 285595634,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808813
    },
    {
        "content": "<p>yeah they have a llvm13 release</p>",
        "id": 285595660,
        "sender_full_name": "Jared",
        "timestamp": 1654808827
    },
    {
        "content": "<p>You might be able to just target the same architecture with roc</p>",
        "id": 285595662,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808827
    },
    {
        "content": "<p>Yeah, then probably not to bad. Just build roc with that as your llvm path</p>",
        "id": 285595703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808854
    },
    {
        "content": "<p>forget the exact correct term here</p>",
        "id": 285595721,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808863
    },
    {
        "content": "<p>And then add in the target like I did for the microbit</p>",
        "id": 285595735,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808874
    },
    {
        "content": "<p>so, I have almost no understanding of how llvm works, but I know there's some sort of pseudo-assembly. Is there a way to have roc just output llvm-asm, and then externally bundle that up &amp; link &amp; such?</p>",
        "id": 285595789,
        "sender_full_name": "Jared",
        "timestamp": 1654808886
    },
    {
        "content": "<p>that way I wouldn't need roc to know anything about the custom llvm fork, or the architecture as much (?)</p>",
        "id": 285595845,
        "sender_full_name": "Jared",
        "timestamp": 1654808914
    },
    {
        "content": "<p>Technically yes, but it is probably easier to have roc just spit out an object file</p>",
        "id": 285595910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654808961
    },
    {
        "content": "<p>As long as you get the architecture right, it should still run fine. I assume the custom version of LLVM is mostly for the hardware mapping more so than the assembly instruction type.</p>",
        "id": 285596044,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654809024
    },
    {
        "content": "<p>Also, compiling roc with a different llvm that you already have on your machine should be easy. Should just be setting an environment variable to point to the correct version of llvm</p>",
        "id": 285596123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654809069
    },
    {
        "content": "<p>Otherwise, if you add --debug, it will dump the llvm ir which you can theoretically use as input.</p>",
        "id": 285596162,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654809086
    },
    {
        "content": "<p>ok cool. So by \"getting the architecture right\", I'm guessing the 8266 is RISC-V? the wikipedia page just says \"RISC\" so I'm not 100% sure.</p>",
        "id": 285599734,
        "sender_full_name": "Jared",
        "timestamp": 1654811030
    },
    {
        "content": "<p>oh wait maybe it's called xtensa</p>",
        "id": 285600069,
        "sender_full_name": "Jared",
        "timestamp": 1654811274
    },
    {
        "content": "<p>It would be whatever the llvm target flag would get set to. Also, forget the esp8266 was the risc-v one. Fancy.</p>",
        "id": 285600992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654811885
    },
    {
        "content": "<p>oh I guess it's just risc-based, not quite risc-v. any ideas on what the <code>Environment</code> would be?</p>",
        "id": 285602601,
        "sender_full_name": "Jared",
        "timestamp": 1654812950
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ok anyway I've got the xtensa llvm set up as my <code>LLVM_SYS_130_PREFIX</code>, but now cargo can't build roc at all <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> because the <code>cc</code> doesn't know how to build for x86_64. Am I supposed to set the LLVM_SYS_130_PREFIX only when running the cli, and not during <code>cargo build</code>?</p>",
        "id": 285624249,
        "sender_full_name": "Jared",
        "timestamp": 1654829755
    },
    {
        "content": "<p>oof zig doesn't have xtensa support in core. that might be one blow too many</p>",
        "id": 285625420,
        "sender_full_name": "Jared",
        "timestamp": 1654830887
    },
    {
        "content": "<p>hmmmm but someone has gotten zig to work with xtensa apparently <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <a href=\"https://github.com/inetbowser/zig-xtensa\">https://github.com/inetbowser/zig-xtensa</a></p>",
        "id": 285625887,
        "sender_full_name": "Jared",
        "timestamp": 1654831341
    },
    {
        "content": "<p>Oh. That might be more complicated than I expected. I would have guessed it still supported x86 building</p>",
        "id": 285630797,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654836585
    },
    {
        "content": "<p>But yeah, needs to be set during build</p>",
        "id": 285630842,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1654836614
    },
    {
        "content": "<p>it's possible it would know how to do x86 if I build from source; I'm just working with the release bundle they put out.</p>",
        "id": 285667798,
        "sender_full_name": "Jared",
        "timestamp": 1654863904
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/i-wqtnJ0PjNlpFGqFBiby6b0/PXL_20220619_003055406.TS.mp4\">Line following in Roc</a></p>",
        "id": 286678630,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1655598725
    },
    {
        "content": "<p>Technically not really more complicated on the roc side than the prime example. Mostly was pipelining on the rust side to control the robot and exposing that to roc.</p>",
        "id": 286678711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1655598870
    },
    {
        "content": "<p>coooooooooool <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 286708681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1655643652
    }
]