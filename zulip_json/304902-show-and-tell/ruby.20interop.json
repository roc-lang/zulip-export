[
    {
        "content": "<p>this is really cool: the Ruby interop example now uses JSON as a quick-and-dirty way to send arbitrary values between Roc and Ruby:</p>\n<ul>\n<li>the <a href=\"https://github.com/roc-lang/roc/blob/a06ba9ad23080290cc2bd945729d8a78e7bc47db/examples/ruby-interop/platform/main.roc#L2\">platform's API says</a> \"give me a <code>main</code> that takes a type that can be decoded, and returns a type that can be encoded, and I'll take care of the rest</li>\n<li>the app's <code>main</code> argument and return value can be pretty much any Roc type that doesn't contain a function (since those can't be serialized as JSON) - like <a href=\"https://github.com/roc-lang/roc/blob/a06ba9ad23080290cc2bd945729d8a78e7bc47db/examples/ruby-interop/main.roc\">in this example</a> where I arbitrarily decided on <code>U64 -&gt; Str</code></li>\n<li>the Roc platform and the Ruby glue take care of the JSON intermediary part; the Roc application doesn't even mention it</li>\n</ul>",
        "id": 307875125,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667530334
    },
    {
        "content": "<p>shoutout to <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> for getting the \"automatic JSON encoding and decoding\" working that facilitates this!</p>",
        "id": 307875138,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667530350
    },
    {
        "content": "<p>we can make a fancier platform in the future which supports going directly to Ruby types without the JSON intermediary, and which can support sending functions to Ruby and so on...but this gets a ton of the way there, and it only took me a few minutes to change from sending strings to Ruby to sending automatically serialized near-arbitrary Roc types via JSON!</p>",
        "id": 307875187,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667530420
    },
    {
        "content": "<p>So for the extra cost of encoding and decoding you get a super flexible API<br>\n..that's really cool</p>",
        "id": 307875452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667530643
    },
    {
        "content": "<p>wow, and this works without any compiler panics??</p>",
        "id": 307875855,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1667531025
    },
    {
        "content": "<p>yup!</p>",
        "id": 307880588,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667534903
    },
    {
        "content": "<p>we're getting really good at this programming language thing</p>",
        "id": 307880694,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1667534962
    },
    {
        "content": "<p>granted, a proper glue implementation would be faster, and more flexible...and probably take more like a week of work <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 307880731,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667534985
    }
]