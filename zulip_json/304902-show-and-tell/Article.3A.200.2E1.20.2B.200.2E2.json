[
    {
        "content": "<p>I wrote an article about how 0.1 + 0.2 works in Roc - any feedback welcome!</p>\n<p><a href=\"https://docs.google.com/document/d/11JzH-Xjc2WpRT0yp8w4PXwUtq9KJcL_EQ4-PG9f_JI8/edit?usp=sharing\">https://docs.google.com/document/d/11JzH-Xjc2WpRT0yp8w4PXwUtq9KJcL_EQ4-PG9f_JI8/edit?usp=sharing</a></p>",
        "id": 436794597,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714694150
    },
    {
        "content": "<p>not specifically in response to <a href=\"https://twitter.com/oznova_/status/1784841631143006367\">https://twitter.com/oznova_/status/1784841631143006367</a> but timely <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 436795457,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714694639
    },
    {
        "content": "<p>Not critical but the article doesn't show how to get F32/F64 numbers in Roc. There's an implication for doing it it via top level function annotations and the type names are provided but I think having it written out somewhere would be nice.</p>",
        "id": 436797664,
        "sender_full_name": "Karl",
        "timestamp": 1714696199
    },
    {
        "content": "<blockquote>\n<p>20 before decimal point,<br>\n17 after decimal point</p>\n</blockquote>\n<p>Should say 18 after the decimal point</p>",
        "id": 436799628,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714697810
    },
    {
        "content": "<p>And I guess we can technically store some numbers with 21 before, but that is quite limited.</p>",
        "id": 436799657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714697832
    },
    {
        "content": "<p>I think it would also be good to mention precision loss due to multiplication. It hits fixed point decimals significantly more than floating point decimals.</p>",
        "id": 436800147,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714698148
    },
    {
        "content": "<p>E.G. <code>0.000000001*0.0000000001</code> is <code>0</code> with roc's fixed point dec, but should lose no precision in the C# floating point dec. It should just update the exponent.</p>",
        "id": 436800185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714698182
    },
    {
        "content": "<p>And this generally isn't an issue, but with repeated multiplication of decimals, it is essentially guaranteed that some values will fall of the end. I don't think we currently have any sort of rounding for this. So values over time will trend smaller cause this is a form of truncation.</p>",
        "id": 436800315,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714698286
    },
    {
        "content": "<p>This may be a clearer example of the error I am talking about: <code>0.123456789 * 0.00000000001 * 100000000000</code></p>\n<p>Results in <code>0.1234567</code></p>",
        "id": 436800694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714698484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Article.3A.200.2E1.20.2B.200.2E2/near/436799628\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>20 before decimal point,<br>\n17 after decimal point</p>\n</blockquote>\n<p>Should say 18 after the decimal point</p>\n</blockquote>\n<p>oh yeah I guess we get all 18 as long as we only have 20 before <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 436804648,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714701705
    },
    {
        "content": "<p>thanks, those are good points to clarify!</p>",
        "id": 436804754,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714701767
    },
    {
        "content": "<p>after writing this I got curious about how our <code>Dec</code> performance compares to C#'s <code>System.Decimal</code> but I really need to switch to preparing for this live-coding demo on May 7 and not start another project <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 436804797,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714701835
    },
    {
        "content": "<p>here's a prettier draft with the previous round of feedback incorporated: <a href=\"https://rtfeldman.com/0.1-plus-0.2\">https://rtfeldman.com/0.1-plus-0.2</a> - I'm looking to share it around Tuesday, so any feedback welcome between now and then!</p>",
        "id": 440682038,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716693965
    },
    {
        "content": "<p>Nice! It was interesting to hear that Go evaluates constants differently</p>",
        "id": 440686763,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1716700097
    },
    {
        "content": "<p>Loved the article! I liked the introduction to the <code>Dec</code> type, but it also works quite well as documentation for base-2 floating point behavior, I think! Got two feedbacky thoughts:</p>\n<p>The article mentions calculations with money as a usecase for <code>Dec</code>, but I'm curious if we'd recommend that outside of the context of this blogpost demonstrating <code>Dec</code>? I think I might still prefer to represent money as the amount of cents, stored in an <code>Int</code>, to make amounts with partial cents unrepresentable.</p>",
        "id": 440694527,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1716709428
    },
    {
        "content": "<p>Second thought: Given the performance benefits, do we expect base-2 floating points to be the default in most production code? If so, is it going to trip people up that the default decimal type used in the REPL will be different to the default decimal type in most production code?</p>\n<p>Concrete scenario: Someone new to the intricacies of base-2 float points sees a test failure that, when reduced, comes down to <code>0.1 + 0.2 != 0.3</code>. When they try in the REPL, that works. Back in the test, it doesn't. Do we have a path for folks to resolve that confusion by themselves?</p>",
        "id": 440694913,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1716709817
    },
    {
        "content": "<p>I would guess that since floating point numbers are explicitly opt-in, the only way for a codebase to end up using them is if said hypothetical person opted into them themselves, or someone on their team did. In the former case, it would mean that somewhere in their program is a type annotation or number literal suffix that might be discovered when looking for differences between the broken code and the working code in the REPL. In the latter case, it would just be a matter of asking one's coworkers.</p>",
        "id": 440703157,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1716719101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Article.3A.200.2E1.20.2B.200.2E2/near/440694913\">said</a>:</p>\n<blockquote>\n<p>Given the performance benefits, do we expect base-2 floating points to be the default in most production code?</p>\n</blockquote>\n<p>I expect it to vary by use case. For graphical things, I expect lots of <code>F32</code>s because that's what GPUs prefer. For money things, I expect <code>Dec</code> - I don't know why anyone would opt into floats for that! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 440707777,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716723950
    },
    {
        "content": "<p>so I guess I don't think there will be one uniform answer to that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 440707829,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716723982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Article.3A.200.2E1.20.2B.200.2E2/near/440694527\">said</a>:</p>\n<blockquote>\n<p>I think I might still prefer to represent money as the amount of cents, stored in an <code>Int</code>, to make amounts with partial cents unrepresentable.</p>\n</blockquote>\n<p>so I based this on looking into how people represent money in other languages - I thought <a href=\"https://stackoverflow.com/questions/582797/should-you-choose-the-money-or-decimalx-y-datatypes-in-sql-server\">this</a> was a good discussion (not any one answer, necessarily, but the discussion itself)</p>",
        "id": 440707875,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716724071
    },
    {
        "content": "<p>it seems like people tend to view more digits after the decimal point as a benefit when dealing with money, and then truncate only when printing</p>",
        "id": 440707931,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716724102
    },
    {
        "content": "<p>for example, one person in that discussion said \"storing accounting values as integer multiples of 1/10000th of unit is very common\"</p>",
        "id": 440707945,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716724134
    },
    {
        "content": "<p>Interesting stuff! I've been working with a payment system for the past year or two and the need for fractional cents hasn't shown up there and that influenced me a bit, but I can totally imagine that someone writing, say, software for a stock market would have different needs. Thanks for the link!</p>",
        "id": 440712097,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1716728570
    },
    {
        "content": "<p>I would honestly expect Dec to be more common in most production systems for a few reasons:</p>\n<ol>\n<li>It is the language default so many will use it without thinking about it.</li>\n<li>It has a number of nice accuracy related benefits that people will get used to</li>\n<li>Most production code is business logic where correctness is more important than perf</li>\n<li>Assuming you are mostly adding/subtracting, Dec is faster than floats.</li>\n</ol>",
        "id": 440715213,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716731856
    },
    {
        "content": "<p>Really good read! I have a few remarks. Coming from the scientific world, I think I’m missing one major argument for when to use floating point representations. When you deal with multiplication and division of multiple values, you can easily reach the limits of fixed points representations. Basically you have no choice when doing math. But if most of your use cases only involve addition / substraction, and very few multiplications/divisions then no need for floating point. In that sense it’s nice that Decimal is even faster at addition/substraction for when it’s the actual preferred use case.</p>",
        "id": 440726357,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716742897
    },
    {
        "content": "<p>In a sense you showed this when doing the 0.00...1 square multiplication example.</p>",
        "id": 440726440,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716742976
    },
    {
        "content": "<p>ahh interesting! Do you happen to have a nice concrete example of that I could mention?</p>",
        "id": 440727455,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716744068
    },
    {
        "content": "<p>like a particular type of scientific calculation that runs into this</p>",
        "id": 440727465,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716744094
    },
    {
        "content": "<p>Anything that involves optimization problem means you want to solve a function that tends to 0 so you need \"almost arbitrary\" precision close to 0<br>\nAnything that involves iterative algorithms with matrix multiplications. Matrix decompositions etc. There is even a concept called the \"condition number\" <a href=\"https://en.wikipedia.org/wiki/Condition_number\">https://en.wikipedia.org/wiki/Condition_number</a> that is usually a measure of how \"usefull for computation precision\" is a matrix.</p>",
        "id": 440727777,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716744456
    },
    {
        "content": "<p>Maybe one concrete use case for potential newcomers would be students trying to solve their physics tasks.<br>\nIn physics, there are a lot of constants that have very big/small exponents. For example:</p>\n<ul>\n<li>gravity : G=6.67430 * 10^(−11)</li>\n<li>charge of an electron : e=1.602176634 * 10^(−19)</li>\n<li>etc.<br>\n-</li>\n</ul>",
        "id": 440728341,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716745125
    },
    {
        "content": "<p>And you typically multiply / divide them a lot to compute the answer you are looking for.</p>",
        "id": 440728361,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716745167
    },
    {
        "content": "<p>that makes sense!</p>",
        "id": 440733909,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716751250
    },
    {
        "content": "<p>and I assume you wouldn't care about base-2 vs base-10 in those use cases</p>",
        "id": 440733927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716751267
    },
    {
        "content": "<p>I don’t think I would, except if there is a huge performance tradeoff and I’m doing something that may be long to compute.</p>",
        "id": 440790785,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716794386
    },
    {
        "content": "<p>I have just put down an intro to chaos theory that was pioneered by meteorologist who had a slight rounding error that have lead to wildly different results. </p>\n<p>I feel that you could have a bit of Pop-Sci bit where you show the importance of the concept of exact numbers.</p>",
        "id": 440941679,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1716856839
    },
    {
        "content": "<p>this is now published at <a href=\"https://rtfeldman.com/0.1-plus-0.2\">https://rtfeldman.com/0.1-plus-0.2</a> - thanks everyone for commenting!</p>",
        "id": 441015720,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716894690
    },
    {
        "content": "<p>I submitted it to HN; it's under \"new\" if anyone wants to upvote it (they penalize upvotes that come from direct links)</p>",
        "id": 441025563,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716898153
    },
    {
        "content": "<p>also feel free to share it around anywhere else you like!</p>",
        "id": 441025796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716898227
    },
    {
        "content": "<p>someone commented that</p>\n<blockquote>\n<p>It's possible to have a fixed-point, base-2 representation, but we won't discuss that combination because it's so rarely used in practice.</p>\n</blockquote>\n<p>is not actually true if you are lowlevel enough. Apparently it comes up all the time in media codecs and such</p>\n<p><a href=\"https://hachyderm.io/@harold@mastodon.gamedev.place/112522962115617393\">https://hachyderm.io/@harold@mastodon.gamedev.place/112522962115617393</a></p>",
        "id": 441189674,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1716970682
    },
    {
        "content": "<p>whoa, TIL!</p>",
        "id": 441192481,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716971674
    },
    {
        "content": "<p>Hmmm.... I guess that makes sense. Any quantized float would become a fixed point base 2 representation.</p>",
        "id": 441304357,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717011677
    },
    {
        "content": "<p>So by that definition, also used all the time in ML when trying to get more perf on cpu.</p>",
        "id": 441304417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717011708
    },
    {
        "content": "<p>Basically, you have to know the the offset and multiplier, but otherwise, you do U8 math (so the float is represented as 0 to 255).</p>",
        "id": 441304543,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717011761
    },
    {
        "content": "<p>Personally, at least from what I have seen in ML, people wouldn't label quantization as using a fixed point binary format. Instead, they would say they are mapping a range of floats to the integer space and doing integer math</p>",
        "id": 441304675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717011820
    },
    {
        "content": "<p>Though I guess those both could be seen as different words for the same thing. Just perspective</p>",
        "id": 441304699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717011834
    },
    {
        "content": "<blockquote>\n<p>Of course, \"arbitrary-size\" numbers can't actually represent <em>arbitrary</em> numbers because all but a hilariously small proportion of numbers in mathematics are too big to fit in any computer's memory. Even 1 divided by 3 can't be represented without precision loss in base-10 or base-2 format, no matter how much memory you use in the attempt.</p>\n</blockquote>\n<p>What about \"exact rational numbers\" where you represent rational numbers using bigint numerator and denominator? I think those warrant discussion as a safe default numeric type</p>",
        "id": 441353350,
        "sender_full_name": "timotree",
        "timestamp": 1717031415
    },
    {
        "content": "<p>Pyret, a language which like Roc aims to be very beginner friendly <a href=\"https://dcic-world.org/2023-02-21/part_appendix.html#%28part._pyret-vs-python%29\">uses rational numbers by default</a></p>",
        "id": 441353786,
        "sender_full_name": "timotree",
        "timestamp": 1717031709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636541\">timotree</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Article.3A.200.2E1.20.2B.200.2E2/near/441353350\">said</a>:</p>\n<blockquote>\n<p>What about \"exact rational numbers\" where you represent rational numbers using bigint numerator and denominator? I think those warrant discussion as a safe default numeric type</p>\n</blockquote>\n<p>I was wondering the same thing. But looking into it, it looks like there's a lot of performance tradeoffs, such as:</p>\n<ul>\n<li>Multiplying involves two multiplies instead of one, then possibly a reduction step</li>\n<li>Adding or subtracting involves finding a least common denominator, two multiplies, before finally the add</li>\n<li>Denominators getting large can either be solved by rounding, meaning our representation is no longer exact, or arbitrary length ints, which would result in the performance hit of losing cache locality.</li>\n</ul>\n<p>IEEE floats have some really rough edges, so I really like that Dec can provide nicer (though still imperfect) properties for only a small performance hit.</p>",
        "id": 441782075,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1717182109
    },
    {
        "content": "<p>Yeah, I think the only big issue with Dec is that it is fixed point instead of floating. For most real world numbers it is fine, but math done in the wrong order could lose a lot of precision off the end.</p>",
        "id": 441786330,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717183401
    },
    {
        "content": "<p>That said, I think fixed makes a lot of sense in terms of perf and simplicity</p>",
        "id": 441786401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717183426
    }
]