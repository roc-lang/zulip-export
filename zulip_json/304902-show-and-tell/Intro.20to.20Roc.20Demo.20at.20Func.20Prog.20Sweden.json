[
    {
        "content": "<p>I just watched Richard's demo at Func Prog Sweden and thought it was a really good overview of Roc and some of the latest features. I thought I might share it here in case anyone is interested.</p>\n<p>I particularly like seeing the <code>!</code> syntax and errors handling, with Richard's description of what it feels like to work with. Even though I've been fairly involved with implementing these features I learnt some things and new ideas for how to work with these.</p>\n<p><a href=\"https://youtu.be/7R204VUlzGc?si=BizCtqiMJyiikNQ3\">https://youtu.be/7R204VUlzGc?si=BizCtqiMJyiikNQ3</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"7R204VUlzGc\" href=\"https://youtu.be/7R204VUlzGc?si=BizCtqiMJyiikNQ3\"><img src=\"https://uploads.zulipusercontent.net/434450e9af02bbe83b99334c98f98e934f7a5e2a/68747470733a2f2f692e7974696d672e636f6d2f76692f375232303456556c7a47632f64656661756c742e6a7067\"></a></div>",
        "id": 441368346,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717039305
    },
    {
        "content": "<p>Absolutely. This video is a landmark. Seeing the different language features come together <em>as a workflow</em> is magical.</p>\n<p>And Richard is compelling as ever. <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span> .</p>",
        "id": 441381591,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717046152
    },
    {
        "content": "<p>The part that really blew my mind was that type inference was able to infer the deserializer based on what cases the code handled. I've never seen something like that before</p>",
        "id": 441574345,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1717109152
    },
    {
        "content": "<p>shout-out to <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> for that one! <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 441578986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717111436
    },
    {
        "content": "<p>Is that mechanism available to user code or is it exclusive to encoders/decoders?</p>",
        "id": 441579263,
        "sender_full_name": "Karl",
        "timestamp": 1717111562
    },
    {
        "content": "<p>kinda both? They're implemented ordinary Abilities, and you can define your own Abilities, but what's specialabout them is that the compiler knows about the builtin abilities (also including Eq and Hash, for example) and automatically implements those abilities for structural types like records</p>",
        "id": 441592421,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717119186
    }
]