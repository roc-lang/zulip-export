[
    {
        "content": "<p>I'm looking to try some statistical/mathematical stuff in Roc in the future, so I've been slowly adding functions to a maths package for a while, it's in a state now where it's documented enough that I can release it. As usual I'm open to any feedback or PRs :)</p>\n<p>Here's the repo: <a href=\"https://github.com/Hasnep/roc-math\">https://github.com/Hasnep/roc-math</a> and the docs: <a href=\"https://hasnep.github.io/roc-math/\">https://hasnep.github.io/roc-math/</a></p>\n<p>And an example app that does some calculations.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>app \"example\"\n    packages {\n        pf: \"https://github.com/roc-lang/basic-cli/releases/download/0.3.2/tE4xS_zLdmmxmHwHih9kHWQ7fsXtJr7W7h3425-eZFk.tar.br\",\n        math: \"https://github.com/Hasnep/roc-math/releases/download/v0.0.1/7Yv7iomNIZib-liFOqrf2TU5JlPFGsxgUawQ7cBx3ns.tar.br\",\n    }\n    imports [pf.Stdout, math.Combinatorics.{ choose }, math.Stats.{ variance }, math.Const.{ π }]\n    provides [main] to pf\n\nnChooseKMessage =\n    # Calculate\n    k = 10\n    n = 5\n    nChooseK = choose k n\n\n    # Output\n    kStr = Num.toStr k\n    nStr = Num.toStr n\n    nChooseKStr = Num.toStr nChooseK\n    \"There are \\(nChooseKStr) ways of choosing \\(kStr) things from a collection of size \\(nStr).\"\n\nvarianceMessage =\n    start = 1\n    end = 10\n    when List.range { start: At start, end: At end } |&gt; variance is\n        Ok v -&gt;\n            startStr = Num.toStr start\n            endStr = Num.toStr end\n            varianceStr = Num.toStr v\n            \"The unbiased sample variance of the numbers from \\(startStr) to \\(endStr) is \\(varianceStr).\"\n\n        Err ListWasEmpty -&gt; \"The variance of an empty list is undefined!\"\n\ncircleMessage =\n    radius = 6\n    area = π * (radius ^ 2)\n\n    radiusStr = Num.toStr radius\n    areaStr = Num.toStr area\n    \"The area of a pizza with radius \\(radiusStr) is \\(areaStr).\"\n\nmain =\n    [nChooseKMessage, varianceMessage, circleMessage] |&gt; Str.joinWith \"\\n\" |&gt; Stdout.line\n</code></pre></div>\n<p>and outputs:</p>\n<div class=\"codehilite\"><pre><span></span><code>There are 252 ways of choosing 10 things from a collection of size 5.\nThe unbiased sample variance of the numbers from 1 to 10 is 9.166666666666666.\nThe area of a pizza with radius 6 is 113.09733552923255.\n</code></pre></div>",
        "id": 369909758,
        "sender_full_name": "Hannes",
        "timestamp": 1687843357
    },
    {
        "content": "<p>Just wanted to announce that I've released <a href=\"https://github.com/Hasnep/roc-math/releases/tag/v0.2.0\">v0.2.0 of roc-math</a>, where I'm experimenting with an <code>Angle</code> type.</p>\n<p>An <code>Angle</code> is one of <code>[Radians F64, Degrees F64, Turns F64, Gon F64]</code>, and the <code>Trig</code> functions all take an <code>Angle</code>, e.g. <code>Trig.sin (Degrees 90)</code>.</p>\n<p>This lets you use degrees or <a href=\"https://www.computerenhance.com/p/turns-are-better-than-radians\">turns</a> in a type-safe way. (Or gradians/gon if that's your thing, no judgement <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 438490740,
        "sender_full_name": "Hannes",
        "timestamp": 1715655989
    },
    {
        "content": "<p>That's great!</p>",
        "id": 438493983,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1715657714
    },
    {
        "content": "<p>What's the motivation for having atan, acos, and asin take in the [ToTurns, ToRadians...] union instead of just picking a default for those functions?</p>",
        "id": 438494123,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1715657773
    },
    {
        "content": "<p>No good reason, I was just experimenting and implemented the first API that came to my head <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I want to try using it in a project and see how it feels to use.</p>\n<p>Having thought about it for more than a few seconds, it might be a situation where module parameters can make the API much simpler <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 438500449,
        "sender_full_name": "Hannes",
        "timestamp": 1715661715
    },
    {
        "content": "<p>I forgot to add an example of the new API in my original message, it looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>θ = Degrees 45\nx = Trig.sin θ\nStdout.line! &quot;sin of $(Angle.toStr θ) degrees is $(Num.toStr x).&quot;\n\nθₜ = Trig.asin x ToTurns\nStdout.line! &quot;asin of $(Num.toStr x) is $(Angle.toStr θₜ) turns.&quot;\n</code></pre></div>",
        "id": 438501525,
        "sender_full_name": "Hannes",
        "timestamp": 1715662589
    },
    {
        "content": "<p>roc-math <a href=\"https://github.com/Hasnep/roc-math/releases/tag/v0.5.0\">v0.5.0</a> adds support for Roc v0.0.0-alpha2 :)</p>",
        "id": 498575092,
        "sender_full_name": "Hannes",
        "timestamp": 1739085440
    }
]