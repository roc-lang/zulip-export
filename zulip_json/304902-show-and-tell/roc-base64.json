[
    {
        "content": "<p>I needed base64 decoding for my r2e (e2e framework) to save base64 encoded pdfs and screenshots from browser to disk.</p>\n<p>I could not find any base64 lib for roc, so I did a basic implementation:<br>\n<a href=\"https://github.com/adomurad/roc-base64\">https://github.com/adomurad/roc-base64</a></p>\n<p>The implementation is quite slow - but seems to work -and it is enough for me for now.</p>\n<p>BUT I have noticed that it is <strong>really slow</strong> when running with a not optimized build.</p>\n<p>e.g. decoding a png file (254KB of base64 text on disk / 191KB after decoding on disk)</p>\n<p>when running with a binary from <code>roc build decode.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>➜ time ./decode\n./decode 5.17s user 0.00s system 99% cpu 5.172 total\n</code></pre></div>\n<p>when running with a binary from <code>roc build decode.roc --optimize</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>➜ time ./decode\n./decode  0.01s user 0.00s system 98% cpu 0.011 total\n</code></pre></div>\n<p>Here is a \"one file repro\" if someone wants to look into this:<br>\n<a href=\"https://github.com/adomurad/roc-base64/blob/main/temp/decode.roc\">https://github.com/adomurad/roc-base64/blob/main/temp/decode.roc</a></p>\n<p>I'm using a big <code>when .. is</code> expression to lookup indexes for the 64 characters.<br>\nWhen I tried to use a <code>Dict</code> it went even slower.<br>\nunoptimized:</p>\n<div class=\"codehilite\"><pre><span></span><code>./decodeDict  18.95s user 1.67s system 99% cpu 20.626 total\n</code></pre></div>\n<p>optimized:</p>\n<div class=\"codehilite\"><pre><span></span><code>./decodeDict  1.15s user 1.46s system 99% cpu 2.606 total\n</code></pre></div>\n<p>And here is the implementation with a <code>Dict</code>:<br>\n<a href=\"https://github.com/adomurad/roc-base64/blob/main/temp/decodeDict.roc\">https://github.com/adomurad/roc-base64/blob/main/temp/decodeDict.roc</a></p>\n<p>If someone has a faster implementation - please share <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 450279876,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1720557008
    },
    {
        "content": "<p>There’s an implementation in roc’s benchmarks. Not sure how good it is tho <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p><a href=\"https://github.com/roc-lang/roc/tree/main/crates/cli/tests/benchmarks/Base64\">https://github.com/roc-lang/roc/tree/main/crates/cli/tests/benchmarks/Base64</a></p>",
        "id": 450281804,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720557744
    },
    {
        "content": "<p>Thanks :) <br>\nI will try it tommorow.</p>",
        "id": 450284046,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1720558439
    },
    {
        "content": "<p><code>Dict</code> has a perf issue with refcounted data (like strings or nested lists) currently. I have most of a fix, but have been block on getting it to work with the dev backends. So that is probably why it is so much slower</p>",
        "id": 450284807,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720558634
    },
    {
        "content": "<p>As for <code>when .. is</code> I would guess that an unoptimized build might be generating a giant if/else chain.</p>",
        "id": 450284990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720558672
    },
    {
        "content": "<p>Definitely something I can look into later to verify</p>",
        "id": 450285127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720558707
    },
    {
        "content": "<p>I haven't tested it but I imagine doing some math would be faster (at least in a dev build):</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">decodeChar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s\">'a'</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"s\">'a'</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">26</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s\">'A'</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"s\">'A'</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s\">'0'</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"s\">'0'</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">'+'</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"mi\">62</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">char</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">'/'</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"mi\">63</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"c1\"># ignore</span>\n</code></pre></div>",
        "id": 450473500,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1720622757
    },
    {
        "content": "<p>(This assumes it will only get valid chars, you can add more guards if that isn't the case)</p>",
        "id": 450476824,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1720623472
    },
    {
        "content": "<p>I have tried that yesterday, and using a dev build it is:</p>\n<div class=\"codehilite\"><pre><span></span><code>./decode2  4.05s user 0.00s system 99% cpu 4.054 total\n</code></pre></div>\n<p>so ~1s faster than the <code>when .. is</code> expression.</p>",
        "id": 450493579,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1720626807
    },
    {
        "content": "<p>Do you have <code>files/browser.base64.txt</code>? I'm curious to run the same file and look at the flamegraph.</p>\n<p>Also, your basic-cli url doesn't seem to exist anymore (I guessing this is due to depending on the 0.12.0 prerelease)</p>",
        "id": 450506290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720629724
    },
    {
        "content": "<p>Here is the file:<br>\n<a href=\"/user_uploads/22008/PcjN6XOte4l4fw_utZ7oaVCT/browser.base64.txt\">browser.base64.txt</a><br>\nIt is a screenshot of <a href=\"http://roc-lang.org\">roc-lang.org</a> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>And I did notice today my mistake of depending on a prerelease as my examples stoped working.</p>",
        "id": 450510288,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1720631080
    },
    {
        "content": "<blockquote>\n<p>I did notice today my mistake of depending on a prerelease as my examples stoped working.</p>\n</blockquote>\n<p>I added an extra visible warning to the pre-release notes to prevent this in the future</p>",
        "id": 450515508,
        "sender_full_name": "Anton",
        "timestamp": 1720632365
    },
    {
        "content": "<p>Interesting. The problem is 100% <code>List.chunksOf</code>.</p>\n<p>This should fix debug perf:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decodeList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">b1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">decodeChar</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nv\">b2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">b1</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">decodeChar</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nv\">b3</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">b2</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">decodeChar</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nv\">b4</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">b3</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">decodeChar</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"p\">)</span>\n\n<span class=\"w\">            </span><span class=\"nv\">c1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">b4</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightBy</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseAnd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">xff</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span>\n<span class=\"w\">            </span><span class=\"nv\">c2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">b4</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightBy</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseAnd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">xff</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span>\n<span class=\"w\">            </span><span class=\"nv\">c3</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">b4</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightBy</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseAnd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">xff</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span>\n\n<span class=\"w\">            </span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">c1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c3</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"nv\">decodeList</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nv\">next</span>\n\n<span class=\"w\">        </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">state</span>\n\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Base64.decode: this error should not be possible\"</span>\n\n<span class=\"nv\">decode</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"nv\">decode</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">pad</span><span class=\"w\"> </span><span class=\"nv\">missing</span><span class=\"w\"> </span><span class=\"s\">\"=\"</span>\n<span class=\"w\">    </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">padMissingChars</span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">calc</span><span class=\"w\"> </span><span class=\"nv\">final</span><span class=\"w\"> </span><span class=\"nv\">padding</span><span class=\"w\"> </span><span class=\"nv\">chars</span>\n<span class=\"w\">    </span><span class=\"nv\">paddingLen</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">calculatePadding</span><span class=\"w\"> </span><span class=\"nv\">list</span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Note</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Totally</span><span class=\"w\"> </span><span class=\"nv\">would</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">best</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">use</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">withCapacity</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">here</span><span class=\"nf\">.</span>\n<span class=\"w\">    </span><span class=\"nv\">decodedList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">decodeList</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"w\">    </span><span class=\"nv\">decodedList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropLast</span><span class=\"w\"> </span><span class=\"nv\">paddingLen</span>\n</code></pre></div>",
        "id": 450516064,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720632500
    },
    {
        "content": "<p>wow, it is almost as fast as the optimized version now.<br>\nThanks!</p>",
        "id": 450518820,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1720633111
    },
    {
        "content": "<p>Yeah, definitely something we should debug more. I definitely dont think the difference should be that stark. Oh, though maybe the chunks list of lists is hitting the refcounting perf bug. Not sure though</p>",
        "id": 450520298,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720633446
    },
    {
        "content": "<p>Yeah, 100% <a href=\"https://github.com/roc-lang/roc/issues/6455\">the refcounting issue</a>. Perf is also fixed by the <code>list-size-on-heap</code> branch if I can ever manage to land it.</p>\n<div class=\"codehilite\"><pre><span></span><code>Summary\n  ./ref-fix-opt ran\n    1.04 ± 0.08 times faster than ./main-opt\n    1.07 ± 0.28 times faster than ./main-no-chunksOf-opt\n    1.68 ± 0.28 times faster than ./main-no-chunksOf\n    2.25 ± 0.14 times faster than ./ref-fix\n 1861.04 ± 122.30 times faster than ./main\n</code></pre></div>",
        "id": 450525203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720634973
    },
    {
        "content": "<p>Also, just to clarify, I would expect avoiding <code>chunkOf</code> to generally be the better design even after the perf bug is fixed. This is seen when benchmarking at a really high sample size (2000 executions in this case) to get a more accurate difference in perf:</p>\n<div class=\"codehilite\"><pre><span></span><code>Summary\n  ./main-no-chunksOf-opt ran\n    1.15 ± 0.07 times faster than ./ref-fix-opt\n    1.18 ± 0.07 times faster than ./main-opt\n    1.84 ± 0.08 times faster than ./main-no-chunksOf\n    2.62 ± 0.11 times faster than ./ref-fix\n</code></pre></div>",
        "id": 450530673,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720636353
    }
]