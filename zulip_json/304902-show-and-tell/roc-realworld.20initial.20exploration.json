[
    {
        "content": "<p>over the holiday break, I pretended a bunch of the design things we've been talking about already existed and built out this <a href=\"https://github.com/rtfeldman/roc-realworld\">demo app</a> (based on <a href=\"https://github.com/gothinkster/realworld\">the <code>realworld</code> spec</a>) to see what the code would look like.</p>\n<p>I didn't end up completely finishing it, but I learned a <em>lot</em> from trying all these things out, and I've exceeded my timebox...so I'm sharing where I ended up with it! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p>I made a <del>little</del> screen recording talking through the code, which ended up taking a lot longer than I was anticipating...but here it is:</p>\n<p><a href=\"https://drive.google.com/file/d/17fKjW91tb-rtkxv3xGTfUhvfWAuuNqth/view?usp=sharing\">https://drive.google.com/file/d/17fKjW91tb-rtkxv3xGTfUhvfWAuuNqth/view?usp=sharing</a></p>",
        "id": 491565735,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735799380
    },
    {
        "content": "<p>happy to talk about any of this, although I'm going to bed now, so may be awhile!</p>",
        "id": 491565757,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735799395
    },
    {
        "content": "<p>Looks interesting! Given you showed the time module, as a reference also <a href=\"https://effect.website/docs/data-types/duration/\">https://effect.website/docs/data-types/duration/</a>, <a href=\"https://effect-ts.github.io/effect/effect/Duration.ts.html#duration-overview\">https://effect-ts.github.io/effect/effect/Duration.ts.html#duration-overview</a> and <a href=\"https://effect-ts.github.io/effect/effect/DateTime.ts.html\">https://effect-ts.github.io/effect/effect/DateTime.ts.html</a>.</p>\n<p>It's sometimes really convenient to being able to simply use \"3 hours\" or the like and then being able to work with whatever unit you want at the place utilizing it.</p>",
        "id": 491576947,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1735806401
    },
    {
        "content": "<p>Very cool! I was already going through your repos days before hoping to find it there already <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491585250,
        "sender_full_name": "Patrick Wierer",
        "timestamp": 1735810970
    },
    {
        "content": "<p>Thank you for taking the time to explain these ideas. I found it really helpful to catch up on the future design direction for roc. Overall it's looking very exciting <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n<p>I've got some random thoughts while watching the video...</p>\n<ol>\n<li>\n<p>Looks like a nice pattern storing effectful functions in a Custom Record. You mentioned this replaced Module Params... the thought was \"do we still need Module Params\"? I'm interested to try and update my <a href=\"https://github.com/lukewilliamboswell/aoc-template\">AoC template package</a> with a similar pattern using an Opaque Type and an effectul function, and see if that works today.</p>\n</li>\n<li>\n<p>How is <code>gen</code> implemented? It looks a little like zig's <code>comptime</code> feature. I assume these are builtins somehow and not something that can be written oustide the compiler?</p>\n</li>\n<li>\n<p>I don't love the zero argument functions... I think I prefer making it explicit like it currently is and requiring the unit <code>{}</code> arg. It's much easier to read at a glance and see it's a function. At the call site, can we have <code>Time.now!()</code> be sugar for <code>Time.now!({})</code>?</p>\n</li>\n<li>\n<p>Re <code>Instant</code>... one of the things I was debating in basic-cli was what size to make the nanos since epoch, rust uses a <code>u128</code> <a href=\"https://doc.rust-lang.org/nightly/std/time/struct.Duration.html#method.as_nanos\">doc.rust-lang.org/nightly/std/time/struct.Duration.html</a>. I went with <code>I128</code> to simplify maths using these... but that's probably less of an issue now with static dispatch. Just making an observation that you chose <code>U64</code> in this video. It's probably nothing significant, but just wondering if there was much thought in that design?</p>\n</li>\n<li>\n<p>Static dispatch looks so much more concise and less viausl noise :chef's kiss:</p>\n</li>\n<li>\n<p>My thoughts on integration tests is to duplicate <code>main.roc</code> and having a <code>test.roc</code>, which means I can use different dependencies if I want etc.</p>\n</li>\n</ol>",
        "id": 491587695,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735812387
    },
    {
        "content": "<p>That was a great watch! Loved how the code looked, a couple of things that stood out to me:</p>\n<ul>\n<li>Really like initialization logic approach, and not having to worry about errors too much.</li>\n<li>I like the approach of passing around the logger. I agree that generalizes to tracing well.</li>\n<li>Love pattern matching on nominal records without needing a qualifier.</li>\n<li>Love the approach of not putting the <code>request =&gt; route</code> logic behind an abstraction, and then needing a lot of additional API to configure that abstraction (middelwares, hooks, ...).</li>\n<li>Like the thought of non-locale-requiring time-related functions being builtins.</li>\n<li>Cool idea decoding patterns out of queries for test APIs!</li>\n</ul>",
        "id": 491601762,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735820127
    },
    {
        "content": "<p>For testing against a real database, I think the main difficulty I've encountered writing tests against real external services in (non-Roc) work is the amount of effort required to setup a test harness for these types of tests with some nice features:</p>\n<ul>\n<li>Good performance</li>\n<li>Test isolation</li>\n<li>Tests running locally _and_ in CI</li>\n<li>Telemetry from the external service gets mixed into test error output in some useful way.</li>\n</ul>\n<p>It'd be amazing if some part of the ecosystem took responsibility for providing a harness for the external service out of the box. I guess an opionated platform could, if it for instance only worked with a certain selection for databases and added built-in support for these. I guess Rails pushes in that direction a bit.</p>\n<p>In the case of a platform-agnostic library though, say a Postgres client, I guess it'd make most sense for the library author to also provide test helpers, specifically in this case a test harness for writing tests against a real Postgresql database.</p>\n<p>For a Postgres library, here's some random feature ideas for a test harness:</p>\n<ul>\n<li>Bundle a postgres server (possibly used by a development server as well).</li>\n<li>Create a test database on an in-memory filesystem, for optimal performance.</li>\n<li>Configure the database with init-flags for better performance at the cost of loss of data in a crash.</li>\n<li>Set up the schema on a template database once, then clone that database for individual tests.</li>\n<li>Store a backup of the database used by a failing test, for debugging.</li>\n</ul>\n<p>I'm not super certain about any of these ideas, the broader point I want to make is that the test harness might require very different and more comprehensive effects than the database client itself. In part such a test harness might require effects that the platform does not provide because it'd be bad idea in a production environment. For instance, a web platform might not want to provide any file-system access, but an ideal postgres harness might make use of the filesystem.</p>\n<p>Not sure what the answer is. One thought is that maybe <code>get!</code> and <code>set!</code> are the tip of the iceberg, and that we'd potentially have additional test-only APIs. Creating an in-memory and sandboxed test directory for instance seems like something that could be usable in multiple scenarios, Zig offers a test helper for this which I make frequent use of.</p>",
        "id": 491602748,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735820680
    },
    {
        "content": "<p>I really love how the abstraction of effectful functions and packages not being able to rely on platform implementations is that we are basically created packages that are capabilities secure by design.  And also possible to create easily testable effects!</p>",
        "id": 491616476,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827425
    },
    {
        "content": "<p>I think depending on where we resolve static dispatch, we can have static dispatch method tear-offs.  Especially easy if we do it in <code>can</code>.</p>",
        "id": 491617435,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827842
    },
    {
        "content": "<p>Tear-offs would allow you to write the <code>Ok(router.handle_req!)</code></p>",
        "id": 491617500,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827874
    },
    {
        "content": "<p>But this is a form of \"partial application\"</p>",
        "id": 491617580,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827916
    },
    {
        "content": "<p>If <code>router</code>'s type is a custom type with a handle_req! method, you can desugar this to a closure that takes the rest of the args of the handle_req! method and then applies them to the method in static dispatch form (or a plain method if that desugaring has already happened).</p>",
        "id": 491617811,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828018
    },
    {
        "content": "<p>I still think that the <code>Str</code> builtin should have <code>ascii_*</code> namespaced functions for capitalizing strings that are understood to be written using only ASCII representation.  But we should also have a strong unicode package as well with great localization support.</p>",
        "id": 491618815,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/roc-realworld.20initial.20exploration/near/491617435\">said</a>:</p>\n<blockquote>\n<p>I think depending on where we resolve static dispatch, we can have static dispatch method tear-offs.  Especially easy if we do it in <code>can</code>.<br>\nTear-offs would allow you to write the <code>Ok(router.handle_req!)</code></p>\n</blockquote>\n<p>I'm interested to explore this general topic - want to start an <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas\">#ideas</a> thread about it?</p>",
        "id": 491620427,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735829071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> I would but I don't have the privileges to move to another channel</p>",
        "id": 491620549,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829124
    },
    {
        "content": "<p>oh I mean just start one from scratch</p>",
        "id": 491620578,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735829142
    },
    {
        "content": "<p>Ah, OK</p>",
        "id": 491620599,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/roc-realworld.20initial.20exploration/near/491587695\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>How is <code>gen</code> implemented? It looks a little like zig's <code>comptime</code> feature. I assume these are builtins somehow and not something that can be written oustide the compiler?</li>\n</ol>\n</blockquote>\n<p>yeah I was thinking we'd have some hardcoded list of supported ones in the compiler, just like we do today with Abilities</p>\n<blockquote>\n<ol start=\"3\">\n<li>I don't love the zero argument functions... I think I prefer making it explicit like it currently is and requiring the unit <code>{}</code> arg. It's much easier to read at a glance and see it's a function. At the call site, can we have <code>Time.now!()</code> be sugar for <code>Time.now!({})</code>?</li>\n</ol>\n</blockquote>\n<p>want to start an <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas\">#ideas</a> thread about zero-arg function syntax? I'd like to explore ideas!</p>\n<blockquote>\n<ol start=\"4\">\n<li>Re <code>Instant</code>... one of the things I was debating in basic-cli was what size to make the nanos since epoch, rust uses a <code>u128</code> <a href=\"https://doc.rust-lang.org/nightly/std/time/struct.Duration.html#method.as_nanos\">doc.rust-lang.org/nightly/std/time/struct.Duration.html</a>. I went with <code>I128</code> to simplify maths using these... but that's probably less of an issue now with static dispatch. Just making an observation that you chose <code>U64</code> in this video. It's probably nothing significant, but just wondering if there was much thought in that design?</li>\n</ol>\n</blockquote>\n<p>it's a great question...also worth its own thread I think! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 491621917,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735829772
    },
    {
        "content": "<p>Here's the thread: <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Static.20Dispatch.20and.20method.20tear-offs\">#ideas &gt; Static Dispatch and method tear-offs</a></p>",
        "id": 491622174,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829884
    },
    {
        "content": "<p>One last thing I'd like to say is:  I may be in the minority (and I don't think this would be a \"business move\"), but I think videos like this would be interesting on a \"Roc\" YouTube channel, as well as the virtual meetups and such.</p>",
        "id": 491622494,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735830032
    },
    {
        "content": "<p>This looks great! I really like the discovery that static dispatch can also replace module params. People are very familiar with this pattern from other languages—the difference is just that all packages would have to use this approach for any I/O which gives us all the nice ecosystem properties we want. Also a nice saving for the weirdness budget <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 491643112,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1735839587
    },
    {
        "content": "<p>Great video and I think that this <code>dummy</code> realworld example turned out great!<br>\nI've had some trouble understanding <code>expect |get!, set!|</code> part (1:46:25), was there some sort of proposal/discussion on zulip that I could dive into to get that better? I don't understand what set! is doing if we're passing manually created effects into <code>Route.new</code> anyway.<br>\nEDIT. nvm, I've rewatched the video second time and I think I get it. Packages would create dummy clients, so we could use set! in our expect and package could use get! to get value back.</p>",
        "id": 491643323,
        "sender_full_name": "Dawid Danieluk",
        "timestamp": 1735839695
    },
    {
        "content": "<p>Re roc-pg connect function, I was actually already <a href=\"https://github.com/agu-z/roc-pg/blob/upgrade/examples/query.roc#L9-L23\">exploring making the stream opaque</a> in the <code>connect</code> function sometime ago. All it needs is a way to read and write from a stream. This would enable the package to be used with Unix Domain sockets or mocked/in-memory servers like Jasper suggested.</p>",
        "id": 491643379,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1735839722
    },
    {
        "content": "<p>Just about a quarter of the way though. Very interesting so far! I was really surprised by how much I liked the logging API. I didn't think such a minimal design could still be so concise in user land</p>",
        "id": 491765115,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1735914341
    },
    {
        "content": "<p>One question about the <code>gen from_str_case_insensitive</code> part. (I am there now, so sorry if it gets answered later)</p>\n<p>What about accents? (diacritics? Idk the difference). I guess in Turkish all the i's might be the same, but in many languages, there are words where putting an accent somewhere changes the meaning.</p>",
        "id": 491765911,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1735914760
    },
    {
        "content": "<p>After a search online, even swapping Turkish i's changes meaning of words. (As well as slightly different pronunciation? I'm not Turkish so not sure. But they are different letters altogether)</p>",
        "id": 491766142,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1735914881
    },
    {
        "content": "<p>interesting! Maybe this is a case where <code>from_ascii_case_insensitive</code> would make more sense</p>",
        "id": 491770429,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735916884
    },
    {
        "content": "<p>assuming we add ASCII case-related things to <code>Str</code></p>",
        "id": 491770486,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735916907
    },
    {
        "content": "<p>like Rust has</p>",
        "id": 491770497,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735916911
    },
    {
        "content": "<p>but keep full Unicode casing out of scope (unlike Rust)</p>",
        "id": 491770526,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735916920
    },
    {
        "content": "<p>I think that makes more sense for an autoderived function working on enum variants that can only be ASCII</p>",
        "id": 491773827,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1735918443
    },
    {
        "content": "<p>Also, only supporting ASCII is probably better for the perf of the generated function</p>",
        "id": 491774059,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1735918573
    },
    {
        "content": "<p>based on the roc-realworld repo, do we plan to remove <code>try</code> <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> ?</p>",
        "id": 492974535,
        "sender_full_name": "Anton",
        "timestamp": 1736523366
    },
    {
        "content": "<p>Part of me wishes we could keep <code>try</code> for function level early returns on errors, and recover <code>?</code> as expression level recovery from errors</p>",
        "id": 492975789,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523781
    },
    {
        "content": "<p>But that's my Javascript/Typescript/Dart brain probably</p>",
        "id": 492975857,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523808
    },
    {
        "content": "<p>I think we should get rid of it to always prefer having one way to do things, unless we really need it.</p>",
        "id": 492975925,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523837
    },
    {
        "content": "<p>But I see its value</p>",
        "id": 492975978,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523844
    },
    {
        "content": "<p>Have we discussed what I just said above before?</p>",
        "id": 492976022,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523863
    },
    {
        "content": "<p>Basically have ? postfix be a flatmap of the right side over the  left side.  I'm thinking of when we have SD</p>",
        "id": 492976169,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523917
    },
    {
        "content": "<p>We had a big ol' discussion about it</p>",
        "id": 492976240,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523939
    },
    {
        "content": "<p>Ok, I'll look for it</p>",
        "id": 492976290,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523951
    },
    {
        "content": "<p><a href=\"#narrow/channel/304641-ideas/topic/.60try.60.20keyword.20instead.20of.20.60.3F.60.20suffix\">#ideas &gt; &#96;try&#96; keyword instead of &#96;?&#96; suffix</a>  being one of them</p>",
        "id": 492976311,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523958
    },
    {
        "content": "<p>The outcome is that it's really hard to make expression level work</p>",
        "id": 492976391,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523972
    },
    {
        "content": "<p>In a way that doesn't have a lot of confusing rules</p>",
        "id": 492976423,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523984
    },
    {
        "content": "<p>But \"? returns errors from the function\" is brain-dead</p>",
        "id": 492976480,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736524003
    },
    {
        "content": "<p>I will say, expression-level <code>try</code> actually is pretty simple with methods and <code>Result.try</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decoded</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s\">\"api.com\"</span><span class=\"p\">)</span><span class=\"nf\">.</span><span class=\"nv\">try</span><span class=\"p\">(</span><span class=\"nf\">.</span><span class=\"nv\">decode</span><span class=\"p\">())</span>\n</code></pre></div>",
        "id": 492977118,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736524214
    },
    {
        "content": "<p>yeah I think going back to <code>try</code> being a function in the <code>Result</code> module is the way to go</p>",
        "id": 492994801,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736530275
    },
    {
        "content": "<p>This was a great watch. <br>\nI'm very excited for destructuring and field access for custom records, It's going to make decoding and encoding data super smooth.</p>\n<p>I'm certainly sad to see Module qualified function calls go, I do agree they are clearer to read, but overall I definitely agree that the advantages of static dispatch outweigh the loss.</p>",
        "id": 493109759,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1736613639
    },
    {
        "content": "<p>I haven't watched the whole codebase walkthrough yet, but on the topic of string interpolation, I think C# could be a nice inspiration: <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated\">https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated</a></p>\n<p>They solved the \"keep raw JSON in string literal\" problem by... just adding more <code>\"</code> around the string literal. You indicate that the string is interpolated by doing <code>$\"some string {someVariable}\"</code> - and you can add more <code>$</code> in the beginning  to indicate how many { you for interpolation. </p>\n<p>That means that the following is possible:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">$</span><span class=\"s\">$\"\"\"</span>\n<span class=\"w\">     </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"age\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"n\">userName</span><span class=\"p\">}}</span>\n<span class=\"w\">     </span><span class=\"p\">}</span>\n<span class=\"s\">\"\"\";</span>\n</code></pre></div>\n<p>It also takes care of the leading whitespace - it's really AWESOME. You can also just have <code>\"\"\"\"</code> (four) around the literal, so that you can use <code>\"\"\"</code> inside of your string.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/improved-interpolated-strings#the-handler-pattern\">https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/improved-interpolated-strings#the-handler-pattern</a> - there is also a way to hook into the interpolated string and for example use interpolated string for SQL commands with proper parameter handling, or for structured logging.</p>",
        "id": 493901262,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1736939715
    },
    {
        "content": "<p>I think rust also does the same thing, which imo is very flexible and easy to understand. Just make sure that you put more surrounding quotes than there are in a string and you're good to go.</p>",
        "id": 493913213,
        "sender_full_name": "Dawid Danieluk",
        "timestamp": 1736943678
    },
    {
        "content": "<p>I just finished the whole things and wow - I can't wait for Roc to be done :)</p>\n<p>as for tests, I again think that C# has this figured out :) with nUnit you can decorate methods with <code>[Setup]</code> and <code>[TearDown]</code> attributes, they will be run before and after each test in your test class (yes, you need a separate class for tests, a separate project to be fully honest). </p>\n<p>There is also <code>[OneTimeSetup]</code> and <code>[OneTimeTearDown]</code>, and the coolest thing is that they are discoverable upwards. The discovery starts at the test class in a namespace <code>MyApp.BlogApi.Tests</code>, then looks in <code>MyApp.BlogApi</code>, then in <code>MyApp</code>, then outside of all namespaces. They are also corresponding to directory structure (usually :)). All the setups (both one time and normal) are run from top to bottom, and teardowns from bottom to top.</p>\n<p>So for example, you can have top-level class that starts TestContainer with PostgreSQL in <code>[OneTimeSetup]</code>, and saves the connection string in a static variable. In the same class you can have <code>[Setup]</code> that takes a snapshot of the db, and <code>[TearDown]</code> that restores it.</p>\n<p>Then at any level you spin up your api app using <a href=\"https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-9.0\">WebApplicationFactory</a>, which basically runs your whole app. You get an HttpClient to it.</p>\n<p>Cool thing is, you can even pass that client to Playwright runner, so you can have UI tests running on in-memory app! Even better, when you debug the test, you can debug both the API and the UI tests, both written in C#.</p>\n<p>When I did AoC in Rust, I remebered reading that \"Rust has testing built-in!\". Ok, how do I run the same setup for for 5 tests? Ok, I just write a function that returns everything I need. But how do I run it once? Oh, there is a package that can run a thing once...</p>\n<p>This doesn't feel like \"proper\" testing.</p>",
        "id": 493919669,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1736945616
    },
    {
        "content": "<p>Another thing C# is doing better than others (IMO) is ORM for database access. EF Core is just awesome. </p>\n<p>Main feature that powers it (and many other cool things) is <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/\">Expression</a> - basically a way to introspect code at runtime.</p>\n<p>We all know the cool functional style making collections easy:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">myProductIds</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">products</span><span class=\"p\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">Owner</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">currentUser</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">).</span><span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">).</span><span class=\"n\">ToList</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>The best thing about EF Core is that you can just use the same thing, but against the db:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">myProductIds</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">dbContext</span><span class=\"w\"> </span><span class=\"c1\">// that's the whole db</span>\n<span class=\"w\">   </span><span class=\"p\">.</span><span class=\"n\">Products</span><span class=\"w\"> </span><span class=\"c1\">// DbSet&lt;Product&gt;, represents a table</span>\n<span class=\"w\">   </span><span class=\"p\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">Owner</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">currentUser</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// filter</span>\n<span class=\"w\">   </span><span class=\"p\">.</span><span class=\"n\">Select</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// project</span>\n<span class=\"w\">   </span><span class=\"p\">.</span><span class=\"n\">ToList</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>(you can also put the query in a separate method and mark it with attribute to become a prepared SQL statement)</p>\n<p>the above will generate </p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">Products</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">OwnerId</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>How does it work? <code>Where</code> and <code>Select</code> (and every other method like this, <code>Count</code>, <code>ToDictionary</code> etc) doesn't take <code>Func&lt;Product&gt;</code>, it takes <code>Expression&lt;Func&lt;Product&gt;&gt;</code>. What's the difference? Expression \"knows\" the code.</p>\n<p>It's a bit complicated, but you can easily parse the function you passed into there and go \"oh, we are comparing the Id property to something\", and just spit out proper SQL.</p>\n<p>It build's a description in <code>IQueryable</code> - basically like a fancy iterator, that converts the expressions into a request to underlying tech, and enumerates the results. It's just awesome - no new syntax, you get compile-time errors if the expression cannot be converted to SQL (rarely comes up in reality). </p>\n<p>I am not proposing that you actually write an ORM, but if the language had something like <code>Expression&lt;Func&gt;</code> - all of this would be possible also in Roc.</p>",
        "id": 493922649,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1736946435
    }
]