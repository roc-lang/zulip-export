[
    {
        "content": "<p>So I wanted to share a quick update now that <a href=\"https://github.com/roc-lang/roc/pull/6634\">#6634</a> is merged. </p>\n<p>It's still early and there are definitely bugs we need to find and fix. But I wanted to give an example of how you can now use the proposed <a href=\"https://docs.google.com/document/d/1mTEZlOKqtMonmVsIGEC1A9ufs1TQHhVgZ52Vn-13GeU/edit?usp=sharing\">Chaining Syntax</a> features in a script.</p>\n<p>If you use the <code>!</code> syntax and find any issues, I would really love it if you could make an issue and let me know. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> </p>\n<p>Here is an example; this is our bash script from <code>www/build-dev-local.sh</code> that builds and serves the roc website for local development. Let's re-write it in roc! <span aria-label=\"rock on\" class=\"emoji emoji-1f918\" role=\"img\" title=\"rock on\">:rock_on:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/env bash</span>\n\n<span class=\"c1\"># https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/</span>\n<span class=\"nb\">set</span><span class=\"w\"> </span>-euxo<span class=\"w\"> </span>pipefail\n\n<span class=\"c1\"># Use this script to for testing the WIP site locally without downloading assets every time.</span>\n\n<span class=\"c1\"># NOTE run `bash www/build.sh` to cache local copy of fonts, and repl assets etc</span>\n\n<span class=\"c1\">## Get the directory of the currently executing script</span>\n<span class=\"nv\">DIR</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span>dirname<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$0</span><span class=\"s2\">\"</span><span class=\"k\">)</span><span class=\"s2\">\"</span>\n\n<span class=\"c1\"># Change to that directory</span>\n<span class=\"nb\">cd</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$DIR</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">exit</span>\n\nrm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>dist/\ncp<span class=\"w\"> </span>-r<span class=\"w\"> </span>build<span class=\"w\"> </span>dist/\ncp<span class=\"w\"> </span>-r<span class=\"w\"> </span>public/*<span class=\"w\"> </span>dist/\nroc<span class=\"w\"> </span>run<span class=\"w\"> </span>main.roc<span class=\"w\"> </span>--<span class=\"w\"> </span>content/<span class=\"w\"> </span>dist/\n\nsimple-http-server<span class=\"w\"> </span>-p<span class=\"w\"> </span><span class=\"m\">8080</span><span class=\"w\"> </span>--nocache<span class=\"w\"> </span>--cors<span class=\"w\"> </span>--index<span class=\"w\"> </span>--<span class=\"w\"> </span>dist/\n</code></pre></div>\n<p>Using the new syntax sugar for <code>!</code>, we can now write it like so. </p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"s\">\"roc-website-dev\"</span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pf:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.9.0/oKWkaruh2zXxin_xfsYsCJobH1tO8_JvNkFzDwwzNUQ.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Stderr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Cmd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"w\">    </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">pf</span>\n\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">onErr</span><span class=\"w\"> </span><span class=\"n\">handlErr</span>\n\n<span class=\"n\">handlErr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"SCRIPT ERROR $(Inspect.toStr err)\"</span>\n<span class=\"w\">    </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">removeDir</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"www/dist/\"</span>\n<span class=\"w\">    </span><span class=\"n\">copyFiles</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"www/build/\"</span><span class=\"w\"> </span><span class=\"s\">\"www/dist/\"</span>\n<span class=\"w\">    </span><span class=\"n\">copyFiles</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"www/public/\"</span><span class=\"w\"> </span><span class=\"s\">\"www/dist/\"</span>\n<span class=\"w\">    </span><span class=\"n\">generateSiteContent</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"www/content/\"</span>\n<span class=\"w\">    </span><span class=\"n\">serveFiles</span><span class=\"o\">!</span>\n\n<span class=\"n\">verifyDirExists</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">isDir</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"nb\">map</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">onErr</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">DirDoesntExist</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n<span class=\"n\">removeDir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n\n<span class=\"w\">    </span><span class=\"n\">verifyDirExists</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">path</span>\n\n<span class=\"w\">    </span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Removing files from $(path)...\"</span>\n\n<span class=\"w\">    </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"s\">\"rm\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"s\">\"-rf\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">status</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"n\">ErrRemovingDir</span>\n\n<span class=\"n\">copyFiles</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"n\">from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nn\">to</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n\n<span class=\"w\">    </span><span class=\"n\">verifyDirExists</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">from</span>\n\n<span class=\"w\">    </span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Copying files from $(from) to $(to)...\"</span>\n\n<span class=\"w\">    </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"s\">\"cp\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"-r\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">status</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"n\">ErrCopyingFiles</span>\n\n<span class=\"n\">generateSiteContent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n\n<span class=\"w\">    </span><span class=\"n\">verifyDirExists</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">path</span>\n\n<span class=\"w\">    </span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Generating static site...\"</span>\n\n<span class=\"w\">    </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"s\">\"roc\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"www/main.roc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"www/content/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"www/dist/\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">status</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"n\">ErrBuildingSite</span>\n\n<span class=\"n\">serveFiles</span><span class=\"w\"> </span><span class=\"o\">=</span>\n\n<span class=\"w\">    </span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Serving static site...\"</span>\n\n<span class=\"w\">    </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"s\">\"simple-http-server\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"-p\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"8080\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--nocache\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--cors\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--index\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"www/dist/\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Cmd</span><span class=\"o\">.</span><span class=\"n\">status</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">mapErr</span><span class=\"w\"> </span><span class=\"n\">ErrServingFiles</span>\n</code></pre></div>\n<p>Although the roc version is a little longer, I find it much easier to follow what is happening. </p>\n<p>I think using helpers like this is much easier to compose, and gives nice error messages.</p>\n<p>Let me know what you think?</p>",
        "id": 433435321,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713238737
    },
    {
        "content": "<p>Sweet! The new syntax looks very clean</p>",
        "id": 433440844,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1713242314
    },
    {
        "content": "<p>Looks good! It could be nice to create a function like this to remove some boilerplate:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">cmd</span>\n<span class=\"w\">    </span><span class=\"s\">\"roc\"</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s\">\"www/main.roc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"www/content/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"www/dist/\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"kt\">ErrBuildingSite</span>\n</code></pre></div>",
        "id": 433475922,
        "sender_full_name": "Anton",
        "timestamp": 1713258521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Initial.20Chaining.20Syntax/near/433475922\">said</a>:</p>\n<blockquote>\n<p>It could be nice to create a function like this to remove some boilerplate:</p>\n</blockquote>\n<p>see:  <a href=\"#narrow/stream/304641-ideas/topic/basic-cli.20Cmd.20api\">this topic: basic-cli Cmd api</a></p>",
        "id": 433496441,
        "sender_full_name": "witoldsz",
        "timestamp": 1713265643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Initial.20Chaining.20Syntax/near/433435321\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>verifyDirExists = \\path -&gt;\n    path\n    |&gt; Path.fromStr\n    |&gt; Path.isDir\n    |&gt; Task.map \\_ -&gt; {}\n    |&gt; Task.onErr \\err -&gt; Task.err (DirDoesntExist err path)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Does it mean you ignore the result of <code>Path.isDir</code>? Should the function return <code>Task.err</code> if is not a directory?</p>",
        "id": 433497501,
        "sender_full_name": "witoldsz",
        "timestamp": 1713266006
    },
    {
        "content": "<p>I was playing with this new syntax, trying to modify the <code>verifyDirExists</code>, but I am not sure if this is correct:</p>\n<div class=\"codehilite\"><pre><span></span><code>verifyDirExists = \\path -&gt;\n    isDir =\n        Path.fromStr path\n        |&gt; Path.isDir\n        |&gt; Task.attempt! # &lt;------ &quot;!&quot; goes here?\n\n    when isDir is\n        Ok true -&gt; Task.succeed {}\n        Ok false -&gt; Task.err (DirProblem path &quot;not a directory&quot;)\n        Err err -&gt; Task.err (DirProblem path err\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>verifyDirExists = \\path -&gt;\n    isDir =\n        Path.fromStr path\n        |&gt; Path.isDir! # &lt;------ or &quot;!&quot; goes  here?\n        |&gt; Task.attempt\n\n    when isDir is\n        Ok true -&gt; Task.succeed {}\n        Ok false -&gt; Task.err (DirProblem path &quot;not a directory&quot;)\n        Err err -&gt; Task.err (DirProblem path err\n</code></pre></div>\n<p>or maybe this is correct?</p>\n<div class=\"codehilite\"><pre><span></span><code>verifyDirExists = \\path -&gt;\n    isDir =\n        Path.fromStr path\n        |&gt; Path.isDir\n        |&gt; Task.attempt\n\n    when isDir! is # &lt;------ &quot;!&quot; goes  here?\n        Ok true -&gt; Task.succeed {}\n        Ok false -&gt; Task.err (DirProblem path &quot;not a directory&quot;)\n        Err err -&gt; Task.err (DirProblem path err\n</code></pre></div>\n<p>My question is where are the proper places for the <code>!</code>?</p>",
        "id": 433533366,
        "sender_full_name": "witoldsz",
        "timestamp": 1713277092
    },
    {
        "content": "<p>Should be after the <code>Task.attempt</code></p>",
        "id": 433558842,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713283726
    },
    {
        "content": "<p>Though. Technically should also be valid in the <code>when isDir! is</code></p>",
        "id": 433558990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713283769
    },
    {
        "content": "<p>Oh sorry, one edit</p>",
        "id": 433559071,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713283794
    },
    {
        "content": "<p>It can't be used with <code>Task.attempt</code> at all. You need something like:<br>\n<code>Task.toResult : Task ok err -&gt; Task (Result ok err) []</code></p>",
        "id": 433559391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713283878
    },
    {
        "content": "<p>Not sure if that exists yet. Probably needs to be added to basic cli</p>",
        "id": 433559466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713283902
    },
    {
        "content": "<p>That would replace <code>Task.attempt</code> and the bang would go after it</p>",
        "id": 433559655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713283951
    },
    {
        "content": "<p>oh yeah we should add that!</p>",
        "id": 433560034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713284058
    },
    {
        "content": "<p>If we are going all in on <code>!</code>, should we actually steal <code>Task.attempt</code>. Wondering if <code>|&gt; Task.attempt!</code> reads better than <code>|&gt; Task.toResult!</code>. Or maybe there is a better third name</p>",
        "id": 433566011,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713285858
    },
    {
        "content": "<p>You are so right, Task.attempt won't work with <code>!</code> unless it returns a Task, the attempt was meant to work with regular callback/backpassing. <code>Task.toResult</code>is not bad, but it can mislead, because, after all, it still returns a Task.</p>",
        "id": 433593789,
        "sender_full_name": "witoldsz",
        "timestamp": 1713296904
    },
    {
        "content": "<p>yeah, naming is hard.</p>",
        "id": 433593884,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713296953
    },
    {
        "content": "<p><code>Task.asResult</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 433594718,
        "sender_full_name": "witoldsz",
        "timestamp": 1713297275
    },
    {
        "content": "<p>Silly/naive name or going after math/category theory to resolve the problem <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<p>I can't remember reading about \"moniods, functors, monads\" in here, so probably first option...</p>",
        "id": 433595768,
        "sender_full_name": "witoldsz",
        "timestamp": 1713297677
    },
    {
        "content": "<p>Personally, if we are planning to remove backpassing long term, <code>Task.attempt</code> is no longer useful. So stealling <code>Task.attempt</code> makes most sense to me.  That said, these are all readable enough:<br>\n1)</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">isDir</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">isDir</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">attempt!</span>\n</code></pre></div>\n<p>2)</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">isDir</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">isDir</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">asResult!</span>\n</code></pre></div>\n<p>3)</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">isDir</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">isDir</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">toResult!</span>\n</code></pre></div>",
        "id": 433596580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713298002
    },
    {
        "content": "<p>I like (1) the most.</p>",
        "id": 433645855,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713327221
    },
    {
        "content": "<p>I'll make a PR for basic-cli and basic-webserver</p>",
        "id": 433646860,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713327944
    },
    {
        "content": "<p><span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 433648975,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713329512
    },
    {
        "content": "<p>I find the <code>Task.attempt</code>can be somewhat confusing, especially for those not used to always check the type signatures first. </p>\n<p>The problem with this word is that it implies that it is the thing that actually puts a task in motion. Like if you won't \"attempt\" nothing will ever happen.</p>\n<p>The <code>Task.asResult</code> or <code>.toResult</code> are a little bit better, but they are not accurate, because they still return a <code>Task</code>.</p>\n<p>So, the question I am asking myself is what do we need that function for in the first place? <code>Result</code> entanglement  is just a mean to an end.</p>\n<p>In my case (the <code>verifyDirExists</code> function) I had to use it to be able to… <a href=\"https://www.thesaurus.com/browse/inspect\">inspect</a> the result, so maybe this is the direction for a good, self describing name.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Initial.20Chaining.20Syntax/near/433593884\">said</a>:</p>\n<blockquote>\n<p>yeah, naming is hard.</p>\n</blockquote>\n<p>It is! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 433700670,
        "sender_full_name": "witoldsz",
        "timestamp": 1713342351
    },
    {
        "content": "<p>Putting another naming idea in the hat: how about <code>Task.awaitResult</code>?</p>",
        "id": 433711608,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1713346005
    },
    {
        "content": "<p><code>Task.resultify</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 433723698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713350144
    },
    {
        "content": "<p><code>Task.toResultTask</code> actually says what it does, but I'd still rather <code>Task.toResult</code> for brevity. I agree that <code>Task.attempt</code> is really confusing. Coming from other languages I would think that runs the task, waits for it to finish, and then returns it's result.</p>",
        "id": 433728007,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1713351761
    },
    {
        "content": "<p>How does this look?</p>\n<p><a href=\"/user_uploads/22008/u5T45ZtyLJyti_n9Y_UKvrhK/Screenshot-2024-04-17-at-21.36.32.png\">Screenshot-2024-04-17-at-21.36.32.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/u5T45ZtyLJyti_n9Y_UKvrhK/Screenshot-2024-04-17-at-21.36.32.png\" title=\"Screenshot-2024-04-17-at-21.36.32.png\"><img src=\"/user_uploads/22008/u5T45ZtyLJyti_n9Y_UKvrhK/Screenshot-2024-04-17-at-21.36.32.png\"></a></div>",
        "id": 433733836,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713353807
    },
    {
        "content": "<p>I don’t love <code>toResult</code> because it implies it would return a <code>Result</code> instead of a <code>Task (Result …) …</code></p>",
        "id": 433735780,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713354426
    },
    {
        "content": "<p>I've added this <a href=\"https://github.com/roc-lang/basic-cli/pull/182\">PR basic-cli#182</a></p>",
        "id": 433735789,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713354430
    },
    {
        "content": "<p>What about <code>withResult</code>?</p>",
        "id": 433735818,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713354438
    },
    {
        "content": "<p>What about just <code>Task.result</code></p>",
        "id": 433736194,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713354562
    },
    {
        "content": "<p>My inspiration for the shorter <code>result</code> is just that it's shorter, though unfortunately just as vague. I think there is no way around the fact that users will have to get familiar with Tasks.</p>",
        "id": 433736553,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713354709
    },
    {
        "content": "<p>And another feature of the Chaining Syntax (that's not yet implemented) will enable us to do this</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">checkFile</span><span class=\"w\"> </span><span class=\"s\">\"bad\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"nn\">Good</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"GOOD\"</span>\n<span class=\"w\">        </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"nn\">Bad</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"BAD\"</span>\n<span class=\"w\">        </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"nn\">IOError</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"IOError\"</span>\n</code></pre></div>",
        "id": 433736846,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713354820
    },
    {
        "content": "<p>Instead of </p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">checkFile</span><span class=\"w\"> </span><span class=\"s\">\"bad\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">toResult</span><span class=\"o\">!</span>\n\n<span class=\"w\">    </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"nn\">Good</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"GOOD\"</span>\n<span class=\"w\">        </span><span class=\"n\">Ok</span><span class=\"w\"> </span><span class=\"nn\">Bad</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"BAD\"</span>\n<span class=\"w\">        </span><span class=\"n\">Err</span><span class=\"w\"> </span><span class=\"nn\">IOError</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s\">\"IOError\"</span>\n</code></pre></div>",
        "id": 433737097,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713354890
    },
    {
        "content": "<p>If I'm naming the intermediate variable here, I'll reach for <code>result</code>, so maybe that's an indicator for a decent name?</p>",
        "id": 433737487,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713354994
    },
    {
        "content": "<p>Yeah, I like <code>Task.result</code></p>",
        "id": 433738741,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713355327
    },
    {
        "content": "<p>I like <code>Task.result</code> the best of the ones we've discussed too! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 433748720,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713358328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> </p>\n<p>Are you familiar with what changes we made to the formatter regarding the below? Is it just a switch to undo the indenting thing?</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>  said: I forget where we discussed this, but I think in the world of <code>!</code> we want to go back to indenting <code>|&gt;</code> (and other operators like <code>+</code> for consistency) because otherwise they look weird in statements, e.g.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">onErr</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"kt\">Blah</span>\n\n<span class=\"w\">    </span><span class=\"kt\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"n\">etc</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">onErr</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"kt\">Baz</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">onErr</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"kt\">Blah</span>\n\n<span class=\"w\">    </span><span class=\"kt\">File</span><span class=\"o\">.</span><span class=\"n\">writeUtf8</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"n\">etc</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">onErr</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"kt\">Baz</span>\n</code></pre></div>",
        "id": 434464820,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713583297
    },
    {
        "content": "<p>I guess I don't feel strongly on the formatting; I just remember Richard expressing the opposite opinion about how pizza operators should be formatted before.</p>",
        "id": 434465015,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1713583502
    },
    {
        "content": "<p>I think I prefer the way it currently is. I've thought it might be nice to have the formatter auto add new lines between statements like is displayed here. But I don't feel strongly about it either.</p>",
        "id": 434465306,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713583890
    },
    {
        "content": "<p>I prefer the way it currently is too</p>",
        "id": 434467468,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1713586095
    },
    {
        "content": "<p>interesting - you prefer it even in the \"statement\" case in the example above?</p>",
        "id": 434491300,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713610706
    },
    {
        "content": "<p>I definitely have grown to like consistent pipeline with no indentation. I even move things to new lines to avoid indenting pipeline</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"c1\"># I prefer this</span>\n<span class=\"n\">myVar</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">someFile</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readBytes</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">sum</span>\n\n<span class=\"c1\"># over these</span>\n<span class=\"n\">myVar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">someFile</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readBytes</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">sum</span>\n\n<span class=\"n\">myVar</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">someFile</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readBytes</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n</div></div>\n<p>I would really dislike if we force indenting all pipeline even those that are unrelated to tasks.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"c1\"># definitely prefer this</span>\n<span class=\"n\">someFn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"s2\">\"abc\"</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">len</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"c1\"># to this</span>\n<span class=\"n\">someFn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"s2\">\"abc\"</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">len</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>\n</div></div>\n<p>As for the specific example given above. I honestly think that the <code>|&gt; </code> might be enough visual indentation for the reader. So I am inclined to say that we should leave it alone. I generally prefer flat over indentation, so clearly have a bias. As long as it is has a <code>|&gt; </code> on each following line and an empty line between each task, my gut feeling is that it will read fine.</p>",
        "id": 434506293,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713623907
    },
    {
        "content": "<p>cool, I'm game to try leaving it as-is and see how it feels! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 434509402,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713626298
    }
]