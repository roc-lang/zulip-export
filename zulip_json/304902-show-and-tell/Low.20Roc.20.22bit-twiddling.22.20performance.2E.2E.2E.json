[
    {
        "content": "<p>There have been some performance benchmarks written that show that Roc is \"in there\" as to running a simple QuickSort as compared to other languages; however, that may not be low level enough to really show comparative performance.  I <a href=\"https://github.com/roc-lang/roc/issues/6425\">posted an issue </a> showing that currently Roc is over twenty times slower than languages such as C/C++ in doing truly low level stuff.  The issue pretty well says it all, but I thought I would sign on here to see if any of you had any ideas about what I might not be doing correctly or what might be done about it...</p>",
        "id": 418219476,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706251064
    },
    {
        "content": "<p>Just a note, there is <a href=\"https://www.roc-lang.org/builtins/List#repeat\">List.repeat</a></p>",
        "id": 418221904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706252767
    },
    {
        "content": "<p>Also, thanks for posting, will be interesting to figure out what is going on.</p>",
        "id": 418221951,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706252808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>, Thanks for the suggestion on the <code>List.repeat</code>; actually, that was what I tried first and got a message of \"not yet implemented\" and came up with the kludge.  Just tried it and it works fine now.  At any rate, it won't affect the benchmark as creating the buffer is only a tiny part of the overall execution time...</p>",
        "id": 418222427,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706253129
    },
    {
        "content": "<p>Yeah, I guess it isn't implemented on the dev backend yet so doesn't work in the repl.</p>",
        "id": 418222462,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706253161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"686843\">@GordonBGood</span> we have three code generation back ends at different stages of development. For what you are doing you should run the compiler from the command line with optimisations on. List.repeat should work there.<br>\nIt should also work on the repl on the website.</p>",
        "id": 418224768,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1706254485
    },
    {
        "content": "<p>Oh, I found the issues: <code>Found 23000 primes to 262146 in 111 milliseconds.</code></p>\n<p>We probably need bounds check hoisting.</p>",
        "id": 418225412,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706254851
    },
    {
        "content": "<p>Every iteration of the innermost loop, we are checking the bound. That is not necessary cause loop already has a check <code>if c &gt;= 16384 then cp else</code></p>\n<p>If roc could statically analyze that, it could remove the bounds check and have the perf I posted above by manually removing the check</p>",
        "id": 418225595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706254942
    },
    {
        "content": "<p>Also, id be curious to see how c++ does if you use a std::vector and only access it through checked methods. That would be the equivalent to what roc should be generating</p>",
        "id": 418226186,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706255292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Low.20Roc.20.22bit-twiddling.22.20performance.2E.2E.2E/near/418224768\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"686843\">GordonBGood</span> we have three code generation back ends at different stages of development. For what you are doing you should run the compiler from the command line with optimisations on. List.repeat should work there.</p>\n</blockquote>\n<p>Yes, we are past that as List.repeat works when optimization is turned on...</p>",
        "id": 418227748,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706256095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>We probably need bounds check hoisting.<br>\nEvery iteration of the innermost loop, we are checking the bound.</p>\n</blockquote>\n<p>Thirty-five CPU clock cycles per array bounds check is pretty expensive bounds checking.  I suspect that the bounds check is triggering also doing something else such as not inlining a function of not lifting or something, which is why I asked if it is possible to view the assembly output.</p>\n<p>Yes, automatic bounds checking elision is something that sophisticated compilers do, but when optimized properly, array bounds checks should only take a CPU clock cycle or less.</p>\n<blockquote>\n<p>Also, id be curious to see how c++ does if you use a std::vector and only access it through checked methods. That would be the equivalent to what roc should be generating</p>\n</blockquote>\n<p>I don't know about C++, but the bounds check in Rust costs something about a CPU cycle each check; I'd assume that it would be about the same with C++...</p>",
        "id": 418228807,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706256709
    },
    {
        "content": "<p>May or may not be useful, but you can use <code>--emit-llvm-ir</code> if you want to generate a <code>.ll</code> file and see what roc is generating.</p>",
        "id": 418229239,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706256929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>Every iteration of the innermost loop, we are checking the bound. That is not necessary cause loop already has a check if c &gt;= 16384 then cp else</p>\n</blockquote>\n<p>Most compilers such as F#/C# that do bounds check elision require that the loop upper bound be the explicitly the length of the array as in \"if c &gt;= (cmpsts |&gt; List.len) then cp else\".  I tried that with no appreciable difference in execution time</p>",
        "id": 418229242,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706256931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>,</p>\n<blockquote>\n<p>May or may not be useful, but you can use --emit-llvm-ir if you want to generate a .ll file and see what roc is generating.</p>\n</blockquote>\n<p>Did that, but too much code to easily follow with obfuscated labels as to what part of the source code generated them.  When looking at assembly code, I can usually identify the innermost loop by the short loop with an \"or\" bitwise operation applied to 8-bit operands.  Could run the .ll code through LLVM's opt and llc programs to generate the assembly, but don't know what arguments are applied</p>",
        "id": 418235560,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706259909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>Oh, I found the issues: Found 23000 primes to 262146 in 111 milliseconds.</p>\n</blockquote>\n<p>What was the clock speed for the above test?  And what was the issue?  Assuming that the above output is after the issue is fixed, and likely still includes bounds checking?</p>\n<p>Bounds checking, especially for Nat indices is very cheap if the compiler is efficiently using registers, which LLVM generated code usually does:  comparing the index in a register to the array size in another register takes a quarter or third of a CPU clock cycle and a check and branch on condition overflow takes about zero time when it matches the branch prediction, which will normally be to not take the overflow branch.</p>\n<p>Even when if Int indices are used, it takes just another branch on register negative which will still match the prediction of not taking the branch in the normal case.</p>\n<p>It may be barely worth all the work of detecting and eliding the bounds check away when not needed...</p>",
        "id": 418244656,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706263640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"686843\">@GordonBGood</span> do you have a small piece of code the reproduces the <code>List.repeat</code> TODO? it works just fine in the repl for a number of types so I'm confused what the issue could be</p>",
        "id": 418300088,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706283592
    },
    {
        "content": "<blockquote>\n<p>the bounds check in Rust costs something about a CPU cycle each check</p>\n</blockquote>\n<p>I don't think there will be a bounds check in the F# or Rust. They are using a static sized array. As such, it should be trivial to know the size and avoid the bounds check completely.</p>",
        "id": 418306148,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706285354
    },
    {
        "content": "<blockquote>\n<p>\"if c &gt;= (cmpsts |&gt; List.len) then cp else\". I tried that with no appreciable difference in execution time</p>\n</blockquote>\n<p>Yeah, I noticed that too, which is definitely odd.</p>",
        "id": 418306364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706285420
    },
    {
        "content": "<blockquote>\n<p>What was the clock speed for the above test? And what was the issue? Assuming that the above output is after the issue is fixed, and likely still includes bounds checking?</p>\n</blockquote>\n<p>I removed the bounds check from <code>List.update</code> which is called on repeat in the innermost loop. That is the only change.</p>\n<p>On my machine, timing when from about <code>1500ms</code> to about <code>100ms</code>. The posted c test takes about <code>70ms</code> for reference.</p>\n<p>That is on an intel linux machine with a <code>Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz</code>. Of course that is base freq. Peak should be around 4GHz though sustain is closer to 3GHz IIRC.</p>",
        "id": 418307969,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706285927
    },
    {
        "content": "<p>Ok I have been digging into the IR and here are the two main problems from what I can see:</p>\n<ol>\n<li><code>List.get</code> is a regular function, not a low level (and we don't have borrow inference). As such, before every call to the function we increment the refcount and in the function we decrement the refcount (checking if we need to deallocate each time).</li>\n<li>The same root cause as <a href=\"https://github.com/roc-lang/roc/issues/6213\">#6213</a>: Having allocas in locations other than the entry block stops llvm from being able to inline <code>List.get</code>. LLVM is smart enough to realize that inlining that function with allocas in the wrong place would lead to a stack space explosion. As such, it refuses to inline the function unless the the allocas are fixed.</li>\n</ol>\n<hr>\n<p>So I did some testing to verify. One, I updated and used my <code>borrowing-hacks</code> branch to avoid the first issue. Then I manually edited the llvm ir to fix the second issue.<br>\nThe result: <code>Found 23000 primes to 262146 in 103 milliseconds.</code></p>\n<p>Note: both changes are need for the perf.</p>\n<p>No changes: 1.5s<br>\nJust borrowing-hacks: 1.2s<br>\nJust alloca fix: 1.0s<br>\nboth: 100ms</p>",
        "id": 418319375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706289910
    },
    {
        "content": "<p>Oh, one extra note on the alloca. Each branch is generating it's own output alloca and then we are using a phi node to pick the one we want. LLVM doesn't seem to know how to optimize that. It is important that each branch is writing to the same alloca.</p>",
        "id": 418322069,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706290879
    },
    {
        "content": "<p>In fact, that is actually the biggest issue, my line labelled <code>Just alloca fix</code> above was still using a <code>phi</code> node.</p>\n<p>This is just alloca fix without the phi node: 200ms</p>",
        "id": 418322420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706291008
    },
    {
        "content": "<p>So that still has all of the extra refcounting</p>",
        "id": 418322474,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706291026
    },
    {
        "content": "<p>Sounds like we have some pretty big llvm ir changes to make we need to:</p>\n<ol>\n<li>Ensure all allocas are always in the entry block.</li>\n<li>reuse allocas in different branches that are generating the same result.</li>\n<li>optional but probably good practice: write to the output pointer instead of making an alloca when we have the choice.</li>\n</ol>",
        "id": 418322849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706291150
    },
    {
        "content": "<p>Made an overall tracking bug: <a href=\"https://github.com/roc-lang/roc/issues/6434\">#6434</a></p>",
        "id": 418324256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706291629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>,</p>\n<blockquote>\n<p>do you have a small piece of code the reproduces the List.repeat TODO</p>\n</blockquote>\n<p>I'm sorry, I can no longer reproduce the issue.  It was said by others that this function didn't yet get added to some DEV releases, but I just tested and it now works in my sample code, so I don't know what the original problem was.</p>",
        "id": 418337818,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706296900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>I don't think there will be a bounds check in the F# or Rust. They are using a static sized array. As such, it should be trivial to know the size and avoid the bounds check completely.</p>\n</blockquote>\n<p>F# to DotNet will put in the bounds check unless the upper bound in the check is specifically specified as <code>cmpsts.Length</code> as that is what is required by DotNet to do the bounds check eliding.  Fable to JavaScript has no bounds check because JavaScript doesn't handle this without a lot of overhead.  Rust, being the \"safe\" language that it is will put in the bounds check although I'm not sure about bounds check eliding for specific cases; if one want to guaranty no bounds check for Rust vectors, one needs to use the unsafe get pointer manipulations as far as I know, although things may have changed with new version.</p>\n<blockquote>\n<blockquote>\n<p>\"if c &gt;= (cmpsts |&gt; List.len) then cp else\". I tried that with no appreciable difference in execution time</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>Yeah, I noticed that too, which is definitely odd.</p>\n</blockquote>\n<p>It seems to just just mean that you don't have bounds check eliding working yet.</p>\n<blockquote>\n<p>On my machine, timing when from about 1500ms to about 100ms. The posted c test takes about 70ms for reference.</p>\n</blockquote>\n<p>That is very similar to as on my machine.  When the tests get short as in 70 or 100 milliseconds, testing on laptop CPU's (just as mine also basically is) gets a bit strange as to prediction of what the boost CPU clock rates will be, as depending on the power profile it may take more time than the length of the test to fully ramp the clock rate up to the full boost rate.  I suspect that the C reference is actually running at about 1.5 clock cycles per loop rather than the calculated about 1.75 based on maximum boost, which means that, at least on my machine, this isn't long enough to fully ramp up the clock rate.  This is verified by running the test for 10,000 and 100,000 loops and observing that the time is less than as proportional to the number of extra loops.</p>\n<blockquote>\n<p>No changes: 1.5s<br>\nJust borrowing-hacks: 1.2s<br>\nJust alloca fix: 1.0s<br>\nboth: 100ms</p>\n</blockquote>\n<p>That is very interesting, that both \"fixes\" need to be applied to get expected behavior.</p>\n<blockquote>\n<p>Sounds like we have some pretty big llvm ir changes to make we need</p>\n</blockquote>\n<p>Yes, it looks pretty complex!!!</p>\n<p>Thanks for your replies and your efforts.</p>",
        "id": 418340498,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706298032
    },
    {
        "content": "<p>Yeah, one of the annoying things with llvm is that it is made for c/c++ like code. With that, it expects the IR to be in specific forms or it will give up on many optimizations. Since our IR is not as llvm expects, we are hitting loss of optimizations and overall poor perf.</p>",
        "id": 418345234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706300077
    },
    {
        "content": "<p>That said, it has gotten more general over the years as more languages target it</p>",
        "id": 418345304,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706300116
    },
    {
        "content": "<p>I edited the Roc code in the OP of the issue to clean up the code a bit and to use <code>List.repeat</code> instead of the kludge.  I also nest the closures as, if nesting closures turns out to be the problem, then it needs to be fixed...</p>",
        "id": 418379194,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706322815
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 418379497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706323137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> .</p>\n<blockquote>\n<p>Yeah, one of the annoying things with llvm is that it is made for c/c++ like code. With that, it expects the IR to be in specific forms or it will give up on many optimizations. Since our IR is not as llvm expects, we are hitting loss of optimizations and overall poor perf.</p>\n</blockquote>\n<p>Well, GHC Haskell also has an optional LLVM back-end and that works well enough; in fact, most times it produces better code than GHC's Native Code Generator, especially as related to register allocations.</p>\n<p>I don't know much about the Roc code base, but I wonder if you are getting too deep into the complexity of handling all the variations through Rust imperative language details instead of stepping back and looking how it would usually be done functionally, as Unique/Linear Types have been around for quite a long time and implemented in many languages.  I wonder if using Graph data flow analysis in generation of AST with uniqueness flags already generated might save some grief on the back-end code generation...</p>\n<p>All your references to <code>alloca</code> manipulations would seem to be a concern as to reliable and easy to maintain code, but that is just my two cents...</p>",
        "id": 418379895,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706323546
    },
    {
        "content": "<blockquote>\n<p>Well, GHC Haskell also has an optional LLVM back-end and that works well enough</p>\n</blockquote>\n<p>For sure, but that is because their backend has been written in a way to generate the type of ir that llvm expects. In general, the closer to a c/c++ style ir that is generated the more perf you will get out of llvm. Our backend will do the same over time, but currently we have cases were we do things that don't play nicely with the llvm optimizations. Like this.</p>\n<blockquote>\n<p>All your references to <code>alloca</code> manipulations would seem to be a concern as to reliable and easy to maintain code, but that is just my two cents...</p>\n</blockquote>\n<p>I am sure that GHC and all other llvm backends do the type of <code>alloca</code> handling that I mentioned above. It is essentially a requirement to get llvm to optimize your code well. <code>alloca</code> is just part of life when generating llvm ir.</p>\n<p>That said, this ties into what I meant when I said that llvm is that it is made for c/c++ like code. A functional language specific llvm pass that makes different assumptions about pointer and aliasing rules could totally optimize these <code>alloca</code> instructions correctly.<br>\nllvm sadly assumes that all allocas will always be at the beginning of a function (that is what c does after all). It is smart enough to generally do hoisting correctly when inlining, but it can generate very broken code when combining some of these assumptions with tail calls. llvm also assumes that essentially all pointers can alias. This ruins tons of optimizations that would be obvious in other contexts.</p>",
        "id": 418381980,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706325488
    },
    {
        "content": "<p>Anyway, all that to say our current backend is not generating what llvm expects and we need to change that</p>",
        "id": 418382027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706325543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<p>Thank you for your explanation - it looks like you have a long row to hoe... ;-)</p>",
        "id": 418382178,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706325688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<p>I did \"--emit-llvm-ir\" on the optimized example and the innermost loop looks like the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>else_block.i.i.i.i.i.i.i.i.i.i:                   ; preds = %&quot;#Attr_#inc_1.exit.i.i.i.i.i.i.i.i.i.i&quot;\n  %load_element.i.i.i.i.i.i.i.i.i.i = load i8, ptr %get_opaque_data_ptr.i.i.i.i.i.i.i.i.i.i, align 8\n  %int_bitwise_or.i.i.i.i.i.i.i.i.i.i.i.i = or i8 %load_element.i.i.i.i.i.i.i.i.i.i, %int_shift_left.i.i.i.i.i.i.i.i.i\n  %23 = getelementptr inbounds i8, ptr %4, i64 %joinpointarg.i.i.i.i.i.i.i.i.i93\n  store i8 %int_bitwise_or.i.i.i.i.i.i.i.i.i.i.i.i, ptr %23, align 1\n  br label %List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i\n\nList_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i: ; preds = %else_block.i.i.i.i.i.i.i.i.i.i, %&quot;#Attr_#inc_1.exit.i.i.i.i.i.i.i.i.i.i&quot;\n  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %result_value.i.i.i.i.i.i.i.i.i.i)\n  %gte_uint.i.i.i.i.i.i.i.i.i.i = icmp ugt i64 %operation_result.i.i.i.i.i.i.i.i.i.i, 16383\n  br i1 %gte_uint.i.i.i.i.i.i.i.i.i.i, label %joinpointcont.i.i.i.i.i.i.i.i.loopexit, label %else_block.i.i.i.i.i.i.i.i.i\n</code></pre></div>\n<p>It actually looks like it would be possible for this to be optimized into some reasonable assembly code, assuming that the load/modify/write sequence gets emitted as a single op code, that the <code>%23</code> bounds check gets done before the above compound instruction, that the redundant branch to the line following gets elided away, and that the call to do with llvm.lifetime gets elided away.  If some of that optimization is not happening, it could explain the <a href=\"http://slowness.in\">slowness.in</a> the lifetime call likely due to the placement of the <code>alloca</code> in the source for this, as you explained</p>\n<p>There are no <code>alloca</code> statements in this at all???</p>\n<p>It does answer the question about List.update and the update function not being inlined as they obviously are.</p>\n<p>As I said before, I would really like to so the assembly code that this is producing!  If this is the code after optimization, I can definitely see some potential problems in the lifetime call, which may cost variable amounts of time depending on the arguments passed into it...</p>",
        "id": 418393344,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706337544
    },
    {
        "content": "<p>List.update gets inlined, but List.get called by List.update does not get inlined.</p>",
        "id": 418395317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706338873
    },
    {
        "content": "<p>The allocas are in List.get</p>",
        "id": 418395385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706338934
    },
    {
        "content": "<p>Also, I think you don't have the full inner loop. Just part of it. I can try and grab the full thing later for reference.</p>",
        "id": 418395418,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706338976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>List.update gets inlined, but List.get called by List.update does not get inlined.  The allocas are in List.get</p>\n</blockquote>\n<p>Okay, thanks, I understand.</p>\n<blockquote>\n<p>Also, I think you don't have the full inner loop. Just part of it. I can try and grab the full thing later for reference.</p>\n</blockquote>\n<p>The snippet is what I got from primes-bench.ll, but I guess I probably don't completely understand how the whole inner loop gets put together, as I don't see where the index gets advanced per loop...</p>",
        "id": 418396058,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706339647
    },
    {
        "content": "<p>I think this is the code for the innermost loop of the cull function with current roc.<br>\nYou can see the last 2 lines checking the <code>&gt;= 16384</code> conditional and then branch back to the first block at the top here.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>loop body</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nl\">else_block.i.i.i.i.i.i.i.i.i:</span><span class=\"w\">                     </span><span class=\"c\">; preds = %else_block.i.i.i.i.i.i.i.i.i.preheader, %List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i</span>\n<span class=\"w\">  </span><span class=\"nv\">%joinpointarg.i.i.i.i.i.i.i.i.i93</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">phi</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%operation_result.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%int_shift_right.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%else_block.i.i.i.i.i.i.i.i.i.preheader</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">%call.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"vg\">@llvm.uadd.with.overflow.i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg.i.i.i.i.i.i.i.i.i93</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%operation_result.i60.i.i.i.i.i.i.i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!305</span>\n<span class=\"w\">  </span><span class=\"nv\">%has_overflowed.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%call.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!305</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%has_overflowed.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%throw_block.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%Num_add_d1a671ca8e59e06f6ed9dd68b64f8b1135fbfc4b5fef16c2e83104a25fe1b.exit.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!305</span>\n\n<span class=\"nl\">throw_block.i.i.i.i.i.i.i.i.i.i:</span><span class=\"w\">                  </span><span class=\"c\">; preds = %else_block.i.i.i.i.i.i.i.i.i</span>\n<span class=\"w\">  </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@throw_on_overflow</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!305</span>\n<span class=\"w\">  </span><span class=\"k\">unreachable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!305</span>\n\n<span class=\"nl\">Num_add_d1a671ca8e59e06f6ed9dd68b64f8b1135fbfc4b5fef16c2e83104a25fe1b.exit.i.i.i.i.i.i.i.i.i:</span><span class=\"w\"> </span><span class=\"c\">; preds = %else_block.i.i.i.i.i.i.i.i.i</span>\n<span class=\"w\">  </span><span class=\"nv\">%operation_result.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%call.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!305</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@llvm.lifetime.start.p0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!307</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%20</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!307</span>\n<span class=\"w\">  </span><span class=\"nv\">%.not.i.i.i.i.i.i.i7.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!307</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%.not.i.i.i.i.i.i.i7.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#inc_2.exit.i.i.i.i.i.i.i.i.i.i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%21</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!307</span>\n\n<span class=\"nl\">21:</span><span class=\"w\">                                               </span><span class=\"c\">; preds = %Num_add_d1a671ca8e59e06f6ed9dd68b64f8b1135fbfc4b5fef16c2e83104a25fe1b.exit.i.i.i.i.i.i.i.i.i</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%22</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"k\">nsw</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!307</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!307</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#inc_2.exit.i.i.i.i.i.i.i.i.i.i\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!307</span>\n\n<span class=\"nl\">\"#Attr_#inc_2.exit.i.i.i.i.i.i.i.i.i.i\":</span><span class=\"w\">          </span><span class=\"c\">; preds = %21, %Num_add_d1a671ca8e59e06f6ed9dd68b64f8b1135fbfc4b5fef16c2e83104a25fe1b.exit.i.i.i.i.i.i.i.i.i</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@List_get_4bc3befd4127054416125539e7bc161699db1de9fc4587f06d2ee1b827f164</span><span class=\"p\">(</span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg2.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg.i.i.i.i.i.i.i.i.i93</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!160</span>\n<span class=\"w\">  </span><span class=\"nv\">%load_tag_id.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_id_ptr.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!160</span>\n<span class=\"w\">  </span><span class=\"nv\">%eq_u8.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_id.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!160</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%eq_u8.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%else_block.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!160</span>\n\n<span class=\"nl\">else_block.i.i.i.i.i.i.i.i.i.i:</span><span class=\"w\">                   </span><span class=\"c\">; preds = %\"#Attr_#inc_2.exit.i.i.i.i.i.i.i.i.i.i\"</span>\n<span class=\"w\">  </span><span class=\"nv\">%load_element.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%get_opaque_data_ptr.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!160</span>\n<span class=\"w\">  </span><span class=\"nv\">%int_bitwise_or.i.i.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%load_element.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%int_shift_left.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!309</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%23</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg.i.i.i.i.i.i.i.i.i93</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!316</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%int_bitwise_or.i.i.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%23</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!316</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i</span>\n\n<span class=\"nl\">List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i:</span><span class=\"w\"> </span><span class=\"c\">; preds = %else_block.i.i.i.i.i.i.i.i.i.i, %\"#Attr_#inc_2.exit.i.i.i.i.i.i.i.i.i.i\"</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@llvm.lifetime.end.p0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!160</span>\n<span class=\"w\">  </span><span class=\"nv\">%gte_uint.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ugt</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%operation_result.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">16383</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!300</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%gte_uint.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%joinpointcont.i.i.i.i.i.i.i.i.loopexit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%else_block.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!302</span>\n</code></pre></div>\n</div></div>\n<p>Plus this cause it doesn't get inlined:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>List.get</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@List_get_4bc3befd4127054416125539e7bc161699db1de9fc4587f06d2ee1b827f164</span><span class=\"p\">(</span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">writeonly</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">unnamed_addr</span><span class=\"w\"> </span><span class=\"vg\">#8</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!89</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_len.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!90</span>\n<span class=\"w\">  </span><span class=\"nv\">%lt_uint.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ugt</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_len.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!95</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%lt_uint.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%then_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%else_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n\n<span class=\"nl\">common.ret:</span><span class=\"w\">                                       </span><span class=\"c\">; preds = %\"#Attr_#dec_2.exit\", %\"#Attr_#dec_2.exit17\"</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_alloca3.sink</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">phi</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit\"</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit17\"</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">%.sink</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">phi</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit\"</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit17\"</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_id_ptr5</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca3.sink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%.sink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_id_ptr5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"nv\">%storemerge</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca3.sink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"nv\">%storemerge</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n\n<span class=\"nl\">then_block:</span><span class=\"w\">                                       </span><span class=\"c\">; preds = %entry</span>\n<span class=\"w\">  </span><span class=\"nv\">%read_list_ptr.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!100</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_get_element.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%read_list_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!100</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_get_load_element.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%list_get_element.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!100</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_capacity_or_ref_ptr.i7</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"nv\">%\"cap &gt; 0.i8.not\"</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_capacity_or_ref_ptr.i7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%\"cap &gt; 0.i8.not\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit17\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%modification_list_block.i15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n\n<span class=\"nl\">modification_list_block.i15:</span><span class=\"w\">                      </span><span class=\"c\">; preds = %then_block</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">ptrtoint</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%read_list_ptr.i</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">shl</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_capacity_or_ref_ptr.i7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"nv\">%isneg.i.i.i12</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">slt</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_capacity_or_ref_ptr.i7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%3</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%isneg.i.i.i12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%4</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">inttoptr</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%3</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"nv\">%get_rc_ptr.i13</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">-1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!104</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%5</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%get_rc_ptr.i13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n<span class=\"w\">  </span><span class=\"nv\">%.not.i.i.i14</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%.not.i.i.i14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit17\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n\n<span class=\"nl\">6:</span><span class=\"w\">                                                </span><span class=\"c\">; preds = %modification_list_block.i15</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%7</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">-1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%get_rc_ptr.i13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%8</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">-9223372036854775808</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit17\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n\n<span class=\"nl\">9:</span><span class=\"w\">                                                </span><span class=\"c\">; preds = %6</span>\n<span class=\"w\">  </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc_dealloc</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"nv\">%get_rc_ptr.i13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit17\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!108</span>\n\n<span class=\"nl\">\"#Attr_#dec_2.exit17\":</span><span class=\"w\">                            </span><span class=\"c\">; preds = %modification_list_block.i15, %6, %9, %then_block</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_alloca</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">alloca</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"nv\">%data_buffer</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%list_get_load_element.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%data_buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%common.ret</span>\n\n<span class=\"nl\">else_block:</span><span class=\"w\">                                       </span><span class=\"c\">; preds = %entry</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_capacity_or_ref_ptr.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv\">%\"cap &gt; 0.i.not\"</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_capacity_or_ref_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%\"cap &gt; 0.i.not\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%modification_list_block.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n\n<span class=\"nl\">modification_list_block.i:</span><span class=\"w\">                        </span><span class=\"c\">; preds = %else_block</span>\n<span class=\"w\">  </span><span class=\"nv\">%list.elt</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%10</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">ptrtoint</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%list.elt</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%11</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">shl</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_capacity_or_ref_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv\">%isneg.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">slt</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_capacity_or_ref_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%12</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%isneg.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%13</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">inttoptr</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%12</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv\">%get_rc_ptr.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">-1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!112</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%14</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%get_rc_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n<span class=\"w\">  </span><span class=\"nv\">%.not.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%.not.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n\n<span class=\"nl\">15:</span><span class=\"w\">                                               </span><span class=\"c\">; preds = %modification_list_block.i</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%16</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">-1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%get_rc_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%17</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">-9223372036854775808</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n\n<span class=\"nl\">18:</span><span class=\"w\">                                               </span><span class=\"c\">; preds = %15</span>\n<span class=\"w\">  </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc_dealloc</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"nv\">%get_rc_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%\"#Attr_#dec_2.exit\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!114</span>\n\n<span class=\"nl\">\"#Attr_#dec_2.exit\":</span><span class=\"w\">                              </span><span class=\"c\">; preds = %modification_list_block.i, %15, %18, %else_block</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_alloca3</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">alloca</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%common.ret</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 418453121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706396631
    },
    {
        "content": "<p>Also, man, counting the exact number of <code>.i</code> suffixes is a pain.</p>",
        "id": 418453185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706396676
    },
    {
        "content": "<p>your editor can tell you how many characters the current selection is, right?</p>",
        "id": 418453198,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706396700
    },
    {
        "content": "<p>still not ideal of course</p>",
        "id": 418453254,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706396729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>I think this is the code for the innermost loop of the cull function with current roc.</p>\n</blockquote>\n<p>Thanks for that. </p>\n<blockquote>\n<p>Plus this (List.get - GBG) cause it doesn't get inlined:</p>\n</blockquote>\n<p>That's pretty serious!</p>\n<blockquote>\n<p>You can see the last 2 lines checking the &gt;= 16384 conditional and then branch back to the first block at the top here.</p>\n</blockquote>\n<p>Yes, I identified the end of the loop correctly, but</p>\n<blockquote>\n<p>Also, man, counting the exact number of .i suffixes is a pain.</p>\n</blockquote>\n<p>I miss-counted number of suffixes for the branch back to the beginning of the loop.</p>",
        "id": 418456570,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706400169
    },
    {
        "content": "<p>List.get is kinda ridiculous cause we don't have borrow inference. It should just be a size check, grabbing the element, and returning a result.</p>\n<p>Due to lack of borrowing, it also has to decrement the refcount and maybe free the entire list. So a significant chunk of the code is spent handing refcounting and deallocation related things</p>",
        "id": 418456879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706400435
    },
    {
        "content": "<p>With borrowing, list.get becomes this, which is much more reasonable. Still has the messed up allocas that stop inline and some other llvm optimizations, but a reasonable sized function now.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>List.get with borrowing (aka no refcounting decrement)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@List_get_4bc3befd4127054416125539e7bc161699db1de9fc4587f06d2ee1b827f164</span><span class=\"p\">(</span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">writeonly</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">unnamed_addr</span><span class=\"w\"> </span><span class=\"vg\">#8</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!89</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_len.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!90</span>\n<span class=\"w\">  </span><span class=\"nv\">%lt_uint.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ugt</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%list_len.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!95</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%lt_uint.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%then_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%else_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n\n<span class=\"nl\">common.ret:</span><span class=\"w\">                                       </span><span class=\"c\">; preds = %else_block, %then_block</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_alloca3.sink</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">phi</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%else_block</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%then_block</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">%.sink</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">phi</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%else_block</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%then_block</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_id_ptr5</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca3.sink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%.sink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_id_ptr5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"nv\">%storemerge</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca3.sink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"nv\">%storemerge</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n\n<span class=\"nl\">then_block:</span><span class=\"w\">                                       </span><span class=\"c\">; preds = %entry</span>\n<span class=\"w\">  </span><span class=\"nv\">%read_list_ptr.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"nv\">%list.RocList</span><span class=\"w\"> </span><span class=\"nv\">%list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!100</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_get_element.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%read_list_ptr.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!100</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_get_load_element.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%list_get_element.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!100</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_alloca</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">alloca</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"nv\">%data_buffer</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%tag_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%list_get_load_element.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%data_buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%common.ret</span>\n\n<span class=\"nl\">else_block:</span><span class=\"w\">                                       </span><span class=\"c\">; preds = %entry</span>\n<span class=\"w\">  </span><span class=\"nv\">%tag_alloca3</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">alloca</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!99</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%common.ret</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 418458050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706401514
    },
    {
        "content": "<p>For completeness, after fixing the alloca issue as well and rerunning the llvm passes, the entire loop turns into this:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>the expected ir</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nl\">List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i:</span><span class=\"w\"> </span><span class=\"c\">; preds = %List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i, %else_block.i.i.i.i.i.i.i.i.i.preheader</span>\n<span class=\"w\">  </span><span class=\"nv\">%joinpointarg.i.i.i.i.i.i.i.i.i77</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">phi</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%operation_result.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%int_shift_right.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%else_block.i.i.i.i.i.i.i.i.i.preheader</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">%operation_result.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg.i.i.i.i.i.i.i.i.i77</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%operation_result.i61.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!239</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_get_element.i.i25</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg.i.i.i.i.i.i.i.i.i77</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!241</span>\n<span class=\"w\">  </span><span class=\"nv\">%list_get_load_element.i.i26</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%list_get_element.i.i25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!241</span>\n<span class=\"w\">  </span><span class=\"nv\">%int_bitwise_or.i.i.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%list_get_load_element.i.i26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%int_shift_left.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!247</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%int_bitwise_or.i.i.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%list_get_element.i.i25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!254</span>\n<span class=\"w\">  </span><span class=\"nv\">%gte_uint.i.i.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ugt</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%operation_result.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">16383</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!231</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv\">%gte_uint.i.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%joinpointcont.i.i.i.i.i.i.i.i.loopexit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%List_update_8c3e23999fb4a9a5772421e445946d011124a10dbca352b99c3db8b699f4098.exit.i.i.i.i.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!236</span>\n</code></pre></div>\n</div></div>",
        "id": 418458683,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706402100
    },
    {
        "content": "<p>I do notice this in the part of LLVM's inlining analysis (<code>Analysis/InlineCost.cpp</code>) that looks at allocas:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// FIXME: This is overly conservative. Dynamic allocas are inefficient for</span>\n<span class=\"w\">  </span><span class=\"c1\">// a variety of reasons, and so we would like to not inline them into</span>\n<span class=\"w\">  </span><span class=\"c1\">// functions which don't currently have a dynamic alloca. This simply</span>\n<span class=\"w\">  </span><span class=\"c1\">// disables inlining altogether in the presence of a dynamic alloca.</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">I</span><span class=\"p\">.</span><span class=\"n\">isStaticAlloca</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"n\">HasDynamicAlloca</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I might add a flag to this pass/disable locally and rerun opt to see if that helps. Given that there's a fixme right above this snippet, I bet we could upstream a patch to add a flag to tune this behavior while keeping the default the same.</p>",
        "id": 418558702,
        "sender_full_name": "Asher Mancinelli",
        "timestamp": 1706497886
    },
    {
        "content": "<p>That would be really awesome. Though we should still fix our alloca generation. In their guide for frontend authors, llvm is very clear that allocas outside of the entry block mess with a number of optimization: <a href=\"https://llvm.org/docs/Frontend/PerformanceTips.html#use-of-allocas\">https://llvm.org/docs/Frontend/PerformanceTips.html#use-of-allocas</a></p>\n<p>In our specific case, even if you move the two allocas to the entry block, another very important piece for performance is merging the two allocas into a single alloca. I assume llvm is unwilling to reason about a phi node that takes two allocas (probably do to aliasing rules). As such, it won't recognize the many following optimizations that can happen by writing the output directly.</p>",
        "id": 418559202,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706498311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>the entire loop turns into this: ...</p>\n</blockquote>\n<p>That looks almost exactly like the C loop other than that the get pointer is still maybe doing a bounds check; it should run about the same or at least not much slower than the C code.</p>",
        "id": 418591307,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706519260
    },
    {
        "content": "<p>No bounds check in the loop.</p>\n<p>It is increment the element offset. Calculate the memory address relative to the list pointer. Load the element. Bitwise or it. Store it back. Length check. Loop back to beginning.</p>",
        "id": 418710822,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706558671
    },
    {
        "content": "<p>So compared to c, should be one extra instruction. C is updating the pointer directly. Roc is updating an index and then calculate the correct pointer. So should be one extra <code>lea</code> instruction.</p>",
        "id": 418710978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706558742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>So compared to c, should be one extra ... lea instruction.</p>\n</blockquote>\n<p>That's still increases the number of CPU clock cycles for this tight loop of about 1.5 cycles in C  by at least 0.25 cycles (if some care is taken in indexing mode, 0.5 cycles for complex indexing which I don't think will be used here - Zen 4) for an increase of 16.7% to 33.3%.</p>\n<p>So if C takes 70 milliseconds, Roc with all of your optimizations will take either 82 or 93 milliseconds on Zen 4; a little faster than the about 100 milliseconds  you forced before on Intel but I think you've advanced your optimizations a little more since then by assuming that Roc will have automatic bounds check eliding...</p>",
        "id": 418721255,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706562693
    },
    {
        "content": "<blockquote>\n<p>by assuming that Roc will have automatic bounds check eliding</p>\n</blockquote>\n<p>Actually, llvm was smart enough to pull the bounds check out of the loop and instead use a single check before the loop. So nothing needed on the roc side at least for a direct case like this.</p>\n<blockquote>\n<p>So if C takes 70 milliseconds, Roc with all of your optimizations will take either 82 or 93 milliseconds on Zen 4</p>\n</blockquote>\n<p>Would depend some on cache timings, right? Cause all the extra instruction time may be hidden by waiting on loading elements from the l1 cache (probably takes about 4 cycles)? Right?</p>\n<p>Actually, looking at the C code, it does <code>cmpsts[c]</code> which also should be a <code>lea</code> instruction. So I would expect it to generate the exact same assembly for the innermost loop.</p>",
        "id": 418723207,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706563457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>Actually, llvm was smart enough to pull the bounds check out of the loop and instead use a single check before the loop.</p>\n</blockquote>\n<p>Wow, LLVM really pulled it off there.</p>\n<blockquote>\n<p>(My timing estimates -GBG) Would depend some on cache timings, right?</p>\n</blockquote>\n<p>Although modifying the L1 cache has a latency of about 4 clock cycles, the throughput is about 1 cycle once the read/modify/write phases have been combined into one instruction, but that doesn't have much to do with uses of the LEA instruction, which is a register instruction.</p>\n<blockquote>\n<p>Actually, looking at the C code, it does cmpsts[c] which also should be a lea instruction. So I would expect it to generate the exact same assembly for the innermost loop.</p>\n</blockquote>\n<p>It depends on the compiler:  LLVM tends to use a LEA instruction and a simple addressing mode on the read/modify/write instruction; GCC tends to skip the LEA and combine the indexing in the read/modify/write instruction.  The difference in timing isn't much and also depends on the CPU on which the code is run, but often the GCC way is a tiny bit faster.</p>\n<p>My C code timing used GCC but I don't have a working computer just now to output the assembler (the -S command line option).  It's often fun to compare the output of GCC to that of Clang, which uses LLVM.</p>",
        "id": 418745853,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706574414
    },
    {
        "content": "<p>Went to godbolt and got some assembly then dumped the roc assembly:</p>\n<p>gcc and clang generate essentially the same thing.<br>\ngcc:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">.L5:</span>\n<span class=\"w\">        </span><span class=\"nf\">or</span><span class=\"w\">      </span><span class=\"no\">BYTE</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rdi</span><span class=\"err\">+</span><span class=\"no\">rax</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">dl</span>\n<span class=\"w\">        </span><span class=\"nf\">add</span><span class=\"w\">     </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsi</span>\n<span class=\"w\">        </span><span class=\"nf\">cmp</span><span class=\"w\">     </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16383</span>\n<span class=\"w\">        </span><span class=\"nf\">jle</span><span class=\"w\">     </span><span class=\"no\">.L5</span>\n</code></pre></div>\n<p>clang:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">.LBB0_6:</span><span class=\"w\">                                </span><span class=\"c1\">#   Parent Loop BB0_1 Depth=1</span>\n<span class=\"w\">        </span><span class=\"nf\">or</span><span class=\"w\">      </span><span class=\"no\">byte</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rax</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"no\">r10</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">r11b</span>\n<span class=\"w\">        </span><span class=\"nf\">add</span><span class=\"w\">     </span><span class=\"no\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsi</span>\n<span class=\"w\">        </span><span class=\"nf\">cmp</span><span class=\"w\">     </span><span class=\"no\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16384</span>\n<span class=\"w\">        </span><span class=\"nf\">jb</span><span class=\"w\">      </span><span class=\"no\">.LBB0_6</span>\n</code></pre></div>\n<p>In Roc with the borrowing hack and the alloc fix. We also essentially get the same assembly for the inner loop:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">.LBB13_44:</span>\n<span class=\"w\">    </span><span class=\"nf\">or</span><span class=\"w\">  </span><span class=\"no\">byte</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">r13</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">r9b</span>\n<span class=\"w\">    </span><span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsi</span>\n<span class=\"w\">    </span><span class=\"nf\">cmp</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16383</span>\n<span class=\"w\">    </span><span class=\"nf\">jbe</span><span class=\"w\"> </span><span class=\"no\">.LBB13_44</span>\n</code></pre></div>",
        "id": 418747640,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706575485
    },
    {
        "content": "<p>All of them optimize to essentially the same 4 instructions (all with a slightly different comparison and jump instruction which is interesting)</p>",
        "id": 418747693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706575524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<blockquote>\n<p>All of them optimize to essentially the same 4 instructions (all with a slightly different comparison and jump instruction which is interesting)</p>\n</blockquote>\n<p>Thanks for that.</p>\n<p>Yes, all of them should produce identical execution times, but the differences are interesting.</p>",
        "id": 418751467,
        "sender_full_name": "GordonBGood",
        "timestamp": 1706578000
    },
    {
        "content": "<p>Had to look it up cause I never remember. JB is the unsigned version and JL is the signed version.</p>\n<p>Then of course the E suffix is for or equal.</p>",
        "id": 418755037,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706580408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>,</p>\n<p>I see you've made some commits preparing for a solution to the low performance for this type of low level code but as of current nightlies the code is still performing slowly.  Any estimates on when this might be resolved?</p>",
        "id": 426836574,
        "sender_full_name": "GordonBGood",
        "timestamp": 1710544491
    },
    {
        "content": "<p>My commits were just hacks to prove out the concepts required. The real changes are larger projects. I sadly have not had the time/energy to tackle them. So mostly they are just documented and waiting.</p>",
        "id": 426837794,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710545273
    }
]