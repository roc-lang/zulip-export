[
    {
        "content": "<p>Roc <em>obviously</em> has a dearth of parser-combinator packages, so I wrote another one! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p><a href=\"https://github.com/imclerran/roc-tinyparse\">roc-tinyparse</a></p>\n<p>Started out writing this for another project, but ended up really liking the API and wanting to use it in some other projects, so I published it as it's own package, and thought I'd share.</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"no\">Parse</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">char</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">integer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">filter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zip_3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">maybe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">finalize</span><span class=\"o\">]</span>\n\n<span class=\"n\">dot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">maybe</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s2\">\"v\"</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">((</span><span class=\"n\">major</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">minor</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">patch</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">({</span><span class=\"n\">major</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">minor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">patch</span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"p\">(</span><span class=\"s2\">\"v1.2.34\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">finalize</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">({</span><span class=\"ss\">major</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">minor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">patch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">34</span><span class=\"w\"> </span><span class=\"p\">})</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">(</span><span class=\"n\">maybe</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s2\">\"v\"</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">zip_3</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">integer</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">integer</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"p\">(</span><span class=\"s2\">\"v1.2.34_abc\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">finalize_lazy</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">34</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 499329723,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739394810
    },
    {
        "content": "<p>Gotta admit, I'm looking forward to static dispatch and doing this!</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">parser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s2\">\"v\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">both</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">both</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 499331503,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739395537
    },
    {
        "content": "<p>What is lhs vs rhs vs both? I don't recognize those as common combinator names?</p>",
        "id": 499888206,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739601608
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nv\">parser</span>\n<span class=\"nv\">lhs</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">lhs</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">parser_l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser_r</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">zip</span><span class=\"p\">(</span><span class=\"nv\">parser_l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser_r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"p\">(</span><span class=\"nf\">|</span><span class=\"p\">(</span><span class=\"nv\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_r</span><span class=\"p\">)</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"p\">(</span><span class=\"nv\">l</span><span class=\"p\">))</span>\n\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">parser</span>\n<span class=\"nv\">rhs</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">rhs</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">parser_l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser_r</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">zip</span><span class=\"p\">(</span><span class=\"nv\">parser_l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser_r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"p\">(</span><span class=\"nf\">|</span><span class=\"p\">(</span><span class=\"nv\">_l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">)</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"p\">(</span><span class=\"nv\">r</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 499889217,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739602625
    },
    {
        "content": "<p>Our Rust parser code calls them <code>skip_second</code> and <code>skip_first</code>, not sure what the normal names are</p>",
        "id": 499889248,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739602666
    },
    {
        "content": "<p>I think <code>skip_second</code> and <code>skip_first</code> are pretty common names, also <code>keep_left</code> and <code>keep_right</code>. I was looking for really concise names to enable writing more complex grammars in a single line.</p>",
        "id": 499890854,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739604154
    },
    {
        "content": "<p>And <code>both</code> is just an alias for <code>zip</code>. Kinda silly since it’s actually longer than zip but I added that to be similar in flavor to <code>lhs</code>/<code>rhs</code>. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 499891323,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739604633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/We.20need.20to.20parse.20deeper!/near/499889248\">said</a>:</p>\n<blockquote>\n<p>Our Rust parser code calls them <code>skip_second</code> and <code>skip_first</code>, not sure what the normal names are</p>\n</blockquote>\n<p>The normal names are obviously <code>&lt;*</code> and <code>*&gt;</code> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 499947801,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1739651299
    },
    {
        "content": "<p>Truth be told, I was trying to get as close as I could to <code>&lt;*</code>, <code>*&gt;</code>, and <code>&lt;*&gt;</code> as I could! <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 499958341,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739661249
    }
]