[
    {
        "content": "<p>a nice use of the <code>??</code> operator with early <code>return</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">method_and_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method_and_path</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"sc\">??</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"no\">Response</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"s2\">\"Bad HTTP method: ${method}\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 491128934,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735429463
    },
    {
        "content": "<p>this works because <code>??</code> doesn't desugar to <code>with_default</code> but rather to this:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">method_and_path</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method_and_path</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"n\">method_and_path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">method_and_path</span>\n<span class=\"w\">        </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"no\">Response</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"s2\">\"â€¦\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 491128972,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735429543
    },
    {
        "content": "<p>Is that a feature or a bug?</p>\n<p>Like isn't that just the binop version <code>?</code>? Just reimplemented via <code>??</code>?</p>",
        "id": 491129402,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735430063
    },
    {
        "content": "<p>Oh, this is subtly different. Binop for <code>?</code> wraps and error and this must return an error.</p>",
        "id": 491129489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735430173
    },
    {
        "content": "<p>yeah, binop <code>?</code> is if you want to do something with the <code>Err</code></p>",
        "id": 491129497,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430188
    },
    {
        "content": "<p>which this one doesn't</p>",
        "id": 491129499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430190
    },
    {
        "content": "<p>This is returning a success. It is just a success that returns a 400 http code</p>",
        "id": 491129504,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735430195
    },
    {
        "content": "<p>also, binop <code>?</code> takes a lambda, so early <code>return</code> wouldn't work with it</p>",
        "id": 491129508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430201
    },
    {
        "content": "<p>right, this whole function has the type <code>Request =&gt; Response</code></p>",
        "id": 491129510,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430211
    },
    {
        "content": "<p>Yep</p>",
        "id": 491129516,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735430219
    },
    {
        "content": "<p>so it's nice to be able to turn a <code>Result</code> into a <code>Response</code> like this! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 491129522,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430226
    },
    {
        "content": "<p>especially right up front without indenting</p>",
        "id": 491129533,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430240
    },
    {
        "content": "<p>(the classic \"early return\" benefit)</p>",
        "id": 491129541,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430250
    },
    {
        "content": "<p>It's a useful variant of <code>Result.onErr</code> that is already unwrapped</p>",
        "id": 491129547,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735430256
    },
    {
        "content": "<p>well <code>Result.on_err</code> couldn't work here</p>",
        "id": 491129554,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430271
    },
    {
        "content": "<p>because it takes a lambda</p>",
        "id": 491129597,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430285
    },
    {
        "content": "<p>and <code>return</code> inside the lambda returns from the lambda, not from the outer function (which is what we want here)</p>",
        "id": 491129601,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430296
    },
    {
        "content": "<p>Yeah, but it might solve _some_ of the same usecases, but with less noise</p>",
        "id": 491129604,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735430307
    },
    {
        "content": "<p>oh sure, it's great to have both</p>",
        "id": 491129607,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430313
    },
    {
        "content": "<p>And plus the early return which is nice</p>",
        "id": 491129609,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735430317
    },
    {
        "content": "<p>like this wouldn't work in the middle of a pipeline of calls</p>",
        "id": 491129611,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430321
    },
    {
        "content": "<p>but for early return, it's definitely nice!</p>",
        "id": 491129614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430333
    },
    {
        "content": "<p>Yeah, if you made errors explicit, it would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">method_and_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method_and_path</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"bp\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">err_code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">400</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"...\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 491129618,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735430337
    },
    {
        "content": "<p>yeah if the function returned <code>Result Response ...</code> then that would work</p>",
        "id": 491129631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430364
    },
    {
        "content": "<p>but in this case it's desirable to have it return <code>Response</code> instead of <code>Result</code></p>",
        "id": 491129636,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735430370
    },
    {
        "content": "<p>Yeah</p>",
        "id": 491129643,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735430376
    },
    {
        "content": "<p>Cool here's another good usecase for <code>??</code> <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 491129708,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735430406
    },
    {
        "content": "<p>This looks a bit like Zig's <code>catch</code> keyword, which I'm quite fond of. <code>catch</code> allows capturing the error value though.</p>\n<p>If I came across this pattern while reviewing code I think I would add a note to it, because I think it's almost always a mistake to drop an error value. When the error value is not incorporated into the return value somehow I'd expect it to get logged, so there's some trail to follow when debugging. For instance, in the 400 response example above, to help figure out why a server is returning an unexpected 400 error.</p>",
        "id": 491130642,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735431257
    },
    {
        "content": "<p>in this case that method only returns one error</p>",
        "id": 491130892,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735431509
    },
    {
        "content": "<p>so there isn't any relevant info to drop here</p>",
        "id": 491130907,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735431532
    },
    {
        "content": "<p>Fair point, but:</p>\n<ul>\n<li>It's hard to tell by reading the function if it's dropping important information.</li>\n<li>Future refactors could change the error type and this code would still compile.</li>\n</ul>\n<p>It comes down to the sugar containing an <code>Err(_)</code> branch and so using it means giving up on some exhaustiveness checking with all the associated risks and benefits.</p>",
        "id": 491160363,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735463152
    },
    {
        "content": "<p>For calling effectful functions, I believe we have the rule that if you're not interested in the return value, you have to do:</p>\n<div class=\"codehilite\"><pre><span></span><code>_ = runEffect!()\n</code></pre></div>\n<p>And I believe the plan is that the <code>_ =</code> can be ommitted if the return value is <code>{}</code>.</p>\n<p>Is this the same situation where we want to help against accidentally dropping information? Or  do we feel differently because it's an error value?</p>",
        "id": 491160708,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735463480
    },
    {
        "content": "<p>What if the 'signature' of the <code>??</code> operator (and possibly <code>Result.withDefault</code> as well) becomes:</p>\n<div class=\"codehilite\"><pre><span></span><code>(??) : Result val err, (err =&gt; val) =&gt; val\n\nmethod_and_path = request.method_and_path() ?? |_|\n    return Response.err(400).body(&quot;Bad HTTP method: ${method}&quot;)\n</code></pre></div>\n<p>And make it so the <code>|_|</code> can be ommitted if the error type is <code>{}</code>?</p>",
        "id": 491160925,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735463658
    },
    {
        "content": "<p>hm, allowing the lambda to be omitted based on type information would mean this is no longer syntax sugar, and feels too complicated to me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 491172151,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735474923
    },
    {
        "content": "<p>and if it couldn't be omitted, then the early return wouldn't work here</p>",
        "id": 491172170,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735474941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/304902-show-and-tell/topic/nice.20use.20of.20.60.3F.3F.60.20and.20.60return.60/near/491172170\">said</a>:</p>\n<blockquote>\n<p>and if it couldn't be omitted, then the early return wouldn't work here</p>\n</blockquote>\n<p>Is this because the <code>return</code> from return from the lambda instead of the containing function?</p>\n<p>Maybe <code>?? |x| ...</code> would constitute one sugar, so the whole thing is a 'fake lambda' with slightly different rules, but that sounds really confusing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. Maybe there's a different syntax that does the same thing but without implying lambda-ness.</p>\n<p>Personally, without the error capture I'd consider <code>??</code> a bit of a footgun, and would rather not have it, but I appreciate others might feel different :).</p>",
        "id": 491177000,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735479484
    },
    {
        "content": "<p>Yeah, remember in Zig, <code>||</code> is a capture group, not a lambda.  It's still a part of the containing function</p>",
        "id": 491177306,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735479749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/nice.20use.20of.20.60.3F.3F.60.20and.20.60return.60/near/491160363\">said</a>:</p>\n<blockquote>\n<p>It comes down to the sugar containing an <code>Err(_)</code> branch and so using it means giving up on some exhaustiveness checking with all the associated risks and benefits.</p>\n</blockquote>\n<p>This confuses me a bit. The whole point of something like <code>Result.withDefault</code> is to remove the error case. If you are moving to the ok case only, I feel like it would be an antipattern to still depend on the error.</p>\n<p><code>Dict.get dict key ?? default_value</code></p>",
        "id": 491182678,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735484504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/nice.20use.20of.20.60.3F.3F.60.20and.20.60return.60/near/491177306\">said</a>:</p>\n<blockquote>\n<p>Yeah, remember in Zig, <code>||</code> is a capture group, not a lambda.  It's still a part of the containing function</p>\n</blockquote>\n<p>I feel like that would lead to a lot of confusion and inconsistency in roc. In zig, it is a capture group cause they have no lambdas. They are a low level language with only function pointers.</p>",
        "id": 491182793,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735484592
    },
    {
        "content": "<p>That was exactly my point, different languages with different idioms and constructs</p>",
        "id": 491183103,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735484863
    },
    {
        "content": "<p>Ah, I thought you were suggesting we could do the same thing as zig. Definitely a misunderstanding of intent.</p>",
        "id": 491183180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735484935
    },
    {
        "content": "<p>Zig also has syntax in ifs for unwrapping optionals</p>",
        "id": 491183184,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735484942
    },
    {
        "content": "<p>We should do us</p>",
        "id": 491183196,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735484952
    },
    {
        "content": "<p>If you want to do something with the error, we have onErr, mapErr, and mapBoth</p>",
        "id": 491183220,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735484978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/nice.20use.20of.20.60.3F.3F.60.20and.20.60return.60/near/491130642\">said</a>:</p>\n<blockquote>\n<p>When the error value is not incorporated into the return value somehow I'd expect it to get logged, so there's some trail to follow when debugging.</p>\n</blockquote>\n<p>Ah, I see your reasoning. I guess I rarely work on code where this is the case. Generally the with default is a semi-expected case and the error is not something to care about. Something akin to <code>Dict.get</code> with a default value being the most common use case.</p>\n<p>Even in most zig code where I use catch it is generally <code>catch unreachable</code> or similar.</p>\n<p>I can see how for high level logic like deciding an http 400 you might want logging or ab explicit not of no extra info to log. For me that is the exceptional case not the common case, so I didn't think of it.</p>",
        "id": 491183704,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735485412
    },
    {
        "content": "<p>I didn't realize before that this \"problem\" (depending on how you feel about it) is inherent to <code>Result.withDefault</code> as well.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/304902-show-and-tell/topic/nice.20use.20of.20.60.3F.3F.60.20and.20.60return.60/near/491183704\">said</a>:</p>\n<blockquote>\n<p>Even in most zig code where I use catch it is generally <code>catch unreachable</code> or similar.</p>\n</blockquote>\n<p>I do that too sometimes, but I think that's a different case. In case of a <code>catch unreachable</code> we don't take the error branch. I think the Zig equivalent of <code>??</code> would be <code>catch return</code>.</p>",
        "id": 491204677,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735503942
    },
    {
        "content": "<p>Yeah, as I said as my first comment:</p>\n<blockquote>\n<p>Is that a feature or a bug?</p>\n</blockquote>\n<p><code>??</code> just forcing a default value makes sense to me. Using it with <code>return</code> feels much more accidental. Maybe it is good. Maybe it leads to ignoring error classes.</p>",
        "id": 491204902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735504132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/304902-show-and-tell/topic/nice.20use.20of.20.60.3F.3F.60.20and.20.60return.60/near/491183704\">said</a>:</p>\n<blockquote>\n<p>Something akin to <code>Dict.get</code> with a default value being the most common use case.</p>\n</blockquote>\n<p>Yeah, that use doesn't seem particularly bad to me either, the <code>Dict.get</code> error is essentially equivalent to <code>{}</code>, so we're not losing any information.</p>",
        "id": 491205032,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735504253
    }
]