[
    {
        "content": "<p>I've been working on a platform to develop <a href=\"https://github.com/iced-rs/iced\">iced</a> applications in Roc. For those not familiar, Iced is an elm inspired GUI framework for Rust. </p>\n<p>There's a bunch of missing widgets &amp; features I haven't mapped over yet, but I'd at least like to expose all builtin widgets with their configuration options and styling. I also want to expose some basic IO effects that can be used to define closures that the platform can run as iced tasks for producing application messages.</p>\n<p>Repo link: <a href=\"https://github.com/tarkah/roc-iced\">https://github.com/tarkah/roc-iced</a></p>\n<p>Here's a basic example of how it looks:</p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/tarkah/roc-iced/blob/master/assets/demo.gif\"><img src=\"https://uploads.zulipusercontent.net/b41f7c2597f067d65144b6db26c478f635ed324e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461726b61682f726f632d696365642f6d61737465722f6173736574732f64656d6f2e676966\"></a></div><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">program</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Message</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">iced</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"../platform/main.roc\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">iced.Element</span><span class=\"w\"> </span><span class=\"nv\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Element</span><span class=\"p\">]</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">iced.Element.Container</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">Container</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">iced.Element.Container</span><span class=\"w\"> </span><span class=\"nv\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">container</span><span class=\"p\">]</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">Box</span><span class=\"w\"> </span><span class=\"nv\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">box</span><span class=\"p\">]</span>\n\n<span class=\"nv\">program</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">update</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kt\">Model</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">count</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">isFooChecked</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">isBarChecked</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kt\">Message</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">IncrementCount</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">FooToggled</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">BarToggled</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Input</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Submitted</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Model</span>\n<span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">count</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">isFooChecked</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">isBarChecked</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Message</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Model</span>\n<span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">message</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">message</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">IncrementCount</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">count</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">.</span><span class=\"nv\">count</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">FooToggled</span><span class=\"w\"> </span><span class=\"nv\">isFooChecked</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">isFooChecked</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">BarToggled</span><span class=\"w\"> </span><span class=\"nv\">isBarChecked</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">isBarChecked</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">Input</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">Submitted</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Element</span><span class=\"w\"> </span><span class=\"kt\">Message</span>\n<span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Column</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"s\">\"Roc + Iced &lt;3\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"kt\">Button</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">content</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"s\">\"Pressed $(Num.toStr model.count) times\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">onPress</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Active</span><span class=\"w\"> </span><span class=\"kt\">IncrementCount</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">label</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"Foo\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">isChecked</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">.</span><span class=\"nv\">isFooChecked</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">onToggle</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Active</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"kt\">FooToggled</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">label</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"Bar\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">isChecked</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">.</span><span class=\"nv\">isBarChecked</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">onToggle</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Active</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"kt\">BarToggled</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">label</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"Baz\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">isChecked</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">onToggle</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Disabled</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">TextInput</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">.</span><span class=\"nv\">input</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">width</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Fixed</span><span class=\"w\"> </span><span class=\"mi\">150</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">onInput</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Active</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"kt\">Input</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"nv\">onSubmit</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Active</span><span class=\"w\"> </span><span class=\"kt\">Submitted</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">body</span>\n\n<span class=\"nv\">body</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">elem</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">container</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Container</span><span class=\"nf\">.</span><span class=\"nv\">center</span><span class=\"w\"> </span><span class=\"kt\">Fill</span>\n</code></pre></div>",
        "id": 449373464,
        "sender_full_name": "tarkah",
        "timestamp": 1720204027
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 449373870,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720204201
    },
    {
        "content": "<p>Very cool. This really does look super familiar to Elm, just based on that example I feel I could build a basic GUI app with this, something I've otherwise never done before. Super excited!</p>",
        "id": 449380364,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1720207027
    },
    {
        "content": "<p>very cool, <strong>tarkah</strong>! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 449386880,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720209008
    },
    {
        "content": "<p>does Iced have an equivalent of Elm's <code>lazy</code>?</p>",
        "id": 449386909,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720209029
    },
    {
        "content": "<p>Thanks everyone! </p>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Iced/near/449386909\">said</a>:</p>\n<blockquote>\n<p>does Iced have an equivalent of Elm's <code>lazy</code>?</p>\n</blockquote>\n<p>It does, see <a href=\"https://docs.rs/iced/latest/iced/widget/fn.lazy.html\">https://docs.rs/iced/latest/iced/widget/fn.lazy.html</a>. I'm curious how this could be implemented so that we could leverage the Roc <code>Hash</code> ability output for use w/ this widgets Rust <code>Hash</code> boundary.</p>",
        "id": 449389366,
        "sender_full_name": "tarkah",
        "timestamp": 1720210044
    },
    {
        "content": "<p>should be doable</p>",
        "id": 449399804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720214347
    },
    {
        "content": "<p>hashing is an interesting strategy for this…I wonder how it’s been working for Iced in practice!</p>",
        "id": 449399936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720214422
    },
    {
        "content": "<p>I'm assuming it's quite a naive implementation. Iced hasn't matured to the point where those optimizations have really been looked at. There's also no view diff that occurs before render. The good news is there's generally lots of overhead since it's Rust</p>",
        "id": 449406055,
        "sender_full_name": "tarkah",
        "timestamp": 1720218112
    },
    {
        "content": "<p>yeah this exact scenario is something that really worries me about using Elm Architecture in the absence of persistent data structures (which neither Rust nor Roc use)</p>",
        "id": 449408683,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720219589
    },
    {
        "content": "<p>because the super cheap reference equality check that Elm relies on to make lazy as fast as it is…only works with persistent data structures <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 449408721,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720219633
    },
    {
        "content": "<p>and lazy has been the key to fixing nearly every performance problem in every Elm application I’ve ever worked on</p>",
        "id": 449408760,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720219678
    },
    {
        "content": "<p>so lazy being significantly less effective is a concern…but hard to say what it would mean in practice without trying it in the real world!</p>",
        "id": 449408842,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720219731
    },
    {
        "content": "<p>which is why I was hoping Iced had some experience reports on this approach</p>",
        "id": 449408864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720219750
    },
    {
        "content": "<p>I maintain a few large iced applications and I've never had to reach for lazy. I've actually never used it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 449409272,
        "sender_full_name": "tarkah",
        "timestamp": 1720220076
    },
    {
        "content": "<p>I'm interested to know if you have seen the Xilem work, and what your thoughts are there. I don't really understand it, but have been interested to know if that will be a good fit.</p>",
        "id": 449415451,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720223712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619901\">tarkah</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Iced/near/449409272\">said</a>:</p>\n<blockquote>\n<p>I maintain a few large iced applications and I've never had to reach for lazy. I've actually never used it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>wow, very different from the situation in the browser!</p>",
        "id": 449420803,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720228341
    },
    {
        "content": "<p>I would not have guessed that</p>",
        "id": 449420811,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720228354
    },
    {
        "content": "<p>but that's really good to know!</p>",
        "id": 449420813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720228358
    },
    {
        "content": "<p>have you run into performance problems that you had to apply optimizations to fix?</p>",
        "id": 449420820,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720228376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> I'm aware of Xilem but haven't looked into it much yet.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Iced/near/449420820\">said</a>:</p>\n<blockquote>\n<p>have you run into performance problems that you had to apply optimizations to fix?</p>\n</blockquote>\n<p>Definitely with the scrollable widget. The current implementation doesn't virtualize the viewport, so layout can be very expensive if there's a lot of widgets outside the viewport. I've used both pagination and lazy loading techniques to get around this when there's lots of data. However hecrj is working on a List widget that'll mostly solve this.</p>\n<p>Outside of that just adding caching when necessary for costly computations during view, but this is rare. The canvas widget has a cache API since things can get costly when producing geometry.</p>\n<p>Text is probably the most expensive thing to layout, but with the move cosmic text and the Paragraph API which handles caching, it's been pretty good. For example in <a href=\"https://github.com/squidowl/halloy\">Halloy</a> we build a scrollable with up to 10k messages and still get reasonable performance in release mode. I use lazy loading here so we only hit 10k messages if someone scrolls for quite a while... lol</p>",
        "id": 449430745,
        "sender_full_name": "tarkah",
        "timestamp": 1720236571
    },
    {
        "content": "<p>I find this particularly exciting because the upcoming Cosmic desktop environment uses Iced, so Roc could be very well placed to write new native Cosmic apps :)</p>\n<p>I'll be trying roc-iced soon and if you want <span class=\"user-mention\" data-user-id=\"619901\">@tarkah</span> I can leave feedback on GitHub issues or in Zulip?</p>",
        "id": 449434744,
        "sender_full_name": "Hannes",
        "timestamp": 1720239061
    },
    {
        "content": "<p>That sounds great <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span>. Feel free to open issues on GH, though keep in mind it's very incomplete today. </p>\n<p>I'd love to achieve full coverage on the widget API including styling, but mapping everything and adding the glue is pretty slow going and I don't have tons of time to throw at this. Hopefully someone else familiar with roc and iced can help me chip away at it!</p>",
        "id": 449435002,
        "sender_full_name": "tarkah",
        "timestamp": 1720239311
    }
]