[
    {
        "content": "<p>I've wanted to do this for years and finally got around to doing it (after like 20 chatGPT prompts of non-working implementations <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) - this is a proof of concept for detecting stack overflows in any C program:</p>\n<p><a href=\"https://gist.github.com/rtfeldman/08649614547bdb29bdad35cd73e54104\">https://gist.github.com/rtfeldman/08649614547bdb29bdad35cd73e54104</a></p>\n<p>what's cool about this is that theoretically any Roc platform can use it to give nice error messages for stack overflows, just like a language with an interpreter can do (but without the overhead of an interpreter, of course)</p>",
        "id": 347279799,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680742965
    },
    {
        "content": "<p>Rust version, ported by chatGPT with mistakes manually fixed: <a href=\"https://gist.github.com/rtfeldman/00d5777c44bafeaf70b5589b5984e500\">https://gist.github.com/rtfeldman/00d5777c44bafeaf70b5589b5984e500</a></p>",
        "id": 347281000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680743671
    },
    {
        "content": "<p>for context, this is something that has to happen in the platform (specifically the host) because doing it requires setting up a signal handler, and if Roc did it automatically for every entrypoint, then not only would it be wasteful (setting up the same handler multiple times) but also it would risk stomping over an existing handler that the platform wanted to set up for other reasons - so the platform needs to be in control of (and the only implementer of) a handler to detect and gracefully report stack overflows</p>",
        "id": 347281423,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680743962
    },
    {
        "content": "<p>I wonder if you could just use standard stack canaries (from GCC or clang) or the zig stack probe as well. Don't really know the underlying details of those.</p>",
        "id": 347281775,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1680744220
    },
    {
        "content": "<p>one of the answers GPT-4 gave me at some point was supposedly a stack canary, and it didn't work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 347281868,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680744274
    },
    {
        "content": "<p>but maybe there's some way to get that to work</p>",
        "id": 347281874,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680744279
    },
    {
        "content": "<p>but yeah I don't know the details of any of those either</p>",
        "id": 347281885,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680744294
    },
    {
        "content": "<p>if someone is on Linux and/or Windows and could try running <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> to see if it works, that would be helpful!</p>",
        "id": 347281906,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680744311
    },
    {
        "content": "<p>basically there are some commented-out tests at the end of <code>main</code> which exercise various different segfaults; they should all get an explicit error message printed, and it should only say it was a stack overflow if it actually was a stack overflow</p>",
        "id": 347281949,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680744353
    },
    {
        "content": "<p>I would guess that roc would need to add a pass to LLVM to keep using stack canaries and the host would have to set it as well. Or something of that nature</p>",
        "id": 347282072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1680744417
    },
    {
        "content": "<p>there's also <a href=\"https://github.com/roc-lang/roc/issues/806\">https://github.com/roc-lang/roc/issues/806</a> to consider in the future</p>",
        "id": 347283607,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680745336
    }
]