[
    {
        "content": "<p><a href=\"/user_uploads/22008/AWVSvpTs41lI6c7v91QdTT1v/Screenshot-2022-12-23-at-5.10.06-AM.png\">image.ppm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/AWVSvpTs41lI6c7v91QdTT1v/Screenshot-2022-12-23-at-5.10.06-AM.png\" title=\"image.ppm.png\"><img src=\"/user_uploads/22008/AWVSvpTs41lI6c7v91QdTT1v/Screenshot-2022-12-23-at-5.10.06-AM.png\"></a></div><p>I implemented Perter Shirley's <a href=\"https://raytracing.github.io\">Ray Tracing in One Weekend</a> in Roc. This is the final image from the first book and the repo is at <a href=\"https://github.com/shritesh/raytrace.roc\">https://github.com/shritesh/raytrace.roc</a> </p>\n<ul>\n<li>Ray tracing is an embarrassingly parallel problem. So I created a platform in Rust that uses Rayon to call in parallel the <code>render</code> function implemented in Roc. It gave me a 10x speedup on my M1 Max. </li>\n<li>I needed a Random Number Generator. I initially tried to implement it as an effect in the Rust host but it <a href=\"#narrow/stream/231634-beginners/topic/convert.20list.20of.20task.20to.20task.20of.20list\">overflowed the stack</a>. So, I instead <a href=\"https://github.com/shritesh/raytrace.roc/blob/main/RNG.roc\">implemented a simple Linear congruential generator in Roc</a> and threaded it throughout the program. Backpassing makes the API really nice to use.</li>\n<li>The book uses two different object-oriented interfaces for Ray-Object intersection and Materials. I first started modeling the same with Abilities. It was a fun exercise and <a href=\"https://github.com/shritesh/raytrace.roc/commit/668f43c66f362f6755c6b2e62abbf46aa020c5f0#diff-743f633f133e1b93eb4d657ca00e42f99e5070a59405fb9ee16d2462035ced44\">I got far</a> but the codegen would panic once things got more complex. I switched over to simple tagged unions and I think it is a much better solution anyway.</li>\n<li>Currently I multisample 500 times per pixel and generate a final .ppm image file. I will soon modify the host to make the multisampling happen inside a GUI \"in real time\" and maybe even port this to wasm on the web. I also intend to implement an elm-style {init, update, render} platform to clean things up and make the platform reusable.</li>\n</ul>",
        "id": 317569062,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1671802737
    },
    {
        "content": "<p>Wow, super cool <span class=\"user-mention\" data-user-id=\"452038\">@Shritesh Bhattarai</span>! The image looks beautiful :)</p>",
        "id": 317570559,
        "sender_full_name": "Anton",
        "timestamp": 1671803173
    },
    {
        "content": "<p>yoooo this is amazing!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 317575431,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1671804743
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/h3BtGOUXkXmYwws0QeTIKZe0/Final-Loop.gif\">Final-Loop.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/h3BtGOUXkXmYwws0QeTIKZe0/Final-Loop.gif\" title=\"Final-Loop.gif\"><img src=\"/user_uploads/22008/h3BtGOUXkXmYwws0QeTIKZe0/Final-Loop.gif\"></a></div><p>I have now implemented an elm-style <code>{init, update, render}</code> platform. The init is called with the host provided <code>{width, height, x,y}</code> values for every pixel in parallel (using Rust's Rayon). Then the update and render functions are repeatedly called (again in parallel) to update the state and draw the screen. <a href=\"https://github.com/shritesh/raytrace.roc/blob/main/platform/main.roc\">https://github.com/shritesh/raytrace.roc/blob/main/platform/main.roc</a> </p>\n<p>I am calling this learning exercise \"complete\". It was really fun and helped me understand where Roc excels at and the current limitations. The clean separation of platform and application is a huge effing deal and changes the way you think about programming. I'm doubling down on Roc+Rust being my default stack of choice.</p>",
        "id": 317904925,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1672028410
    }
]