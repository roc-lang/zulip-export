[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> and I are excited to announce a new platform for making games with Roc!<br>\nThe platform creates games targeting the <a href=\"https://wasm4.org/\">WASM-4 fantasy console</a> (Thanks <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> for the idea).</p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-wasm4\">roc-wasm4</a> wraps all the pieces necessary to fully utilize wasm4 from roc.</p>\n<p>Current examples include:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/snake.roc\">Snake</a><br>\n<a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/snake.gif?raw=true\">snake.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/snake.gif?raw=true\" title=\"snake.gif\"><img src=\"https://uploads.zulipusercontent.net/82d2b683481c9ce9ef9550a3543606fcbefe8edb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6c756b6577696c6c69616d626f7377656c6c2f726f632d7761736d342f6d61696e2f6578616d706c65732f736e616b652e676966\"></a></div></li>\n<li>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/sound.roc\">A Sound Generator</a><br>\n<a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/sound.gif?raw=true\">sound.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/sound.gif?raw=true\" title=\"sound.gif\"><img src=\"https://uploads.zulipusercontent.net/d954ae2215f7028fa14e88aa235135a85308dffa/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6c756b6577696c6c69616d626f7377656c6c2f726f632d7761736d342f6d61696e2f6578616d706c65732f736f756e642e676966\"></a></div></li>\n</ul>\n<p>Please try it out and let us know what you think!<br>\nAll information needed to get started can be found in the <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/README.md\">README</a></p>",
        "id": 411865943,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704777410
    },
    {
        "content": "<p>Awesome!!</p>",
        "id": 411866665,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1704777991
    },
    {
        "content": "<p>Thanks Brendan and Luke for doing this! I was making such slow progress on my version of this platform because I was learning Zig and manual memory management at the same time as trying to build the platform <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Very excited to try making some games in Roc! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 411867517,
        "sender_full_name": "Hannes",
        "timestamp": 1704778728
    },
    {
        "content": "<p>Wow <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 411868432,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1704779518
    },
    {
        "content": "<p>Amazing</p>",
        "id": 411872133,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1704781030
    },
    {
        "content": "<p>This is so cool!</p>",
        "id": 411967023,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704816879
    },
    {
        "content": "<p>is it cool if I tweet about this from the roc_lang account? I'd like more people to know about it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 411983692,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704822274
    },
    {
        "content": "<p>We were planning to publish it more broadly after some people here play with it and we confirm there aren't any major issues, but probably fine to just share it.</p>",
        "id": 411985448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704822997
    },
    {
        "content": "<p>either way - I'm also ok waiting!</p>",
        "id": 411988826,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704824400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> I'm good either way, what's your pick?</p>",
        "id": 411989967,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704824856
    },
    {
        "content": "<p>I think sharing is good, I'm hoping we dont have  any major issues preventing people from using it... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but I guess we can just fix those.</p>",
        "id": 411992830,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704826037
    },
    {
        "content": "<p>Cool note for anyone interested:</p>\n<p>You can get hot reloading for any changes to the update function by setting up two terminals:</p>\n<ul>\n<li>Rebuild the app on roc file change: <code>find . -name \"*.roc\" | entr -cc zig build -Dapp=examples/snake.roc</code></li>\n<li>Run the app with hot reloading: <code>w4 run zig-out/lib/cart.wasm --hot</code></li>\n</ul>\n<p>Note, if you change the Model type, it will probably just crash due to trying to read the memory in an invalid way. But otherwise, it should mostly work. If it crashes, just press <code>R</code> for a fresh restart.</p>",
        "id": 412000128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704828995
    },
    {
        "content": "<p>I've also posted this to reddit on the <a href=\"https://www.reddit.com/r/roc_lang/comments/192xric/build_wasm4_games_using_roc_a_fast_friendly/?utm_source=share&amp;utm_medium=web2x&amp;context=3\">roc_lang</a> and <a href=\"https://www.reddit.com/r/functionalprogramming/comments/192xsg4/build_wasm4_games_using_roc_a_fast_friendly/?utm_source=share&amp;utm_medium=web2x&amp;context=3\">functionalprogramming</a> communities <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 412053508,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704855589
    },
    {
        "content": "<p>Extra note for anyone who tries roc-wasm4. Make sure to update your version of Roc. I had to add a few patches to Roc for this platform.</p>",
        "id": 412077622,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704869763
    },
    {
        "content": "<p>So awesome! Great example to learn wasm platform. Roc as the ultimate functional embedded DSL <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 412078791,
        "sender_full_name": "Steven Chen",
        "timestamp": 1704870348
    },
    {
        "content": "<p>This is really cool! </p>\n<p>However, I wonder if this approach is leaving a lot on the table performance-wise?</p>\n<p>I looked at the code and it seems that the platform calls the update function each frame, passing in the previous model and getting the next. I guess this is like The Elm Architecture running a cmd every frame. </p>\n<p>One of the things that excites me about Roc is that (in theory) it can optimize this pattern away , taking the frame update code from \"return a new state\" to \"update the state in-place\". </p>\n<p>This would give us the classic imperative game loop, but written functionally:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">update</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"n\">draw</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But this optimization cannot exist across the platform boundary?</p>\n<p>Very new to Roc so curious what people think.</p>",
        "id": 412630230,
        "sender_full_name": "njlr",
        "timestamp": 1705098653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> and I discussed briefly a few different ways to do this, he will be much more capable of answering this question than I. But I think we decided to implement the simple and easy thing first to have something working, and now that we have that we can explore further ways to improve performance and developer experience.</p>",
        "id": 412630782,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705098959
    },
    {
        "content": "<blockquote>\n<p>taking the frame update code from \"return a new state\" to \"update the state in-place\". </p>\n</blockquote>\n<p>Roc can't have any state. So this is not possible in Roc. Of course you could use an effect to save state to the host, but that is just this model with extra steps.</p>\n<p>In the future, if roc adds something like <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/.02klzzwxh.3A0000.03.20ability\">#ideas &gt; <code>Stored</code> ability</a>, it would then become possible to keep all of the state on the roc side. Though it would be saved and loaded through tasks. That said, roc understands the types fully, so probably could optimize that use case a bit more (and should avoid all boxing hopefully).</p>\n<blockquote>\n<p>passing in the previous model and getting the next</p>\n</blockquote>\n<p>This is just a single pointer being passed back and forth. So theoretically no real cost.</p>\n<blockquote>\n<p>However, I wonder if this approach is leaving a lot on the table performance-wise?</p>\n</blockquote>\n<p>For wasm4 were models are small, and allocations are a mostly linear array, probably not that much performance lost. For more complex use cases, probably a lot of performance lost.</p>\n<p>That said, all of the real loss is in our current handling of <code>Box</code>. As it stands today, each iteration will take the boxed model, copy it to the stack, free the box, build a new model on the stack, allocate a new box, copy the new model into the box.</p>\n<p>This has 2 core inefficiencies:</p>\n<ol>\n<li>extra allocations/deallocations and refcount changes.</li>\n<li>wasting time copying data to/from the stack</li>\n</ol>\n<p>What we really want is:</p>\n<ol>\n<li>reading directly from the box without needing to copy the entire struct out</li>\n<li>never changing the refcount of the box cause it will be reused</li>\n<li>writing back to the box at the end without allocating a new one.</li>\n</ol>\n<p>This would be the same flow as if we had just passed around a reference to a large struct and then updated it at the end. If we had a smarter compiler and a proper <code>Box.update</code> function, most of this loss should be mitigated.</p>\n<p><del>All that said, I think it should be possible to remove the boxing and allocate a single storage space for the model (actually may take 2 to be safe). Storage would still live on the host, but it could be in an alloca on the stack or allocated on the heap just once. I'll look into doing that to safe from a bit of the extra cost of box.</del> nvm, that isn't doable cause we don't know how the struct will be passed in. That depends on the exact struct implementation details. So have to box currently.</p>",
        "id": 412640085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705104325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Wasm4.20Game.20Platform/near/412640085\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>taking the frame update code from \"return a new state\" to \"update the state in-place\". </p>\n</blockquote>\n<p>Roc can't have any state. So this is not possible in Roc. Of course you could use an effect to save state to the host, but that is just this model with extra steps.</p>\n</blockquote>\n<p>hm, but we could pass the state from the host to/from Roc (in <code>update</code>) and then, if the refcount is 1, Roc could update it in place, right?</p>",
        "id": 412653488,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705110136
    },
    {
        "content": "<p>yeah, that is already what is being done.</p>",
        "id": 412654383,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705110611
    },
    {
        "content": "<p>Except that <code>Box</code> never updates in place currently</p>",
        "id": 412654420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705110632
    },
    {
        "content": "<p>Could the Roc platform have two effects available:</p>\n<ul>\n<li>Send render instructions to the outside world</li>\n<li>Get the time since the last render</li>\n</ul>\n<p>Then you would build a game-loop Task out of those and the Model would never cross the platform boundary?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">gameLoop</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">deltaTime</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">getTime</span>\n<span class=\"w\">        </span><span class=\"nv\">nextState</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">deltaTime</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">sendRenderInstructions</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">render</span><span class=\"w\"> </span><span class=\"nv\">nextState</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"nv\">gameLoop</span><span class=\"w\"> </span><span class=\"nv\">nextState</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">gameLoop</span><span class=\"w\"> </span><span class=\"nv\">initialState</span>\n</code></pre></div>\n<p>I don't know what do-notation looks like in Roc (if any?) so please forgive the syntax!</p>",
        "id": 412689059,
        "sender_full_name": "njlr",
        "timestamp": 1705135298
    },
    {
        "content": "<p>You would also need an effect to get the player input, right?</p>",
        "id": 412703100,
        "sender_full_name": "Hannes",
        "timestamp": 1705146221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Wasm4.20Game.20Platform/near/412703100\">said</a>:</p>\n<blockquote>\n<p>You would also need an effect to get the player input, right?</p>\n</blockquote>\n<p>Yes, and also for things like sound, but I was trying to simplify. <code>getTime</code> could be replaced by <code>getTimeAndInputs</code> for example, but the principle is the same.</p>",
        "id": 412706913,
        "sender_full_name": "njlr",
        "timestamp": 1705149299
    },
    {
        "content": "<p>So make roc an infinite closure.</p>",
        "id": 412723559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705164642
    },
    {
        "content": "<p>I think that could theoretically work with other platforms, but probably not wasm4</p>",
        "id": 412723591,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705164688
    },
    {
        "content": "<p>Wasm4 games don't even control their own execution in this manner</p>",
        "id": 412723655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705164756
    },
    {
        "content": "<p>They are split into an init and update function called by the wasm4 runtime</p>",
        "id": 412723670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705164776
    },
    {
        "content": "<p>And it is all single threaded, so no way for something else to run while roc is running</p>",
        "id": 412723748,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705164851
    },
    {
        "content": "<p>Though maybe there is some way to split up tasks to always capture the model. Probably would require switching to an effect interpreter model.</p>",
        "id": 412723896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705165035
    },
    {
        "content": "<p>Oh, also, wasm4 has no sense of time except a manually added frame count</p>",
        "id": 412723964,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705165096
    },
    {
        "content": "<p>Iâm having so much fun playing with this platform! Bravo <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412757692,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705190049
    },
    {
        "content": "<p>Thanks for letting us know, please let me know if you run into any issues <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  I would love it to be a really smooth experience, particularly for newcomers to the language</p>",
        "id": 412757783,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705190150
    },
    {
        "content": "<p>I just opened an <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/issues/12\">issue</a>; unused defs and imports are causing builds to fail for me</p>",
        "id": 412771914,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705198623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> and I talked about that briefly, without running <code>roc check</code> first zig build will gobble any warnings and errors and fail without explanation. Unfortunately <code>roc check</code> will return non-zero exit code for a warning. I think we might need to raise an idea thread to discuss changing that.</p>",
        "id": 412772167,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705198865
    },
    {
        "content": "<p>It is worse than that.</p>",
        "id": 412772178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705198890
    },
    {
        "content": "<p><code>roc build</code> will emit a non-zero exit code on any warning</p>",
        "id": 412772183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705198904
    },
    {
        "content": "<p>So zig will see that and assume it can't continue building</p>",
        "id": 412772201,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705198922
    },
    {
        "content": "<p>Also, I don't think zig build gobbles the <code>roc build</code> errors anymore. So we probably could remove <code>roc check</code> now if we wanted, but given it catches extra errors, I left it in.</p>",
        "id": 412772256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705198963
    },
    {
        "content": "<p>we need something like <code>roc build --ignoreWarnings</code> for this to work</p>",
        "id": 412772277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705198995
    },
    {
        "content": "<p>Ah gotcha</p>",
        "id": 412772386,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705199113
    },
    {
        "content": "<p>I started a related thread here <a href=\"#narrow/stream/304641-ideas/topic/Changing.20exit.20codes.20for.20roc.20build.20and.20check/near/412777236\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Changing.20exit.20codes.20for.20roc.20build.20and.20check/near/412777236</a></p>",
        "id": 412777275,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705203594
    },
    {
        "content": "<p>This isn't fully done, but since it is functional and I am hitting a compiler bug for the last part, thought I would post it:</p>\n<p><a href=\"https://bren077s.itch.io/rocci-bird\">Rocci Bird!!!</a></p>",
        "id": 413032137,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705354672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> dope animations!</p>",
        "id": 413034155,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1705355756
    },
    {
        "content": "<p>I can't claim any of them. I have a friend who loves to do pixel art and he made everything.</p>",
        "id": 413034878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705356162
    },
    {
        "content": "<p>this is so rad!!! <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span><span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span><span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span><span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span><span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 413042894,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705360626
    },
    {
        "content": "<p>Awesome! <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"> <span aria-label=\"bird\" class=\"emoji emoji-1f426\" role=\"img\" title=\"bird\">:bird:</span></p>",
        "id": 413043646,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705361066
    },
    {
        "content": "<p>Haha, there goes my first idea for a Roc game <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'll have to be more original when i actually start making games. Any chance you could release the Roc sprite for others to use, <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 413045620,
        "sender_full_name": "Hannes",
        "timestamp": 1705362326
    },
    {
        "content": "<p>ok my high score is 2^3, I'm satisfied with that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p><a href=\"/user_uploads/22008/wNeuB9RcGPftZ5wMifQmTzMe/Screenshot-2024-01-15-at-6.50.46-PM.png\">Screenshot-2024-01-15-at-6.50.46-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/wNeuB9RcGPftZ5wMifQmTzMe/Screenshot-2024-01-15-at-6.50.46-PM.png\" title=\"Screenshot-2024-01-15-at-6.50.46-PM.png\"><img src=\"/user_uploads/22008/wNeuB9RcGPftZ5wMifQmTzMe/Screenshot-2024-01-15-at-6.50.46-PM.png\"></a></div>",
        "id": 413046174,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705362667
    },
    {
        "content": "<blockquote>\n<p>Any chance you could release the Roc sprite for others to use</p>\n</blockquote>\n<p>For sure. They technically are already on github, but only in the code form. <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/8459de33dcf479b056432a24dd2dee0337c7dd5d/examples/rocci-bird.roc#L605-L639\">https://github.com/lukewilliamboswell/roc-wasm4/blob/8459de33dcf479b056432a24dd2dee0337c7dd5d/examples/rocci-bird.roc#L605-L639</a></p>",
        "id": 413052551,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705365373
    },
    {
        "content": "<p>Thanks, I'll extract them for whatever game I end up making :) Does your friend have a name and/or website that I could use to credit them?</p>",
        "id": 413072116,
        "sender_full_name": "Hannes",
        "timestamp": 1705375151
    },
    {
        "content": "<p>If you play rocci bird, when your bird crashes it shows the arists name, Art by Luke DeVault</p>",
        "id": 413072287,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705375267
    },
    {
        "content": "<p>Full version of the game with plants, better end screen, credits, more randomness, and memory corruption fixes is uploaded now. <a href=\"https://bren077s.itch.io/rocci-bird\">game</a> - <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/rocci-bird.roc\">source</a></p>\n<p>Feel free to use any of the source code including the sprite code.</p>\n<p>Hopefully the game is stable now and won't run out of memory or hit other perf issues. Went through a bit of a process fixing a major platform bug and cleaning up some of the code.</p>",
        "id": 413246404,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705442458
    },
    {
        "content": "<p>Oh also, if you are using the <code>roc-wasm4</code> platform, please pull the new code. Otherwise your game dev experience may get exceptionally frustrating as you deal with memory corruption.</p>",
        "id": 413248071,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705443149
    },
    {
        "content": "<p>This is very cool. It looks super great, Luke did a great job with that art! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 415377736,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705445236
    },
    {
        "content": "<p>Two notes anyone interested:</p>\n<ol>\n<li>The build script for Roc-Wasm4 is now nicer and will successfully build with warnings. (So pull the repo)</li>\n<li>rocci bird tracks your high score.</li>\n</ol>",
        "id": 416719563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705647777
    },
    {
        "content": "<p>Thanks for the warning part, it was a bit distracting!</p>",
        "id": 416719710,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1705647852
    },
    {
        "content": "<p>I made a drum machine using roc-wasm4 and it was a lot of fun! You can try it <a href=\"https://isaacvando.github.io/roc-drum-machine/\">here</a> or see the <a href=\"https://github.com/isaacvando/roc-drum-machine\">source</a>.</p>\n<p>It can make grooves like this <span aria-label=\"drum\" class=\"emoji emoji-1f941\" role=\"img\" title=\"drum\">:drum:</span> <br>\n<a href=\"/user_uploads/22008/fhuwdsRkV12crxwz7ODU2urk/roc-drum-machine.mov\">roc-drum-machine.mov</a></p>",
        "id": 417151173,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705893569
    },
    {
        "content": "<p>I have not been able to get the sound to play on a phone but it should work in a normal browser</p>",
        "id": 417151940,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705894195
    },
    {
        "content": "<p>Works on my Samsung S22 <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> - the sound that is</p>",
        "id": 417152028,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705894255
    },
    {
        "content": "<p>Great!</p>",
        "id": 417152709,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705894819
    },
    {
        "content": "<p>Do you try to balance channels at all to avoid overwriting sounds?</p>",
        "id": 417153300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705895309
    },
    {
        "content": "<p>No I don't balance them; I've found that in practice it works well as is. If you try to play all five sounds at once they don't all come through but that doesn't really matter for typical grooves</p>",
        "id": 417153626,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705895638
    },
    {
        "content": "<p>You can also kind of use the overwriting to your advantage sometimes to get new sounds</p>",
        "id": 417153719,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705895698
    },
    {
        "content": "<p>Fair</p>",
        "id": 417153729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705895708
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/dHn93cN21iaJatVOidfNjjyB/PXL_20240122_035601057.TS.mp4\">some_music.mp4</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/22008/dHn93cN21iaJatVOidfNjjyB/PXL_20240122_035601057.TS.mp4\" title=\"some_music.mp4\"><video preload=\"metadata\" src=\"/user_uploads/22008/dHn93cN21iaJatVOidfNjjyB/PXL_20240122_035601057.TS.mp4\"></video></a></div><p>From my wife</p>",
        "id": 417153822,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705895798
    },
    {
        "content": "<p>Love it!</p>",
        "id": 417153865,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705895851
    },
    {
        "content": "<p>this is awesome!!! is it cool if I share this from the roc_lang twitter account?</p>",
        "id": 417153941,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705895902
    },
    {
        "content": "<p>Nice, I'm not sure how the guys in my office feel about this game <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span></p>",
        "id": 417153950,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705895910
    },
    {
        "content": "<blockquote>\n<p>this is awesome!!! is it cool if I share this from the roc_lang twitter account?</p>\n</blockquote>\n<p>Yes sounds great!</p>",
        "id": 417154340,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705896129
    },
    {
        "content": "<p>And thanks <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 417154518,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1705896259
    },
    {
        "content": "<p>Ok, I made a maze with infinite levels (2 ^ 32 if to be more accurate) with simple generative melodies per level (beware of horrible sounds!)</p>\n<p>It's not the final version (I have a couple of ideas where to move), but you can check the current state here:</p>\n<p><a href=\"https://kirdzi.itch.io/just-a-maze?secret=H82wQhk3TOiFbu94vs46WaVS6ww\">https://kirdzi.itch.io/just-a-maze?secret=H82wQhk3TOiFbu94vs46WaVS6ww</a></p>\n<p>I think next week I'll clean up the source code and publish it on github</p>",
        "id": 418448005,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706391232
    },
    {
        "content": "<p>This looks nice, love the simplicity <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 418450482,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706393908
    },
    {
        "content": "<p>Are the levels seeded or are they the same on every single run?</p>",
        "id": 418451819,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706395294
    },
    {
        "content": "<p>All the same. It doesnât touch w4 random at all but uses the level id as the seed for xorshift</p>",
        "id": 418453475,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706396969
    },
    {
        "content": "<p>That's awesome!</p>",
        "id": 418471630,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1706416810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> once you have the source code published, I'd be happy to share it via the roc_lang twitter account if you're cool with that! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 418860561,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706627825
    },
    {
        "content": "<p>sure! let me just figure out how to refactor all my mess with the help of the state monad <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 418861035,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706627987
    },
    {
        "content": "<p>A <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/releases/tag/0.4\">new release for roc-wasm4</a> with a few fixes and cleanup so that the examples work with latest main, and also using the new <code>!</code> chaining syntax.  <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"></p>",
        "id": 434553441,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713668273
    }
]