[
    {
        "content": "<p>Quick port of the rust <a href=\"https://crates.io/crates/heck\">heck</a> crate to <a href=\"https://github.com/imclerran/roc-heck\">roc</a> - convert any string to various casings:</p>\n<ol>\n<li>UpperCamelCase / PascalCase</li>\n<li>lowerCamelCase</li>\n<li>snake_case / snek_case</li>\n<li>kebab-case</li>\n<li>SHOUTY_SNAKE_CASE / SHOUTY_SNEK_CASE</li>\n<li>Title Case</li>\n<li>SHOUTY-KEBAB-CASE</li>\n<li>Train-Case</li>\n</ol>",
        "id": 500508549,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739912052
    },
    {
        "content": "<p>Neat, I remember implementing something similar for roc-json with plans to roll it into the ascii package someday. It was definitely non-trivial, so will be nice to have a real package to do it.</p>",
        "id": 500513058,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739913712
    },
    {
        "content": "<p>Here's my version in case you're interested <a href=\"https://github.com/lukewilliamboswell/roc-json/blob/main/package/StringFormat.roc\">https://github.com/lukewilliamboswell/roc-json/blob/main/package/StringFormat.roc</a></p>",
        "id": 500513208,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739913759
    },
    {
        "content": "<p>Oh yeah… Of course you would have had to implement this for roc-json. I can't take credit for the implementation here, as I just ported from rust, but it’s a pretty minimal algorithm. All boils down to about a 40 line transform algorithm which accepts a function to transform a word, and a function to insert a divider.</p>",
        "id": 500520057,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739916507
    },
    {
        "content": "<p>I can probably clean up the roc implementation a little, but I kept it close to the rust code to begin with.</p>",
        "id": 500520189,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739916578
    }
]