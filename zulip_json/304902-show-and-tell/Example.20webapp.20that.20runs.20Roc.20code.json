[
    {
        "content": "<p>After writing the <a href=\"https://github.com/Hasnep/roc-turtle\">roc-turtle library</a>, I realised that it should be possible to take arbitrary Roc code that uses roc-turtle, compile it, run the executable and display the drawing to the user.</p>\n<p>So I wrote a small webapp that does exactly that, it's available here:</p>\n<p><a href=\"https://roc-turtle-editor.fly.dev/\">https://roc-turtle-editor.fly.dev/</a></p>\n<p><a href=\"/user_uploads/22008/z9wnakNjYL3YdZ8kHEydLZ_4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/z9wnakNjYL3YdZ8kHEydLZ_4/image.png\" title=\"image.png\"><img data-original-dimensions=\"1920x929\" src=\"/user_uploads/thumbnail/22008/z9wnakNjYL3YdZ8kHEydLZ_4/image.png/840x560.webp\"></a></div><p>Currently, I have a backend running on <a href=\"http://fly.io\">fly.io</a> which does the compilation, but I would like to switch to running the Roc compiler in wasm like the web-repl does. I believe Roc's managed effects should protect me from malicious input, but I have no idea how secure this is in practice. If there's something obviously insecure then please let me know, or just have fun trying to break it! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 485183709,
        "sender_full_name": "Hannes",
        "timestamp": 1732932884
    },
    {
        "content": "<p>It's a module instead of an application. Can you say more about how that works? Do you have an application on the backend that calls this module? What platform are you using, what effects does it have, and could a malicious module call one of those effects? Providing <code>main</code> to a wrapping application that you can't see seems a lot like the \"can I write a platform in Roc\" question that comes up all the time.</p>\n<p>From a security and developer experience perspective, would you rather have the user of this webapp define an application instead of a module? This is an interesting use case, and I wonder if this would be a reason to support defining a platform in Roc on top of another platform (old topic about this: <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/nested.20platforms.3F\">#ideas &gt; nested platforms?</a>)</p>",
        "id": 485488558,
        "sender_full_name": "Sky Rose",
        "timestamp": 1733065286
    },
    {
        "content": "<p>Yeah, the way it works is the server writes a <code>main.roc</code> file with an app header <a href=\"https://github.com/Hasnep/roc-turtle-editor/blob/cc74272b8f0158cc942a650b7bf5efbd2a20e1dc/src/roc_turtle_editor.gleam#L80C1-L80C190\">here</a> and that file imports the user's Roc script. I did that to avoid the clutter of the app header and so that the user couldn't just import whatever effects they wanted from the platform.</p>\n<p>The reason for <em>that</em> is that I was too lazy to make my own platform, so I just used basic-cli and only used <code>Stdout.line</code>. I agree that I'm basically making my own \"platform\" on top of the basic-cli platform, I probably should've just forked basic-cli and made my own stdout-only-platform <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 485527113,
        "sender_full_name": "Hannes",
        "timestamp": 1733099616
    },
    {
        "content": "<blockquote>\n<p>I probably should've just forked basic-cli and made my own stdout-only-platform</p>\n</blockquote>\n<p>I don't know, the way you did it seems pretty easy :)</p>",
        "id": 485585602,
        "sender_full_name": "Anton",
        "timestamp": 1733133665
    },
    {
        "content": "<p>If you really only need an Stdout.line, then you could use the templates from <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> . The <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-zig/\">zig</a>, <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">go</a> and <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust\">rust</a> templates, do exactly that.</p>",
        "id": 485590176,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733135106
    },
    {
        "content": "<p>Ooh, I think now we've figured out how to get emscripten working in roc-ray if we revisited the whole roc wasm playground thing we could have a platform using the gen-wasm backend that JIT compiles and runs something like this all in the client. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 485592842,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733135865
    },
    {
        "content": "<p>I had something working using WASI but couldn't find a good way to get that running in the browser.</p>",
        "id": 485593108,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733135942
    },
    {
        "content": "<p>Iâ€™d love to have something sorta like that one lovely Elm app that let you write and share Elm with others and it all ran in the browser except saving the file</p>",
        "id": 485734973,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733188102
    },
    {
        "content": "<p>Are you thinking of <a href=\"https://ellie-app.com/new\">Ellie</a>?</p>",
        "id": 485735342,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733188401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Example.20webapp.20that.20runs.20Roc.20code/near/485735342\">said</a>:</p>\n<blockquote>\n<p>Are you thinking of <a href=\"https://ellie-app.com/new\">Ellie</a>?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 485738097,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733190521
    },
    {
        "content": "<p>Loved that app</p>",
        "id": 485738135,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733190558
    }
]