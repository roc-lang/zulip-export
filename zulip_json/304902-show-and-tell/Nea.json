[
    {
        "content": "<p>the first non-trival roc + nea program just worked</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"nea-test\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"platform/main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"nv\">parseNum</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U32</span>\n<span class=\"nv\">parseNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"invalid input\"</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">xStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">yStr</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"nv\">parseNum</span><span class=\"w\"> </span><span class=\"nv\">xStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parseNum</span><span class=\"w\"> </span><span class=\"nv\">yStr</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"invalid input\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"s\">\"M 0 0 L\"</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">accum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"\\(accum)\\(Num.toStr x) \\(Num.toStr y) \"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">d</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">        &lt;svg width=\"</span><span class=\"mi\">100</span><span class=\"s\">\" height=\"</span><span class=\"mi\">100</span><span class=\"s\">\" xmlns=\"</span><span class=\"nv\">http</span><span class=\"nf\">://</span><span class=\"nv\">www</span><span class=\"nf\">.</span><span class=\"nv\">w3</span><span class=\"nf\">.</span><span class=\"nv\">org</span><span class=\"nf\">/</span><span class=\"mi\">2000</span><span class=\"nf\">/</span><span class=\"nv\">svg</span><span class=\"s\">\"&gt;</span>\n<span class=\"s\">          &lt;path d=\"</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">d</span><span class=\"p\">)</span><span class=\"s\">\" stroke=\"</span><span class=\"nv\">black</span><span class=\"s\">\" fill=\"</span><span class=\"nv\">transparent</span><span class=\"s\">\"/&gt;</span>\n<span class=\"s\">        &lt;/svg&gt;</span>\n<span class=\"s\">        \"\"\"</span>\n</code></pre></div>\n<p>still lots to do to make it fast and more stable, but this is very exciting</p>",
        "id": 404909736,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1701276796
    },
    {
        "content": "<p>Does it stand for \"never ever allocate\"</p>",
        "id": 404909925,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701276845
    },
    {
        "content": "<p>Oh I see \"NEver Allocate\"</p>",
        "id": 404909975,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701276866
    },
    {
        "content": "<p>yes that worked out. its origin is the frisian word for \"never\"</p>",
        "id": 404919455,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1701279781
    }
]