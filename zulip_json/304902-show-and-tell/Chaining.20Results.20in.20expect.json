[
    {
        "content": "<p>So I <a href=\"https://github.com/Subtlesplendor/roc-data/tree/main\">started implementing</a> some fun datatypes in Roc, for example <code>NonEmpty</code> which encodes a non-empty list. For this particular case I found myself writing <code>expect</code> statements that called several functions in a row that returned <code>Result</code>. I found this a bit awkward. I have for example the functions</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">fromList</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">NonEmpty</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">ListWasEmpty</span><span class=\"p\">]</span>\n<span class=\"nv\">get</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NonEmpty</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">OutOfBounds</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>And then I want to write a test that first creates a <code>NonEmpty</code> using <code>fromList</code>, to then test <code>get</code>. My first attempt was the standard chaining of <code>when</code> expressions:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 406148123,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701805800
    },
    {
        "content": "<p>But this feels kind of awkward. For all <code>Err</code> branches we are just returning <code>Bool.false</code>. If this was in just a regular function, I would probably use <code>Result.try</code> to keep going. But that is not a natural fit inside <code>expect</code> since we in the end want to return a <code>Bool</code>. It would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">        </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 406148480,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701805939
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">fromList</span>\n<span class=\"w\">    </span><span class=\"nx\">result</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">NonEmpty</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">NonEmpty</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nx\">Empty</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 406148529,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701805968
    },
    {
        "content": "<p>But then I got the idea that I could use an analogous function to continue chaining Results inside the expect. Not sure what to call it, for now I just call it <code>test</code>. So I defined</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">test</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span>\n<span class=\"nv\">test</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pred</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">pred</span>\n</code></pre></div>\n<p>And using <code>test</code> I can now write</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">test</span>\n<span class=\"w\">    </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">nonempty</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">test</span>\n<span class=\"w\">    </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 406148778,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701806081
    },
    {
        "content": "<p>Which I thought was kind of neat! Not sure if anyone else has use of that, but I wanted to share it because it was a nice use of backpassing that I had not realised was useful before.</p>",
        "id": 406149060,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701806205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Chaining.20Results.20in.20expect/near/406148529\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">fromList</span>\n<span class=\"w\">    </span><span class=\"nx\">result</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">NonEmpty</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">NonEmpty</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nx\">Empty</span><span class=\"p\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sorry I did not share my datatype, I am here modelling <code>NonEmpty</code> as </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">NonEmpty</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">body</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">tail</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 406149213,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701806282
    },
    {
        "content": "<p>And yes for calculations just featuring one <code>Result</code>, I can just write like you wrote there Brendan. The issue I was addressing was when you need to use the value from that result to further test something.</p>",
        "id": 406149710,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701806464
    },
    {
        "content": "<p>Ah, I see. Yeah, I would have simpler tests and for longer tests just unwrap cause the simpler tests should catch that.</p>\n<p>That or I would just use Result.try with backpassing as a more direct helper.</p>",
        "id": 406150936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701806924
    },
    {
        "content": "<p>Though maybe look at our list tests. They should hit this issue? Lots of results</p>",
        "id": 406150999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701806947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Chaining.20Results.20in.20expect/near/406150936\">said</a>:</p>\n<blockquote>\n<p>Ah, I see. Yeah, I would have simpler tests and for longer tests just unwrap cause the simpler tests should catch that.</p>\n<p>That or I would just use Result.try with backpassing as a more direct helper.</p>\n</blockquote>\n<p>Hmm Yes it might be that this is the right approach. It is of course good to write very simple unit tests to test individual functions very clearly. I guess what I am trying to write might be more complicated than necessary</p>",
        "id": 406152244,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701807470
    },
    {
        "content": "<p>your example with the <code>test</code> function could instead be:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nx\">nonempty</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">fromList</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">        </span><span class=\"nx\">nonempty</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 406152467,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701807557
    },
    {
        "content": "<p>That is true, and is not too bad at all, thanks!</p>",
        "id": 406153224,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701807855
    },
    {
        "content": "<p>I would use <code>Result.try</code> and <code>Result.map</code> (with backpassing or piping). For the predicate, if it's a simple comparison then comparing to <code>Ok value</code> should be fine, but you can also do <code>|&gt; Result.map pred |&gt; Result.withDefault Bool.False</code>.<br>\nFor example, <code>test</code> could be rewritten to</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n</code></pre></div>",
        "id": 406159115,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701810332
    }
]