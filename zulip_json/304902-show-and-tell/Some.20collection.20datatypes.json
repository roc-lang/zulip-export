[
    {
        "content": "<p>I implemented some collection datatypes, as opaque types, available in a package here: <a href=\"https://github.com/Subtlesplendor/roc-data/tree/v0.0.1-gamma\">roc-data</a>. With docs here: <a href=\"https://subtlesplendor.github.io/roc-data/\">roc-data-docs</a></p>\n<p>So far I have implemented Stack, Queue, NonEmptyList, and Bag.</p>\n<p>I am curious to learn wether people find these useful. Also I welcome any feedback, e.g. regarding performance or usability <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 410741810,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704131465
    },
    {
        "content": "<p>Cool stuff <span class=\"user-mention\" data-user-id=\"595873\">@Johan Lövgren</span>!</p>",
        "id": 410742199,
        "sender_full_name": "Anton",
        "timestamp": 1704131887
    },
    {
        "content": "<p>This would be cool to add to the <a href=\"https://github.com/lukewilliamboswell/roc-awesome\">roc-awesome repo</a> :)</p>",
        "id": 410742242,
        "sender_full_name": "Anton",
        "timestamp": 1704131963
    },
    {
        "content": "<blockquote>\n<p>Also I welcome any feedback, e.g. regarding performance or usability</p>\n</blockquote>\n<p>I noticed the docs for  Stack, Queue, NonEmptyList all start with an explanation of the data structure but there is none for Bag. The Bag source file does have it so perhaps the docs site is not completely up to date?</p>",
        "id": 410742524,
        "sender_full_name": "Anton",
        "timestamp": 1704132152
    },
    {
        "content": "<p>I would expect most of those data structures to work quite well at first glance.</p>\n<p>That said, I definitely would expect queue to hit perf issues. Building a queue off of a list means that popping an item has a linear time complexity.</p>",
        "id": 410742754,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704132315
    },
    {
        "content": "<p>In the case of Roc, I think it is more complex than that. I believe that will current Roc, popping off the beginning of a list will lead to creating a seamless slice. This will be fast. In fact, many pops in a row will be fast instead of linear time. That said, linear time will catch up with us the moment we push a new item. At that point, the list will be duplicated to a new allocation (linear copy) so that a new element can be appended. So roc might actually have a better amortized cost depending on the use case, but still not great for perf as the queue gets large.</p>\n<p>EDIT: extra note, long term, roc should be able to reuse the allocation here, but it would still be a linear shift every time you switch from popping to pushing.</p>",
        "id": 410742928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704132489
    },
    {
        "content": "<p>A better solution in a language like roc would probably be to make the queue out of two lists (head and tail).</p>\n<p>When you push to the queue, you append to the tail list. This is fast.</p>\n<p>When you pop from the queue, if there is data in head, you simply pop the last element off of head. This is also fast.<br>\nIf there is no data in head, you set head to the reverse of tail (this is linear cost, but much much rarer with large queues, pays once for all elements currently in the queue) and clear tail at the same time. Then you pop the last element off of head.</p>",
        "id": 410743090,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704132694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Some.20collection.20datatypes/near/410742524\">said</a>:</p>\n<blockquote>\n<p>I noticed the docs for  Stack, Queue, NonEmptyList all start with an explanation of the data structure but there is none for Bag. The Bag source file does have it so perhaps the docs site is not completely up to date?</p>\n</blockquote>\n<p>Ah I see. Either that or I messed up the formatting on the doc comments. Will look into it.</p>",
        "id": 410743553,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704133184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Some.20collection.20datatypes/near/410743090\">said</a>:</p>\n<blockquote>\n<p>A better solution in a language like roc would probably be to make the queue out of two lists (head and tail).</p>\n<p>When you push to the queue, you append to the tail list. This is fast.</p>\n<p>When you pop from the queue, if there is data in head, you simply pop the last element off of head. This is also fast.<br>\nIf there is no data in head, you set head to the reverse of tail (this is linear cost, but much much rarer with large queues, pays once for all elements currently in the queue) and clear tail at the same time. Then you pop the last element off of head.</p>\n</blockquote>\n<p>Ah yes that is a cool idea. I will make some notes about this and think about it some more. Like you say, it might depend a bit on the use case. If one has a large queue with frequent pops and pushes, then your suggestion should be much better, yes</p>",
        "id": 410743852,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704133514
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"595873\">@Johan Lövgren</span> </p>\n<p>Added to <a href=\"https://github.com/lukewilliamboswell/roc-awesome\">roc-awesome</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"></p>",
        "id": 410824793,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704191034
    },
    {
        "content": "<p>Thanks Luke!</p>",
        "id": 410826861,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704192091
    }
]