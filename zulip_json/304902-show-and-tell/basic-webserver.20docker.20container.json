[
    {
        "content": "<p>If anyone is interested in running basic-webserver in a docker container. I've managed to get the following working using my apple silicon machine. I'm definitely no docker expert, but fumbled through some guides to get this working.</p>\n<p>Sharing as other may find this useful, or have suggestions on how I could improve this.</p>\n<div class=\"codehilite\"><pre><span></span><code># Dockerfile\n\n# Builder state using the roclang/nightly-ubuntu-latest image\nFROM roclang/nightly-debian-bookworm as builder\n\n# Copy the source code\nCOPY ./main.roc /src/main.roc\n\n# Build the roc app\nRUN [&quot;roc&quot;, &quot;build&quot;, &quot;/src/main.roc&quot;]\n\n# Check if the binary is present\nRUN [&quot;ls&quot;, &quot;/src/main&quot;]\n\n# Use a smaller image for running the app\nFROM bitnami/minideb:bookworm as final\n\n# Copy the binary from the builder container\nCOPY --from=builder /src/main .\n\n# Run the app binary\nCMD [&quot;./main&quot;]\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"c1\"># This script is used to build and run the server locally using Docker for</span>\n<span class=\"c1\"># testing purposes prior to pushing to a Container Registry</span>\n\n<span class=\"c1\"># Load environment variables from the .env file</span>\n<span class=\"nb\">set</span><span class=\"w\"> </span>-a\n<span class=\"nb\">source</span><span class=\"w\"> </span>.env\n<span class=\"nb\">set</span><span class=\"w\"> </span>+a\n\n<span class=\"c1\"># Read the version from the command line argument or default to \"dev\"</span>\n<span class=\"nv\">version</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">1</span><span class=\"k\">:-</span><span class=\"nv\">dev</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"c1\"># Build docker image for deployment</span>\ndocker<span class=\"w\"> </span>buildx<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--build-arg<span class=\"w\"> </span><span class=\"nv\">VERSION</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$version</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-f<span class=\"w\"> </span>Dockerfile<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--platform<span class=\"w\"> </span>linux/amd64<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--tag<span class=\"w\"> </span><span class=\"s2\">\"server:</span><span class=\"nv\">$version</span><span class=\"s2\">\"</span><span class=\"w\"> </span>.\n\n<span class=\"c1\"># Run the docker image to test locally</span>\ndocker<span class=\"w\"> </span>run<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--rm<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--platform<span class=\"w\"> </span>linux/amd64<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-p<span class=\"w\"> </span><span class=\"m\">9090</span>:9090<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--env<span class=\"w\"> </span><span class=\"nv\">ROC_BASIC_WEBSERVER_HOST</span><span class=\"o\">=</span><span class=\"m\">0</span>.0.0.0<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--env<span class=\"w\"> </span><span class=\"nv\">ROC_BASIC_WEBSERVER_PORT</span><span class=\"o\">=</span><span class=\"m\">9090</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>server:<span class=\"nv\">$version</span>\n</code></pre></div>",
        "id": 440962511,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1716870564
    },
    {
        "content": "<p>The final container size is <code>128MB</code>, while the binary is only <code>7MB</code>.  I'd love to get that smaller if possible, but the <code>bitnami/minideb:bookworm</code> is the smallest container I've found that works. From my investigation I think we need glibc and so can't use the alpine containers which are built with musl.</p>",
        "id": 440963095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1716871122
    },
    {
        "content": "<p>I think in the base <a href=\"https://hub.docker.com/u/roclang\">roclang</a> containers, we could do something like the following (i.e., adding the last 2 lines for cleanup):</p>\n<div class=\"codehilite\" data-code-language=\"Docker\"><pre><span></span><code>...\n<span class=\"k\">RUN</span><span class=\"w\"> </span>apt-get<span class=\"w\"> </span>update<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>apt-get<span class=\"w\"> </span>install<span class=\"w\"> </span>-y<span class=\"w\"> </span>package1<span class=\"w\"> </span>package2<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>apt-get<span class=\"w\"> </span>clean<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>rm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>/var/lib/apt/lists/*\n</code></pre></div>\n<p>I've used this simple trick before and it has been effective in my use-cases.</p>",
        "id": 440999927,
        "sender_full_name": "Hristo",
        "timestamp": 1716888611
    },
    {
        "content": "<p>Would it be possible for roc to build a static binary? Then the second/final docker stage could be <code>FROM scratch</code> and would contain nothing else.</p>",
        "id": 441002206,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1716889348
    },
    {
        "content": "<p>I think this is possible, though I'm not sure how practical for basic-webserver. Needs investigation to see what system libraries may be required. I hope we could know this at compile time. </p>\n<p>I'd be interested to know if <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> has thought about these ideas for nea?</p>",
        "id": 441013788,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1716893920
    },
    {
        "content": "<p>for nea I think this should be fine. libc should be available and just behave the same, there should be no other dependencies at runtime</p>\n<p>In general I think databases are usually loaded as dynamic libraries? though in the rust ecosystem, maybe not and you can compile them in statically?</p>",
        "id": 441016771,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1716895057
    },
    {
        "content": "<p>I haven't had a look in detail, but ziglibc might be potentially of interest:</p>\n<ul>\n<li><a href=\"https://github.com/marler8997/ziglibc\">https://github.com/marler8997/ziglibc</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1N85yU6RMcY\">https://www.youtube.com/watch?v=1N85yU6RMcY</a><div class=\"youtube-video message_inline_image\"><a data-id=\"1N85yU6RMcY\" href=\"https://www.youtube.com/watch?v=1N85yU6RMcY\"><img src=\"https://uploads.zulipusercontent.net/2e8c9239928f241d8bfd6ca0011480ac10620e83/68747470733a2f2f692e7974696d672e636f6d2f76692f314e3835795536524d63592f64656661756c742e6a7067\"></a></div></li>\n</ul>",
        "id": 441292667,
        "sender_full_name": "Hristo",
        "timestamp": 1717006966
    },
    {
        "content": "<p>on linux musl should do roughly the same thing. but I'm not sure that really matters, but if it does we have options</p>",
        "id": 441292856,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1717007041
    }
]