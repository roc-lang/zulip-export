[
    {
        "content": "<p>I've just packaged up the Html module created by <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span>, here's the <a href=\"https://github.com/Hasnep/roc-html\">repo</a> and the <a href=\"https://hasnep.github.io/roc-html/\">docs</a>, and here's an example app:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;html-example&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.3.1/97mY3sUwo433-pcnEQUlMhn-sWiIf_J9bPhcAFZoqY4.tar.br&quot;,\n        html: &quot;https://github.com/Hasnep/roc-html/releases/download/v0.1.0/BIQytwqKV_7C1cK1outBaik7Kn5EQpSE4mAAaH6g8Vw.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n        html.Html,\n        html.Attribute,\n    ]\n    provides [main] to pf\n\nmain =\n    page = Html.html [] [\n        Html.body [] [\n            Html.h1 [] [Html.text &quot;Roc&quot;],\n            Html.p [] [\n                Html.text &quot;You should really check out &quot;,\n                Html.a [Attribute.href &quot;https://roc-lang.org/&quot;] [Html.text &quot;Roc&quot;],\n                Html.text &quot;!&quot;,\n            ],\n        ],\n    ]\n    Stdout.line (Html.render page)\n</code></pre></div>\n<p>which outputs this string:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Roc&lt;/h1&gt;&lt;p&gt;You should really check out &lt;a href=&quot;https://roc-lang.org/&quot;&gt;Roc&lt;/a&gt;!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre></div>",
        "id": 362325787,
        "sender_full_name": "Hannes",
        "timestamp": 1685495480
    },
    {
        "content": "<p>Love the docs generation too. I'm going to try and do the same for Json package.</p>",
        "id": 362341083,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1685507187
    },
    {
        "content": "<p>Here's <a href=\"https://github.com/Hasnep/roc-html/blob/main/.github/workflows/generate-docs.yaml\">the workflow</a> that generates and deploys the docs to github pages, you just need to go into the repo's settings and choose \"deploy github pages from action\"</p>",
        "id": 362343279,
        "sender_full_name": "Hannes",
        "timestamp": 1685508678
    },
    {
        "content": "<p>Cool, nice to see it as a package!</p>",
        "id": 362360607,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1685515954
    },
    {
        "content": "<p>I noticed that it seems like roc-html doesn't escape text, which could lead to cross site scripting (XSS) vulnerabilities if someone used user input. For example, this test fails:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    userInput = &quot;&lt;script&gt;alert(&#39;do something bad here&#39;)&lt;/script&gt;&quot;\n    exampleDocument = html [] [body [] [p [(attribute &quot;example&quot;) &quot;test&quot;] [text userInput]]]\n    out = render exampleDocument\n    out != &quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;p example=\\&quot;test\\&quot;&gt;&lt;script&gt;alert(&#39;do something bad here&#39;)&lt;/script&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> Would you be open to a PR to make it escape text and attribute values?</p>",
        "id": 362565388,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1685565055
    },
    {
        "content": "<p>Is that something that should be handled by the user of this library? I imagine the tradeoff is performance? We could look at how Elm does it for inspiration? Do you know <span class=\"user-mention\" data-user-id=\"511136\">@Ajai Nelson</span> if this functionality is common for this kind of library?</p>",
        "id": 362584309,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1685571370
    },
    {
        "content": "<p>Yeah, I think it’s common practice for libraries like this and template engines to escape tags in text nodes. I don’t think I have ever used one that doesn’t.</p>",
        "id": 362585340,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1685571783
    },
    {
        "content": "<p>As far as I know, this functionality is extremely common for this kind of library. Elm might not have to deal with it directly because it’s on the client side, and most DOM methods do the escaping for you. And I think most libraries still provide an escape hatch (no pun intended) if you don’t don’t want to escape something, so we could do that.</p>",
        "id": 362585678,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1685571906
    },
    {
        "content": "<p>Actually, Elm does escape html in text nodes and bunch of other places</p>",
        "id": 362586073,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1685572032
    },
    {
        "content": "<p>It has to because it’s super common to show content that’s provided by a different user’s input.</p>",
        "id": 362586400,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1685572133
    },
    {
        "content": "<p>It doesn’t necessarily have to do that itself directly because there are browser APIs that escape HTML automatically. I know some JS libraries do some escaping manually at compile time for performance reasons, but I’m under the impression that they usually rely on the browser APIs. It’s still safe either way.</p>",
        "id": 362587334,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1685572467
    },
    {
        "content": "<p>Anyway, that’s not relevant for server-side rendering in Roc because we’re not in the browser, so I think we should definitely do the escaping</p>",
        "id": 362587622,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1685572572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511136\">Ajai Nelson</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Html/near/362587334\">said</a>:</p>\n<blockquote>\n<p>It doesn’t necessarily have to do that itself directly because there are browser APIs that escape HTML automatically. I know some JS libraries do some escaping manually at compile time for performance reasons, but I’m under the impression that they usually rely on the browser APIs. It’s still safe either way.</p>\n</blockquote>\n<p>Yeah, but to keep purity Elm also has to go further than what those APIs can do by preventing <code>&lt;script&gt;</code> tags, <code>javascript:</code> URLs, and event handlers attributes when you're generating HTML. This is especially important for the security of the package ecosystem. <a href=\"https://jfmengels.net/virtual-dom-security-patch/\">This article</a> has information on the topic.</p>",
        "id": 362588253,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1685572806
    },
    {
        "content": "<p>Oh, I see, that makes sense</p>",
        "id": 362588680,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1685572963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511136\">Ajai Nelson</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Html/near/362587622\">said</a>:</p>\n<blockquote>\n<p>Anyway, that’s not relevant for server-side rendering in Roc because we’re not in the browser, so I think we should definitely do the escaping</p>\n</blockquote>\n<p>Agreed. I can see why this wasn't needed for static site generation in cases where you control the input, but I think that case is quite rare actually.</p>",
        "id": 362589118,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1685573156
    },
    {
        "content": "<p>And even in that case, it’s nice not to have to escape <code>&lt;</code>s and stuff manually</p>",
        "id": 362589706,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1685573395
    },
    {
        "content": "<p>yeah it's definitely best practice for server-side HTML rendering to escape it <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 362595042,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685576124
    },
    {
        "content": "<p>I wonder if you could get chatGPT to translate <a href=\"https://github.com/OWASP/java-html-sanitizer\">https://github.com/OWASP/java-html-sanitizer</a> to roc</p>",
        "id": 362595162,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685576184
    },
    {
        "content": "<p>I think sanitization might be a lot more complicated than we need right now for text nodes. If I understand right, sanitization assumes that you <em>want</em> to display HTML written by the user, so it renders that HTML safely by removing unsafe elements and attributes and stuff. Escaping just means making sure it renders as text instead of HTML. (See <a href=\"https://web.dev/sanitizer/#the-difference-between-escaping-and-sanitizing\">https://web.dev/sanitizer/#the-difference-between-escaping-and-sanitizing</a>.)</p>\n<div class=\"codehilite\"><pre><span></span><code>sanitize(&#39;&lt;em&gt;hello world&lt;/em&gt;&lt;img src=&quot;&quot; onerror=alert(0)&gt;&#39;) == &#39;&lt;em&gt;hello world&lt;/em&gt;&lt;img src=&quot;&quot;&gt;&#39;\nescape(&#39;&lt;em&gt;hello world&lt;/em&gt;&lt;img src=&quot;&quot; onerror=alert(0)&gt;&#39;) == &#39;&amp;lt;em&amp;gt;hello world&amp;lt;/em&amp;gt;&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;&#39;\n</code></pre></div>\n<p>I think escaping is what we want most of the time anyway for text nodes, and it's much simpler, safer, and presumably faster. I've been reading about escaping today and looking at web frameworks in a few different languages. It seems like all escaping requires is:</p>\n<ul>\n<li>Replace all <code>'</code>s with <code>&amp;#39;</code></li>\n<li>Replace all <code>&amp;</code>s with <code>&amp;amp;</code></li>\n<li>Replace all <code>\"</code>s with <code>&amp;quot;</code></li>\n<li>Replace all <code>&lt;</code>s with <code>&amp;lt;</code></li>\n<li>Replace all <code>&gt;</code>s with <code>&amp;gt;</code></li>\n</ul>\n<p>The same procedure works for both text nodes and attribute values. The only footgun I've found is that this replacement needs to be done with codepoints, not graphemes. The string <code>something؀&lt;h1&gt;͏bad؀&lt;/h1&gt;͏something</code> contains the codepoint for <code>&lt;</code>, but it doesn't include <code>&lt;</code> as a grapheme because it's combined with a combining character. The browser still considers that string to have an HTML tag, so it's presumably important to do the replacement at the codepoint level. (Due to the way UTF-8 works, the bytes for <code>'</code>, <code>&amp;</code>, <code>\"</code>, <code>&lt;</code>, and <code>&gt;</code> can never appear as a byte inside a larger codepoint, so just looking at the byte level works too.)</p>\n<p>I think I have the escaping working in roc-html, and I created an opaque type <code>SafeStr</code> to make it harder to mess up. I can submit a PR soon if people think that's a good idea.</p>",
        "id": 362601623,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1685580271
    },
    {
        "content": "<p>makes sense!</p>",
        "id": 362611834,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685586191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511136\">Ajai Nelson</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Html/near/362601623\">said</a>:</p>\n<blockquote>\n<p>I think I have the escaping working in roc-html, and I created an opaque type <code>SafeStr</code> to make it harder to mess up. I can submit a PR soon if people think that's a good idea.</p>\n</blockquote>\n<p>Sounds great! One of the reasons I wanted to package it up was so that it could get PRs like this :)</p>",
        "id": 362651270,
        "sender_full_name": "Hannes",
        "timestamp": 1685604128
    },
    {
        "content": "<p>Just released <a href=\"https://github.com/Hasnep/roc-html/releases/tag/v0.2.0\">v0.2.0</a>, thanks <span class=\"user-mention\" data-user-id=\"511136\">@Ajai Nelson</span>! Here's an example app:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;html-example&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.3.1/97mY3sUwo433-pcnEQUlMhn-sWiIf_J9bPhcAFZoqY4.tar.br&quot;,\n        html: &quot;https://github.com/Hasnep/roc-html/releases/download/v0.2.0/5fqQTpMYIZkigkDa2rfTc92wt-P_lsa76JVXb8Qb3ms.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n        html.Html,\n    ]\n    provides [main] to pf\n\nmain =\n    Html.html [] [\n        Html.body [] [\n            Html.h1 [] [Html.text &quot;Epic Hacking Website&quot;],\n            Html.p [] [\n                Html.text &quot;Here&#39;s some sneaky JavaScript code to hack your computer:&quot;,\n                Html.text &quot;&lt;script&gt;alert(&#39;You have been hacked!&#39;)&lt;/script&gt;&quot;,\n            ],\n        ],\n    ]\n    |&gt; Html.render\n    |&gt; Stdout.line\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Epic Hacking Website&lt;/h1&gt;\n    &lt;p&gt;\n      Here&amp;#39;s some sneaky JavaScript\n      code to hack your computer:&amp;lt;script&amp;gt;alert(&amp;#39;You have been\n      hacked!&amp;#39;)&amp;lt;/script&amp;gt;\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></div>",
        "id": 363595514,
        "sender_full_name": "Hannes",
        "timestamp": 1685932303
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> . Maybe this is a silly question, but is roc-html targeted only at generating html strings or do you support (or plan to) the usage of for DOM nodes as well, if roc wants to do things similar to what Elm does?</p>",
        "id": 364029658,
        "sender_full_name": "Éber Freitas Dias",
        "timestamp": 1686063648
    },
    {
        "content": "<p>I can answer that! I wrote the code that became roc-html.</p>\n<p>A virtual dom, like elm has, is a much much bigger job than the static HTML library. I started working on it last year but the recursive data structures triggered some compiler bugs, so I put it on hold.</p>\n<p>I think most of the bugs are fixed now. But as far as I know the code still doesn't run. I am working on other projects at the moment.</p>\n<p>So it may get picked up again at some point but it's not being actively worked on.</p>",
        "id": 364123708,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1686089212
    },
    {
        "content": "<p>I've just released roc-html <a href=\"https://github.com/Hasnep/roc-html/releases/tag/v0.7.0\">v0.7.0</a> which supports Roc v0.0.0-alpha2. Thanks <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> :)</p>",
        "id": 498992929,
        "sender_full_name": "Hannes",
        "timestamp": 1739275362
    },
    {
        "content": "<p>LoL I literally needed this yesterday so cloned it and changed locally. Thanks for the update!</p>",
        "id": 498995092,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1739276033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> Does roc-html only use the parenthesis function calls now that it's using Roc v0.0.0-alpha2? Asking for an elm-html fan who could still live with parens &lt;3</p>",
        "id": 506542764,
        "sender_full_name": "Drew Lazzeri",
        "timestamp": 1742319828
    },
    {
        "content": "<p>Both styles still work right now</p>",
        "id": 506549235,
        "sender_full_name": "Anton",
        "timestamp": 1742321707
    }
]