[
    {
        "content": "<p>Hi, wanted to share my first proper Roc project, a WIP datetime library. The internals are based on Rust's chrono crate, but I would like to make the API more idiomatic for Roc. I was planning to look at Elm's datetimes library for inspiration, but if anyone has any other suggestions I'd appreciate it.</p>\n<p>Here's a link to <a href=\"https://github.com/hasnep/roc-datetimes\">the repo</a>, and here's a link to <a href=\"https://hasnep.github.io/roc-datetimes\">the docs</a>.</p>",
        "id": 354792394,
        "sender_full_name": "Hannes",
        "timestamp": 1682917941
    },
    {
        "content": "<p>For example, with the <code>Duration</code> interface I wrote a bunch of functions for converting from numbers of seconds/minutes/hours, etc, but I was wondering if a more idiomatic Roc interface would use tags, e.g. instead of <code>Duration.fromSeconds 5</code> a better function would be something like <code>Duration.fromNumber (Seconds 5)</code>? I've not used a language with tags like Roc before, so I'm looking for more experienced opinions :) Thanks!</p>",
        "id": 354793563,
        "sender_full_name": "Hannes",
        "timestamp": 1682918931
    },
    {
        "content": "<p>You might just define <code>Duration</code> as an open tag. Then when needed convert to the underlying type that is more similar to rusts Chrono. So an end user would most interact with <code>Seconds 5</code> or similar. Then when needed, it would use the exact Chrono type. Though that is obviously limiting on expression, so maybe it isn't reasonable.</p>\n<p>Also, if you go with the tag approach, i would probably just do <code>Duration.from (Seconds 5)</code></p>",
        "id": 354798643,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682921253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Datetimes/near/354798643\">said</a>:</p>\n<blockquote>\n<p>Also, if you go with the tag approach, i would probably just do <code>Duration.from (Seconds 5)</code></p>\n</blockquote>\n<p>Ah, thank you, I was trying to think of a good name for the function, but couldn't! I'll probably try a few different ideas at the same time and then settle on one consistent API, I like the use of tags because they can be zero cost <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 354821823,
        "sender_full_name": "Hannes",
        "timestamp": 1682931812
    },
    {
        "content": "<p>If it was <code>Duration.from Seconds 5</code>  (number is now an argument to <code>from</code> instead of the tag), you could use the same tag for a <code>Duration.to Seconds</code> function.</p>",
        "id": 354881082,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1682948745
    },
    {
        "content": "<p>but I think you don't want to make <code>Duration</code> open in that case, for your own convenience</p>",
        "id": 354881670,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1682948930
    },
    {
        "content": "<p>That is probably a better way to do things. I was looking at the impl of <code>Duration</code>, and I don't think you would actually want it to be an open tag.</p>\n<p>Though I would switch the arg order: <code>Duration.from 5 Seconds</code>. Then it reads better and you can do something like: <code>someCalcOfSeconds |&gt; Duration.from Seconds</code></p>",
        "id": 354890838,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682951160
    },
    {
        "content": "<p>very cool, this is awesome to see! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 354929174,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682960927
    },
    {
        "content": "<p>some things I love about <code>elm/time</code>'s design that I think are good ideas to replicate:</p>\n<ul>\n<li>UTC is an unambiguous way to represent a time, so it's a good default way to represent \"this exact point in time\" - <code>elm/time</code> has a <code>Posix</code> type for this, but personally I like the name <code>Utc</code> better</li>\n<li>many non-UTC representations of time are very error-prone because they hide implicit assumptions about things like time zones - e.g. \"May 4, 2023 at 10am\" - what time zone are we talking about there? I personally kind of like the idea of having a separate concept of \"calendar time\" (e.g. maybe a <code>Calendar</code> module might be worth exploring?) and you can only convert between Calendar Time and UTC Time by specifying a specific time zone</li>\n<li>\"UTC offsets\" are and have always been a horrendously bad idea and should never have been used, or ever be used, for any reason, ever. <code>elm/time</code> doesn't come out and say it this way, but I will. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> (as far as I can tell, their primary use case is to specify incorrect approximations of time zones for the purpose of causing bugs around edge cases like Daylight Saving Time)</li>\n</ul>",
        "id": 354930634,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682961324
    },
    {
        "content": "<p>I also agree with <a href=\"https://package.elm-lang.org/packages/elm/time/1.0.0/#iso-8601\"><code>elm-time</code>'s stance on ISO-8601 timestamps</a> which is why when I made <a href=\"https://package.elm-lang.org/packages/rtfeldman/elm-iso8601-date-strings/latest/\">a separate package to deal with them</a> I took the design approach that \"this is a legacy mistake that should be translated into another format as soon as possible\"</p>",
        "id": 354931108,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682961429
    },
    {
        "content": "<p>in general I think that dates and times are similar to Unicode in that there's a big opportunity to create a \"pit of success\" where it becomes natural to do the right thing around edge case handling, as opposed to something that appears to be correct but turns out to bite you in edge cases <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 354931545,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682961539
    },
    {
        "content": "<p>(of which there are many opportunities when it comes to both Unicode as well as dates/times, especially when it comes to time zones and DST!)</p>",
        "id": 354931602,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682961556
    },
    {
        "content": "<p>Thanks everyone for the feedback, lots to think about as I continue working on the library. I'll probably ask for more help with the design in the future, and if anyone has more ideas I'm happy to hear them :)</p>",
        "id": 355005933,
        "sender_full_name": "Hannes",
        "timestamp": 1682990476
    },
    {
        "content": "<p>Thanks for your detailed sugegstions <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>, my priorities for the library are 1. Correctness, 2. Good UX and then 3. Speed, because I suspect there will need to be some compromise in UX to make sure the calculations are always correct.</p>\n<p>I based the initial design on Rust's chrono crate because it was the first datetime library I was aware of that very carefully distinguished between a <code>DateTime</code> which has a timezone and a <code>NaiveDateTime</code> which is like the <code>Calendar</code> module you suggested.</p>\n<p>Storing all DateTimes as UTC like you suggested aligns with my experience, I always pushed for everything being UTC at work, but I also found that when working with humans some kind of timezone specific output is needed. My current idea is to only implement date calculations for UTC types , but allow converting to and from a <code>LocalDateTime</code> type that doesn't let you do calculations. I suspect that design will break under some timezone corner cases, but possibly less than the alternaives <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 355007219,
        "sender_full_name": "Hannes",
        "timestamp": 1682991334
    },
    {
        "content": "<p>yeah so my general sense is that <em>displaying</em> times in time zones is a good idea, and also receiving them from user input in that format is also a good idea</p>",
        "id": 355009129,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682992563
    },
    {
        "content": "<p>but having a dedicated data type for them kinda seems like footgun to me, even though it's a very common design <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 355009221,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682992599
    },
    {
        "content": "<p>If it is an opaque type only for storage, display, input, and conversion to/from the utc format, it shouldn't really have any footguns.</p>",
        "id": 355009391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682992741
    },
    {
        "content": "<p>I think the footgun is storing time zone alongside the date/time</p>",
        "id": 355009953,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682993089
    },
    {
        "content": "<p>most often it's correct to use the viewer's time zone and not the creator's time zone, but putting those together into one datatype makes the default be to work in terms of the creator's time zone</p>",
        "id": 355010024,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682993152
    },
    {
        "content": "<p>e.g. consider functions like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Calendar.date : Utc, TimeZone -&gt; { month : Month, day : U8, year : U32 }\nCalendar.time : Utc, TimeZone -&gt; { hour : U8, minute : U8, second : U8, millisecond : U32, nanosecond : U32 }\nCalendar.hourToAmPm : U8 -&gt; (U8, [Am, Pm])\nCalendar.toUtc : TimeZone, { month : Month, day : U8, year : U32, hour : …etc } -&gt; Utc\n</code></pre></div>",
        "id": 355010089,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682993171
    },
    {
        "content": "<p>if you always have to provide a <code>TimeZone</code> at the last minute, instead of having it baked into a time, it makes it natural to stop and think which time zone to use</p>",
        "id": 355010107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682993198
    },
    {
        "content": "<p>That's fair. Also, an end user can always make simple wrapper if they want <code>(Utc, Timezone)</code></p>",
        "id": 355010180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682993265
    },
    {
        "content": "<p>yep! but that way you have to go out of your way to do it, so it's no longer a default</p>",
        "id": 355010243,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682993289
    },
    {
        "content": "<p>So as long as you have function to help with display using <code>Utc</code> and <code>Timezone</code>, I guess it doesn't really matter much.</p>",
        "id": 355010253,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682993306
    },
    {
        "content": "<p><code>basic-cli/Utc</code> stores the Utc internally as a <code>U128</code>, I wonder if that was the wrong decision? Should we update that to<code>I64</code> as you have done here? TBH I didn't do a lot of research when I made it, was more focussed on getting something in there for the platform.</p>",
        "id": 355010522,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682993477
    },
    {
        "content": "<p>Side question: do any UTC libraries deal with leap seconds and the such when calculating durations?</p>",
        "id": 355010524,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682993477
    },
    {
        "content": "<p>I'm also particularly interested in the interaction/interface with basic-cli as this is a good example for these two things working together. I'm not sure there are many other packages that have explored here before. I've done a bit with packages and Json, but it's not a great package as we currently have it as a builtin so that cuases conflicts. <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> have you packaged it as a URL yet? I suspect we will surface some new bugs... but appreciate that is beyond the scope of what your working on right now. Looking forward to testing it out and even adding a new Example that uses it.</p>",
        "id": 355010880,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1682993749
    },
    {
        "content": "<blockquote>\n<p>Should we update that to <code>I64</code> as you have done here?</p>\n</blockquote>\n<p>Probably yes. <code>I64</code> is all the precision you get with time, not <code>U128</code> Also, lets you represent a time before <code>1970</code></p>",
        "id": 355011157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682993899
    },
    {
        "content": "<p>a nice thing to keep in mind is that since it's opaque, if in the future you want to change it to <code>I128</code>, you can introduce a new function to go from <code>I128</code> to <code>Utc</code> as a nonbreaking change, and then make the existing one that accepts <code>I64</code> convert to the internal <code>I128</code> representation behind the scenes</p>",
        "id": 355011804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682994274
    },
    {
        "content": "<p>Upgrading from <code>I64</code> to <code>I128</code> should be a non-breaking change, so that shouldn't matter, right?</p>",
        "id": 355015020,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682995943
    },
    {
        "content": "<p>those are still type-incompatible</p>",
        "id": 355017306,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682997518
    },
    {
        "content": "<p>like you'd have to do <code>Num.toI28</code> on your <code>I64</code></p>",
        "id": 355017350,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682997564
    },
    {
        "content": "<p>Sure</p>",
        "id": 355019590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682999082
    },
    {
        "content": "<p>So you get an input of <code>I64</code> and convert it.</p>",
        "id": 355019607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682999100
    },
    {
        "content": "<p>That's fine</p>",
        "id": 355019616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682999103
    },
    {
        "content": "<p>The type is opaque. An end user has no idea how the data is stored.</p>",
        "id": 355019630,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682999120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Roc.20Datetimes/near/355010880\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> have you packaged it as a URL yet?</p>\n</blockquote>\n<p>Just tagged a release and the URL is available, here's an example app:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;hello-world&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.3.1/97mY3sUwo433-pcnEQUlMhn-sWiIf_J9bPhcAFZoqY4.tar.br&quot;,\n        dt: &quot;https://github.com/Hasnep/roc-datetimes/releases/download/v0.0.2/8CYrpsnUJCgbWGdctD-11mvWf9nDEV66CzPqt19A6qI.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n        dt.NaiveDate,\n    ]\n    provides [main] to pf\n\nmain =\n    message =\n        when NaiveDate.fromYmd 2023 1 1 is\n            Ok date -&gt;\n                dateStr = NaiveDate.toIsoStr date\n                &quot;Hello, World! The date is \\(dateStr).&quot;\n\n            Err _ -&gt;\n                &quot;Hello, World!&quot;\n\n    Stdout.line message\n</code></pre></div>",
        "id": 355020154,
        "sender_full_name": "Hannes",
        "timestamp": 1682999460
    }
]