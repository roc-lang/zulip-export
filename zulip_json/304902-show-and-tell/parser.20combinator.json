[
    {
        "content": "<p>I've been working on a parser combinator library:  file <code>Parser.roc</code> in  <code>./examples/parser</code> of the branch <code>jim-parser</code>.  There is are two test files of interest: <code>ParserTest.roc</code> and <code>ManyTest.roc</code>.  The latter contains test of code that causes a panic, so progress is stalled at the moment.</p>",
        "id": 255619626,
        "sender_full_name": "James Carlson",
        "timestamp": 1633024903
    },
    {
        "content": "<p>There are some open PRs to fix some of those problems, but I keep uncovering more</p>",
        "id": 255620292,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1633025008
    },
    {
        "content": "<p>Thanks Folkert, good to know!</p>",
        "id": 255639695,
        "sender_full_name": "James Carlson",
        "timestamp": 1633032456
    },
    {
        "content": "<p>Just an FYI: the file <code>examples/parser/ParserTest.roc</code> in branch <code>jim-parser</code> panics after the latest merge with <code>trunk</code>. File is unchanged.</p>\n<div class=\"codehilite\"><pre><span></span><code>âžœ  roc git:(jim-parser) cargo run examples/parser/ParserTest.roc\n   Compiling roc_gen_wasm v0.1.0 (/Users/jxxcarlson/dev/roc/roc/compiler/gen_wasm)\n   Compiling roc_build v0.1.0 (/Users/jxxcarlson/dev/roc/roc/compiler/build)\n   Compiling roc_linker v0.1.0 (/Users/jxxcarlson/dev/roc/roc/linker)\n   Compiling roc_cli v0.1.0 (/Users/jxxcarlson/dev/roc/roc/cli)\n    Finished dev [unoptimized + debuginfo] target(s) in 21.03s\n     Running `target/debug/roc examples/parser/ParserTest.roc`\nthread &#39;main&#39; panicked at &#39;internal error: entered unreachable code: symbol/layout `fx.Effect.map` ProcLayout { arguments: [LambdaSet(LambdaSet { set: [(`fx.Effect.effect_closure_putLine`, [Builtin(Str)])], representation: Struct([Builtin(Str)]) }), LambdaSet(LambdaSet { set: [(`base.Task.6`, [])], representation: Struct([]) })], result: LambdaSet(LambdaSet { set: [(`fx.Effect.effect_map_inner`, [LambdaSet(LambdaSet { set: [(`fx.Effect.effect_closure_putLine`, [Builtin(Str)])], representation: Struct([Builtin(Str)]) }), LambdaSet(LambdaSet { set: [(`base.Task.6`, [])], representation: Struct([]) })])], representation: Struct([LambdaSet(LambdaSet { set: [(`fx.Effect.effect_closure_putLine`, [Builtin(Str)])], representation: Struct([Builtin(Str)]) }), LambdaSet(LambdaSet { set: [(`base.Task.6`, [])], representation: Struct([]) })]) }) } combo must be in DeclarationToIndex&#39;, compiler/mono/src/borrow.rs:227:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n^C\n</code></pre></div>",
        "id": 255905585,
        "sender_full_name": "James Carlson",
        "timestamp": 1633216453
    },
    {
        "content": "<p>do you remember when you ran it last?</p>",
        "id": 255905639,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1633216543
    },
    {
        "content": "<p>September 30 for sure.  I haven't changed it in a good while -- am waiting for <code>ManyTest.roc</code> to pass before I proceed</p>",
        "id": 255907627,
        "sender_full_name": "James Carlson",
        "timestamp": 1633218943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> , good news,  doing the below in the <code>jim-parser</code> branch now succeeds.</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo run examples/parser/ParserTest.roc\n</code></pre></div>",
        "id": 255968237,
        "sender_full_name": "James Carlson",
        "timestamp": 1633284131
    },
    {
        "content": "<p>((after merging a few minutes ago with trunk))</p>",
        "id": 255968251,
        "sender_full_name": "James Carlson",
        "timestamp": 1633284154
    },
    {
        "content": "<p>nice!</p>",
        "id": 255969128,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1633285060
    }
]