[
    {
        "content": "<p>I wrote a draft of an article about the new <code>!</code> suffix - any feedback welcome! <a href=\"https://docs.google.com/document/d/1XKZEtOg5efJFnzXxwY2rPRE64H796lCrt7H_j0340P4/edit?usp=sharing\">https://docs.google.com/document/d/1XKZEtOg5efJFnzXxwY2rPRE64H796lCrt7H_j0340P4/edit?usp=sharing</a></p>",
        "id": 434558110,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713673594
    },
    {
        "content": "<p>as previously discussed, I plan to post this on a personal site rather than as any kind of official announcement on <a href=\"http://roc-lang.org\">roc-lang.org</a></p>",
        "id": 434558144,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713673636
    },
    {
        "content": "<p>Your javascript syntax example has a <code>then</code> instead of an <code>afterwards</code> for the last callback operation</p>",
        "id": 434558714,
        "sender_full_name": "Karl",
        "timestamp": 1713674384
    },
    {
        "content": "<p>thanks, fixed!</p>",
        "id": 434558783,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713674422
    },
    {
        "content": "<p>Somewhat off topic but the discussion in the article about the output format jogged my memory:</p>\n<p>The best async primitive I've run across in any language is <code>let-flow</code> in Clojure's  aleph library. In Clojure the <code>let</code> form lets you make a series of bindings and then use it within the body works a lot like <code>let...in</code> in Elm. Aleph uses some macro magic to sort the bindings topologically and dispatches independent tasks in parallel. I think of it basically every time I read about an async await primitive which generally have semantics that precludes this type of optimization.</p>\n<p>I understood that Roc desugared into callbacks and from that assumed it wouldn't be possible to get let-flow style optimizations but in reading this it occurs to me that the output is a data structure so this sort of optimization might be possible.</p>",
        "id": 434559498,
        "sender_full_name": "Karl",
        "timestamp": 1713675323
    },
    {
        "content": "<blockquote>\n<p>sort the bindings topologically and dispatches independent tasks in parallel</p>\n</blockquote>\n<p>that's cool! we have <a href=\"https://docs.google.com/document/d/1Jo9nZCekkoF6SaDcRqPqoPcgPaAAvlNZC7v3kgVQ3Tc/edit\">record builder syntax</a> for this use case - the syntax is implemented, but we don't have any parallel-capable platform runtimes to use it on yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434559652,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713675497
    },
    {
        "content": "<p>(that's because we need to make <code>Task</code> a builtin to enable that, which hasn't happened yet)</p>",
        "id": 434559654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713675511
    },
    {
        "content": "<p>Are there any blockers for making Task a builtin? Does it just need implementation?</p>",
        "id": 434560947,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713676930
    },
    {
        "content": "<p>I could see how it could be done with that syntax but it'd be nicer if it worked everywhere without having to think about it. If <code>Task</code> is a builtin that the compiler knows about then the compiler could also know where task values are used. Extending the example syntax to include an <code>id</code> per op and  <code>dependencies: id[]</code> would give platforms the information needed to dispatch in parallel but they could just head of line block like they currently do if they ignore the information.</p>",
        "id": 434560953,
        "sender_full_name": "Karl",
        "timestamp": 1713676939
    },
    {
        "content": "<p>That sounds very cool for a library, but not so much as the default behaviour for a language. Based on a sofware unscripted podcast episode (i think it was \"making jit-ed code run faster\") this seems like it would work a nice number of times, but when it wouldn't, it would be really bad, because you need to get around it somehow. I dont know how often that comes up in clojure though, since it doesn't have the same goals as parralelising c++ code. For Roc, I think Task builtins would be better for concurrency (ofc the platform would need to declare wheather it supports parralelism or not)</p>",
        "id": 434561396,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1713677551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/draft.20article.20about.20!.20syntax/near/434560947\">said</a>:</p>\n<blockquote>\n<p>Are there any blockers for making Task a builtin? Does it just need implementation?</p>\n</blockquote>\n<p>no blockers! No one is working on it yet though</p>",
        "id": 434562178,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713678536
    },
    {
        "content": "<p>yeah regarding parallelization, I think it's really important to be able to have confidence that your code is running in parallel vs not</p>",
        "id": 434562206,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713678581
    },
    {
        "content": "<p>one of the reasons records were chosen explicitly for that syntax is because it's really obvious syntactically that when you're building a record, the fields can't depend on each other (because the record hasn't been built yet)</p>",
        "id": 434562266,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713678619
    },
    {
        "content": "<p>and for them to run in parallel, they can't depend on each other</p>",
        "id": 434562285,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713678637
    },
    {
        "content": "<p>Haskell's <a href=\"https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/applicative_do.html\">applicative <code>do</code></a> also does it automatically based on compiler analysis, but I prefer it to be explicit in syntax</p>",
        "id": 434562308,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713678681
    },
    {
        "content": "<p>I thought there was a blocker related to effects and dependences. Though maybe that is only an issue once we have the effect interpreter version of task?</p>",
        "id": 434593307,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713710184
    },
    {
        "content": "<p>yeah basically task as builtin (on its own) just requires:</p>\n<ul>\n<li>add the <code>Task</code> module to builtins</li>\n<li>instead of generating <code>Effect</code> in <code>hosted</code> modules we generate <code>Task</code></li>\n<li>hosts have to update their effect implementations accordingly (basically now they'll always be dealing with a <code>Result</code>)</li>\n</ul>",
        "id": 434593822,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713710661
    },
    {
        "content": "<p>making <code>Task.map2</code> able to parallelize has other blockers, but at a minimum it requires task being a builtin, which doesn't have blockers</p>",
        "id": 434593854,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713710706
    },
    {
        "content": "<p>separately, once we have module params we can (and should) replace <code>hosted</code> modules with declarations in the <code>platform</code> module, but that's blocked on task being a builtin</p>",
        "id": 434593967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713710796
    },
    {
        "content": "<p>that change might be the dependencies thing you're thinking of; we can't make that change without module params or else the ergonomics would be terrible <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 434594001,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713710837
    },
    {
        "content": "<blockquote>\n<p>Instead of generating <code>Effect</code> in <code>hosted</code> modules we generate <code>Task</code></p>\n</blockquote>\n<p>Ah yeah, that would definitely fix any <code>Effect</code> and <code>Task</code> related dependency issues.</p>",
        "id": 434596447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712950
    },
    {
        "content": "<p>Can't have a dependency on <code>Effect</code> if <code>Effect</code> doesn't exist</p>",
        "id": 434596472,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712973
    }
]