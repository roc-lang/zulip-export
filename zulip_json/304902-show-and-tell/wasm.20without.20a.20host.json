[
    {
        "content": "<p>I implemented a wasm example (running on Node.js, but could just as easily be in the browser) that doesn't have a host! <a href=\"https://github.com/roc-lang/roc/blob/4cb02f1d04e5f458389e44a78c542e497f589266/examples/nodejs-interop/wasm/hello.js#L59\">https://github.com/roc-lang/roc/blob/4cb02f1d04e5f458389e44a78c542e497f589266/examples/nodejs-interop/wasm/hello.js#L59</a></p>",
        "id": 355294010,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076362
    },
    {
        "content": "<p>so there's no dependency on Zig or clang or Rust or anything - all you need to build and run the example is <code>roc</code> and <code>node</code></p>",
        "id": 355294029,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076380
    },
    {
        "content": "<p>(or <code>roc</code> and a browser)</p>",
        "id": 355294041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076385
    },
    {
        "content": "<p>it works by implementing <code>roc_alloc</code> and such directly in JS, working with the WebAssembly's raw byte array representation of memory using JS commands instead of C commands</p>",
        "id": 355294117,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076441
    },
    {
        "content": "<p>(thanks to <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> for explaining to me how all that works in wasm!)</p>",
        "id": 355294169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076455
    },
    {
        "content": "<p>Awesome!!!</p>",
        "id": 355294247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683076520
    },
    {
        "content": "<p>That is actually really exciting. Gets rid of a whole layer of wrapping and dependencies.</p>",
        "id": 355294288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683076547
    },
    {
        "content": "<p>yeah! I'm not sure what the runtime performance implications are; presumably writing JS code instead of wasm code is slower in the general case, but in this case is it noticeable? I very much doubt it, but I don't really know <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 355294421,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076635
    },
    {
        "content": "<p>I guess it depends how much you delegate to roc vs run in js. Given most stuff we are talking about here is just thin wrapper, I don't think it should make a tangible difference, but I haven't dug into anything here.</p>",
        "id": 355295225,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683077082
    },
    {
        "content": "<p>I could try porting my old wasm cpu example to this to see the perf diff.</p>",
        "id": 355295242,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683077099
    },
    {
        "content": "<p>These thin functions around <code>Uint8Array</code> / <code>DataView</code> probably optimize well</p>",
        "id": 355295497,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683077281
    },
    {
        "content": "<p>When I saw that last commit I thought it was super cool.  I'm very interested to play with this some more and see what I can build with it. Are you thinking of going this direction for the Node TS integration?</p>",
        "id": 355298742,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1683079312
    },
    {
        "content": "<p>yep, exactly!</p>",
        "id": 355300288,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683080376
    },
    {
        "content": "<p>at Vendr we're planning to introduce Roc in multiple places in the code base using calls to small Roc functions (at first, then more and more Roc over time), which means it will be common to rebuild the platform</p>",
        "id": 355300412,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683080460
    },
    {
        "content": "<p>I want to make that rebuild as fast as possible, so taking out the step of building and linking the host (even if it's <code>zig</code> doing the build and <code>wasm-ld</code> instead of <code>ld</code>) will get multiplied by the number of different entrypoints we have</p>",
        "id": 355300497,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683080520
    },
    {
        "content": "<p>also, it means I don't have to introduce a <code>zig</code> dependency for everyone (nontrivial; we aren't currently using Nix, but rather Homebrew on Mac and Docker on Linux)</p>",
        "id": 355300623,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683080575
    },
    {
        "content": "<p>(well I guess introducing it is fairly trivial, but people have to run a manual command to get it, and then the versions have to be kept in sync, which requires re-running that command, etc. etc.)</p>",
        "id": 355300673,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683080610
    },
    {
        "content": "<blockquote>\n<p>I could try porting my old wasm cpu example to this to see the perf diff.</p>\n</blockquote>\n<p>Actually that won't be useful. It currently never allocates, that said, it is using effects that directly call into JS just like your JS host is doing. And it was way faster than the JS only version, so at least that is a good sign. It has to call into JS for every memory read and write that the cpu does. So essentially they are super thin functions that just wrap array access. So you would think the overhead of function calls could matter a lot in that case, but it doesn't seem to.</p>",
        "id": 355301073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683080873
    },
    {
        "content": "<p>Also, I wonder what the perf cost of having JS do memory management would be. As in alloc would essentially be a wrapper around <code> new Uint8Array(requestedBytes)</code>. dealloc would be <code>delete mem</code> or a noop.</p>",
        "id": 355301485,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683081183
    },
    {
        "content": "<p>whoa, I didn't even think of that! Although I don't know if wasm can \"see\" those bytes <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 355302936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683082143
    },
    {
        "content": "<p>like I don't know if it can address into them</p>",
        "id": 355302959,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683082148
    },
    {
        "content": "<p>but if so, that would be really cool!</p>",
        "id": 355302971,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683082157
    },
    {
        "content": "<p>Ah, sounds like no</p>",
        "id": 355305742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683083425
    },
    {
        "content": "<p>Wasm has a buffer that js can read and write to, but wasm can't access js memory</p>",
        "id": 355305827,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683083471
    },
    {
        "content": "<p>I guess this is where the wasm GC proposal should help in the future, iirc.</p>",
        "id": 355305846,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683083490
    },
    {
        "content": "<p>Yeah, looked into this again.the new wasm GC stuff should resolve this. Discussed some in this talk: <a href=\"https://youtu.be/Nkjc9r0WDNo?t=855s\">https://youtu.be/Nkjc9r0WDNo?t=855s</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Nkjc9r0WDNo\" href=\"https://youtu.be/Nkjc9r0WDNo?t=855s\"><img src=\"https://uploads.zulipusercontent.net/e1889906ca8c3c9581bb9732352c74083a2ab21c/68747470733a2f2f692e7974696d672e636f6d2f76692f4e6b6a6339723057444e6f2f64656661756c742e6a7067\"></a></div>",
        "id": 355320598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683091086
    },
    {
        "content": "<p>Specifically for this, it adds reference types to wasm that can reference host data.</p>",
        "id": 355320773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683091168
    },
    {
        "content": "<p>Wow this is a really interesting idea!<br>\nI bet JS is plenty fast enough. These functions will be called a <em>lot</em> so v8 will optimise the heck out of them. Especially since they're doing low-level things with numbers and byte arrays.</p>",
        "id": 355607407,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1683147769
    },
    {
        "content": "<p><code>new Uint8Array</code> won't work for memory management though. The Wasm module has a single <code>Uint8Array</code> and \"allocation\" means dividing it up into chunks on demand, and keeping track of each chunk so that you can free it and then hand it out to someone else again. In other words you are writing an allocator in JS. You cannot build on top of the JS allocator.</p>",
        "id": 355607868,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1683147982
    },
    {
        "content": "<p>In other words you are <em>sub-dividing</em> the piece of memory that JS has already allocated to Wasm.</p>",
        "id": 355607977,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1683148046
    },
    {
        "content": "<p>And growing it and so on</p>",
        "id": 355607986,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1683148051
    },
    {
        "content": "<p>you can't grab more memory and shove it in there</p>",
        "id": 355608025,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1683148070
    },
    {
        "content": "<p>Yeah, makes sense. Though i guess you could implement the malloc algorithm that sub divides in js if wanted.</p>",
        "id": 355616883,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683152159
    },
    {
        "content": "<p>Otherwise, more convenient apis should be possible once the reference types proposal is implemented (apparently it was split out of the wasm GC proposal and is already implemented in wasmtime)</p>",
        "id": 355617046,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683152229
    },
    {
        "content": "<p>Oh, actually it looks like the host references will be opaque to wasm, so this still doesn't help here. Wasm can't twiddle the bytes.</p>",
        "id": 355617518,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683152454
    },
    {
        "content": "<p>Also, found an interesting related read: <a href=\"https://fitzgeraldnick.com/2020/08/27/reference-types-in-wasmtime.html\">https://fitzgeraldnick.com/2020/08/27/reference-types-in-wasmtime.html</a></p>",
        "id": 355617787,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683152587
    },
    {
        "content": "<p>That's right. When you hear that some GC feature is coming to Wasm, you naturally think it sounds related to this and really useful. But in fact it has zero relevance to implementing roc_alloc. What is needed is a malloc implementation written in JS that manipulates a UInt8Array.</p>",
        "id": 355843414,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1683221560
    },
    {
        "content": "<p>So one approach would be to try to find a simple open source allocator in C or Zig and translate it line by line to JS. I know the Zig folks have a small-code-size allocator that they use for Wasm. Can't remember the name of it.</p>",
        "id": 355845090,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1683221964
    }
]