[
    {
        "content": "<p><code>roc-pg</code> has a nicer API for expecting results and can now do Prepared Statements and Pipelining.</p>\n<p>I added examples to the README:<br>\n<a href=\"https://github.com/agu-z/roc-pg\">https://github.com/agu-z/roc-pg</a></p>",
        "id": 350203467,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681583887
    },
    {
        "content": "<p>wow. very cool. i'll try this some time in the near future. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 350206592,
        "sender_full_name": "Rene Mailaender",
        "timestamp": 1681586076
    },
    {
        "content": "<p>i see you reference Task and Tcp in your Pg.Client: <code>pf.Task.{ Task, await, fail },</code><br>\nis there any mechanism to assure a certian type exists on a platform? (or plans for such a mechanism?) otherwise using this package on a different platform would crash right? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 350207046,
        "sender_full_name": "Rene Mailaender",
        "timestamp": 1681586390
    },
    {
        "content": "<p>Correct.  For now, this only works with <code>basic-cli</code>. The plan is to make it platform agnostic but the current model of <code>hosted</code> modules and effects doesn't make that very convenient.</p>",
        "id": 350207219,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681586490
    },
    {
        "content": "<p>If I understood correctly, that will change relatively soon :)</p>",
        "id": 350207677,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681586776
    },
    {
        "content": "<p><a href=\"#narrow/stream/304641-ideas/topic/effects.20in.20packages\">#ideas &gt; effects in packages</a> I think is the relevant conversation</p>",
        "id": 350208401,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681587251
    },
    {
        "content": "<p>i see. and thanks for the link. :)</p>",
        "id": 350209141,
        "sender_full_name": "Rene Mailaender",
        "timestamp": 1681587772
    },
    {
        "content": "<p>yooooo, this is amazing!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 350210118,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681588534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> this is super cool.</p>\n<p>Are you referring to having <code>glue</code> support <code>Op</code> tag union for effects before you modify to make it platform agnostic? Do you think it will be difficult to achieve? I assume you need sockets support in a platform, what would the interface look between the package and platform? is that going to be more generic like a <code>List U8</code>? </p>\n<p>You mention SSL and Connection pooling will require new platform primitives, what did you have in mind here. Is this also going to be achievable platform agnostic?</p>",
        "id": 350233566,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1681606366
    },
    {
        "content": "<p>From what I heard from Richard, the idea was to have a common <code>Task</code> type with a 3rd type variable for effects. Which in this case would be something like <code>[ Tcp TcpEffect ]</code>, where <code>TcpEffect</code> encodes all the operations such as <code>connect</code>, <code>read</code>, and <code>write</code>. <br>\nThat should work as long as the platform either supports the exact type or there's a way to map it to its own type.</p>",
        "id": 350371252,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681683758
    },
    {
        "content": "<p>You could also provide these as functions to <code>Pg.Client.withConnect</code> and make it platform-agnostic that way. That'd work, but it would make the types complex and it means the user needs to take care of establishing the TCP connection and doing the SSL stuff, which might not be great for beginners.</p>",
        "id": 350372180,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681684279
    },
    {
        "content": "<p>I could be persuaded into that direction though</p>",
        "id": 350372325,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681684351
    },
    {
        "content": "<p>I haven't given much thought to Pooling because there isn't really a concurrency story yet. Although, I wonder if that could be provided by the platform or by a package that isn't specific to PostgreSQL.</p>",
        "id": 350372691,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681684542
    },
    {
        "content": "<p>I imagine a platform like Folkert's server might want to be involved in/manage that</p>",
        "id": 350372919,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681684645
    },
    {
        "content": "<p>It's a little early to know the right answer for all this stuff, but in the meantime I'm focusing on implementing the protocol, the API, and building things on top of it :)</p>",
        "id": 350373663,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681684958
    },
    {
        "content": "<p>I'm so happy for this package to exist so soon <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️</p>\n<p>Just a nit if you don't mind. On elixir's ecto we use <code>all</code> and <code>one</code> for the select functions instead of <code>expect1</code> and <code>expectN</code>. It is a bit unusual for me coming from Elm to see functions ending with 1/N.</p>\n<p>I think the difference is that the expect is matching the return statement right? so it would work the same for insert/update/delete with returning?</p>\n<p>just throwing random naming refactors here:</p>\n<div class=\"codehilite\"><pre><span></span><code>archiveUser : Str -&gt; Task {} PgErrors\narchiveUser userId =\n  query &quot;update users set archived = true where id == $1&quot;\n  |&gt; withParams [ userId ]\n  |&gt; returningNothing\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>archiveUser : Str -&gt; Task Str PgErrors\narchiveUser userId =\n  query &quot;update users set archived = true where id == $1 returning id&quot;\n  |&gt; withParams [ userId ]\n  |&gt; returningOne\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>archiveUsers : List Str -&gt; Task Str PgErrors\narchiveUsers userIds =\n  query &quot;update users set archived = true where id in $1 returning id&quot;\n  |&gt; withParams [ userIds ]\n  |&gt; returningMany\n</code></pre></div>\n<p>(btw - for this last use case we should probably have some way to bind lists without turning them into strings first? don't know if this is something already in the package! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)</p>",
        "id": 350380539,
        "sender_full_name": "Georges Boris",
        "timestamp": 1681688400
    },
    {
        "content": "<p>Oh, calling them “params” instead of “bindings” is a great suggestion! I went a bit too technical there</p>",
        "id": 350381153,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681688863
    },
    {
        "content": "<p>As per <code>query</code>, that’s what I started with and I don’t love it because I don’t think of <code>update</code> or <code>insert</code> as queries. So I went with “command” which is what Postgres uses in their  docs.</p>",
        "id": 350381350,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681689017
    },
    {
        "content": "<p>The passing lists as parameters is something I’d like to have but I haven't decided how I want to do it. We could expand a binding into many, but that'd require parsing the SQL in Roc. Although, we might want to do that anyway so we can also have named parameters in addition to positional ones (which are the only type natively supported by PostgreSQL).</p>",
        "id": 350381450,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681689114
    },
    {
        "content": "<p>I’ll have to think about the <code>returning</code> suggestion. I kinda prefer <code>expect</code> because I don’t want people to think that <code>roc-pg</code> is adding a <code>returning</code> clause for them.</p>",
        "id": 350381653,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681689258
    },
    {
        "content": "<p>I agree the <code>N</code> and <code>1</code> suffixes are a little uncommon. I did start with <code>Many</code> and <code>One</code> as you suggested. However, since <code>expectOne</code> asserts that at least one row is returned, it felt like a beginner might think <code>expectMany</code> would fail if &lt;2 rows were returned.</p>",
        "id": 350381828,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681689419
    },
    {
        "content": "<p><code>expectOne</code> / <code>expectAll</code> might work though</p>",
        "id": 350382046,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681689589
    },
    {
        "content": "<p><code>expectAll</code> makes sense because the argument it takes is a result decoder</p>",
        "id": 350382566,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681690012
    },
    {
        "content": "<p>We don’t need something like <code>returningNothing</code> because if you execute a command without an <code>expect</code>, you’ll just get the “undecoded” <code>Pg.Result</code> type which you can use for dynamic use cases</p>",
        "id": 350382662,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681690082
    },
    {
        "content": "<p>Just a note: Fundamentally concurrency must be provided by the platform. So the story really has to be built out on platforms and not as part of the roc language. Of course, roc languages changes can make apis more convenient to use.</p>",
        "id": 350385203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681691906
    },
    {
        "content": "<p>Agreed. I meant I haven't seen examples of platforms providing concurrency.</p>",
        "id": 350385580,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681692127
    },
    {
        "content": "<p>Yeah, i think all i have seen is a webserver platform that i made a long time ago. It called into a roc request handling function from many threads, but the roc code was still fundamentally unaware of threading. I think we should soon have a lot more power with async rust hosts and the new formulation for hosts.</p>",
        "id": 350385683,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681692209
    },
    {
        "content": "<p>But yeah, needs to be built out</p>",
        "id": 350385695,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681692215
    },
    {
        "content": "<p>Yeah, looking forward to all that!</p>",
        "id": 350386072,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681692443
    },
    {
        "content": "<p>I might try to work on transforming a few platforms soon. Was debating between that or maybe zig glue. Updating platforms so exploration into multi threading and async can be done sounds likely more important. Though might need to expand rust glue before some of it works.</p>",
        "id": 350386624,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681692785
    },
    {
        "content": "<p>I think Rust glue is there now, although there may still be a bug relevant to effect interpreters? I forget what the current status of that is, but I think <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> knows!</p>",
        "id": 350388200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681693740
    },
    {
        "content": "<p>Did we finish porting all the tag stuff?</p>",
        "id": 350389807,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681694948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/roc-pg.20new.20features.20and.20examples/near/350382662\">said</a>:</p>\n<blockquote>\n<p>We don’t need something like <code>returningNothing</code> because if you execute a command without an <code>expect</code>, you’ll just get the “undecoded” <code>Pg.Result</code> type which you can use for dynamic use cases</p>\n</blockquote>\n<p>Oh! So in this case the <code>expect</code> is more like a <code>map</code> over the success response?</p>",
        "id": 350452192,
        "sender_full_name": "Georges Boris",
        "timestamp": 1681723100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> \"the tag stuff\" is all there, but there is a bug in how we generate the data for glue which means it fails for more complex recursive structures. We also lack glue gen for unsized values. Not sure how big an issue that is right now though, I think we can already do a lot of task stuff without it</p>",
        "id": 350456070,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681724020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364014\">Georges Boris</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/roc-pg.20new.20features.20and.20examples/near/350452192\">said</a>:</p>\n<blockquote>\n<p>Oh! So in this case the <code>expect</code> is more like a <code>map</code> over the success response?</p>\n</blockquote>\n<p>Yeah, somewhat like <code>map</code> but not quite. </p>\n<p><code>Pg.Cmd.expect1</code> fails the <code>Task</code> if less than 1 row is returned and  instructs the database to return at most one row even if you didn't add a <code>LIMIT</code> clause (which we can do at the protocol level). </p>\n<p>They also explicitly take <code>Pg.Result.Decode</code>, not just any function, I do have <code>Pg.Cmd.map</code> for that but I don't expect people to reach for that often.</p>\n<p>The original idea came from <code>elm/http</code>'s <code>expect</code> but adapted to the needs of reading database query results.</p>",
        "id": 350522732,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681739814
    },
    {
        "content": "<p>got it! the only that is weird about expect is that in Roc this word is also used for tests so the meaning becomes a bit tied to that imo.</p>",
        "id": 350526054,
        "sender_full_name": "Georges Boris",
        "timestamp": 1681740468
    },
    {
        "content": "<p>Yeah, good point. I wonder which other word we could use:</p>\n<ul>\n<li><code>returning</code> makes it seem like it adds the <code>RETURNING</code> clause</li>\n<li><code>decode</code> doesn't quite capture the special logic for <code>expect1</code></li>\n</ul>",
        "id": 350527560,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681740791
    },
    {
        "content": "<p>Maybe <code>Pg.Cmd.takeOne</code> / <code>Pg.Cmd.takeAll</code>?</p>",
        "id": 350528679,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681740969
    },
    {
        "content": "<p>Side note: I wonder if we should have an <code>#api design</code> stream</p>",
        "id": 350529307,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1681741098
    },
    {
        "content": "<p>good idea! Now we do: <a class=\"stream\" data-stream-id=\"383402\" href=\"/#narrow/stream/383402-API-Design\">#API Design</a></p>",
        "id": 350535099,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681742248
    }
]