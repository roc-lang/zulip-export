[
    {
        "content": "<p>I just wanted to share <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>'s new blog post <a href=\"https://rtfeldman.com/imperative-clothing\">Functional Semantics in Imperative Clothing</a> in case anyone here has missed it. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\">   </p>\n<p>I've also shared the post on <a href=\"https://news.ycombinator.com/item?id=40196115\">Hacker News</a>  and also to <a href=\"https://www.reddit.com/r/programming/comments/1cfuf0g/functional_semantics_in_imperative_clothing/\">/r/programming</a>, as these communities may find it an interesting read too. </p>\n<p>I can't share it on <a href=\"http://lobste.rs\">lobste.rs</a> as I'm not a member and I think this is a new domain. But if anyone else can share it I would be interested to know what that community think. </p>\n<p>I've been using the <code>!</code> syntax and updating some of my scripts and examples, and have found it nice to work with. There's still some work to do on error reporting, and getting a nice experience around that, but even now I think it's great (I might be a little biassed though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>\n<p>Keen to know what others think?</p>",
        "id": 435992268,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714381772
    },
    {
        "content": "<p>by the way, at least for Hacker News, they penalize upvotes if you upvote after following a direct link (to prevent voting rings) so the best way to upvote is to click the \"new\" link in the upper left to see all the newest stories, and then find the link and upvote it there <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436014371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714388607
    },
    {
        "content": "<p>(you may have to go back a couple of pages to find it - HN gets a lot of new links!)</p>",
        "id": 436014430,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714388630
    },
    {
        "content": "<p>front page of HN! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"/user_uploads/22008/GJbZbipyqDSxrAPv7BETidqB/Screenshot-2024-04-29-at-7.53.19AM.png\">Screenshot-2024-04-29-at-7.53.19AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/GJbZbipyqDSxrAPv7BETidqB/Screenshot-2024-04-29-at-7.53.19AM.png\" title=\"Screenshot-2024-04-29-at-7.53.19AM.png\"><img src=\"/user_uploads/22008/GJbZbipyqDSxrAPv7BETidqB/Screenshot-2024-04-29-at-7.53.19AM.png\"></a></div>",
        "id": 436023743,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714391640
    },
    {
        "content": "<p>just read the article! I was a bit distant for a while so the ! syntax was a nice surprise. :) it does indeed clean things up a lot</p>\n<p>I wonder if that in anyway changed features related to backpassing? (especially curious about record constructors for applicatives - I really liked those)</p>",
        "id": 436049773,
        "sender_full_name": "Georges Boris",
        "timestamp": 1714398273
    },
    {
        "content": "<p>no changes to record builders, although we separately have an idea for how to make the syntax for those a bit nicer too</p>",
        "id": 436056831,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714399826
    },
    {
        "content": "<p>I hope that <code>!</code> will mean we don't end up needing backpassing and can remove it, because the learning curve on backpassing hasn't been great and I'd like to make the language smaller if possible rather than supporting two ways to do the same thing <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436057056,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714399887
    },
    {
        "content": "<p>yeah! that was my fear as well, really hope can end up being small</p>\n<p>I've been coding a lot of Gleam this last week and they have a syntax that is basically the same as backpassing. it was the bit that confused me more when trying the language (tho gleam is small and once you figure it out you can make sense of it...)</p>\n<p>but the error messages end up getting thrown in weird places since backpassing is sugar but the error message doesnt recognize it, so it just explains the error as if you were using the function with callbacks.</p>\n<p>I believe this would also be something to be mindful off, regardless of what syntax sugar is used... it would be amazing to have error messages pointing out at the actual user written code, and not to the desugarized version that the user is not seeing</p>",
        "id": 436113389,
        "sender_full_name": "Georges Boris",
        "timestamp": 1714415549
    },
    {
        "content": "<p>I believe our errors will only ever point at user written code since desugaring doesn't work at the level of the syntax. However, there's probably some type checking errors that can be enriched based on context about <code>!</code> and other sugar.</p>",
        "id": 436118420,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714417288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> does your blog have an RSS/Atom feed? I was trying to figure out why I didn't see your post in NetNewsWire before I happened to notice it on <a href=\"http://Lobste.rs\">Lobste.rs</a>, and then couldn't find a feed, and vaguely remembered trying before…</p>",
        "id": 436123437,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1714419038
    },
    {
        "content": "<p>nope, I just put together a single static HTML page for this one post <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 436133206,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714422508
    },
    {
        "content": "<p>I can add more things in the future haha</p>",
        "id": 436133234,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714422517
    },
    {
        "content": "<p>re: backpassing being confusing — absolutely yes. For those of us coming from almost purely imperative languages like Go, the recursively-nested-this-is-purely-functional-because-its-returning-a-task-and-continuation-not-actually-doing-the-task pattern is already a bit mind-bending. Adding backpassing on top definitely made it more confusing. I could keep one or the other in my head for a while, but they tended to push each other out!</p>",
        "id": 436133855,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1714422738
    },
    {
        "content": "<p>yeah my hope is that with <code>!</code> you don't need to understand as much of what's happening behind the scenes to be productive with it, so you can get comfortable with more aspects of the language...and then when you later learn more about what it's desugaring to, you can see parallels to things like <code>Result</code> that will hopefully make it easier to understand!</p>",
        "id": 436134307,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714422905
    },
    {
        "content": "<p>btw, have y'all settled effect interpreters yet? I think seeing a description of how this works from the (presumably usually imperative) platform side would be clarifying.</p>",
        "id": 436137697,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1714424170
    },
    {
        "content": "<p>implementation work on them is still ongoing, but we have a design that as far as we know should work!</p>",
        "id": 436143258,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714426209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Article.3A.20Functional.20Semantics.20in.20Imperative.20Clothing/near/436134307\">schrieb</a>:</p>\n<blockquote>\n<p>yeah my hope is that with <code>!</code> you don't need to understand as much of what's happening behind the scenes to be productive with it, so you can get comfortable with more aspects of the language...and then when you later learn more about what it's desugaring to, […]</p>\n</blockquote>\n<p>I have just read the article, and I have sympathy for the argument of keeping some details hidden from beginners. As a newbie in Roc (but experienced dev elsewhere) I wonder what would happen if Roc would silently <strong>imply</strong> the <code>!</code> operator for each future automatically, such that it need not even be written-out in the source code. Of course, Roc would need another syntax providing access to the future <em>without</em> actually executing it. This additional syntax would be something for experts, and not relevant for most beginners. (I am thinking of putting the future between braces, or sth. similar, thereby indicating that a runnable function is contained within sth. that requires unpacking to free the beast. Hope you know what I mean.)</p>\n<p>What do you think: would that be another improvement, or rather too much obfuscation?</p>",
        "id": 471433016,
        "sender_full_name": "fast normaler roca",
        "timestamp": 1726734404
    },
    {
        "content": "<blockquote>\n<p>I wonder what would happen if Roc would silently <strong>imply</strong> the <code>!</code> operator for each future automatically, such that it need not even be written-out in the source code.</p>\n</blockquote>\n<p>We <a href=\"#narrow/stream/304641-ideas/topic/Purity.20Inference/near/465772379\">discussed this</a>, the conversation diverged into multiple threads but I think we agreed that we wanted to keep the visual indicator for functions that executed effects because it's beneficial to be able to instantly see which functions execute effects.</p>",
        "id": 471657225,
        "sender_full_name": "Anton",
        "timestamp": 1726819764
    }
]