[
    {
        "content": "<p>Hey all, I have been working on my own custom TypeScript compiler, and it's written entirely in Roc. I still haven't implemented a type-checker for it, but I've written a tokenizer and parser for most of the syntax, and it's really coming along great!</p>\n<p>Here is an example output from the CLI:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Running<span class=\"w\"> </span>program…\n\n────────────────────────────────────────────────────────────────────────────────\n🚀<span class=\"w\"> </span>TypeScript/JavaScript<span class=\"w\"> </span>Parser\nEnter<span class=\"w\"> </span>code<span class=\"w\"> </span>to<span class=\"w\"> </span>parse<span class=\"w\"> </span><span class=\"o\">(</span>press<span class=\"w\"> </span>Enter<span class=\"o\">)</span>:\nconst<span class=\"w\"> </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"s2\">\"FUN\"</span>\n\n📝<span class=\"w\"> </span>Input<span class=\"w\"> </span>Code:\nconst<span class=\"w\"> </span><span class=\"nv\">fun</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"s2\">\"FUN\"</span>\n\n\n🔍<span class=\"w\"> </span>Tokens:\nConstKeyword,<span class=\"w\"> </span>WhitespaceTrivia<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span>IdentifierToken<span class=\"o\">(</span>fun<span class=\"o\">)</span>,<span class=\"w\"> </span>WhitespaceTrivia<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span>EqualsToken,<span class=\"w\"> </span>WhitespaceTrivia<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span>OpenParenToken,<span class=\"w\"> </span>CloseParenToken,<span class=\"w\"> </span>WhitespaceTrivia<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span>EqualsGreaterThanToken,<span class=\"w\"> </span>WhitespaceTrivia<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>,<span class=\"w\"> </span>StringLiteralToken<span class=\"o\">(</span><span class=\"s2\">\"FUN\"</span><span class=\"o\">)</span>,<span class=\"w\"> </span>EndOfFileToken\n\n🌳<span class=\"w\"> </span>Parsing<span class=\"w\"> </span>AST...\n\n✨<span class=\"w\"> </span>Abstract<span class=\"w\"> </span>Syntax<span class=\"w\"> </span>Tree:\nProgram<span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span>sourceType:<span class=\"w\"> </span>Module,\n<span class=\"w\">  </span>body:<span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">  </span>VariableDeclaration<span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span>kind:<span class=\"w\"> </span>Const,\n<span class=\"w\">    </span>declarations:<span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">    </span>VariableDeclarator<span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">      </span>id:<span class=\"w\"> </span>Identifier<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>name:<span class=\"w\"> </span><span class=\"s2\">\"fun\"</span><span class=\"w\"> </span><span class=\"o\">}</span>,\n<span class=\"w\">      </span>init:<span class=\"w\">       </span>ArrowFunctionExpression<span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">        </span>params:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span><span class=\"w\"> </span>items<span class=\"o\">]</span>,\n<span class=\"w\">        </span>body:<span class=\"w\"> </span>StringLiteral<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>value:<span class=\"w\"> </span><span class=\"s2\">\"\"</span>FUN<span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"o\">}</span>,\n<span class=\"w\">        </span>async:<span class=\"w\"> </span>Bool.false,\n<span class=\"w\">        </span>generator:<span class=\"w\"> </span>Bool.false\n<span class=\"w\">      </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">}</span>,\n<span class=\"w\">    </span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">}</span>,\n<span class=\"w\">  </span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 539436673,
        "sender_full_name": "Austin Davis",
        "timestamp": 1757881071
    },
    {
        "content": "<p>whoooooa, that's super cool!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 539436902,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1757881317
    },
    {
        "content": "<p>Thanks! Building this out in Roc has been a blast!</p>",
        "id": 539437062,
        "sender_full_name": "Austin Davis",
        "timestamp": 1757881533
    }
]