[
    {
        "content": "<p>I want to introduce the <a href=\"https://github.com/ostcar/kingfisher\">Kingfisher</a> platform. It is a platform to build websites, that follows a different approach then the basic-webserver-platform.</p>\n<p>There is no SQL-Database. Instead, you define your own Model. It can be any Roc type and is held in memory.</p>\n<p>To write an application, you have to provide the following main function.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>main : {\n    decodeModel : [Init, Existing (List U8)] -&gt; Model,\n    encodeModel : Model -&gt; List U8,\n\n    handleReadRequest : Request, Model -&gt; Response,\n    handleWriteRequest : Request, Model -&gt; (Response, Model),\n}\n</code></pre></div>\n<p><code>handleReadRequest</code> gets a representation of the request and the <code>Model</code> and can only return a <code>Response</code>. <code>handleWriteRequest</code> has the same arguments, but can also return a new <code>Model</code>. The distinction, if its a read or write request is done on the HTTP method. <code>GET</code> requests can not manipulate the <code>Model</code> and are guarantied to be idempotent.</p>\n<p>The platform can handle many read requests at the same time. Write requests can not run in parallel. So there can be no conflicts between them.</p>\n<p>The persistence of the data is similar how redis does it. In redis, all data is in memory, but there are two ways to persist it on disk. There are dumps (in redis called RDB) or redis can write every write-command to an append only file (in redis called AOF). There <a href=\"https://redis.io/docs/latest/operate/oss_and_stack/management/persistence/\">are different strategies</a> you can do with this two methods.</p>\n<p>The current implementation of kingfisher saves an encoded representation of the model on shutdown. It also writes all write requests to an append only file. If the platform crashes, the model can be recreated by rerunning all the write requests. Since there are no side effects, you always get the the Model, when you run the same write requests. In the future, there could be setting to define the persistence strategies.</p>\n<p>This approach defensively has an upper limit on scalability. But I think, there are a lot of projects, where this approach is good enough. On the other hand, kingfisher gets an easy entrance to building a website. You don't need any knowledge about SQL or other databases. Just create your Model in Roc and manipulate it, as you would in any other Roc application.</p>\n<p>The platform is called <code>Kingfisher</code>because a Kingfisher is a beautiful bird and bird names could be a good fit for Roc modules.</p>\n<p>The platform is written in Go. It is in a very early state. Expect memory leaks and unexpected crashes. But I am interested to hear, what you think about this approach.</p>",
        "id": 435966701,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1714372813
    },
    {
        "content": "<p>wow, really cool design - love to see a fresh take on how to make a webserver, and the \"GETs can't change the Model\" guarantee is awesome!</p>",
        "id": 436004121,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714385219
    },
    {
        "content": "<p>This is the power of the platform-application separation and a creative solution! Nice job <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 436007919,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1714386539
    },
    {
        "content": "<p>Wow, super cool!</p>",
        "id": 436029936,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1714393342
    },
    {
        "content": "<p>I love the precedent of using bird names for packages. This bodes well for Raven DB<span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 436116156,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1714416539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> , very cool! Just as a side note: the new open source project golem is using a similar approach, but it is based on WASM’s simple execution and memory model, every (!!) interaction with the outside (side effect)  and each memory change is recorded. It works out of the box for most wasm programs:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=fHPYetd3q2g&amp;t=38s\">https://www.youtube.com/watch?v=fHPYetd3q2g&amp;t=38s</a><div class=\"youtube-video message_inline_image\"><a data-id=\"fHPYetd3q2g\" href=\"https://www.youtube.com/watch?v=fHPYetd3q2g&amp;t=38s\"><img src=\"https://uploads.zulipusercontent.net/221553ed47a23e7198022f3954ebe6919e27a7a6/68747470733a2f2f692e7974696d672e636f6d2f76692f66485059657464337132672f64656661756c742e6a7067\"></a></div></li>\n<li><a href=\"https://podcasters.spotify.com/pod/show/happypathprogramming/episodes/85-Scala--Rust--and-Durable-Computing-with-John-De-Goes-e29ca1s\">https://podcasters.spotify.com/pod/show/happypathprogramming/episodes/85-Scala--Rust--and-Durable-Computing-with-John-De-Goes-e29ca1s</a></li>\n</ul>",
        "id": 436220946,
        "sender_full_name": "Alf Richter",
        "timestamp": 1714465722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> how would you imagine handling caching in this case? Say if your GET request requires you to fetch some data or do a database query or some such and you wish to cache it?</p>",
        "id": 436612373,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714622335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/Kingfisher.20Webplatform/near/436612373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> how would you imagine handling caching in this case? Say if your GET request requires you to fetch some data or do a database query or some such and you wish to cache it?</p>\n</blockquote>\n<p>The database is in memory. So there are no database queries. The platform does not support <code>Task</code> on purpose, so there can not be any data fetching or any kind of IO. The only thing a GET request can do is heating up the CPU and creating an HTTP-Response. The only reason for caching would be to save CPU and bandwidth. For most cases, the normal HTTP-Cache headers should be adequate. The platform could also read the HTTP-Cache-Headers and do some caching like any http proxy.</p>\n<p>If this is not enough, it would be possible to add the caching feature, where the application can return the HTTP headers, it depended on (for example the url and <code>Authorization</code>). The platform could cache the response. If there is another request, where the specific headers are the same, the cached response could be returned by the platform without calling the application. This cache could be invalided on every write request.</p>",
        "id": 436623267,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1714630516
    },
    {
        "content": "<p>ahh, sorry I missed that part, If you're not performing any IO anyway there isn't any need for caching. My bad, thanks for the clarification though :)</p>",
        "id": 436664671,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714646692
    },
    {
        "content": "<p>I created a new release, that support the legacy and the surgical linker. The release contains files for mac, windows and linux.</p>\n<p>So know, it is possible to use the kingfisher platform, using Mac.</p>",
        "id": 440783189,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1716791249
    },
    {
        "content": "<p>Cool! I will try it out today :)</p>",
        "id": 440785155,
        "sender_full_name": "Niclas Ahden",
        "timestamp": 1716792052
    },
    {
        "content": "<p>Very cool. Nice work getting cross compiling working for Go. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 440788085,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1716793337
    },
    {
        "content": "<p>I planned for a new release of the kingfisher platform for some time. With the motivation from AoC and the time from not doing AoC anymore, I finally did it: <a href=\"https://github.com/ostcar/kingfisher/releases/tag/v0.0.4\">https://github.com/ostcar/kingfisher/releases/tag/v0.0.4</a></p>\n<p>The main purpose of the new release is to support effects. Of course, with the new purity inference.</p>\n<p>I also changed the API. The new required functions look like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Model :  ANYTHING\ninit_model: Model\nupdate_model: Model, List (List U8) -&gt; Result Model _\nhandle_request! : Http.Request, Model =&gt; Result Http.Response _\n</code></pre></div>\n<p>The host still makes a distinction between read requests (like <code>GET</code>) and write requests (like <code>POST</code>). There can either be multiple read requests in parallel or one write request. But the new API does not let the app observe this behavior. </p>\n<p>To update the model, you have to pattern match on the request method. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>when request.method is\n        Get -&gt;\n            ...\n\n        Post save_event! -&gt;\n            ...\n</code></pre></div>\n<p>The method on write requests has a function <code>save_event!</code> as payload. You can use this function to let the host save an event. After <code>handle_request!</code> is done, the host calls <code>update_model</code> with all new events to update the model.</p>\n<p>The reason for this new change is that the old version had to save every write request, even when the authentication failed or they were sent to an unknown URI. The reason was that the platform could not know if the Model changed. With the new API, the event handling has to be explicit by the application. </p>\n<p>This new API is in flux. A friend of mine does not like that he cannot just save the new model, but has to create events. I don't like that the Event is a <code>List U8</code>. I would more like it if it could be a tagged union you can pattern match on. For example <code>Event: [CreateUser {username: Str, ...}, DeleteUser {user_id: U64}]</code>. But it is currently not possible for Roc effects to have a generic type that the application provides to the platform.</p>\n<p>At the moment, there are only effects to write a line to stdout, get the current time and a very simple version of sending a GET request. But this new API has the potential to support many more effects. I will add them when needed.</p>\n<p>The idea of the kingfisher app is to have a webserver platform that can hold state in memory without the need for writing SQL statements. Now this is possible, but also doing effects.</p>\n<p>If you've tried kingfisher or are interested in using it, I'd love to hear your thoughts on the new API design.</p>",
        "id": 492086506,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1736163024
    },
    {
        "content": "<p>I haven't tried it, but I can tell that this is one of the coolest use of Roc I have seen. <br>\nWhat's your thought on adding some kind of \"versioned model &amp; updaters\" api? Would benefit greatly this project i think. Not talking about migrating the binary format of events, but rather the case of \"I want a new version of the model (like swapping <code>is_admin</code> from a<code>Bool</code> to user_level tag), so I will write the v2 of the update function and also a <code>migrate_model_from_v1_to_v2</code> function that will transform the model to the new format so that the v2 update function will work on it\". These migration functions would work as a bridge that run once per initialization.</p>",
        "id": 492333081,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1736264036
    },
    {
        "content": "<p>Thank you for your feedback.</p>\n<p>I don't think a migrate function is necessary. But if there is a usecase, I have no problem with adding it.</p>\n<p>In the current version, the model is not saved at all. On startup, the platform calls <code>init_model</code> and afterwards <code>update_model</code> with all events. So all events get a playback on every start. I have two small go-projects that work an the same principle, where this playback is so fast, that it feels instant. If startup times will be a problem, I could implement some sort of snapshots.</p>\n<p>Since all events run every time, you can rewrite the <code>update_models</code> function to interpret then differently. For example, if you have an <code>update_user</code>- Event with a {is_admin: Bool, ...} payload, you can rewrite the <code>update_models</code> function to set <code>user.user_level</code> to <code>Admin</code>.  For future updates, you can rename new events to <code>update_user_v2 : {user_level: [...]}</code>. So you can make an distinction between the update-events before your change and the new update-events. In my private go-eventstore-projects, I had a very good experience with migrations in that way.</p>\n<p>I am not an expert on event stores. But if I understand the idea, then you don't save data, but the information, what happed. The information <code>user X has clicked on \"make user Y an admin\"</code> can never change and will never need an migration. Only the way, how you interpret the event can change.</p>",
        "id": 492338013,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1736265620
    },
    {
        "content": "<p>Well yes, I didn't think about that solution as I've never used such an architecture. Problem solved then, great work and thanks for the explanation!</p>",
        "id": 492367030,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1736275777
    }
]