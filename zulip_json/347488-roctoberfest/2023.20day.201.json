[
    {
        "content": "<p><a href=\"https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_01/main.roc\">https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_01/main.roc</a></p>",
        "id": 394291632,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696210538
    },
    {
        "content": "<p>That was very smooth to write in roc <a href=\"https://github.com/isaacvando/aoc/blob/main/roctoberfest/day1.roc\">https://github.com/isaacvando/aoc/blob/main/roctoberfest/day1.roc</a></p>",
        "id": 394291967,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696210681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"586417\">@Elias Mulhall</span> I didn't know you could import text files directly like that, that's awesome!</p>",
        "id": 394292192,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696210786
    },
    {
        "content": "<p>Yes!</p>",
        "id": 394292495,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696210898
    },
    {
        "content": "<p>General feedback:</p>\n<ul>\n<li>I think I'm using an up-to-date compiler, I'm on NixOS and I ran <code>nix-build https://github.com/roc-lang/roc/archive/main.tar.gz</code> before starting the puzzle. For some reason the \"last edited at\" timestamp on the generated binary is Dec 31st , 1969.</li>\n<li>My code is compiling and running right now, but the formatter is failing and generating a <code>.roc-format-failed</code> file. Should I report those, and if so where?</li>\n<li>The first hurdle with AoC in a new language is always reading files. Importing the text as a dependency is great, I love it!</li>\n<li>The second hurdle of AoC in a new language is parsing the input. Text munging was fine in this case, but what's the current story for parsing in general? Any libraries I can take a look at?</li>\n<li>I can't get <code>dbg</code> working at all. Is it broken right now, or is this a me thing? My biggest trouble getting day 1 working was realizing I needed <code>Str.split \"\\n\\n\"</code> because I tried \"\\n\" and had to jump through a bunch of hoops to print the intermediary state to realize that wasn't working.</li>\n</ul>",
        "id": 394293442,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696211229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> nice use of <code>Result.withDefault 0</code>, I didn't think of that. I let errors propagate all the way through and it was kind of a pain.</p>",
        "id": 394293666,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696211329
    },
    {
        "content": "<p>To be a bit more specific,  open tag unions feel great for error handling, but having to deal with a list of <code>Result</code>s was unwieldy. I created a helper to do a <code>List (Result a e) -&gt; Result (List a) e</code> transformation, which works well enough. My initial name for the function was <code>allOk</code>, but I looked up the <a href=\"https://package.elm-lang.org/packages/elm-community/result-extra/latest/Result-Extra#combine\">equivalent Elm function</a> and saw that it was called combine so I went with that. I feel like that function could be in the Roc standard library.</p>",
        "id": 394294464,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696211684
    },
    {
        "content": "<p>I think you could do <code>|&gt; List.mapTry \\r -&gt; r</code> here, but I agree that having something like <code>Result.combine</code> (or join?) would be nice.</p>",
        "id": 394298805,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696213547
    },
    {
        "content": "<p>nice, I didn't think to look in <code>List</code></p>",
        "id": 394299971,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696214091
    },
    {
        "content": "<p>For the timestamp, I think that is just a nix thing</p>",
        "id": 394300637,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696214388
    },
    {
        "content": "<p>Nix sets the timestamp to 1969 because it wants to build 100% the same files every time.</p>",
        "id": 394359622,
        "sender_full_name": "Anton",
        "timestamp": 1696235582
    },
    {
        "content": "<blockquote>\n<p>the formatter is failing and generating a .roc-format-failed file. Should I report those, and if so where?</p>\n</blockquote>\n<p>Yes please :) you can do so here: <a href=\"https://github.com/roc-lang/roc/issues\">https://github.com/roc-lang/roc/issues</a></p>",
        "id": 394362192,
        "sender_full_name": "Anton",
        "timestamp": 1696236117
    },
    {
        "content": "<blockquote>\n<p>what's the current story for parsing in general? Any libraries I can take a look at?</p>\n</blockquote>\n<p>Luke made a <a href=\"https://github.com/lukewilliamboswell/roc-things/tree/99b2ba5658686b6d9726cb3b8295e821d5b473e6/aoc-2022/Parser\">parser package</a>, I don't think he released it with a url yet but you can download the roc files to use it locally.</p>",
        "id": 394368794,
        "sender_full_name": "Anton",
        "timestamp": 1696237600
    },
    {
        "content": "<blockquote>\n<p>I can't get dbg working at all. Is it broken right now, or is this a me thing?</p>\n</blockquote>\n<p>There are <a href=\"https://github.com/roc-lang/roc/issues?q=is%3Aissue+is%3Aopen+dbg+in%3Atitle\">some bugs</a> with dbg but it should work in most cases, can you file an issue?</p>",
        "id": 394370124,
        "sender_full_name": "Anton",
        "timestamp": 1696237920
    },
    {
        "content": "<blockquote>\n<p>[...] had to jump through a bunch of hoops to print the intermediary state</p>\n</blockquote>\n<p>We've talked before about something like <code>dbgPipeline</code> to print all the intermediary values in a pipeline, I'll check if we have an issue for that. It could be something nice to get done before AoC 2023.</p>",
        "id": 394371501,
        "sender_full_name": "Anton",
        "timestamp": 1696238253
    },
    {
        "content": "<blockquote>\n<p>I feel like that function could be in the Roc standard library.</p>\n</blockquote>\n<p>I've made <a href=\"https://github.com/roc-lang/roc/issues/5875\">an issue</a> for a <code>Result</code> combine function.</p>",
        "id": 394373831,
        "sender_full_name": "Anton",
        "timestamp": 1696238815
    },
    {
        "content": "<p>I just copied that Parser from the examples, but happy to move into it's own repository and make a URL for it if that would help people?</p>",
        "id": 394381716,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696240845
    },
    {
        "content": "<p><a href=\"https://gist.github.com/ErikFeeley/c40d727834bb1d9b166ca4cf82541d41\">Day 1.</a> Cheated a little bit because I had done this before but it was back on a much older roc and roc-cli. Upgraded it really quick by removing the Process module code and fixing the return type of main. Then I refactored my part 2 solution a bit.</p>\n<p>I noticed that the formatter does not like it if you try and put the initial state on a new line when using Lisit.walk. (Line 30).</p>\n<p>I am curious if the state record in the part 2 solution does the mutation optimization thingy as well!</p>",
        "id": 394432491,
        "sender_full_name": "Erik",
        "timestamp": 1696253790
    },
    {
        "content": "<blockquote>\n<p>I noticed that the formatter does not like it if you try and put the initial state on a new line when using Lisit.walk. (Line 30).</p>\n</blockquote>\n<p>The formatter does not allow a lot of freedom which I like in general, it makes all roc code look consistent and thus easier to read.<br>\nIn this case I would also prefer the initial state on a separate line. It's important to easily identify where an argument ends and a new one begins.</p>",
        "id": 394454921,
        "sender_full_name": "Anton",
        "timestamp": 1696258972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/2023.20day.201/near/394362192\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>the formatter is failing and generating a .roc-format-failed file. Should I report those, and if so where?</p>\n</blockquote>\n<p>Yes please :) you can do so here: <a href=\"https://github.com/roc-lang/roc/issues\">https://github.com/roc-lang/roc/issues</a></p>\n</blockquote>\n<p><a href=\"https://github.com/roc-lang/roc/issues/5880\">https://github.com/roc-lang/roc/issues/5880</a></p>",
        "id": 394527588,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696289587
    }
]