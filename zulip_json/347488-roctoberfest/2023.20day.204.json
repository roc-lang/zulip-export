[
    {
        "content": "<p>I'm working on day 4 and can't figure out a type error<br>\nThe full wip code is here <a href=\"https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_04/main.roc\">https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_04/main.roc</a><br>\nThe relevant parts are</p>\n<div class=\"codehilite\"><pre><span></span><code>rangeParser : Parser RawStr (Range Nat)\nrangeParser =\n    const (\\first -&gt; \\last -&gt; Range.new first last)\n    |&gt; keep digits\n    |&gt; skip (codeunit &#39;-&#39;)\n    |&gt; keep digits\n\n# Copied from roc-parser for debugging\ndigits : Parser RawStr Nat\ndigits =\n    oneOrMore digit\n    |&gt; map \\ds -&gt; List.walk ds 0 (\\sum, d -&gt; sum * 10 + d)\n</code></pre></div>\n<p>Range is defined in a different module</p>\n<div class=\"codehilite\"><pre><span></span><code>Range a : { first : Num a, last : Num a } where a implements Bool.Eq\n\nnew : Num a, Num a -&gt; Range a\nnew = \\a, b -&gt; { first: a, last: b }\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ──────────────────────────────────────────────────── main.roc ─\n\nSomething is off with the body of the rangeParser definition:\n\n50│   rangeParser : Parser RawStr (Range Nat)\n51│   rangeParser =\n52│&gt;      const (\\first -&gt; \\last -&gt; Range.new first last)\n53│&gt;      |&gt; keep digits\n54│&gt;      |&gt; skip (codeunit &#39;-&#39;)\n55│&gt;      |&gt; keep digits\n\nThis Core.keep call produces:\n\n    Parser (List (Int Unsigned8)) (Range (Integer Natural))\n\nBut the type annotation on rangeParser says it should be:\n\n    Parser (List (Int Unsigned8)) (Range Nat)\n</code></pre></div>",
        "id": 394743907,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696386146
    },
    {
        "content": "<p>Am I using <code>Num</code> wrong? I'm confused that <code>digits : Parser RawStr Nat</code> seems correctly typed, but something is going wrong with <code>keep</code>?<br>\nkeep is</p>\n<div class=\"codehilite\"><pre><span></span><code>keep : Parser input (a -&gt; b), Parser input a -&gt; Parser input b\n</code></pre></div>",
        "id": 394744587,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696386524
    },
    {
        "content": "<p>Now I'm just rubber ducking :)<br>\nI tried typing the curried function</p>\n<div class=\"codehilite\"><pre><span></span><code>rangeBuilder : Nat -&gt; Nat -&gt; Range Nat\nrangeBuilder = \\first -&gt; \\last -&gt; Range.new first last\n</code></pre></div>\n<p>but that's giving me</p>\n<div class=\"codehilite\"><pre><span></span><code>── NOT END OF FILE ────────────────────────────────────────────────── main.roc ─\n\nI expected to reach the end of the file, but got stuck here:\n\n50│  rangeBuilder : Nat -&gt; Nat -&gt; Range Nat\n                               ^\n</code></pre></div>",
        "id": 394744893,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696386669
    },
    {
        "content": "<p>Can you try:</p>\n<div class=\"codehilite\"><pre><span></span><code>Range a : { first : a, last : a } where a implements Bool.Eq\n\nnew : Num a, Num a -&gt; Range (Num a)\nnew = \\a, b -&gt; { first: a, last: b }\n</code></pre></div>",
        "id": 394745063,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696386768
    },
    {
        "content": "<p>Also, just a note on the currying, you need parens in roc:<br>\n<code>rangeBuilder : Nat -&gt; (Nat -&gt; Range Nat)</code></p>",
        "id": 394745251,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696386849
    },
    {
        "content": "<p>Thanks for the hint, I'm getting slightly different errors now which I can bang on.<br>\nIs there going to be a separate ability for <code>Ord</code> or something similar? That implementation of <code>Range</code> doesn't seem right with just <code>Eq</code></p>",
        "id": 394746222,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696387359
    },
    {
        "content": "<p>I'm not sure. No one has talked about it. Sounds reasonable to have. Also, I guess your first version should probably work, though not sure what exactly is going on.</p>",
        "id": 394746569,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696387561
    },
    {
        "content": "<p>I think richard has mentioned <code>Sort</code> ability which is similar to Rust's <code>Ord</code></p>",
        "id": 394748432,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696388601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> mentions it in the <a href=\"https://docs.google.com/document/d/1kUh53p1Du3fWP_jZp-sdqwb5C9DuS43YJwXHg1NzETY/edit\">Abilities proposal</a>:</p>\n<blockquote>\n<p>I prefer the name Sort because I think it should only be for sorting and not general ordering (e.g. I think the &lt;, &gt;, &lt;=, and &gt;= operators should continue to only accept numbers, not other sortable types like strings and booleans)</p>\n</blockquote>",
        "id": 394748708,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696388802
    },
    {
        "content": "<p>But that's not implement yet right?</p>",
        "id": 394748741,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696388831
    },
    {
        "content": "<p>I tried following the errors and changed all the types from <code>Range Nat</code> to <code>Range (Integer Natural)</code>, and I got a compiler exception <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> so I guess I'll report that. Probably should just specialize the Range struct instead of making it polymorphic</p>",
        "id": 394748902,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696388928
    },
    {
        "content": "<p>Yeah that's right. It's not in the builtins and I don't think anyone has started on it. Not sure if there is a more concrete proposal anywhere.</p>",
        "id": 394748921,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696388936
    },
    {
        "content": "<p>What about something like <code>Range U32</code>?</p>",
        "id": 394749095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696389043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ──────────────────────────────────────────────────── main.roc ─\n\nSomething is off with the body of the rangeParser definition:\n\n52│   rangeParser : Parser RawStr (Range U32)\n53│   rangeParser =\n54│&gt;      const (\\first -&gt; \\last -&gt; Range.new first last)\n55│&gt;      |&gt; keep digits\n56│&gt;      |&gt; skip (codeunit &#39;-&#39;)\n57│&gt;      |&gt; keep digits\n\nThis Core.keep call produces:\n\n    Parser (List (Int Unsigned8)) (Range (Integer Natural))\n\nBut the type annotation on rangeParser says it should be:\n\n    Parser (List (Int Unsigned8)) (Range U32)\n</code></pre></div>\n<p>I tried</p>\n<div class=\"codehilite\"><pre><span></span><code>rangeParser : Parser RawStr (Range U32)\nrangeParser =\n    const (\\first -&gt; \\last -&gt; Range.new (Num.intCast first) (Num.intCast last))\n    |&gt; keep digits\n    |&gt; skip (codeunit &#39;-&#39;)\n    |&gt; keep digits\n</code></pre></div>\n<p>and got</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH ──────────────────────────────────────────────────── main.roc ─\n\nSomething is off with the body of the rangeParser definition:\n\n52│   rangeParser : Parser RawStr (Range U32)\n53│   rangeParser =\n54│&gt;      const (\\first -&gt; \\last -&gt; Range.new (Num.intCast first) (Num.intCast last))\n55│&gt;      |&gt; keep digits\n56│&gt;      |&gt; skip (codeunit &#39;-&#39;)\n57│&gt;      |&gt; keep digits\n\nThis Core.keep call produces:\n\n    Parser (List (Int Unsigned8)) (Range (Integer b)) where b implements Eq\n\nBut the type annotation on rangeParser says it should be:\n\n    Parser (List (Int Unsigned8)) (Range U32)\n</code></pre></div>",
        "id": 394750085,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696389604
    },
    {
        "content": "<p>Have you got <code>roc check Range.roc</code> happy?</p>",
        "id": 394750574,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696389885
    },
    {
        "content": "<p>I got it working fine with <code>Range : { first : Nat, last : Nat }</code>, so at least there's that. I'll go back and see</p>",
        "id": 394750684,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696389963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <code>roc check Range.roc</code> came back clean, so it seems like <code>Range</code> is internally consistent.</p>",
        "id": 394751146,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696390239
    },
    {
        "content": "<p>I don't know if this helps, but modified to an Opaque type and gave it the <code>Eq</code> ability</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Range exposes [Range, new, min, max, intersection, isContained] imports []\n\nRange := { first : U32, last : U32 } implements [Eq { isEq: rangeIsEq }]\n\nrangeIsEq : Range, Range -&gt; Bool\nrangeIsEq = \\@Range ra, @Range rb -&gt; ra == rb\n\nnew : U32, U32 -&gt; Range\nnew = \\first, last -&gt; @Range { first, last }\n\nmin : Range -&gt; U32\nmin = \\@Range { first, last } -&gt; if first &lt;= last then first else last\n\nmax : Range -&gt; U32\nmax = \\@Range { first, last } -&gt; if first &lt;= last then last else first\n\nintersection : Range, Range -&gt; [Disjoint, Intersecting (Range)]\nintersection = \\rangeA, rangeB -&gt;\n    if min rangeA &gt; max rangeB || min rangeB &gt; max rangeA then\n        Disjoint\n    else\n        first = Num.max (min rangeA) (min rangeB)\n        last = Num.min (max rangeA) (max rangeB)\n        Intersecting (new first last)\n\nexpect intersection (new 0 5) (new 1 3) == Intersecting (new 1 3)\n\nisContained : Range, Range -&gt; Bool\nisContained = \\inner, outer -&gt;\n    intersection inner outer == Intersecting inner\n\nexpect new 1 3 == @Range {first: 1, last: 3}\n</code></pre></div>",
        "id": 394751157,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696390247
    },
    {
        "content": "<p>Also works ok with <code>Nat</code> which is probably a nicer integration with the parser</p>",
        "id": 394751340,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696390354
    },
    {
        "content": "<p>ohhh nice. I would expect that to work, since <code>Range</code> is no longer polymorphic. But I briefly tried to make an opaque type and couldn't get the syntax right so that helps</p>",
        "id": 394751354,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696390364
    },
    {
        "content": "<p>I've played around with it a bit and I am not sure if there is any way to constrain that type variable to be an Integer or Number. <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> could probably advise on that??</p>",
        "id": 394752137,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696390810
    },
    {
        "content": "<p>numbers are def not the only thing you could have a range of, so I think that's fine. What I would really want would be an ability for comparison.</p>",
        "id": 394752629,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696391094
    },
    {
        "content": "<p>Yeah unfortunately there is no way to constrain a type variable to be numeric. I think this should all work correctly if the appropriate abilities were available.</p>",
        "id": 394752678,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696391129
    },
    {
        "content": "<p>That makes sense! The errors were confusing but I've learned something.</p>",
        "id": 394753212,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696391418
    },
    {
        "content": "<p>Day 4 <a href=\"https://github.com/mulias/roctoberfest/tree/main/advent_2022/day_04\">https://github.com/mulias/roctoberfest/tree/main/advent_2022/day_04</a></p>",
        "id": 394753350,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696391515
    }
]