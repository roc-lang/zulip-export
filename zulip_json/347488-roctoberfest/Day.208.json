[
    {
        "content": "<p>Day 8 was frustrating, but not for Roc reasons - I just don't really like the problem that much. On the Roc side I found myself really reaching for a <code>crash</code>/<code>unreachable</code> function, which I wrote here - it's just not useful to model the data in such a specific way as to not have to use it, IMO. I think the <a href=\"https://github.com/ayazhafiz/roc-advent-of-code/blob/28c22ef3a242e9915f22b005fa197aebe1d7971b/2021/day8.roc#L82-L116\">parser I wrote was the most interesting part of today</a>. The combinator library is coming along nicely</p>",
        "id": 302938446,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665178793
    },
    {
        "content": "<p>Also having to write two separate functions for get-or-crash for Dict and List (<a href=\"https://github.com/ayazhafiz/roc-advent-of-code/blob/28c22ef3a242e9915f22b005fa197aebe1d7971b/2021/day8.roc#L137-L145\">https://github.com/ayazhafiz/roc-advent-of-code/blob/28c22ef3a242e9915f22b005fa197aebe1d7971b/2021/day8.roc#L137-L145</a>) had me reaching for higher kinds a bit.. but not enough for it to matter</p>",
        "id": 302938556,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665178832
    },
    {
        "content": "<p>Just read the first part of the problem. I can immediately see why it would be frustrating.</p>",
        "id": 302967457,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665205858
    },
    {
        "content": "<p>Just finished day 8. Was not horrid, but was definitely annoying: <a href=\"https://github.com/bhansconnect/roc-aoc-2021/blob/trunk/day8/part2.roc\">https://github.com/bhansconnect/roc-aoc-2021/blob/trunk/day8/part2.roc</a></p>",
        "id": 302970522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665209195
    },
    {
        "content": "<p>One main thing that bit me was forgetting that <code>==</code> does not do what you would expect on a set. It compares the underlying lists in order rather than comparing the sets.</p>",
        "id": 302970939,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665209649
    },
    {
        "content": "<p>I forget what we decided about that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 302971602,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665210278
    },
    {
        "content": "<p>like whether <code>==</code> on sets and dictionaries should ignore insertion order, even though that would mean <code>a == b</code> would not imply <code>walk a state fn == walk b state fn</code> for dictionaries and sets</p>",
        "id": 302971736,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665210375
    },
    {
        "content": "<p>Since we are allowing user defined types to implement the Eq ability and get a custom <code>==</code>, we will also change <code>==</code> on sets and dictionaries to ignore insertion order.</p>",
        "id": 302972506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665211095
    },
    {
        "content": "<p>I think that was more or less the last state of discussion</p>",
        "id": 302972522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665211128
    },
    {
        "content": "<p>Of course we will have a insertion order perserving set and dict, so at least construction more clearly defines ordering.</p>",
        "id": 302972685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665211233
    },
    {
        "content": "<p><a href=\"https://github.com/ghigt/advent-of-code/blob/main/roc/day-8/part2.roc\">https://github.com/ghigt/advent-of-code/blob/main/roc/day-8/part2.roc</a><br>\nThis one was definitely not funny...<br>\nI find the need for an integrated editor, I've been lost several times in the algorithm.<br>\nThanks to <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> I discovered that <code>expect</code> can be helpful outside functions (waiting for <a href=\"https://github.com/roc-lang/roc/issues/4093\">issue 4093</a>).</p>\n<p>I still find coding in JS/TS easier because of the vscode help on current types. I find myself coding differently by easily \"<code>console.log</code>ing\" each functions. In Roc, my brain is lazy on writing a long <code>Dict</code>/<code>Set</code> to tests function calls.</p>\n<p>I like finding definition of functions in the <code>repl</code>, but it fails on some calls (eg. <code>Dict.get</code>, <code>Dict.update</code>...). Would also be happy to have the doc associated with it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 304678720,
        "sender_full_name": "Ghislain",
        "timestamp": 1666099933
    }
]