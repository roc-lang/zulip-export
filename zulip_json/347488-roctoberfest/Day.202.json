[
    {
        "content": "<p>For day-2, I've been a bit stuck to find the idiomatic way to extract the 2 values from the string. Looking forward to see your findings.<br>\nAnd I fought again against the compiler with a miss interpretation of <code>|&gt;</code> in this example:</p>\n<div class=\"codehilite\"><pre><span></span><code>lines\n|&gt; List.map \\line -&gt; Str.split line &quot; &quot; # here the compiler will think the next line belongs to the anonymous function, I have to add parentheses\n|&gt; List.walk ...\n</code></pre></div>\n<p>Intuitively I would like the compiler to understand the indentation which goes back to the first \"scope\".</p>",
        "id": 301873995,
        "sender_full_name": "Ghislain",
        "timestamp": 1664664978
    },
    {
        "content": "<p>I've definitely been tripped up by that before!</p>",
        "id": 301876931,
        "sender_full_name": "jan kili",
        "timestamp": 1664667681
    },
    {
        "content": "<p>Yeah, i always parenthize lambdas unless I am using backpacking or they are on their own indented scope with new lines</p>",
        "id": 301877711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664668502
    },
    {
        "content": "<p>Just created my day 2: <a href=\"https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day2\">https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day2</a></p>\n<p>I think that results and <a href=\"http://List.map\">List.map</a> and such or nested when statements is less clean than I would like, but the solution turned out fine.</p>",
        "id": 301898225,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664692977
    },
    {
        "content": "<blockquote>\n<p>I like how the Day 2 parser turned out.</p>\n</blockquote>\n<p>I like your use of Str.splitFirst, it definitely helps make it cleaner/more direct than just using Str.split like I did.</p>",
        "id": 301898278,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664693040
    },
    {
        "content": "<p>As people do day two and mess with parsing, I am really interesting in ways to deal with the parsing, while using pipelining, and avoid explicit branches as much as possible. I feel like I tend to get into chases with nested Results that make that hard. Make the pipeline a lot less pretty.</p>",
        "id": 301945727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664723710
    },
    {
        "content": "<p>I want to write a small parser combinator library as I do the 2021 exercises, so that there is something easier to use for the AoC in december</p>",
        "id": 301946549,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664724182
    },
    {
        "content": "<p>We have a parser lib in the examples directory, could be a starting point.</p>",
        "id": 301946967,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664724437
    },
    {
        "content": "<p>I'd suggest using the elm parser library as a template <a href=\"https://github.com/elm/parser/tree/1.1.0\">https://github.com/elm/parser/tree/1.1.0</a> it's a pretty efficient way to do things and has at least some built-in support for adding context/error messages</p>",
        "id": 301947200,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664724583
    },
    {
        "content": "<p>I think parsers may be our largest class of examples. We have the CSV parser, a Base64 parser, JSON parsing, and CLI arg parsing so far!</p>",
        "id": 301947905,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664724999
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Well I suppose it was inevitable that bunch of people interested in new languages would build a load of parsers!</p>",
        "id": 301952129,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1664727624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"508003\">@Qqwy / Marten</span> thanks for such a sweet parser base from the CSV example. Wrote this parser for the day 2 input: <a href=\"https://gist.github.com/ayazhafiz/35449afcaf3c2b06f577ab9ff3806c16\">https://gist.github.com/ayazhafiz/35449afcaf3c2b06f577ab9ff3806c16</a></p>\n<p>Feels like parsec again <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 301981018,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664752179
    },
    {
        "content": "<p>Ideally <code>(\\_ -&gt; (\\n -&gt; Forward n))</code> could be reduced to <code>(\\_ -&gt; Forward)</code> but that doesn't check today: <a href=\"https://github.com/roc-lang/roc/issues/4150\">https://github.com/roc-lang/roc/issues/4150</a></p>",
        "id": 301981082,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664752221
    },
    {
        "content": "<p>I'm getting a strange error on my Day 2 code. I would appreciate any assistance figuring out what I am doing wrong. <a href=\"https://gist.github.com/lukewilliamboswell/5d3d90bfc6bb27d7c9ef586706a19fa7\">Day 2 Error</a></p>",
        "id": 302608310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665046557
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 302623065,
        "sender_full_name": "Anton",
        "timestamp": 1665052286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <code>List.keepOks</code> is expecting to take a function that returns a <code>Result</code> but your function is returning <code>[Dn U64, Fd (Int Unsigned64), Up U64]a</code>.<br>\nIt's best to run the command <code>roc you_folder/main.roc</code> so you can see build errors, I believe you've been using <code>roc run your_folder/main.roc</code>. <code>roc run</code> will try to run the program even if there are build errors.</p>",
        "id": 302626252,
        "sender_full_name": "Anton",
        "timestamp": 1665053636
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> for your help. I'll skip the roc <em>run</em> in future. I just figured it out and uploaded/updated my solution. I was staring at it a while before I could see that. <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 302626693,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665053800
    },
    {
        "content": "<p>I feel like I am separating out my functions and adding unit tests for them to check my assumptions and find where the error is. I imagine as I get more familiar and confident with the syntax that wont be necessary. </p>\n<p>Sometimes the errors are really hard to decipher and not the pretty printed ones, which are always very helpful. Do you know if the goals is/or it will be possible for Roc or the platforms mature to a point where it is unlikely to get an error that isn't pretty formatted?</p>",
        "id": 302627991,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665054317
    },
    {
        "content": "<p>I think every build error that is not pretty printed is a compiler bug. So yeah all build errors should definitely end up pretty printed :)</p>",
        "id": 302633321,
        "sender_full_name": "Anton",
        "timestamp": 1665056407
    },
    {
        "content": "<p>yeah any time you hit one of those, it would be great if you could share it! That way we can prioritize looking into it. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 302661254,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665065341
    },
    {
        "content": "<p>we know those are still lurking in the code base, but we don't know where they all are</p>",
        "id": 302661309,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665065357
    },
    {
        "content": "<p>Antoher note: <code>roc dev</code> is probably the best thing here. It first runs <code>roc check</code> and then <code>roc run</code>. <code>roc check</code> tends to print out better errors in cases that the compiler might crash or hit bugs.</p>",
        "id": 302674684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665068926
    },
    {
        "content": "<p><code>roc filename.roc</code> has been changed some time ago to do the same thing as <code>roc dev filename.roc</code></p>",
        "id": 302694359,
        "sender_full_name": "Anton",
        "timestamp": 1665074258
    },
    {
        "content": "<p>See <a href=\"https://github.com/roc-lang/roc/blob/main/crates/cli/src/main.rs\">https://github.com/roc-lang/roc/blob/main/crates/cli/src/main.rs</a></p>",
        "id": 302694432,
        "sender_full_name": "Anton",
        "timestamp": 1665074276
    },
    {
        "content": "<p>oh, missed that. I thought that <code>roc ...</code> was essentially build and run if no error. I thought <code>roc dev ...</code> was check, build, and run if no error.</p>",
        "id": 302696602,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665074977
    },
    {
        "content": "<p>it's going to become different though, specifically with regards to <code>expect</code> - so <code>roc dev</code> is the one to use now!</p>",
        "id": 302697166,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665075135
    },
    {
        "content": "<p>the other one is strictly for running hashbang scripts now (since those can't necessarily pass subcommands to <code>roc</code>)</p>",
        "id": 302697321,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665075178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"528453\">Ghislain</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Day.202/near/301873995\">said</a>:</p>\n<blockquote>\n<p>For day-2, I've been a bit stuck to find the idiomatic way to extract the 2 values from the string. Looking forward to see your findings.<br>\nAnd I fought again against the compiler with a miss interpretation of <code>|&gt;</code> in this example:</p>\n<div class=\"codehilite\"><pre><span></span><code>lines\n|&gt; List.map \\line -&gt; Str.split line &quot; &quot; # here the compiler will think the next line belongs to the anonymous function, I have to add parentheses\n|&gt; List.walk ...\n</code></pre></div>\n<p>Intuitively I would like the compiler to understand the indentation which goes back to the first \"scope\".</p>\n</blockquote>\n<p>it now does as of <a href=\"https://github.com/roc-lang/roc/issues/4139\">https://github.com/roc-lang/roc/issues/4139</a> being fixed (thanks <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span>!) so this should Just Work on the next nightly!</p>",
        "id": 303083534,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665282804
    },
    {
        "content": "<p>Day 2 <a href=\"https://github.com/michallepicki/adventofcode/tree/master/2021/roc/2\">done</a>! I filed two more Roc issues while working on it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 304511709,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1666026132
    },
    {
        "content": "<p>Congrats!! And thanks for the issues :) they help us see what really needs fixing!</p>",
        "id": 304512395,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1666026347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> has marked this topic as resolved.</p>",
        "id": 304512398,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666026348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> has marked this topic as unresolved.</p>",
        "id": 304512410,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666026352
    },
    {
        "content": "<p>(oops, accidentally clicked resolve)</p>",
        "id": 304512445,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1666026363
    }
]