[
    {
        "content": "<p>Just did day 10. Actually used a tag for once. Overall was quite straightforward: <a href=\"https://github.com/bhansconnect/roc-aoc-2021/blob/trunk/day10/part2.roc\">https://github.com/bhansconnect/roc-aoc-2021/blob/trunk/day10/part2.roc</a></p>\n<p>In the last 2 problems, I defined a crash helper for simplicity. probably could be written better:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">crashInternal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n\n<span class=\"n\">crashInternal</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">crashInternal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303075827,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665274365
    },
    {
        "content": "<p>Also, I feel the more pipelining I do, the less backpassing I do. I guess it is backpassing for tasks and pipelining for data manipulation.</p>",
        "id": 303075855,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665274394
    },
    {
        "content": "<p>you could make crash simpler as just</p>\n<p>crash : {} -&gt; a</p>\n<p>and leave the body unimplemented</p>",
        "id": 303075985,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665274536
    },
    {
        "content": "<p>or if you want a body (for some reason):</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"></span>\n<span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">u8</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303076172,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665274699
    },
    {
        "content": "<p>Without a body wouldn't roc check fail?</p>",
        "id": 303081379,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665280498
    },
    {
        "content": "<p>And roc dev</p>",
        "id": 303081389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665280503
    },
    {
        "content": "<p>no</p>",
        "id": 303081585,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665280762
    },
    {
        "content": "<p>I am very confused... Why is an undefined function with only a prototype not a warning?</p>",
        "id": 303082282,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665281438
    },
    {
        "content": "<p>I believe the idea is to let you sketch out a design for a program and get parts of it working. The undefined function bodies get replaced with <code>roc_panic</code> I think</p>",
        "id": 303146601,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665330326
    },
    {
        "content": "<p>yeah, although we should probably give a reminder somehow</p>",
        "id": 303151956,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665333740
    },
    {
        "content": "<p>maybe a little note at the end like: \"these functions don't have implementations yet: <code>Foo.bar</code>, <code>Baz.blah</code>, ...\"</p>",
        "id": 303151988,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665333778
    },
    {
        "content": "<p>sure, but <code>roc check</code> is supposed to fail CI on warnings or errors. I think not defining a function is something worth failing CI over.</p>",
        "id": 303152830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665334343
    },
    {
        "content": "<p>Good point!</p>",
        "id": 303153074,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665334536
    },
    {
        "content": "<p><a href=\"https://github.com/ghigt/advent-of-code/tree/main/roc/day-10\">https://github.com/ghigt/advent-of-code/tree/main/roc/day-10</a><br>\nAn easy one (or I'm better than before <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)<br>\nLooks like challenge motivation has been lost, I will probably continue without notify. It has been very entertaining and instructive to do it, lot of progress done. My brain is now directly thinking in Roc instead of Go or JS. Looking forward for easier debug and editor type help for AoC 2022 <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 305592410,
        "sender_full_name": "Ghislain",
        "timestamp": 1666476644
    },
    {
        "content": "<p>Yeah, we are apparently like regular advent if code people. Day ten is a far way to make it.</p>",
        "id": 305592877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666477099
    },
    {
        "content": "<blockquote>\n<p>Looking forward for easier debug and editor type help for AoC 2022 <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n</blockquote>\n<p>editor type help will unfortunately not be ready for AoC 2022, we had this working for small programs but we have a big rewrite planned of an important part of the editor. So it does not make sense to try to expand type help before that because we'd have to throw a lot of it out.</p>",
        "id": 305632682,
        "sender_full_name": "Anton",
        "timestamp": 1666511577
    }
]