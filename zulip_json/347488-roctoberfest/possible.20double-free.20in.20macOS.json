[
    {
        "content": "<p>While implementing day 4, I seem to have stumbled upon a bug. First, it was <a href=\"https://github.com/roc-lang/roc/issues/4334\">this</a>, but after removing a few conditionals I am stuck with the following error message.</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; roc run problem4.roc\nðŸ”¨ Rebuilding platform...\nroc_app_binary(26947,0x1185df600) malloc: *** error for object 0x7f9f61720790: pointer being freed was not allocated\nroc_app_binary(26947,0x1185df600) malloc: *** set a breakpoint in malloc_error_break to debug\nfish: Job 1, &#39;roc run problem4.roc&#39; terminated by signal SIGABRT (Abort)\n</code></pre></div>\n<p>The code causing this is <a href=\"https://hastebin.com/bujipinehi.roc\">here</a>. Sorry, it's not really a minimal example, but I'm not sure what how to reduce it^^</p>",
        "id": 304337033,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1665944227
    },
    {
        "content": "<p>Can you share your <code>Helpers</code> file?</p>",
        "id": 304337801,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665944673
    },
    {
        "content": "<p><a href=\"https://hastebin.com/awuyiveres.roc\">sure</a></p>",
        "id": 304338101,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1665944844
    },
    {
        "content": "<p>Interesting, it looks to be a double free somehow.</p>",
        "id": 304338878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665945283
    },
    {
        "content": "<p>Hmm, yeah. I am not sure exactly what is going on from base debugging. Probably one of our builtins is freeing something it shouldn't or we aren't emitting a refcount increment when we should be. Can you file a bug? Minimal repro would be great, but it is fine if that is too hard to minimize. I might take a look on my linux machine later. Valgrind or gdb should give me a clearer idea than lldb on macos.</p>",
        "id": 304340309,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665946114
    },
    {
        "content": "<p>I'll try a bit to isolate a minimal example, but failing that I'll just create an issue with the current code.<br>\nWhat I've noticed so far: When I do only the <code>getWinnerScore</code> <em>or</em> the <code>getLoserScore</code> calculation and substitute the other with a hardcoded value the code does not crash</p>",
        "id": 304341668,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1665946940
    },
    {
        "content": "<p>or it's intermittent and only calling the referenced functions once instead of twice increases the chance of the program running through... fun</p>",
        "id": 304342018,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1665947166
    },
    {
        "content": "<p>Yeah, this is definitely the case of Roc wrongly freeing something and then accessing it over and over again after it is freed.</p>",
        "id": 304518972,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666028335
    },
    {
        "content": "<p>It will succeed on linux, but that is only because nothing happens to overwrite the freed memory and linux allows you to access freed memory with no complaints unlike machos. When run with valgrind, it has thousands of reeds to the same already freed chunk of data.</p>",
        "id": 304519164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666028394
    }
]