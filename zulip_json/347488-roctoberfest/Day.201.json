[
    {
        "content": "<p>Ha! Just finished the first one. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p><a href=\"https://gist.github.com/georgesboris/3c43ed7618f5816df85d620c41eea73c\">https://gist.github.com/georgesboris/3c43ed7618f5816df85d620c41eea73c</a></p>\n<p>Loved the experience! Here are a few takeaways:</p>\n<ul>\n<li>Being able to just define tags was a pleasant surprise! I knew about the language feature but actually using it made me appreciate it even more.</li>\n<li>I ran into a compiler warning marked as TODO when I tried to mix record extension with Elm's <code>=</code> syntax <code>{ state &amp; num = 0 }</code>. Maybe something the compiler could be prepared for so it gives a helpful message?</li>\n<li>The docs website is still a bit painful to use mainly because the navigation gets lost when I scroll down (can I open a PR with minor UX improvements?)</li>\n<li>It would be awesome to have the \"base language\" tutorial as part of the main docs website. I had to jump between both a few times.</li>\n<li>It would be amazing to have something like an \"alias search\" for docs (maybe even inside the compiler?) -- e.g. I was trying to use <code>List.length</code> and <code>List.foldl</code> and the only way for me to figure out we use <code>List.len</code> (short name :( why) and <code>List.walk</code> was to just read through the docs. If there was some way for a module author to specify common aliases then maybe the compiler could give me a more helpful message? The same thing occurred when trying to go for <code>List.filterMap</code> to filter out results - then I've found the super helpful function <code>List.keepOks</code>. I think that working on a \"discovery experience\" will be a great selling point when first learning the language (or learning a new module).</li>\n</ul>",
        "id": 301819010,
        "sender_full_name": "Georges Boris",
        "timestamp": 1664629828
    },
    {
        "content": "<p>Ah! The tag pattern matching + guard clauses are awesome <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> I will miss them when going back to Elm for sure</p>",
        "id": 301819198,
        "sender_full_name": "Georges Boris",
        "timestamp": 1664629922
    },
    {
        "content": "<p>Thank you so much <span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span> :) Excellent feedback!<br>\nPR for UX is good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><br>\nCan you make issues for the listed pain points if you have the time?</p>",
        "id": 301821178,
        "sender_full_name": "Anton",
        "timestamp": 1664630816
    },
    {
        "content": "<p>Thank you for that feedback, <span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span> ! And nicely done on solving the <a href=\"https://adventofcode.com/2021/day/1\">Advent of Code 2021 Day 1 puzzle</a>. I'm hoping to do days 1-3 on Monday. I wonder who else will tackle day 1 today...</p>",
        "id": 301828461,
        "sender_full_name": "jan kili",
        "timestamp": 1664634247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span>  Are you sure to have completed the entire 1st day and not the half? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 301829459,
        "sender_full_name": "Ghislain",
        "timestamp": 1664634763
    },
    {
        "content": "<p>Good point, <span class=\"user-mention\" data-user-id=\"528453\">@Ghislain</span> , I forgot to mention - every AoC puzzle has two halves! Feel free to do one or both, but it's nice that we effectively have 62 puzzles available <span aria-label=\"present\" class=\"emoji emoji-1f381\" role=\"img\" title=\"present\">:present:</span> <span aria-label=\"present\" class=\"emoji emoji-1f381\" role=\"img\" title=\"present\">:present:</span></p>",
        "id": 301829896,
        "sender_full_name": "jan kili",
        "timestamp": 1664634986
    },
    {
        "content": "<p>My code is not as clean as yours! <a href=\"https://github.com/ghigt/advent-of-code\">https://github.com/ghigt/advent-of-code</a></p>\n<p>After a period of frustration on how to deal with the tags and especially retrieve the results contained inside. A lot of indentation in the <code>when</code> pattern, but after a lot of searching in the docs and tutorials I managed to find just about everything I wanted (I agree that it's still not very easy to find my way around at the moment). </p>\n<p>Curiously, writing in the 3 other languages allowed me to find new ways to implement the algorithm and features in Roc (especially with Rust).</p>\n<p>After a few iterations of implementation, I am quite satisfied with the result and I enjoyed writing in Roc for its syntax simplicity!</p>\n<p>What I remember (for a beginner in FP) after this 1st day:</p>\n<ul>\n<li>Tags are really a joy</li>\n<li>I would have liked a <code>when</code> which takes <code>tuples</code> to be able to test 2 values (<code>when (a, b) is</code>) at the same time (for the moment I use what is marked in the elm-tutorial <code>when Pair a b is</code>) </li>\n<li>I really feel like coding with the help of the compiler (although I miss the editor integration :P)</li>\n<li>Still a lot of difficulties to understand and deal with <code>Task</code>/<code>Effect</code> and what a simple <code>Program</code> expect.</li>\n</ul>",
        "id": 301832123,
        "sender_full_name": "Ghislain",
        "timestamp": 1664636004
    },
    {
        "content": "<p>I guess I should try and do this before looking at anything. Though I think I already did a few of these problems last year in BQN, so I am familiar.</p>",
        "id": 301832453,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664636132
    },
    {
        "content": "<p>Would love to know what is or is not idiomatic in my code to know how to improve it.</p>",
        "id": 301832470,
        "sender_full_name": "Ghislain",
        "timestamp": 1664636139
    },
    {
        "content": "<p>That's one of the exciting things about Roc - I don't think there is a such thing as idiomatic Roc yet, we're inventing/discovering that right now!</p>",
        "id": 301832545,
        "sender_full_name": "jan kili",
        "timestamp": 1664636167
    },
    {
        "content": "<p>General question: Are people parsing or just copying the data into a list? I mean in this case the parsing is super simple, but I know it can sometimes get more annoying.</p>",
        "id": 301832585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664636190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> That was one of the things I was most curious to see on day 1.</p>",
        "id": 301832656,
        "sender_full_name": "jan kili",
        "timestamp": 1664636220
    },
    {
        "content": "<p>I parsed the file, and <span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span> copied it inside its <code>.roc</code> file</p>",
        "id": 301832778,
        "sender_full_name": "Ghislain",
        "timestamp": 1664636274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> whoops! had no idea there was a part 2 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 301836999,
        "sender_full_name": "Georges Boris",
        "timestamp": 1664638700
    },
    {
        "content": "<p>I decided to go the file parsing route. I also decided to take an arg for the file name to process.<br>\nMy day 1 code is here: <a href=\"https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day1\">https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day1</a></p>",
        "id": 301838992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664639877
    },
    {
        "content": "<p>Overall went pretty well. Took a bit of doc diving as I tried to use proper functions. Also definitely took more time to setup the base structure than to solve the real problem</p>",
        "id": 301839123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664639929
    },
    {
        "content": "<p>I feel like my actual solutions once the data is loaded are pretty simple and nice. That being said, they are also not efficient...but eh...not important for this amount of data.</p>",
        "id": 301839194,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664639971
    },
    {
        "content": "<p>I think may main question: Would it be worth adding a <code>List.countIf</code> function? Instead I just used <code>List.keepIf</code> and then <code>List.len</code> which woud be way way less efficient. I also could have used a walk, but that requires state management and I didn't feel like it.</p>",
        "id": 301839391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664640092
    },
    {
        "content": "<p>This is definitely a useful pipeline stage: <code>|&gt; List.keepIf (\\x -&gt; x)</code> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 301839480,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664640133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"528453\">Ghislain</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Show.20and.20Tell/near/301832470\">said</a>:</p>\n<blockquote>\n<p>Would love to know what is or is not idiomatic in my code to know how to improve it.</p>\n</blockquote>\n<p>Your code looks just fine. That being said, it definitely looks more like a port of imperative code rather than normal FP code. I feel like FP tends to break things up into stages and try to avoid all the work you had to explicitly do via state management. On the other hand, your solution should be reasonably efficient.</p>\n<p>If you compare to my solution for part2: <a href=\"https://github.com/bhansconnect/roc-aoc-2021/blob/b4981b6f334c1a95fde72e5c46b23e99ff4a5e4f/day1/part2.roc#L64\">https://github.com/bhansconnect/roc-aoc-2021/blob/b4981b6f334c1a95fde72e5c46b23e99ff4a5e4f/day1/part2.roc#L64</a><br>\nLong term in Roc (once we have seamless slices), my algorithm would do the same work as yours with the extra cost of 3 lists:</p>\n<ul>\n<li>1 list for the movingSum.</li>\n<li>1 list for the booleans</li>\n<li>1 list for the keepIf</li>\n</ul>",
        "id": 301840711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664640875
    },
    {
        "content": "<p>Was thinking about taking advantage of map2/3, happy to have seen your implementation with it!</p>",
        "id": 301840746,
        "sender_full_name": "Ghislain",
        "timestamp": 1664640892
    },
    {
        "content": "<p>That being said, most of those lists could go away while keeping things relatively simple:</p>\n<ul>\n<li>movingSum could go away if we had a <code>walk3</code> method</li>\n<li>the boolean list and the keepIf list would go away if we had a <code>countIf</code> method.</li>\n</ul>",
        "id": 301840933,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664640969
    },
    {
        "content": "<p>That being said, pipelining will likely always be slightly less performant if the implementation isn't careful due to extra allocation. Though I do reduce the amount of branches which could lead to a win in some case.</p>",
        "id": 301841049,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664641066
    },
    {
        "content": "<p>I was trying to do only one iteration over the list to be efficient, but is it? Your impl' looks a LOT smaller and easier to read even though you create multiple iterations/lists.</p>",
        "id": 301841178,
        "sender_full_name": "Ghislain",
        "timestamp": 1664641131
    },
    {
        "content": "<p>With seamless slice such that <code>list.dropFirst</code> does not cause a copy and the edition of <code>countIf</code>, I would probably expect my implementation to run faster. It would allocate once for the <code>movingSum</code> and then just process into that and over it to get the final result. It would be done with no branching (assuming <code>countIf</code> compiles correctly)</p>",
        "id": 301841401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664641264
    },
    {
        "content": "<p>All the work of checking optionals and nested branches that your implementation does would probably cost more, but also, you could optimize away a number of those branches with some minor changes</p>",
        "id": 301841453,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664641305
    },
    {
        "content": "<p>I think ultimately the fastest way would be just walk once (using <code>walk3</code> and <code>list.dropFirst</code> with seamless slices) while only tracking the last sum and total count. You would init the last sum to -1 because that is guaranteed smaller than any value. The count you would increment on every loop, but using cmov to avoid the cost of an unpredictable branch (using inline if in roc would probably do this).</p>",
        "id": 301841864,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664641497
    },
    {
        "content": "<p>Huge thanks for this feedback!</p>",
        "id": 301842329,
        "sender_full_name": "Ghislain",
        "timestamp": 1664641747
    },
    {
        "content": "<p>Had a lot of fun doing the first problem today. Roc is such a pleasure to use!</p>",
        "id": 301850598,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664646844
    },
    {
        "content": "<p>For the second part, I used a walk holding state of the last two elements, rather than chopping out two additional lists: <a href=\"https://gist.github.com/ayazhafiz/0d5d40b35bb58f79fb742b1d2ec7515c\">https://gist.github.com/ayazhafiz/0d5d40b35bb58f79fb742b1d2ec7515c</a></p>",
        "id": 301850640,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664646882
    },
    {
        "content": "<p>one thing that actually surprised me at first is that if you define a function like</p>\n<div class=\"codehilite\"><pre><span></span><code>foo = \\tag -&gt;\n  when tag is\n    Tag A (Ok _) -&gt; ...\n    Tag A (Err _) -&gt; ...\n    Tag B _ -&gt; ...\n</code></pre></div>\n<p>this actually gets inferred to <code>[Tag [A, B] [Ok *, Err *]*]</code>, and not <code>[Tag [A, B] [Ok *, Err *]]</code> as you might expect (note the addition of the open tag union in the inferred type!). That's because the <code>Tag B _</code> case is catch-all, so you need type annotations here.. but I wonder if we can make this better somehow.</p>",
        "id": 301850912,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664647056
    },
    {
        "content": "<p>That's definitely a direct and clean solution</p>",
        "id": 301851758,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664647562
    },
    {
        "content": "<p>Mine is definitely implemented closer to how someone might do it in an array language.</p>",
        "id": 301851815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664647591
    },
    {
        "content": "<p>Which is a tad weird for an FP language</p>",
        "id": 301851834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664647615
    },
    {
        "content": "<p>your solution also works well for lazy languages, like haskell</p>",
        "id": 301851888,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664647661
    },
    {
        "content": "<p>Ah. That's fair</p>",
        "id": 301854384,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664649331
    },
    {
        "content": "<p>ok - got 5 minutes of free time and managed to finish the 2nd part of day 1 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nturns out it was just a single diff :)<br>\n<a href=\"https://gist.github.com/georgesboris/85dbd20b3c8c1be752fe252a59309cdb\">https://gist.github.com/georgesboris/85dbd20b3c8c1be752fe252a59309cdb</a></p>",
        "id": 301878039,
        "sender_full_name": "Georges Boris",
        "timestamp": 1664668869
    },
    {
        "content": "<p>I wanted to catch up on Roc for a while but life kept on happening. With rocktoberfest here, I had no excuses.</p>\n<p>I did the tutorials first and I'm still trying to wrap my head around <code>Program</code> and <code>Task</code>. <code>Program.quick</code> seems good enough for AoC (and easy to understand). I encountered a lot of compiler crashes esp. when there was a type mismatch. But the rest of my experience was great. Love the language and the api docs. </p>\n<p>One thing I noticed was that tags being first class functions makes up for the lack of partial function application. I like how the Day 2 parser turned out. </p>\n<p>Anyway, here's my Day1: <a href=\"https://github.com/shritesh/advent/blob/main/2021/1.roc\">https://github.com/shritesh/advent/blob/main/2021/1.roc</a> and Day2: <a href=\"https://github.com/shritesh/advent/blob/main/2021/2.roc\">https://github.com/shritesh/advent/blob/main/2021/2.roc</a></p>\n<p>Looking forward to doing the rest as well.</p>",
        "id": 301897732,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1664692516
    },
    {
        "content": "<p>I'm finally reading day 1 solutions, and I'm already thrilled</p>",
        "id": 301992226,
        "sender_full_name": "jan kili",
        "timestamp": 1664765667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span> <code>Just l if l &lt; num -&gt; { next &amp; result: state.result + 1 }</code> is brilliant!</p>",
        "id": 301992236,
        "sender_full_name": "jan kili",
        "timestamp": 1664765693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span> <span class=\"user-mention\" data-user-id=\"528453\">@Ghislain</span> <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> <span class=\"user-mention\" data-user-id=\"452038\">@Shritesh Bhattarai</span> <span class=\"user-mention\" data-user-id=\"550485\">@Mike Kalvas</span> Do I have your permission to show/mention your solutions for day 1 (and potentially other days going forward) in a public YouTube video?</p>",
        "id": 302060804,
        "sender_full_name": "jan kili",
        "timestamp": 1664802817
    },
    {
        "content": "<p>Sure!</p>",
        "id": 302060961,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1664802863
    },
    {
        "content": "<p>Yeah</p>",
        "id": 302061016,
        "sender_full_name": "Mike Kalvas",
        "timestamp": 1664802877
    },
    {
        "content": "<p><a href=\"https://github.com/tritowntim/roctoberfest/blob/main/2021/01/main.roc\">https://github.com/tritowntim/roctoberfest/blob/main/2021/01/main.roc</a></p>\n<p>My first roc <span aria-label=\"guitar\" class=\"emoji emoji-1f3b8\" role=\"img\" title=\"guitar\">:guitar:</span> ... array destructuring would be nice, <code>List.len</code> felt clunky... but it feels so Elm-y <span aria-label=\"drooling\" class=\"emoji emoji-1f924\" role=\"img\" title=\"drooling\">:drooling:</span></p>",
        "id": 302379331,
        "sender_full_name": "Tim",
        "timestamp": 1664938655
    },
    {
        "content": "<p>Can someone please have a look at my code and help me figure out what is wrong with my Task. I have been playing around for this a while, but the compiler error is a bit hard to decipher. It passes all the tests, and I am confident it reads the file correctly, just not sure about the Task.attempt which is where I think there is an error. <a href=\"https://gist.github.com/lukewilliamboswell/c56875b1828f0fc1fa9560bb2a029a14\">aoc day 1 roc attempt</a></p>",
        "id": 302401093,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1664955103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> to use <code>fileContents</code> as a <code>Task</code> with <code>Task.map</code>, you need to remove the backpassing syntax and <code>Task.await</code> (otherwise its type is just a <code>Str</code>).<br>\nThe other issue you will have is that your <code>count</code> is a <code>Result U64</code> (inside a <code>Task</code>) but you try to concat it to a <code>Str</code>. You will need to transform it (in the same inspiration as your code, you could add <code>countStr = Task.map count Num.toStr</code> and <code>Task.attempt</code> it instead of <code>count</code>)</p>",
        "id": 302418178,
        "sender_full_name": "Ghislain",
        "timestamp": 1664961800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"528453\">Ghislain</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Day.201/near/302418178\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> to use <code>fileContents</code> as a <code>Task</code> with <code>Task.map</code>, you need to remove the backpassing syntax and <code>Task.await</code> (otherwise its type is just a <code>Str</code>).<br>\nThe other issue you will have is that your <code>count</code> is a <code>Result U64</code> (inside a <code>Task</code>) but you try to concat it to a <code>Str</code>. You will need to transform it (in the same inspiration as your code, you could add <code>countStr = Task.map count Num.toStr</code> and <code>Task.attempt</code> it instead of <code>count</code>)</p>\n</blockquote>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"528453\">@Ghislain</span> I managed to get something working. I'm pretty happy with the result. I updated my gist in case anyone is interested.</p>",
        "id": 302435960,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1664969250
    },
    {
        "content": "<p>I just finished doing Part B of the first day. Though my function is a little crazy.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">getAnswer</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"></span>\n<span class=\"nv\">getAnswer</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">measurements</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">measurement</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">measurements</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">first</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Start</span><span class=\"p\">,</span><span class=\"nv\">second</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Start</span><span class=\"p\">,</span><span class=\"nv\">third</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">previousSum</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">increases</span><span class=\"nf\">:</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Start</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"nf\">:</span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">measurement</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">firstMeasurement</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">second</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kt\">Start</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">second</span><span class=\"nf\">:</span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">measurement</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">secondMeasurement</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">third</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kt\">Start</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">third</span><span class=\"nf\">:</span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">measurement</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">previousSum</span><span class=\"nf\">:</span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">firstMeasurement</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">secondMeasurement</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">measurement</span><span class=\"p\">)}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">thirdMeasurement</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">previousSum</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"kt\">Start</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">previousSum</span><span class=\"nf\">:</span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">firstMeasurement</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">secondMeasurement</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">thirdMeasurement</span><span class=\"p\">)}</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">previousSum</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">measurement</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">secondMeasurement</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">thirdMeasurement</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"nv\">newAcc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">acc</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">secondMeasurement</span><span class=\"p\">,</span><span class=\"nv\">second</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">thirdMeasurement</span><span class=\"p\">,</span><span class=\"nv\">third</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">measurement</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">previousSum</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">sum</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">previousSum</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">newAcc</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">increases</span><span class=\"nf\">:</span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">increases</span><span class=\"nf\">+</span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"nv\">newAcc</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there a way to pattern-match my values without nesting? In Elm, I would have done the following:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">getAnswer</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"></span>\n<span class=\"nv\">getAnswer</span><span class=\"w\"> </span><span class=\"nv\">measurements</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">case</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">second</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">third</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">acc</span><span class=\"nf\">.</span><span class=\"nv\">previousSum</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">Start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303092885,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665292948
    },
    {
        "content": "<p>I did it similar, built a filter to take the numbers and then add them using a sliding window.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">slidingWindow</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"></span>\n<span class=\"n\">slidingWindow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">depths</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">depths</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">n1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">n2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">filtered</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">n1</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"nc\">Nothing</span><span class=\"w\"> </span><span class=\"nc\">Nothing</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">n1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">n2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Nothing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">filtered</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">n1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">Nothing</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">n1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">n2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">n1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">filtered</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">n1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">n2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">n1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">n2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Just</span><span class=\"w\"> </span><span class=\"n\">n1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">filtered</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"nc\">Pair</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"n\">filtered</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303093379,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665293614
    },
    {
        "content": "<p>I had to use the [Nothing, Just U64] as the first and second numbers you need to handle as special cases. So <code>n1</code> is like the <code>n-1</code>th index and <code>n2</code> is like <code>n-2</code>nd index.</p>",
        "id": 303093527,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665293769
    },
    {
        "content": "<p>You can on a tuple. We just don't have direct tuple syntax, so you have to use a tag technically:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">third</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">previousSum</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"nc\">Start</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">...</span><span class=\"o\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303093990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665294361
    },
    {
        "content": "<p>tuples are planned, just not implemented yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 303094504,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665294978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> Thank you so much! That is what I need.</p>",
        "id": 303096122,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665296642
    },
    {
        "content": "<p>I'm late to the party, but I got day 1 working - <a href=\"https://github.com/michallepicki/adventofcode/tree/master/2021/roc/1\">my solutions</a>. I already solved 10 days in <a href=\"https://github.com/gfngfn/Sesterl\">Sesterl</a>/Erlang back in December so I'll be mostly porting my solutions to Roc :)</p>",
        "id": 304394623,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1665990809
    }
]