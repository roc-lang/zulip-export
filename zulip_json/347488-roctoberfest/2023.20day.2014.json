[
    {
        "content": "<p>I just did day 14 and my (probably not optimal) solution for part 2 took about a minute to run. With --optimize it was \"only\" about 20s. So it's probably good to know that there is --optimize.</p>",
        "id": 397374804,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1697658720
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"559412\">@Fabian Schmalzried</span>,<br>\nCan you share your code? If it's some new patholigical performance case I'll make an issue for it</p>",
        "id": 397651283,
        "sender_full_name": "Anton",
        "timestamp": 1697788360
    },
    {
        "content": "<p>Here it is, but I don't think it's rocs fault.<br>\n<a href=\"https://gist.github.com/FabHof/5b2ac84a1df7cb165da43231fb84c616\">https://gist.github.com/FabHof/5b2ac84a1df7cb165da43231fb84c616</a></p>",
        "id": 397830549,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1697878084
    },
    {
        "content": "<p>Uhu, yes, I expect that all the non-tail recursive calls cause the slowdown. Thanks for sharing anyway :)</p>",
        "id": 397831458,
        "sender_full_name": "Anton",
        "timestamp": 1697878938
    },
    {
        "content": "<p>Here's a different take on day 14, I've actually had this one partially completed for a bit!<br>\n<a href=\"https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_14/main.roc\">https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_14/main.roc</a></p>",
        "id": 397978044,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1698015939
    },
    {
        "content": "<p>The output for this one is fun<br>\n<a href=\"/user_uploads/22008/bAVlmywbDCjzUYiYTVgqayKr/Screenshot_2023-10-22_19-01-45.png\">Screenshot_2023-10-22_19-01-45.png</a><br>\n<a href=\"/user_uploads/22008/IBnSpGHDNyo9BtiBzRJ86xQu/Screenshot_2023-10-22_19-01-26.png\">Screenshot_2023-10-22_19-01-26.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/bAVlmywbDCjzUYiYTVgqayKr/Screenshot_2023-10-22_19-01-45.png\" title=\"Screenshot_2023-10-22_19-01-45.png\"><img src=\"/user_uploads/22008/bAVlmywbDCjzUYiYTVgqayKr/Screenshot_2023-10-22_19-01-45.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/IBnSpGHDNyo9BtiBzRJ86xQu/Screenshot_2023-10-22_19-01-26.png\" title=\"Screenshot_2023-10-22_19-01-26.png\"><img src=\"/user_uploads/22008/IBnSpGHDNyo9BtiBzRJ86xQu/Screenshot_2023-10-22_19-01-26.png\"></a></div>",
        "id": 397978105,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1698015973
    },
    {
        "content": "<p>I love how clean the solution reads in Roc. Thank you for sharing.</p>",
        "id": 397978237,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1698016159
    },
    {
        "content": "<p>that poor <code>addSand</code> function. I wonder if we can write in a different way to help with the nesting.</p>",
        "id": 397979391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698017469
    },
    {
        "content": "<p>Haha. This works, not sure if it's much better?</p>\n<div class=\"codehilite\"><pre><span></span><code>addSand : Cave, Array2D.Index -&gt; Result Cave [SandFellIntoTheInfiniteAbyss, Blocked]\naddSand = \\cave, pos -&gt;\n    when Array2D.get cave pos is\n        Err OutOfBounds -&gt; Err SandFellIntoTheInfiniteAbyss\n        Ok Sand | Ok Rock -&gt; Err Blocked\n        Ok Air -&gt;\n            addSand cave (down pos)\n            |&gt; Result.onErr \\err -&gt;\n                if err == Blocked then\n                    addSand cave (downLeft pos)\n                else\n                    Err err\n            |&gt; Result.onErr \\err -&gt;\n                if err == Blocked then\n                    addSand cave (downRight pos)\n                else\n                    Err err\n            |&gt; Result.onErr \\err -&gt;\n                if err == Blocked then\n                    Ok (Array2D.set cave pos Sand)\n                else\n                    Err err\n</code></pre></div>",
        "id": 397982707,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1698020773
    },
    {
        "content": "<p>This isn't too bad</p>\n<div class=\"codehilite\"><pre><span></span><code>addSand : Cave, Array2D.Index -&gt; Result Cave [SandFellIntoTheInfiniteAbyss, Blocked]\naddSand = \\cave, pos -&gt;\n    when Array2D.get cave pos is\n        Err OutOfBounds -&gt; Err SandFellIntoTheInfiniteAbyss\n        Ok Sand | Ok Rock -&gt; Err Blocked\n        Ok Air -&gt;\n            addSand cave (down pos)\n            |&gt; elseIfBlocked \\_ -&gt; addSand cave (downLeft pos)\n            |&gt; elseIfBlocked \\_ -&gt; addSand cave (downRight pos)\n            |&gt; elseIfBlocked \\_ -&gt; Ok (Array2D.set cave pos Sand)\n\nelseIfBlocked = \\result, thunk -&gt;\n    when result is\n        Err Blocked -&gt; thunk {}\n        _ -&gt; result\n</code></pre></div>",
        "id": 397984734,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1698022074
    },
    {
        "content": "<p>Oh wow <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span>...yeah, much nicer</p>",
        "id": 397988981,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698024524
    },
    {
        "content": "<p>I like how clear this is to follow the logic. I wonder though how performant this is, like would you expect this to be significantly worse than an equivalent imperative implementation or roughly equivalent when using <code>--optimize</code>?  This is probably not straightforward to verify realistically for performance, but if this kind of thing is as good as or better, then that is a very positive signal for Roc. It looks really easy to test and verify correctness, and is easy to read and follow the logic... almost as easy as reading the text of the problem description.</p>",
        "id": 397989451,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1698024786
    },
    {
        "content": "<p>I think llvm will inline <code>elseIfBlocked</code> and all of the <code>thunk</code>s. Once those are inlined, I think it is tail recursive, so perf should be fine</p>",
        "id": 397990281,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698025354
    },
    {
        "content": "<p>It runs in less than a second on my machine. <code>--optimize</code> maybe makes it very slightly snappier. We're manipulating a list of 68,000 elements so there's some work going on, but this still feels like a toy problem to me. </p>\n<p>Having O(1) array element access is definitely nice, that's one of the things that kills me when I do AoC in list-based functional languages.</p>",
        "id": 397990675,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1698025608
    },
    {
        "content": "<p>This is what I see with <code>hyperfine</code>. <code>--optimize</code> does a lot.</p>\n<p>Just run:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./day14-dev\n  Time (mean ± σ):     671.3 ms ±  11.5 ms    [User: 664.1 ms, System: 3.7 ms]\n  Range (min … max):   664.6 ms … 716.0 ms    20 runs\n\nBenchmark 2: ./day14-opt\n  Time (mean ± σ):     137.7 ms ±   1.2 ms    [User: 135.9 ms, System: 1.2 ms]\n  Range (min … max):   135.8 ms … 139.3 ms    20 runs\n\nSummary\n  &#39;./day14-opt&#39; ran\n    4.88 ± 0.09 times faster than &#39;./day14-dev&#39;\n</code></pre></div>",
        "id": 397993717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698027559
    },
    {
        "content": "<p>Of course from an end user perspective, the compile time is long enough that <code>dev</code> is probably faster if you are building and running.</p>",
        "id": 397993851,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698027622
    },
    {
        "content": "<p>very cool!</p>",
        "id": 397994710,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1698027915
    }
]