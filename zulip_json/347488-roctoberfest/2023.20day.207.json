[
    {
        "content": "<p>Day 7, found a blocking compiler bug <a href=\"https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_07/main.roc\">https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_07/main.roc</a><br>\nI think my solution is probably complete, save for some potential tweaks to whitespace consumption in the parser. I'm unable to run the code though, and am getting this error</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;I thought a non-nullable-unwrapped variant for a lambda set was impossible: how could such a lambda set be created without a base case?&#39;, crates/compiler/mono/src/layout.rs:1713:61\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>The code causing the error is</p>\n<div class=\"codehilite\"><pre><span></span><code>dirParser : Parser RawStr Dir\ndirParser =\n    lazy \\{} -&gt;\n        const\n            (\\files -&gt; \\subDirs -&gt;\n                    if List.isEmpty subDirs then\n                        Leaf { files }\n                    else\n                        Node { files, subDirs }\n            )\n        |&gt; skip dirNameParser\n        |&gt; keep filesParser\n        |&gt; keep (\n            # const []\n            # many dirParser\n            manyUntil dirParser (string &quot;$ cd ..&quot;)\n        )\n        |&gt; skip optionalWhitespace\n</code></pre></div>\n<p>The problem in question involves a directory tree with recursive sub-directories. <code>lazy</code> is provided by <code>roc-parser</code> for recursive data structures. If you comment out the <code>manyUntil</code> line and uncomment <code>const []</code> then it compiles and runs fine, but the parser is of course incorrect. I also tried the <code>many dirParser</code> line to see if a simpler recursive parser would work, but no luck.</p>\n<p>The obvious (and reasonable) solution would be to not use recursive parsers, but at this point I'm not particularly concerned with completing the puzzle <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>I know that \" lambda sets\" get thrown around here a lot and it sounds like there are known issues with the implementation that <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> is working on. Would it be useful to try to make a minimal version of this bug?</p>",
        "id": 395581448,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696804819
    },
    {
        "content": "<p>Oh, maybe worth specifying: <code>roc check</code> is clean, <code>run</code>/<code>dev</code>/<code>test</code> all return the same error</p>",
        "id": 395581715,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696805109
    },
    {
        "content": "<p>maybe try removing some type annotations? There is in particular a known issue around those and recursive lambda sets right now</p>",
        "id": 395593759,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696814255
    },
    {
        "content": "<p>I tried removing all type annotations, no luck, same error!</p>",
        "id": 395612692,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696824487
    },
    {
        "content": "<p>Yeah, this is a well-known issue Elias.. unfortunately we have no idea how to solve it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 395684919,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696853492
    },
    {
        "content": "<p>The problem is likely</p>\n<div class=\"codehilite\"><pre><span></span><code>        |&gt; keep (\n            # const []\n            # many dirParser\n            manyUntil dirParser (string &quot;$ cd ..&quot;)\n        )\n</code></pre></div>\n<p>if you have a way to refactor this to avoid that recursive call, it will likely work</p>",
        "id": 395685036,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696853524
    },
    {
        "content": "<p>I ran into this issue a few months ago while also trying to build a recursive parser. I found that while this compiler bug prevents us from using <code>lazy</code>, you can <a href=\"#narrow/stream/231634-beginners/topic/Compiler.20stack.20overflow.20on.20recursive.20parser/near/377685052\">rewrap the parser</a> as a workaround.</p>",
        "id": 395691612,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696855617
    },
    {
        "content": "<p>At least it works with mutually-recursive parsers</p>",
        "id": 395691759,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696855667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> that did it, thanks!<br>\nday 7 done <a href=\"https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_07/main.roc\">https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_07/main.roc</a></p>\n<ul>\n<li>It's mostly parsers, but because the parsers do the heavy lifting of interpreting the data the last bit of iterating over the data structure is not too bad.</li>\n<li>I realize that not everyone doing AoC in a new language is going to jump directly to \"write 80+ lines of parser for each question\" so I'll probably not go quite so hard on parsers for the next few puzzles.</li>\n</ul>",
        "id": 395721398,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696864684
    },
    {
        "content": "<p>Ah, the parser library, both great for AOC parsering, but also probably the biggest source of compiler bugs due to adding in fun lambdaset and typing issues</p>",
        "id": 395727899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696866890
    },
    {
        "content": "<p>I woulder if it would be more advised to tell users to write simple data pipelines with string splitting rather than share that library</p>",
        "id": 395727996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696866938
    },
    {
        "content": "<p>Most AOC problems can be parsed by first splitting by new line, then splitting by spaces, then converting to the datatype you want</p>",
        "id": 395728092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696866967
    },
    {
        "content": "<p>I don't know - I think it a sign that we should try to fix those bugs as soon as possible :D</p>",
        "id": 395728293,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696867076
    },
    {
        "content": "<p>I'm kind of with Brendan on this one. I specifically wanted to put <code>roc-parser</code> through its paces, but in general I think parsing is a distraction if you're trying to complete AoC. That said someone picking up a language like Roc for the first time is probably more interested in learning the language than blitzing through puzzles, so I could see this bug being a frustration.</p>",
        "id": 395730334,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696867717
    },
    {
        "content": "<p>I gave this a try, just in case there was a way to fix this in <code>roc-parser</code></p>\n<div class=\"codehilite\"><pre><span></span><code>subDirsParser : Parser RawStr (List Dir)\nsubDirsParser =\n    lazy \\{} -&gt; (manyUntil dirParser dirBackParser)\n\nlazy = \\thunk -&gt;\n    buildPrimitiveParser \\input -&gt;\n        parsePartial (thunk {}) input\n</code></pre></div>\n<p>but no luck, back to the lambda set error. That's what I expected would happen, but you never know.</p>",
        "id": 395731090,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696868045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/2023.20day.207/near/395728293\">said</a>:</p>\n<blockquote>\n<p>I don't know - I think it a sign that we should try to fix those bugs as soon as possible :D</p>\n</blockquote>\n<p>I mean sure 100%. These bugs have just been around for a really long time, so not sure how quick/easily they would get fixed.</p>",
        "id": 395731305,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696868151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/2023.20day.207/near/395728293\">said</a>:</p>\n<blockquote>\n<p>I don't know - I think it a sign that we should try to fix those bugs as soon as possible :D</p>\n</blockquote>\n<p>totally agree - should we set up a chat this week to brainstorm potential fixes?</p>",
        "id": 395731679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696868329
    },
    {
        "content": "<p>(that is, for problems that don't have a planned fix yet)</p>",
        "id": 395731741,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696868372
    },
    {
        "content": "<p>We could also update the parser library, potentially remove <code>lazy</code>, and add docs on how to implement recursive parsers with a wrapper. This is def an edge case as far as parsing is concerned, and recursive parser combinators are always awkward so a user that already understands how to use the parser library will likely know to watch for the sharp edge.</p>",
        "id": 395733419,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696869078
    }
]