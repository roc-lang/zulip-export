[
    {
        "content": "<p>It definetly needs more cleanup: <a href=\"https://gist.github.com/FabHof/d65eab72dceca521642e90f8e5dd5ad7\">https://gist.github.com/FabHof/d65eab72dceca521642e90f8e5dd5ad7</a><br>\nBut I did find a bug with dbg: <a href=\"https://github.com/roc-lang/roc/issues/5883\">https://github.com/roc-lang/roc/issues/5883</a></p>",
        "id": 394678714,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1696353938
    },
    {
        "content": "<p><a href=\"https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_03/main.roc\">https://github.com/mulias/roctoberfest/blob/main/advent_2022/day_03/main.roc</a></p>\n<ul>\n<li>I think <code>List.partition : List a, Nat -&gt; List (List a)</code> would be a reasonable addition to the builtins, it's something that comes up frequently, at least in AoC, and I couldn't find it.</li>\n<li><code>List.sum</code> tripped me up, I waned to sum up a list of <code>U8</code>s into an <code>U64</code> but got a type error. I ended up doing <code>priorities |&gt; List.map Num.intCast |&gt; List.sum</code>.</li>\n<li>Used the official release of <code>roc-parser</code>, works like <span aria-label=\"butter\" class=\"emoji emoji-1f9c8\" role=\"img\" title=\"butter\">:butter:</span></li>\n</ul>",
        "id": 394689709,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696358370
    },
    {
        "content": "<p>Yes, partition would be great</p>",
        "id": 394738220,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696382925
    },
    {
        "content": "<p>What is partition in this case? Like what does the function do?</p>",
        "id": 394741264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696384774
    },
    {
        "content": "<p>What I would expect is that it would break the input list into chunks of size n. With the last chunk potentially containing less than n elements.</p>",
        "id": 394741552,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696384889
    },
    {
        "content": "<p>Here's what I did</p>\n<div class=\"codehilite\"><pre><span></span><code>partition : List a, Nat -&gt; List (List a)\npartition = \\lst, idx -&gt;\n    { before, others } = List.split lst idx\n    if List.isEmpty others then\n        [before]\n    else\n        List.prepend (partition others idx) before\n\nexpect partition [1, 2, 3, 4, 5, 6, 7, 8] 3 == [[1, 2, 3], [4, 5, 6], [7, 8]]\n</code></pre></div>",
        "id": 394741746,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696384988
    },
    {
        "content": "<p>Ah, that form of partition.</p>",
        "id": 394741799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696385027
    },
    {
        "content": "<p>I wonder if there is a better name for it.</p>",
        "id": 394741866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696385049
    },
    {
        "content": "<p>Yes, not sorting partition. Uhhhh, <code>chunk</code>?</p>",
        "id": 394741909,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696385063
    },
    {
        "content": "<p>Or possibly chunksOf</p>",
        "id": 394742044,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696385143
    },
    {
        "content": "<p>Personally partition is what I would think of first if I was searching for it</p>",
        "id": 394742119,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1696385178
    },
    {
        "content": "<p>I think Brendan is right that partition is overloaded, since partitioning in half/around a pivot point is a common operation in sorting.</p>",
        "id": 394742310,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696385292
    },
    {
        "content": "<p>In the haskell split package this is called <code>chunksOf</code>, that seems like a great name.</p>",
        "id": 394799563,
        "sender_full_name": "Anton",
        "timestamp": 1696412380
    },
    {
        "content": "<blockquote>\n<p>List.sum tripped me up, I waned to sum up a list of U8s into an U64 but got a type error.</p>\n</blockquote>\n<p>I think making that work could be very complicated</p>",
        "id": 394800453,
        "sender_full_name": "Anton",
        "timestamp": 1696412723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/2023.20day.203/near/394800453\">said</a>:</p>\n<blockquote>\n<p>I think making that work could be very complicated</p>\n</blockquote>\n<p>sure sure. It wasn't a particularly constructive comment, mostly that I'm not used to a functional language caring so much about number encodings.</p>",
        "id": 394872848,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696435475
    },
    {
        "content": "<p>I think we should look at adding automatic upcasting. If integer and the same sign with more bits, just automatically convert. This could be done automatically during the underlying list walk that sum should be calling. That will also be more performance than making the entire list first</p>",
        "id": 394931394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696462644
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 395212162,
        "sender_full_name": "Anton",
        "timestamp": 1696582764
    }
]