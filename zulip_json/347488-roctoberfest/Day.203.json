[
    {
        "content": "<ul>\n<li>Day3 is a tough one for me, I only did part 1 for now (<a href=\"https://github.com/ghigt/advent-of-code/blob/main/roc/day-3/main.roc\">https://github.com/ghigt/advent-of-code/blob/main/roc/day-3/main.roc</a>)!</li>\n<li>Matching scalars ('1') seams not working in <code>when</code>, I had to write <code>49</code> (even though <code>['1'] == Str.toScalars \"1\"</code> in <code>repl</code>). I get a mismatch <code>Builtin(Int(I32)) == Builtin(Int(U32))</code></li>\n<li>it's very hard to debug. I know it's my fault to write a too long function and i could easily test small functions with <code>expect</code> but I miss my loving <code>print/console</code> debugger <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> (also would love a fix of multilines in <code>repl</code> <a href=\"https://github.com/roc-lang/roc/issues/2666\">https://github.com/roc-lang/roc/issues/2666</a>)</li>\n<li>Is there a way to do the opposite of <code>Str.concat</code>, like a <code>Str.withPrefix</code>? (<code>\"01\" |&gt; Str.xxx \"0b\" == \"0b01\"</code>)</li>\n</ul>",
        "id": 301971526,
        "sender_full_name": "Ghislain",
        "timestamp": 1664742286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"528453\">@Ghislain</span> there may have been a regression around this recently, but in theory you should be able to do something similar to <code>Debug.log</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n\n<span class=\"n\">expect</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n\n<span class=\"n\">blah</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 301971926,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664742671
    },
    {
        "content": "<p>when the <code>expect x != x</code>line runs (when you're doing <code>roc dev</code>), it should:</p>\n<ul>\n<li>not crash the program, but rather keep executing</li>\n<li>print a \"failed expectation\" message to the terminal</li>\n<li>the \"failed expectation\" message should include what the value of <code>x</code> was</li>\n</ul>",
        "id": 301972007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664742725
    },
    {
        "content": "<p>if that's not working, let me know so we can file a bug about it!</p>",
        "id": 301972014,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664742738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452038\">Shritesh Bhattarai</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Show.20and.20Tell/near/301897732\">said</a>:</p>\n<blockquote>\n<p>I encountered a lot of compiler crashes esp. when there was a type mismatch.</p>\n</blockquote>\n<p>I wish I'd mentioned this sooner, but if you have time, it's extremely helpful to us to have reproductions of these - even if they aren't at all minimal! One trick I like to use is just do a quick <code>git commit -m \"reproduces compiler crash\"</code> before moving on, so it doesn't interrupt me too much, and then later on I can go back and file an issue for it with the actual reproduction (and then maybe someone else can shrink it down to a minimal reproduction)</p>",
        "id": 301972542,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664743304
    },
    {
        "content": "<p>it's exciting to see all the feedback in this channel - thank you so much to everyone for sharing! <span aria-label=\"hug\" class=\"emoji emoji-1f917\" role=\"img\" title=\"hug\">:hug:</span></p>",
        "id": 301972596,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664743326
    },
    {
        "content": "<p>Ah, I didn't know it printed the value, that's great!<br>\nThough it seems that it does not work <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> <br>\n<a href=\"/user_uploads/22008/KgD4fFdNMKhnff7stzictV_O/Capture-décran-2022-10-02-à-22.40.19.png\">Capture-décran-2022-10-02-à-22.40.19.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/KgD4fFdNMKhnff7stzictV_O/Capture-décran-2022-10-02-à-22.40.19.png\" title=\"Capture-décran-2022-10-02-à-22.40.19.png\"><img src=\"/user_uploads/22008/KgD4fFdNMKhnff7stzictV_O/Capture-décran-2022-10-02-à-22.40.19.png\"></a></div>",
        "id": 301972672,
        "sender_full_name": "Ghislain",
        "timestamp": 1664743396
    },
    {
        "content": "<p>ah yeah I just realized <a href=\"https://github.com/roc-lang/roc/issues/4093\">https://github.com/roc-lang/roc/issues/4093</a> is still open</p>",
        "id": 301972691,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664743426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> if you have a chance, seems like a fix for <a href=\"https://github.com/roc-lang/roc/issues/4093\">https://github.com/roc-lang/roc/issues/4093</a> would immediately help people doing Roctoberfest! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 301972746,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664743455
    },
    {
        "content": "<p>Day 3 part 1: <a href=\"https://github.com/shritesh/advent/blob/main/2021/3.roc\">https://github.com/shritesh/advent/blob/main/2021/3.roc</a><br>\nBit-twiddling unboxed integers in a purely functional programming language: that's a first for me. I think we should have a clz (count leading zeros) builtin</p>",
        "id": 301977700,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1664748563
    },
    {
        "content": "<p>Yeah, we definitely should have count leading and trailing zeros. They will be needed for other things like dictionaries eventually.</p>",
        "id": 301977779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664748636
    },
    {
        "content": "<p>any objections to making a separate topic for each day? I know it might be a lot but probably easier to follow for posterity reasons than one big one here.</p>",
        "id": 301980120,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664751420
    },
    {
        "content": "<p>Thats a good idea. I'll pull out these day 3 comments.</p>",
        "id": 301980262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664751519
    },
    {
        "content": "<p>Just finished day 3: <a href=\"https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day3\">https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day3</a></p>\n<p>Definitely don't like this code very much. To be fair, I didn't go through the effort to deal with results, but I also didn't want them to just be a default value.</p>",
        "id": 301980386,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664751632
    },
    {
        "content": "<p>I think handling results (especially ones you know should never error) can often get cumbersome. For my code, merging stages would help a lot, but I am intentionally trying writing in more chunked or pipelined way. Just isn't great in some cases.</p>",
        "id": 301980502,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664751741
    },
    {
        "content": "<p>Yeah, I really want to reach for Rust's <code>unreachable!</code> or OCaml's <code>failwith</code>where I know invariants are not broken</p>",
        "id": 301980607,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664751906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Day.203/near/301980386\">said</a>:</p>\n<blockquote>\n<p>Just finished day 3: <a href=\"https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day3\">https://github.com/bhansconnect/roc-aoc-2021/tree/trunk/day3</a></p>\n</blockquote>\n<p>Your shortcuts are mindblowing! <span aria-label=\"drooling\" class=\"emoji emoji-1f924\" role=\"img\" title=\"drooling\">:drooling:</span></p>",
        "id": 301981472,
        "sender_full_name": "Ghislain",
        "timestamp": 1664752630
    },
    {
        "content": "<p>Just realized I forgot to push. part 2 up as well</p>",
        "id": 301981646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664752856
    },
    {
        "content": "<p>What do you mean by my shortcuts?</p>",
        "id": 301981650,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664752862
    },
    {
        "content": "<p>Your <code># Convert from utf8 to real numbers</code> is so smart, my implementation takes so many lines for the same result</p>",
        "id": 301981757,
        "sender_full_name": "Ghislain",
        "timestamp": 1664753017
    },
    {
        "content": "<p>I learn so much from everyone here <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> thanks to this AoC</p>",
        "id": 301981845,
        "sender_full_name": "Ghislain",
        "timestamp": 1664753114
    },
    {
        "content": "<p>Ah, yeah, normally I would write something like <code>val - '0'</code>, but that doesn't directly work in Roc.</p>",
        "id": 301982135,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664753479
    },
    {
        "content": "<p>Part 2 is done: <a href=\"https://github.com/shritesh/advent/blob/main/2021/3.roc\">https://github.com/shritesh/advent/blob/main/2021/3.roc</a> I was irked by bools not being in \"the prelude\" but then learned that tags are the better solution. Also, ranges should support a negative stepping IMO.</p>",
        "id": 301984842,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1664756535
    },
    {
        "content": "<p>Using a mask is a great idea. Removes a lot of error handling needed otherwise <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 301985100,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664756856
    },
    {
        "content": "<p>There was a good bit of discussion about List.range here: <a href=\"#narrow/stream/304641-ideas/topic/List.2Erange.20boundaries\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/List.2Erange.20boundaries</a></p>",
        "id": 301985179,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664756946
    },
    {
        "content": "<p>Nothing concrete changed yet, but ranges will probably change in the future</p>",
        "id": 301985189,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664756975
    },
    {
        "content": "<p>Also, good note about List.walkTry not being exposed. That definitely should change</p>",
        "id": 301985241,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664757012
    },
    {
        "content": "<p>I have finished Part 1 and thought I would share my code and some feedback <a href=\"https://github.com/lukewilliamboswell/roc-aoc-2021/blob/main/day3.roc\">Code</a>. </p>\n<p>It has taken me a 4-5 hours to get this far. I'm really happy with the result, and have found the experience to be really nice. The interactive workflow of working with the compiler and using \"expect\" tests helped me to learn as I went. I found a few compiler errors and minor issues along the way. As the tooling matures I see a lot of potential for this to be a very productive and maintainable language. </p>\n<p>I tried a few different ways to get the answer and have taken then scenic route to get there, but my primary goal was to learn  and explore the language. <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 302957877,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665194343
    },
    {
        "content": "<p>Very interesting. I really like your solution. I feel like it is quite elegant!</p>",
        "id": 302962834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665199967
    },
    {
        "content": "<p>Day 3 <a href=\"https://github.com/michallepicki/adventofcode/tree/master/2021/roc/3\">done</a>. Biggest struggles: when to <code>Num.intCast</code> (I'm kinda guessing for now), and how to \"convince\" the compiler that <code>List.get</code> will succeed when I know the length (I would prefer some way to assert that it does, and have some kind of panic at runtime, than writing code that does a default thing for the unreachable case)</p>",
        "id": 304567330,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1666044219
    },
    {
        "content": "<p>We may eventually get a userland crash function of some sort, until then, you can make your own. Give me one sec and I'll find the definition.</p>",
        "id": 304569600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666045152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">getUnsafe</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"></span>\n<span class=\"nv\">getUnsafe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304569909,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666045263
    },
    {
        "content": "<p>That should work</p>",
        "id": 304569915,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666045265
    },
    {
        "content": "<p>Since crash is undefined, roc code will crash when it is called.</p>",
        "id": 304569950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666045283
    },
    {
        "content": "<p>That's convenient, I'll try it out - thanks!</p>",
        "id": 304616728,
        "sender_full_name": "Michał Łępicki",
        "timestamp": 1666074160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Day.203/near/301972746\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> if you have a chance, seems like a fix for <a href=\"https://github.com/roc-lang/roc/issues/4093\">https://github.com/roc-lang/roc/issues/4093</a> would immediately help people doing Roctoberfest! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>This issue fixes the <code>expect</code> inside a function running <code>roc dev</code>, but can <code>roc test</code> testing <code>expect</code> outside of a function (which works) does/could output the diff? (I'm on day 8 and I have to switch in JS to get debug info <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> )</p>",
        "id": 304634468,
        "sender_full_name": "Ghislain",
        "timestamp": 1666082545
    },
    {
        "content": "<p>it will output the values of variables</p>",
        "id": 304635182,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1666082816
    },
    {
        "content": "<p>so not quite a diff but at least better than \"the expression is false\"</p>",
        "id": 304635229,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1666082834
    },
    {
        "content": "<p>so </p>\n<div class=\"codehilite\"><pre><span></span><code>a = 4\nb = 2\nexpect a == b\n</code></pre></div>\n<p>will tell you the values of a and b when the expect fails</p>",
        "id": 304635296,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1666082869
    },
    {
        "content": "<p>That's exactly what I want, but it doesn't look to work, how do you make it work?</p>",
        "id": 304635728,
        "sender_full_name": "Ghislain",
        "timestamp": 1666083036
    },
    {
        "content": "<p>I run <code>roc test</code> and it just prints that the expectation failed</p>",
        "id": 304635795,
        "sender_full_name": "Ghislain",
        "timestamp": 1666083072
    },
    {
        "content": "<p>ah, got the syntax slightly wrong</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; cargo run -- test crates/cli_testing_examples/benchmarks/Scratchpad.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/roc test crates/cli_testing_examples/benchmarks/Scratchpad.roc`\n── EXPECT FAILED ─────── crates/cli_testing_examples/benchmarks/Scratchpad.roc ─\n\nThis expectation failed:\n\n 8│&gt;  expect\n 9│&gt;      a = 1\n10│&gt;      b = 2\n11│&gt;\n12│&gt;      a == b\n\nWhen it failed, these variables had these values:\n\na : Num a\na = 1\n\nb : Num a\nb = 2\n\n1 failed and 0 passed in 504 ms.\n</code></pre></div>\n<p>produced by </p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    a = 1\n    b = 2\n\n    a == b\n</code></pre></div>",
        "id": 304636129,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1666083218
    },
    {
        "content": "<p>Thank you!!</p>",
        "id": 304636321,
        "sender_full_name": "Ghislain",
        "timestamp": 1666083298
    },
    {
        "content": "<p>And it also prints the type <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 304636686,
        "sender_full_name": "Ghislain",
        "timestamp": 1666083476
    },
    {
        "content": "<p>Late to the day 3 party, but I was wondering if there's a way to specify a list/array of a specific length? I was thinking the same thing about using an unchecked <code>List.get</code> but it seems like it could be a risky assumption for code that changes over time and I was wondering if now or in the future there'd be a way to say \"if I get to this point I know I have a list of exactly 12 numbers\"</p>",
        "id": 306241561,
        "sender_full_name": "Austin Clements",
        "timestamp": 1666791501
    },
    {
        "content": "<p>I think the closest thing planned in roc is tuples. Since they have a compile time know size then you can pattern match on them to pull out a specific element.</p>\n<p>The other possibility is to ignore the error case and cause the code to crash if that case happens. Roc may eventually have a first class <code>crash</code>, but currently it can implemented by writing s function with no body: <code>crash : {} -&gt; *</code></p>",
        "id": 306246076,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666792798
    },
    {
        "content": "<p>Also, for creating a list of a specific length, you would probably use <code>List.repeat defaultElement len</code></p>",
        "id": 306246407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666792885
    },
    {
        "content": "<p>Gotcha, makes sense and good tip about how to implement <code>crash</code></p>",
        "id": 306257997,
        "sender_full_name": "Austin Clements",
        "timestamp": 1666795876
    },
    {
        "content": "<p>Oh, extra note: even though tuples don't exist yet, you can implement them with a single tag: <code>T first second third</code>.<br>\nThen pattern matching could be <code>T _ second _ = myTuple</code></p>",
        "id": 306275131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666800295
    },
    {
        "content": "<p>Well here's my solution, maybe overkill with the types and helpers but I'm trying to learn some good error handling habits too, open to feedback <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/austinclem1/roc-advent2021/blob/main/day03/main.roc\">https://github.com/austinclem1/roc-advent2021/blob/main/day03/main.roc</a></p>",
        "id": 306311223,
        "sender_full_name": "Austin Clements",
        "timestamp": 1666811207
    }
]