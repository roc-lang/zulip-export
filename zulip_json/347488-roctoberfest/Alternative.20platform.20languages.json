[
    {
        "content": "<p>Hey all <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> . Are there any non-rust (zig or c) alternatives to the cli-platform?  And if not, is there anywhere I could read about creating one?   I would like to do some advent of code problems but don't have a rust compiler setup on this machine.</p>",
        "id": 303071987,
        "sender_full_name": "Travis",
        "timestamp": 1665270749
    },
    {
        "content": "<p>Some platforms are zig based, but no equivalent of the cli platform. The benchmarks platform uses zig for example</p>",
        "id": 303072048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665270833
    },
    {
        "content": "<p>Or maybe the easiest thing is to just embed the inputs into my .roc files?  Does roc havemultiline strings?</p>",
        "id": 303072051,
        "sender_full_name": "Travis",
        "timestamp": 1665270836
    },
    {
        "content": "<p>I'm not sure about multiline strings (we should, just not sure on syntax/if it has been added). If you choose to embed, you should be able to just based a simple zig platform (like the platform switching one) and return and string of what to print.</p>",
        "id": 303072183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665270944
    },
    {
        "content": "<p>Oh interesting. I'll take a look at the benchmarks platform, maybe learn from that.  I saw the rocLovesZig hello world platform. Maybe the benchmarks platform has more to look at.</p>",
        "id": 303072196,
        "sender_full_name": "Travis",
        "timestamp": 1665270959
    },
    {
        "content": "<p>Otherwise, platforms don't really have good docs, though the API is significantly more stable than it use to be.</p>",
        "id": 303072254,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665270987
    },
    {
        "content": "<p>Are there any foreseeable roadblocks with using zig?  Like anything rust-specific in the cli platform which I'll run into?</p>",
        "id": 303072370,
        "sender_full_name": "Travis",
        "timestamp": 1665271087
    },
    {
        "content": "<p>Roc does indeed have multiline strings! <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> got them working recently</p>",
        "id": 303072373,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665271094
    },
    {
        "content": "<p>the syntax is triple quotes, and you can use them either on one line or across multiple lines</p>",
        "id": 303072391,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665271122
    },
    {
        "content": "<p>If you have questions, feel free to ask. Also, i am gonna move this chain of messages out of the day 9 thread, into it's own thread.</p>",
        "id": 303072396,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665271127
    },
    {
        "content": "<p>if you do it across multiple lines, the <code>\"\"\"</code>s each have to be on their own lines (with nothing else on the line) and indented the same amount</p>",
        "id": 303072422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665271167
    },
    {
        "content": "<blockquote>\n<p>Are there any foreseeable roadblocks with using zig?</p>\n</blockquote>\n<p>Nope. Zig should be just fine. The main thing is that you would be redefining the cli-platform/creating a new platform.</p>",
        "id": 303072523,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665271229
    },
    {
        "content": "<p>Yessss multiline strings!  <span aria-label=\"praise\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"praise\">:praise:</span></p>",
        "id": 303072558,
        "sender_full_name": "Travis",
        "timestamp": 1665271279
    },
    {
        "content": "<p>If you wanted the exact same platform, you would have to conform to the same api. Otherwise, zig is powerful enough to make any platform.</p>",
        "id": 303072559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665271282
    },
    {
        "content": "<p>Ok thanks for the input.  Maybe I'll look into recreating the cli-platform in zig.  Would be nice to have...</p>",
        "id": 303072836,
        "sender_full_name": "Travis",
        "timestamp": 1665271497
    },
    {
        "content": "<p>thats good to hear. i'm much more comfortable in zig than rust or c.</p>",
        "id": 303072921,
        "sender_full_name": "Travis",
        "timestamp": 1665271562
    },
    {
        "content": "<p>Go for it if you want. Would be interesting to see. Though if you just install rust, you shouldn't actually need to code in rust at all to use the cli platform to solve the advent of code problems.</p>",
        "id": 303073086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665271719
    },
    {
        "content": "<p>oh and thanks for creating the new thread. i've now identified the 'new topic' menu item <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> and will consider using it.</p>",
        "id": 303073918,
        "sender_full_name": "Travis",
        "timestamp": 1665272515
    },
    {
        "content": "<p>Sharing API logic across differently-hosted platforms sounds like a fun future project...</p>",
        "id": 303076609,
        "sender_full_name": "jan kili",
        "timestamp": 1665275240
    },
    {
        "content": "<p>In case host language preferences lead to increased platform fragmentation</p>",
        "id": 303076643,
        "sender_full_name": "jan kili",
        "timestamp": 1665275282
    },
    {
        "content": "<p>Or maybe that's just a use case for extracting the common logic into a pure-Roc library for multiple implementation platforms to import</p>",
        "id": 303076698,
        "sender_full_name": "jan kili",
        "timestamp": 1665275333
    },
    {
        "content": "<p>having one roc lib with multiple platforms supporting it sounds nice.</p>",
        "id": 303077012,
        "sender_full_name": "Travis",
        "timestamp": 1665275713
    },
    {
        "content": "<blockquote>\n<p>In case host language preferences lead to increased platform fragmentation</p>\n</blockquote>\n<p>I think this is highly unlikely. Long term, most Roc developers are not likely to be platform devs.</p>",
        "id": 303081458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665280566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> or anyone else have any ideas how to write this in zig? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// in examples/cli/cli-platform/src/lib.rs</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_fileReadBytes</span><span class=\"p\">(</span><span class=\"n\">roc_path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ReadErr</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>here's what i have in zig</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kd\">@import</span><span class=\"p\">(</span><span class=\"s2\">\"str\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">RocStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">RocStr</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"nx\">fn</span><span class=\"w\"> </span><span class=\"nx\">RocResult</span><span class=\"p\">(</span><span class=\"nx\">comptime</span><span class=\"w\"> </span><span class=\"nx\">T</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">extern</span><span class=\"w\"> </span><span class=\"nx\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">is_error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nx\">pub</span><span class=\"w\"> </span><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"nx\">fn</span><span class=\"w\"> </span><span class=\"nx\">roc_fx_readFileBytes</span><span class=\"p\">(</span><span class=\"nx\">roc_path</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">RocResult</span><span class=\"p\">(</span><span class=\"nx\">RocStr</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but i'm getting this output:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc <span class=\"m\">2021</span>/1.roc --linker<span class=\"o\">=</span>legacy\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">ld: /tmp/roc_appYwTVxq.o: in function `roc_fx_fileReadBytes_fastcc_wrapper':</span>\n<span class=\"go\">builtins-host:(.text+0xf2b6): undefined reference to `roc_fx_fileReadBytes'</span>\n</code></pre></div>",
        "id": 303084422,
        "sender_full_name": "Travis",
        "timestamp": 1665283669
    },
    {
        "content": "<p>I think you need: <code>callconv(.C)</code></p>",
        "id": 303084586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665283809
    },
    {
        "content": "<p>just noticed i was missing <code>callconv(.C)</code> too but still getting the same error</p>",
        "id": 303084650,
        "sender_full_name": "Travis",
        "timestamp": 1665283888
    },
    {
        "content": "<p>I don't have time to debug tonight, but I can probably take a look tomorrow if you push it somewhere. Otherwise, I can ally attempt to answer questions.</p>",
        "id": 303084778,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665284003
    },
    {
        "content": "<p>You could try manual export with name: <code> @export(roc_fx_getInt, .{ .name = \"roc_fx_getInt\" });</code></p>",
        "id": 303084803,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665284030
    },
    {
        "content": "<p>But for your function</p>",
        "id": 303084805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665284034
    },
    {
        "content": "<p>That may work</p>",
        "id": 303084808,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665284037
    },
    {
        "content": "<p>Not sure though</p>",
        "id": 303084852,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665284047
    },
    {
        "content": "<p>manual export produces the same error.  thanks. will let you know if i push code somewhere.</p>",
        "id": 303085148,
        "sender_full_name": "Travis",
        "timestamp": 1665284353
    },
    {
        "content": "<p>I wonder if your platform isn't recompiling for some reason.</p>",
        "id": 303085391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665284540
    },
    {
        "content": "<p>i'm seeing zig error messages so it seems to be recompiling.</p>",
        "id": 303085426,
        "sender_full_name": "Travis",
        "timestamp": 1665284583
    },
    {
        "content": "<p>Can you compile and run a zig platform in the repo that has an effect?</p>",
        "id": 303086522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665285656
    },
    {
        "content": "<p>Benchmarks or tui i think. Some thing with a <code>host.zig</code> that has an FX function</p>",
        "id": 303086541,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665285676
    },
    {
        "content": "<p>yes i am able to run examples/cli/tui.roc</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc ../roc/examples/cli/tui.roc\n<span class=\"go\">🔨 Rebuilding platform...</span>\n\n<span class=\"go\">Hello World!</span>\n</code></pre></div>",
        "id": 303087008,
        "sender_full_name": "Travis",
        "timestamp": 1665286196
    },
    {
        "content": "<p>i didn't realize tui was a zig platofrm. neat! will have a look there.</p>",
        "id": 303087072,
        "sender_full_name": "Travis",
        "timestamp": 1665286245
    },
    {
        "content": "<p>strange it looks like host.o contains the roc_fx_readFileBytes symbol. not sure what this means</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>nm platform/host.o <span class=\"p\">|</span> grep roc_fx\n<span class=\"go\">0000000000003ba0 T roc_fx_getInt</span>\n<span class=\"go\">0000000000003d80 t roc_fx_getInt_help</span>\n<span class=\"go\">0000000000003650 T roc_fx_putInt</span>\n<span class=\"go\">00000000000038a0 T roc_fx_putLine</span>\n<span class=\"go\">0000000000004030 T roc_fx_readFileBytes</span>\n</code></pre></div>",
        "id": 303087884,
        "sender_full_name": "Travis",
        "timestamp": 1665287146
    },
    {
        "content": "<p>i deleted all the artifacts in platform/ right before i ran this to verify i wasn't looking at an old object file</p>",
        "id": 303087987,
        "sender_full_name": "Travis",
        "timestamp": 1665287244
    },
    {
        "content": "<p>was getting a similar <code>undefined reference to 'roc_fx_stdoutLine'</code> and fixed it with </p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"c1\">// host.zig</span><span class=\"w\"></span>\n<span class=\"nx\">comptime</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">@export</span><span class=\"p\">(</span><span class=\"nx\">roc_fx_putLine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"roc_fx_stdoutLine\"</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303089149,
        "sender_full_name": "Travis",
        "timestamp": 1665288088
    },
    {
        "content": "<p>so it seems to be something specific to <code>roc_fx_readFileBytes</code></p>",
        "id": 303089191,
        "sender_full_name": "Travis",
        "timestamp": 1665288122
    },
    {
        "content": "<p>figured it out. this seems to be the required signature:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"nx\">pub</span><span class=\"w\"> </span><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"nx\">fn</span><span class=\"w\"> </span><span class=\"nx\">roc_fx_fileReadBytes</span><span class=\"p\">(</span><span class=\"nx\">roc_path</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">output</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">RocResult</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">callconv</span><span class=\"p\">(.</span><span class=\"nx\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">void</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303090821,
        "sender_full_name": "Travis",
        "timestamp": 1665290280
    },
    {
        "content": "<p>oops i guess the args are switched. no wonder i couldn't print the string <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 303091496,
        "sender_full_name": "Travis",
        "timestamp": 1665291133
    },
    {
        "content": "<p>Also the name changed? <code>roc_fx_readFileBytes</code> and <code>roc_fx_fileReadBytes</code>?</p>",
        "id": 303095144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665295558
    },
    {
        "content": "<p>omg you're right.  i am blind <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 303095604,
        "sender_full_name": "Travis",
        "timestamp": 1665296064
    },
    {
        "content": "<p>It's the simple things sometimes.</p>",
        "id": 303096288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665296844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"551275\">@Travis</span> I didn't see it mentioned above so FYI we use Zig 0.9.1 in the Roc standard library so that might be the best version to use in your platform too.</p>",
        "id": 303105410,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665304726
    },
    {
        "content": "<p>here is a zig version of <code> roc_fx_fileReadBytes()</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_fileReadBytes</span><span class=\"p\">(</span><span class=\"n\">result</span>: <span class=\"o\">*</span><span class=\"n\">RocResult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">cwd</span><span class=\"p\">().</span><span class=\"n\">openFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">asSlice</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">.{})</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">defer</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">orelse</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">ptrCast</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">amt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">readAll</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"slice {s}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">slice</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"p\">]});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">amt</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">usizes</span>: <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">ptrCast</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">alignCast</span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"n\">alignOf</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">usizes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Ok tag == 1</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">outstr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">ptrCast</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">usizes</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// const outstr = std.mem.bytesAsValue(RocStr, @ptrCast([*]u8, @alignCast(1, (usizes + 1)))[0..@sizeOf(RocStr)]);</span>\n<span class=\"w\">    </span><span class=\"n\">outstr</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">str_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">str_len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">str_capacity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it compiles and runs but doesn't seem to assign its result param correctly.  i have verified that the incoming path is correct and that it can read the file's contents.  however, nothing is printed from the roc program and subsequent prints in roc are broken after calling this function.  <br>\nSo i have a couple of questions:</p>\n<ol>\n<li>how to allocate memory in a platform call such as <code>roc_fx_fileReadBytes</code>?  this one just calls <code>malloc</code>.</li>\n<li>how to set the outgoing <code>*RocResult</code> param.?  i used the following definition i from crates/compiler/builtins/bitcode/src/utils.zig.  but i'm not sure its correct or that i'm  assigning to it correctly.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bytes</span>: <span class=\"o\">?</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">isOk</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">RocResult</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// assumptions</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// - the tag is the first field</span>\n<span class=\"w\">        </span><span class=\"c1\">// - the tag is usize bytes wide</span>\n<span class=\"w\">        </span><span class=\"c1\">// - Ok has tag_id 1, because Err &lt; Ok</span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">usizes</span>: <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">ptrCast</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">alignCast</span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"n\">alignOf</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">usizes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">isErr</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">RocResult</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">isOk</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303105460,
        "sender_full_name": "Travis",
        "timestamp": 1665304764
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> yep thats the one i'm using:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>zig version\n<span class=\"go\">0.9.1</span>\n</code></pre></div>",
        "id": 303105609,
        "sender_full_name": "Travis",
        "timestamp": 1665304852
    },
    {
        "content": "<p>i'm looking through crates/compiler/builtins/bitcode/src/str.zig and think i might be answering some of these questions</p>",
        "id": 303106734,
        "sender_full_name": "Travis",
        "timestamp": 1665305475
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// allocate space for a (big or small) RocStr, but put nothing in it yet</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">allocate</span><span class=\"p\">(</span><span class=\"n\">length</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">capacity</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303106741,
        "sender_full_name": "Travis",
        "timestamp": 1665305484
    },
    {
        "content": "<p>Roc code itself uses <code>roc_alloc</code> for heap allocations. Usually best to use that for anything that Roc code can touch.<br>\nIt's often implemented as a wrapper around malloc anyway.<br>\nBut Roc heap allocations also need reference counts. The standard library functions you found will do that for you.</p>",
        "id": 303107956,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1665306312
    },
    {
        "content": "<p>another question: does this signature look correct? just noticed the rust version uses RocList&lt;u8&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_fileReadBytes</span><span class=\"p\">(</span><span class=\"n\">roc_path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ReadErr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and that there is a zig version of RocList in crates/compiler/builtins/bitcode/src/list.zig</p>",
        "id": 303108293,
        "sender_full_name": "Travis",
        "timestamp": 1665306524
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> i hadn't seen <code>roc_alloc</code> yet. i'm thinking that <code>RocStr.allocate</code> is the way to do this but still seeing no output in roc with it. is it correct to just read bytes from the file directly into the <code>RocStr</code>? or is there an encoding i'm missing?</p>",
        "id": 303108749,
        "sender_full_name": "Travis",
        "timestamp": 1665306865
    },
    {
        "content": "<p>i assumed since this is <code>readFileBytes</code> that it does no encoding</p>",
        "id": 303108826,
        "sender_full_name": "Travis",
        "timestamp": 1665306931
    },
    {
        "content": "<p>As long as zig uses utf8, reading into a <code>RocStr</code> should be correct. I am actually surprised the rust version using a <code>RocList&lt;U8&gt;</code></p>",
        "id": 303141809,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665327223
    },
    {
        "content": "<p>ok thats good to know. zig strings are not encoded in any way, just byte slices.</p>",
        "id": 303143307,
        "sender_full_name": "Travis",
        "timestamp": 1665328238
    },
    {
        "content": "<p>any idea about the correctness of  the last few lines of my zig <code>roc_fx_fileReadBytes()</code> here  <a href=\"#narrow/stream/347488-roctoberfest/topic/Alternative.20platform.20languages/near/303105460\">https://roc.zulipchat.com/#narrow/stream/347488-roctoberfest/topic/Alternative.20platform.20languages/near/303105460</a> ?  i'm interpreting the first param as a <code>*RocResult</code> and writing a 1 to the first <code>usize</code> then treating the next 3 <code>usize</code> as a <code>RocStr</code> value.</p>",
        "id": 303143534,
        "sender_full_name": "Travis",
        "timestamp": 1665328375
    },
    {
        "content": "<p>here is an updated version which uses <code>RocStr.allocate()</code></p>",
        "id": 303144874,
        "sender_full_name": "Travis",
        "timestamp": 1665329247
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_fileReadBytes</span><span class=\"p\">(</span><span class=\"n\">result</span>: <span class=\"o\">*</span><span class=\"n\">RocResult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">cwd</span><span class=\"p\">().</span><span class=\"n\">openFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">asSlice</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">.{})</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">defer</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">rocstr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rocstr</span><span class=\"p\">.</span><span class=\"n\">str_bytes</span><span class=\"w\"> </span><span class=\"n\">orelse</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">amt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">readAll</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// std.debug.print(\"slice {s}\\n\", .{slice[0..10]});</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">amt</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">usizes</span>: <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">ptrCast</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">alignCast</span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"n\">alignOf</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">usizes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Ok tag == 1</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">outstr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">ptrCast</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">usizes</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outstr</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rocstr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303144885,
        "sender_full_name": "Travis",
        "timestamp": 1665329256
    },
    {
        "content": "<p><code>RocResults</code> doesn't work that way. The tag is at the end.</p>",
        "id": 303152500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665334114
    },
    {
        "content": "<p>I am pretty sure we always put tags at the end to save space by making them able to pack smaller</p>",
        "id": 303152534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665334150
    },
    {
        "content": "<p>Also, I think you should be returning the RocResult, not taking it as an out param.</p>",
        "id": 303152713,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665334262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Alternative.20platform.20languages/near/303152713\">said</a>:</p>\n<blockquote>\n<p>Also, I think you should be returning the RocResult, not taking it as an out param.</p>\n</blockquote>\n<p>if this is the case, any idea what the first param is? path is being correctly passed as the second param and i'm able to print it out.</p>",
        "id": 303154400,
        "sender_full_name": "Travis",
        "timestamp": 1665335434
    },
    {
        "content": "<p>Ah, that's just c-abi fun. I guess technically under c-abi the two function signatures are the same.</p>",
        "id": 303154628,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665335591
    },
    {
        "content": "<p>Anything returned that is larger than 128bit is converted to return via pointer. But zigs callconv c should handle that for you. Also, zig handling it means you don't have to think about the differences as you change platforms.</p>",
        "id": 303154734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665335671
    },
    {
        "content": "<p>ah that makes sense. so would it be proper to ignore the first param and return a RocResult by value or go back to the out param?</p>",
        "id": 303154929,
        "sender_full_name": "Travis",
        "timestamp": 1665335845
    },
    {
        "content": "<p>You would have to go back to the out param.</p>",
        "id": 303155022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665335892
    },
    {
        "content": "<p>Also, as a base test, maybe make it just return a RocStr and not a result. That will ensure the pipelining before you figure out the RocResult correctly.</p>",
        "id": 303155091,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665335948
    },
    {
        "content": "<p>hmm ok thanks. will give it a try.</p>",
        "id": 303155150,
        "sender_full_name": "Travis",
        "timestamp": 1665335989
    },
    {
        "content": "<p>Hmm. Also just double checked some code. How you set the roc result originally actually looks correct. We do put the tag at the beginning. I stand corrected.</p>",
        "id": 303155482,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665336210
    },
    {
        "content": "<p>Hmmm....i am confused. In our rust code for roc result, the tag is at the end. In a util function in zig, the tag is at the beginning.....definitely a bug somewhere.</p>",
        "id": 303155876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665336477
    },
    {
        "content": "<p>Ah, the zig function is never used....so probably wrong.</p>",
        "id": 303155961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665336523
    },
    {
        "content": "<p>yeah i was a little confused by that too. are you looking at <code>const RocResult =</code> in crates/compiler/builtins/bitcode/src/utils.zig ?</p>",
        "id": 303156157,
        "sender_full_name": "Travis",
        "timestamp": 1665336660
    },
    {
        "content": "<p>Ok, yeah sorry for the confusion. Ignore the code in <code>utils.zig</code> it isn't used and is outdated and wrong. So I am pretty sure the tag is at the beginning and you should define RocResult like this (rust definition):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">payload</span>: <span class=\"nc\">RocResultPayload</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tag</span>: <span class=\"nc\">RocResultTag</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">RocResultTag</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">RocErr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">RocOk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">union</span> <span class=\"nc\">RocResultPayload</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ok</span>: <span class=\"nc\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">err</span>: <span class=\"nc\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303156220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665336714
    },
    {
        "content": "<p>ok sounds good. one last question, would the result payload be a <code>*RocStr</code> or <code>RocStr</code>?</p>",
        "id": 303156417,
        "sender_full_name": "Travis",
        "timestamp": 1665336852
    },
    {
        "content": "<p>or more generally <code>*T</code> vs <code>T</code></p>",
        "id": 303156475,
        "sender_full_name": "Travis",
        "timestamp": 1665336911
    },
    {
        "content": "<p>Should be a RocStr</p>",
        "id": 303156509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665336948
    },
    {
        "content": "<p>So T</p>",
        "id": 303156522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665336958
    },
    {
        "content": "<p>i made a repo for this incase anyone is interested in using or contributing</p>",
        "id": 303196425,
        "sender_full_name": "Travis",
        "timestamp": 1665377536
    },
    {
        "content": "<p><a href=\"https://github.com/travisstaloch/roc-zig-cli-platform\">https://github.com/travisstaloch/roc-zig-cli-platform</a></p>",
        "id": 303196431,
        "sender_full_name": "Travis",
        "timestamp": 1665377541
    },
    {
        "content": "<p>so far it can only really do <code>Stdout.line</code>. the following works with the commented out lines currently broken.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Program</span><span class=\"w\"></span>\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pathstr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"platform-test/1.txt\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"n\">pathstr</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"this gets printed\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\"># contents &lt;- Task.await (File.readBytes path)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\"># _ &lt;- Task.await (Stdout.line ((Str.fromUtf8 contents) # silently fails, breaks subsequent prints</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">#    |&gt; (Result.withDefault \"oops\")))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"this doesn't get printed\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Program</span><span class=\"o\">.</span><span class=\"n\">quick</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303196602,
        "sender_full_name": "Travis",
        "timestamp": 1665377762
    },
    {
        "content": "<p>its a straight copy of the rust platform in examples/cli/cli-platform</p>",
        "id": 303196721,
        "sender_full_name": "Travis",
        "timestamp": 1665377848
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>./build.sh\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">platform-test/1.txt</span>\n<span class=\"go\">this gets printed</span>\n<span class=\"go\">this doesn't get printed</span>\n</code></pre></div>",
        "id": 303197262,
        "sender_full_name": "Travis",
        "timestamp": 1665378299
    },
    {
        "content": "<p>i am hoping to get some guidance on how to make <code>File.readBytes</code> work correctly. here is my attempt: <a href=\"https://github.com/travisstaloch/roc-zig-cli-platform/blob/main/platform/host.zig#L258\">https://github.com/travisstaloch/roc-zig-cli-platform/blob/main/platform/host.zig#L258</a></p>",
        "id": 303197503,
        "sender_full_name": "Travis",
        "timestamp": 1665378503
    },
    {
        "content": "<p>Just a general note for you, there is a tool <code>roc glue</code> that will make this significantly easier in the future. Currently it only supports rust, but it is made to take roc data structures and convert them to another language. Would eventually also do function signatures. That would more or less directly solve the main problems you are fighting here.</p>",
        "id": 303203098,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665383074
    },
    {
        "content": "<p>neat! will keep an eye on it.  i'm guessing it depends on a rust/cargo?  that might explain the panic when i try to use it</p>",
        "id": 303206794,
        "sender_full_name": "Travis",
        "timestamp": 1665385597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Alternative.20platform.20languages/near/303155091\">said</a>:</p>\n<blockquote>\n<p>Also, as a base test, maybe make it just return a RocStr and not a result. That will ensure the pipelining before you figure out the RocResult correctly.</p>\n</blockquote>\n<p>I forgot to mention that I did attempt this, and was glad for the suggestion. but I couldn't manage to create correct roc Effect code to call it.</p>",
        "id": 303262244,
        "sender_full_name": "Travis",
        "timestamp": 1665409285
    },
    {
        "content": "<p>and if you have any suggestions on how to do it, i'd like to try them</p>",
        "id": 303262547,
        "sender_full_name": "Travis",
        "timestamp": 1665409412
    },
    {
        "content": "<p>on a different note, I wonder if the issues i'm having could possibly be invoking some zig/c abi bugs? there was discussion in the zig discord  yesterday  about this <a href=\"https://discord.com/channels/605571803288698900/785499283368706060/1028831580426354718\">https://discord.com/channels/605571803288698900/785499283368706060/1028831580426354718</a> - sounds like its specific to zig extern structs as arguments to c functions</p>",
        "id": 303263193,
        "sender_full_name": "Travis",
        "timestamp": 1665409599
    },
    {
        "content": "<p>i might try implementing <code>roc_fx_fileReadBytes()</code> in c</p>",
        "id": 303263665,
        "sender_full_name": "Travis",
        "timestamp": 1665409767
    },
    {
        "content": "<p>and if that works, i wonder if its possible to have a mixed c/zig host?</p>",
        "id": 303264202,
        "sender_full_name": "Travis",
        "timestamp": 1665409965
    },
    {
        "content": "<p>Zig will compile c, do that should be fine</p>",
        "id": 303266297,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665410638
    },
    {
        "content": "<p>Also, I'll try and take a look today to see if I missed something with the zig signature</p>",
        "id": 303266385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665410658
    },
    {
        "content": "<blockquote>\n<p>Zig will compile c, do that should be fine</p>\n</blockquote>\n<p>are you thinking of @cImport or does roc automatically add host.c files to the compilation?</p>",
        "id": 303266680,
        "sender_full_name": "Travis",
        "timestamp": 1665410772
    },
    {
        "content": "<p>cause @cImport is really meant for headers, not implementations</p>",
        "id": 303267031,
        "sender_full_name": "Travis",
        "timestamp": 1665410909
    },
    {
        "content": "<p>I just mean that I know zig can be used to build projects that are a mix of c and zig. So this should be possible to set up</p>",
        "id": 303267753,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665411172
    },
    {
        "content": "<p>oic. yeah would be nice</p>",
        "id": 303268773,
        "sender_full_name": "Travis",
        "timestamp": 1665411513
    },
    {
        "content": "<p>We would probably have to change roc to support build.zig files, but should be doable.</p>",
        "id": 303269746,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665411843
    },
    {
        "content": "<p>do you happen to know much about how platforms are built? i want to know why its possible to @import(\"str\") package in a host.zig</p>",
        "id": 303269838,
        "sender_full_name": "Travis",
        "timestamp": 1665411871
    },
    {
        "content": "<p>the only build.zig i could find in the whole project is ./crates/compiler/builtins/bitcode/build.zig and it doesn't seem to call <code>addPackage()</code> anywhere</p>",
        "id": 303269972,
        "sender_full_name": "Travis",
        "timestamp": 1665411916
    },
    {
        "content": "<p>Just a simple hack were we call zig build-exe with an extra age for our internal str.zig file. Look at crstes/compiler/build/src/link.rs (full disclosure: very hacked together and naturally grown)</p>",
        "id": 303270120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665411966
    },
    {
        "content": "<p>maybe there is a command line for it ie: <code>$ zig build-exe ... --pkg-begin str .. --pkg-end</code></p>",
        "id": 303270167,
        "sender_full_name": "Travis",
        "timestamp": 1665411989
    },
    {
        "content": "<p>ah ok thank you</p>",
        "id": 303270223,
        "sender_full_name": "Travis",
        "timestamp": 1665412010
    },
    {
        "content": "<p>And yeah, exactly what you just posted</p>",
        "id": 303270265,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665412026
    },
    {
        "content": "<p>Realistically, we shouldn't do that. Our str.zig file should be internal only. Platforms longer term should depend on glue for a proper definition. Just doesn't support anything but rust yet.</p>",
        "id": 303270393,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665412075
    },
    {
        "content": "<p>good to know where that happens</p>",
        "id": 303270404,
        "sender_full_name": "Travis",
        "timestamp": 1665412081
    },
    {
        "content": "<p>Ok. So example implementation that at least mostly works:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc_fx_fileReadBytes</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">RocList</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ResultRocList</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Called fileReadBytes</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">path_ptr</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">path_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path_ptr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">realpathbuf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">256</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">realpath</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">cwd</span><span class=\"p\">().</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"s\">\".\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">realpathbuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"path '{s}' realpath {s}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"n\">path_slice</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">realpath</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">cwd</span><span class=\"p\">().</span><span class=\"n\">openFile</span><span class=\"p\">(</span><span class=\"n\">path_slice</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{})</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">roc_panic_print</span><span class=\"p\">(</span><span class=\"s\">\"{s} file path '{s}'</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"nb\">@errorName</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">path_slice</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">roc_panic_print</span><span class=\"p\">(</span><span class=\"s\">\"{s} file path '{s}'</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"nb\">@errorName</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">path_slice</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// std.debug.print(\"stat.size {}\\n\", .{stat.size});</span>\n<span class=\"w\">        </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">roclist</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"p\">.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"nb\">@alignOf</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">roclist</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">bytes</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">amt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">readAll</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"k\">unreachable</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">amt</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ResultRocList</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">roclist</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ResultRocList</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocList</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303277305,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665414380
    },
    {
        "content": "<p>Note, using RocList to match the Effect that is defined: <code>fileReadBytes : List U8 -&gt; Effect (Result (List U8) InternalFile.ReadErr)</code></p>",
        "id": 303277356,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665414407
    },
    {
        "content": "<p>For your roc main:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">display</span><span class=\"w\"> </span><span class=\"nx\">path</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"this gets printed\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">contents</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">File</span><span class=\"p\">.</span><span class=\"nx\">readBytes</span><span class=\"w\"> </span><span class=\"nx\">path</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">fromUtf8</span><span class=\"w\"> </span><span class=\"nx\">contents</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># silently fails, breaks subsequent prints</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"oops\"</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"this doesn't get printed\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The last line doesn't print because the <code>Task.await</code> is returning a failure. That kills the rest of the task chain.</p>",
        "id": 303277747,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665414533
    },
    {
        "content": "<p>Why does the function return a failure even when you set the tag to 1:</p>\n<p>Try commenting out <code>Unrecognized I32 Str</code> in <code>InternalFile.roc</code>. Now everything should run fine.</p>",
        "id": 303277877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665414588
    },
    {
        "content": "<p>oh wow! i'm going to try it out now <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 303278053,
        "sender_full_name": "Travis",
        "timestamp": 1665414650
    },
    {
        "content": "<p>The root issues is that the Error case is larger than the Ok case. As such, your result is not the right size. The payload is not the size of a RocList. It is the size of a tag union that contains a RocStr and an I32.</p>",
        "id": 303278115,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665414686
    },
    {
        "content": "<p>Commenting out that line makes the payload smaller than a RocList and everything works.</p>",
        "id": 303278172,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665414711
    },
    {
        "content": "<p>that makes a lot of sense about the await chain being broken. i wondered about that.</p>",
        "id": 303278240,
        "sender_full_name": "Travis",
        "timestamp": 1665414728
    },
    {
        "content": "<p>i am surprised this works. i was never able to use path as the first param. maybe a c-ism like you talked about yesterday (returning a value vs out param)</p>",
        "id": 303278572,
        "sender_full_name": "Travis",
        "timestamp": 1665414867
    },
    {
        "content": "<blockquote>\n<p>The root issues is that the Error case is larger than the Ok case. As such, your result is not the right size. The payload is not the size of a RocList. It is the size of a tag union that contains a RocStr and an I32.</p>\n</blockquote>\n<p>are you referencing my impl or yours here?</p>",
        "id": 303278858,
        "sender_full_name": "Travis",
        "timestamp": 1665414986
    },
    {
        "content": "<p>That was a follow up to this line:</p>\n<blockquote>\n<p>Try commenting out <code>Unrecognized I32 Str</code> in <code>InternalFile.roc</code>. Now everything should run fine.</p>\n</blockquote>",
        "id": 303279094,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665415086
    },
    {
        "content": "<p>The defined error type in Roc.</p>",
        "id": 303279110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665415096
    },
    {
        "content": "<p><code>InternalFile.ReadErr</code></p>",
        "id": 303279135,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665415112
    },
    {
        "content": "<p>Also, I didn't fix the issue in the zig code I posted.</p>",
        "id": 303279202,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665415138
    },
    {
        "content": "<p>Which is why I just said comment out that line for now.</p>",
        "id": 303279262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665415158
    },
    {
        "content": "<p>Oh, just noticed.<br>\nThis is wrong: <code>var roclist = RocList.allocate(@alignOf(usize), stat.size, stat.size);</code></p>\n<p>The last argument should be the element size, so <code>@sizeOf(u8)</code></p>",
        "id": 303281248,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665415886
    },
    {
        "content": "<p>i think i've made all the changes you indicated. but i'm not seeing any file output. did you see the file printed out?</p>",
        "id": 303281587,
        "sender_full_name": "Travis",
        "timestamp": 1665415990
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>./build.sh\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">platform-test/1.txt</span>\n<span class=\"go\">this gets printed</span>\n<span class=\"go\">Called fileReadBytes</span>\n<span class=\"go\">path 'platform-test/1.txt' realpath ~/roc/advent-of-code</span>\n<span class=\"go\">roclist.bytes != null # added by me</span>\n<span class=\"go\">runtime: 0.081ms</span>\n</code></pre></div>",
        "id": 303281647,
        "sender_full_name": "Travis",
        "timestamp": 1665416009
    },
    {
        "content": "<blockquote>\n<p>The last argument should be the element size, so @sizeOf(u8)</p>\n</blockquote>\n<p>still no file output. are you seeing any thing different?</p>",
        "id": 303282319,
        "sender_full_name": "Travis",
        "timestamp": 1665416251
    },
    {
        "content": "<p>Yeah, I saw the file printed out.</p>",
        "id": 303283047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665416516
    },
    {
        "content": "<p>Can you push your changes so I can take a look?</p>",
        "id": 303283080,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665416524
    },
    {
        "content": "<p>yeah sure. just a minute. btw, what os are you on? im on linux debian x64</p>",
        "id": 303283234,
        "sender_full_name": "Travis",
        "timestamp": 1665416573
    },
    {
        "content": "<p>aw snap nevermind. i edited the wrong InternalFile.roc (i have a sub folder of the originals)</p>",
        "id": 303283814,
        "sender_full_name": "Travis",
        "timestamp": 1665416768
    },
    {
        "content": "<p>it works! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 303283840,
        "sender_full_name": "Travis",
        "timestamp": 1665416782
    },
    {
        "content": "<p>was about to commit the changes and noticed the missing diff</p>",
        "id": 303283951,
        "sender_full_name": "Travis",
        "timestamp": 1665416818
    },
    {
        "content": "<p>I generally use an M1 mac (light weight and portable form factor), but I also use debian x64 pretty often.</p>",
        "id": 303284021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665416839
    },
    {
        "content": "<p>ok only reason i asked is i thought it might account for the differences. but no just edited the wrong file. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 303284264,
        "sender_full_name": "Travis",
        "timestamp": 1665416909
    },
    {
        "content": "<p>but thanks a lot! i'll have to think about this a bit maybe have some questions later on.</p>",
        "id": 303284645,
        "sender_full_name": "Travis",
        "timestamp": 1665417036
    },
    {
        "content": "<p>do you want to make a pr or should i just credit you in comments?</p>",
        "id": 303284664,
        "sender_full_name": "Travis",
        "timestamp": 1665417044
    },
    {
        "content": "<p>ok i think i'm following what you said about the payload sizes differing and how commenting that line out make the sizes comptible now.</p>",
        "id": 303285565,
        "sender_full_name": "Travis",
        "timestamp": 1665417385
    },
    {
        "content": "<p>so the fix would be to implement the &lt;T, E&gt; union like in rust?</p>",
        "id": 303285659,
        "sender_full_name": "Travis",
        "timestamp": 1665417428
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">union</span> <span class=\"nc\">RocResultPayload</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ok</span>: <span class=\"nc\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">err</span>: <span class=\"nc\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303285856,
        "sender_full_name": "Travis",
        "timestamp": 1665417489
    },
    {
        "content": "<p>but then i wouldn't know how to get the size of E <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 303286054,
        "sender_full_name": "Travis",
        "timestamp": 1665417596
    },
    {
        "content": "<blockquote>\n<p>do you want to make a pr or should i just credit you in comments?</p>\n</blockquote>\n<p>Don't worry about it. Just here to help</p>",
        "id": 303300180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665422937
    },
    {
        "content": "<blockquote>\n<p>so the fix would be to implement the &lt;T, E&gt; union like in rust?</p>\n</blockquote>\n<p>Correct</p>",
        "id": 303300225,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665422953
    },
    {
        "content": "<blockquote>\n<p>but then i wouldn't know how to get the size of E <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>Yeah....this is where glue would be quit useful. Instead you have to do it manually.</p>\n<p>There error type should be fine to define as:</p>\n<div class=\"codehilite\"><pre><span></span><code>code: i32,\nmessage: RocStr,\ntag: u8\n</code></pre></div>\n<p>Where tag picks the specific <code>ReadError</code> in alphabetical order and code/message are only set when using the <code>Unrecognized</code> variant.</p>",
        "id": 303300715,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665423160
    },
    {
        "content": "<p>You should be able to make constructors such that the use is less painful.</p>",
        "id": 303300837,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665423208
    },
    {
        "content": "<p>oic so i would need to sync the sizes myself. makes sense. idk why i was thinking it could be provided dynamically somehow at compile time.</p>",
        "id": 303301080,
        "sender_full_name": "Travis",
        "timestamp": 1665423317
    },
    {
        "content": "<p>i can see where glue would be nice to have for this.</p>",
        "id": 303301110,
        "sender_full_name": "Travis",
        "timestamp": 1665423333
    },
    {
        "content": "<p>Yep, it makes platform dev a world nicer</p>",
        "id": 303301798,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665423651
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> last night i tried running other's aoc roc solutions including yours.  as a result i added <code>Stdout.line</code> support locally and then ran into <code>foc_fx_args</code> missing.  do you have any recommendations on how implement that one?</p>",
        "id": 303450567,
        "sender_full_name": "Travis",
        "timestamp": 1665498612
    },
    {
        "content": "<p>I think it just returns a <code>List (Str)</code> of the args passed into the program.</p>",
        "id": 303450804,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665498685
    },
    {
        "content": "<p>i tried to wing it by just making that function and building a RocList&lt;RocString&gt; from <code>std.process.args</code> but there were 0 args when i tried to run it which was strange.</p>",
        "id": 303450810,
        "sender_full_name": "Travis",
        "timestamp": 1665498687
    },
    {
        "content": "<p>that seems wrong, there should always be at least the executable name...</p>",
        "id": 303450885,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665498711
    },
    {
        "content": "<p>hmm</p>",
        "id": 303450888,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665498713
    },
    {
        "content": "<p>Also, zero args on the zig side, or none got passed to the roc app?</p>",
        "id": 303451014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665498733
    },
    {
        "content": "<p>i looked at your #3990 pr a bit but didn't get too far. i see there are <code>roc_main</code> and <code>roc__mainForHost_1_exposed_generic</code> functions but i'm not sure if those are important here.</p>",
        "id": 303451195,
        "sender_full_name": "Travis",
        "timestamp": 1665498777
    },
    {
        "content": "<p>The rust version just defines it as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_args</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// TODO: can we be more efficient about reusing the String's memory for RocStr?</span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">args_os</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">os_str</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RocStr</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">os_str</span><span class=\"p\">.</span><span class=\"n\">to_string_lossy</span><span class=\"p\">().</span><span class=\"n\">borrow</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So basically what you said.</p>",
        "id": 303451401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665498830
    },
    {
        "content": "<p>zero args. i tried using both <code>process.args()</code> and <code>process.argsAlloc()</code> and both had 0 args</p>",
        "id": 303451426,
        "sender_full_name": "Travis",
        "timestamp": 1665498835
    },
    {
        "content": "<p>yeah i looked at the rust version too and was following it. thats why i assumed i could just do what i did. is there something else that has to happen first?</p>",
        "id": 303451680,
        "sender_full_name": "Travis",
        "timestamp": 1665498897
    },
    {
        "content": "<p>Also, 0 args when printing them from zig? If so, that is probably some sort of zig issue.</p>",
        "id": 303452227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665499047
    },
    {
        "content": "<p>If you can print out the args from zig, probably just some sort of issue generating the list of strings.</p>",
        "id": 303452388,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665499082
    },
    {
        "content": "<p>Also, just creating that effect should be enough to my understanding.</p>",
        "id": 303452565,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665499118
    },
    {
        "content": "<p>ooh thats one thing i didn't consider much. i'll review the .roc files in my platform folder. might have commented something out or forgot to copy over.</p>",
        "id": 303453106,
        "sender_full_name": "Travis",
        "timestamp": 1665499231
    },
    {
        "content": "<p>i don't see anything amiss with the .roc files. i see Effect.roc/args and Process.roc/withArgs were copied over from the cli-platform.</p>",
        "id": 303454150,
        "sender_full_name": "Travis",
        "timestamp": 1665499529
    },
    {
        "content": "<p>maybe i'll see whats in <code>std.os.argv</code></p>",
        "id": 303454215,
        "sender_full_name": "Travis",
        "timestamp": 1665499553
    },
    {
        "content": "<p>yeah strange. here's what i see after building</p>\n<div class=\"codehilite\"><pre><span></span><code>$ day1/exec-part1 day1/data.txt\nargv.len 0 # printed out from zig\nExpected a file name passed on the command line\n</code></pre></div>",
        "id": 303455378,
        "sender_full_name": "Travis",
        "timestamp": 1665499898
    },
    {
        "content": "<p>i'll search for that error message 'Expected a file name passed on the command line' see what that turns up</p>",
        "id": 303455465,
        "sender_full_name": "Travis",
        "timestamp": 1665499923
    },
    {
        "content": "<p>ah that message was from your advent day1 solution. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> of course. so something is not happening on zig side. i wonder why there are no args there <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 303456768,
        "sender_full_name": "Travis",
        "timestamp": 1665500308
    },
    {
        "content": "<p>I guess make a zig app without any roc and make sure it works correctly on your computer?</p>",
        "id": 303459621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665501129
    },
    {
        "content": "<p>yeah args look fine from standalone zig app: </p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>cat test.zig\n<span class=\"go\">const std = @import(\"std\");</span>\n\n<span class=\"go\">pub fn main() !void {</span>\n<span class=\"go\">    const allocator = std.heap.page_allocator;</span>\n<span class=\"go\">    const args = try std.process.argsAlloc(allocator);</span>\n<span class=\"go\">    std.debug.print(\"args.len {}\\n\", .{args.len});</span>\n<span class=\"go\">}</span>\n<span class=\"go\">travis:/tmp/roc-aoc-2021</span>\n<span class=\"gp\">$ </span>zig run test.zig -- asdf asdf\n<span class=\"go\">args.len 3</span>\n</code></pre></div>",
        "id": 303462671,
        "sender_full_name": "Travis",
        "timestamp": 1665502004
    },
    {
        "content": "<p>Interesting. I wonder if it has to be run from main/roc is messing that up? What happens if you put the function in main instead of in roc_fx_args?</p>",
        "id": 303465350,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665502681
    },
    {
        "content": "<p>you mean what happens if i print out args from host.zig/main()? i tried that too last night and saw 0 args</p>",
        "id": 303466639,
        "sender_full_name": "Travis",
        "timestamp": 1665503082
    },
    {
        "content": "<p>Can you try with <code>--linker=legacy</code></p>",
        "id": 303468047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665503534
    },
    {
        "content": "<p>same thing. no args. here's how i called it</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc day1/part1.roc --linker<span class=\"o\">=</span>legacy -- day1/data.txt\n</code></pre></div>",
        "id": 303468678,
        "sender_full_name": "Travis",
        "timestamp": 1665503768
    },
    {
        "content": "<p>Hmm....i am quite confused.</p>",
        "id": 303471795,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665504773
    },
    {
        "content": "<p>yeah me too. i'm looking at some of the rust platform examples like the false interpreter have an args param</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_1_exposed_generic\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">roc_main</span><span class=\"p\">(</span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>while others have none</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_1_exposed_generic\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">roc_main</span><span class=\"p\">(</span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303474205,
        "sender_full_name": "Travis",
        "timestamp": 1665505550
    },
    {
        "content": "<p>Just different designs. False interpretter passes it in as an arg to main.</p>",
        "id": 303476961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665506435
    },
    {
        "content": "<p>The cli platform passes it in via an effect.</p>",
        "id": 303476998,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665506446
    },
    {
        "content": "<p>if you have time to try running it, i just pushed a wip commit with debug statements in host.zig/main() and roc_fx_args()</p>",
        "id": 303485913,
        "sender_full_name": "Travis",
        "timestamp": 1665509410
    },
    {
        "content": "<p>run against your day1/part1.roc should trigger the debug statements</p>",
        "id": 303485990,
        "sender_full_name": "Travis",
        "timestamp": 1665509445
    },
    {
        "content": "<p>here's what i see</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc day1/part1.roc -- day1/data.txt\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">main() args.len 0</span>\n<span class=\"go\">roc_fx_args() args.len 0 osargs.len 0</span>\n<span class=\"go\">Expected a file name passed on the command line</span>\n<span class=\"go\">runtime: 0.030ms</span>\n</code></pre></div>",
        "id": 303486097,
        "sender_full_name": "Travis",
        "timestamp": 1665509485
    },
    {
        "content": "<p>So my only guess is the fact that we tell zig to build an object file. Then call ld directly to link it is somehow breaking things.</p>",
        "id": 303544322,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665536484
    },
    {
        "content": "<p>So this may be a case of quite annoying to debug</p>",
        "id": 303544647,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665536679
    },
    {
        "content": "<p>Even letting zig control the building and linking doesn't work: <code>zig build-exe platform/host.zig ~/Projects/roc-aoc-2021/day1/exec-part1.o</code></p>",
        "id": 303545507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665537305
    },
    {
        "content": "<p>It runs, but no args.</p>",
        "id": 303545520,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665537312
    },
    {
        "content": "<p>I figured out the issue. It makes little sense to me, but I found it.</p>\n<p><code>pub export fn main() callconv(.C) u8</code> -&gt; <code>pub fn main() u8</code></p>",
        "id": 303546101,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665537790
    },
    {
        "content": "<p>Causes the program the have args and then crash for what look like proper reasons.</p>",
        "id": 303546120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665537812
    },
    {
        "content": "<p>Something with <code>list.listAppendUnsafe</code></p>",
        "id": 303546185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665537849
    },
    {
        "content": "<p>thanks so much! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>  i never would have thought of this.  i'm seeing a similar crash here now but the length of the args looks correct. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 303548830,
        "sender_full_name": "Travis",
        "timestamp": 1665540312
    },
    {
        "content": "<p>got it working. fix was passing <code>@ptrCast([*]u8, &amp;rocstr)</code> instead of <code>rocstr.str_bytes</code></p>",
        "id": 303549542,
        "sender_full_name": "Travis",
        "timestamp": 1665541003
    },
    {
        "content": "<p>in the meantime, i've got Env.cwd working.</p>",
        "id": 303549943,
        "sender_full_name": "Travis",
        "timestamp": 1665541432
    },
    {
        "content": "<p>and Env.var</p>",
        "id": 303550007,
        "sender_full_name": "Travis",
        "timestamp": 1665541475
    },
    {
        "content": "<p>somehow Env.setCwd doesn't seem to work tho.</p>",
        "id": 303550050,
        "sender_full_name": "Travis",
        "timestamp": 1665541539
    },
    {
        "content": "<p>atleast when i try to <code>cd /tmp</code> and then print <code>cwd</code> again it doesn't change</p>",
        "id": 303550053,
        "sender_full_name": "Travis",
        "timestamp": 1665541545
    },
    {
        "content": "<p>and its also seems wierd that arg 0 is ' /proc/self/fd/3' <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span><span class=\"nv\">foo</span><span class=\"o\">=</span>bar roc platform-test/main.roc -- asdf asfd\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">platform-test/1.txt</span>\n<span class=\"go\">...</span>\n<span class=\"go\">cli arg 0: /proc/self/fd/3</span>\n<span class=\"go\">cli arg 1: asdf</span>\n<span class=\"go\">cwd ~/roc/advent-of-code</span>\n<span class=\"go\">cwd2 should be /tmp ~/roc/advent-of-code</span>\n<span class=\"go\">env:foo=bar</span>\n<span class=\"go\">runtime: 0.109ms</span>\n</code></pre></div>",
        "id": 303550227,
        "sender_full_name": "Travis",
        "timestamp": 1665541699
    },
    {
        "content": "<p>arg 1 looks fine. exe path is wierd. i'll try making <code>roc_fx_exePath</code> next and see if that is different.</p>",
        "id": 303550541,
        "sender_full_name": "Travis",
        "timestamp": 1665542029
    },
    {
        "content": "<p>Arg 0 is weird because we compile in memory and then launch from the roc run executable as opposed to launching the binary from disk</p>",
        "id": 303552121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665543654
    },
    {
        "content": "<p>aaah. i see. good to know</p>",
        "id": 303552612,
        "sender_full_name": "Travis",
        "timestamp": 1665544201
    },
    {
        "content": "<p>ok makes more sense now. arg 0 is only borked when run with <code>roc file.roc</code></p>",
        "id": 303555678,
        "sender_full_name": "Travis",
        "timestamp": 1665547504
    },
    {
        "content": "<p>but runing the compiled version arg 0  looks fine.</p>",
        "id": 303555682,
        "sender_full_name": "Travis",
        "timestamp": 1665547508
    },
    {
        "content": "<p>oops. Env.setCwd works fine. i was printing out the same path twice <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>  <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 303558191,
        "sender_full_name": "Travis",
        "timestamp": 1665549851
    },
    {
        "content": "<p>Awesome to see all the progress</p>",
        "id": 303558850,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665550445
    },
    {
        "content": "<p>thanks <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> .  you deserve a lot of the credit. been very helpful and patient with my flails.</p>",
        "id": 303559277,
        "sender_full_name": "Travis",
        "timestamp": 1665550884
    },
    {
        "content": "<p><span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 303559295,
        "sender_full_name": "Travis",
        "timestamp": 1665550898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> if you have a chance, take a look at my error handling attempts: <a href=\"https://github.com/travisstaloch/roc-cli-platform-zig/blob/main/platform/host.zig#L249\">https://github.com/travisstaloch/roc-cli-platform-zig/blob/main/platform/host.zig#L249</a>  I haven't really tested the error handling except to verify that it can catch \"Not Found\".</p>",
        "id": 303675130,
        "sender_full_name": "Travis",
        "timestamp": 1665591944
    },
    {
        "content": "<p>but i reworked as a union &lt;T,E&gt; like we discussed. not 100% sure about the layout.</p>",
        "id": 303675300,
        "sender_full_name": "Travis",
        "timestamp": 1665591996
    },
    {
        "content": "<p>but it atleast works after adding back the ReadError <code>Unrecognized I32 Str,</code> line</p>",
        "id": 303675659,
        "sender_full_name": "Travis",
        "timestamp": 1665592116
    },
    {
        "content": "<p>and doesn't panic anymore. the error handling was tricky. only real changes are to <code>roc_fx_fileReadBytes</code></p>",
        "id": 303675768,
        "sender_full_name": "Travis",
        "timestamp": 1665592161
    },
    {
        "content": "<p>its strange that zig's Dir.openFile() wasn't returning an error for file not found. and then there was a panic in the  File.stat() call which meant i had to check for <code>fd == -1</code></p>",
        "id": 303676324,
        "sender_full_name": "Travis",
        "timestamp": 1665592331
    },
    {
        "content": "<p>wonder if this has changed since 0.9.1</p>",
        "id": 303676522,
        "sender_full_name": "Travis",
        "timestamp": 1665592402
    },
    {
        "content": "<p>I think <code>Payload</code> needs to be sorted alphabetically, otherwise, I think that is correct. Would need to do some testing to confirm though.</p>",
        "id": 303679011,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665593254
    },
    {
        "content": "<p>Should have time to do that later</p>",
        "id": 303679076,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665593274
    },
    {
        "content": "<p>Also, really interesting helper for initializing them.</p>",
        "id": 303679161,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665593289
    },
    {
        "content": "<p>yeah i thought the helper makes verbose union init syntax a lot cleaner</p>",
        "id": 303685846,
        "sender_full_name": "Travis",
        "timestamp": 1665595447
    },
    {
        "content": "<p>if you have any ideas for testing i'm all ears. i was considering trying to pare things down into separate files.</p>",
        "id": 303686241,
        "sender_full_name": "Travis",
        "timestamp": 1665595575
    },
    {
        "content": "<p>i wonder if its possible to run a Task in an expect? i tried the other day but couldn't figure it out.</p>",
        "id": 303686443,
        "sender_full_name": "Travis",
        "timestamp": 1665595646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"551275\">Travis</span> <a href=\"#narrow/stream/347488-roctoberfest/topic/Alternative.20platform.20languages/near/303686443\">said</a>:</p>\n<blockquote>\n<p>i wonder if its possible to run a Task in an expect? i tried the other day but couldn't figure it out.</p>\n</blockquote>\n<p>not yet! we're going to have a separate <code>expect-fx</code> keyword for that, but it doesn't exist yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 303688409,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665596268
    },
    {
        "content": "<p>well, that's for testing in the sense of actually running the task - there's a separate concept of \"simulating\" tasks where you never actually run them, but rather sort of mock out their inputs and outputs; that's a separate topic</p>",
        "id": 303688630,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665596343
    },
    {
        "content": "<p>ooh <code>expect-fx</code> sounds neat.  cool to hear thats in the works. and there was good reason it wasn't working for me.</p>",
        "id": 303690051,
        "sender_full_name": "Travis",
        "timestamp": 1665596825
    },
    {
        "content": "<p>The manual way to test is to trigger each error from roc and then have roc print a message for each error. Should tell you if it gets every value correctly.</p>",
        "id": 303691126,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665597149
    },
    {
        "content": "<p>yeah i think i'll try to break up into smaller tests. now that cli args are working, will be a bit easier to make the errors happen. and just letting the program fail sounds good.</p>",
        "id": 303715017,
        "sender_full_name": "Travis",
        "timestamp": 1665605908
    },
    {
        "content": "<p>btw, i tried to repro the wierd zig 0.9.1 behavor i was describing earlier using on latest download build and wasn't able to do so.</p>",
        "id": 303715546,
        "sender_full_name": "Travis",
        "timestamp": 1665606131
    },
    {
        "content": "<p>not sure if this is a good repro or not. </p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>zig version\n<span class=\"go\">0.10.0-dev.4280+c3d67c5c4</span>\n\n<span class=\"gp\">$ </span>cat /tmp/test.zig\n<span class=\"go\">const std = @import(\"std\");</span>\n\n<span class=\"go\">export fn func() callconv(.C) isize {</span>\n<span class=\"go\">    const fname = \"/tmp/test.zigg\";</span>\n<span class=\"go\">    std.debug.print(\"1\\n\", .{});</span>\n<span class=\"go\">    const f = std.fs.cwd().openFile(fname, .{}) catch {</span>\n<span class=\"go\">        return -1;</span>\n<span class=\"go\">    };</span>\n<span class=\"go\">    std.debug.print(\"2\\n\", .{});</span>\n<span class=\"go\">    defer f.close();</span>\n<span class=\"go\">    std.debug.print(\"3\\n\", .{});</span>\n<span class=\"go\">    const s = f.stat() catch {</span>\n<span class=\"go\">        return -1;</span>\n<span class=\"go\">    };</span>\n<span class=\"go\">    std.debug.print(\"stat.size {}\\n\", .{s.size});</span>\n<span class=\"go\">    return 0;</span>\n<span class=\"go\">}</span>\n\n<span class=\"go\">pub export fn main() callconv(.C) void {</span>\n<span class=\"go\">    const x = func();</span>\n<span class=\"go\">    std.debug.print(\"x {}\\n\", .{x});</span>\n<span class=\"go\">}</span>\n\n<span class=\"gp\">$ </span>zig run /tmp/test.zig\n<span class=\"go\">1</span>\n<span class=\"go\">x -1</span>\n</code></pre></div>",
        "id": 303715864,
        "sender_full_name": "Travis",
        "timestamp": 1665606276
    },
    {
        "content": "<p>same result with a normal <code>fn main</code></p>",
        "id": 303718041,
        "sender_full_name": "Travis",
        "timestamp": 1665607137
    },
    {
        "content": "<p>I thought the issue was only with <code>std.process.args/argsAlloc</code> which you aren't calling in that example.</p>",
        "id": 303724003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665609817
    },
    {
        "content": "<p>Or is this for a different issue?</p>",
        "id": 303724038,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665609833
    },
    {
        "content": "<p>a different issue. i couldn't figure out why zig's <code>Dir.openFile</code> and <code>File.stat</code> weren't returning errors and early returning in <code>roc_fx_fileReadBytes</code>'s catches.  thats where the funky error handling is required (checking if fd == 1).</p>",
        "id": 303728613,
        "sender_full_name": "Travis",
        "timestamp": 1665612332
    },
    {
        "content": "<p>what was actually happening is the underlying call to stat was panicking when that should have been caught</p>",
        "id": 303728747,
        "sender_full_name": "Travis",
        "timestamp": 1665612400
    },
    {
        "content": "<p>and finallly after i figured out what was going on (with wierd error traces), the <code>defer file.close()</code> was also panicking. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 303729094,
        "sender_full_name": "Travis",
        "timestamp": 1665612599
    },
    {
        "content": "<p>so that had to be move down a line. i don't remember 0.9.1 having these issues. something seems off.</p>",
        "id": 303729292,
        "sender_full_name": "Travis",
        "timestamp": 1665612696
    },
    {
        "content": "<p>my hunch is some abi issues but its just a guess</p>",
        "id": 303729389,
        "sender_full_name": "Travis",
        "timestamp": 1665612735
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 303735109,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665616278
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> if you have any time could you look at this branch? <a href=\"https://github.com/travisstaloch/roc-cli-platform-zig/tree/detect-read-errs\">https://github.com/travisstaloch/roc-cli-platform-zig/tree/detect-read-errs</a></p>",
        "id": 304063349,
        "sender_full_name": "Travis",
        "timestamp": 1665762709
    },
    {
        "content": "<p>Can probably do so sometime later in the day. Anything specific you want me to look at?</p>",
        "id": 304063661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665762787
    },
    {
        "content": "<p>awesome. yeah: i feel like the host.zig is correct but for some reason i can't catch the errors <a href=\"https://github.com/travisstaloch/roc-cli-platform-zig/blob/detect-read-errs/test/file-read-errors.roc\">https://github.com/travisstaloch/roc-cli-platform-zig/blob/detect-read-errs/test/file-read-errors.roc</a>. does the error matching here look right to you ?</p>",
        "id": 304063978,
        "sender_full_name": "Travis",
        "timestamp": 1665762871
    },
    {
        "content": "<p>i've simplified host.zig too. seems closer to what what you indicated before. ReadErr is now just a struct</p>",
        "id": 304064491,
        "sender_full_name": "Travis",
        "timestamp": 1665762982
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    code: i32,\n    message: RocStr,\n    tag: u8,\n</code></pre></div>",
        "id": 304064558,
        "sender_full_name": "Travis",
        "timestamp": 1665763003
    },
    {
        "content": "<p>this is a branch where i've only changed that ^ file and host.zig.</p>",
        "id": 304065291,
        "sender_full_name": "Travis",
        "timestamp": 1665763194
    },
    {
        "content": "<p><a href=\"https://github.com/travisstaloch/roc-cli-platform-zig/blob/detect-read-errs/platform/host.zig#L254\">https://github.com/travisstaloch/roc-cli-platform-zig/blob/detect-read-errs/platform/host.zig#L254</a></p>",
        "id": 304065299,
        "sender_full_name": "Travis",
        "timestamp": 1665763196
    },
    {
        "content": "<p>my hunch is that the roc error catching is the issue.</p>",
        "id": 304065591,
        "sender_full_name": "Travis",
        "timestamp": 1665763263
    },
    {
        "content": "<p>because when i remove <code>when</code>'s <code>else</code> branch, there is a big error message suggesting to me that the ReadErr types are wrong.</p>",
        "id": 304067922,
        "sender_full_name": "Travis",
        "timestamp": 1665763861
    },
    {
        "content": "<p>even though the match is supposed to be exhaustive</p>",
        "id": 304069546,
        "sender_full_name": "Travis",
        "timestamp": 1665764299
    },
    {
        "content": "<p>ok i think i got the right error matching syntax now.</p>",
        "id": 304072272,
        "sender_full_name": "Travis",
        "timestamp": 1665765109
    },
    {
        "content": "<p>and it seems to be working.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc test/file-read-errors.roc\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">not found</span>\n</code></pre></div>",
        "id": 304072433,
        "sender_full_name": "Travis",
        "timestamp": 1665765143
    },
    {
        "content": "<p><span aria-label=\"duck\" class=\"emoji emoji-1f986\" role=\"img\" title=\"duck\">:duck:</span></p>",
        "id": 304072473,
        "sender_full_name": "Travis",
        "timestamp": 1665765157
    },
    {
        "content": "<p>hunch was right anyway. i was just struggling matching the error.  <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 304072783,
        "sender_full_name": "Travis",
        "timestamp": 1665765240
    },
    {
        "content": "<p>other errors look good now too. except for <code>Unrecognized.</code>  when i try to return one of those i get a segfault. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 304074345,
        "sender_full_name": "Travis",
        "timestamp": 1665765714
    },
    {
        "content": "<p>i pushed another commit. for now it returns an <code>Unrecoginzed</code> and segfaults when file path is 'foo'</p>",
        "id": 304078011,
        "sender_full_name": "Travis",
        "timestamp": 1665766893
    },
    {
        "content": "<p>running this will trigger it:<br>\n<code>$ roc test/file-read-errors.roc</code></p>",
        "id": 304078168,
        "sender_full_name": "Travis",
        "timestamp": 1665766936
    },
    {
        "content": "<p>i've got <em>a solution</em> although i'm not sure its a good idea</p>",
        "id": 304082425,
        "sender_full_name": "Travis",
        "timestamp": 1665768360
    },
    {
        "content": "<p>this layout works with <code>message</code> and <code>code</code> now swapped from the way i had them. and added the <code>_padding</code> field</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ReadErr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">message</span>: <span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">code</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_padding</span>: <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">undefined</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tag</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304082586,
        "sender_full_name": "Travis",
        "timestamp": 1665768418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>roc test/file-read-errors.roc\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">Unrecognized code 69 message fo ur twenty</span>\n</code></pre></div>",
        "id": 304082682,
        "sender_full_name": "Travis",
        "timestamp": 1665768453
    },
    {
        "content": "<p>other tests look good too. i'll push another commit now.</p>",
        "id": 304082883,
        "sender_full_name": "Travis",
        "timestamp": 1665768518
    },
    {
        "content": "<p>So I was looking at the rust datastructures generated by glue and trying to figure out what the correct generation is when I realized that glue definitely has a bug in generation. I am going to take a look at that and them hopefully get back to you on what the correct representation actually is.</p>",
        "id": 304106031,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665777317
    },
    {
        "content": "<p>Ok. So I looked into this a bit more and realized what I though was a bug was actually me looking at the 32bit definition instead of the 64bit definition.</p>",
        "id": 304111632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665779394
    },
    {
        "content": "<p>If I am reading the code correctly, the definition should be:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub const ReadErr = extern struct {\n    code: i32,\n    message: RocStr,\n    tag: u8,\n    _padding: [7]u8 = undefined,\n</code></pre></div>\n<p>This leads to 4 bytes for the i32, 4 bytes of padding, 24 bytes for the RocStr, then the tag as a u8. So 40 bytes total with the tag at index 32.</p>",
        "id": 304112092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665779560
    },
    {
        "content": "<p>ah. hmm ok. well that seems to be correct. not sure how i was getting something that looked correct earlier.  but this is good.</p>",
        "id": 304113440,
        "sender_full_name": "Travis",
        "timestamp": 1665780118
    },
    {
        "content": "<p>thank you  <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 304113447,
        "sender_full_name": "Travis",
        "timestamp": 1665780121
    },
    {
        "content": "<p>in the last little big ive been working on a strictly testing/debugging version of <code>roc_fx_fileReadBytes</code> which just returns errors.</p>",
        "id": 304113749,
        "sender_full_name": "Travis",
        "timestamp": 1665780241
    },
    {
        "content": "<p>wasn't working til now. so this seems correct.</p>",
        "id": 304113784,
        "sender_full_name": "Travis",
        "timestamp": 1665780244
    },
    {
        "content": "<p>glad it works.</p>",
        "id": 304114201,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665780417
    },
    {
        "content": "<p>ooh wait. think i spoke too soon again. <code>Unrecognized</code> doesn't seem to work but the others look good.</p>",
        "id": 304114409,
        "sender_full_name": "Travis",
        "timestamp": 1665780491
    },
    {
        "content": "<p>thats the one with the code/message</p>",
        "id": 304114548,
        "sender_full_name": "Travis",
        "timestamp": 1665780552
    },
    {
        "content": "<p>the tag looks fine but the code and message are wrong.</p>",
        "id": 304114727,
        "sender_full_name": "Travis",
        "timestamp": 1665780616
    },
    {
        "content": "<p>haha shoot i think this is my mistake. nevermind for now.</p>",
        "id": 304114934,
        "sender_full_name": "Travis",
        "timestamp": 1665780708
    },
    {
        "content": "<p>yeah i had Unrecognized/Unsupported mixed up <span aria-label=\"blushing\" class=\"emoji emoji-1f633\" role=\"img\" title=\"blushing\">:blushing:</span></p>",
        "id": 304115056,
        "sender_full_name": "Travis",
        "timestamp": 1665780758
    },
    {
        "content": "<p>and it segfaulted. i had to flip code/message back to the say i had it. this is what seems to work. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ReadErr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">message</span>: <span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">code</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tag</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_padding</span>: <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">undefined</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304115515,
        "sender_full_name": "Travis",
        "timestamp": 1665780954
    },
    {
        "content": "<p>let me make a better test script so i can be sure i'm correct.</p>",
        "id": 304115608,
        "sender_full_name": "Travis",
        "timestamp": 1665780976
    },
    {
        "content": "<p>the reason i thought this was correct in the first place is this: line 182 in <a href=\"http://file_glue.rs\">file_glue.rs</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(any(</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"aarch64\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"x86_64\"</span><span class=\"cp\"></span>\n<span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Clone, Debug, Default, Eq, Ord, Hash, PartialEq, PartialOrd)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">ReadErr_Unrecognized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">f1</span>: <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">f0</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304115884,
        "sender_full_name": "Travis",
        "timestamp": 1665781096
    },
    {
        "content": "<p>the one i'm looking at is examples/cli/cli-platform/src/file_glue.rs</p>",
        "id": 304116024,
        "sender_full_name": "Travis",
        "timestamp": 1665781179
    },
    {
        "content": "<p>*edited added arches</p>",
        "id": 304116451,
        "sender_full_name": "Travis",
        "timestamp": 1665781348
    },
    {
        "content": "<p>and on line 78 theyre backwards for 32 bit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(any(</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"arm\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"x86\"</span><span class=\"cp\"></span>\n<span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Clone, Debug, Default, Eq, Ord, Hash, PartialEq, PartialOrd)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">ReadErr_Unrecognized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">f0</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">f1</span>: <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304116706,
        "sender_full_name": "Travis",
        "timestamp": 1665781444
    },
    {
        "content": "<p>oh, duh</p>",
        "id": 304116739,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665781452
    },
    {
        "content": "<p>My bad</p>",
        "id": 304116753,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665781458
    },
    {
        "content": "<p>We first sort fields by alignment and then by name</p>",
        "id": 304116795,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665781475
    },
    {
        "content": "<p>So on a 64bit system, Str before I32.</p>",
        "id": 304116859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665781504
    },
    {
        "content": "<p>Cause Str contains pointers and is aligned to 8</p>",
        "id": 304116894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665781518
    },
    {
        "content": "<p>On the 32 bit system, they are both aligned to 4.</p>",
        "id": 304116942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665781539
    },
    {
        "content": "<p>I didn't realize that this optimization also applied to tag unions, I thought it was just for records.</p>",
        "id": 304116992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665781562
    },
    {
        "content": "<p>ah good. that makes a lot of sense now.</p>",
        "id": 304117097,
        "sender_full_name": "Travis",
        "timestamp": 1665781592
    },
    {
        "content": "<p>i'm just going to shoot for a working 64 bit impl before thinking about 32</p>",
        "id": 304117208,
        "sender_full_name": "Travis",
        "timestamp": 1665781669
    },
    {
        "content": "<p>but glad to know a little more about these types of details. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 304117346,
        "sender_full_name": "Travis",
        "timestamp": 1665781736
    },
    {
        "content": "<p>Yeah, this is a big reason for glue existing in general.</p>",
        "id": 304117935,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665782016
    },
    {
        "content": "<p>i've got a good test script now passing in error names from the cli. i was experimenting trying to get them all corrected and i this is what i've come up with.  </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ReadErr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">message</span>: <span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">code</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tag</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304122476,
        "sender_full_name": "Travis",
        "timestamp": 1665784253
    },
    {
        "content": "<p>with this all the error tags are good and the <code>Unrecognized</code> payload is too. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 304122601,
        "sender_full_name": "Travis",
        "timestamp": 1665784315
    },
    {
        "content": "<p>Yeah, should work on any 64 bit little endian system.</p>",
        "id": 304122748,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665784388
    },
    {
        "content": "<p>do we need big endian support too?</p>",
        "id": 304122886,
        "sender_full_name": "Travis",
        "timestamp": 1665784445
    },
    {
        "content": "<p>not yet...maybe one day</p>",
        "id": 304123041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665784533
    },
    {
        "content": "<p>currently the only supported platforms are little endian and either 32 or 64 bit</p>",
        "id": 304123067,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665784548
    },
    {
        "content": "<p>ok good to know.</p>",
        "id": 304123187,
        "sender_full_name": "Travis",
        "timestamp": 1665784586
    }
]